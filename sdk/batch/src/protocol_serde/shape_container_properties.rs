// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_container_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ContainerProperties,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.image {
        object.key("image").string(var_1.as_str());
    }
    if let Some(var_2) = &input.vcpus {
        object.key("vcpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.memory {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.command {
        let mut array_5 = object.key("command").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.job_role_arn {
        object.key("jobRoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.volumes {
        let mut array_10 = object.key("volumes").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_volume::ser_volume(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.environment {
        let mut array_14 = object.key("environment").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_key_value_pair::ser_key_value_pair(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.mount_points {
        let mut array_18 = object.key("mountPoints").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_mount_point::ser_mount_point(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.readonly_root_filesystem {
        object.key("readonlyRootFilesystem").boolean(*var_21);
    }
    if let Some(var_22) = &input.privileged {
        object.key("privileged").boolean(*var_22);
    }
    if let Some(var_23) = &input.ulimits {
        let mut array_24 = object.key("ulimits").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_ulimit::ser_ulimit(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.user {
        object.key("user").string(var_27.as_str());
    }
    if let Some(var_28) = &input.instance_type {
        object.key("instanceType").string(var_28.as_str());
    }
    if let Some(var_29) = &input.resource_requirements {
        let mut array_30 = object.key("resourceRequirements").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_resource_requirement::ser_resource_requirement(
                    &mut object_32,
                    item_31,
                )?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.linux_parameters {
        #[allow(unused_mut)]
        let mut object_34 = object.key("linuxParameters").start_object();
        crate::protocol_serde::shape_linux_parameters::ser_linux_parameters(
            &mut object_34,
            var_33,
        )?;
        object_34.finish();
    }
    if let Some(var_35) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_36 = object.key("logConfiguration").start_object();
        crate::protocol_serde::shape_log_configuration::ser_log_configuration(
            &mut object_36,
            var_35,
        )?;
        object_36.finish();
    }
    if let Some(var_37) = &input.secrets {
        let mut array_38 = object.key("secrets").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_secret::ser_secret(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_42 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(
            &mut object_42,
            var_41,
        )?;
        object_42.finish();
    }
    if let Some(var_43) = &input.fargate_platform_configuration {
        #[allow(unused_mut)]
        let mut object_44 = object.key("fargatePlatformConfiguration").start_object();
        crate::protocol_serde::shape_fargate_platform_configuration::ser_fargate_platform_configuration(&mut object_44, var_43)?;
        object_44.finish();
    }
    Ok(())
}

pub(crate) fn de_container_properties<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ContainerProperties>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ContainerPropertiesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "image" => {
                                builder = builder.set_image(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "vcpus" => {
                                builder = builder.set_vcpus(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "memory" => {
                                builder = builder.set_memory(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "command" => {
                                builder = builder.set_command(
                                    crate::protocol_serde::shape_string_list::de_string_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "jobRoleArn" => {
                                builder = builder.set_job_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "executionRoleArn" => {
                                builder = builder.set_execution_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "volumes" => {
                                builder = builder.set_volumes(
                                    crate::protocol_serde::shape_volumes::de_volumes(tokens)?,
                                );
                            }
                            "environment" => {
                                builder = builder.set_environment(
                                    crate::protocol_serde::shape_environment_variables::de_environment_variables(tokens)?
                                );
                            }
                            "mountPoints" => {
                                builder = builder.set_mount_points(
                                    crate::protocol_serde::shape_mount_points::de_mount_points(
                                        tokens,
                                    )?,
                                );
                            }
                            "readonlyRootFilesystem" => {
                                builder = builder.set_readonly_root_filesystem(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "privileged" => {
                                builder = builder.set_privileged(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ulimits" => {
                                builder = builder.set_ulimits(
                                    crate::protocol_serde::shape_ulimits::de_ulimits(tokens)?,
                                );
                            }
                            "user" => {
                                builder = builder.set_user(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "instanceType" => {
                                builder = builder.set_instance_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "resourceRequirements" => {
                                builder = builder.set_resource_requirements(
                                    crate::protocol_serde::shape_resource_requirements::de_resource_requirements(tokens)?
                                );
                            }
                            "linuxParameters" => {
                                builder = builder.set_linux_parameters(
                                    crate::protocol_serde::shape_linux_parameters::de_linux_parameters(tokens)?
                                );
                            }
                            "logConfiguration" => {
                                builder = builder.set_log_configuration(
                                    crate::protocol_serde::shape_log_configuration::de_log_configuration(tokens)?
                                );
                            }
                            "secrets" => {
                                builder = builder.set_secrets(
                                    crate::protocol_serde::shape_secret_list::de_secret_list(
                                        tokens,
                                    )?,
                                );
                            }
                            "networkConfiguration" => {
                                builder = builder.set_network_configuration(
                                    crate::protocol_serde::shape_network_configuration::de_network_configuration(tokens)?
                                );
                            }
                            "fargatePlatformConfiguration" => {
                                builder = builder.set_fargate_platform_configuration(
                                    crate::protocol_serde::shape_fargate_platform_configuration::de_fargate_platform_configuration(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
