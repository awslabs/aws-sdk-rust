// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_job_queue_output_correct_errors(
    mut builder: crate::operation::create_job_queue::builders::CreateJobQueueOutputBuilder,
) -> crate::operation::create_job_queue::builders::CreateJobQueueOutputBuilder {
    if builder.job_queue_name.is_none() {
        builder.job_queue_name = Some(Default::default())
    }
    if builder.job_queue_arn.is_none() {
        builder.job_queue_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_scheduling_policy_output_correct_errors(
    mut builder: crate::operation::create_scheduling_policy::builders::CreateSchedulingPolicyOutputBuilder,
) -> crate::operation::create_scheduling_policy::builders::CreateSchedulingPolicyOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_jobs_output_correct_errors(
    mut builder: crate::operation::list_jobs::builders::ListJobsOutputBuilder,
) -> crate::operation::list_jobs::builders::ListJobsOutputBuilder {
    if builder.job_summary_list.is_none() {
        builder.job_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn register_job_definition_output_correct_errors(
    mut builder: crate::operation::register_job_definition::builders::RegisterJobDefinitionOutputBuilder,
) -> crate::operation::register_job_definition::builders::RegisterJobDefinitionOutputBuilder {
    if builder.job_definition_name.is_none() {
        builder.job_definition_name = Some(Default::default())
    }
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn submit_job_output_correct_errors(
    mut builder: crate::operation::submit_job::builders::SubmitJobOutputBuilder,
) -> crate::operation::submit_job::builders::SubmitJobOutputBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn compute_environment_detail_correct_errors(
    mut builder: crate::types::builders::ComputeEnvironmentDetailBuilder,
) -> crate::types::builders::ComputeEnvironmentDetailBuilder {
    if builder.compute_environment_name.is_none() {
        builder.compute_environment_name = Some(Default::default())
    }
    if builder.compute_environment_arn.is_none() {
        builder.compute_environment_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn job_definition_correct_errors(
    mut builder: crate::types::builders::JobDefinitionBuilder,
) -> crate::types::builders::JobDefinitionBuilder {
    if builder.job_definition_name.is_none() {
        builder.job_definition_name = Some(Default::default())
    }
    if builder.job_definition_arn.is_none() {
        builder.job_definition_arn = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn job_detail_correct_errors(mut builder: crate::types::builders::JobDetailBuilder) -> crate::types::builders::JobDetailBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_queue.is_none() {
        builder.job_queue = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(Default::default())
    }
    if builder.job_definition.is_none() {
        builder.job_definition = Some(Default::default())
    }
    builder
}

pub(crate) fn job_queue_detail_correct_errors(
    mut builder: crate::types::builders::JobQueueDetailBuilder,
) -> crate::types::builders::JobQueueDetailBuilder {
    if builder.job_queue_name.is_none() {
        builder.job_queue_name = Some(Default::default())
    }
    if builder.job_queue_arn.is_none() {
        builder.job_queue_arn = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::JqState>().ok()
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.compute_environment_order.is_none() {
        builder.compute_environment_order = Some(Default::default())
    }
    builder
}

pub(crate) fn job_summary_correct_errors(mut builder: crate::types::builders::JobSummaryBuilder) -> crate::types::builders::JobSummaryBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduling_policy_detail_correct_errors(
    mut builder: crate::types::builders::SchedulingPolicyDetailBuilder,
) -> crate::types::builders::SchedulingPolicyDetailBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduling_policy_listing_detail_correct_errors(
    mut builder: crate::types::builders::SchedulingPolicyListingDetailBuilder,
) -> crate::types::builders::SchedulingPolicyListingDetailBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn compute_resource_correct_errors(
    mut builder: crate::types::builders::ComputeResourceBuilder,
) -> crate::types::builders::ComputeResourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CrType>().ok()
    }
    if builder.maxv_cpus.is_none() {
        builder.maxv_cpus = Some(Default::default())
    }
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_configuration_correct_errors(
    mut builder: crate::types::builders::EksConfigurationBuilder,
) -> crate::types::builders::EksConfigurationBuilder {
    if builder.eks_cluster_arn.is_none() {
        builder.eks_cluster_arn = Some(Default::default())
    }
    if builder.kubernetes_namespace.is_none() {
        builder.kubernetes_namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn node_properties_correct_errors(
    mut builder: crate::types::builders::NodePropertiesBuilder,
) -> crate::types::builders::NodePropertiesBuilder {
    if builder.num_nodes.is_none() {
        builder.num_nodes = Some(Default::default())
    }
    if builder.main_node.is_none() {
        builder.main_node = Some(Default::default())
    }
    if builder.node_range_properties.is_none() {
        builder.node_range_properties = Some(Default::default())
    }
    builder
}

pub(crate) fn compute_environment_order_correct_errors(
    mut builder: crate::types::builders::ComputeEnvironmentOrderBuilder,
) -> crate::types::builders::ComputeEnvironmentOrderBuilder {
    if builder.order.is_none() {
        builder.order = Some(Default::default())
    }
    if builder.compute_environment.is_none() {
        builder.compute_environment = Some(Default::default())
    }
    builder
}

pub(crate) fn ephemeral_storage_correct_errors(
    mut builder: crate::types::builders::EphemeralStorageBuilder,
) -> crate::types::builders::EphemeralStorageBuilder {
    if builder.size_in_gib.is_none() {
        builder.size_in_gib = Some(Default::default())
    }
    builder
}

pub(crate) fn log_configuration_correct_errors(
    mut builder: crate::types::builders::LogConfigurationBuilder,
) -> crate::types::builders::LogConfigurationBuilder {
    if builder.log_driver.is_none() {
        builder.log_driver = "no value was set".parse::<crate::types::LogDriver>().ok()
    }
    builder
}

pub(crate) fn ec2_configuration_correct_errors(
    mut builder: crate::types::builders::Ec2ConfigurationBuilder,
) -> crate::types::builders::Ec2ConfigurationBuilder {
    if builder.image_type.is_none() {
        builder.image_type = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluate_on_exit_correct_errors(
    mut builder: crate::types::builders::EvaluateOnExitBuilder,
) -> crate::types::builders::EvaluateOnExitBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::RetryAction>().ok()
    }
    builder
}

pub(crate) fn node_range_property_correct_errors(
    mut builder: crate::types::builders::NodeRangePropertyBuilder,
) -> crate::types::builders::NodeRangePropertyBuilder {
    if builder.target_nodes.is_none() {
        builder.target_nodes = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_requirement_correct_errors(
    mut builder: crate::types::builders::ResourceRequirementBuilder,
) -> crate::types::builders::ResourceRequirementBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn secret_correct_errors(mut builder: crate::types::builders::SecretBuilder) -> crate::types::builders::SecretBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value_from.is_none() {
        builder.value_from = Some(Default::default())
    }
    builder
}

pub(crate) fn share_attributes_correct_errors(
    mut builder: crate::types::builders::ShareAttributesBuilder,
) -> crate::types::builders::ShareAttributesBuilder {
    if builder.share_identifier.is_none() {
        builder.share_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn ulimit_correct_errors(mut builder: crate::types::builders::UlimitBuilder) -> crate::types::builders::UlimitBuilder {
    if builder.hard_limit.is_none() {
        builder.hard_limit = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.soft_limit.is_none() {
        builder.soft_limit = Some(Default::default())
    }
    builder
}

pub(crate) fn device_correct_errors(mut builder: crate::types::builders::DeviceBuilder) -> crate::types::builders::DeviceBuilder {
    if builder.host_path.is_none() {
        builder.host_path = Some(Default::default())
    }
    builder
}

pub(crate) fn efs_volume_configuration_correct_errors(
    mut builder: crate::types::builders::EfsVolumeConfigurationBuilder,
) -> crate::types::builders::EfsVolumeConfigurationBuilder {
    if builder.file_system_id.is_none() {
        builder.file_system_id = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_container_correct_errors(mut builder: crate::types::builders::EksContainerBuilder) -> crate::types::builders::EksContainerBuilder {
    if builder.image.is_none() {
        builder.image = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_volume_correct_errors(mut builder: crate::types::builders::EksVolumeBuilder) -> crate::types::builders::EksVolumeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn tmpfs_correct_errors(mut builder: crate::types::builders::TmpfsBuilder) -> crate::types::builders::TmpfsBuilder {
    if builder.container_path.is_none() {
        builder.container_path = Some(Default::default())
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_secret_correct_errors(mut builder: crate::types::builders::EksSecretBuilder) -> crate::types::builders::EksSecretBuilder {
    if builder.secret_name.is_none() {
        builder.secret_name = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_container_environment_variable_correct_errors(
    mut builder: crate::types::builders::EksContainerEnvironmentVariableBuilder,
) -> crate::types::builders::EksContainerEnvironmentVariableBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
