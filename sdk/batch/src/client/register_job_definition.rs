// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterJobDefinition`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_definition_name(impl Into<String>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::job_definition_name) / [`set_job_definition_name(Option<String>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_job_definition_name): <p>The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    ///   - [`r#type(JobDefinitionType)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::type) / [`set_type(Option<JobDefinitionType>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_type): <p>The type of job definition. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the <i>Batch User Guide</i>.</p> <note>   <p>If the job is run on Fargate resources, then <code>multinode</code> isn't supported.</p>  </note>
    ///   - [`parameters(HashMap<String, String>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::parameters) / [`set_parameters(Option<HashMap<String, String>>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_parameters): <p>Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.</p>
    ///   - [`scheduling_priority(i32)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::scheduling_priority) / [`set_scheduling_priority(Option<i32>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_scheduling_priority): <p>The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.</p>  <p>The minimum supported value is 0 and the maximum supported value is 9999.</p>
    ///   - [`container_properties(ContainerProperties)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::container_properties) / [`set_container_properties(Option<ContainerProperties>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_container_properties): <p>An object with various properties specific to Amazon ECS based single-node container-based jobs. If the job definition's <code>type</code> parameter is <code>container</code>, then you must specify either <code>containerProperties</code> or <code>nodeProperties</code>. This must not be specified for Amazon EKS based job definitions.</p> <note>   <p>If the job runs on Fargate resources, then you must not specify <code>nodeProperties</code>; use only <code>containerProperties</code>.</p>  </note>
    ///   - [`node_properties(NodeProperties)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::node_properties) / [`set_node_properties(Option<NodeProperties>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_node_properties): <p>An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-parallel-jobs.html">Multi-node Parallel Jobs</a> in the <i>Batch User Guide</i>. If the job definition's <code>type</code> parameter is <code>container</code>, then you must specify either <code>containerProperties</code> or <code>nodeProperties</code>.</p> <note>   <p>If the job runs on Fargate resources, then you must not specify <code>nodeProperties</code>; use <code>containerProperties</code> instead.</p>  </note> <note>   <p>If the job runs on Amazon EKS resources, then you must not specify <code>nodeProperties</code>.</p>  </note>
    ///   - [`retry_strategy(RetryStrategy)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::retry_strategy) / [`set_retry_strategy(Option<RetryStrategy>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_retry_strategy): <p>The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a <code>SubmitJob</code> operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.</p>
    ///   - [`propagate_tags(bool)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::propagate_tags) / [`set_propagate_tags(Option<bool>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_propagate_tags): <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags are not propagated. Tags can only be propagated to the tasks during task creation. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p> <note>   <p>If the job runs on Amazon EKS resources, then you must not specify <code>propagateTags</code>.</p>  </note>
    ///   - [`timeout(JobTimeout)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::timeout) / [`set_timeout(Option<JobTimeout>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_timeout): <p>The timeout configuration for jobs that are submitted with this job definition, after which Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that's specified during a <code>SubmitJob</code> operation overrides the timeout configuration defined here. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_timeouts.html">Job Timeouts</a> in the <i>Batch User Guide</i>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_tags): <p>The tags that you apply to the job definition to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging Amazon Web Services Resources</a> in <i>Batch User Guide</i>.</p>
    ///   - [`platform_capabilities(Vec<PlatformCapability>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::platform_capabilities) / [`set_platform_capabilities(Option<Vec<PlatformCapability>>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_platform_capabilities): <p>The platform capabilities required by the job definition. If no value is specified, it defaults to <code>EC2</code>. To run the job on Fargate resources, specify <code>FARGATE</code>.</p> <note>   <p>If the job runs on Amazon EKS resources, then you must not specify <code>platformCapabilities</code>.</p>  </note>
    ///   - [`eks_properties(EksProperties)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::eks_properties) / [`set_eks_properties(Option<EksProperties>)`](crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::set_eks_properties): <p>An object with various properties that are specific to Amazon EKS based jobs. This must not be specified for Amazon ECS based job definitions.</p>
    /// - On success, responds with [`RegisterJobDefinitionOutput`](crate::operation::register_job_definition::RegisterJobDefinitionOutput) with field(s):
    ///   - [`job_definition_name(Option<String>)`](crate::operation::register_job_definition::RegisterJobDefinitionOutput::job_definition_name): <p>The name of the job definition.</p>
    ///   - [`job_definition_arn(Option<String>)`](crate::operation::register_job_definition::RegisterJobDefinitionOutput::job_definition_arn): <p>The Amazon Resource Name (ARN) of the job definition.</p>
    ///   - [`revision(Option<i32>)`](crate::operation::register_job_definition::RegisterJobDefinitionOutput::revision): <p>The revision of the job definition.</p>
    /// - On failure, responds with [`SdkError<RegisterJobDefinitionError>`](crate::operation::register_job_definition::RegisterJobDefinitionError)
    pub fn register_job_definition(
        &self,
    ) -> crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder
    {
        crate::operation::register_job_definition::builders::RegisterJobDefinitionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
