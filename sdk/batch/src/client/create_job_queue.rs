// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateJobQueue`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_queue_name(impl Into<String>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::job_queue_name) / [`set_job_queue_name(Option<String>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::set_job_queue_name): <p>The name of the job queue. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    ///   - [`state(JqState)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::state) / [`set_state(Option<JqState>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::set_state): <p>The state of the job queue. If the job queue state is <code>ENABLED</code>, it is able to accept jobs. If the job queue state is <code>DISABLED</code>, new jobs can't be added to the queue, but jobs already in the queue can finish.</p>
    ///   - [`scheduling_policy_arn(impl Into<String>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::scheduling_policy_arn) / [`set_scheduling_policy_arn(Option<String>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::set_scheduling_policy_arn): <p>The Amazon Resource Name (ARN) of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy. The format is <code>aws:<i>Partition</i>:batch:<i>Region</i>:<i>Account</i>:scheduling-policy/<i>Name</i> </code>. An example is <code>aws:aws:batch:us-west-2:123456789012:scheduling-policy/MySchedulingPolicy</code>.</p>
    ///   - [`priority(i32)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::priority) / [`set_priority(Option<i32>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::set_priority): <p>The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order. For example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>. All of the compute environments must be either EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and Fargate compute environments can't be mixed.</p>
    ///   - [`compute_environment_order(Vec<ComputeEnvironmentOrder>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::compute_environment_order) / [`set_compute_environment_order(Option<Vec<ComputeEnvironmentOrder>>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::set_compute_environment_order): <p>The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the <code>VALID</code> state before you can associate them with a job queue. You can associate up to three compute environments with a job queue. All of the compute environments must be either EC2 (<code>EC2</code> or <code>SPOT</code>) or Fargate (<code>FARGATE</code> or <code>FARGATE_SPOT</code>); EC2 and Fargate compute environments can't be mixed.</p> <note>   <p>All compute environments that are associated with a job queue must share the same architecture. Batch doesn't support mixing compute environment architecture types in a single job queue.</p>  </note>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::set_tags): <p>The tags that you apply to the job queue to help you categorize and organize your resources. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a> in <i>Batch User Guide</i>.</p>
    /// - On success, responds with [`CreateJobQueueOutput`](crate::operation::create_job_queue::CreateJobQueueOutput) with field(s):
    ///   - [`job_queue_name(Option<String>)`](crate::operation::create_job_queue::CreateJobQueueOutput::job_queue_name): <p>The name of the job queue.</p>
    ///   - [`job_queue_arn(Option<String>)`](crate::operation::create_job_queue::CreateJobQueueOutput::job_queue_arn): <p>The Amazon Resource Name (ARN) of the job queue.</p>
    /// - On failure, responds with [`SdkError<CreateJobQueueError>`](crate::operation::create_job_queue::CreateJobQueueError)
    pub fn create_job_queue(
        &self,
    ) -> crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder {
        crate::operation::create_job_queue::builders::CreateJobQueueFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
