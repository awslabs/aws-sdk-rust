// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the weights for the fair share identifiers for the fair share policy. Fair share identifiers that aren't included have a default weight of <code>1.0</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ShareAttributes {
    /// <p>A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a <code>shareIdentifier</code> of <code>UserA*</code> and another that specifies a <code>shareIdentifier</code> of <code>UserA-1</code>.</p>
    /// <p>There can be no more than 500 fair share identifiers active in a job queue.</p>
    /// <p>The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).</p>
    #[doc(hidden)]
    pub share_identifier: std::option::Option<std::string::String>,
    /// <p>The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.</p>
    /// <p>The smallest supported value is 0.0001, and the largest supported value is 999.9999.</p>
    #[doc(hidden)]
    pub weight_factor: std::option::Option<f32>,
}
impl ShareAttributes {
    /// <p>A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a <code>shareIdentifier</code> of <code>UserA*</code> and another that specifies a <code>shareIdentifier</code> of <code>UserA-1</code>.</p>
    /// <p>There can be no more than 500 fair share identifiers active in a job queue.</p>
    /// <p>The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).</p>
    pub fn share_identifier(&self) -> std::option::Option<&str> {
        self.share_identifier.as_deref()
    }
    /// <p>The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.</p>
    /// <p>The smallest supported value is 0.0001, and the largest supported value is 999.9999.</p>
    pub fn weight_factor(&self) -> std::option::Option<f32> {
        self.weight_factor
    }
}
impl ShareAttributes {
    /// Creates a new builder-style object to manufacture [`ShareAttributes`](crate::types::ShareAttributes).
    pub fn builder() -> crate::types::builders::ShareAttributesBuilder {
        crate::types::builders::ShareAttributesBuilder::default()
    }
}

/// A builder for [`ShareAttributes`](crate::types::ShareAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ShareAttributesBuilder {
    pub(crate) share_identifier: std::option::Option<std::string::String>,
    pub(crate) weight_factor: std::option::Option<f32>,
}
impl ShareAttributesBuilder {
    /// <p>A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a <code>shareIdentifier</code> of <code>UserA*</code> and another that specifies a <code>shareIdentifier</code> of <code>UserA-1</code>.</p>
    /// <p>There can be no more than 500 fair share identifiers active in a job queue.</p>
    /// <p>The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).</p>
    pub fn share_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.share_identifier = Some(input.into());
        self
    }
    /// <p>A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a <code>shareIdentifier</code> of <code>UserA*</code> and another that specifies a <code>shareIdentifier</code> of <code>UserA-1</code>.</p>
    /// <p>There can be no more than 500 fair share identifiers active in a job queue.</p>
    /// <p>The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).</p>
    pub fn set_share_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.share_identifier = input;
        self
    }
    /// <p>The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.</p>
    /// <p>The smallest supported value is 0.0001, and the largest supported value is 999.9999.</p>
    pub fn weight_factor(mut self, input: f32) -> Self {
        self.weight_factor = Some(input);
        self
    }
    /// <p>The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.</p>
    /// <p>The smallest supported value is 0.0001, and the largest supported value is 999.9999.</p>
    pub fn set_weight_factor(mut self, input: std::option::Option<f32>) -> Self {
        self.weight_factor = input;
        self
    }
    /// Consumes the builder and constructs a [`ShareAttributes`](crate::types::ShareAttributes).
    pub fn build(self) -> crate::types::ShareAttributes {
        crate::types::ShareAttributes {
            share_identifier: self.share_identifier,
            weight_factor: self.weight_factor,
        }
    }
}
