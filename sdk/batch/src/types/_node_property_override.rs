// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The object that represents any node overrides to a job definition that's used in a <code>SubmitJob</code> API operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodePropertyOverride {
    /// <p>The range of nodes, using node index values, that's used to override. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range.</p>
    #[doc(hidden)]
    pub target_nodes: std::option::Option<std::string::String>,
    /// <p>The overrides that are sent to a node range.</p>
    #[doc(hidden)]
    pub container_overrides: std::option::Option<crate::types::ContainerOverrides>,
}
impl NodePropertyOverride {
    /// <p>The range of nodes, using node index values, that's used to override. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range.</p>
    pub fn target_nodes(&self) -> std::option::Option<&str> {
        self.target_nodes.as_deref()
    }
    /// <p>The overrides that are sent to a node range.</p>
    pub fn container_overrides(&self) -> std::option::Option<&crate::types::ContainerOverrides> {
        self.container_overrides.as_ref()
    }
}
impl NodePropertyOverride {
    /// Creates a new builder-style object to manufacture [`NodePropertyOverride`](crate::types::NodePropertyOverride).
    pub fn builder() -> crate::types::builders::NodePropertyOverrideBuilder {
        crate::types::builders::NodePropertyOverrideBuilder::default()
    }
}

/// A builder for [`NodePropertyOverride`](crate::types::NodePropertyOverride).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodePropertyOverrideBuilder {
    pub(crate) target_nodes: std::option::Option<std::string::String>,
    pub(crate) container_overrides: std::option::Option<crate::types::ContainerOverrides>,
}
impl NodePropertyOverrideBuilder {
    /// <p>The range of nodes, using node index values, that's used to override. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range.</p>
    pub fn target_nodes(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_nodes = Some(input.into());
        self
    }
    /// <p>The range of nodes, using node index values, that's used to override. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range.</p>
    pub fn set_target_nodes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_nodes = input;
        self
    }
    /// <p>The overrides that are sent to a node range.</p>
    pub fn container_overrides(mut self, input: crate::types::ContainerOverrides) -> Self {
        self.container_overrides = Some(input);
        self
    }
    /// <p>The overrides that are sent to a node range.</p>
    pub fn set_container_overrides(
        mut self,
        input: std::option::Option<crate::types::ContainerOverrides>,
    ) -> Self {
        self.container_overrides = input;
        self
    }
    /// Consumes the builder and constructs a [`NodePropertyOverride`](crate::types::NodePropertyOverride).
    pub fn build(self) -> crate::types::NodePropertyOverride {
        crate::types::NodePropertyOverride {
            target_nodes: self.target_nodes,
            container_overrides: self.container_overrides,
        }
    }
}
