// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the array properties of a job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ArrayPropertiesDetail {
    /// <p>A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.</p>
    #[doc(hidden)]
    pub status_summary: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    /// <p>The size of the array job. This parameter is returned for parent array jobs.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i32>,
    /// <p>The job index within the array that's associated with this job. This parameter is returned for array job children.</p>
    #[doc(hidden)]
    pub index: std::option::Option<i32>,
}
impl ArrayPropertiesDetail {
    /// <p>A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.</p>
    pub fn status_summary(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, i32>> {
        self.status_summary.as_ref()
    }
    /// <p>The size of the array job. This parameter is returned for parent array jobs.</p>
    pub fn size(&self) -> std::option::Option<i32> {
        self.size
    }
    /// <p>The job index within the array that's associated with this job. This parameter is returned for array job children.</p>
    pub fn index(&self) -> std::option::Option<i32> {
        self.index
    }
}
impl ArrayPropertiesDetail {
    /// Creates a new builder-style object to manufacture [`ArrayPropertiesDetail`](crate::types::ArrayPropertiesDetail).
    pub fn builder() -> crate::types::builders::ArrayPropertiesDetailBuilder {
        crate::types::builders::ArrayPropertiesDetailBuilder::default()
    }
}

/// A builder for [`ArrayPropertiesDetail`](crate::types::ArrayPropertiesDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ArrayPropertiesDetailBuilder {
    pub(crate) status_summary:
        std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    pub(crate) size: std::option::Option<i32>,
    pub(crate) index: std::option::Option<i32>,
}
impl ArrayPropertiesDetailBuilder {
    /// Adds a key-value pair to `status_summary`.
    ///
    /// To override the contents of this collection use [`set_status_summary`](Self::set_status_summary).
    ///
    /// <p>A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.</p>
    pub fn status_summary(mut self, k: impl Into<std::string::String>, v: i32) -> Self {
        let mut hash_map = self.status_summary.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.status_summary = Some(hash_map);
        self
    }
    /// <p>A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.</p>
    pub fn set_status_summary(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, i32>>,
    ) -> Self {
        self.status_summary = input;
        self
    }
    /// <p>The size of the array job. This parameter is returned for parent array jobs.</p>
    pub fn size(mut self, input: i32) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size of the array job. This parameter is returned for parent array jobs.</p>
    pub fn set_size(mut self, input: std::option::Option<i32>) -> Self {
        self.size = input;
        self
    }
    /// <p>The job index within the array that's associated with this job. This parameter is returned for array job children.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>The job index within the array that's associated with this job. This parameter is returned for array job children.</p>
    pub fn set_index(mut self, input: std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// Consumes the builder and constructs a [`ArrayPropertiesDetail`](crate::types::ArrayPropertiesDetail).
    pub fn build(self) -> crate::types::ArrayPropertiesDetail {
        crate::types::ArrayPropertiesDetail {
            status_summary: self.status_summary,
            size: self.size,
            index: self.index,
        }
    }
}
