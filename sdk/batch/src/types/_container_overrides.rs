// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The overrides that should be sent to a container.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContainerOverrides {
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the <code>vcpus</code> parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>vcpus</code> parameter set in the job definition, but doesn't override any vCPU requirement specified in the <code>resourceRequirements</code> structure in the job definition. To override vCPU requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>VCPU</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    #[doc(hidden)]
    pub vcpus: std::option::Option<i32>,
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>memory</code> parameter set in the job definition, but doesn't override any memory requirement that's specified in the <code>resourceRequirements</code> structure in the job definition. To override memory requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>MEMORY</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    #[doc(hidden)]
    pub memory: std::option::Option<i32>,
    /// <p>The command to send to the container that overrides the default command from the Docker image or the job definition.</p>
    #[doc(hidden)]
    pub command: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>AWS_BATCH</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    #[doc(hidden)]
    pub environment: std::option::Option<std::vec::Vec<crate::types::KeyValuePair>>,
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    #[doc(hidden)]
    pub resource_requirements:
        std::option::Option<std::vec::Vec<crate::types::ResourceRequirement>>,
}
impl ContainerOverrides {
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the <code>vcpus</code> parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>vcpus</code> parameter set in the job definition, but doesn't override any vCPU requirement specified in the <code>resourceRequirements</code> structure in the job definition. To override vCPU requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>VCPU</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    pub fn vcpus(&self) -> std::option::Option<i32> {
        self.vcpus
    }
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>memory</code> parameter set in the job definition, but doesn't override any memory requirement that's specified in the <code>resourceRequirements</code> structure in the job definition. To override memory requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>MEMORY</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    pub fn memory(&self) -> std::option::Option<i32> {
        self.memory
    }
    /// <p>The command to send to the container that overrides the default command from the Docker image or the job definition.</p>
    pub fn command(&self) -> std::option::Option<&[std::string::String]> {
        self.command.as_deref()
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>AWS_BATCH</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub fn environment(&self) -> std::option::Option<&[crate::types::KeyValuePair]> {
        self.environment.as_deref()
    }
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub fn resource_requirements(
        &self,
    ) -> std::option::Option<&[crate::types::ResourceRequirement]> {
        self.resource_requirements.as_deref()
    }
}
impl ContainerOverrides {
    /// Creates a new builder-style object to manufacture [`ContainerOverrides`](crate::types::ContainerOverrides).
    pub fn builder() -> crate::types::builders::ContainerOverridesBuilder {
        crate::types::builders::ContainerOverridesBuilder::default()
    }
}

/// A builder for [`ContainerOverrides`](crate::types::ContainerOverrides).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContainerOverridesBuilder {
    pub(crate) vcpus: std::option::Option<i32>,
    pub(crate) memory: std::option::Option<i32>,
    pub(crate) command: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) environment: std::option::Option<std::vec::Vec<crate::types::KeyValuePair>>,
    pub(crate) resource_requirements:
        std::option::Option<std::vec::Vec<crate::types::ResourceRequirement>>,
}
impl ContainerOverridesBuilder {
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the <code>vcpus</code> parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>vcpus</code> parameter set in the job definition, but doesn't override any vCPU requirement specified in the <code>resourceRequirements</code> structure in the job definition. To override vCPU requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>VCPU</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    pub fn vcpus(mut self, input: i32) -> Self {
        self.vcpus = Some(input);
        self
    }
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the <code>vcpus</code> parameter that's set in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>vcpus</code> parameter set in the job definition, but doesn't override any vCPU requirement specified in the <code>resourceRequirements</code> structure in the job definition. To override vCPU requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>VCPU</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    pub fn set_vcpus(mut self, input: std::option::Option<i32>) -> Self {
        self.vcpus = input;
        self
    }
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>memory</code> parameter set in the job definition, but doesn't override any memory requirement that's specified in the <code>resourceRequirements</code> structure in the job definition. To override memory requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>MEMORY</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    pub fn memory(mut self, input: i32) -> Self {
        self.memory = Some(input);
        self
    }
    /// <p>This parameter is deprecated, use <code>resourceRequirements</code> to override the memory requirements specified in the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on EC2 resources, it overrides the <code>memory</code> parameter set in the job definition, but doesn't override any memory requirement that's specified in the <code>resourceRequirements</code> structure in the job definition. To override memory requirements that are specified in the <code>resourceRequirements</code> structure in the job definition, <code>resourceRequirements</code> must be specified in the <code>SubmitJob</code> request, with <code>type</code> set to <code>MEMORY</code> and <code>value</code> set to the new value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#override-resource-requirements">Can't override job definition resource requirements</a> in the <i>Batch User Guide</i>.</p>
    #[deprecated(note = "This field is deprecated, use resourceRequirements instead.")]
    pub fn set_memory(mut self, input: std::option::Option<i32>) -> Self {
        self.memory = input;
        self
    }
    /// Appends an item to `command`.
    ///
    /// To override the contents of this collection use [`set_command`](Self::set_command).
    ///
    /// <p>The command to send to the container that overrides the default command from the Docker image or the job definition.</p>
    pub fn command(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.command.unwrap_or_default();
        v.push(input.into());
        self.command = Some(v);
        self
    }
    /// <p>The command to send to the container that overrides the default command from the Docker image or the job definition.</p>
    pub fn set_command(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.command = input;
        self
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// Appends an item to `environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>AWS_BATCH</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub fn environment(mut self, input: crate::types::KeyValuePair) -> Self {
        let mut v = self.environment.unwrap_or_default();
        v.push(input);
        self.environment = Some(v);
        self
    }
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>AWS_BATCH</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub fn set_environment(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::KeyValuePair>>,
    ) -> Self {
        self.environment = input;
        self
    }
    /// Appends an item to `resource_requirements`.
    ///
    /// To override the contents of this collection use [`set_resource_requirements`](Self::set_resource_requirements).
    ///
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub fn resource_requirements(mut self, input: crate::types::ResourceRequirement) -> Self {
        let mut v = self.resource_requirements.unwrap_or_default();
        v.push(input);
        self.resource_requirements = Some(v);
        self
    }
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub fn set_resource_requirements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceRequirement>>,
    ) -> Self {
        self.resource_requirements = input;
        self
    }
    /// Consumes the builder and constructs a [`ContainerOverrides`](crate::types::ContainerOverrides).
    pub fn build(self) -> crate::types::ContainerOverrides {
        crate::types::ContainerOverrides {
            vcpus: self.vcpus,
            memory: self.memory,
            command: self.command,
            instance_type: self.instance_type,
            environment: self.environment,
            resource_requirements: self.resource_requirements,
        }
    }
}
