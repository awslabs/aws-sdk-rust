// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The platform configuration for jobs that are running on Fargate resources. Jobs that run on EC2 resources must not specify this parameter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FargatePlatformConfiguration {
    /// <p>The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the <code>LATEST</code> platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    #[doc(hidden)]
    pub platform_version: std::option::Option<std::string::String>,
}
impl FargatePlatformConfiguration {
    /// <p>The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the <code>LATEST</code> platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    pub fn platform_version(&self) -> std::option::Option<&str> {
        self.platform_version.as_deref()
    }
}
impl FargatePlatformConfiguration {
    /// Creates a new builder-style object to manufacture [`FargatePlatformConfiguration`](crate::types::FargatePlatformConfiguration).
    pub fn builder() -> crate::types::builders::FargatePlatformConfigurationBuilder {
        crate::types::builders::FargatePlatformConfigurationBuilder::default()
    }
}

/// A builder for [`FargatePlatformConfiguration`](crate::types::FargatePlatformConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FargatePlatformConfigurationBuilder {
    pub(crate) platform_version: std::option::Option<std::string::String>,
}
impl FargatePlatformConfigurationBuilder {
    /// <p>The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the <code>LATEST</code> platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    pub fn platform_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_version = Some(input.into());
        self
    }
    /// <p>The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the <code>LATEST</code> platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">Fargate platform versions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
    pub fn set_platform_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// Consumes the builder and constructs a [`FargatePlatformConfiguration`](crate::types::FargatePlatformConfiguration).
    pub fn build(self) -> crate::types::FargatePlatformConfiguration {
        crate::types::FargatePlatformConfiguration {
            platform_version: self.platform_version,
        }
    }
}
