// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a job timeout configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobTimeout {
    /// <p>The job timeout time (in seconds) that's measured from the job attempt's <code>startedAt</code> timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.</p>
    /// <p>For array jobs, the timeout applies to the child jobs, not to the parent array job.</p>
    /// <p>For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.</p>
    #[doc(hidden)]
    pub attempt_duration_seconds: std::option::Option<i32>,
}
impl JobTimeout {
    /// <p>The job timeout time (in seconds) that's measured from the job attempt's <code>startedAt</code> timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.</p>
    /// <p>For array jobs, the timeout applies to the child jobs, not to the parent array job.</p>
    /// <p>For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.</p>
    pub fn attempt_duration_seconds(&self) -> std::option::Option<i32> {
        self.attempt_duration_seconds
    }
}
impl JobTimeout {
    /// Creates a new builder-style object to manufacture [`JobTimeout`](crate::types::JobTimeout).
    pub fn builder() -> crate::types::builders::JobTimeoutBuilder {
        crate::types::builders::JobTimeoutBuilder::default()
    }
}

/// A builder for [`JobTimeout`](crate::types::JobTimeout).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobTimeoutBuilder {
    pub(crate) attempt_duration_seconds: std::option::Option<i32>,
}
impl JobTimeoutBuilder {
    /// <p>The job timeout time (in seconds) that's measured from the job attempt's <code>startedAt</code> timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.</p>
    /// <p>For array jobs, the timeout applies to the child jobs, not to the parent array job.</p>
    /// <p>For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.</p>
    pub fn attempt_duration_seconds(mut self, input: i32) -> Self {
        self.attempt_duration_seconds = Some(input);
        self
    }
    /// <p>The job timeout time (in seconds) that's measured from the job attempt's <code>startedAt</code> timestamp. After this time passes, Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.</p>
    /// <p>For array jobs, the timeout applies to the child jobs, not to the parent array job.</p>
    /// <p>For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.</p>
    pub fn set_attempt_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.attempt_duration_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`JobTimeout`](crate::types::JobTimeout).
    pub fn build(self) -> crate::types::JobTimeout {
        crate::types::JobTimeout {
            attempt_duration_seconds: self.attempt_duration_seconds,
        }
    }
}
