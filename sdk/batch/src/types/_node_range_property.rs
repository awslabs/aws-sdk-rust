// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the properties of the node range for a multi-node parallel job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeRangeProperty {
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    #[doc(hidden)]
    pub target_nodes: std::option::Option<std::string::String>,
    /// <p>The container details for the node range.</p>
    #[doc(hidden)]
    pub container: std::option::Option<crate::types::ContainerProperties>,
}
impl NodeRangeProperty {
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub fn target_nodes(&self) -> std::option::Option<&str> {
        self.target_nodes.as_deref()
    }
    /// <p>The container details for the node range.</p>
    pub fn container(&self) -> std::option::Option<&crate::types::ContainerProperties> {
        self.container.as_ref()
    }
}
impl NodeRangeProperty {
    /// Creates a new builder-style object to manufacture [`NodeRangeProperty`](crate::types::NodeRangeProperty).
    pub fn builder() -> crate::types::builders::NodeRangePropertyBuilder {
        crate::types::builders::NodeRangePropertyBuilder::default()
    }
}

/// A builder for [`NodeRangeProperty`](crate::types::NodeRangeProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeRangePropertyBuilder {
    pub(crate) target_nodes: std::option::Option<std::string::String>,
    pub(crate) container: std::option::Option<crate::types::ContainerProperties>,
}
impl NodeRangePropertyBuilder {
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub fn target_nodes(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_nodes = Some(input.into());
        self
    }
    /// <p>The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (<code>0:n</code>). You can nest node ranges (for example, <code>0:10</code> and <code>4:5</code>). In this case, the <code>4:5</code> range properties override the <code>0:10</code> properties.</p>
    pub fn set_target_nodes(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_nodes = input;
        self
    }
    /// <p>The container details for the node range.</p>
    pub fn container(mut self, input: crate::types::ContainerProperties) -> Self {
        self.container = Some(input);
        self
    }
    /// <p>The container details for the node range.</p>
    pub fn set_container(
        mut self,
        input: std::option::Option<crate::types::ContainerProperties>,
    ) -> Self {
        self.container = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeRangeProperty`](crate::types::NodeRangeProperty).
    pub fn build(self) -> crate::types::NodeRangeProperty {
        crate::types::NodeRangeProperty {
            target_nodes: self.target_nodes,
            container: self.container,
        }
    }
}
