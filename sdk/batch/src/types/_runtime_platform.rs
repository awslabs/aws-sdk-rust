// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the compute environment architecture for Batch jobs on Fargate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuntimePlatform {
    /// <p>The operating system for the compute environment. Valid values are: <code>LINUX</code> (default), <code>WINDOWS_SERVER_2019_CORE</code>, <code>WINDOWS_SERVER_2019_FULL</code>, <code>WINDOWS_SERVER_2022_CORE</code>, and <code>WINDOWS_SERVER_2022_FULL</code>.</p><note>
    /// <p>The following parameters can’t be set for Windows containers: <code>linuxParameters</code>, <code>privileged</code>, <code>user</code>, <code>ulimits</code>, <code>readonlyRootFilesystem</code>, and <code>efsVolumeConfiguration</code>.</p>
    /// </note> <note>
    /// <p>The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is <code>LINUX</code>, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub operating_system_family: ::std::option::Option<::std::string::String>,
    /// <p>The vCPU architecture. The default value is <code>X86_64</code>. Valid values are <code>X86_64</code> and <code>ARM64</code>.</p><note>
    /// <p>This parameter must be set to <code>X86_64</code> for Windows containers.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub cpu_architecture: ::std::option::Option<::std::string::String>,
}
impl RuntimePlatform {
    /// <p>The operating system for the compute environment. Valid values are: <code>LINUX</code> (default), <code>WINDOWS_SERVER_2019_CORE</code>, <code>WINDOWS_SERVER_2019_FULL</code>, <code>WINDOWS_SERVER_2022_CORE</code>, and <code>WINDOWS_SERVER_2022_FULL</code>.</p><note>
    /// <p>The following parameters can’t be set for Windows containers: <code>linuxParameters</code>, <code>privileged</code>, <code>user</code>, <code>ulimits</code>, <code>readonlyRootFilesystem</code>, and <code>efsVolumeConfiguration</code>.</p>
    /// </note> <note>
    /// <p>The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is <code>LINUX</code>, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn operating_system_family(&self) -> ::std::option::Option<&str> {
        self.operating_system_family.as_deref()
    }
    /// <p>The vCPU architecture. The default value is <code>X86_64</code>. Valid values are <code>X86_64</code> and <code>ARM64</code>.</p><note>
    /// <p>This parameter must be set to <code>X86_64</code> for Windows containers.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn cpu_architecture(&self) -> ::std::option::Option<&str> {
        self.cpu_architecture.as_deref()
    }
}
impl RuntimePlatform {
    /// Creates a new builder-style object to manufacture [`RuntimePlatform`](crate::types::RuntimePlatform).
    pub fn builder() -> crate::types::builders::RuntimePlatformBuilder {
        crate::types::builders::RuntimePlatformBuilder::default()
    }
}

/// A builder for [`RuntimePlatform`](crate::types::RuntimePlatform).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuntimePlatformBuilder {
    pub(crate) operating_system_family: ::std::option::Option<::std::string::String>,
    pub(crate) cpu_architecture: ::std::option::Option<::std::string::String>,
}
impl RuntimePlatformBuilder {
    /// <p>The operating system for the compute environment. Valid values are: <code>LINUX</code> (default), <code>WINDOWS_SERVER_2019_CORE</code>, <code>WINDOWS_SERVER_2019_FULL</code>, <code>WINDOWS_SERVER_2022_CORE</code>, and <code>WINDOWS_SERVER_2022_FULL</code>.</p><note>
    /// <p>The following parameters can’t be set for Windows containers: <code>linuxParameters</code>, <code>privileged</code>, <code>user</code>, <code>ulimits</code>, <code>readonlyRootFilesystem</code>, and <code>efsVolumeConfiguration</code>.</p>
    /// </note> <note>
    /// <p>The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is <code>LINUX</code>, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn operating_system_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operating_system_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The operating system for the compute environment. Valid values are: <code>LINUX</code> (default), <code>WINDOWS_SERVER_2019_CORE</code>, <code>WINDOWS_SERVER_2019_FULL</code>, <code>WINDOWS_SERVER_2022_CORE</code>, and <code>WINDOWS_SERVER_2022_FULL</code>.</p><note>
    /// <p>The following parameters can’t be set for Windows containers: <code>linuxParameters</code>, <code>privileged</code>, <code>user</code>, <code>ulimits</code>, <code>readonlyRootFilesystem</code>, and <code>efsVolumeConfiguration</code>.</p>
    /// </note> <note>
    /// <p>The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is <code>LINUX</code>, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn set_operating_system_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operating_system_family = input;
        self
    }
    /// <p>The operating system for the compute environment. Valid values are: <code>LINUX</code> (default), <code>WINDOWS_SERVER_2019_CORE</code>, <code>WINDOWS_SERVER_2019_FULL</code>, <code>WINDOWS_SERVER_2022_CORE</code>, and <code>WINDOWS_SERVER_2022_FULL</code>.</p><note>
    /// <p>The following parameters can’t be set for Windows containers: <code>linuxParameters</code>, <code>privileged</code>, <code>user</code>, <code>ulimits</code>, <code>readonlyRootFilesystem</code>, and <code>efsVolumeConfiguration</code>.</p>
    /// </note> <note>
    /// <p>The Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is <code>LINUX</code>, the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn get_operating_system_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.operating_system_family
    }
    /// <p>The vCPU architecture. The default value is <code>X86_64</code>. Valid values are <code>X86_64</code> and <code>ARM64</code>.</p><note>
    /// <p>This parameter must be set to <code>X86_64</code> for Windows containers.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn cpu_architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cpu_architecture = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The vCPU architecture. The default value is <code>X86_64</code>. Valid values are <code>X86_64</code> and <code>ARM64</code>.</p><note>
    /// <p>This parameter must be set to <code>X86_64</code> for Windows containers.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn set_cpu_architecture(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cpu_architecture = input;
        self
    }
    /// <p>The vCPU architecture. The default value is <code>X86_64</code>. Valid values are <code>X86_64</code> and <code>ARM64</code>.</p><note>
    /// <p>This parameter must be set to <code>X86_64</code> for Windows containers.</p>
    /// </note> <note>
    /// <p>Fargate Spot is not supported on Windows-based containers on Fargate. A job queue will be blocked if a Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both <code>FARGATE</code> and <code>FARGATE_SPOT</code> compute environments to the same job queue.</p>
    /// </note>
    pub fn get_cpu_architecture(&self) -> &::std::option::Option<::std::string::String> {
        &self.cpu_architecture
    }
    /// Consumes the builder and constructs a [`RuntimePlatform`](crate::types::RuntimePlatform).
    pub fn build(self) -> crate::types::RuntimePlatform {
        crate::types::RuntimePlatform {
            operating_system_family: self.operating_system_family,
            cpu_architecture: self.cpu_architecture,
        }
    }
}
