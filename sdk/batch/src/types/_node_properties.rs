// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the node properties of a multi-node parallel job.</p> <note>
/// <p>Node properties can't be specified for Amazon EKS based job definitions.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeProperties {
    /// <p>The number of nodes that are associated with a multi-node parallel job.</p>
    pub num_nodes: ::std::option::Option<i32>,
    /// <p>Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.</p>
    pub main_node: ::std::option::Option<i32>,
    /// <p>A list of node ranges and their properties that are associated with a multi-node parallel job.</p>
    pub node_range_properties: ::std::option::Option<::std::vec::Vec<crate::types::NodeRangeProperty>>,
}
impl NodeProperties {
    /// <p>The number of nodes that are associated with a multi-node parallel job.</p>
    pub fn num_nodes(&self) -> ::std::option::Option<i32> {
        self.num_nodes
    }
    /// <p>Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.</p>
    pub fn main_node(&self) -> ::std::option::Option<i32> {
        self.main_node
    }
    /// <p>A list of node ranges and their properties that are associated with a multi-node parallel job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.node_range_properties.is_none()`.
    pub fn node_range_properties(&self) -> &[crate::types::NodeRangeProperty] {
        self.node_range_properties.as_deref().unwrap_or_default()
    }
}
impl NodeProperties {
    /// Creates a new builder-style object to manufacture [`NodeProperties`](crate::types::NodeProperties).
    pub fn builder() -> crate::types::builders::NodePropertiesBuilder {
        crate::types::builders::NodePropertiesBuilder::default()
    }
}

/// A builder for [`NodeProperties`](crate::types::NodeProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NodePropertiesBuilder {
    pub(crate) num_nodes: ::std::option::Option<i32>,
    pub(crate) main_node: ::std::option::Option<i32>,
    pub(crate) node_range_properties: ::std::option::Option<::std::vec::Vec<crate::types::NodeRangeProperty>>,
}
impl NodePropertiesBuilder {
    /// <p>The number of nodes that are associated with a multi-node parallel job.</p>
    /// This field is required.
    pub fn num_nodes(mut self, input: i32) -> Self {
        self.num_nodes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of nodes that are associated with a multi-node parallel job.</p>
    pub fn set_num_nodes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_nodes = input;
        self
    }
    /// <p>The number of nodes that are associated with a multi-node parallel job.</p>
    pub fn get_num_nodes(&self) -> &::std::option::Option<i32> {
        &self.num_nodes
    }
    /// <p>Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.</p>
    /// This field is required.
    pub fn main_node(mut self, input: i32) -> Self {
        self.main_node = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.</p>
    pub fn set_main_node(mut self, input: ::std::option::Option<i32>) -> Self {
        self.main_node = input;
        self
    }
    /// <p>Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.</p>
    pub fn get_main_node(&self) -> &::std::option::Option<i32> {
        &self.main_node
    }
    /// Appends an item to `node_range_properties`.
    ///
    /// To override the contents of this collection use [`set_node_range_properties`](Self::set_node_range_properties).
    ///
    /// <p>A list of node ranges and their properties that are associated with a multi-node parallel job.</p>
    pub fn node_range_properties(mut self, input: crate::types::NodeRangeProperty) -> Self {
        let mut v = self.node_range_properties.unwrap_or_default();
        v.push(input);
        self.node_range_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of node ranges and their properties that are associated with a multi-node parallel job.</p>
    pub fn set_node_range_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NodeRangeProperty>>) -> Self {
        self.node_range_properties = input;
        self
    }
    /// <p>A list of node ranges and their properties that are associated with a multi-node parallel job.</p>
    pub fn get_node_range_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NodeRangeProperty>> {
        &self.node_range_properties
    }
    /// Consumes the builder and constructs a [`NodeProperties`](crate::types::NodeProperties).
    pub fn build(self) -> crate::types::NodeProperties {
        crate::types::NodeProperties {
            num_nodes: self.num_nodes,
            main_node: self.main_node,
            node_range_properties: self.node_range_properties,
        }
    }
}
