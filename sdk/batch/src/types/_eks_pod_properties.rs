// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties for the pod.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EksPodProperties {
    /// <p>The name of the service account that's used to run the pod. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html">Kubernetes service accounts</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html">Configure a Kubernetes service account to assume an IAM role</a> in the <i>Amazon EKS User Guide</i> and <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Configure service accounts for pods</a> in the <i>Kubernetes documentation</i>.</p>
    #[doc(hidden)]
    pub service_account_name: std::option::Option<std::string::String>,
    /// <p>Indicates if the pod uses the hosts' network IP address. The default value is <code>true</code>. Setting this to <code>false</code> enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see <a href="https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces">Host namespaces</a> and <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking">Pod networking</a> in the <i>Kubernetes documentation</i>.</p>
    #[doc(hidden)]
    pub host_network: std::option::Option<bool>,
    /// <p>The DNS policy for the pod. The default value is <code>ClusterFirst</code>. If the <code>hostNetwork</code> parameter is not specified, the default is <code>ClusterFirstWithHostNet</code>. <code>ClusterFirst</code> indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy">Pod's DNS policy</a> in the <i>Kubernetes documentation</i>.</p>
    /// <p>Valid values: <code>Default</code> | <code>ClusterFirst</code> | <code>ClusterFirstWithHostNet</code> </p>
    #[doc(hidden)]
    pub dns_policy: std::option::Option<std::string::String>,
    /// <p>The properties of the container that's used on the Amazon EKS pod.</p>
    #[doc(hidden)]
    pub containers: std::option::Option<std::vec::Vec<crate::types::EksContainer>>,
    /// <p>Specifies the volumes for a job definition that uses Amazon EKS resources.</p>
    #[doc(hidden)]
    pub volumes: std::option::Option<std::vec::Vec<crate::types::EksVolume>>,
}
impl EksPodProperties {
    /// <p>The name of the service account that's used to run the pod. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html">Kubernetes service accounts</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html">Configure a Kubernetes service account to assume an IAM role</a> in the <i>Amazon EKS User Guide</i> and <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Configure service accounts for pods</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn service_account_name(&self) -> std::option::Option<&str> {
        self.service_account_name.as_deref()
    }
    /// <p>Indicates if the pod uses the hosts' network IP address. The default value is <code>true</code>. Setting this to <code>false</code> enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see <a href="https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces">Host namespaces</a> and <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking">Pod networking</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn host_network(&self) -> std::option::Option<bool> {
        self.host_network
    }
    /// <p>The DNS policy for the pod. The default value is <code>ClusterFirst</code>. If the <code>hostNetwork</code> parameter is not specified, the default is <code>ClusterFirstWithHostNet</code>. <code>ClusterFirst</code> indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy">Pod's DNS policy</a> in the <i>Kubernetes documentation</i>.</p>
    /// <p>Valid values: <code>Default</code> | <code>ClusterFirst</code> | <code>ClusterFirstWithHostNet</code> </p>
    pub fn dns_policy(&self) -> std::option::Option<&str> {
        self.dns_policy.as_deref()
    }
    /// <p>The properties of the container that's used on the Amazon EKS pod.</p>
    pub fn containers(&self) -> std::option::Option<&[crate::types::EksContainer]> {
        self.containers.as_deref()
    }
    /// <p>Specifies the volumes for a job definition that uses Amazon EKS resources.</p>
    pub fn volumes(&self) -> std::option::Option<&[crate::types::EksVolume]> {
        self.volumes.as_deref()
    }
}
impl EksPodProperties {
    /// Creates a new builder-style object to manufacture [`EksPodProperties`](crate::types::EksPodProperties).
    pub fn builder() -> crate::types::builders::EksPodPropertiesBuilder {
        crate::types::builders::EksPodPropertiesBuilder::default()
    }
}

/// A builder for [`EksPodProperties`](crate::types::EksPodProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EksPodPropertiesBuilder {
    pub(crate) service_account_name: std::option::Option<std::string::String>,
    pub(crate) host_network: std::option::Option<bool>,
    pub(crate) dns_policy: std::option::Option<std::string::String>,
    pub(crate) containers: std::option::Option<std::vec::Vec<crate::types::EksContainer>>,
    pub(crate) volumes: std::option::Option<std::vec::Vec<crate::types::EksVolume>>,
}
impl EksPodPropertiesBuilder {
    /// <p>The name of the service account that's used to run the pod. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html">Kubernetes service accounts</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html">Configure a Kubernetes service account to assume an IAM role</a> in the <i>Amazon EKS User Guide</i> and <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Configure service accounts for pods</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn service_account_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_account_name = Some(input.into());
        self
    }
    /// <p>The name of the service account that's used to run the pod. For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html">Kubernetes service accounts</a> and <a href="https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html">Configure a Kubernetes service account to assume an IAM role</a> in the <i>Amazon EKS User Guide</i> and <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Configure service accounts for pods</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn set_service_account_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_account_name = input;
        self
    }
    /// <p>Indicates if the pod uses the hosts' network IP address. The default value is <code>true</code>. Setting this to <code>false</code> enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see <a href="https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces">Host namespaces</a> and <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking">Pod networking</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn host_network(mut self, input: bool) -> Self {
        self.host_network = Some(input);
        self
    }
    /// <p>Indicates if the pod uses the hosts' network IP address. The default value is <code>true</code>. Setting this to <code>false</code> enables the Kubernetes pod networking model. Most Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see <a href="https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces">Host namespaces</a> and <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking">Pod networking</a> in the <i>Kubernetes documentation</i>.</p>
    pub fn set_host_network(mut self, input: std::option::Option<bool>) -> Self {
        self.host_network = input;
        self
    }
    /// <p>The DNS policy for the pod. The default value is <code>ClusterFirst</code>. If the <code>hostNetwork</code> parameter is not specified, the default is <code>ClusterFirstWithHostNet</code>. <code>ClusterFirst</code> indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy">Pod's DNS policy</a> in the <i>Kubernetes documentation</i>.</p>
    /// <p>Valid values: <code>Default</code> | <code>ClusterFirst</code> | <code>ClusterFirstWithHostNet</code> </p>
    pub fn dns_policy(mut self, input: impl Into<std::string::String>) -> Self {
        self.dns_policy = Some(input.into());
        self
    }
    /// <p>The DNS policy for the pod. The default value is <code>ClusterFirst</code>. If the <code>hostNetwork</code> parameter is not specified, the default is <code>ClusterFirstWithHostNet</code>. <code>ClusterFirst</code> indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy">Pod's DNS policy</a> in the <i>Kubernetes documentation</i>.</p>
    /// <p>Valid values: <code>Default</code> | <code>ClusterFirst</code> | <code>ClusterFirstWithHostNet</code> </p>
    pub fn set_dns_policy(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dns_policy = input;
        self
    }
    /// Appends an item to `containers`.
    ///
    /// To override the contents of this collection use [`set_containers`](Self::set_containers).
    ///
    /// <p>The properties of the container that's used on the Amazon EKS pod.</p>
    pub fn containers(mut self, input: crate::types::EksContainer) -> Self {
        let mut v = self.containers.unwrap_or_default();
        v.push(input);
        self.containers = Some(v);
        self
    }
    /// <p>The properties of the container that's used on the Amazon EKS pod.</p>
    pub fn set_containers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EksContainer>>,
    ) -> Self {
        self.containers = input;
        self
    }
    /// Appends an item to `volumes`.
    ///
    /// To override the contents of this collection use [`set_volumes`](Self::set_volumes).
    ///
    /// <p>Specifies the volumes for a job definition that uses Amazon EKS resources.</p>
    pub fn volumes(mut self, input: crate::types::EksVolume) -> Self {
        let mut v = self.volumes.unwrap_or_default();
        v.push(input);
        self.volumes = Some(v);
        self
    }
    /// <p>Specifies the volumes for a job definition that uses Amazon EKS resources.</p>
    pub fn set_volumes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EksVolume>>,
    ) -> Self {
        self.volumes = input;
        self
    }
    /// Consumes the builder and constructs a [`EksPodProperties`](crate::types::EksPodProperties).
    pub fn build(self) -> crate::types::EksPodProperties {
        crate::types::EksPodProperties {
            service_account_name: self.service_account_name,
            host_network: self.host_network,
            dns_policy: self.dns_policy,
            containers: self.containers,
            volumes: self.volumes,
        }
    }
}
