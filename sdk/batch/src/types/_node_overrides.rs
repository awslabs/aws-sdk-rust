// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents any node overrides to a job definition that's used in a <code>SubmitJob</code> API operation.</p> <note>
/// <p>This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs. Rather, use <code>containerOverrides</code> instead.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeOverrides {
    /// <p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:</p>
    /// <ul>
    /// <li> <p>There must be at least one node range in your job definition that has an open upper boundary, such as <code>:</code> or <code>n:</code>.</p> </li>
    /// <li> <p>The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// <li> <p>The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub num_nodes: std::option::Option<i32>,
    /// <p>The node property overrides for the job.</p>
    #[doc(hidden)]
    pub node_property_overrides:
        std::option::Option<std::vec::Vec<crate::types::NodePropertyOverride>>,
}
impl NodeOverrides {
    /// <p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:</p>
    /// <ul>
    /// <li> <p>There must be at least one node range in your job definition that has an open upper boundary, such as <code>:</code> or <code>n:</code>.</p> </li>
    /// <li> <p>The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// <li> <p>The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// </ul>
    pub fn num_nodes(&self) -> std::option::Option<i32> {
        self.num_nodes
    }
    /// <p>The node property overrides for the job.</p>
    pub fn node_property_overrides(
        &self,
    ) -> std::option::Option<&[crate::types::NodePropertyOverride]> {
        self.node_property_overrides.as_deref()
    }
}
impl NodeOverrides {
    /// Creates a new builder-style object to manufacture [`NodeOverrides`](crate::types::NodeOverrides).
    pub fn builder() -> crate::types::builders::NodeOverridesBuilder {
        crate::types::builders::NodeOverridesBuilder::default()
    }
}

/// A builder for [`NodeOverrides`](crate::types::NodeOverrides).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeOverridesBuilder {
    pub(crate) num_nodes: std::option::Option<i32>,
    pub(crate) node_property_overrides:
        std::option::Option<std::vec::Vec<crate::types::NodePropertyOverride>>,
}
impl NodeOverridesBuilder {
    /// <p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:</p>
    /// <ul>
    /// <li> <p>There must be at least one node range in your job definition that has an open upper boundary, such as <code>:</code> or <code>n:</code>.</p> </li>
    /// <li> <p>The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// <li> <p>The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// </ul>
    pub fn num_nodes(mut self, input: i32) -> Self {
        self.num_nodes = Some(input);
        self
    }
    /// <p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override, you must meet the following conditions:</p>
    /// <ul>
    /// <li> <p>There must be at least one node range in your job definition that has an open upper boundary, such as <code>:</code> or <code>n:</code>.</p> </li>
    /// <li> <p>The lower boundary of the node range that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// <li> <p>The main node index that's specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li>
    /// </ul>
    pub fn set_num_nodes(mut self, input: std::option::Option<i32>) -> Self {
        self.num_nodes = input;
        self
    }
    /// Appends an item to `node_property_overrides`.
    ///
    /// To override the contents of this collection use [`set_node_property_overrides`](Self::set_node_property_overrides).
    ///
    /// <p>The node property overrides for the job.</p>
    pub fn node_property_overrides(mut self, input: crate::types::NodePropertyOverride) -> Self {
        let mut v = self.node_property_overrides.unwrap_or_default();
        v.push(input);
        self.node_property_overrides = Some(v);
        self
    }
    /// <p>The node property overrides for the job.</p>
    pub fn set_node_property_overrides(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NodePropertyOverride>>,
    ) -> Self {
        self.node_property_overrides = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeOverrides`](crate::types::NodeOverrides).
    pub fn build(self) -> crate::types::NodeOverrides {
        crate::types::NodeOverrides {
            num_nodes: self.num_nodes,
            node_property_overrides: self.node_property_overrides,
        }
    }
}
