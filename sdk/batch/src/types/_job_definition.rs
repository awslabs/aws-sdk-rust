// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents an Batch job definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobDefinition {
    /// <p>The name of the job definition.</p>
    #[doc(hidden)]
    pub job_definition_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the job definition.</p>
    #[doc(hidden)]
    pub job_definition_arn: std::option::Option<std::string::String>,
    /// <p>The revision of the job definition.</p>
    #[doc(hidden)]
    pub revision: std::option::Option<i32>,
    /// <p>The status of the job definition.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The type of job definition. It's either <code>container</code> or <code>multinode</code>. If the job is run on Fargate resources, then <code>multinode</code> isn't supported. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the <i>Batch User Guide</i>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.</p>
    #[doc(hidden)]
    pub scheduling_priority: std::option::Option<i32>,
    /// <p>Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job definition parameters</a> in the <i>Batch User Guide</i>.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The retry strategy to use for failed jobs that are submitted with this job definition.</p>
    #[doc(hidden)]
    pub retry_strategy: std::option::Option<crate::types::RetryStrategy>,
    /// <p>An object with various properties specific to Amazon ECS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    #[doc(hidden)]
    pub container_properties: std::option::Option<crate::types::ContainerProperties>,
    /// <p>The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.</p>
    #[doc(hidden)]
    pub timeout: std::option::Option<crate::types::JobTimeout>,
    /// <p>An object with various properties that are specific to multi-node parallel jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p> <note>
    /// <p>If the job runs on Fargate resources, don't specify <code>nodeProperties</code>. Use <code>containerProperties</code> instead.</p>
    /// </note>
    #[doc(hidden)]
    pub node_properties: std::option::Option<crate::types::NodeProperties>,
    /// <p>The tags that are applied to the job definition.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    #[doc(hidden)]
    pub propagate_tags: std::option::Option<bool>,
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
    #[doc(hidden)]
    pub platform_capabilities: std::option::Option<std::vec::Vec<crate::types::PlatformCapability>>,
    /// <p>An object with various properties that are specific to Amazon EKS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    #[doc(hidden)]
    pub eks_properties: std::option::Option<crate::types::EksProperties>,
    /// <p>The orchestration type of the compute environment. The valid values are <code>ECS</code> (default) or <code>EKS</code>.</p>
    #[doc(hidden)]
    pub container_orchestration_type: std::option::Option<crate::types::OrchestrationType>,
}
impl JobDefinition {
    /// <p>The name of the job definition.</p>
    pub fn job_definition_name(&self) -> std::option::Option<&str> {
        self.job_definition_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the job definition.</p>
    pub fn job_definition_arn(&self) -> std::option::Option<&str> {
        self.job_definition_arn.as_deref()
    }
    /// <p>The revision of the job definition.</p>
    pub fn revision(&self) -> std::option::Option<i32> {
        self.revision
    }
    /// <p>The status of the job definition.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The type of job definition. It's either <code>container</code> or <code>multinode</code>. If the job is run on Fargate resources, then <code>multinode</code> isn't supported. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the <i>Batch User Guide</i>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.</p>
    pub fn scheduling_priority(&self) -> std::option::Option<i32> {
        self.scheduling_priority
    }
    /// <p>Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job definition parameters</a> in the <i>Batch User Guide</i>.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
    /// <p>The retry strategy to use for failed jobs that are submitted with this job definition.</p>
    pub fn retry_strategy(&self) -> std::option::Option<&crate::types::RetryStrategy> {
        self.retry_strategy.as_ref()
    }
    /// <p>An object with various properties specific to Amazon ECS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    pub fn container_properties(&self) -> std::option::Option<&crate::types::ContainerProperties> {
        self.container_properties.as_ref()
    }
    /// <p>The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.</p>
    pub fn timeout(&self) -> std::option::Option<&crate::types::JobTimeout> {
        self.timeout.as_ref()
    }
    /// <p>An object with various properties that are specific to multi-node parallel jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p> <note>
    /// <p>If the job runs on Fargate resources, don't specify <code>nodeProperties</code>. Use <code>containerProperties</code> instead.</p>
    /// </note>
    pub fn node_properties(&self) -> std::option::Option<&crate::types::NodeProperties> {
        self.node_properties.as_ref()
    }
    /// <p>The tags that are applied to the job definition.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    pub fn propagate_tags(&self) -> std::option::Option<bool> {
        self.propagate_tags
    }
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
    pub fn platform_capabilities(
        &self,
    ) -> std::option::Option<&[crate::types::PlatformCapability]> {
        self.platform_capabilities.as_deref()
    }
    /// <p>An object with various properties that are specific to Amazon EKS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    pub fn eks_properties(&self) -> std::option::Option<&crate::types::EksProperties> {
        self.eks_properties.as_ref()
    }
    /// <p>The orchestration type of the compute environment. The valid values are <code>ECS</code> (default) or <code>EKS</code>.</p>
    pub fn container_orchestration_type(
        &self,
    ) -> std::option::Option<&crate::types::OrchestrationType> {
        self.container_orchestration_type.as_ref()
    }
}
impl JobDefinition {
    /// Creates a new builder-style object to manufacture [`JobDefinition`](crate::types::JobDefinition).
    pub fn builder() -> crate::types::builders::JobDefinitionBuilder {
        crate::types::builders::JobDefinitionBuilder::default()
    }
}

/// A builder for [`JobDefinition`](crate::types::JobDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobDefinitionBuilder {
    pub(crate) job_definition_name: std::option::Option<std::string::String>,
    pub(crate) job_definition_arn: std::option::Option<std::string::String>,
    pub(crate) revision: std::option::Option<i32>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) scheduling_priority: std::option::Option<i32>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) retry_strategy: std::option::Option<crate::types::RetryStrategy>,
    pub(crate) container_properties: std::option::Option<crate::types::ContainerProperties>,
    pub(crate) timeout: std::option::Option<crate::types::JobTimeout>,
    pub(crate) node_properties: std::option::Option<crate::types::NodeProperties>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) propagate_tags: std::option::Option<bool>,
    pub(crate) platform_capabilities:
        std::option::Option<std::vec::Vec<crate::types::PlatformCapability>>,
    pub(crate) eks_properties: std::option::Option<crate::types::EksProperties>,
    pub(crate) container_orchestration_type: std::option::Option<crate::types::OrchestrationType>,
}
impl JobDefinitionBuilder {
    /// <p>The name of the job definition.</p>
    pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_definition_name = Some(input.into());
        self
    }
    /// <p>The name of the job definition.</p>
    pub fn set_job_definition_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.job_definition_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the job definition.</p>
    pub fn job_definition_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_definition_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the job definition.</p>
    pub fn set_job_definition_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.job_definition_arn = input;
        self
    }
    /// <p>The revision of the job definition.</p>
    pub fn revision(mut self, input: i32) -> Self {
        self.revision = Some(input);
        self
    }
    /// <p>The revision of the job definition.</p>
    pub fn set_revision(mut self, input: std::option::Option<i32>) -> Self {
        self.revision = input;
        self
    }
    /// <p>The status of the job definition.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the job definition.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The type of job definition. It's either <code>container</code> or <code>multinode</code>. If the job is run on Fargate resources, then <code>multinode</code> isn't supported. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the <i>Batch User Guide</i>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of job definition. It's either <code>container</code> or <code>multinode</code>. If the job is run on Fargate resources, then <code>multinode</code> isn't supported. For more information about multi-node parallel jobs, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html">Creating a multi-node parallel job definition</a> in the <i>Batch User Guide</i>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.</p>
    pub fn scheduling_priority(mut self, input: i32) -> Self {
        self.scheduling_priority = Some(input);
        self
    }
    /// <p>The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.</p>
    pub fn set_scheduling_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.scheduling_priority = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job definition parameters</a> in the <i>Batch User Guide</i>.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job definition parameters</a> in the <i>Batch User Guide</i>.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The retry strategy to use for failed jobs that are submitted with this job definition.</p>
    pub fn retry_strategy(mut self, input: crate::types::RetryStrategy) -> Self {
        self.retry_strategy = Some(input);
        self
    }
    /// <p>The retry strategy to use for failed jobs that are submitted with this job definition.</p>
    pub fn set_retry_strategy(
        mut self,
        input: std::option::Option<crate::types::RetryStrategy>,
    ) -> Self {
        self.retry_strategy = input;
        self
    }
    /// <p>An object with various properties specific to Amazon ECS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    pub fn container_properties(mut self, input: crate::types::ContainerProperties) -> Self {
        self.container_properties = Some(input);
        self
    }
    /// <p>An object with various properties specific to Amazon ECS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    pub fn set_container_properties(
        mut self,
        input: std::option::Option<crate::types::ContainerProperties>,
    ) -> Self {
        self.container_properties = input;
        self
    }
    /// <p>The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.</p>
    pub fn timeout(mut self, input: crate::types::JobTimeout) -> Self {
        self.timeout = Some(input);
        self
    }
    /// <p>The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, Batch terminates your jobs if they aren't finished.</p>
    pub fn set_timeout(mut self, input: std::option::Option<crate::types::JobTimeout>) -> Self {
        self.timeout = input;
        self
    }
    /// <p>An object with various properties that are specific to multi-node parallel jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p> <note>
    /// <p>If the job runs on Fargate resources, don't specify <code>nodeProperties</code>. Use <code>containerProperties</code> instead.</p>
    /// </note>
    pub fn node_properties(mut self, input: crate::types::NodeProperties) -> Self {
        self.node_properties = Some(input);
        self
    }
    /// <p>An object with various properties that are specific to multi-node parallel jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p> <note>
    /// <p>If the job runs on Fargate resources, don't specify <code>nodeProperties</code>. Use <code>containerProperties</code> instead.</p>
    /// </note>
    pub fn set_node_properties(
        mut self,
        input: std::option::Option<crate::types::NodeProperties>,
    ) -> Self {
        self.node_properties = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that are applied to the job definition.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags that are applied to the job definition.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    pub fn propagate_tags(mut self, input: bool) -> Self {
        self.propagate_tags = Some(input);
        self
    }
    /// <p>Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the <code>FAILED</code> state.</p>
    pub fn set_propagate_tags(mut self, input: std::option::Option<bool>) -> Self {
        self.propagate_tags = input;
        self
    }
    /// Appends an item to `platform_capabilities`.
    ///
    /// To override the contents of this collection use [`set_platform_capabilities`](Self::set_platform_capabilities).
    ///
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
    pub fn platform_capabilities(mut self, input: crate::types::PlatformCapability) -> Self {
        let mut v = self.platform_capabilities.unwrap_or_default();
        v.push(input);
        self.platform_capabilities = Some(v);
        self
    }
    /// <p>The platform capabilities required by the job definition. If no value is specified, it defaults to <code>EC2</code>. Jobs run on Fargate resources specify <code>FARGATE</code>.</p>
    pub fn set_platform_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PlatformCapability>>,
    ) -> Self {
        self.platform_capabilities = input;
        self
    }
    /// <p>An object with various properties that are specific to Amazon EKS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    pub fn eks_properties(mut self, input: crate::types::EksProperties) -> Self {
        self.eks_properties = Some(input);
        self
    }
    /// <p>An object with various properties that are specific to Amazon EKS based jobs. Valid values are <code>containerProperties</code>, <code>eksProperties</code>, and <code>nodeProperties</code>. Only one can be specified.</p>
    pub fn set_eks_properties(
        mut self,
        input: std::option::Option<crate::types::EksProperties>,
    ) -> Self {
        self.eks_properties = input;
        self
    }
    /// <p>The orchestration type of the compute environment. The valid values are <code>ECS</code> (default) or <code>EKS</code>.</p>
    pub fn container_orchestration_type(mut self, input: crate::types::OrchestrationType) -> Self {
        self.container_orchestration_type = Some(input);
        self
    }
    /// <p>The orchestration type of the compute environment. The valid values are <code>ECS</code> (default) or <code>EKS</code>.</p>
    pub fn set_container_orchestration_type(
        mut self,
        input: std::option::Option<crate::types::OrchestrationType>,
    ) -> Self {
        self.container_orchestration_type = input;
        self
    }
    /// Consumes the builder and constructs a [`JobDefinition`](crate::types::JobDefinition).
    pub fn build(self) -> crate::types::JobDefinition {
        crate::types::JobDefinition {
            job_definition_name: self.job_definition_name,
            job_definition_arn: self.job_definition_arn,
            revision: self.revision,
            status: self.status,
            r#type: self.r#type,
            scheduling_priority: self.scheduling_priority,
            parameters: self.parameters,
            retry_strategy: self.retry_strategy,
            container_properties: self.container_properties,
            timeout: self.timeout,
            node_properties: self.node_properties,
            tags: self.tags,
            propagate_tags: self.propagate_tags,
            platform_capabilities: self.platform_capabilities,
            eks_properties: self.eks_properties,
            container_orchestration_type: self.container_orchestration_type,
        }
    }
}
