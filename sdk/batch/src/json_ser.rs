// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.job_id {
        object.key("jobId").string(var_1);
    }
    if let Some(var_2) = &input.reason {
        object.key("reason").string(var_2);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_compute_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComputeEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.compute_environment_name {
        object.key("computeEnvironmentName").string(var_3);
    }
    if let Some(var_4) = &input.compute_resources {
        let mut object_5 = object.key("computeResources").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_resource(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.service_role {
        object.key("serviceRole").string(var_6);
    }
    if let Some(var_7) = &input.state {
        object.key("state").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10).string(value_11);
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.r#type {
        object.key("type").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.compute_environment_order {
        let mut array_14 = object.key("computeEnvironmentOrder").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compute_environment_order(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.job_queue_name {
        object.key("jobQueueName").string(var_17);
    }
    {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_18) = &input.state {
        object.key("state").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut object_20 = object.key("tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22);
            }
        }
        object_20.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_compute_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteComputeEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.compute_environment {
        object.key("computeEnvironment").string(var_23);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.job_queue {
        object.key("jobQueue").string(var_24);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.job_definition {
        object.key("jobDefinition").string(var_25);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_compute_environments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeComputeEnvironmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.compute_environments {
        let mut array_27 = object.key("computeEnvironments").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_29) = &input.next_token {
        object.key("nextToken").string(var_29);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_job_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.job_definition_name {
        object.key("jobDefinitionName").string(var_30);
    }
    if let Some(var_31) = &input.job_definitions {
        let mut array_32 = object.key("jobDefinitions").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33);
            }
        }
        array_32.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_34) = &input.next_token {
        object.key("nextToken").string(var_34);
    }
    if let Some(var_35) = &input.status {
        object.key("status").string(var_35);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_job_queues_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobQueuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.job_queues {
        let mut array_37 = object.key("jobQueues").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38);
            }
        }
        array_37.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_39) = &input.next_token {
        object.key("nextToken").string(var_39);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.jobs {
        let mut array_41 = object.key("jobs").start_array();
        for item_42 in var_40 {
            {
                array_41.value().string(item_42);
            }
        }
        array_41.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.array_job_id {
        object.key("arrayJobId").string(var_43);
    }
    if let Some(var_44) = &input.filters {
        let mut array_45 = object.key("filters").start_array();
        for item_46 in var_44 {
            {
                let mut object_47 = array_45.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_values_pair(
                    &mut object_47,
                    item_46,
                )?;
                object_47.finish();
            }
        }
        array_45.finish();
    }
    if let Some(var_48) = &input.job_queue {
        object.key("jobQueue").string(var_48);
    }
    if let Some(var_49) = &input.job_status {
        object.key("jobStatus").string(var_49.as_str());
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_50) = &input.multi_node_job_id {
        object.key("multiNodeJobId").string(var_50);
    }
    if let Some(var_51) = &input.next_token {
        object.key("nextToken").string(var_51);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_job_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterJobDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.container_properties {
        let mut object_53 = object.key("containerProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_container_properties(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    if let Some(var_54) = &input.job_definition_name {
        object.key("jobDefinitionName").string(var_54);
    }
    if let Some(var_55) = &input.node_properties {
        let mut object_56 = object.key("nodeProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_node_properties(&mut object_56, var_55)?;
        object_56.finish();
    }
    if let Some(var_57) = &input.parameters {
        let mut object_58 = object.key("parameters").start_object();
        for (key_59, value_60) in var_57 {
            {
                object_58.key(key_59).string(value_60);
            }
        }
        object_58.finish();
    }
    if let Some(var_61) = &input.platform_capabilities {
        let mut array_62 = object.key("platformCapabilities").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    if input.propagate_tags {
        object.key("propagateTags").boolean(input.propagate_tags);
    }
    if let Some(var_64) = &input.retry_strategy {
        let mut object_65 = object.key("retryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_65, var_64)?;
        object_65.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut object_67 = object.key("tags").start_object();
        for (key_68, value_69) in var_66 {
            {
                object_67.key(key_68).string(value_69);
            }
        }
        object_67.finish();
    }
    if let Some(var_70) = &input.timeout {
        let mut object_71 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_crate_model_job_timeout(&mut object_71, var_70)?;
        object_71.finish();
    }
    if let Some(var_72) = &input.r#type {
        object.key("type").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_submit_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SubmitJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.array_properties {
        let mut object_74 = object.key("arrayProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_array_properties(&mut object_74, var_73)?;
        object_74.finish();
    }
    if let Some(var_75) = &input.container_overrides {
        let mut object_76 = object.key("containerOverrides").start_object();
        crate::json_ser::serialize_structure_crate_model_container_overrides(
            &mut object_76,
            var_75,
        )?;
        object_76.finish();
    }
    if let Some(var_77) = &input.depends_on {
        let mut array_78 = object.key("dependsOn").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_structure_crate_model_job_dependency(
                    &mut object_80,
                    item_79,
                )?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.job_definition {
        object.key("jobDefinition").string(var_81);
    }
    if let Some(var_82) = &input.job_name {
        object.key("jobName").string(var_82);
    }
    if let Some(var_83) = &input.job_queue {
        object.key("jobQueue").string(var_83);
    }
    if let Some(var_84) = &input.node_overrides {
        let mut object_85 = object.key("nodeOverrides").start_object();
        crate::json_ser::serialize_structure_crate_model_node_overrides(&mut object_85, var_84)?;
        object_85.finish();
    }
    if let Some(var_86) = &input.parameters {
        let mut object_87 = object.key("parameters").start_object();
        for (key_88, value_89) in var_86 {
            {
                object_87.key(key_88).string(value_89);
            }
        }
        object_87.finish();
    }
    if input.propagate_tags {
        object.key("propagateTags").boolean(input.propagate_tags);
    }
    if let Some(var_90) = &input.retry_strategy {
        let mut object_91 = object.key("retryStrategy").start_object();
        crate::json_ser::serialize_structure_crate_model_retry_strategy(&mut object_91, var_90)?;
        object_91.finish();
    }
    if let Some(var_92) = &input.tags {
        let mut object_93 = object.key("tags").start_object();
        for (key_94, value_95) in var_92 {
            {
                object_93.key(key_94).string(value_95);
            }
        }
        object_93.finish();
    }
    if let Some(var_96) = &input.timeout {
        let mut object_97 = object.key("timeout").start_object();
        crate::json_ser::serialize_structure_crate_model_job_timeout(&mut object_97, var_96)?;
        object_97.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.tags {
        let mut object_99 = object.key("tags").start_object();
        for (key_100, value_101) in var_98 {
            {
                object_99.key(key_100).string(value_101);
            }
        }
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.job_id {
        object.key("jobId").string(var_102);
    }
    if let Some(var_103) = &input.reason {
        object.key("reason").string(var_103);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_compute_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateComputeEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.compute_environment {
        object.key("computeEnvironment").string(var_104);
    }
    if let Some(var_105) = &input.compute_resources {
        let mut object_106 = object.key("computeResources").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_resource_update(
            &mut object_106,
            var_105,
        )?;
        object_106.finish();
    }
    if let Some(var_107) = &input.service_role {
        object.key("serviceRole").string(var_107);
    }
    if let Some(var_108) = &input.state {
        object.key("state").string(var_108.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_queue_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobQueueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.compute_environment_order {
        let mut array_110 = object.key("computeEnvironmentOrder").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compute_environment_order(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.job_queue {
        object.key("jobQueue").string(var_113);
    }
    if input.priority != 0 {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.priority).into()),
        );
    }
    if let Some(var_114) = &input.state {
        object.key("state").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_resource(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeResource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.r#type {
        object.key("type").string(var_115.as_str());
    }
    if let Some(var_116) = &input.allocation_strategy {
        object.key("allocationStrategy").string(var_116.as_str());
    }
    if input.minv_cpus != 0 {
        object.key("minvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minv_cpus).into()),
        );
    }
    {
        object.key("maxvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maxv_cpus).into()),
        );
    }
    if input.desiredv_cpus != 0 {
        object.key("desiredvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.desiredv_cpus).into()),
        );
    }
    if let Some(var_117) = &input.instance_types {
        let mut array_118 = object.key("instanceTypes").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119);
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.image_id {
        object.key("imageId").string(var_120);
    }
    if let Some(var_121) = &input.subnets {
        let mut array_122 = object.key("subnets").start_array();
        for item_123 in var_121 {
            {
                array_122.value().string(item_123);
            }
        }
        array_122.finish();
    }
    if let Some(var_124) = &input.security_group_ids {
        let mut array_125 = object.key("securityGroupIds").start_array();
        for item_126 in var_124 {
            {
                array_125.value().string(item_126);
            }
        }
        array_125.finish();
    }
    if let Some(var_127) = &input.ec2_key_pair {
        object.key("ec2KeyPair").string(var_127);
    }
    if let Some(var_128) = &input.instance_role {
        object.key("instanceRole").string(var_128);
    }
    if let Some(var_129) = &input.tags {
        let mut object_130 = object.key("tags").start_object();
        for (key_131, value_132) in var_129 {
            {
                object_130.key(key_131).string(value_132);
            }
        }
        object_130.finish();
    }
    if let Some(var_133) = &input.placement_group {
        object.key("placementGroup").string(var_133);
    }
    if input.bid_percentage != 0 {
        object.key("bidPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bid_percentage).into()),
        );
    }
    if let Some(var_134) = &input.spot_iam_fleet_role {
        object.key("spotIamFleetRole").string(var_134);
    }
    if let Some(var_135) = &input.launch_template {
        let mut object_136 = object.key("launchTemplate").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_template_specification(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    if let Some(var_137) = &input.ec2_configuration {
        let mut array_138 = object.key("ec2Configuration").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ec2_configuration(
                    &mut object_140,
                    item_139,
                )?;
                object_140.finish();
            }
        }
        array_138.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_environment_order(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeEnvironmentOrder,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("order").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.order).into()),
        );
    }
    if let Some(var_141) = &input.compute_environment {
        object.key("computeEnvironment").string(var_141);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_key_values_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValuesPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.name {
        object.key("name").string(var_142);
    }
    if let Some(var_143) = &input.values {
        let mut array_144 = object.key("values").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145);
            }
        }
        array_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.image {
        object.key("image").string(var_146);
    }
    if input.vcpus != 0 {
        object.key("vcpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.vcpus).into()),
        );
    }
    if input.memory != 0 {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if let Some(var_147) = &input.command {
        let mut array_148 = object.key("command").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149);
            }
        }
        array_148.finish();
    }
    if let Some(var_150) = &input.job_role_arn {
        object.key("jobRoleArn").string(var_150);
    }
    if let Some(var_151) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_151);
    }
    if let Some(var_152) = &input.volumes {
        let mut array_153 = object.key("volumes").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_volume(&mut object_155, item_154)?;
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.environment {
        let mut array_157 = object.key("environment").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value_pair(
                    &mut object_159,
                    item_158,
                )?;
                object_159.finish();
            }
        }
        array_157.finish();
    }
    if let Some(var_160) = &input.mount_points {
        let mut array_161 = object.key("mountPoints").start_array();
        for item_162 in var_160 {
            {
                let mut object_163 = array_161.value().start_object();
                crate::json_ser::serialize_structure_crate_model_mount_point(
                    &mut object_163,
                    item_162,
                )?;
                object_163.finish();
            }
        }
        array_161.finish();
    }
    if input.readonly_root_filesystem {
        object
            .key("readonlyRootFilesystem")
            .boolean(input.readonly_root_filesystem);
    }
    if input.privileged {
        object.key("privileged").boolean(input.privileged);
    }
    if let Some(var_164) = &input.ulimits {
        let mut array_165 = object.key("ulimits").start_array();
        for item_166 in var_164 {
            {
                let mut object_167 = array_165.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ulimit(&mut object_167, item_166)?;
                object_167.finish();
            }
        }
        array_165.finish();
    }
    if let Some(var_168) = &input.user {
        object.key("user").string(var_168);
    }
    if let Some(var_169) = &input.instance_type {
        object.key("instanceType").string(var_169);
    }
    if let Some(var_170) = &input.resource_requirements {
        let mut array_171 = object.key("resourceRequirements").start_array();
        for item_172 in var_170 {
            {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_requirement(
                    &mut object_173,
                    item_172,
                )?;
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.linux_parameters {
        let mut object_175 = object.key("linuxParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_linux_parameters(
            &mut object_175,
            var_174,
        )?;
        object_175.finish();
    }
    if let Some(var_176) = &input.log_configuration {
        let mut object_177 = object.key("logConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_log_configuration(
            &mut object_177,
            var_176,
        )?;
        object_177.finish();
    }
    if let Some(var_178) = &input.secrets {
        let mut array_179 = object.key("secrets").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_secret(&mut object_181, item_180)?;
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if let Some(var_182) = &input.network_configuration {
        let mut object_183 = object.key("networkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_183,
            var_182,
        )?;
        object_183.finish();
    }
    if let Some(var_184) = &input.fargate_platform_configuration {
        let mut object_185 = object.key("fargatePlatformConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_fargate_platform_configuration(
            &mut object_185,
            var_184,
        )?;
        object_185.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_node_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("numNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.num_nodes).into()),
        );
    }
    {
        object.key("mainNode").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.main_node).into()),
        );
    }
    if let Some(var_186) = &input.node_range_properties {
        let mut array_187 = object.key("nodeRangeProperties").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_crate_model_node_range_property(
                    &mut object_189,
                    item_188,
                )?;
                object_189.finish();
            }
        }
        array_187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_retry_strategy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RetryStrategy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.attempts != 0 {
        object.key("attempts").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.attempts).into()),
        );
    }
    if let Some(var_190) = &input.evaluate_on_exit {
        let mut array_191 = object.key("evaluateOnExit").start_array();
        for item_192 in var_190 {
            {
                let mut object_193 = array_191.value().start_object();
                crate::json_ser::serialize_structure_crate_model_evaluate_on_exit(
                    &mut object_193,
                    item_192,
                )?;
                object_193.finish();
            }
        }
        array_191.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_timeout(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobTimeout,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.attempt_duration_seconds != 0 {
        object.key("attemptDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.attempt_duration_seconds).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_array_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ArrayProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.size != 0 {
        object.key("size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_container_overrides(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContainerOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.vcpus != 0 {
        object.key("vcpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.vcpus).into()),
        );
    }
    if input.memory != 0 {
        object.key("memory").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.memory).into()),
        );
    }
    if let Some(var_194) = &input.command {
        let mut array_195 = object.key("command").start_array();
        for item_196 in var_194 {
            {
                array_195.value().string(item_196);
            }
        }
        array_195.finish();
    }
    if let Some(var_197) = &input.instance_type {
        object.key("instanceType").string(var_197);
    }
    if let Some(var_198) = &input.environment {
        let mut array_199 = object.key("environment").start_array();
        for item_200 in var_198 {
            {
                let mut object_201 = array_199.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value_pair(
                    &mut object_201,
                    item_200,
                )?;
                object_201.finish();
            }
        }
        array_199.finish();
    }
    if let Some(var_202) = &input.resource_requirements {
        let mut array_203 = object.key("resourceRequirements").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_crate_model_resource_requirement(
                    &mut object_205,
                    item_204,
                )?;
                object_205.finish();
            }
        }
        array_203.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_dependency(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobDependency,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.job_id {
        object.key("jobId").string(var_206);
    }
    if let Some(var_207) = &input.r#type {
        object.key("type").string(var_207.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_node_overrides(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.num_nodes != 0 {
        object.key("numNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.num_nodes).into()),
        );
    }
    if let Some(var_208) = &input.node_property_overrides {
        let mut array_209 = object.key("nodePropertyOverrides").start_array();
        for item_210 in var_208 {
            {
                let mut object_211 = array_209.value().start_object();
                crate::json_ser::serialize_structure_crate_model_node_property_override(
                    &mut object_211,
                    item_210,
                )?;
                object_211.finish();
            }
        }
        array_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_resource_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeResourceUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.minv_cpus != 0 {
        object.key("minvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.minv_cpus).into()),
        );
    }
    if input.maxv_cpus != 0 {
        object.key("maxvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.maxv_cpus).into()),
        );
    }
    if input.desiredv_cpus != 0 {
        object.key("desiredvCpus").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.desiredv_cpus).into()),
        );
    }
    if let Some(var_212) = &input.subnets {
        let mut array_213 = object.key("subnets").start_array();
        for item_214 in var_212 {
            {
                array_213.value().string(item_214);
            }
        }
        array_213.finish();
    }
    if let Some(var_215) = &input.security_group_ids {
        let mut array_216 = object.key("securityGroupIds").start_array();
        for item_217 in var_215 {
            {
                array_216.value().string(item_217);
            }
        }
        array_216.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_launch_template_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.launch_template_id {
        object.key("launchTemplateId").string(var_218);
    }
    if let Some(var_219) = &input.launch_template_name {
        object.key("launchTemplateName").string(var_219);
    }
    if let Some(var_220) = &input.version {
        object.key("version").string(var_220);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ec2_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ec2Configuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.image_type {
        object.key("imageType").string(var_221);
    }
    if let Some(var_222) = &input.image_id_override {
        object.key("imageIdOverride").string(var_222);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Volume,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.host {
        let mut object_224 = object.key("host").start_object();
        crate::json_ser::serialize_structure_crate_model_host(&mut object_224, var_223)?;
        object_224.finish();
    }
    if let Some(var_225) = &input.name {
        object.key("name").string(var_225);
    }
    if let Some(var_226) = &input.efs_volume_configuration {
        let mut object_227 = object.key("efsVolumeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_volume_configuration(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_key_value_pair(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValuePair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.name {
        object.key("name").string(var_228);
    }
    if let Some(var_229) = &input.value {
        object.key("value").string(var_229);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mount_point(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MountPoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.container_path {
        object.key("containerPath").string(var_230);
    }
    if input.read_only {
        object.key("readOnly").boolean(input.read_only);
    }
    if let Some(var_231) = &input.source_volume {
        object.key("sourceVolume").string(var_231);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ulimit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Ulimit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("hardLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hard_limit).into()),
        );
    }
    if let Some(var_232) = &input.name {
        object.key("name").string(var_232);
    }
    {
        object.key("softLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.soft_limit).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_requirement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceRequirement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.value {
        object.key("value").string(var_233);
    }
    if let Some(var_234) = &input.r#type {
        object.key("type").string(var_234.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_linux_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LinuxParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_235) = &input.devices {
        let mut array_236 = object.key("devices").start_array();
        for item_237 in var_235 {
            {
                let mut object_238 = array_236.value().start_object();
                crate::json_ser::serialize_structure_crate_model_device(&mut object_238, item_237)?;
                object_238.finish();
            }
        }
        array_236.finish();
    }
    if input.init_process_enabled {
        object
            .key("initProcessEnabled")
            .boolean(input.init_process_enabled);
    }
    if input.shared_memory_size != 0 {
        object.key("sharedMemorySize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.shared_memory_size).into()),
        );
    }
    if let Some(var_239) = &input.tmpfs {
        let mut array_240 = object.key("tmpfs").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tmpfs(&mut object_242, item_241)?;
                object_242.finish();
            }
        }
        array_240.finish();
    }
    if input.max_swap != 0 {
        object.key("maxSwap").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_swap).into()),
        );
    }
    if input.swappiness != 0 {
        object.key("swappiness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.swappiness).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.log_driver {
        object.key("logDriver").string(var_243.as_str());
    }
    if let Some(var_244) = &input.options {
        let mut object_245 = object.key("options").start_object();
        for (key_246, value_247) in var_244 {
            {
                object_245.key(key_246).string(value_247);
            }
        }
        object_245.finish();
    }
    if let Some(var_248) = &input.secret_options {
        let mut array_249 = object.key("secretOptions").start_array();
        for item_250 in var_248 {
            {
                let mut object_251 = array_249.value().start_object();
                crate::json_ser::serialize_structure_crate_model_secret(&mut object_251, item_250)?;
                object_251.finish();
            }
        }
        array_249.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_secret(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Secret,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.name {
        object.key("name").string(var_252);
    }
    if let Some(var_253) = &input.value_from {
        object.key("valueFrom").string(var_253);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.assign_public_ip {
        object.key("assignPublicIp").string(var_254.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_fargate_platform_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FargatePlatformConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.platform_version {
        object.key("platformVersion").string(var_255);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_node_range_property(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeRangeProperty,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.target_nodes {
        object.key("targetNodes").string(var_256);
    }
    if let Some(var_257) = &input.container {
        let mut object_258 = object.key("container").start_object();
        crate::json_ser::serialize_structure_crate_model_container_properties(
            &mut object_258,
            var_257,
        )?;
        object_258.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_evaluate_on_exit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EvaluateOnExit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.on_status_reason {
        object.key("onStatusReason").string(var_259);
    }
    if let Some(var_260) = &input.on_reason {
        object.key("onReason").string(var_260);
    }
    if let Some(var_261) = &input.on_exit_code {
        object.key("onExitCode").string(var_261);
    }
    if let Some(var_262) = &input.action {
        object.key("action").string(var_262.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_node_property_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodePropertyOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.target_nodes {
        object.key("targetNodes").string(var_263);
    }
    if let Some(var_264) = &input.container_overrides {
        let mut object_265 = object.key("containerOverrides").start_object();
        crate::json_ser::serialize_structure_crate_model_container_overrides(
            &mut object_265,
            var_264,
        )?;
        object_265.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_host(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Host,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.source_path {
        object.key("sourcePath").string(var_266);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_volume_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsVolumeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_267) = &input.file_system_id {
        object.key("fileSystemId").string(var_267);
    }
    if let Some(var_268) = &input.root_directory {
        object.key("rootDirectory").string(var_268);
    }
    if let Some(var_269) = &input.transit_encryption {
        object.key("transitEncryption").string(var_269.as_str());
    }
    if input.transit_encryption_port != 0 {
        object.key("transitEncryptionPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.transit_encryption_port).into()),
        );
    }
    if let Some(var_270) = &input.authorization_config {
        let mut object_271 = object.key("authorizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_efs_authorization_config(
            &mut object_271,
            var_270,
        )?;
        object_271.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_device(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Device,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.host_path {
        object.key("hostPath").string(var_272);
    }
    if let Some(var_273) = &input.container_path {
        object.key("containerPath").string(var_273);
    }
    if let Some(var_274) = &input.permissions {
        let mut array_275 = object.key("permissions").start_array();
        for item_276 in var_274 {
            {
                array_275.value().string(item_276.as_str());
            }
        }
        array_275.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tmpfs(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tmpfs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.container_path {
        object.key("containerPath").string(var_277);
    }
    {
        object.key("size").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.size).into()),
        );
    }
    if let Some(var_278) = &input.mount_options {
        let mut array_279 = object.key("mountOptions").start_array();
        for item_280 in var_278 {
            {
                array_279.value().string(item_280);
            }
        }
        array_279.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_efs_authorization_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EfsAuthorizationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.access_point_id {
        object.key("accessPointId").string(var_281);
    }
    if let Some(var_282) = &input.iam {
        object.key("iam").string(var_282.as_str());
    }
    Ok(())
}
