// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;

impl DescribeComputeEnvironmentsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeComputeEnvironments`](crate::operation::describe_compute_environments::DescribeComputeEnvironments)>
    #[allow(unused_mut)]
    #[allow(clippy::let_and_return)]
    #[allow(clippy::needless_borrow)]
    pub async fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        aws_smithy_http::operation::Operation<
            crate::operation::describe_compute_environments::DescribeComputeEnvironments,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::operation::error::BuildError,
    > {
        let params_result = crate::endpoint::Params::builder()
            .set_region(_config.region.as_ref().map(|r| r.as_ref().to_owned()))
            .set_use_dual_stack(_config.use_dual_stack)
            .set_use_fips(_config.use_fips)
            .set_endpoint(_config.endpoint_url.clone())
            .build()
            .map_err(|err| {
                aws_smithy_http::endpoint::ResolveEndpointError::from_source(
                    "could not construct endpoint parameters",
                    err,
                )
            });
        let (endpoint_result, params) = match params_result {
            Ok(params) => (
                _config.endpoint_resolver.resolve_endpoint(&params),
                Some(params),
            ),
            Err(e) => (Err(e), None),
        };
        let mut request = {
            fn uri_base(
                _input: &crate::operation::describe_compute_environments::DescribeComputeEnvironmentsInput,
                output: &mut String,
            ) -> std::result::Result<(), aws_smithy_http::operation::error::BuildError>
            {
                write!(output, "/v1/describecomputeenvironments")
                    .expect("formatting should succeed");
                Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                input: &crate::operation::describe_compute_environments::DescribeComputeEnvironmentsInput,
                builder: http::request::Builder,
            ) -> std::result::Result<
                http::request::Builder,
                aws_smithy_http::operation::error::BuildError,
            > {
                let mut uri = String::new();
                uri_base(input, &mut uri)?;
                Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_request_header_if_absent(
                builder,
                http::header::CONTENT_TYPE,
                "application/json",
            );
            builder
        };
        let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]
        let body = aws_smithy_http::body::SdkBody::from(
            crate::protocol_serde::shape_describe_compute_environments::ser_describe_compute_environments_input(&self)?
        );
        if let Some(content_length) = body.content_length() {
            request = aws_smithy_http::header::set_request_header_if_absent(
                request,
                http::header::CONTENT_LENGTH,
                content_length,
            );
        }
        let request = request.body(body).expect("should be valid request");
        let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(endpoint_result);
        if let Some(params) = params {
            request.properties_mut().insert(params);
        }
        request
            .properties_mut()
            .insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        let mut user_agent = aws_http::user_agent::AwsUserAgent::new_from_environment(
            aws_types::os_shim_internal::Env::real(),
            crate::meta::API_METADATA.clone(),
        );
        if let Some(app_name) = _config.app_name() {
            user_agent = user_agent.with_app_name(app_name.clone());
        }
        request.properties_mut().insert(user_agent);
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
        request
            .properties_mut()
            .insert(aws_types::SigningService::from_static(
                _config.signing_service(),
            ));
        if let Some(region) = &_config.region {
            request
                .properties_mut()
                .insert(aws_types::region::SigningRegion::from(region.clone()));
        }
        if let Some(region) = &_config.region {
            request.properties_mut().insert(region.clone());
        }
        aws_http::auth::set_credentials_cache(
            &mut request.properties_mut(),
            _config.credentials_cache.clone(),
        );
        let op = aws_smithy_http::operation::Operation::new(
            request,
            crate::operation::describe_compute_environments::DescribeComputeEnvironments::new(),
        )
        .with_metadata(aws_smithy_http::operation::Metadata::new(
            "DescribeComputeEnvironments",
            "batch",
        ));
        let op = op.with_retry_classifier(aws_http::retry::AwsResponseRetryClassifier::new());
        Ok(op)
    }
}
/// `ParseStrictResponse` impl for `DescribeComputeEnvironments`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
#[non_exhaustive]
#[doc(hidden)]
pub struct DescribeComputeEnvironments;
impl DescribeComputeEnvironments {
    #[doc(hidden)]
    pub fn new() -> Self {
        Self
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeComputeEnvironments {
    type Output = std::result::Result<
        crate::operation::describe_compute_environments::DescribeComputeEnvironmentsOutput,
        crate::operation::describe_compute_environments::DescribeComputeEnvironmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_compute_environments::de_describe_compute_environments_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_compute_environments::de_describe_compute_environments_http_response(response)
        }
    }
}
#[allow(unreachable_code, unused_variables)]
#[cfg(test)]
mod describe_compute_environments_request_test {
    /// This test case validates a bug where unboxed primitives were incorrectly marked as required
    /// Test ID: DeserializeDescribeCompute
    #[tokio::test]
    async fn deserialize_describe_compute_response() {
        let expected_output =crate::operation::describe_compute_environments::DescribeComputeEnvironmentsOutput::builder()
        .set_compute_environments(
            Some(
                vec![
                    crate::types::ComputeEnvironmentDetail::builder()
                    .set_compute_environment_name(
                        Some(
                            "test-batch-compute".to_owned()
                        )
                    )
                    .set_compute_environment_arn(
                        Some(
                            "arn".to_owned()
                        )
                    )
                    .set_ecs_cluster_arn(
                        Some(
                            "clusteran".to_owned()
                        )
                    )
                    .set_tags(
                        Some(
                             {
                                let mut ret = std::collections::HashMap::new();
                                ret.insert(
                                    "foo".to_owned()
                                    ,
                                    "bar".to_owned()
                                );
                                ret
                            }
                        )
                    )
                    .set_type(
                        Some(
                            crate::types::CeType::from("MANAGED")
                        )
                    )
                    .set_state(
                        Some(
                            crate::types::CeState::from("ENABLED")
                        )
                    )
                    .set_status(
                        Some(
                            crate::types::CeStatus::from("VALID")
                        )
                    )
                    .set_status_reason(
                        Some(
                            "ComputeEnvironment Healthy".to_owned()
                        )
                    )
                    .set_compute_resources(
                        Some(
                            crate::types::ComputeResource::builder()
                            .set_type(
                                Some(
                                    crate::types::CrType::from("EC2")
                                )
                            )
                            .set_minv_cpus(
                                Some(
                                    0
                                )
                            )
                            .set_maxv_cpus(
                                Some(
                                    256
                                )
                            )
                            .set_desiredv_cpus(
                                Some(
                                    0
                                )
                            )
                            .set_instance_types(
                                Some(
                                    vec![
                                        "optimal".to_owned()
                                        ,
                                    ]
                                )
                            )
                            .set_subnets(
                                Some(
                                    vec![
                                        "subnet-c745b79c".to_owned()
                                        ,
                                        "subnet-d4e24fe8".to_owned()
                                        ,
                                    ]
                                )
                            )
                            .set_security_group_ids(
                                Some(
                                    vec![
                                        "sg-06a55e7b".to_owned()
                                        ,
                                    ]
                                )
                            )
                            .set_instance_role(
                                Some(
                                    "instancerole".to_owned()
                                )
                            )
                            .set_tags(
                                Some(
                                     {
                                        let mut ret = std::collections::HashMap::new();
                                        ret.insert(
                                            "Name".to_owned()
                                            ,
                                            "batch-compute".to_owned()
                                        );
                                        ret
                                    }
                                )
                            )
                            .set_ec2_configuration(
                                Some(
                                    vec![
                                        crate::types::Ec2Configuration::builder()
                                        .set_image_type(
                                            Some(
                                                "ECS_AL1".to_owned()
                                            )
                                        )
                                        .build()
                                        ,
                                    ]
                                )
                            )
                            .build()
                        )
                    )
                    .set_service_role(
                        Some(
                            "arn:aws:iam::432762038596:role/service-role/AWSBatchServiceRole".to_owned()
                        )
                    )
                    .build()
                    ,
                ]
            )
        )
        .build()
        ;
        let http_response = http::response::Builder::new()
        .status(200)
                    .body(aws_smithy_http::body::SdkBody::from("    {\n        \"computeEnvironments\":[{\n            \"computeEnvironmentName\":\"test-batch-compute\",\n            \"computeEnvironmentArn\":\"arn\",\n            \"ecsClusterArn\":\"clusteran\",\n            \"tags\":{\"foo\": \"bar\"},\n            \"type\":\"MANAGED\",\n            \"state\":\"ENABLED\",\n            \"status\":\"VALID\",\n            \"statusReason\":\"ComputeEnvironment Healthy\",\n            \"computeResources\":{\n                \"type\":\"EC2\",\n                \"minvCpus\":0,\n                \"maxvCpus\":256,\n                \"desiredvCpus\":0,\n                \"instanceTypes\":[\"optimal\"],\n                \"subnets\":[\"subnet-c745b79c\",\"subnet-d4e24fe8\"],\n                \"securityGroupIds\":[\"sg-06a55e7b\"],\n                \"instanceRole\":\"instancerole\",\n                \"tags\":{\"Name\":\"batch-compute\"},\n                \"ec2Configuration\":[{\"imageType\":\"ECS_AL1\"}]\n            },\n            \"serviceRole\":\"arn:aws:iam::432762038596:role/service-role/AWSBatchServiceRole\"\n        }]\n    }\n"))
                    .unwrap();
        let mut op_response = aws_smithy_http::operation::Response::new(http_response);
        use aws_smithy_http::response::ParseHttpResponse;
        let parser =
            crate::operation::describe_compute_environments::DescribeComputeEnvironments::new();
        let parsed = parser.parse_unloaded(&mut op_response);
        let parsed = parsed.unwrap_or_else(|| {
                        let (http_response, _) = op_response.into_parts();
                        let http_response = http_response.map(|body|bytes::Bytes::copy_from_slice(body.bytes().unwrap()));
                        <crate::operation::describe_compute_environments::DescribeComputeEnvironments as aws_smithy_http::response::ParseHttpResponse>::parse_loaded(&parser, &http_response)
                    });
        let parsed = parsed.unwrap();
        pretty_assertions::assert_eq!(
            parsed.compute_environments,
            expected_output.compute_environments,
            "Unexpected value for `compute_environments`"
        );
        pretty_assertions::assert_eq!(
            parsed.next_token,
            expected_output.next_token,
            "Unexpected value for `next_token`"
        );
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type DescribeComputeEnvironmentsErrorKind = DescribeComputeEnvironmentsError;
/// Error type for the `DescribeComputeEnvironmentsError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeComputeEnvironmentsError {
    /// <p>These errors are usually caused by a client action. One example cause is using an action or resource on behalf of a user that doesn't have permissions to use the action or resource. Another cause is specifying an identifier that's not valid.</p>
    ClientException(crate::types::error::ClientException),
    /// <p>These errors are usually caused by a server issue.</p>
    ServerException(crate::types::error::ServerException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for DescribeComputeEnvironmentsError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for DescribeComputeEnvironmentsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::ClientException(_inner) => _inner.fmt(f),
            Self::ServerException(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for DescribeComputeEnvironmentsError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::ClientException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::ServerException(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId
    for crate::operation::describe_compute_environments::DescribeComputeEnvironmentsError
{
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeComputeEnvironmentsError {
    fn code(&self) -> std::option::Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> std::option::Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeComputeEnvironmentsError {
    /// Creates the `DescribeComputeEnvironmentsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `DescribeComputeEnvironmentsError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::ClientException(e) => e.meta(),
            Self::ServerException(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `DescribeComputeEnvironmentsError::ClientException`.
    pub fn is_client_exception(&self) -> bool {
        matches!(self, Self::ClientException(_))
    }
    /// Returns `true` if the error kind is `DescribeComputeEnvironmentsError::ServerException`.
    pub fn is_server_exception(&self) -> bool {
        matches!(self, Self::ServerException(_))
    }
}
impl std::error::Error for DescribeComputeEnvironmentsError {
    fn source(&self) -> std::option::Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::ClientException(_inner) => Some(_inner),
            Self::ServerException(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

pub use crate::operation::describe_compute_environments::_describe_compute_environments_output::DescribeComputeEnvironmentsOutput;

pub use crate::operation::describe_compute_environments::_describe_compute_environments_input::DescribeComputeEnvironmentsInput;

mod _describe_compute_environments_input;

mod _describe_compute_environments_output;

/// Builders
pub mod builders;

/// Paginator for this operation
pub mod paginator;
