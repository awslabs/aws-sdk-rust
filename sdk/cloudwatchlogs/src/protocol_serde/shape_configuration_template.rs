// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_configuration_template<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ConfigurationTemplate>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ConfigurationTemplateBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "service" => {
                            builder = builder.set_service(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "logType" => {
                            builder = builder.set_log_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "resourceType" => {
                            builder = builder.set_resource_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "deliveryDestinationType" => {
                            builder = builder.set_delivery_destination_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DeliveryDestinationType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "defaultDeliveryConfigValues" => {
                            builder = builder.set_default_delivery_config_values(
                                    crate::protocol_serde::shape_configuration_template_delivery_config_values::de_configuration_template_delivery_config_values(tokens)?
                                );
                        }
                        "allowedFields" => {
                            builder = builder.set_allowed_fields(crate::protocol_serde::shape_allowed_fields::de_allowed_fields(tokens)?);
                        }
                        "allowedOutputFormats" => {
                            builder = builder.set_allowed_output_formats(crate::protocol_serde::shape_output_formats::de_output_formats(tokens)?);
                        }
                        "allowedActionForAllowVendedLogsDeliveryForResource" => {
                            builder = builder.set_allowed_action_for_allow_vended_logs_delivery_for_resource(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "allowedFieldDelimiters" => {
                            builder = builder.set_allowed_field_delimiters(
                                crate::protocol_serde::shape_allowed_field_delimiters::de_allowed_field_delimiters(tokens)?,
                            );
                        }
                        "allowedSuffixPathFields" => {
                            builder = builder.set_allowed_suffix_path_fields(crate::protocol_serde::shape_record_fields::de_record_fields(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
