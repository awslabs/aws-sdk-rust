// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_filter_log_events_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::filter_log_events::FilterLogEventsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.log_group_name {
        object.key("logGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.log_group_identifier {
        object.key("logGroupIdentifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.log_stream_names {
        let mut array_4 = object.key("logStreamNames").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.log_stream_name_prefix {
        object.key("logStreamNamePrefix").string(var_6.as_str());
    }
    if let Some(var_7) = &input.start_time {
        object.key("startTime").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.end_time {
        object.key("endTime").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.filter_pattern {
        object.key("filterPattern").string(var_9.as_str());
    }
    if let Some(var_10) = &input.next_token {
        object.key("nextToken").string(var_10.as_str());
    }
    if let Some(var_11) = &input.limit {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.interleaved {
        object.key("interleaved").boolean(*var_12);
    }
    if let Some(var_13) = &input.unmask {
        object.key("unmask").boolean(*var_13);
    }
    Ok(())
}
