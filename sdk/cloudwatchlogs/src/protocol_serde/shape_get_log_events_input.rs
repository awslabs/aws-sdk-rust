// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_log_events_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_log_events::GetLogEventsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.log_group_name {
        object.key("logGroupName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.log_group_identifier {
        object.key("logGroupIdentifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.log_stream_name {
        object.key("logStreamName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.start_time {
        object.key("startTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.end_time {
        object.key("endTime").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.next_token {
        object.key("nextToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.limit {
        object.key("limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.start_from_head {
        object.key("startFromHead").boolean(*var_8);
    }
    if input.unmask {
        object.key("unmask").boolean(input.unmask);
    }
    Ok(())
}
