// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_metric_filter::_put_metric_filter_output::PutMetricFilterOutputBuilder;

pub use crate::operation::put_metric_filter::_put_metric_filter_input::PutMetricFilterInputBuilder;

/// Fluent builder constructing a request to `PutMetricFilter`.
///
/// <p>Creates or updates a metric filter and associates it with the specified log group. With metric filters, you can configure rules to extract metric data from log events ingested through <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html">PutLogEvents</a>.</p>
/// <p>The maximum number of metric filters that can be associated with a log group is 100.</p>
/// <p>When you create a metric filter, you can also optionally assign a unit and dimensions to the metric that is created.</p> <important>
/// <p>Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as <code>IPAddress</code> or <code>requestID</code> as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. </p>
/// <p>CloudWatch Logs disables a metric filter if it generates 1,000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.</p>
/// <p>You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html"> Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges</a>. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutMetricFilterFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_metric_filter::builders::PutMetricFilterInputBuilder,
}
impl PutMetricFilterFluentBuilder {
    /// Creates a new `PutMetricFilter`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_metric_filter::PutMetricFilter,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_metric_filter::PutMetricFilterError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_metric_filter::PutMetricFilterOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_metric_filter::PutMetricFilterError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the log group.</p>
    pub fn log_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.log_group_name(input.into());
        self
    }
    /// <p>The name of the log group.</p>
    pub fn set_log_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_log_group_name(input);
        self
    }
    /// <p>A name for the metric filter.</p>
    pub fn filter_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_name(input.into());
        self
    }
    /// <p>A name for the metric filter.</p>
    pub fn set_filter_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter_name(input);
        self
    }
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    pub fn filter_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_pattern(input.into());
        self
    }
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    pub fn set_filter_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter_pattern(input);
        self
    }
    /// Appends an item to `metricTransformations`.
    ///
    /// To override the contents of this collection use [`set_metric_transformations`](Self::set_metric_transformations).
    ///
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    pub fn metric_transformations(mut self, input: crate::types::MetricTransformation) -> Self {
        self.inner = self.inner.metric_transformations(input);
        self
    }
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    pub fn set_metric_transformations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricTransformation>>,
    ) -> Self {
        self.inner = self.inner.set_metric_transformations(input);
        self
    }
}
