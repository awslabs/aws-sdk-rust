// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutSubscriptionFilter`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`log_group_name(impl Into<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::log_group_name) / [`set_log_group_name(Option<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::set_log_group_name):<br>required: **true**<br><p>The name of the log group.</p><br>
    ///   - [`filter_name(impl Into<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::filter_name) / [`set_filter_name(Option<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::set_filter_name):<br>required: **true**<br><p>A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in <code>filterName</code>. To find the name of the filter currently associated with a log group, use <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html">DescribeSubscriptionFilters</a>.</p><br>
    ///   - [`filter_pattern(impl Into<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::filter_pattern) / [`set_filter_pattern(Option<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::set_filter_pattern):<br>required: **true**<br><p>A filter pattern for subscribing to a filtered stream of log events.</p><br>
    ///   - [`destination_arn(impl Into<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::destination_arn) / [`set_destination_arn(Option<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::set_destination_arn):<br>required: **true**<br><p>The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:</p>  <ul>   <li> <p>An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li>   <li> <p>A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.</p> <p>If you're setting up a cross-account subscription, the destination must have an IAM policy associated with it. The IAM policy must allow the sender to send logs to the destination. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html">PutDestinationPolicy</a>.</p> </li>   <li> <p>A Kinesis Data Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.</p> </li>   <li> <p>A Lambda function belonging to the same account as the subscription filter, for same-account delivery.</p> </li>  </ul><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::set_role_arn):<br>required: **false**<br><p>The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.</p><br>
    ///   - [`distribution(Distribution)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::distribution) / [`set_distribution(Option<Distribution>)`](crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::set_distribution):<br>required: **false**<br><p>The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis data stream. </p><br>
    /// - On success, responds with [`PutSubscriptionFilterOutput`](crate::operation::put_subscription_filter::PutSubscriptionFilterOutput)
    /// - On failure, responds with [`SdkError<PutSubscriptionFilterError>`](crate::operation::put_subscription_filter::PutSubscriptionFilterError)
    pub fn put_subscription_filter(&self) -> crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder {
        crate::operation::put_subscription_filter::builders::PutSubscriptionFilterFluentBuilder::new(self.handle.clone())
    }
}
