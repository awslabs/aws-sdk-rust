// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLogRecord`](crate::client::fluent_builders::GetLogRecord) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`log_record_pointer(impl Into<String>)`](crate::client::fluent_builders::GetLogRecord::log_record_pointer) / [`set_log_record_pointer(Option<String>)`](crate::client::fluent_builders::GetLogRecord::set_log_record_pointer): <p>The pointer corresponding to the log event record you want to retrieve. You get this from the response of a <code>GetQueryResults</code> operation. In that response, the value of the <code>@ptr</code> field for a log event is the value to use as <code>logRecordPointer</code> to retrieve that complete log event record.</p>
    ///   - [`unmask(bool)`](crate::client::fluent_builders::GetLogRecord::unmask) / [`set_unmask(bool)`](crate::client::fluent_builders::GetLogRecord::set_unmask): <p>Specify <code>true</code> to display the log event fields with all sensitive data unmasked and visible. The default is <code>false</code>.</p>  <p>To use this operation with this parameter, you must be signed into an account with the <code>logs:Unmask</code> permission.</p>
    /// - On success, responds with [`GetLogRecordOutput`](crate::output::GetLogRecordOutput) with field(s):
    ///   - [`log_record(Option<HashMap<String, String>>)`](crate::output::GetLogRecordOutput::log_record): <p>The requested log event, as a JSON string.</p>
    /// - On failure, responds with [`SdkError<GetLogRecordError>`](crate::error::GetLogRecordError)
    pub fn get_log_record(&self) -> crate::client::fluent_builders::GetLogRecord {
        crate::client::fluent_builders::GetLogRecord::new(self.handle.clone())
    }
}
