// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLogObject`](crate::operation::get_log_object::builders::GetLogObjectFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`unmask(bool)`](crate::operation::get_log_object::builders::GetLogObjectFluentBuilder::unmask) / [`set_unmask(Option<bool>)`](crate::operation::get_log_object::builders::GetLogObjectFluentBuilder::set_unmask):<br>required: **false**<br><p>A boolean flag that indicates whether to unmask sensitive log data. When set to true, any masked or redacted data in the log object will be displayed in its original form. Default is false.</p><br>
    ///   - [`log_object_pointer(impl Into<String>)`](crate::operation::get_log_object::builders::GetLogObjectFluentBuilder::log_object_pointer) / [`set_log_object_pointer(Option<String>)`](crate::operation::get_log_object::builders::GetLogObjectFluentBuilder::set_log_object_pointer):<br>required: **true**<br><p>A pointer to the specific log object to retrieve. This is a required parameter that uniquely identifies the log object within CloudWatch Logs. The pointer is typically obtained from a previous query or filter operation.</p><br>
    /// - On success, responds with [`GetLogObjectOutput`](crate::operation::get_log_object::GetLogObjectOutput) with field(s):
    ///   - [`field_stream(EventReceiver<GetLogObjectResponseStream, GetLogObjectResponseStreamError>)`](crate::operation::get_log_object::GetLogObjectOutput::field_stream): <p>A stream of structured log data returned by the GetLogObject operation. This stream contains log events with their associated metadata and extracted fields.</p>
    /// - On failure, responds with [`SdkError<GetLogObjectError>`](crate::operation::get_log_object::GetLogObjectError)
    pub fn get_log_object(&self) -> crate::operation::get_log_object::builders::GetLogObjectFluentBuilder {
        crate::operation::get_log_object::builders::GetLogObjectFluentBuilder::new(self.handle.clone())
    }
}
