// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    DataAlreadyAcceptedError(crate::error::DataAlreadyAcceptedError),
    InvalidOperationError(crate::error::InvalidOperationError),
    InvalidParameterError(crate::error::InvalidParameterError),
    InvalidSequenceTokenError(crate::error::InvalidSequenceTokenError),
    LimitExceededError(crate::error::LimitExceededError),
    MalformedQueryError(crate::error::MalformedQueryError),
    OperationAbortedError(crate::error::OperationAbortedError),
    ResourceAlreadyExistsError(crate::error::ResourceAlreadyExistsError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    UnrecognizedClientError(crate::error::UnrecognizedClientError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DataAlreadyAcceptedError(inner) => inner.fmt(f),
            Error::InvalidOperationError(inner) => inner.fmt(f),
            Error::InvalidParameterError(inner) => inner.fmt(f),
            Error::InvalidSequenceTokenError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::MalformedQueryError(inner) => inner.fmt(f),
            Error::OperationAbortedError(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ServiceUnavailableError(inner) => inner.fmt(f),
            Error::UnrecognizedClientError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateKmsKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateKmsKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateKmsKeyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::AssociateKmsKeyErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::AssociateKmsKeyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::AssociateKmsKeyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::AssociateKmsKeyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelExportTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelExportTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelExportTaskErrorKind::InvalidOperationError(inner) => {
                    Error::InvalidOperationError(inner)
                }
                crate::error::CancelExportTaskErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CancelExportTaskErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CancelExportTaskErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CancelExportTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateExportTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateExportTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateExportTaskErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateExportTaskErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateExportTaskErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::CreateExportTaskErrorKind::ResourceAlreadyExistsError(inner) => {
                    Error::ResourceAlreadyExistsError(inner)
                }
                crate::error::CreateExportTaskErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CreateExportTaskErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateExportTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLogGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLogGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLogGroupErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateLogGroupErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateLogGroupErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::CreateLogGroupErrorKind::ResourceAlreadyExistsError(inner) => {
                    Error::ResourceAlreadyExistsError(inner)
                }
                crate::error::CreateLogGroupErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateLogGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLogStreamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLogStreamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLogStreamErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateLogStreamErrorKind::ResourceAlreadyExistsError(inner) => {
                    Error::ResourceAlreadyExistsError(inner)
                }
                crate::error::CreateLogStreamErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::CreateLogStreamErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::CreateLogStreamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDestinationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDestinationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDestinationErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteDestinationErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DeleteDestinationErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteDestinationErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteDestinationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLogGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLogGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLogGroupErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteLogGroupErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DeleteLogGroupErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteLogGroupErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteLogGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLogStreamError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLogStreamError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLogStreamErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteLogStreamErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DeleteLogStreamErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteLogStreamErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteLogStreamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteMetricFilterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteMetricFilterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteMetricFilterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteMetricFilterErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DeleteMetricFilterErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteMetricFilterErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteMetricFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteQueryDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteQueryDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteQueryDefinitionErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteQueryDefinitionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteQueryDefinitionErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteQueryDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteResourcePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteResourcePolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteResourcePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRetentionPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRetentionPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRetentionPolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteRetentionPolicyErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DeleteRetentionPolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteRetentionPolicyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteRetentionPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSubscriptionFilterError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteSubscriptionFilterError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSubscriptionFilterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteSubscriptionFilterErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DeleteSubscriptionFilterErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteSubscriptionFilterErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DeleteSubscriptionFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDestinationsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDestinationsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDestinationsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeDestinationsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeDestinationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExportTasksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeExportTasksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExportTasksErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeExportTasksErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeExportTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLogGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLogGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLogGroupsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeLogGroupsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeLogGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLogStreamsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLogStreamsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLogStreamsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeLogStreamsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeLogStreamsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeLogStreamsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMetricFiltersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeMetricFiltersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMetricFiltersErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeMetricFiltersErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeMetricFiltersErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeMetricFiltersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeQueriesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeQueriesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeQueriesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeQueriesErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeQueriesErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeQueriesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeQueryDefinitionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeQueryDefinitionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeQueryDefinitionsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeQueryDefinitionsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeQueryDefinitionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeResourcePoliciesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeResourcePoliciesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeResourcePoliciesErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeResourcePoliciesErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DescribeResourcePoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSubscriptionFiltersError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSubscriptionFiltersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSubscriptionFiltersErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::DescribeSubscriptionFiltersErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::DescribeSubscriptionFiltersErrorKind::ServiceUnavailableError(
                    inner,
                ) => Error::ServiceUnavailableError(inner),
                crate::error::DescribeSubscriptionFiltersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateKmsKeyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisassociateKmsKeyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateKmsKeyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DisassociateKmsKeyErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::DisassociateKmsKeyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DisassociateKmsKeyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::DisassociateKmsKeyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::FilterLogEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::FilterLogEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::FilterLogEventsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::FilterLogEventsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::FilterLogEventsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::FilterLogEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLogEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLogEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLogEventsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetLogEventsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetLogEventsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetLogEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLogGroupFieldsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLogGroupFieldsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLogGroupFieldsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetLogGroupFieldsErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::GetLogGroupFieldsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetLogGroupFieldsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetLogGroupFieldsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLogRecordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLogRecordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLogRecordErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetLogRecordErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::GetLogRecordErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetLogRecordErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetLogRecordErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetQueryResultsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetQueryResultsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetQueryResultsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetQueryResultsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetQueryResultsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::GetQueryResultsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsLogGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsLogGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsLogGroupErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListTagsLogGroupErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::ListTagsLogGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutDestinationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutDestinationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutDestinationErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutDestinationErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::PutDestinationErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutDestinationPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutDestinationPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutDestinationPolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutDestinationPolicyErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::PutDestinationPolicyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutDestinationPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutLogEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutLogEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutLogEventsErrorKind::DataAlreadyAcceptedError(inner) => {
                    Error::DataAlreadyAcceptedError(inner)
                }
                crate::error::PutLogEventsErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutLogEventsErrorKind::InvalidSequenceTokenError(inner) => {
                    Error::InvalidSequenceTokenError(inner)
                }
                crate::error::PutLogEventsErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutLogEventsErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutLogEventsErrorKind::UnrecognizedClientError(inner) => {
                    Error::UnrecognizedClientError(inner)
                }
                crate::error::PutLogEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutMetricFilterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutMetricFilterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutMetricFilterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutMetricFilterErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutMetricFilterErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::PutMetricFilterErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutMetricFilterErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutMetricFilterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutQueryDefinitionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutQueryDefinitionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutQueryDefinitionErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutQueryDefinitionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutQueryDefinitionErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutQueryDefinitionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutResourcePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutResourcePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutResourcePolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutResourcePolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutRetentionPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutRetentionPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutRetentionPolicyErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutRetentionPolicyErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::PutRetentionPolicyErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutRetentionPolicyErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutRetentionPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutSubscriptionFilterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutSubscriptionFilterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutSubscriptionFilterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::PutSubscriptionFilterErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::PutSubscriptionFilterErrorKind::OperationAbortedError(inner) => {
                    Error::OperationAbortedError(inner)
                }
                crate::error::PutSubscriptionFilterErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::PutSubscriptionFilterErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::PutSubscriptionFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartQueryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartQueryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartQueryErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::StartQueryErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::StartQueryErrorKind::MalformedQueryError(inner) => {
                    Error::MalformedQueryError(inner)
                }
                crate::error::StartQueryErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::StartQueryErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::StartQueryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopQueryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopQueryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopQueryErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::StopQueryErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::StopQueryErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::StopQueryErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagLogGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagLogGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagLogGroupErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::TagLogGroupErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TagLogGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestMetricFilterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestMetricFilterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestMetricFilterErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::TestMetricFilterErrorKind::ServiceUnavailableError(inner) => {
                    Error::ServiceUnavailableError(inner)
                }
                crate::error::TestMetricFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagLogGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagLogGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagLogGroupErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UntagLogGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
