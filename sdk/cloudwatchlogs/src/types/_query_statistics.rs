// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryStatistics {
    /// <p>The number of log events that matched the query string.</p>
    #[doc(hidden)]
    pub records_matched: f64,
    /// <p>The total number of log events scanned during the query.</p>
    #[doc(hidden)]
    pub records_scanned: f64,
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    #[doc(hidden)]
    pub bytes_scanned: f64,
}
impl QueryStatistics {
    /// <p>The number of log events that matched the query string.</p>
    pub fn records_matched(&self) -> f64 {
        self.records_matched
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn records_scanned(&self) -> f64 {
        self.records_scanned
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn bytes_scanned(&self) -> f64 {
        self.bytes_scanned
    }
}
impl QueryStatistics {
    /// Creates a new builder-style object to manufacture [`QueryStatistics`](crate::types::QueryStatistics).
    pub fn builder() -> crate::types::builders::QueryStatisticsBuilder {
        crate::types::builders::QueryStatisticsBuilder::default()
    }
}

/// A builder for [`QueryStatistics`](crate::types::QueryStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryStatisticsBuilder {
    pub(crate) records_matched: std::option::Option<f64>,
    pub(crate) records_scanned: std::option::Option<f64>,
    pub(crate) bytes_scanned: std::option::Option<f64>,
}
impl QueryStatisticsBuilder {
    /// <p>The number of log events that matched the query string.</p>
    pub fn records_matched(mut self, input: f64) -> Self {
        self.records_matched = Some(input);
        self
    }
    /// <p>The number of log events that matched the query string.</p>
    pub fn set_records_matched(mut self, input: std::option::Option<f64>) -> Self {
        self.records_matched = input;
        self
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn records_scanned(mut self, input: f64) -> Self {
        self.records_scanned = Some(input);
        self
    }
    /// <p>The total number of log events scanned during the query.</p>
    pub fn set_records_scanned(mut self, input: std::option::Option<f64>) -> Self {
        self.records_scanned = input;
        self
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn bytes_scanned(mut self, input: f64) -> Self {
        self.bytes_scanned = Some(input);
        self
    }
    /// <p>The total number of bytes in the log events scanned during the query.</p>
    pub fn set_bytes_scanned(mut self, input: std::option::Option<f64>) -> Self {
        self.bytes_scanned = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryStatistics`](crate::types::QueryStatistics).
    pub fn build(self) -> crate::types::QueryStatistics {
        crate::types::QueryStatistics {
            records_matched: self.records_matched.unwrap_or_default(),
            records_scanned: self.records_scanned.unwrap_or_default(),
            bytes_scanned: self.bytes_scanned.unwrap_or_default(),
        }
    }
}
