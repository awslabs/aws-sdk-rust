// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the search status of a log stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchedLogStream {
    /// <p>The name of the log stream.</p>
    #[doc(hidden)]
    pub log_stream_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether all the events in this log stream were searched.</p>
    #[doc(hidden)]
    pub searched_completely: std::option::Option<bool>,
}
impl SearchedLogStream {
    /// <p>The name of the log stream.</p>
    pub fn log_stream_name(&self) -> std::option::Option<&str> {
        self.log_stream_name.as_deref()
    }
    /// <p>Indicates whether all the events in this log stream were searched.</p>
    pub fn searched_completely(&self) -> std::option::Option<bool> {
        self.searched_completely
    }
}
impl SearchedLogStream {
    /// Creates a new builder-style object to manufacture [`SearchedLogStream`](crate::types::SearchedLogStream).
    pub fn builder() -> crate::types::builders::SearchedLogStreamBuilder {
        crate::types::builders::SearchedLogStreamBuilder::default()
    }
}

/// A builder for [`SearchedLogStream`](crate::types::SearchedLogStream).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchedLogStreamBuilder {
    pub(crate) log_stream_name: std::option::Option<std::string::String>,
    pub(crate) searched_completely: std::option::Option<bool>,
}
impl SearchedLogStreamBuilder {
    /// <p>The name of the log stream.</p>
    pub fn log_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_stream_name = Some(input.into());
        self
    }
    /// <p>The name of the log stream.</p>
    pub fn set_log_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_stream_name = input;
        self
    }
    /// <p>Indicates whether all the events in this log stream were searched.</p>
    pub fn searched_completely(mut self, input: bool) -> Self {
        self.searched_completely = Some(input);
        self
    }
    /// <p>Indicates whether all the events in this log stream were searched.</p>
    pub fn set_searched_completely(mut self, input: std::option::Option<bool>) -> Self {
        self.searched_completely = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchedLogStream`](crate::types::SearchedLogStream).
    pub fn build(self) -> crate::types::SearchedLogStream {
        crate::types::SearchedLogStream {
            log_stream_name: self.log_stream_name,
            searched_completely: self.searched_completely,
        }
    }
}
