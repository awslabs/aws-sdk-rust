// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a log event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputLogEvent {
    /// <p>The time the event occurred, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<i64>,
    /// <p>The data contained in the log event.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The time the event was ingested, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    #[doc(hidden)]
    pub ingestion_time: std::option::Option<i64>,
}
impl OutputLogEvent {
    /// <p>The time the event occurred, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn timestamp(&self) -> std::option::Option<i64> {
        self.timestamp
    }
    /// <p>The data contained in the log event.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The time the event was ingested, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn ingestion_time(&self) -> std::option::Option<i64> {
        self.ingestion_time
    }
}
impl OutputLogEvent {
    /// Creates a new builder-style object to manufacture [`OutputLogEvent`](crate::types::OutputLogEvent).
    pub fn builder() -> crate::types::builders::OutputLogEventBuilder {
        crate::types::builders::OutputLogEventBuilder::default()
    }
}

/// A builder for [`OutputLogEvent`](crate::types::OutputLogEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputLogEventBuilder {
    pub(crate) timestamp: std::option::Option<i64>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) ingestion_time: std::option::Option<i64>,
}
impl OutputLogEventBuilder {
    /// <p>The time the event occurred, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time the event occurred, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The data contained in the log event.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The data contained in the log event.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The time the event was ingested, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn ingestion_time(mut self, input: i64) -> Self {
        self.ingestion_time = Some(input);
        self
    }
    /// <p>The time the event was ingested, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn set_ingestion_time(mut self, input: std::option::Option<i64>) -> Self {
        self.ingestion_time = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputLogEvent`](crate::types::OutputLogEvent).
    pub fn build(self) -> crate::types::OutputLogEvent {
        crate::types::OutputLogEvent {
            timestamp: self.timestamp,
            message: self.message,
            ingestion_time: self.ingestion_time,
        }
    }
}
