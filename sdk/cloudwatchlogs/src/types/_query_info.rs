// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about one CloudWatch Logs Insights query that matches the request in a <code>DescribeQueries</code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryInfo {
    /// <p>The unique ID number of this query.</p>
    #[doc(hidden)]
    pub query_id: std::option::Option<std::string::String>,
    /// <p>The query string used in this query.</p>
    #[doc(hidden)]
    pub query_string: std::option::Option<std::string::String>,
    /// <p>The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::QueryStatus>,
    /// <p>The date and time that this query was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<i64>,
    /// <p>The name of the log group scanned by this query.</p>
    #[doc(hidden)]
    pub log_group_name: std::option::Option<std::string::String>,
}
impl QueryInfo {
    /// <p>The unique ID number of this query.</p>
    pub fn query_id(&self) -> std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>The query string used in this query.</p>
    pub fn query_string(&self) -> std::option::Option<&str> {
        self.query_string.as_deref()
    }
    /// <p>The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::QueryStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time that this query was created.</p>
    pub fn create_time(&self) -> std::option::Option<i64> {
        self.create_time
    }
    /// <p>The name of the log group scanned by this query.</p>
    pub fn log_group_name(&self) -> std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
}
impl QueryInfo {
    /// Creates a new builder-style object to manufacture [`QueryInfo`](crate::types::QueryInfo).
    pub fn builder() -> crate::types::builders::QueryInfoBuilder {
        crate::types::builders::QueryInfoBuilder::default()
    }
}

/// A builder for [`QueryInfo`](crate::types::QueryInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryInfoBuilder {
    pub(crate) query_id: std::option::Option<std::string::String>,
    pub(crate) query_string: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::QueryStatus>,
    pub(crate) create_time: std::option::Option<i64>,
    pub(crate) log_group_name: std::option::Option<std::string::String>,
}
impl QueryInfoBuilder {
    /// <p>The unique ID number of this query.</p>
    pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_id = Some(input.into());
        self
    }
    /// <p>The unique ID number of this query.</p>
    pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The query string used in this query.</p>
    pub fn query_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_string = Some(input.into());
        self
    }
    /// <p>The query string used in this query.</p>
    pub fn set_query_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.</p>
    pub fn status(mut self, input: crate::types::QueryStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of this query. Possible values are <code>Cancelled</code>, <code>Complete</code>, <code>Failed</code>, <code>Running</code>, <code>Scheduled</code>, and <code>Unknown</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::QueryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The date and time that this query was created.</p>
    pub fn create_time(mut self, input: i64) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The date and time that this query was created.</p>
    pub fn set_create_time(mut self, input: std::option::Option<i64>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The name of the log group scanned by this query.</p>
    pub fn log_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group_name = Some(input.into());
        self
    }
    /// <p>The name of the log group scanned by this query.</p>
    pub fn set_log_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryInfo`](crate::types::QueryInfo).
    pub fn build(self) -> crate::types::QueryInfo {
        crate::types::QueryInfo {
            query_id: self.query_id,
            query_string: self.query_string,
            status: self.status,
            create_time: self.create_time,
            log_group_name: self.log_group_name,
        }
    }
}
