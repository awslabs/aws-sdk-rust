// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteCachePolicy`](crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder::set_id):<br>required: **true**<br><p>The unique identifier for the cache policy that you are deleting. To get the identifier, you can use <code>ListCachePolicies</code>.</p><br>
    ///   - [`if_match(impl Into<String>)`](crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder::if_match) / [`set_if_match(Option<String>)`](crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder::set_if_match):<br>required: **false**<br><p>The version of the cache policy that you are deleting. The version is the cache policy's <code>ETag</code> value, which you can get using <code>ListCachePolicies</code>, <code>GetCachePolicy</code>, or <code>GetCachePolicyConfig</code>.</p><br>
    /// - On success, responds with [`DeleteCachePolicyOutput`](crate::operation::delete_cache_policy::DeleteCachePolicyOutput)
    /// - On failure, responds with [`SdkError<DeleteCachePolicyError>`](crate::operation::delete_cache_policy::DeleteCachePolicyError)
    pub fn delete_cache_policy(&self) -> crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder {
        crate::operation::delete_cache_policy::builders::DeleteCachePolicyFluentBuilder::new(self.handle.clone())
    }
}
