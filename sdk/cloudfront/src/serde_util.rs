// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = {
            let builder = crate::types::builders::TagsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn realtime_log_config_correct_errors(
    mut builder: crate::types::builders::RealtimeLogConfigBuilder,
) -> crate::types::builders::RealtimeLogConfigBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.sampling_rate.is_none() {
        builder.sampling_rate = Some(Default::default())
    }
    if builder.end_points.is_none() {
        builder.end_points = Some(Default::default())
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn cache_policy_correct_errors(mut builder: crate::types::builders::CachePolicyBuilder) -> crate::types::builders::CachePolicyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.cache_policy_config.is_none() {
        builder.cache_policy_config = {
            let builder = crate::types::builders::CachePolicyConfigBuilder::default();
            crate::serde_util::cache_policy_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cache_policy_config_correct_errors(
    mut builder: crate::types::builders::CachePolicyConfigBuilder,
) -> crate::types::builders::CachePolicyConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.min_ttl.is_none() {
        builder.min_ttl = Some(Default::default())
    }
    builder
}

pub(crate) fn cache_policy_list_correct_errors(
    mut builder: crate::types::builders::CachePolicyListBuilder,
) -> crate::types::builders::CachePolicyListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_front_origin_access_identity_correct_errors(
    mut builder: crate::types::builders::CloudFrontOriginAccessIdentityBuilder,
) -> crate::types::builders::CloudFrontOriginAccessIdentityBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.s3_canonical_user_id.is_none() {
        builder.s3_canonical_user_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_front_origin_access_identity_config_correct_errors(
    mut builder: crate::types::builders::CloudFrontOriginAccessIdentityConfigBuilder,
) -> crate::types::builders::CloudFrontOriginAccessIdentityConfigBuilder {
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_front_origin_access_identity_list_correct_errors(
    mut builder: crate::types::builders::CloudFrontOriginAccessIdentityListBuilder,
) -> crate::types::builders::CloudFrontOriginAccessIdentityListBuilder {
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_deployment_policy_correct_errors(
    mut builder: crate::types::builders::ContinuousDeploymentPolicyBuilder,
) -> crate::types::builders::ContinuousDeploymentPolicyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.continuous_deployment_policy_config.is_none() {
        builder.continuous_deployment_policy_config = {
            let builder = crate::types::builders::ContinuousDeploymentPolicyConfigBuilder::default();
            crate::serde_util::continuous_deployment_policy_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn continuous_deployment_policy_config_correct_errors(
    mut builder: crate::types::builders::ContinuousDeploymentPolicyConfigBuilder,
) -> crate::types::builders::ContinuousDeploymentPolicyConfigBuilder {
    if builder.staging_distribution_dns_names.is_none() {
        builder.staging_distribution_dns_names = {
            let builder = crate::types::builders::StagingDistributionDnsNamesBuilder::default();
            crate::serde_util::staging_distribution_dns_names_correct_errors(builder).build().ok()
        }
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_deployment_policy_list_correct_errors(
    mut builder: crate::types::builders::ContinuousDeploymentPolicyListBuilder,
) -> crate::types::builders::ContinuousDeploymentPolicyListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn distribution_correct_errors(mut builder: crate::types::builders::DistributionBuilder) -> crate::types::builders::DistributionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.in_progress_invalidation_batches.is_none() {
        builder.in_progress_invalidation_batches = Some(Default::default())
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.distribution_config.is_none() {
        builder.distribution_config = {
            let builder = crate::types::builders::DistributionConfigBuilder::default();
            crate::serde_util::distribution_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn distribution_config_correct_errors(
    mut builder: crate::types::builders::DistributionConfigBuilder,
) -> crate::types::builders::DistributionConfigBuilder {
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    if builder.origins.is_none() {
        builder.origins = {
            let builder = crate::types::builders::OriginsBuilder::default();
            crate::serde_util::origins_correct_errors(builder).build().ok()
        }
    }
    if builder.default_cache_behavior.is_none() {
        builder.default_cache_behavior = {
            let builder = crate::types::builders::DefaultCacheBehaviorBuilder::default();
            crate::serde_util::default_cache_behavior_correct_errors(builder).build().ok()
        }
    }
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn distribution_id_list_correct_errors(
    mut builder: crate::types::builders::DistributionIdListBuilder,
) -> crate::types::builders::DistributionIdListBuilder {
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn distribution_list_correct_errors(
    mut builder: crate::types::builders::DistributionListBuilder,
) -> crate::types::builders::DistributionListBuilder {
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn field_level_encryption_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionBuilder,
) -> crate::types::builders::FieldLevelEncryptionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.field_level_encryption_config.is_none() {
        builder.field_level_encryption_config = {
            let builder = crate::types::builders::FieldLevelEncryptionConfigBuilder::default();
            crate::serde_util::field_level_encryption_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn field_level_encryption_config_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionConfigBuilder,
) -> crate::types::builders::FieldLevelEncryptionConfigBuilder {
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    builder
}

pub(crate) fn field_level_encryption_list_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionListBuilder,
) -> crate::types::builders::FieldLevelEncryptionListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn field_level_encryption_profile_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionProfileBuilder,
) -> crate::types::builders::FieldLevelEncryptionProfileBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.field_level_encryption_profile_config.is_none() {
        builder.field_level_encryption_profile_config = {
            let builder = crate::types::builders::FieldLevelEncryptionProfileConfigBuilder::default();
            crate::serde_util::field_level_encryption_profile_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn field_level_encryption_profile_config_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionProfileConfigBuilder,
) -> crate::types::builders::FieldLevelEncryptionProfileConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    if builder.encryption_entities.is_none() {
        builder.encryption_entities = {
            let builder = crate::types::builders::EncryptionEntitiesBuilder::default();
            crate::serde_util::encryption_entities_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn field_level_encryption_profile_list_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionProfileListBuilder,
) -> crate::types::builders::FieldLevelEncryptionProfileListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn function_list_correct_errors(mut builder: crate::types::builders::FunctionListBuilder) -> crate::types::builders::FunctionListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn function_summary_correct_errors(
    mut builder: crate::types::builders::FunctionSummaryBuilder,
) -> crate::types::builders::FunctionSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.function_config.is_none() {
        builder.function_config = {
            let builder = crate::types::builders::FunctionConfigBuilder::default();
            crate::serde_util::function_config_correct_errors(builder).build().ok()
        }
    }
    if builder.function_metadata.is_none() {
        builder.function_metadata = {
            let builder = crate::types::builders::FunctionMetadataBuilder::default();
            crate::serde_util::function_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn invalidation_correct_errors(mut builder: crate::types::builders::InvalidationBuilder) -> crate::types::builders::InvalidationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.invalidation_batch.is_none() {
        builder.invalidation_batch = {
            let builder = crate::types::builders::InvalidationBatchBuilder::default();
            crate::serde_util::invalidation_batch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn invalidation_list_correct_errors(
    mut builder: crate::types::builders::InvalidationListBuilder,
) -> crate::types::builders::InvalidationListBuilder {
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn key_group_correct_errors(mut builder: crate::types::builders::KeyGroupBuilder) -> crate::types::builders::KeyGroupBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.key_group_config.is_none() {
        builder.key_group_config = {
            let builder = crate::types::builders::KeyGroupConfigBuilder::default();
            crate::serde_util::key_group_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn key_group_config_correct_errors(
    mut builder: crate::types::builders::KeyGroupConfigBuilder,
) -> crate::types::builders::KeyGroupConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn key_group_list_correct_errors(mut builder: crate::types::builders::KeyGroupListBuilder) -> crate::types::builders::KeyGroupListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_access_control_correct_errors(
    mut builder: crate::types::builders::OriginAccessControlBuilder,
) -> crate::types::builders::OriginAccessControlBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_access_control_config_correct_errors(
    mut builder: crate::types::builders::OriginAccessControlConfigBuilder,
) -> crate::types::builders::OriginAccessControlConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.signing_protocol.is_none() {
        builder.signing_protocol = "no value was set".parse::<crate::types::OriginAccessControlSigningProtocols>().ok()
    }
    if builder.signing_behavior.is_none() {
        builder.signing_behavior = "no value was set".parse::<crate::types::OriginAccessControlSigningBehaviors>().ok()
    }
    if builder.origin_access_control_origin_type.is_none() {
        builder.origin_access_control_origin_type = "no value was set".parse::<crate::types::OriginAccessControlOriginTypes>().ok()
    }
    builder
}

pub(crate) fn origin_access_control_list_correct_errors(
    mut builder: crate::types::builders::OriginAccessControlListBuilder,
) -> crate::types::builders::OriginAccessControlListBuilder {
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_request_policy_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicyBuilder,
) -> crate::types::builders::OriginRequestPolicyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.origin_request_policy_config.is_none() {
        builder.origin_request_policy_config = {
            let builder = crate::types::builders::OriginRequestPolicyConfigBuilder::default();
            crate::serde_util::origin_request_policy_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn origin_request_policy_config_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicyConfigBuilder,
) -> crate::types::builders::OriginRequestPolicyConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.headers_config.is_none() {
        builder.headers_config = {
            let builder = crate::types::builders::OriginRequestPolicyHeadersConfigBuilder::default();
            crate::serde_util::origin_request_policy_headers_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.cookies_config.is_none() {
        builder.cookies_config = {
            let builder = crate::types::builders::OriginRequestPolicyCookiesConfigBuilder::default();
            crate::serde_util::origin_request_policy_cookies_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.query_strings_config.is_none() {
        builder.query_strings_config = {
            let builder = crate::types::builders::OriginRequestPolicyQueryStringsConfigBuilder::default();
            crate::serde_util::origin_request_policy_query_strings_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn origin_request_policy_list_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicyListBuilder,
) -> crate::types::builders::OriginRequestPolicyListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn public_key_correct_errors(mut builder: crate::types::builders::PublicKeyBuilder) -> crate::types::builders::PublicKeyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.public_key_config.is_none() {
        builder.public_key_config = {
            let builder = crate::types::builders::PublicKeyConfigBuilder::default();
            crate::serde_util::public_key_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn public_key_config_correct_errors(
    mut builder: crate::types::builders::PublicKeyConfigBuilder,
) -> crate::types::builders::PublicKeyConfigBuilder {
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.encoded_key.is_none() {
        builder.encoded_key = Some(Default::default())
    }
    builder
}

pub(crate) fn public_key_list_correct_errors(
    mut builder: crate::types::builders::PublicKeyListBuilder,
) -> crate::types::builders::PublicKeyListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn realtime_log_configs_correct_errors(
    mut builder: crate::types::builders::RealtimeLogConfigsBuilder,
) -> crate::types::builders::RealtimeLogConfigsBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyBuilder,
) -> crate::types::builders::ResponseHeadersPolicyBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.response_headers_policy_config.is_none() {
        builder.response_headers_policy_config = {
            let builder = crate::types::builders::ResponseHeadersPolicyConfigBuilder::default();
            crate::serde_util::response_headers_policy_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn response_headers_policy_config_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyConfigBuilder,
) -> crate::types::builders::ResponseHeadersPolicyConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_list_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyListBuilder,
) -> crate::types::builders::ResponseHeadersPolicyListBuilder {
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_distribution_correct_errors(
    mut builder: crate::types::builders::StreamingDistributionBuilder,
) -> crate::types::builders::StreamingDistributionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.active_trusted_signers.is_none() {
        builder.active_trusted_signers = {
            let builder = crate::types::builders::ActiveTrustedSignersBuilder::default();
            crate::serde_util::active_trusted_signers_correct_errors(builder).build().ok()
        }
    }
    if builder.streaming_distribution_config.is_none() {
        builder.streaming_distribution_config = {
            let builder = crate::types::builders::StreamingDistributionConfigBuilder::default();
            crate::serde_util::streaming_distribution_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn streaming_distribution_config_correct_errors(
    mut builder: crate::types::builders::StreamingDistributionConfigBuilder,
) -> crate::types::builders::StreamingDistributionConfigBuilder {
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    if builder.s3_origin.is_none() {
        builder.s3_origin = {
            let builder = crate::types::builders::S3OriginBuilder::default();
            crate::serde_util::s3_origin_correct_errors(builder).build().ok()
        }
    }
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    if builder.trusted_signers.is_none() {
        builder.trusted_signers = {
            let builder = crate::types::builders::TrustedSignersBuilder::default();
            crate::serde_util::trusted_signers_correct_errors(builder).build().ok()
        }
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_distribution_list_correct_errors(
    mut builder: crate::types::builders::StreamingDistributionListBuilder,
) -> crate::types::builders::StreamingDistributionListBuilder {
    if builder.marker.is_none() {
        builder.marker = Some(Default::default())
    }
    if builder.max_items.is_none() {
        builder.max_items = Some(Default::default())
    }
    if builder.is_truncated.is_none() {
        builder.is_truncated = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn active_trusted_key_groups_correct_errors(
    mut builder: crate::types::builders::ActiveTrustedKeyGroupsBuilder,
) -> crate::types::builders::ActiveTrustedKeyGroupsBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn active_trusted_signers_correct_errors(
    mut builder: crate::types::builders::ActiveTrustedSignersBuilder,
) -> crate::types::builders::ActiveTrustedSignersBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn aliases_correct_errors(mut builder: crate::types::builders::AliasesBuilder) -> crate::types::builders::AliasesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn cache_behaviors_correct_errors(
    mut builder: crate::types::builders::CacheBehaviorsBuilder,
) -> crate::types::builders::CacheBehaviorsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn content_type_profile_config_correct_errors(
    mut builder: crate::types::builders::ContentTypeProfileConfigBuilder,
) -> crate::types::builders::ContentTypeProfileConfigBuilder {
    if builder.forward_when_content_type_is_unknown.is_none() {
        builder.forward_when_content_type_is_unknown = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_error_responses_correct_errors(
    mut builder: crate::types::builders::CustomErrorResponsesBuilder,
) -> crate::types::builders::CustomErrorResponsesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn default_cache_behavior_correct_errors(
    mut builder: crate::types::builders::DefaultCacheBehaviorBuilder,
) -> crate::types::builders::DefaultCacheBehaviorBuilder {
    if builder.target_origin_id.is_none() {
        builder.target_origin_id = Some(Default::default())
    }
    if builder.viewer_protocol_policy.is_none() {
        builder.viewer_protocol_policy = "no value was set".parse::<crate::types::ViewerProtocolPolicy>().ok()
    }
    builder
}

pub(crate) fn encryption_entities_correct_errors(
    mut builder: crate::types::builders::EncryptionEntitiesBuilder,
) -> crate::types::builders::EncryptionEntitiesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn end_point_correct_errors(mut builder: crate::types::builders::EndPointBuilder) -> crate::types::builders::EndPointBuilder {
    if builder.stream_type.is_none() {
        builder.stream_type = Some(Default::default())
    }
    builder
}

pub(crate) fn function_config_correct_errors(
    mut builder: crate::types::builders::FunctionConfigBuilder,
) -> crate::types::builders::FunctionConfigBuilder {
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::FunctionRuntime>().ok()
    }
    builder
}

pub(crate) fn function_metadata_correct_errors(
    mut builder: crate::types::builders::FunctionMetadataBuilder,
) -> crate::types::builders::FunctionMetadataBuilder {
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn invalidation_batch_correct_errors(
    mut builder: crate::types::builders::InvalidationBatchBuilder,
) -> crate::types::builders::InvalidationBatchBuilder {
    if builder.paths.is_none() {
        builder.paths = {
            let builder = crate::types::builders::PathsBuilder::default();
            crate::serde_util::paths_correct_errors(builder).build().ok()
        }
    }
    if builder.caller_reference.is_none() {
        builder.caller_reference = Some(Default::default())
    }
    builder
}

pub(crate) fn logging_config_correct_errors(
    mut builder: crate::types::builders::LoggingConfigBuilder,
) -> crate::types::builders::LoggingConfigBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.include_cookies.is_none() {
        builder.include_cookies = Some(Default::default())
    }
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_groups_correct_errors(mut builder: crate::types::builders::OriginGroupsBuilder) -> crate::types::builders::OriginGroupsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_request_policy_cookies_config_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicyCookiesConfigBuilder,
) -> crate::types::builders::OriginRequestPolicyCookiesConfigBuilder {
    if builder.cookie_behavior.is_none() {
        builder.cookie_behavior = "no value was set".parse::<crate::types::OriginRequestPolicyCookieBehavior>().ok()
    }
    builder
}

pub(crate) fn origin_request_policy_headers_config_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicyHeadersConfigBuilder,
) -> crate::types::builders::OriginRequestPolicyHeadersConfigBuilder {
    if builder.header_behavior.is_none() {
        builder.header_behavior = "no value was set".parse::<crate::types::OriginRequestPolicyHeaderBehavior>().ok()
    }
    builder
}

pub(crate) fn origin_request_policy_query_strings_config_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicyQueryStringsConfigBuilder,
) -> crate::types::builders::OriginRequestPolicyQueryStringsConfigBuilder {
    if builder.query_string_behavior.is_none() {
        builder.query_string_behavior = "no value was set".parse::<crate::types::OriginRequestPolicyQueryStringBehavior>().ok()
    }
    builder
}

pub(crate) fn origins_correct_errors(mut builder: crate::types::builders::OriginsBuilder) -> crate::types::builders::OriginsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn parameters_in_cache_key_and_forwarded_to_origin_correct_errors(
    mut builder: crate::types::builders::ParametersInCacheKeyAndForwardedToOriginBuilder,
) -> crate::types::builders::ParametersInCacheKeyAndForwardedToOriginBuilder {
    if builder.enable_accept_encoding_gzip.is_none() {
        builder.enable_accept_encoding_gzip = Some(Default::default())
    }
    if builder.headers_config.is_none() {
        builder.headers_config = {
            let builder = crate::types::builders::CachePolicyHeadersConfigBuilder::default();
            crate::serde_util::cache_policy_headers_config_correct_errors(builder).build().ok()
        }
    }
    if builder.cookies_config.is_none() {
        builder.cookies_config = {
            let builder = crate::types::builders::CachePolicyCookiesConfigBuilder::default();
            crate::serde_util::cache_policy_cookies_config_correct_errors(builder).build().ok()
        }
    }
    if builder.query_strings_config.is_none() {
        builder.query_strings_config = {
            let builder = crate::types::builders::CachePolicyQueryStringsConfigBuilder::default();
            crate::serde_util::cache_policy_query_strings_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn query_arg_profile_config_correct_errors(
    mut builder: crate::types::builders::QueryArgProfileConfigBuilder,
) -> crate::types::builders::QueryArgProfileConfigBuilder {
    if builder.forward_when_query_arg_profile_is_unknown.is_none() {
        builder.forward_when_query_arg_profile_is_unknown = Some(Default::default())
    }
    builder
}

pub(crate) fn realtime_metrics_subscription_config_correct_errors(
    mut builder: crate::types::builders::RealtimeMetricsSubscriptionConfigBuilder,
) -> crate::types::builders::RealtimeMetricsSubscriptionConfigBuilder {
    if builder.realtime_metrics_subscription_status.is_none() {
        builder.realtime_metrics_subscription_status = "no value was set".parse::<crate::types::RealtimeMetricsSubscriptionStatus>().ok()
    }
    builder
}

pub(crate) fn response_headers_policy_cors_config_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyCorsConfigBuilder,
) -> crate::types::builders::ResponseHeadersPolicyCorsConfigBuilder {
    if builder.access_control_allow_origins.is_none() {
        builder.access_control_allow_origins = {
            let builder = crate::types::builders::ResponseHeadersPolicyAccessControlAllowOriginsBuilder::default();
            crate::serde_util::response_headers_policy_access_control_allow_origins_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.access_control_allow_headers.is_none() {
        builder.access_control_allow_headers = {
            let builder = crate::types::builders::ResponseHeadersPolicyAccessControlAllowHeadersBuilder::default();
            crate::serde_util::response_headers_policy_access_control_allow_headers_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.access_control_allow_methods.is_none() {
        builder.access_control_allow_methods = {
            let builder = crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder::default();
            crate::serde_util::response_headers_policy_access_control_allow_methods_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.access_control_allow_credentials.is_none() {
        builder.access_control_allow_credentials = Some(Default::default())
    }
    if builder.origin_override.is_none() {
        builder.origin_override = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_custom_headers_config_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyCustomHeadersConfigBuilder,
) -> crate::types::builders::ResponseHeadersPolicyCustomHeadersConfigBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_remove_headers_config_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyRemoveHeadersConfigBuilder,
) -> crate::types::builders::ResponseHeadersPolicyRemoveHeadersConfigBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_server_timing_headers_config_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyServerTimingHeadersConfigBuilder,
) -> crate::types::builders::ResponseHeadersPolicyServerTimingHeadersConfigBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn restrictions_correct_errors(mut builder: crate::types::builders::RestrictionsBuilder) -> crate::types::builders::RestrictionsBuilder {
    if builder.geo_restriction.is_none() {
        builder.geo_restriction = {
            let builder = crate::types::builders::GeoRestrictionBuilder::default();
            crate::serde_util::geo_restriction_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn s3_origin_correct_errors(mut builder: crate::types::builders::S3OriginBuilder) -> crate::types::builders::S3OriginBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.origin_access_identity.is_none() {
        builder.origin_access_identity = Some(Default::default())
    }
    builder
}

pub(crate) fn staging_distribution_dns_names_correct_errors(
    mut builder: crate::types::builders::StagingDistributionDnsNamesBuilder,
) -> crate::types::builders::StagingDistributionDnsNamesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_logging_config_correct_errors(
    mut builder: crate::types::builders::StreamingLoggingConfigBuilder,
) -> crate::types::builders::StreamingLoggingConfigBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn traffic_config_correct_errors(
    mut builder: crate::types::builders::TrafficConfigBuilder,
) -> crate::types::builders::TrafficConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContinuousDeploymentPolicyType>().ok()
    }
    builder
}

pub(crate) fn trusted_signers_correct_errors(
    mut builder: crate::types::builders::TrustedSignersBuilder,
) -> crate::types::builders::TrustedSignersBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn allowed_methods_correct_errors(
    mut builder: crate::types::builders::AllowedMethodsBuilder,
) -> crate::types::builders::AllowedMethodsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn cache_policy_cookies_config_correct_errors(
    mut builder: crate::types::builders::CachePolicyCookiesConfigBuilder,
) -> crate::types::builders::CachePolicyCookiesConfigBuilder {
    if builder.cookie_behavior.is_none() {
        builder.cookie_behavior = "no value was set".parse::<crate::types::CachePolicyCookieBehavior>().ok()
    }
    builder
}

pub(crate) fn cache_policy_headers_config_correct_errors(
    mut builder: crate::types::builders::CachePolicyHeadersConfigBuilder,
) -> crate::types::builders::CachePolicyHeadersConfigBuilder {
    if builder.header_behavior.is_none() {
        builder.header_behavior = "no value was set".parse::<crate::types::CachePolicyHeaderBehavior>().ok()
    }
    builder
}

pub(crate) fn cache_policy_query_strings_config_correct_errors(
    mut builder: crate::types::builders::CachePolicyQueryStringsConfigBuilder,
) -> crate::types::builders::CachePolicyQueryStringsConfigBuilder {
    if builder.query_string_behavior.is_none() {
        builder.query_string_behavior = "no value was set".parse::<crate::types::CachePolicyQueryStringBehavior>().ok()
    }
    builder
}

pub(crate) fn cache_policy_summary_correct_errors(
    mut builder: crate::types::builders::CachePolicySummaryBuilder,
) -> crate::types::builders::CachePolicySummaryBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CachePolicyType>().ok()
    }
    if builder.cache_policy.is_none() {
        builder.cache_policy = {
            let builder = crate::types::builders::CachePolicyBuilder::default();
            crate::serde_util::cache_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cloud_front_origin_access_identity_summary_correct_errors(
    mut builder: crate::types::builders::CloudFrontOriginAccessIdentitySummaryBuilder,
) -> crate::types::builders::CloudFrontOriginAccessIdentitySummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.s3_canonical_user_id.is_none() {
        builder.s3_canonical_user_id = Some(Default::default())
    }
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    builder
}

pub(crate) fn content_type_profiles_correct_errors(
    mut builder: crate::types::builders::ContentTypeProfilesBuilder,
) -> crate::types::builders::ContentTypeProfilesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_deployment_policy_summary_correct_errors(
    mut builder: crate::types::builders::ContinuousDeploymentPolicySummaryBuilder,
) -> crate::types::builders::ContinuousDeploymentPolicySummaryBuilder {
    if builder.continuous_deployment_policy.is_none() {
        builder.continuous_deployment_policy = {
            let builder = crate::types::builders::ContinuousDeploymentPolicyBuilder::default();
            crate::serde_util::continuous_deployment_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn continuous_deployment_single_header_config_correct_errors(
    mut builder: crate::types::builders::ContinuousDeploymentSingleHeaderConfigBuilder,
) -> crate::types::builders::ContinuousDeploymentSingleHeaderConfigBuilder {
    if builder.header.is_none() {
        builder.header = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_deployment_single_weight_config_correct_errors(
    mut builder: crate::types::builders::ContinuousDeploymentSingleWeightConfigBuilder,
) -> crate::types::builders::ContinuousDeploymentSingleWeightConfigBuilder {
    if builder.weight.is_none() {
        builder.weight = Some(Default::default())
    }
    builder
}

pub(crate) fn cookie_names_correct_errors(mut builder: crate::types::builders::CookieNamesBuilder) -> crate::types::builders::CookieNamesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn distribution_summary_correct_errors(
    mut builder: crate::types::builders::DistributionSummaryBuilder,
) -> crate::types::builders::DistributionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.aliases.is_none() {
        builder.aliases = {
            let builder = crate::types::builders::AliasesBuilder::default();
            crate::serde_util::aliases_correct_errors(builder).build().ok()
        }
    }
    if builder.origins.is_none() {
        builder.origins = {
            let builder = crate::types::builders::OriginsBuilder::default();
            crate::serde_util::origins_correct_errors(builder).build().ok()
        }
    }
    if builder.default_cache_behavior.is_none() {
        builder.default_cache_behavior = {
            let builder = crate::types::builders::DefaultCacheBehaviorBuilder::default();
            crate::serde_util::default_cache_behavior_correct_errors(builder).build().ok()
        }
    }
    if builder.cache_behaviors.is_none() {
        builder.cache_behaviors = {
            let builder = crate::types::builders::CacheBehaviorsBuilder::default();
            crate::serde_util::cache_behaviors_correct_errors(builder).build().ok()
        }
    }
    if builder.custom_error_responses.is_none() {
        builder.custom_error_responses = {
            let builder = crate::types::builders::CustomErrorResponsesBuilder::default();
            crate::serde_util::custom_error_responses_correct_errors(builder).build().ok()
        }
    }
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    if builder.price_class.is_none() {
        builder.price_class = "no value was set".parse::<crate::types::PriceClass>().ok()
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.viewer_certificate.is_none() {
        builder.viewer_certificate = {
            let builder = crate::types::builders::ViewerCertificateBuilder::default();
            Some(builder.build())
        }
    }
    if builder.restrictions.is_none() {
        builder.restrictions = {
            let builder = crate::types::builders::RestrictionsBuilder::default();
            Some(crate::serde_util::restrictions_correct_errors(builder).build())
        }
    }
    if builder.web_acl_id.is_none() {
        builder.web_acl_id = Some(Default::default())
    }
    if builder.http_version.is_none() {
        builder.http_version = "no value was set".parse::<crate::types::HttpVersion>().ok()
    }
    if builder.is_ipv6_enabled.is_none() {
        builder.is_ipv6_enabled = Some(Default::default())
    }
    if builder.staging.is_none() {
        builder.staging = Some(Default::default())
    }
    builder
}

pub(crate) fn field_level_encryption_profile_summary_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionProfileSummaryBuilder,
) -> crate::types::builders::FieldLevelEncryptionProfileSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.encryption_entities.is_none() {
        builder.encryption_entities = {
            let builder = crate::types::builders::EncryptionEntitiesBuilder::default();
            crate::serde_util::encryption_entities_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn field_level_encryption_summary_correct_errors(
    mut builder: crate::types::builders::FieldLevelEncryptionSummaryBuilder,
) -> crate::types::builders::FieldLevelEncryptionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn forwarded_values_correct_errors(
    mut builder: crate::types::builders::ForwardedValuesBuilder,
) -> crate::types::builders::ForwardedValuesBuilder {
    if builder.query_string.is_none() {
        builder.query_string = Some(Default::default())
    }
    if builder.cookies.is_none() {
        builder.cookies = {
            let builder = crate::types::builders::CookiePreferenceBuilder::default();
            crate::serde_util::cookie_preference_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn function_associations_correct_errors(
    mut builder: crate::types::builders::FunctionAssociationsBuilder,
) -> crate::types::builders::FunctionAssociationsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn geo_restriction_correct_errors(
    mut builder: crate::types::builders::GeoRestrictionBuilder,
) -> crate::types::builders::GeoRestrictionBuilder {
    if builder.restriction_type.is_none() {
        builder.restriction_type = "no value was set".parse::<crate::types::GeoRestrictionType>().ok()
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn headers_correct_errors(mut builder: crate::types::builders::HeadersBuilder) -> crate::types::builders::HeadersBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn invalidation_summary_correct_errors(
    mut builder: crate::types::builders::InvalidationSummaryBuilder,
) -> crate::types::builders::InvalidationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn key_group_summary_correct_errors(
    mut builder: crate::types::builders::KeyGroupSummaryBuilder,
) -> crate::types::builders::KeyGroupSummaryBuilder {
    if builder.key_group.is_none() {
        builder.key_group = {
            let builder = crate::types::builders::KeyGroupBuilder::default();
            crate::serde_util::key_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn kinesis_stream_config_correct_errors(
    mut builder: crate::types::builders::KinesisStreamConfigBuilder,
) -> crate::types::builders::KinesisStreamConfigBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.stream_arn.is_none() {
        builder.stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_associations_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionAssociationsBuilder,
) -> crate::types::builders::LambdaFunctionAssociationsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_access_control_summary_correct_errors(
    mut builder: crate::types::builders::OriginAccessControlSummaryBuilder,
) -> crate::types::builders::OriginAccessControlSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.signing_protocol.is_none() {
        builder.signing_protocol = "no value was set".parse::<crate::types::OriginAccessControlSigningProtocols>().ok()
    }
    if builder.signing_behavior.is_none() {
        builder.signing_behavior = "no value was set".parse::<crate::types::OriginAccessControlSigningBehaviors>().ok()
    }
    if builder.origin_access_control_origin_type.is_none() {
        builder.origin_access_control_origin_type = "no value was set".parse::<crate::types::OriginAccessControlOriginTypes>().ok()
    }
    builder
}

pub(crate) fn origin_request_policy_summary_correct_errors(
    mut builder: crate::types::builders::OriginRequestPolicySummaryBuilder,
) -> crate::types::builders::OriginRequestPolicySummaryBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::OriginRequestPolicyType>().ok()
    }
    if builder.origin_request_policy.is_none() {
        builder.origin_request_policy = {
            let builder = crate::types::builders::OriginRequestPolicyBuilder::default();
            crate::serde_util::origin_request_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn paths_correct_errors(mut builder: crate::types::builders::PathsBuilder) -> crate::types::builders::PathsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn public_key_summary_correct_errors(
    mut builder: crate::types::builders::PublicKeySummaryBuilder,
) -> crate::types::builders::PublicKeySummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.encoded_key.is_none() {
        builder.encoded_key = Some(Default::default())
    }
    builder
}

pub(crate) fn query_arg_profiles_correct_errors(
    mut builder: crate::types::builders::QueryArgProfilesBuilder,
) -> crate::types::builders::QueryArgProfilesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn query_string_names_correct_errors(
    mut builder: crate::types::builders::QueryStringNamesBuilder,
) -> crate::types::builders::QueryStringNamesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_access_control_allow_headers_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyAccessControlAllowHeadersBuilder,
) -> crate::types::builders::ResponseHeadersPolicyAccessControlAllowHeadersBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_access_control_allow_methods_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder,
) -> crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_access_control_allow_origins_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyAccessControlAllowOriginsBuilder,
) -> crate::types::builders::ResponseHeadersPolicyAccessControlAllowOriginsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_access_control_expose_headers_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyAccessControlExposeHeadersBuilder,
) -> crate::types::builders::ResponseHeadersPolicyAccessControlExposeHeadersBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_content_security_policy_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyContentSecurityPolicyBuilder,
) -> crate::types::builders::ResponseHeadersPolicyContentSecurityPolicyBuilder {
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    if builder.content_security_policy.is_none() {
        builder.content_security_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_content_type_options_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyContentTypeOptionsBuilder,
) -> crate::types::builders::ResponseHeadersPolicyContentTypeOptionsBuilder {
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_frame_options_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyFrameOptionsBuilder,
) -> crate::types::builders::ResponseHeadersPolicyFrameOptionsBuilder {
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    if builder.frame_option.is_none() {
        builder.frame_option = "no value was set".parse::<crate::types::FrameOptionsList>().ok()
    }
    builder
}

pub(crate) fn response_headers_policy_referrer_policy_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyReferrerPolicyBuilder,
) -> crate::types::builders::ResponseHeadersPolicyReferrerPolicyBuilder {
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    if builder.referrer_policy.is_none() {
        builder.referrer_policy = "no value was set".parse::<crate::types::ReferrerPolicyList>().ok()
    }
    builder
}

pub(crate) fn response_headers_policy_strict_transport_security_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyStrictTransportSecurityBuilder,
) -> crate::types::builders::ResponseHeadersPolicyStrictTransportSecurityBuilder {
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    if builder.access_control_max_age_sec.is_none() {
        builder.access_control_max_age_sec = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_summary_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicySummaryBuilder,
) -> crate::types::builders::ResponseHeadersPolicySummaryBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ResponseHeadersPolicyType>().ok()
    }
    if builder.response_headers_policy.is_none() {
        builder.response_headers_policy = {
            let builder = crate::types::builders::ResponseHeadersPolicyBuilder::default();
            crate::serde_util::response_headers_policy_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn response_headers_policy_xss_protection_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyXssProtectionBuilder,
) -> crate::types::builders::ResponseHeadersPolicyXssProtectionBuilder {
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    if builder.protection.is_none() {
        builder.protection = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_distribution_summary_correct_errors(
    mut builder: crate::types::builders::StreamingDistributionSummaryBuilder,
) -> crate::types::builders::StreamingDistributionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.s3_origin.is_none() {
        builder.s3_origin = {
            let builder = crate::types::builders::S3OriginBuilder::default();
            crate::serde_util::s3_origin_correct_errors(builder).build().ok()
        }
    }
    if builder.aliases.is_none() {
        builder.aliases = {
            let builder = crate::types::builders::AliasesBuilder::default();
            crate::serde_util::aliases_correct_errors(builder).build().ok()
        }
    }
    if builder.trusted_signers.is_none() {
        builder.trusted_signers = {
            let builder = crate::types::builders::TrustedSignersBuilder::default();
            crate::serde_util::trusted_signers_correct_errors(builder).build().ok()
        }
    }
    if builder.comment.is_none() {
        builder.comment = Some(Default::default())
    }
    if builder.price_class.is_none() {
        builder.price_class = "no value was set".parse::<crate::types::PriceClass>().ok()
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn trusted_key_groups_correct_errors(
    mut builder: crate::types::builders::TrustedKeyGroupsBuilder,
) -> crate::types::builders::TrustedKeyGroupsBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn cache_behavior_correct_errors(
    mut builder: crate::types::builders::CacheBehaviorBuilder,
) -> crate::types::builders::CacheBehaviorBuilder {
    if builder.path_pattern.is_none() {
        builder.path_pattern = Some(Default::default())
    }
    if builder.target_origin_id.is_none() {
        builder.target_origin_id = Some(Default::default())
    }
    if builder.viewer_protocol_policy.is_none() {
        builder.viewer_protocol_policy = "no value was set".parse::<crate::types::ViewerProtocolPolicy>().ok()
    }
    builder
}

pub(crate) fn cached_methods_correct_errors(
    mut builder: crate::types::builders::CachedMethodsBuilder,
) -> crate::types::builders::CachedMethodsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn cookie_preference_correct_errors(
    mut builder: crate::types::builders::CookiePreferenceBuilder,
) -> crate::types::builders::CookiePreferenceBuilder {
    if builder.forward.is_none() {
        builder.forward = "no value was set".parse::<crate::types::ItemSelection>().ok()
    }
    builder
}

pub(crate) fn custom_error_response_correct_errors(
    mut builder: crate::types::builders::CustomErrorResponseBuilder,
) -> crate::types::builders::CustomErrorResponseBuilder {
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_entity_correct_errors(
    mut builder: crate::types::builders::EncryptionEntityBuilder,
) -> crate::types::builders::EncryptionEntityBuilder {
    if builder.public_key_id.is_none() {
        builder.public_key_id = Some(Default::default())
    }
    if builder.provider_id.is_none() {
        builder.provider_id = Some(Default::default())
    }
    if builder.field_patterns.is_none() {
        builder.field_patterns = {
            let builder = crate::types::builders::FieldPatternsBuilder::default();
            crate::serde_util::field_patterns_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn origin_correct_errors(mut builder: crate::types::builders::OriginBuilder) -> crate::types::builders::OriginBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_group_correct_errors(mut builder: crate::types::builders::OriginGroupBuilder) -> crate::types::builders::OriginGroupBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.failover_criteria.is_none() {
        builder.failover_criteria = {
            let builder = crate::types::builders::OriginGroupFailoverCriteriaBuilder::default();
            Some(crate::serde_util::origin_group_failover_criteria_correct_errors(builder).build())
        }
    }
    if builder.members.is_none() {
        builder.members = {
            let builder = crate::types::builders::OriginGroupMembersBuilder::default();
            crate::serde_util::origin_group_members_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn query_string_cache_keys_correct_errors(
    mut builder: crate::types::builders::QueryStringCacheKeysBuilder,
) -> crate::types::builders::QueryStringCacheKeysBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_custom_header_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyCustomHeaderBuilder,
) -> crate::types::builders::ResponseHeadersPolicyCustomHeaderBuilder {
    if builder.header.is_none() {
        builder.header = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.r#override.is_none() {
        builder.r#override = Some(Default::default())
    }
    builder
}

pub(crate) fn response_headers_policy_remove_header_correct_errors(
    mut builder: crate::types::builders::ResponseHeadersPolicyRemoveHeaderBuilder,
) -> crate::types::builders::ResponseHeadersPolicyRemoveHeaderBuilder {
    if builder.header.is_none() {
        builder.header = Some(Default::default())
    }
    builder
}

pub(crate) fn session_stickiness_config_correct_errors(
    mut builder: crate::types::builders::SessionStickinessConfigBuilder,
) -> crate::types::builders::SessionStickinessConfigBuilder {
    if builder.idle_ttl.is_none() {
        builder.idle_ttl = Some(Default::default())
    }
    if builder.maximum_ttl.is_none() {
        builder.maximum_ttl = Some(Default::default())
    }
    builder
}

pub(crate) fn content_type_profile_correct_errors(
    mut builder: crate::types::builders::ContentTypeProfileBuilder,
) -> crate::types::builders::ContentTypeProfileBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_headers_correct_errors(
    mut builder: crate::types::builders::CustomHeadersBuilder,
) -> crate::types::builders::CustomHeadersBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_origin_config_correct_errors(
    mut builder: crate::types::builders::CustomOriginConfigBuilder,
) -> crate::types::builders::CustomOriginConfigBuilder {
    if builder.http_port.is_none() {
        builder.http_port = Some(Default::default())
    }
    if builder.https_port.is_none() {
        builder.https_port = Some(Default::default())
    }
    if builder.origin_protocol_policy.is_none() {
        builder.origin_protocol_policy = "no value was set".parse::<crate::types::OriginProtocolPolicy>().ok()
    }
    builder
}

pub(crate) fn field_patterns_correct_errors(
    mut builder: crate::types::builders::FieldPatternsBuilder,
) -> crate::types::builders::FieldPatternsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn function_association_correct_errors(
    mut builder: crate::types::builders::FunctionAssociationBuilder,
) -> crate::types::builders::FunctionAssociationBuilder {
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::EventType>().ok()
    }
    builder
}

pub(crate) fn key_pair_ids_correct_errors(mut builder: crate::types::builders::KeyPairIdsBuilder) -> crate::types::builders::KeyPairIdsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_association_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionAssociationBuilder,
) -> crate::types::builders::LambdaFunctionAssociationBuilder {
    if builder.lambda_function_arn.is_none() {
        builder.lambda_function_arn = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::EventType>().ok()
    }
    builder
}

pub(crate) fn origin_group_failover_criteria_correct_errors(
    mut builder: crate::types::builders::OriginGroupFailoverCriteriaBuilder,
) -> crate::types::builders::OriginGroupFailoverCriteriaBuilder {
    if builder.status_codes.is_none() {
        builder.status_codes = {
            let builder = crate::types::builders::StatusCodesBuilder::default();
            crate::serde_util::status_codes_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn origin_group_members_correct_errors(
    mut builder: crate::types::builders::OriginGroupMembersBuilder,
) -> crate::types::builders::OriginGroupMembersBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_shield_correct_errors(mut builder: crate::types::builders::OriginShieldBuilder) -> crate::types::builders::OriginShieldBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn query_arg_profile_correct_errors(
    mut builder: crate::types::builders::QueryArgProfileBuilder,
) -> crate::types::builders::QueryArgProfileBuilder {
    if builder.query_arg.is_none() {
        builder.query_arg = Some(Default::default())
    }
    if builder.profile_id.is_none() {
        builder.profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_origin_config_correct_errors(
    mut builder: crate::types::builders::S3OriginConfigBuilder,
) -> crate::types::builders::S3OriginConfigBuilder {
    if builder.origin_access_identity.is_none() {
        builder.origin_access_identity = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_ssl_protocols_correct_errors(
    mut builder: crate::types::builders::OriginSslProtocolsBuilder,
) -> crate::types::builders::OriginSslProtocolsBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn status_codes_correct_errors(mut builder: crate::types::builders::StatusCodesBuilder) -> crate::types::builders::StatusCodesBuilder {
    if builder.quantity.is_none() {
        builder.quantity = Some(Default::default())
    }
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_custom_header_correct_errors(
    mut builder: crate::types::builders::OriginCustomHeaderBuilder,
) -> crate::types::builders::OriginCustomHeaderBuilder {
    if builder.header_name.is_none() {
        builder.header_name = Some(Default::default())
    }
    if builder.header_value.is_none() {
        builder.header_value = Some(Default::default())
    }
    builder
}

pub(crate) fn origin_group_member_correct_errors(
    mut builder: crate::types::builders::OriginGroupMemberBuilder,
) -> crate::types::builders::OriginGroupMemberBuilder {
    if builder.origin_id.is_none() {
        builder.origin_id = Some(Default::default())
    }
    builder
}
