// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_payload_create_cache_policy_input(
    payload: &std::option::Option<crate::model::CachePolicyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_cache_policy_input_cache_policy_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_cloud_front_origin_access_identity_input(
    payload: &std::option::Option<crate::model::CloudFrontOriginAccessIdentityConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_cloud_front_origin_access_identity_input_cloud_front_origin_access_identity_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_distribution_input(
    payload: &std::option::Option<crate::model::DistributionConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_distribution_input_distribution_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_distribution_with_tags_input(
    payload: &std::option::Option<crate::model::DistributionConfigWithTags>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_distribution_with_tags_input_distribution_config_with_tags(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_field_level_encryption_config_input(
    payload: &std::option::Option<crate::model::FieldLevelEncryptionConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_field_level_encryption_config_input_field_level_encryption_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_field_level_encryption_profile_input(
    payload: &std::option::Option<crate::model::FieldLevelEncryptionProfileConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_field_level_encryption_profile_input_field_level_encryption_profile_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn serialize_operation_crate_operation_create_function(
    input: &crate::input::CreateFunctionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateFunctionRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_create_function_input(&&input, root)
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn ser_payload_create_invalidation_input(
    payload: &std::option::Option<crate::model::InvalidationBatch>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_invalidation_input_invalidation_batch(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_key_group_input(
    payload: &std::option::Option<crate::model::KeyGroupConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_key_group_input_key_group_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_monitoring_subscription_input(
    payload: &std::option::Option<crate::model::MonitoringSubscription>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_monitoring_subscription_input_monitoring_subscription(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_origin_request_policy_input(
    payload: &std::option::Option<crate::model::OriginRequestPolicyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_origin_request_policy_input_origin_request_policy_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_public_key_input(
    payload: &std::option::Option<crate::model::PublicKeyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_public_key_input_public_key_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn serialize_operation_crate_operation_create_realtime_log_config(
    input: &crate::input::CreateRealtimeLogConfigInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateRealtimeLogConfigRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_create_realtime_log_config_input(
            &&input, root,
        )
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn ser_payload_create_response_headers_policy_input(
    payload: &std::option::Option<crate::model::ResponseHeadersPolicyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_response_headers_policy_input_response_headers_policy_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_streaming_distribution_input(
    payload: &std::option::Option<crate::model::StreamingDistributionConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_streaming_distribution_input_streaming_distribution_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_create_streaming_distribution_with_tags_input(
    payload: &std::option::Option<crate::model::StreamingDistributionConfigWithTags>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_create_streaming_distribution_with_tags_input_streaming_distribution_config_with_tags(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn serialize_operation_crate_operation_delete_realtime_log_config(
    input: &crate::input::DeleteRealtimeLogConfigInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DeleteRealtimeLogConfigRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_delete_realtime_log_config_input(
            &&input, root,
        )
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_realtime_log_config(
    input: &crate::input::GetRealtimeLogConfigInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("GetRealtimeLogConfigRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_get_realtime_log_config_input(&&input, root)
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_distributions_by_realtime_log_config(
    input: &crate::input::ListDistributionsByRealtimeLogConfigInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListDistributionsByRealtimeLogConfigRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_list_distributions_by_realtime_log_config_input(&&input, root)
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn ser_payload_tag_resource_input(
    payload: &std::option::Option<crate::model::Tags>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_tag_resource_input_tags(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn serialize_operation_crate_operation_test_function(
    input: &crate::input::TestFunctionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("TestFunctionRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_test_function_input(&&input, root)
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn ser_payload_untag_resource_input(
    payload: &std::option::Option<crate::model::TagKeys>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_untag_resource_input_tag_keys(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_cache_policy_input(
    payload: &std::option::Option<crate::model::CachePolicyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_cache_policy_input_cache_policy_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_cloud_front_origin_access_identity_input(
    payload: &std::option::Option<crate::model::CloudFrontOriginAccessIdentityConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_cloud_front_origin_access_identity_input_cloud_front_origin_access_identity_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_distribution_input(
    payload: &std::option::Option<crate::model::DistributionConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_distribution_input_distribution_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_field_level_encryption_config_input(
    payload: &std::option::Option<crate::model::FieldLevelEncryptionConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_field_level_encryption_config_input_field_level_encryption_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_field_level_encryption_profile_input(
    payload: &std::option::Option<crate::model::FieldLevelEncryptionProfileConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_field_level_encryption_profile_input_field_level_encryption_profile_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn serialize_operation_crate_operation_update_function(
    input: &crate::input::UpdateFunctionInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("UpdateFunctionRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_update_function_input(&&input, root)
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn ser_payload_update_key_group_input(
    payload: &std::option::Option<crate::model::KeyGroupConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_key_group_input_key_group_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_origin_request_policy_input(
    payload: &std::option::Option<crate::model::OriginRequestPolicyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_origin_request_policy_input_origin_request_policy_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_public_key_input(
    payload: &std::option::Option<crate::model::PublicKeyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_public_key_input_public_key_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn serialize_operation_crate_operation_update_realtime_log_config(
    input: &crate::input::UpdateRealtimeLogConfigInput,
) -> Result<aws_smithy_http::body::SdkBody, std::string::String> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("UpdateRealtimeLogConfigRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_input_update_realtime_log_config_input(
            &&input, root,
        )
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn ser_payload_update_response_headers_policy_input(
    payload: &std::option::Option<crate::model::ResponseHeadersPolicyConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_response_headers_policy_input_response_headers_policy_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn ser_payload_update_streaming_distribution_input(
    payload: &std::option::Option<crate::model::StreamingDistributionConfig>,
) -> std::result::Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::BuildError> {
    let payload = match payload.as_ref() {
        Some(t) => t,
        None => {
            return Ok(aws_smithy_http::body::SdkBody::from(
                crate::operation_ser::rest_xml_unset_payload(),
            ))
        }
    };
    #[allow(clippy::useless_conversion)]Ok(aws_smithy_http::body::SdkBody::from(
        crate::xml_ser::serialize_member_com_amazonaws_cloudfront_synthetic_update_streaming_distribution_input_streaming_distribution_config(&payload).map_err(|err|aws_smithy_http::operation::BuildError::SerializationError(err.into()))?
    ))
}

pub fn rest_xml_unset_payload() -> std::vec::Vec<u8> {
    vec![]
}
