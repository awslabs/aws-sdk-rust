// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_cache_policy_input_cache_policy_config(
    input: &crate::model::CachePolicyConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CachePolicyConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cache_policy_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_cloud_front_origin_access_identity_input_cloud_front_origin_access_identity_config(
    input: &crate::model::CloudFrontOriginAccessIdentityConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CloudFrontOriginAccessIdentityConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cloud_front_origin_access_identity_config(
            &&input, root,
        )
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_distribution_input_distribution_config(
    input: &crate::model::DistributionConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DistributionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_distribution_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_distribution_with_tags_input_distribution_config_with_tags(
    input: &crate::model::DistributionConfigWithTags,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DistributionConfigWithTags")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_distribution_config_with_tags(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_field_level_encryption_config_input_field_level_encryption_config(
    input: &crate::model::FieldLevelEncryptionConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("FieldLevelEncryptionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_field_level_encryption_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_field_level_encryption_profile_input_field_level_encryption_profile_config(
    input: &crate::model::FieldLevelEncryptionProfileConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("FieldLevelEncryptionProfileConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_field_level_encryption_profile_config(
            &&input, root,
        )
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_create_function_input(
    input: &crate::input::CreateFunctionInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.function_code {
        let mut inner_writer = scope
            .start_el("FunctionCode")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::base64::encode(var_1.as_ref()).as_ref());
    }
    if let Some(var_2) = &input.function_config {
        let inner_writer = scope
            .start_el("FunctionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_function_config(&var_2, inner_writer)
    }
    if let Some(var_3) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_3.as_ref());
    }
    scope.finish();
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_invalidation_input_invalidation_batch(
    input: &crate::model::InvalidationBatch,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("InvalidationBatch")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_invalidation_batch(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_key_group_input_key_group_config(
    input: &crate::model::KeyGroupConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("KeyGroupConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_key_group_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_monitoring_subscription_input_monitoring_subscription(
    input: &crate::model::MonitoringSubscription,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("MonitoringSubscription")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_monitoring_subscription(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_origin_request_policy_input_origin_request_policy_config(
    input: &crate::model::OriginRequestPolicyConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("OriginRequestPolicyConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_request_policy_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_public_key_input_public_key_config(
    input: &crate::model::PublicKeyConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PublicKeyConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_public_key_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_create_realtime_log_config_input(
    input: &crate::input::CreateRealtimeLogConfigInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_4) = &input.end_points {
        let mut inner_writer = scope
            .start_el("EndPoints")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_5 in var_4 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_end_point(
                    &list_item_5,
                    inner_writer,
                )
            }
        }
    }
    if let Some(var_6) = &input.fields {
        let mut inner_writer = scope
            .start_el("Fields")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_7 in var_6 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Field")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_7.as_ref());
            }
        }
    }
    if let Some(var_8) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_8.as_ref());
    }
    if let Some(var_9) = &input.sampling_rate {
        let mut inner_writer = scope
            .start_el("SamplingRate")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_9).encode());
    }
    scope.finish();
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_streaming_distribution_input_streaming_distribution_config(
    input: &crate::model::StreamingDistributionConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("StreamingDistributionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_streaming_distribution_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_create_streaming_distribution_with_tags_input_streaming_distribution_config_with_tags(
    input: &crate::model::StreamingDistributionConfigWithTags,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("StreamingDistributionConfigWithTags")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_streaming_distribution_config_with_tags(
            &&input, root,
        )
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_delete_realtime_log_config_input(
    input: &crate::input::DeleteRealtimeLogConfigInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_10) = &input.arn {
        let mut inner_writer = scope
            .start_el("ARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_10.as_ref());
    }
    if let Some(var_11) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_11.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_input_get_realtime_log_config_input(
    input: &crate::input::GetRealtimeLogConfigInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_12) = &input.arn {
        let mut inner_writer = scope
            .start_el("ARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_12.as_ref());
    }
    if let Some(var_13) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_13.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_input_list_distributions_by_realtime_log_config_input(
    input: &crate::input::ListDistributionsByRealtimeLogConfigInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_14) = &input.marker {
        let mut inner_writer = scope
            .start_el("Marker")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_14.as_ref());
    }
    if let Some(var_15) = &input.max_items {
        let mut inner_writer = scope
            .start_el("MaxItems")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_15).encode());
    }
    if let Some(var_16) = &input.realtime_log_config_arn {
        let mut inner_writer = scope
            .start_el("RealtimeLogConfigArn")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_16.as_ref());
    }
    if let Some(var_17) = &input.realtime_log_config_name {
        let mut inner_writer = scope
            .start_el("RealtimeLogConfigName")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_17.as_ref());
    }
    scope.finish();
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_tag_resource_input_tags(
    input: &crate::model::Tags,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tags")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_tags(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_test_function_input(
    input: &crate::input::TestFunctionInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_18) = &input.event_object {
        let mut inner_writer = scope
            .start_el("EventObject")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::base64::encode(var_18.as_ref()).as_ref());
    }
    if let Some(var_19) = &input.stage {
        let mut inner_writer = scope
            .start_el("Stage")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_19.as_str());
    }
    scope.finish();
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_untag_resource_input_tag_keys(
    input: &crate::model::TagKeys,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("TagKeys")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_tag_keys(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_cache_policy_input_cache_policy_config(
    input: &crate::model::CachePolicyConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CachePolicyConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cache_policy_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_cloud_front_origin_access_identity_input_cloud_front_origin_access_identity_config(
    input: &crate::model::CloudFrontOriginAccessIdentityConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CloudFrontOriginAccessIdentityConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cloud_front_origin_access_identity_config(
            &&input, root,
        )
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_distribution_input_distribution_config(
    input: &crate::model::DistributionConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("DistributionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_distribution_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_field_level_encryption_config_input_field_level_encryption_config(
    input: &crate::model::FieldLevelEncryptionConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("FieldLevelEncryptionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_field_level_encryption_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_field_level_encryption_profile_input_field_level_encryption_profile_config(
    input: &crate::model::FieldLevelEncryptionProfileConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("FieldLevelEncryptionProfileConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_field_level_encryption_profile_config(
            &&input, root,
        )
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_update_function_input(
    input: &crate::input::UpdateFunctionInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_20) = &input.function_code {
        let mut inner_writer = scope
            .start_el("FunctionCode")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::base64::encode(var_20.as_ref()).as_ref());
    }
    if let Some(var_21) = &input.function_config {
        let inner_writer = scope
            .start_el("FunctionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_function_config(&var_21, inner_writer)
    }
    scope.finish();
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_key_group_input_key_group_config(
    input: &crate::model::KeyGroupConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("KeyGroupConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_key_group_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_origin_request_policy_input_origin_request_policy_config(
    input: &crate::model::OriginRequestPolicyConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("OriginRequestPolicyConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_request_policy_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_public_key_input_public_key_config(
    input: &crate::model::PublicKeyConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PublicKeyConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_public_key_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_update_realtime_log_config_input(
    input: &crate::input::UpdateRealtimeLogConfigInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_22) = &input.arn {
        let mut inner_writer = scope
            .start_el("ARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_22.as_ref());
    }
    if let Some(var_23) = &input.end_points {
        let mut inner_writer = scope
            .start_el("EndPoints")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_24 in var_23 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_end_point(
                    &list_item_24,
                    inner_writer,
                )
            }
        }
    }
    if let Some(var_25) = &input.fields {
        let mut inner_writer = scope
            .start_el("Fields")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_26 in var_25 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Field")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_26.as_ref());
            }
        }
    }
    if let Some(var_27) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_27.as_ref());
    }
    if let Some(var_28) = &input.sampling_rate {
        let mut inner_writer = scope
            .start_el("SamplingRate")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_28).encode());
    }
    scope.finish();
}

pub fn serialize_member_com_amazonaws_cloudfront_synthetic_update_streaming_distribution_input_streaming_distribution_config(
    input: &crate::model::StreamingDistributionConfig,
) -> std::result::Result<std::vec::Vec<u8>, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("StreamingDistributionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_streaming_distribution_config(&&input, root)
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_model_cache_policy_config(
    input: &crate::model::CachePolicyConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_29) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_29.as_ref());
    }
    if let Some(var_30) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_30.as_ref());
    }
    if let Some(var_31) = &input.default_ttl {
        let mut inner_writer = scope
            .start_el("DefaultTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_31).encode());
    }
    if let Some(var_32) = &input.max_ttl {
        let mut inner_writer = scope
            .start_el("MaxTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_32).encode());
    }
    if let Some(var_33) = &input.min_ttl {
        let mut inner_writer = scope
            .start_el("MinTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_33).encode());
    }
    if let Some(var_34) = &input.parameters_in_cache_key_and_forwarded_to_origin {
        let inner_writer = scope
            .start_el("ParametersInCacheKeyAndForwardedToOrigin")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_parameters_in_cache_key_and_forwarded_to_origin(&var_34, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cloud_front_origin_access_identity_config(
    input: &crate::model::CloudFrontOriginAccessIdentityConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_35) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_35.as_ref());
    }
    if let Some(var_36) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_36.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_distribution_config(
    input: &crate::model::DistributionConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_37) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_37.as_ref());
    }
    if let Some(var_38) = &input.aliases {
        let inner_writer = scope
            .start_el("Aliases")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_aliases(&var_38, inner_writer)
    }
    if let Some(var_39) = &input.default_root_object {
        let mut inner_writer = scope
            .start_el("DefaultRootObject")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_39.as_ref());
    }
    if let Some(var_40) = &input.origins {
        let inner_writer = scope
            .start_el("Origins")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origins(&var_40, inner_writer)
    }
    if let Some(var_41) = &input.origin_groups {
        let inner_writer = scope
            .start_el("OriginGroups")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_groups(&var_41, inner_writer)
    }
    if let Some(var_42) = &input.default_cache_behavior {
        let inner_writer = scope
            .start_el("DefaultCacheBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_default_cache_behavior(
            &var_42,
            inner_writer,
        )
    }
    if let Some(var_43) = &input.cache_behaviors {
        let inner_writer = scope
            .start_el("CacheBehaviors")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cache_behaviors(&var_43, inner_writer)
    }
    if let Some(var_44) = &input.custom_error_responses {
        let inner_writer = scope
            .start_el("CustomErrorResponses")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_custom_error_responses(
            &var_44,
            inner_writer,
        )
    }
    if let Some(var_45) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_45.as_ref());
    }
    if let Some(var_46) = &input.logging {
        let inner_writer = scope
            .start_el("Logging")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_logging_config(&var_46, inner_writer)
    }
    if let Some(var_47) = &input.price_class {
        let mut inner_writer = scope
            .start_el("PriceClass")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_47.as_str());
    }
    if let Some(var_48) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_48).encode());
    }
    if let Some(var_49) = &input.viewer_certificate {
        let inner_writer = scope
            .start_el("ViewerCertificate")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_viewer_certificate(&var_49, inner_writer)
    }
    if let Some(var_50) = &input.restrictions {
        let inner_writer = scope
            .start_el("Restrictions")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_restrictions(&var_50, inner_writer)
    }
    if let Some(var_51) = &input.web_acl_id {
        let mut inner_writer = scope
            .start_el("WebACLId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_51.as_ref());
    }
    if let Some(var_52) = &input.http_version {
        let mut inner_writer = scope
            .start_el("HttpVersion")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_52.as_str());
    }
    if let Some(var_53) = &input.is_ipv6_enabled {
        let mut inner_writer = scope
            .start_el("IsIPV6Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_53).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_distribution_config_with_tags(
    input: &crate::model::DistributionConfigWithTags,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_54) = &input.distribution_config {
        let inner_writer = scope
            .start_el("DistributionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_distribution_config(&var_54, inner_writer)
    }
    if let Some(var_55) = &input.tags {
        let inner_writer = scope
            .start_el("Tags")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_tags(&var_55, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_field_level_encryption_config(
    input: &crate::model::FieldLevelEncryptionConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_56) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_56.as_ref());
    }
    if let Some(var_57) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_57.as_ref());
    }
    if let Some(var_58) = &input.query_arg_profile_config {
        let inner_writer = scope
            .start_el("QueryArgProfileConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_query_arg_profile_config(
            &var_58,
            inner_writer,
        )
    }
    if let Some(var_59) = &input.content_type_profile_config {
        let inner_writer = scope
            .start_el("ContentTypeProfileConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_content_type_profile_config(
            &var_59,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_field_level_encryption_profile_config(
    input: &crate::model::FieldLevelEncryptionProfileConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_60) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_60.as_ref());
    }
    if let Some(var_61) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_61.as_ref());
    }
    if let Some(var_62) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_62.as_ref());
    }
    if let Some(var_63) = &input.encryption_entities {
        let inner_writer = scope
            .start_el("EncryptionEntities")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_encryption_entities(&var_63, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_function_config(
    input: &crate::model::FunctionConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_64) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_64.as_ref());
    }
    if let Some(var_65) = &input.runtime {
        let mut inner_writer = scope
            .start_el("Runtime")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_65.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_invalidation_batch(
    input: &crate::model::InvalidationBatch,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_66) = &input.paths {
        let inner_writer = scope
            .start_el("Paths")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_paths(&var_66, inner_writer)
    }
    if let Some(var_67) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_67.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_key_group_config(
    input: &crate::model::KeyGroupConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_68) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_68.as_ref());
    }
    if let Some(var_69) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_70 in var_69 {
            {
                let mut inner_writer = inner_writer
                    .start_el("PublicKey")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_70.as_ref());
            }
        }
    }
    if let Some(var_71) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_71.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_monitoring_subscription(
    input: &crate::model::MonitoringSubscription,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_72) = &input.realtime_metrics_subscription_config {
        let inner_writer = scope
            .start_el("RealtimeMetricsSubscriptionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_realtime_metrics_subscription_config(
            &var_72,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_request_policy_config(
    input: &crate::model::OriginRequestPolicyConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_73) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_73.as_ref());
    }
    if let Some(var_74) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_74.as_ref());
    }
    if let Some(var_75) = &input.headers_config {
        let inner_writer = scope
            .start_el("HeadersConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_request_policy_headers_config(
            &var_75,
            inner_writer,
        )
    }
    if let Some(var_76) = &input.cookies_config {
        let inner_writer = scope
            .start_el("CookiesConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_request_policy_cookies_config(
            &var_76,
            inner_writer,
        )
    }
    if let Some(var_77) = &input.query_strings_config {
        let inner_writer = scope
            .start_el("QueryStringsConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_request_policy_query_strings_config(
            &var_77,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_public_key_config(
    input: &crate::model::PublicKeyConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_78) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_78.as_ref());
    }
    if let Some(var_79) = &input.name {
        let mut inner_writer = scope
            .start_el("Name")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_79.as_ref());
    }
    if let Some(var_80) = &input.encoded_key {
        let mut inner_writer = scope
            .start_el("EncodedKey")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_80.as_ref());
    }
    if let Some(var_81) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_81.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_end_point(
    input: &crate::model::EndPoint,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_82) = &input.stream_type {
        let mut inner_writer = scope
            .start_el("StreamType")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_82.as_ref());
    }
    if let Some(var_83) = &input.kinesis_stream_config {
        let inner_writer = scope
            .start_el("KinesisStreamConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_kinesis_stream_config(&var_83, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_streaming_distribution_config(
    input: &crate::model::StreamingDistributionConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_84) = &input.caller_reference {
        let mut inner_writer = scope
            .start_el("CallerReference")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_84.as_ref());
    }
    if let Some(var_85) = &input.s3_origin {
        let inner_writer = scope
            .start_el("S3Origin")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_s3_origin(&var_85, inner_writer)
    }
    if let Some(var_86) = &input.aliases {
        let inner_writer = scope
            .start_el("Aliases")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_aliases(&var_86, inner_writer)
    }
    if let Some(var_87) = &input.comment {
        let mut inner_writer = scope
            .start_el("Comment")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_87.as_ref());
    }
    if let Some(var_88) = &input.logging {
        let inner_writer = scope
            .start_el("Logging")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_streaming_logging_config(
            &var_88,
            inner_writer,
        )
    }
    if let Some(var_89) = &input.trusted_signers {
        let inner_writer = scope
            .start_el("TrustedSigners")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_trusted_signers(&var_89, inner_writer)
    }
    if let Some(var_90) = &input.price_class {
        let mut inner_writer = scope
            .start_el("PriceClass")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_90.as_str());
    }
    if let Some(var_91) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_91).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_streaming_distribution_config_with_tags(
    input: &crate::model::StreamingDistributionConfigWithTags,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_92) = &input.streaming_distribution_config {
        let inner_writer = scope
            .start_el("StreamingDistributionConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_streaming_distribution_config(
            &var_92,
            inner_writer,
        )
    }
    if let Some(var_93) = &input.tags {
        let inner_writer = scope
            .start_el("Tags")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_tags(&var_93, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_tags(
    input: &crate::model::Tags,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_94) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_95 in var_94 {
            {
                let inner_writer = inner_writer
                    .start_el("Tag")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_tag(&list_item_95, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_tag_keys(
    input: &crate::model::TagKeys,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_96) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_97 in var_96 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Key")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_97.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_parameters_in_cache_key_and_forwarded_to_origin(
    input: &crate::model::ParametersInCacheKeyAndForwardedToOrigin,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_98) = &input.enable_accept_encoding_gzip {
        let mut inner_writer = scope
            .start_el("EnableAcceptEncodingGzip")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_98).encode());
    }
    if let Some(var_99) = &input.enable_accept_encoding_brotli {
        let mut inner_writer = scope
            .start_el("EnableAcceptEncodingBrotli")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_99).encode());
    }
    if let Some(var_100) = &input.headers_config {
        let inner_writer = scope
            .start_el("HeadersConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cache_policy_headers_config(
            &var_100,
            inner_writer,
        )
    }
    if let Some(var_101) = &input.cookies_config {
        let inner_writer = scope
            .start_el("CookiesConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cache_policy_cookies_config(
            &var_101,
            inner_writer,
        )
    }
    if let Some(var_102) = &input.query_strings_config {
        let inner_writer = scope
            .start_el("QueryStringsConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cache_policy_query_strings_config(
            &var_102,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_aliases(
    input: &crate::model::Aliases,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_103) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_103).encode());
    }
    if let Some(var_104) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_105 in var_104 {
            {
                let mut inner_writer = inner_writer
                    .start_el("CNAME")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_105.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origins(
    input: &crate::model::Origins,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_106) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_106).encode());
    }
    if let Some(var_107) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_108 in var_107 {
            {
                let inner_writer = inner_writer
                    .start_el("Origin")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_origin(&list_item_108, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_groups(
    input: &crate::model::OriginGroups,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_109) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_109).encode());
    }
    if let Some(var_110) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_111 in var_110 {
            {
                let inner_writer = inner_writer
                    .start_el("OriginGroup")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_origin_group(
                    &list_item_111,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_default_cache_behavior(
    input: &crate::model::DefaultCacheBehavior,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_112) = &input.target_origin_id {
        let mut inner_writer = scope
            .start_el("TargetOriginId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_112.as_ref());
    }
    if let Some(var_113) = &input.trusted_signers {
        let inner_writer = scope
            .start_el("TrustedSigners")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_trusted_signers(&var_113, inner_writer)
    }
    if let Some(var_114) = &input.trusted_key_groups {
        let inner_writer = scope
            .start_el("TrustedKeyGroups")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_trusted_key_groups(&var_114, inner_writer)
    }
    if let Some(var_115) = &input.viewer_protocol_policy {
        let mut inner_writer = scope
            .start_el("ViewerProtocolPolicy")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_115.as_str());
    }
    if let Some(var_116) = &input.allowed_methods {
        let inner_writer = scope
            .start_el("AllowedMethods")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_allowed_methods(&var_116, inner_writer)
    }
    if let Some(var_117) = &input.smooth_streaming {
        let mut inner_writer = scope
            .start_el("SmoothStreaming")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_117).encode());
    }
    if let Some(var_118) = &input.compress {
        let mut inner_writer = scope
            .start_el("Compress")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_118).encode());
    }
    if let Some(var_119) = &input.lambda_function_associations {
        let inner_writer = scope
            .start_el("LambdaFunctionAssociations")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_lambda_function_associations(
            &var_119,
            inner_writer,
        )
    }
    if let Some(var_120) = &input.function_associations {
        let inner_writer = scope
            .start_el("FunctionAssociations")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_function_associations(
            &var_120,
            inner_writer,
        )
    }
    if let Some(var_121) = &input.field_level_encryption_id {
        let mut inner_writer = scope
            .start_el("FieldLevelEncryptionId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_121.as_ref());
    }
    if let Some(var_122) = &input.realtime_log_config_arn {
        let mut inner_writer = scope
            .start_el("RealtimeLogConfigArn")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_122.as_ref());
    }
    if let Some(var_123) = &input.cache_policy_id {
        let mut inner_writer = scope
            .start_el("CachePolicyId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_123.as_ref());
    }
    if let Some(var_124) = &input.origin_request_policy_id {
        let mut inner_writer = scope
            .start_el("OriginRequestPolicyId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_124.as_ref());
    }
    if let Some(var_125) = &input.forwarded_values {
        let inner_writer = scope
            .start_el("ForwardedValues")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_forwarded_values(&var_125, inner_writer)
    }
    if let Some(var_126) = &input.min_ttl {
        let mut inner_writer = scope
            .start_el("MinTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_126).encode());
    }
    if let Some(var_127) = &input.default_ttl {
        let mut inner_writer = scope
            .start_el("DefaultTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_127).encode());
    }
    if let Some(var_128) = &input.max_ttl {
        let mut inner_writer = scope
            .start_el("MaxTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_128).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cache_behaviors(
    input: &crate::model::CacheBehaviors,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_129) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_129).encode());
    }
    if let Some(var_130) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_131 in var_130 {
            {
                let inner_writer = inner_writer
                    .start_el("CacheBehavior")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_cache_behavior(
                    &list_item_131,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_custom_error_responses(
    input: &crate::model::CustomErrorResponses,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_132) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_132).encode());
    }
    if let Some(var_133) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_134 in var_133 {
            {
                let inner_writer = inner_writer
                    .start_el("CustomErrorResponse")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_custom_error_response(
                    &list_item_134,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_logging_config(
    input: &crate::model::LoggingConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_135) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_135).encode());
    }
    if let Some(var_136) = &input.include_cookies {
        let mut inner_writer = scope
            .start_el("IncludeCookies")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_136).encode());
    }
    if let Some(var_137) = &input.bucket {
        let mut inner_writer = scope
            .start_el("Bucket")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_137.as_ref());
    }
    if let Some(var_138) = &input.prefix {
        let mut inner_writer = scope
            .start_el("Prefix")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_138.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_viewer_certificate(
    input: &crate::model::ViewerCertificate,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_139) = &input.cloud_front_default_certificate {
        let mut inner_writer = scope
            .start_el("CloudFrontDefaultCertificate")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_139).encode());
    }
    if let Some(var_140) = &input.iam_certificate_id {
        let mut inner_writer = scope
            .start_el("IAMCertificateId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_140.as_ref());
    }
    if let Some(var_141) = &input.acm_certificate_arn {
        let mut inner_writer = scope
            .start_el("ACMCertificateArn")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_141.as_ref());
    }
    if let Some(var_142) = &input.ssl_support_method {
        let mut inner_writer = scope
            .start_el("SSLSupportMethod")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_142.as_str());
    }
    if let Some(var_143) = &input.minimum_protocol_version {
        let mut inner_writer = scope
            .start_el("MinimumProtocolVersion")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_143.as_str());
    }
    if let Some(var_144) = &input.certificate {
        let mut inner_writer = scope
            .start_el("Certificate")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_144.as_ref());
    }
    if let Some(var_145) = &input.certificate_source {
        let mut inner_writer = scope
            .start_el("CertificateSource")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_145.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_restrictions(
    input: &crate::model::Restrictions,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_146) = &input.geo_restriction {
        let inner_writer = scope
            .start_el("GeoRestriction")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_geo_restriction(&var_146, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_query_arg_profile_config(
    input: &crate::model::QueryArgProfileConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_147) = &input.forward_when_query_arg_profile_is_unknown {
        let mut inner_writer = scope
            .start_el("ForwardWhenQueryArgProfileIsUnknown")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_147).encode());
    }
    if let Some(var_148) = &input.query_arg_profiles {
        let inner_writer = scope
            .start_el("QueryArgProfiles")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_query_arg_profiles(&var_148, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_content_type_profile_config(
    input: &crate::model::ContentTypeProfileConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_149) = &input.forward_when_content_type_is_unknown {
        let mut inner_writer = scope
            .start_el("ForwardWhenContentTypeIsUnknown")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_149).encode());
    }
    if let Some(var_150) = &input.content_type_profiles {
        let inner_writer = scope
            .start_el("ContentTypeProfiles")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_content_type_profiles(
            &var_150,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_encryption_entities(
    input: &crate::model::EncryptionEntities,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_151) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_151).encode());
    }
    if let Some(var_152) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_153 in var_152 {
            {
                let inner_writer = inner_writer
                    .start_el("EncryptionEntity")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_encryption_entity(
                    &list_item_153,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_paths(
    input: &crate::model::Paths,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_154) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_154).encode());
    }
    if let Some(var_155) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_156 in var_155 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Path")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_156.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_realtime_metrics_subscription_config(
    input: &crate::model::RealtimeMetricsSubscriptionConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_157) = &input.realtime_metrics_subscription_status {
        let mut inner_writer = scope
            .start_el("RealtimeMetricsSubscriptionStatus")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_157.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_request_policy_headers_config(
    input: &crate::model::OriginRequestPolicyHeadersConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_158) = &input.header_behavior {
        let mut inner_writer = scope
            .start_el("HeaderBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_158.as_str());
    }
    if let Some(var_159) = &input.headers {
        let inner_writer = scope
            .start_el("Headers")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_headers(&var_159, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_request_policy_cookies_config(
    input: &crate::model::OriginRequestPolicyCookiesConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_160) = &input.cookie_behavior {
        let mut inner_writer = scope
            .start_el("CookieBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_160.as_str());
    }
    if let Some(var_161) = &input.cookies {
        let inner_writer = scope
            .start_el("Cookies")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cookie_names(&var_161, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_request_policy_query_strings_config(
    input: &crate::model::OriginRequestPolicyQueryStringsConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_162) = &input.query_string_behavior {
        let mut inner_writer = scope
            .start_el("QueryStringBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_162.as_str());
    }
    if let Some(var_163) = &input.query_strings {
        let inner_writer = scope
            .start_el("QueryStrings")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_query_string_names(&var_163, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_kinesis_stream_config(
    input: &crate::model::KinesisStreamConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_164) = &input.role_arn {
        let mut inner_writer = scope
            .start_el("RoleARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_164.as_ref());
    }
    if let Some(var_165) = &input.stream_arn {
        let mut inner_writer = scope
            .start_el("StreamARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_165.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_s3_origin(
    input: &crate::model::S3Origin,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_166) = &input.domain_name {
        let mut inner_writer = scope
            .start_el("DomainName")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_166.as_ref());
    }
    if let Some(var_167) = &input.origin_access_identity {
        let mut inner_writer = scope
            .start_el("OriginAccessIdentity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_167.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_streaming_logging_config(
    input: &crate::model::StreamingLoggingConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_168) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_168).encode());
    }
    if let Some(var_169) = &input.bucket {
        let mut inner_writer = scope
            .start_el("Bucket")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_169.as_ref());
    }
    if let Some(var_170) = &input.prefix {
        let mut inner_writer = scope
            .start_el("Prefix")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_170.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_trusted_signers(
    input: &crate::model::TrustedSigners,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_171) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_171).encode());
    }
    if let Some(var_172) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_172).encode());
    }
    if let Some(var_173) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_174 in var_173 {
            {
                let mut inner_writer = inner_writer
                    .start_el("AwsAccountNumber")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_174.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_tag(
    input: &crate::model::Tag,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_175) = &input.key {
        let mut inner_writer = scope
            .start_el("Key")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_175.as_ref());
    }
    if let Some(var_176) = &input.value {
        let mut inner_writer = scope
            .start_el("Value")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_176.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cache_policy_headers_config(
    input: &crate::model::CachePolicyHeadersConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_177) = &input.header_behavior {
        let mut inner_writer = scope
            .start_el("HeaderBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_177.as_str());
    }
    if let Some(var_178) = &input.headers {
        let inner_writer = scope
            .start_el("Headers")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_headers(&var_178, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cache_policy_cookies_config(
    input: &crate::model::CachePolicyCookiesConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_179) = &input.cookie_behavior {
        let mut inner_writer = scope
            .start_el("CookieBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_179.as_str());
    }
    if let Some(var_180) = &input.cookies {
        let inner_writer = scope
            .start_el("Cookies")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cookie_names(&var_180, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cache_policy_query_strings_config(
    input: &crate::model::CachePolicyQueryStringsConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_181) = &input.query_string_behavior {
        let mut inner_writer = scope
            .start_el("QueryStringBehavior")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_181.as_str());
    }
    if let Some(var_182) = &input.query_strings {
        let inner_writer = scope
            .start_el("QueryStrings")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_query_string_names(&var_182, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin(
    input: &crate::model::Origin,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_183) = &input.id {
        let mut inner_writer = scope
            .start_el("Id")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_183.as_ref());
    }
    if let Some(var_184) = &input.domain_name {
        let mut inner_writer = scope
            .start_el("DomainName")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_184.as_ref());
    }
    if let Some(var_185) = &input.origin_path {
        let mut inner_writer = scope
            .start_el("OriginPath")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_185.as_ref());
    }
    if let Some(var_186) = &input.custom_headers {
        let inner_writer = scope
            .start_el("CustomHeaders")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_custom_headers(&var_186, inner_writer)
    }
    if let Some(var_187) = &input.s3_origin_config {
        let inner_writer = scope
            .start_el("S3OriginConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_s3_origin_config(&var_187, inner_writer)
    }
    if let Some(var_188) = &input.custom_origin_config {
        let inner_writer = scope
            .start_el("CustomOriginConfig")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_custom_origin_config(&var_188, inner_writer)
    }
    if let Some(var_189) = &input.connection_attempts {
        let mut inner_writer = scope
            .start_el("ConnectionAttempts")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_189).encode());
    }
    if let Some(var_190) = &input.connection_timeout {
        let mut inner_writer = scope
            .start_el("ConnectionTimeout")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_190).encode());
    }
    if let Some(var_191) = &input.origin_shield {
        let inner_writer = scope
            .start_el("OriginShield")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_shield(&var_191, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_group(
    input: &crate::model::OriginGroup,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_192) = &input.id {
        let mut inner_writer = scope
            .start_el("Id")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_192.as_ref());
    }
    if let Some(var_193) = &input.failover_criteria {
        let inner_writer = scope
            .start_el("FailoverCriteria")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_group_failover_criteria(
            &var_193,
            inner_writer,
        )
    }
    if let Some(var_194) = &input.members {
        let inner_writer = scope
            .start_el("Members")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_group_members(&var_194, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_trusted_key_groups(
    input: &crate::model::TrustedKeyGroups,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_195) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_195).encode());
    }
    if let Some(var_196) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_196).encode());
    }
    if let Some(var_197) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_198 in var_197 {
            {
                let mut inner_writer = inner_writer
                    .start_el("KeyGroup")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_198.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_allowed_methods(
    input: &crate::model::AllowedMethods,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_199) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_199).encode());
    }
    if let Some(var_200) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_201 in var_200 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Method")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_201.as_str());
            }
        }
    }
    if let Some(var_202) = &input.cached_methods {
        let inner_writer = scope
            .start_el("CachedMethods")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cached_methods(&var_202, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_lambda_function_associations(
    input: &crate::model::LambdaFunctionAssociations,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_203) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_203).encode());
    }
    if let Some(var_204) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_205 in var_204 {
            {
                let inner_writer = inner_writer
                    .start_el("LambdaFunctionAssociation")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_lambda_function_association(
                    &list_item_205,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_function_associations(
    input: &crate::model::FunctionAssociations,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_206) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_206).encode());
    }
    if let Some(var_207) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_208 in var_207 {
            {
                let inner_writer = inner_writer
                    .start_el("FunctionAssociation")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_function_association(
                    &list_item_208,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_forwarded_values(
    input: &crate::model::ForwardedValues,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_209) = &input.query_string {
        let mut inner_writer = scope
            .start_el("QueryString")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_209).encode());
    }
    if let Some(var_210) = &input.cookies {
        let inner_writer = scope
            .start_el("Cookies")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cookie_preference(&var_210, inner_writer)
    }
    if let Some(var_211) = &input.headers {
        let inner_writer = scope
            .start_el("Headers")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_headers(&var_211, inner_writer)
    }
    if let Some(var_212) = &input.query_string_cache_keys {
        let inner_writer = scope
            .start_el("QueryStringCacheKeys")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_query_string_cache_keys(
            &var_212,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cache_behavior(
    input: &crate::model::CacheBehavior,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_213) = &input.path_pattern {
        let mut inner_writer = scope
            .start_el("PathPattern")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_213.as_ref());
    }
    if let Some(var_214) = &input.target_origin_id {
        let mut inner_writer = scope
            .start_el("TargetOriginId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_214.as_ref());
    }
    if let Some(var_215) = &input.trusted_signers {
        let inner_writer = scope
            .start_el("TrustedSigners")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_trusted_signers(&var_215, inner_writer)
    }
    if let Some(var_216) = &input.trusted_key_groups {
        let inner_writer = scope
            .start_el("TrustedKeyGroups")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_trusted_key_groups(&var_216, inner_writer)
    }
    if let Some(var_217) = &input.viewer_protocol_policy {
        let mut inner_writer = scope
            .start_el("ViewerProtocolPolicy")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_217.as_str());
    }
    if let Some(var_218) = &input.allowed_methods {
        let inner_writer = scope
            .start_el("AllowedMethods")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_allowed_methods(&var_218, inner_writer)
    }
    if let Some(var_219) = &input.smooth_streaming {
        let mut inner_writer = scope
            .start_el("SmoothStreaming")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_219).encode());
    }
    if let Some(var_220) = &input.compress {
        let mut inner_writer = scope
            .start_el("Compress")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_220).encode());
    }
    if let Some(var_221) = &input.lambda_function_associations {
        let inner_writer = scope
            .start_el("LambdaFunctionAssociations")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_lambda_function_associations(
            &var_221,
            inner_writer,
        )
    }
    if let Some(var_222) = &input.function_associations {
        let inner_writer = scope
            .start_el("FunctionAssociations")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_function_associations(
            &var_222,
            inner_writer,
        )
    }
    if let Some(var_223) = &input.field_level_encryption_id {
        let mut inner_writer = scope
            .start_el("FieldLevelEncryptionId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_223.as_ref());
    }
    if let Some(var_224) = &input.realtime_log_config_arn {
        let mut inner_writer = scope
            .start_el("RealtimeLogConfigArn")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_224.as_ref());
    }
    if let Some(var_225) = &input.cache_policy_id {
        let mut inner_writer = scope
            .start_el("CachePolicyId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_225.as_ref());
    }
    if let Some(var_226) = &input.origin_request_policy_id {
        let mut inner_writer = scope
            .start_el("OriginRequestPolicyId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_226.as_ref());
    }
    if let Some(var_227) = &input.forwarded_values {
        let inner_writer = scope
            .start_el("ForwardedValues")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_forwarded_values(&var_227, inner_writer)
    }
    if let Some(var_228) = &input.min_ttl {
        let mut inner_writer = scope
            .start_el("MinTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_228).encode());
    }
    if let Some(var_229) = &input.default_ttl {
        let mut inner_writer = scope
            .start_el("DefaultTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_229).encode());
    }
    if let Some(var_230) = &input.max_ttl {
        let mut inner_writer = scope
            .start_el("MaxTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_230).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_custom_error_response(
    input: &crate::model::CustomErrorResponse,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_231) = &input.error_code {
        let mut inner_writer = scope
            .start_el("ErrorCode")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_231).encode());
    }
    if let Some(var_232) = &input.response_page_path {
        let mut inner_writer = scope
            .start_el("ResponsePagePath")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_232.as_ref());
    }
    if let Some(var_233) = &input.response_code {
        let mut inner_writer = scope
            .start_el("ResponseCode")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_233.as_ref());
    }
    if let Some(var_234) = &input.error_caching_min_ttl {
        let mut inner_writer = scope
            .start_el("ErrorCachingMinTTL")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_234).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_geo_restriction(
    input: &crate::model::GeoRestriction,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_235) = &input.restriction_type {
        let mut inner_writer = scope
            .start_el("RestrictionType")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_235.as_str());
    }
    if let Some(var_236) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_236).encode());
    }
    if let Some(var_237) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_238 in var_237 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Location")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_238.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_query_arg_profiles(
    input: &crate::model::QueryArgProfiles,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_239) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_239).encode());
    }
    if let Some(var_240) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_241 in var_240 {
            {
                let inner_writer = inner_writer
                    .start_el("QueryArgProfile")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_query_arg_profile(
                    &list_item_241,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_content_type_profiles(
    input: &crate::model::ContentTypeProfiles,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_242) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_242).encode());
    }
    if let Some(var_243) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_244 in var_243 {
            {
                let inner_writer = inner_writer
                    .start_el("ContentTypeProfile")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_content_type_profile(
                    &list_item_244,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_encryption_entity(
    input: &crate::model::EncryptionEntity,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_245) = &input.public_key_id {
        let mut inner_writer = scope
            .start_el("PublicKeyId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_245.as_ref());
    }
    if let Some(var_246) = &input.provider_id {
        let mut inner_writer = scope
            .start_el("ProviderId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_246.as_ref());
    }
    if let Some(var_247) = &input.field_patterns {
        let inner_writer = scope
            .start_el("FieldPatterns")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_field_patterns(&var_247, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_headers(
    input: &crate::model::Headers,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_248) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_248).encode());
    }
    if let Some(var_249) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_250 in var_249 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Name")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_250.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cookie_names(
    input: &crate::model::CookieNames,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_251) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_251).encode());
    }
    if let Some(var_252) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_253 in var_252 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Name")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_253.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_query_string_names(
    input: &crate::model::QueryStringNames,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_254) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_254).encode());
    }
    if let Some(var_255) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_256 in var_255 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Name")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_256.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_custom_headers(
    input: &crate::model::CustomHeaders,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_257) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_257).encode());
    }
    if let Some(var_258) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_259 in var_258 {
            {
                let inner_writer = inner_writer
                    .start_el("OriginCustomHeader")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_origin_custom_header(
                    &list_item_259,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_s3_origin_config(
    input: &crate::model::S3OriginConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_260) = &input.origin_access_identity {
        let mut inner_writer = scope
            .start_el("OriginAccessIdentity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_260.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_custom_origin_config(
    input: &crate::model::CustomOriginConfig,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_261) = &input.http_port {
        let mut inner_writer = scope
            .start_el("HTTPPort")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_261).encode());
    }
    if let Some(var_262) = &input.https_port {
        let mut inner_writer = scope
            .start_el("HTTPSPort")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_262).encode());
    }
    if let Some(var_263) = &input.origin_protocol_policy {
        let mut inner_writer = scope
            .start_el("OriginProtocolPolicy")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_263.as_str());
    }
    if let Some(var_264) = &input.origin_ssl_protocols {
        let inner_writer = scope
            .start_el("OriginSslProtocols")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_origin_ssl_protocols(&var_264, inner_writer)
    }
    if let Some(var_265) = &input.origin_read_timeout {
        let mut inner_writer = scope
            .start_el("OriginReadTimeout")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_265).encode());
    }
    if let Some(var_266) = &input.origin_keepalive_timeout {
        let mut inner_writer = scope
            .start_el("OriginKeepaliveTimeout")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_266).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_shield(
    input: &crate::model::OriginShield,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_267) = &input.enabled {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_267).encode());
    }
    if let Some(var_268) = &input.origin_shield_region {
        let mut inner_writer = scope
            .start_el("OriginShieldRegion")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_268.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_group_failover_criteria(
    input: &crate::model::OriginGroupFailoverCriteria,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_269) = &input.status_codes {
        let inner_writer = scope
            .start_el("StatusCodes")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_status_codes(&var_269, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_group_members(
    input: &crate::model::OriginGroupMembers,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_270) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_270).encode());
    }
    if let Some(var_271) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_272 in var_271 {
            {
                let inner_writer = inner_writer
                    .start_el("OriginGroupMember")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
                crate::xml_ser::serialize_structure_crate_model_origin_group_member(
                    &list_item_272,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cached_methods(
    input: &crate::model::CachedMethods,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_273) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_273).encode());
    }
    if let Some(var_274) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_275 in var_274 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Method")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_275.as_str());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_lambda_function_association(
    input: &crate::model::LambdaFunctionAssociation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_276) = &input.lambda_function_arn {
        let mut inner_writer = scope
            .start_el("LambdaFunctionARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_276.as_ref());
    }
    if let Some(var_277) = &input.event_type {
        let mut inner_writer = scope
            .start_el("EventType")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_277.as_str());
    }
    if let Some(var_278) = &input.include_body {
        let mut inner_writer = scope
            .start_el("IncludeBody")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_278).encode());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_function_association(
    input: &crate::model::FunctionAssociation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_279) = &input.function_arn {
        let mut inner_writer = scope
            .start_el("FunctionARN")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_279.as_ref());
    }
    if let Some(var_280) = &input.event_type {
        let mut inner_writer = scope
            .start_el("EventType")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_280.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_cookie_preference(
    input: &crate::model::CookiePreference,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_281) = &input.forward {
        let mut inner_writer = scope
            .start_el("Forward")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_281.as_str());
    }
    if let Some(var_282) = &input.whitelisted_names {
        let inner_writer = scope
            .start_el("WhitelistedNames")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::xml_ser::serialize_structure_crate_model_cookie_names(&var_282, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_query_string_cache_keys(
    input: &crate::model::QueryStringCacheKeys,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_283) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_283).encode());
    }
    if let Some(var_284) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_285 in var_284 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Name")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_285.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_query_arg_profile(
    input: &crate::model::QueryArgProfile,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_286) = &input.query_arg {
        let mut inner_writer = scope
            .start_el("QueryArg")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_286.as_ref());
    }
    if let Some(var_287) = &input.profile_id {
        let mut inner_writer = scope
            .start_el("ProfileId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_287.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_content_type_profile(
    input: &crate::model::ContentTypeProfile,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_288) = &input.format {
        let mut inner_writer = scope
            .start_el("Format")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_288.as_str());
    }
    if let Some(var_289) = &input.profile_id {
        let mut inner_writer = scope
            .start_el("ProfileId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_289.as_ref());
    }
    if let Some(var_290) = &input.content_type {
        let mut inner_writer = scope
            .start_el("ContentType")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_290.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_field_patterns(
    input: &crate::model::FieldPatterns,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_291) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_291).encode());
    }
    if let Some(var_292) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_293 in var_292 {
            {
                let mut inner_writer = inner_writer
                    .start_el("FieldPattern")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_293.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_custom_header(
    input: &crate::model::OriginCustomHeader,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_294) = &input.header_name {
        let mut inner_writer = scope
            .start_el("HeaderName")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_294.as_ref());
    }
    if let Some(var_295) = &input.header_value {
        let mut inner_writer = scope
            .start_el("HeaderValue")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_295.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_ssl_protocols(
    input: &crate::model::OriginSslProtocols,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_296) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_296).encode());
    }
    if let Some(var_297) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_298 in var_297 {
            {
                let mut inner_writer = inner_writer
                    .start_el("SslProtocol")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(list_item_298.as_str());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_status_codes(
    input: &crate::model::StatusCodes,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_299) = &input.quantity {
        let mut inner_writer = scope
            .start_el("Quantity")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_299).encode());
    }
    if let Some(var_300) = &input.items {
        let mut inner_writer = scope
            .start_el("Items")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        for list_item_301 in var_300 {
            {
                let mut inner_writer = inner_writer
                    .start_el("StatusCode")
                    .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
                    .finish();
                inner_writer.data(smithy_types::primitive::Encoder::from(*list_item_301).encode());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_crate_model_origin_group_member(
    input: &crate::model::OriginGroupMember,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_302) = &input.origin_id {
        let mut inner_writer = scope
            .start_el("OriginId")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None)
            .finish();
        inner_writer.data(var_302.as_ref());
    }
    scope.finish();
}
