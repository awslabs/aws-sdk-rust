// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;

impl CreateDistributionWithTagsInput {
    /// Consumes the builder and constructs an Operation<[`CreateDistributionWithTags`](crate::operation::create_distribution_with_tags::CreateDistributionWithTags)>
    #[allow(unused_mut)]
    #[allow(clippy::let_and_return)]
    #[allow(clippy::needless_borrow)]
    pub async fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        aws_smithy_http::operation::Operation<
            crate::operation::create_distribution_with_tags::CreateDistributionWithTags,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::operation::error::BuildError,
    > {
        let params_result = crate::endpoint::Params::builder()
            .set_region(_config.region.as_ref().map(|r| r.as_ref().to_owned()))
            .set_use_dual_stack(_config.use_dual_stack)
            .set_use_fips(_config.use_fips)
            .set_endpoint(_config.endpoint_url.clone())
            .build()
            .map_err(|err| {
                aws_smithy_http::endpoint::ResolveEndpointError::from_source(
                    "could not construct endpoint parameters",
                    err,
                )
            });
        let (endpoint_result, params) = match params_result {
            Ok(params) => (
                _config.endpoint_resolver.resolve_endpoint(&params),
                Some(params),
            ),
            Err(e) => (Err(e), None),
        };
        let mut request = {
            fn uri_base(
                _input: &crate::operation::create_distribution_with_tags::CreateDistributionWithTagsInput,
                output: &mut String,
            ) -> std::result::Result<(), aws_smithy_http::operation::error::BuildError>
            {
                write!(output, "/2020-05-31/distribution").expect("formatting should succeed");
                Ok(())
            }
            fn uri_query(
                _input: &crate::operation::create_distribution_with_tags::CreateDistributionWithTagsInput,
                mut output: &mut String,
            ) -> Result<(), aws_smithy_http::operation::error::BuildError> {
                let mut query = aws_smithy_http::query::Writer::new(&mut output);
                query.push_v("WithTags");
                Ok(())
            }
            #[allow(clippy::unnecessary_wraps)]
            fn update_http_builder(
                input: &crate::operation::create_distribution_with_tags::CreateDistributionWithTagsInput,
                builder: http::request::Builder,
            ) -> std::result::Result<
                http::request::Builder,
                aws_smithy_http::operation::error::BuildError,
            > {
                let mut uri = String::new();
                uri_base(input, &mut uri)?;
                uri_query(input, &mut uri)?;
                Ok(builder.method("POST").uri(uri))
            }
            let mut builder = update_http_builder(&self, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_request_header_if_absent(
                builder,
                http::header::CONTENT_TYPE,
                "application/xml",
            );
            builder
        };
        let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        #[allow(clippy::useless_conversion)]
        let body = aws_smithy_http::body::SdkBody::from(
            crate::protocol_serde::shape_create_distribution_with_tags_input::ser_distribution_config_with_tags_http_payload(& self.distribution_config_with_tags)?
        );
        if let Some(content_length) = body.content_length() {
            request = aws_smithy_http::header::set_request_header_if_absent(
                request,
                http::header::CONTENT_LENGTH,
                content_length,
            );
        }
        let request = request.body(body).expect("should be valid request");
        let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
        request.properties_mut().insert(endpoint_result);
        if let Some(params) = params {
            request.properties_mut().insert(params);
        }
        request
            .properties_mut()
            .insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
        let mut user_agent = aws_http::user_agent::AwsUserAgent::new_from_environment(
            aws_types::os_shim_internal::Env::real(),
            crate::meta::API_METADATA.clone(),
        );
        if let Some(app_name) = _config.app_name() {
            user_agent = user_agent.with_app_name(app_name.clone());
        }
        request.properties_mut().insert(user_agent);
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
        request
            .properties_mut()
            .insert(aws_types::SigningService::from_static(
                _config.signing_service(),
            ));
        if let Some(region) = &_config.region {
            request
                .properties_mut()
                .insert(aws_types::region::SigningRegion::from(region.clone()));
        }
        if let Some(region) = &_config.region {
            request.properties_mut().insert(region.clone());
        }
        aws_http::auth::set_credentials_cache(
            &mut request.properties_mut(),
            _config.credentials_cache.clone(),
        );
        let op = aws_smithy_http::operation::Operation::new(
            request,
            crate::operation::create_distribution_with_tags::CreateDistributionWithTags::new(),
        )
        .with_metadata(aws_smithy_http::operation::Metadata::new(
            "CreateDistributionWithTags",
            "cloudfront",
        ));
        let op = op.with_retry_classifier(aws_http::retry::AwsResponseRetryClassifier::new());
        Ok(op)
    }
}
/// `ParseStrictResponse` impl for `CreateDistributionWithTags`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
#[non_exhaustive]
#[doc(hidden)]
pub struct CreateDistributionWithTags;
impl CreateDistributionWithTags {
    #[doc(hidden)]
    pub fn new() -> Self {
        Self
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDistributionWithTags {
    type Output = std::result::Result<
        crate::operation::create_distribution_with_tags::CreateDistributionWithTagsOutput,
        crate::operation::create_distribution_with_tags::CreateDistributionWithTagsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_distribution_with_tags::de_create_distribution_with_tags_http_error(response)
        } else {
            crate::protocol_serde::shape_create_distribution_with_tags::de_create_distribution_with_tags_http_response(response)
        }
    }
}

/// Do not use this.
///
/// Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now).
#[deprecated(
    note = "Operation `*Error/*ErrorKind` types were combined into a single `*Error` enum. The `.kind` field on `*Error` no longer exists and isn't needed anymore (you can just match on the error directly since it's an enum now)."
)]
pub type CreateDistributionWithTagsErrorKind = CreateDistributionWithTagsError;
/// Error type for the `CreateDistributionWithTagsError` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateDistributionWithTagsError {
    /// <p>Access denied.</p>
    AccessDenied(crate::types::error::AccessDenied),
    /// <p>The CNAME specified is already defined for CloudFront.</p>
    CnameAlreadyExists(crate::types::error::CnameAlreadyExists),
    /// <p>You cannot delete a continuous deployment policy that is associated with a primary distribution.</p>
    ContinuousDeploymentPolicyInUse(crate::types::error::ContinuousDeploymentPolicyInUse),
    /// <p>The caller reference you attempted to create the distribution with is associated with another distribution.</p>
    DistributionAlreadyExists(crate::types::error::DistributionAlreadyExists),
    /// <p>The specified configuration for field-level encryption can't be associated with the specified cache behavior.</p>
    IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(
        crate::types::error::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior,
    ),
    /// <p>The value of <code>Quantity</code> and the size of <code>Items</code> don't match.</p>
    InconsistentQuantities(crate::types::error::InconsistentQuantities),
    /// <p>An argument is invalid.</p>
    InvalidArgument(crate::types::error::InvalidArgument),
    /// <p>The default root object file name is too big or contains an invalid character.</p>
    InvalidDefaultRootObject(crate::types::error::InvalidDefaultRootObject),
    /// <p>An origin access control is associated with an origin whose domain name is not supported.</p>
    InvalidDomainNameForOriginAccessControl(
        crate::types::error::InvalidDomainNameForOriginAccessControl,
    ),
    /// <p>An invalid error code was specified.</p>
    InvalidErrorCode(crate::types::error::InvalidErrorCode),
    /// <p>Your request contains forward cookies option which doesn't match with the expectation for the <code>whitelisted</code> list of cookie names. Either list of cookie names has been specified when not allowed or list of cookie names is missing when expected.</p>
    InvalidForwardCookies(crate::types::error::InvalidForwardCookies),
    /// <p>A CloudFront function association is invalid.</p>
    InvalidFunctionAssociation(crate::types::error::InvalidFunctionAssociation),
    /// <p>The specified geo restriction parameter is not valid.</p>
    InvalidGeoRestrictionParameter(crate::types::error::InvalidGeoRestrictionParameter),
    /// <p>The headers specified are not valid for an Amazon S3 origin.</p>
    InvalidHeadersForS3Origin(crate::types::error::InvalidHeadersForS3Origin),
    /// <p>The specified Lambda@Edge function association is invalid.</p>
    InvalidLambdaFunctionAssociation(crate::types::error::InvalidLambdaFunctionAssociation),
    /// <p>The location code specified is not valid.</p>
    InvalidLocationCode(crate::types::error::InvalidLocationCode),
    /// <p>The minimum protocol version specified is not valid.</p>
    InvalidMinimumProtocolVersion(crate::types::error::InvalidMinimumProtocolVersion),
    /// <p>The Amazon S3 origin server specified does not refer to a valid Amazon S3 bucket.</p>
    InvalidOrigin(crate::types::error::InvalidOrigin),
    /// <p>The origin access control is not valid.</p>
    InvalidOriginAccessControl(crate::types::error::InvalidOriginAccessControl),
    /// <p>The origin access identity is not valid or doesn't exist.</p>
    InvalidOriginAccessIdentity(crate::types::error::InvalidOriginAccessIdentity),
    /// <p>The keep alive timeout specified for the origin is not valid.</p>
    InvalidOriginKeepaliveTimeout(crate::types::error::InvalidOriginKeepaliveTimeout),
    /// <p>The read timeout specified for the origin is not valid.</p>
    InvalidOriginReadTimeout(crate::types::error::InvalidOriginReadTimeout),
    /// <p>You cannot specify SSLv3 as the minimum protocol version if you only want to support only clients that support Server Name Indication (SNI).</p>
    InvalidProtocolSettings(crate::types::error::InvalidProtocolSettings),
    /// <p>The query string parameters specified are not valid.</p>
    InvalidQueryStringParameters(crate::types::error::InvalidQueryStringParameters),
    /// <p>The relative path is too big, is not URL-encoded, or does not begin with a slash (/).</p>
    InvalidRelativePath(crate::types::error::InvalidRelativePath),
    /// <p>This operation requires the HTTPS protocol. Ensure that you specify the HTTPS protocol in your request, or omit the <code>RequiredProtocols</code> element from your distribution configuration.</p>
    InvalidRequiredProtocol(crate::types::error::InvalidRequiredProtocol),
    /// <p>A response code is not valid.</p>
    InvalidResponseCode(crate::types::error::InvalidResponseCode),
    /// <p>The tagging specified is not valid.</p>
    InvalidTagging(crate::types::error::InvalidTagging),
    /// <p>The TTL order specified is not valid.</p>
    InvalidTtlOrder(crate::types::error::InvalidTtlOrder),
    /// <p>A viewer certificate specified is not valid.</p>
    InvalidViewerCertificate(crate::types::error::InvalidViewerCertificate),
    /// <p>A web ACL ID specified is not valid. To specify a web ACL created using the latest version of WAF, use the ACL ARN, for example <code>arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a</code>. To specify a web ACL created using WAF Classic, use the ACL ID, for example <code>473e64fd-f30b-4765-81a0-62ad96dd167a</code>.</p>
    InvalidWebAclId(crate::types::error::InvalidWebAclId),
    /// <p>This operation requires a body. Ensure that the body is present and the <code>Content-Type</code> header is set.</p>
    MissingBody(crate::types::error::MissingBody),
    /// <p>The cache policy does not exist.</p>
    NoSuchCachePolicy(crate::types::error::NoSuchCachePolicy),
    /// <p>The continuous deployment policy doesn't exist.</p>
    NoSuchContinuousDeploymentPolicy(crate::types::error::NoSuchContinuousDeploymentPolicy),
    /// <p>The specified configuration for field-level encryption doesn't exist.</p>
    NoSuchFieldLevelEncryptionConfig(crate::types::error::NoSuchFieldLevelEncryptionConfig),
    /// <p>No origin exists with the specified <code>Origin Id</code>.</p>
    NoSuchOrigin(crate::types::error::NoSuchOrigin),
    /// <p>The origin request policy does not exist.</p>
    NoSuchOriginRequestPolicy(crate::types::error::NoSuchOriginRequestPolicy),
    /// <p>The real-time log configuration does not exist.</p>
    NoSuchRealtimeLogConfig(crate::types::error::NoSuchRealtimeLogConfig),
    /// <p>The response headers policy does not exist.</p>
    NoSuchResponseHeadersPolicy(crate::types::error::NoSuchResponseHeadersPolicy),
    /// <p>The specified real-time log configuration belongs to a different Amazon Web Services account.</p>
    RealtimeLogConfigOwnerMismatch(crate::types::error::RealtimeLogConfigOwnerMismatch),
    /// <p>You cannot create more cache behaviors for the distribution.</p>
    TooManyCacheBehaviors(crate::types::error::TooManyCacheBehaviors),
    /// <p>You cannot create anymore custom SSL/TLS certificates.</p>
    TooManyCertificates(crate::types::error::TooManyCertificates),
    /// <p>Your request contains more cookie names in the whitelist than are allowed per cache behavior.</p>
    TooManyCookieNamesInWhiteList(crate::types::error::TooManyCookieNamesInWhiteList),
    /// <p>Your request contains more CNAMEs than are allowed per distribution.</p>
    TooManyDistributionCnamEs(crate::types::error::TooManyDistributionCnamEs),
    /// <p>Processing your request would cause you to exceed the maximum number of distributions allowed.</p>
    TooManyDistributions(crate::types::error::TooManyDistributions),
    /// <p>The maximum number of distributions have been associated with the specified cache policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyDistributionsAssociatedToCachePolicy(
        crate::types::error::TooManyDistributionsAssociatedToCachePolicy,
    ),
    /// <p>The maximum number of distributions have been associated with the specified configuration for field-level encryption.</p>
    TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(
        crate::types::error::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig,
    ),
    /// <p>The number of distributions that reference this key group is more than the maximum allowed. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyDistributionsAssociatedToKeyGroup(
        crate::types::error::TooManyDistributionsAssociatedToKeyGroup,
    ),
    /// <p>The maximum number of distributions have been associated with the specified origin request policy. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyDistributionsAssociatedToOriginRequestPolicy(
        crate::types::error::TooManyDistributionsAssociatedToOriginRequestPolicy,
    ),
    /// <p>The maximum number of distributions have been associated with the specified response headers policy.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyDistributionsAssociatedToResponseHeadersPolicy(
        crate::types::error::TooManyDistributionsAssociatedToResponseHeadersPolicy,
    ),
    /// <p>You have reached the maximum number of distributions that are associated with a CloudFront function. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyDistributionsWithFunctionAssociations(
        crate::types::error::TooManyDistributionsWithFunctionAssociations,
    ),
    /// <p>Processing your request would cause the maximum number of distributions with Lambda@Edge function associations per owner to be exceeded.</p>
    TooManyDistributionsWithLambdaAssociations(
        crate::types::error::TooManyDistributionsWithLambdaAssociations,
    ),
    /// <p>The maximum number of distributions have been associated with the specified Lambda@Edge function.</p>
    TooManyDistributionsWithSingleFunctionArn(
        crate::types::error::TooManyDistributionsWithSingleFunctionArn,
    ),
    /// <p>You have reached the maximum number of CloudFront function associations for this distribution. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyFunctionAssociations(crate::types::error::TooManyFunctionAssociations),
    /// <p>Your request contains too many headers in forwarded values.</p>
    TooManyHeadersInForwardedValues(crate::types::error::TooManyHeadersInForwardedValues),
    /// <p>The number of key groups referenced by this distribution is more than the maximum allowed. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">Quotas</a> (formerly known as limits) in the <i>Amazon CloudFront Developer Guide</i>.</p>
    TooManyKeyGroupsAssociatedToDistribution(
        crate::types::error::TooManyKeyGroupsAssociatedToDistribution,
    ),
    /// <p>Your request contains more Lambda@Edge function associations than are allowed per distribution.</p>
    TooManyLambdaFunctionAssociations(crate::types::error::TooManyLambdaFunctionAssociations),
    /// <p>Your request contains too many origin custom headers.</p>
    TooManyOriginCustomHeaders(crate::types::error::TooManyOriginCustomHeaders),
    /// <p>Processing your request would cause you to exceed the maximum number of origin groups allowed.</p>
    TooManyOriginGroupsPerDistribution(crate::types::error::TooManyOriginGroupsPerDistribution),
    /// <p>You cannot create more origins for the distribution.</p>
    TooManyOrigins(crate::types::error::TooManyOrigins),
    /// <p>Your request contains too many query string parameters.</p>
    TooManyQueryStringParameters(crate::types::error::TooManyQueryStringParameters),
    /// <p>Your request contains more trusted signers than are allowed per distribution.</p>
    TooManyTrustedSigners(crate::types::error::TooManyTrustedSigners),
    /// <p>The specified key group does not exist.</p>
    TrustedKeyGroupDoesNotExist(crate::types::error::TrustedKeyGroupDoesNotExist),
    /// <p>One or more of your trusted signers don't exist.</p>
    TrustedSignerDoesNotExist(crate::types::error::TrustedSignerDoesNotExist),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl aws_smithy_http::result::CreateUnhandledError for CreateDistributionWithTagsError {
    fn create_unhandled_error(
        source: Box<dyn std::error::Error + Send + Sync + 'static>,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> Self {
        Self::Unhandled({
            let mut builder = aws_smithy_types::error::Unhandled::builder().source(source);
            builder.set_meta(meta);
            builder.build()
        })
    }
}
impl std::fmt::Display for CreateDistributionWithTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::AccessDenied(_inner) => _inner.fmt(f),
            Self::CnameAlreadyExists(_inner) => _inner.fmt(f),
            Self::ContinuousDeploymentPolicyInUse(_inner) => _inner.fmt(f),
            Self::DistributionAlreadyExists(_inner) => _inner.fmt(f),
            Self::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(_inner) => {
                _inner.fmt(f)
            }
            Self::InconsistentQuantities(_inner) => _inner.fmt(f),
            Self::InvalidArgument(_inner) => _inner.fmt(f),
            Self::InvalidDefaultRootObject(_inner) => _inner.fmt(f),
            Self::InvalidDomainNameForOriginAccessControl(_inner) => _inner.fmt(f),
            Self::InvalidErrorCode(_inner) => _inner.fmt(f),
            Self::InvalidForwardCookies(_inner) => _inner.fmt(f),
            Self::InvalidFunctionAssociation(_inner) => _inner.fmt(f),
            Self::InvalidGeoRestrictionParameter(_inner) => _inner.fmt(f),
            Self::InvalidHeadersForS3Origin(_inner) => _inner.fmt(f),
            Self::InvalidLambdaFunctionAssociation(_inner) => _inner.fmt(f),
            Self::InvalidLocationCode(_inner) => _inner.fmt(f),
            Self::InvalidMinimumProtocolVersion(_inner) => _inner.fmt(f),
            Self::InvalidOrigin(_inner) => _inner.fmt(f),
            Self::InvalidOriginAccessControl(_inner) => _inner.fmt(f),
            Self::InvalidOriginAccessIdentity(_inner) => _inner.fmt(f),
            Self::InvalidOriginKeepaliveTimeout(_inner) => _inner.fmt(f),
            Self::InvalidOriginReadTimeout(_inner) => _inner.fmt(f),
            Self::InvalidProtocolSettings(_inner) => _inner.fmt(f),
            Self::InvalidQueryStringParameters(_inner) => _inner.fmt(f),
            Self::InvalidRelativePath(_inner) => _inner.fmt(f),
            Self::InvalidRequiredProtocol(_inner) => _inner.fmt(f),
            Self::InvalidResponseCode(_inner) => _inner.fmt(f),
            Self::InvalidTagging(_inner) => _inner.fmt(f),
            Self::InvalidTtlOrder(_inner) => _inner.fmt(f),
            Self::InvalidViewerCertificate(_inner) => _inner.fmt(f),
            Self::InvalidWebAclId(_inner) => _inner.fmt(f),
            Self::MissingBody(_inner) => _inner.fmt(f),
            Self::NoSuchCachePolicy(_inner) => _inner.fmt(f),
            Self::NoSuchContinuousDeploymentPolicy(_inner) => _inner.fmt(f),
            Self::NoSuchFieldLevelEncryptionConfig(_inner) => _inner.fmt(f),
            Self::NoSuchOrigin(_inner) => _inner.fmt(f),
            Self::NoSuchOriginRequestPolicy(_inner) => _inner.fmt(f),
            Self::NoSuchRealtimeLogConfig(_inner) => _inner.fmt(f),
            Self::NoSuchResponseHeadersPolicy(_inner) => _inner.fmt(f),
            Self::RealtimeLogConfigOwnerMismatch(_inner) => _inner.fmt(f),
            Self::TooManyCacheBehaviors(_inner) => _inner.fmt(f),
            Self::TooManyCertificates(_inner) => _inner.fmt(f),
            Self::TooManyCookieNamesInWhiteList(_inner) => _inner.fmt(f),
            Self::TooManyDistributionCnamEs(_inner) => _inner.fmt(f),
            Self::TooManyDistributions(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsAssociatedToCachePolicy(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(_inner) => {
                _inner.fmt(f)
            }
            Self::TooManyDistributionsAssociatedToKeyGroup(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsAssociatedToOriginRequestPolicy(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsAssociatedToResponseHeadersPolicy(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsWithFunctionAssociations(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsWithLambdaAssociations(_inner) => _inner.fmt(f),
            Self::TooManyDistributionsWithSingleFunctionArn(_inner) => _inner.fmt(f),
            Self::TooManyFunctionAssociations(_inner) => _inner.fmt(f),
            Self::TooManyHeadersInForwardedValues(_inner) => _inner.fmt(f),
            Self::TooManyKeyGroupsAssociatedToDistribution(_inner) => _inner.fmt(f),
            Self::TooManyLambdaFunctionAssociations(_inner) => _inner.fmt(f),
            Self::TooManyOriginCustomHeaders(_inner) => _inner.fmt(f),
            Self::TooManyOriginGroupsPerDistribution(_inner) => _inner.fmt(f),
            Self::TooManyOrigins(_inner) => _inner.fmt(f),
            Self::TooManyQueryStringParameters(_inner) => _inner.fmt(f),
            Self::TooManyTrustedSigners(_inner) => _inner.fmt(f),
            Self::TrustedKeyGroupDoesNotExist(_inner) => _inner.fmt(f),
            Self::TrustedSignerDoesNotExist(_inner) => _inner.fmt(f),
            Self::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for CreateDistributionWithTagsError {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        match self {
            Self::AccessDenied(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::CnameAlreadyExists(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::ContinuousDeploymentPolicyInUse(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::DistributionAlreadyExists(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InconsistentQuantities(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidArgument(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidDefaultRootObject(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidDomainNameForOriginAccessControl(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidErrorCode(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidForwardCookies(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidFunctionAssociation(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidGeoRestrictionParameter(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidHeadersForS3Origin(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidLambdaFunctionAssociation(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidLocationCode(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidMinimumProtocolVersion(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidOrigin(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidOriginAccessControl(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidOriginAccessIdentity(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidOriginKeepaliveTimeout(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidOriginReadTimeout(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidProtocolSettings(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidQueryStringParameters(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidRelativePath(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidRequiredProtocol(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidResponseCode(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidTagging(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidTtlOrder(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidViewerCertificate(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::InvalidWebAclId(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::MissingBody(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchCachePolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchContinuousDeploymentPolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchFieldLevelEncryptionConfig(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchOrigin(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchOriginRequestPolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchRealtimeLogConfig(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::NoSuchResponseHeadersPolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::RealtimeLogConfigOwnerMismatch(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyCacheBehaviors(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyCertificates(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyCookieNamesInWhiteList(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionCnamEs(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributions(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsAssociatedToCachePolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsAssociatedToKeyGroup(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsAssociatedToOriginRequestPolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsAssociatedToResponseHeadersPolicy(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsWithFunctionAssociations(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsWithLambdaAssociations(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyDistributionsWithSingleFunctionArn(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyFunctionAssociations(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyHeadersInForwardedValues(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyKeyGroupsAssociatedToDistribution(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyLambdaFunctionAssociations(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyOriginCustomHeaders(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyOriginGroupsPerDistribution(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyOrigins(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyQueryStringParameters(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TooManyTrustedSigners(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TrustedKeyGroupDoesNotExist(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::TrustedSignerDoesNotExist(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
            Self::Unhandled(_inner) => {
                aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(_inner)
            }
        }
    }
}
impl aws_http::request_id::RequestId
    for crate::operation::create_distribution_with_tags::CreateDistributionWithTagsError
{
    fn request_id(&self) -> Option<&str> {
        self.meta().request_id()
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for CreateDistributionWithTagsError {
    fn code(&self) -> std::option::Option<&str> {
        aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
    }
    fn retryable_error_kind(&self) -> std::option::Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateDistributionWithTagsError {
    /// Creates the `CreateDistributionWithTagsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err)
                .build(),
        )
    }

    /// Creates the `CreateDistributionWithTagsError::Unhandled` variant from a `aws_smithy_types::error::ErrorMetadata`.
    pub fn generic(err: aws_smithy_types::error::ErrorMetadata) -> Self {
        Self::Unhandled(
            aws_smithy_types::error::Unhandled::builder()
                .source(err.clone())
                .meta(err)
                .build(),
        )
    }
    ///
    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    ///
    pub fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        match self {
            Self::AccessDenied(e) => e.meta(),
            Self::CnameAlreadyExists(e) => e.meta(),
            Self::ContinuousDeploymentPolicyInUse(e) => e.meta(),
            Self::DistributionAlreadyExists(e) => e.meta(),
            Self::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(e) => e.meta(),
            Self::InconsistentQuantities(e) => e.meta(),
            Self::InvalidArgument(e) => e.meta(),
            Self::InvalidDefaultRootObject(e) => e.meta(),
            Self::InvalidDomainNameForOriginAccessControl(e) => e.meta(),
            Self::InvalidErrorCode(e) => e.meta(),
            Self::InvalidForwardCookies(e) => e.meta(),
            Self::InvalidFunctionAssociation(e) => e.meta(),
            Self::InvalidGeoRestrictionParameter(e) => e.meta(),
            Self::InvalidHeadersForS3Origin(e) => e.meta(),
            Self::InvalidLambdaFunctionAssociation(e) => e.meta(),
            Self::InvalidLocationCode(e) => e.meta(),
            Self::InvalidMinimumProtocolVersion(e) => e.meta(),
            Self::InvalidOrigin(e) => e.meta(),
            Self::InvalidOriginAccessControl(e) => e.meta(),
            Self::InvalidOriginAccessIdentity(e) => e.meta(),
            Self::InvalidOriginKeepaliveTimeout(e) => e.meta(),
            Self::InvalidOriginReadTimeout(e) => e.meta(),
            Self::InvalidProtocolSettings(e) => e.meta(),
            Self::InvalidQueryStringParameters(e) => e.meta(),
            Self::InvalidRelativePath(e) => e.meta(),
            Self::InvalidRequiredProtocol(e) => e.meta(),
            Self::InvalidResponseCode(e) => e.meta(),
            Self::InvalidTagging(e) => e.meta(),
            Self::InvalidTtlOrder(e) => e.meta(),
            Self::InvalidViewerCertificate(e) => e.meta(),
            Self::InvalidWebAclId(e) => e.meta(),
            Self::MissingBody(e) => e.meta(),
            Self::NoSuchCachePolicy(e) => e.meta(),
            Self::NoSuchContinuousDeploymentPolicy(e) => e.meta(),
            Self::NoSuchFieldLevelEncryptionConfig(e) => e.meta(),
            Self::NoSuchOrigin(e) => e.meta(),
            Self::NoSuchOriginRequestPolicy(e) => e.meta(),
            Self::NoSuchRealtimeLogConfig(e) => e.meta(),
            Self::NoSuchResponseHeadersPolicy(e) => e.meta(),
            Self::RealtimeLogConfigOwnerMismatch(e) => e.meta(),
            Self::TooManyCacheBehaviors(e) => e.meta(),
            Self::TooManyCertificates(e) => e.meta(),
            Self::TooManyCookieNamesInWhiteList(e) => e.meta(),
            Self::TooManyDistributionCnamEs(e) => e.meta(),
            Self::TooManyDistributions(e) => e.meta(),
            Self::TooManyDistributionsAssociatedToCachePolicy(e) => e.meta(),
            Self::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(e) => e.meta(),
            Self::TooManyDistributionsAssociatedToKeyGroup(e) => e.meta(),
            Self::TooManyDistributionsAssociatedToOriginRequestPolicy(e) => e.meta(),
            Self::TooManyDistributionsAssociatedToResponseHeadersPolicy(e) => e.meta(),
            Self::TooManyDistributionsWithFunctionAssociations(e) => e.meta(),
            Self::TooManyDistributionsWithLambdaAssociations(e) => e.meta(),
            Self::TooManyDistributionsWithSingleFunctionArn(e) => e.meta(),
            Self::TooManyFunctionAssociations(e) => e.meta(),
            Self::TooManyHeadersInForwardedValues(e) => e.meta(),
            Self::TooManyKeyGroupsAssociatedToDistribution(e) => e.meta(),
            Self::TooManyLambdaFunctionAssociations(e) => e.meta(),
            Self::TooManyOriginCustomHeaders(e) => e.meta(),
            Self::TooManyOriginGroupsPerDistribution(e) => e.meta(),
            Self::TooManyOrigins(e) => e.meta(),
            Self::TooManyQueryStringParameters(e) => e.meta(),
            Self::TooManyTrustedSigners(e) => e.meta(),
            Self::TrustedKeyGroupDoesNotExist(e) => e.meta(),
            Self::TrustedSignerDoesNotExist(e) => e.meta(),
            Self::Unhandled(e) => e.meta(),
        }
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::AccessDenied`.
    pub fn is_access_denied(&self) -> bool {
        matches!(self, Self::AccessDenied(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::CnameAlreadyExists`.
    pub fn is_cname_already_exists(&self) -> bool {
        matches!(self, Self::CnameAlreadyExists(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::ContinuousDeploymentPolicyInUse`.
    pub fn is_continuous_deployment_policy_in_use(&self) -> bool {
        matches!(self, Self::ContinuousDeploymentPolicyInUse(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::DistributionAlreadyExists`.
    pub fn is_distribution_already_exists(&self) -> bool {
        matches!(self, Self::DistributionAlreadyExists(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior`.
    pub fn is_illegal_field_level_encryption_config_association_with_cache_behavior(&self) -> bool {
        matches!(
            self,
            Self::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(_)
        )
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InconsistentQuantities`.
    pub fn is_inconsistent_quantities(&self) -> bool {
        matches!(self, Self::InconsistentQuantities(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidArgument`.
    pub fn is_invalid_argument(&self) -> bool {
        matches!(self, Self::InvalidArgument(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidDefaultRootObject`.
    pub fn is_invalid_default_root_object(&self) -> bool {
        matches!(self, Self::InvalidDefaultRootObject(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidDomainNameForOriginAccessControl`.
    pub fn is_invalid_domain_name_for_origin_access_control(&self) -> bool {
        matches!(self, Self::InvalidDomainNameForOriginAccessControl(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidErrorCode`.
    pub fn is_invalid_error_code(&self) -> bool {
        matches!(self, Self::InvalidErrorCode(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidForwardCookies`.
    pub fn is_invalid_forward_cookies(&self) -> bool {
        matches!(self, Self::InvalidForwardCookies(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidFunctionAssociation`.
    pub fn is_invalid_function_association(&self) -> bool {
        matches!(self, Self::InvalidFunctionAssociation(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidGeoRestrictionParameter`.
    pub fn is_invalid_geo_restriction_parameter(&self) -> bool {
        matches!(self, Self::InvalidGeoRestrictionParameter(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidHeadersForS3Origin`.
    pub fn is_invalid_headers_for_s3_origin(&self) -> bool {
        matches!(self, Self::InvalidHeadersForS3Origin(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidLambdaFunctionAssociation`.
    pub fn is_invalid_lambda_function_association(&self) -> bool {
        matches!(self, Self::InvalidLambdaFunctionAssociation(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidLocationCode`.
    pub fn is_invalid_location_code(&self) -> bool {
        matches!(self, Self::InvalidLocationCode(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidMinimumProtocolVersion`.
    pub fn is_invalid_minimum_protocol_version(&self) -> bool {
        matches!(self, Self::InvalidMinimumProtocolVersion(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidOrigin`.
    pub fn is_invalid_origin(&self) -> bool {
        matches!(self, Self::InvalidOrigin(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidOriginAccessControl`.
    pub fn is_invalid_origin_access_control(&self) -> bool {
        matches!(self, Self::InvalidOriginAccessControl(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidOriginAccessIdentity`.
    pub fn is_invalid_origin_access_identity(&self) -> bool {
        matches!(self, Self::InvalidOriginAccessIdentity(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidOriginKeepaliveTimeout`.
    pub fn is_invalid_origin_keepalive_timeout(&self) -> bool {
        matches!(self, Self::InvalidOriginKeepaliveTimeout(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidOriginReadTimeout`.
    pub fn is_invalid_origin_read_timeout(&self) -> bool {
        matches!(self, Self::InvalidOriginReadTimeout(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidProtocolSettings`.
    pub fn is_invalid_protocol_settings(&self) -> bool {
        matches!(self, Self::InvalidProtocolSettings(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidQueryStringParameters`.
    pub fn is_invalid_query_string_parameters(&self) -> bool {
        matches!(self, Self::InvalidQueryStringParameters(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidRelativePath`.
    pub fn is_invalid_relative_path(&self) -> bool {
        matches!(self, Self::InvalidRelativePath(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidRequiredProtocol`.
    pub fn is_invalid_required_protocol(&self) -> bool {
        matches!(self, Self::InvalidRequiredProtocol(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidResponseCode`.
    pub fn is_invalid_response_code(&self) -> bool {
        matches!(self, Self::InvalidResponseCode(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidTagging`.
    pub fn is_invalid_tagging(&self) -> bool {
        matches!(self, Self::InvalidTagging(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidTtlOrder`.
    pub fn is_invalid_ttl_order(&self) -> bool {
        matches!(self, Self::InvalidTtlOrder(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidViewerCertificate`.
    pub fn is_invalid_viewer_certificate(&self) -> bool {
        matches!(self, Self::InvalidViewerCertificate(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::InvalidWebAclId`.
    pub fn is_invalid_web_acl_id(&self) -> bool {
        matches!(self, Self::InvalidWebAclId(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::MissingBody`.
    pub fn is_missing_body(&self) -> bool {
        matches!(self, Self::MissingBody(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchCachePolicy`.
    pub fn is_no_such_cache_policy(&self) -> bool {
        matches!(self, Self::NoSuchCachePolicy(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchContinuousDeploymentPolicy`.
    pub fn is_no_such_continuous_deployment_policy(&self) -> bool {
        matches!(self, Self::NoSuchContinuousDeploymentPolicy(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchFieldLevelEncryptionConfig`.
    pub fn is_no_such_field_level_encryption_config(&self) -> bool {
        matches!(self, Self::NoSuchFieldLevelEncryptionConfig(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchOrigin`.
    pub fn is_no_such_origin(&self) -> bool {
        matches!(self, Self::NoSuchOrigin(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchOriginRequestPolicy`.
    pub fn is_no_such_origin_request_policy(&self) -> bool {
        matches!(self, Self::NoSuchOriginRequestPolicy(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchRealtimeLogConfig`.
    pub fn is_no_such_realtime_log_config(&self) -> bool {
        matches!(self, Self::NoSuchRealtimeLogConfig(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::NoSuchResponseHeadersPolicy`.
    pub fn is_no_such_response_headers_policy(&self) -> bool {
        matches!(self, Self::NoSuchResponseHeadersPolicy(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::RealtimeLogConfigOwnerMismatch`.
    pub fn is_realtime_log_config_owner_mismatch(&self) -> bool {
        matches!(self, Self::RealtimeLogConfigOwnerMismatch(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyCacheBehaviors`.
    pub fn is_too_many_cache_behaviors(&self) -> bool {
        matches!(self, Self::TooManyCacheBehaviors(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyCertificates`.
    pub fn is_too_many_certificates(&self) -> bool {
        matches!(self, Self::TooManyCertificates(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyCookieNamesInWhiteList`.
    pub fn is_too_many_cookie_names_in_white_list(&self) -> bool {
        matches!(self, Self::TooManyCookieNamesInWhiteList(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionCnamEs`.
    pub fn is_too_many_distribution_cnam_es(&self) -> bool {
        matches!(self, Self::TooManyDistributionCnamEs(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributions`.
    pub fn is_too_many_distributions(&self) -> bool {
        matches!(self, Self::TooManyDistributions(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsAssociatedToCachePolicy`.
    pub fn is_too_many_distributions_associated_to_cache_policy(&self) -> bool {
        matches!(self, Self::TooManyDistributionsAssociatedToCachePolicy(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig`.
    pub fn is_too_many_distributions_associated_to_field_level_encryption_config(&self) -> bool {
        matches!(
            self,
            Self::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(_)
        )
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsAssociatedToKeyGroup`.
    pub fn is_too_many_distributions_associated_to_key_group(&self) -> bool {
        matches!(self, Self::TooManyDistributionsAssociatedToKeyGroup(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsAssociatedToOriginRequestPolicy`.
    pub fn is_too_many_distributions_associated_to_origin_request_policy(&self) -> bool {
        matches!(
            self,
            Self::TooManyDistributionsAssociatedToOriginRequestPolicy(_)
        )
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsAssociatedToResponseHeadersPolicy`.
    pub fn is_too_many_distributions_associated_to_response_headers_policy(&self) -> bool {
        matches!(
            self,
            Self::TooManyDistributionsAssociatedToResponseHeadersPolicy(_)
        )
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsWithFunctionAssociations`.
    pub fn is_too_many_distributions_with_function_associations(&self) -> bool {
        matches!(self, Self::TooManyDistributionsWithFunctionAssociations(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsWithLambdaAssociations`.
    pub fn is_too_many_distributions_with_lambda_associations(&self) -> bool {
        matches!(self, Self::TooManyDistributionsWithLambdaAssociations(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyDistributionsWithSingleFunctionArn`.
    pub fn is_too_many_distributions_with_single_function_arn(&self) -> bool {
        matches!(self, Self::TooManyDistributionsWithSingleFunctionArn(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyFunctionAssociations`.
    pub fn is_too_many_function_associations(&self) -> bool {
        matches!(self, Self::TooManyFunctionAssociations(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyHeadersInForwardedValues`.
    pub fn is_too_many_headers_in_forwarded_values(&self) -> bool {
        matches!(self, Self::TooManyHeadersInForwardedValues(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyKeyGroupsAssociatedToDistribution`.
    pub fn is_too_many_key_groups_associated_to_distribution(&self) -> bool {
        matches!(self, Self::TooManyKeyGroupsAssociatedToDistribution(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyLambdaFunctionAssociations`.
    pub fn is_too_many_lambda_function_associations(&self) -> bool {
        matches!(self, Self::TooManyLambdaFunctionAssociations(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyOriginCustomHeaders`.
    pub fn is_too_many_origin_custom_headers(&self) -> bool {
        matches!(self, Self::TooManyOriginCustomHeaders(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyOriginGroupsPerDistribution`.
    pub fn is_too_many_origin_groups_per_distribution(&self) -> bool {
        matches!(self, Self::TooManyOriginGroupsPerDistribution(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyOrigins`.
    pub fn is_too_many_origins(&self) -> bool {
        matches!(self, Self::TooManyOrigins(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyQueryStringParameters`.
    pub fn is_too_many_query_string_parameters(&self) -> bool {
        matches!(self, Self::TooManyQueryStringParameters(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TooManyTrustedSigners`.
    pub fn is_too_many_trusted_signers(&self) -> bool {
        matches!(self, Self::TooManyTrustedSigners(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TrustedKeyGroupDoesNotExist`.
    pub fn is_trusted_key_group_does_not_exist(&self) -> bool {
        matches!(self, Self::TrustedKeyGroupDoesNotExist(_))
    }
    /// Returns `true` if the error kind is `CreateDistributionWithTagsError::TrustedSignerDoesNotExist`.
    pub fn is_trusted_signer_does_not_exist(&self) -> bool {
        matches!(self, Self::TrustedSignerDoesNotExist(_))
    }
}
impl std::error::Error for CreateDistributionWithTagsError {
    fn source(&self) -> std::option::Option<&(dyn std::error::Error + 'static)> {
        match self {
            Self::AccessDenied(_inner) => Some(_inner),
            Self::CnameAlreadyExists(_inner) => Some(_inner),
            Self::ContinuousDeploymentPolicyInUse(_inner) => Some(_inner),
            Self::DistributionAlreadyExists(_inner) => Some(_inner),
            Self::IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior(_inner) => {
                Some(_inner)
            }
            Self::InconsistentQuantities(_inner) => Some(_inner),
            Self::InvalidArgument(_inner) => Some(_inner),
            Self::InvalidDefaultRootObject(_inner) => Some(_inner),
            Self::InvalidDomainNameForOriginAccessControl(_inner) => Some(_inner),
            Self::InvalidErrorCode(_inner) => Some(_inner),
            Self::InvalidForwardCookies(_inner) => Some(_inner),
            Self::InvalidFunctionAssociation(_inner) => Some(_inner),
            Self::InvalidGeoRestrictionParameter(_inner) => Some(_inner),
            Self::InvalidHeadersForS3Origin(_inner) => Some(_inner),
            Self::InvalidLambdaFunctionAssociation(_inner) => Some(_inner),
            Self::InvalidLocationCode(_inner) => Some(_inner),
            Self::InvalidMinimumProtocolVersion(_inner) => Some(_inner),
            Self::InvalidOrigin(_inner) => Some(_inner),
            Self::InvalidOriginAccessControl(_inner) => Some(_inner),
            Self::InvalidOriginAccessIdentity(_inner) => Some(_inner),
            Self::InvalidOriginKeepaliveTimeout(_inner) => Some(_inner),
            Self::InvalidOriginReadTimeout(_inner) => Some(_inner),
            Self::InvalidProtocolSettings(_inner) => Some(_inner),
            Self::InvalidQueryStringParameters(_inner) => Some(_inner),
            Self::InvalidRelativePath(_inner) => Some(_inner),
            Self::InvalidRequiredProtocol(_inner) => Some(_inner),
            Self::InvalidResponseCode(_inner) => Some(_inner),
            Self::InvalidTagging(_inner) => Some(_inner),
            Self::InvalidTtlOrder(_inner) => Some(_inner),
            Self::InvalidViewerCertificate(_inner) => Some(_inner),
            Self::InvalidWebAclId(_inner) => Some(_inner),
            Self::MissingBody(_inner) => Some(_inner),
            Self::NoSuchCachePolicy(_inner) => Some(_inner),
            Self::NoSuchContinuousDeploymentPolicy(_inner) => Some(_inner),
            Self::NoSuchFieldLevelEncryptionConfig(_inner) => Some(_inner),
            Self::NoSuchOrigin(_inner) => Some(_inner),
            Self::NoSuchOriginRequestPolicy(_inner) => Some(_inner),
            Self::NoSuchRealtimeLogConfig(_inner) => Some(_inner),
            Self::NoSuchResponseHeadersPolicy(_inner) => Some(_inner),
            Self::RealtimeLogConfigOwnerMismatch(_inner) => Some(_inner),
            Self::TooManyCacheBehaviors(_inner) => Some(_inner),
            Self::TooManyCertificates(_inner) => Some(_inner),
            Self::TooManyCookieNamesInWhiteList(_inner) => Some(_inner),
            Self::TooManyDistributionCnamEs(_inner) => Some(_inner),
            Self::TooManyDistributions(_inner) => Some(_inner),
            Self::TooManyDistributionsAssociatedToCachePolicy(_inner) => Some(_inner),
            Self::TooManyDistributionsAssociatedToFieldLevelEncryptionConfig(_inner) => {
                Some(_inner)
            }
            Self::TooManyDistributionsAssociatedToKeyGroup(_inner) => Some(_inner),
            Self::TooManyDistributionsAssociatedToOriginRequestPolicy(_inner) => Some(_inner),
            Self::TooManyDistributionsAssociatedToResponseHeadersPolicy(_inner) => Some(_inner),
            Self::TooManyDistributionsWithFunctionAssociations(_inner) => Some(_inner),
            Self::TooManyDistributionsWithLambdaAssociations(_inner) => Some(_inner),
            Self::TooManyDistributionsWithSingleFunctionArn(_inner) => Some(_inner),
            Self::TooManyFunctionAssociations(_inner) => Some(_inner),
            Self::TooManyHeadersInForwardedValues(_inner) => Some(_inner),
            Self::TooManyKeyGroupsAssociatedToDistribution(_inner) => Some(_inner),
            Self::TooManyLambdaFunctionAssociations(_inner) => Some(_inner),
            Self::TooManyOriginCustomHeaders(_inner) => Some(_inner),
            Self::TooManyOriginGroupsPerDistribution(_inner) => Some(_inner),
            Self::TooManyOrigins(_inner) => Some(_inner),
            Self::TooManyQueryStringParameters(_inner) => Some(_inner),
            Self::TooManyTrustedSigners(_inner) => Some(_inner),
            Self::TrustedKeyGroupDoesNotExist(_inner) => Some(_inner),
            Self::TrustedSignerDoesNotExist(_inner) => Some(_inner),
            Self::Unhandled(_inner) => Some(_inner),
        }
    }
}

pub use crate::operation::create_distribution_with_tags::_create_distribution_with_tags_output::CreateDistributionWithTagsOutput;

pub use crate::operation::create_distribution_with_tags::_create_distribution_with_tags_input::CreateDistributionWithTagsInput;

mod _create_distribution_with_tags_input;

mod _create_distribution_with_tags_output;

/// Builders
pub mod builders;
