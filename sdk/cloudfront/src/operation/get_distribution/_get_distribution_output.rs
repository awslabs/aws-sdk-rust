// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The returned result of the corresponding request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDistributionOutput {
    /// <p>The distribution's information.</p>
    #[doc(hidden)]
    pub distribution: std::option::Option<crate::types::Distribution>,
    /// <p>The current version of the distribution's information. For example: <code>E2QWRUHAPOMQZL</code>.</p>
    #[doc(hidden)]
    pub e_tag: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDistributionOutput {
    /// <p>The distribution's information.</p>
    pub fn distribution(&self) -> std::option::Option<&crate::types::Distribution> {
        self.distribution.as_ref()
    }
    /// <p>The current version of the distribution's information. For example: <code>E2QWRUHAPOMQZL</code>.</p>
    pub fn e_tag(&self) -> std::option::Option<&str> {
        self.e_tag.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDistributionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDistributionOutput {
    /// Creates a new builder-style object to manufacture [`GetDistributionOutput`](crate::operation::get_distribution::GetDistributionOutput).
    pub fn builder() -> crate::operation::get_distribution::builders::GetDistributionOutputBuilder {
        crate::operation::get_distribution::builders::GetDistributionOutputBuilder::default()
    }
}

/// A builder for [`GetDistributionOutput`](crate::operation::get_distribution::GetDistributionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDistributionOutputBuilder {
    pub(crate) distribution: std::option::Option<crate::types::Distribution>,
    pub(crate) e_tag: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDistributionOutputBuilder {
    /// <p>The distribution's information.</p>
    pub fn distribution(mut self, input: crate::types::Distribution) -> Self {
        self.distribution = Some(input);
        self
    }
    /// <p>The distribution's information.</p>
    pub fn set_distribution(
        mut self,
        input: std::option::Option<crate::types::Distribution>,
    ) -> Self {
        self.distribution = input;
        self
    }
    /// <p>The current version of the distribution's information. For example: <code>E2QWRUHAPOMQZL</code>.</p>
    pub fn e_tag(mut self, input: impl Into<std::string::String>) -> Self {
        self.e_tag = Some(input.into());
        self
    }
    /// <p>The current version of the distribution's information. For example: <code>E2QWRUHAPOMQZL</code>.</p>
    pub fn set_e_tag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDistributionOutput`](crate::operation::get_distribution::GetDistributionOutput).
    pub fn build(self) -> crate::operation::get_distribution::GetDistributionOutput {
        crate::operation::get_distribution::GetDistributionOutput {
            distribution: self.distribution,
            e_tag: self.e_tag,
            _request_id: self._request_id,
        }
    }
}
