// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateKeyGroupInput {
    /// <p>A key group configuration.</p>
    #[doc(hidden)]
    pub key_group_config: std::option::Option<crate::types::KeyGroupConfig>,
}
impl CreateKeyGroupInput {
    /// <p>A key group configuration.</p>
    pub fn key_group_config(&self) -> std::option::Option<&crate::types::KeyGroupConfig> {
        self.key_group_config.as_ref()
    }
}
impl CreateKeyGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateKeyGroupInput`](crate::operation::create_key_group::CreateKeyGroupInput).
    pub fn builder() -> crate::operation::create_key_group::builders::CreateKeyGroupInputBuilder {
        crate::operation::create_key_group::builders::CreateKeyGroupInputBuilder::default()
    }
}

/// A builder for [`CreateKeyGroupInput`](crate::operation::create_key_group::CreateKeyGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateKeyGroupInputBuilder {
    pub(crate) key_group_config: std::option::Option<crate::types::KeyGroupConfig>,
}
impl CreateKeyGroupInputBuilder {
    /// <p>A key group configuration.</p>
    pub fn key_group_config(mut self, input: crate::types::KeyGroupConfig) -> Self {
        self.key_group_config = Some(input);
        self
    }
    /// <p>A key group configuration.</p>
    pub fn set_key_group_config(
        mut self,
        input: std::option::Option<crate::types::KeyGroupConfig>,
    ) -> Self {
        self.key_group_config = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateKeyGroupInput`](crate::operation::create_key_group::CreateKeyGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_key_group::CreateKeyGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_key_group::CreateKeyGroupInput {
            key_group_config: self.key_group_config,
        })
    }
}
