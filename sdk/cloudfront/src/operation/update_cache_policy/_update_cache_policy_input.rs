// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCachePolicyInput {
    /// <p>A cache policy configuration.</p>
    #[doc(hidden)]
    pub cache_policy_config: std::option::Option<crate::types::CachePolicyConfig>,
    /// <p>The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.</p>
    #[doc(hidden)]
    pub if_match: std::option::Option<std::string::String>,
}
impl UpdateCachePolicyInput {
    /// <p>A cache policy configuration.</p>
    pub fn cache_policy_config(&self) -> std::option::Option<&crate::types::CachePolicyConfig> {
        self.cache_policy_config.as_ref()
    }
    /// <p>The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.</p>
    pub fn if_match(&self) -> std::option::Option<&str> {
        self.if_match.as_deref()
    }
}
impl UpdateCachePolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateCachePolicyInput`](crate::operation::update_cache_policy::UpdateCachePolicyInput).
    pub fn builder(
    ) -> crate::operation::update_cache_policy::builders::UpdateCachePolicyInputBuilder {
        crate::operation::update_cache_policy::builders::UpdateCachePolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateCachePolicyInput`](crate::operation::update_cache_policy::UpdateCachePolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateCachePolicyInputBuilder {
    pub(crate) cache_policy_config: std::option::Option<crate::types::CachePolicyConfig>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) if_match: std::option::Option<std::string::String>,
}
impl UpdateCachePolicyInputBuilder {
    /// <p>A cache policy configuration.</p>
    pub fn cache_policy_config(mut self, input: crate::types::CachePolicyConfig) -> Self {
        self.cache_policy_config = Some(input);
        self
    }
    /// <p>A cache policy configuration.</p>
    pub fn set_cache_policy_config(
        mut self,
        input: std::option::Option<crate::types::CachePolicyConfig>,
    ) -> Self {
        self.cache_policy_config = input;
        self
    }
    /// <p>The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.</p>
    pub fn if_match(mut self, input: impl Into<std::string::String>) -> Self {
        self.if_match = Some(input.into());
        self
    }
    /// <p>The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.</p>
    pub fn set_if_match(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCachePolicyInput`](crate::operation::update_cache_policy::UpdateCachePolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_cache_policy::UpdateCachePolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_cache_policy::UpdateCachePolicyInput {
                cache_policy_config: self.cache_policy_config,
                id: self.id,
                if_match: self.if_match,
            },
        )
    }
}
