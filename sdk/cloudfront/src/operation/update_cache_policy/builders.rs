// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_cache_policy::_update_cache_policy_output::UpdateCachePolicyOutputBuilder;

pub use crate::operation::update_cache_policy::_update_cache_policy_input::UpdateCachePolicyInputBuilder;

/// Fluent builder constructing a request to `UpdateCachePolicy`.
///
/// <p>Updates a cache policy configuration.</p>
/// <p>When you update a cache policy configuration, all the fields are updated with the values provided in the request. You cannot update some fields independent of others. To update a cache policy configuration:</p>
/// <ol>
/// <li> <p>Use <code>GetCachePolicyConfig</code> to get the current configuration.</p> </li>
/// <li> <p>Locally modify the fields in the cache policy configuration that you want to update.</p> </li>
/// <li> <p>Call <code>UpdateCachePolicy</code> by providing the entire cache policy configuration, including the fields that you modified and those that you didn't.</p> </li>
/// </ol>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateCachePolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_cache_policy::builders::UpdateCachePolicyInputBuilder,
}
impl UpdateCachePolicyFluentBuilder {
    /// Creates a new `UpdateCachePolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_cache_policy::UpdateCachePolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_cache_policy::UpdateCachePolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_cache_policy::UpdateCachePolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_cache_policy::UpdateCachePolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A cache policy configuration.</p>
    pub fn cache_policy_config(mut self, input: crate::types::CachePolicyConfig) -> Self {
        self.inner = self.inner.cache_policy_config(input);
        self
    }
    /// <p>A cache policy configuration.</p>
    pub fn set_cache_policy_config(
        mut self,
        input: std::option::Option<crate::types::CachePolicyConfig>,
    ) -> Self {
        self.inner = self.inner.set_cache_policy_config(input);
        self
    }
    /// <p>The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The unique identifier for the cache policy that you are updating. The identifier is returned in a cache behavior's <code>CachePolicyId</code> field in the response to <code>GetDistributionConfig</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.</p>
    pub fn if_match(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.if_match(input.into());
        self
    }
    /// <p>The version of the cache policy that you are updating. The version is returned in the cache policy's <code>ETag</code> field in the response to <code>GetCachePolicyConfig</code>.</p>
    pub fn set_if_match(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_if_match(input);
        self
    }
}
