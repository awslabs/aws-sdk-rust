// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCachePolicyConfigInput {
    /// <p>The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl GetCachePolicyConfigInput {
    /// <p>The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl GetCachePolicyConfigInput {
    /// Creates a new builder-style object to manufacture [`GetCachePolicyConfigInput`](crate::operation::get_cache_policy_config::GetCachePolicyConfigInput).
    pub fn builder(
    ) -> crate::operation::get_cache_policy_config::builders::GetCachePolicyConfigInputBuilder {
        crate::operation::get_cache_policy_config::builders::GetCachePolicyConfigInputBuilder::default()
    }
}

/// A builder for [`GetCachePolicyConfigInput`](crate::operation::get_cache_policy_config::GetCachePolicyConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetCachePolicyConfigInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
}
impl GetCachePolicyConfigInputBuilder {
    /// <p>The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the cache policy. If the cache policy is attached to a distribution's cache behavior, you can get the policy's identifier using <code>ListDistributions</code> or <code>GetDistribution</code>. If the cache policy is not attached to a cache behavior, you can get the identifier using <code>ListCachePolicies</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`GetCachePolicyConfigInput`](crate::operation::get_cache_policy_config::GetCachePolicyConfigInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_cache_policy_config::GetCachePolicyConfigInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_cache_policy_config::GetCachePolicyConfigInput { id: self.id })
    }
}
