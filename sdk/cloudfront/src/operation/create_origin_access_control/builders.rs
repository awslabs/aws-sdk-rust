// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_origin_access_control::_create_origin_access_control_output::CreateOriginAccessControlOutputBuilder;

pub use crate::operation::create_origin_access_control::_create_origin_access_control_input::CreateOriginAccessControlInputBuilder;

/// Fluent builder constructing a request to `CreateOriginAccessControl`.
///
/// <p>Creates a new origin access control in CloudFront. After you create an origin access control, you can add it to an origin in a CloudFront distribution so that CloudFront sends authenticated (signed) requests to the origin.</p>
/// <p>For an Amazon S3 origin, this makes it possible to block public access to the Amazon S3 bucket so that viewers (users) can access the content in the bucket only through CloudFront.</p>
/// <p>For more information about using a CloudFront origin access control, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html">Restricting access to an Amazon S3 origin</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateOriginAccessControlFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_origin_access_control::builders::CreateOriginAccessControlInputBuilder
            }
impl CreateOriginAccessControlFluentBuilder {
    /// Creates a new `CreateOriginAccessControl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_origin_access_control::CreateOriginAccessControl,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_origin_access_control::CreateOriginAccessControlError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_origin_access_control::CreateOriginAccessControlOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_origin_access_control::CreateOriginAccessControlError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Contains the origin access control.</p>
    pub fn origin_access_control_config(
        mut self,
        input: crate::types::OriginAccessControlConfig,
    ) -> Self {
        self.inner = self.inner.origin_access_control_config(input);
        self
    }
    /// <p>Contains the origin access control.</p>
    pub fn set_origin_access_control_config(
        mut self,
        input: std::option::Option<crate::types::OriginAccessControlConfig>,
    ) -> Self {
        self.inner = self.inner.set_origin_access_control_config(input);
        self
    }
}
