// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_origin_request_policies::_list_origin_request_policies_output::ListOriginRequestPoliciesOutputBuilder;

pub use crate::operation::list_origin_request_policies::_list_origin_request_policies_input::ListOriginRequestPoliciesInputBuilder;

impl crate::operation::list_origin_request_policies::builders::ListOriginRequestPoliciesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_origin_request_policies::ListOriginRequestPoliciesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_origin_request_policies::ListOriginRequestPoliciesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_origin_request_policies();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListOriginRequestPolicies`.
///
/// <p>Gets a list of origin request policies.</p>
/// <p>You can optionally apply a filter to return only the managed policies created by Amazon Web Services, or only the custom policies created in your Amazon Web Services account.</p>
/// <p>You can optionally specify the maximum number of items to receive in the response. If the total number of items in the list exceeds the maximum that you specify, or the default maximum, the response is paginated. To get the next page of items, send a subsequent request that specifies the <code>NextMarker</code> value from the current response as the <code>Marker</code> value in the subsequent request.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListOriginRequestPoliciesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_origin_request_policies::builders::ListOriginRequestPoliciesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_origin_request_policies::ListOriginRequestPoliciesOutput,
        crate::operation::list_origin_request_policies::ListOriginRequestPoliciesError,
    > for ListOriginRequestPoliciesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_origin_request_policies::ListOriginRequestPoliciesOutput,
            crate::operation::list_origin_request_policies::ListOriginRequestPoliciesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListOriginRequestPoliciesFluentBuilder {
    /// Creates a new `ListOriginRequestPolicies`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListOriginRequestPolicies as a reference.
    pub fn as_input(&self) -> &crate::operation::list_origin_request_policies::builders::ListOriginRequestPoliciesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_origin_request_policies::ListOriginRequestPoliciesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_origin_request_policies::ListOriginRequestPoliciesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_origin_request_policies::ListOriginRequestPolicies::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_origin_request_policies::ListOriginRequestPolicies::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_origin_request_policies::ListOriginRequestPoliciesOutput,
        crate::operation::list_origin_request_policies::ListOriginRequestPoliciesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A filter to return only the specified kinds of origin request policies. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>managed</code> – Returns only the managed policies created by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>custom</code> – Returns only the custom policies created in your Amazon Web Services account.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::OriginRequestPolicyType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>A filter to return only the specified kinds of origin request policies. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>managed</code> – Returns only the managed policies created by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>custom</code> – Returns only the custom policies created in your Amazon Web Services account.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::OriginRequestPolicyType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>A filter to return only the specified kinds of origin request policies. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>managed</code> – Returns only the managed policies created by Amazon Web Services.</p></li>
    /// <li>
    /// <p><code>custom</code> – Returns only the custom policies created in your Amazon Web Services account.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::OriginRequestPolicyType> {
        self.inner.get_type()
    }
    /// <p>Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>Use this field when paginating results to indicate where to begin in your list of origin request policies. The response includes origin request policies in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_marker()
    }
    /// <p>The maximum number of origin request policies that you want in the response.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.inner = self.inner.max_items(input);
        self
    }
    /// <p>The maximum number of origin request policies that you want in the response.</p>
    pub fn set_max_items(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_items(input);
        self
    }
    /// <p>The maximum number of origin request policies that you want in the response.</p>
    pub fn get_max_items(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_items()
    }
}
