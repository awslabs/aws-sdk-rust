// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TestFunctionInput {
    /// <p>The name of the function that you are testing.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current version (<code>ETag</code> value) of the function that you are testing, which you can get using <code>DescribeFunction</code>.</p>
    #[doc(hidden)]
    pub if_match: std::option::Option<std::string::String>,
    /// <p>The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    #[doc(hidden)]
    pub stage: std::option::Option<crate::types::FunctionStage>,
    /// <p>The event object to test the function with. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    #[doc(hidden)]
    pub event_object: std::option::Option<aws_smithy_types::Blob>,
}
impl TestFunctionInput {
    /// <p>The name of the function that you are testing.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current version (<code>ETag</code> value) of the function that you are testing, which you can get using <code>DescribeFunction</code>.</p>
    pub fn if_match(&self) -> std::option::Option<&str> {
        self.if_match.as_deref()
    }
    /// <p>The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    pub fn stage(&self) -> std::option::Option<&crate::types::FunctionStage> {
        self.stage.as_ref()
    }
    /// <p>The event object to test the function with. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn event_object(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.event_object.as_ref()
    }
}
impl std::fmt::Debug for TestFunctionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestFunctionInput");
        formatter.field("name", &self.name);
        formatter.field("if_match", &self.if_match);
        formatter.field("stage", &self.stage);
        formatter.field("event_object", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TestFunctionInput {
    /// Creates a new builder-style object to manufacture [`TestFunctionInput`](crate::operation::test_function::TestFunctionInput).
    pub fn builder() -> crate::operation::test_function::builders::TestFunctionInputBuilder {
        crate::operation::test_function::builders::TestFunctionInputBuilder::default()
    }
}

/// A builder for [`TestFunctionInput`](crate::operation::test_function::TestFunctionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct TestFunctionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) if_match: std::option::Option<std::string::String>,
    pub(crate) stage: std::option::Option<crate::types::FunctionStage>,
    pub(crate) event_object: std::option::Option<aws_smithy_types::Blob>,
}
impl TestFunctionInputBuilder {
    /// <p>The name of the function that you are testing.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the function that you are testing.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The current version (<code>ETag</code> value) of the function that you are testing, which you can get using <code>DescribeFunction</code>.</p>
    pub fn if_match(mut self, input: impl Into<std::string::String>) -> Self {
        self.if_match = Some(input.into());
        self
    }
    /// <p>The current version (<code>ETag</code> value) of the function that you are testing, which you can get using <code>DescribeFunction</code>.</p>
    pub fn set_if_match(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// <p>The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    pub fn stage(mut self, input: crate::types::FunctionStage) -> Self {
        self.stage = Some(input);
        self
    }
    /// <p>The stage of the function that you are testing, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    pub fn set_stage(mut self, input: std::option::Option<crate::types::FunctionStage>) -> Self {
        self.stage = input;
        self
    }
    /// <p>The event object to test the function with. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn event_object(mut self, input: aws_smithy_types::Blob) -> Self {
        self.event_object = Some(input);
        self
    }
    /// <p>The event object to test the function with. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html#test-function">Testing functions</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn set_event_object(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.event_object = input;
        self
    }
    /// Consumes the builder and constructs a [`TestFunctionInput`](crate::operation::test_function::TestFunctionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_function::TestFunctionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::test_function::TestFunctionInput {
            name: self.name,
            if_match: self.if_match,
            stage: self.stage,
            event_object: self.event_object,
        })
    }
}
impl std::fmt::Debug for TestFunctionInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TestFunctionInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("if_match", &self.if_match);
        formatter.field("stage", &self.stage);
        formatter.field("event_object", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
