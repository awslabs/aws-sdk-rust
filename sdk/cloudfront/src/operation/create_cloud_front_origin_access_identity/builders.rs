// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_cloud_front_origin_access_identity::_create_cloud_front_origin_access_identity_output::CreateCloudFrontOriginAccessIdentityOutputBuilder;

pub use crate::operation::create_cloud_front_origin_access_identity::_create_cloud_front_origin_access_identity_input::CreateCloudFrontOriginAccessIdentityInputBuilder;

/// Fluent builder constructing a request to `CreateCloudFrontOriginAccessIdentity`.
///
/// <p>Creates a new origin access identity. If you're using Amazon S3 for your origin, you can use an origin access identity to require users to access your content using a CloudFront URL instead of the Amazon S3 URL. For more information about how to use origin access identities, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">Serving Private Content through CloudFront</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateCloudFrontOriginAccessIdentityFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_cloud_front_origin_access_identity::builders::CreateCloudFrontOriginAccessIdentityInputBuilder
            }
impl CreateCloudFrontOriginAccessIdentityFluentBuilder {
    /// Creates a new `CreateCloudFrontOriginAccessIdentity`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_cloud_front_origin_access_identity::CreateCloudFrontOriginAccessIdentity, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_cloud_front_origin_access_identity::CreateCloudFrontOriginAccessIdentityError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_cloud_front_origin_access_identity::CreateCloudFrontOriginAccessIdentityOutput, aws_smithy_http::result::SdkError<crate::operation::create_cloud_front_origin_access_identity::CreateCloudFrontOriginAccessIdentityError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The current configuration information for the identity.</p>
    pub fn cloud_front_origin_access_identity_config(
        mut self,
        input: crate::types::CloudFrontOriginAccessIdentityConfig,
    ) -> Self {
        self.inner = self.inner.cloud_front_origin_access_identity_config(input);
        self
    }
    /// <p>The current configuration information for the identity.</p>
    pub fn set_cloud_front_origin_access_identity_config(
        mut self,
        input: std::option::Option<crate::types::CloudFrontOriginAccessIdentityConfig>,
    ) -> Self {
        self.inner = self
            .inner
            .set_cloud_front_origin_access_identity_config(input);
        self
    }
}
