// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_alias::_associate_alias_output::AssociateAliasOutputBuilder;

pub use crate::operation::associate_alias::_associate_alias_input::AssociateAliasInputBuilder;

/// Fluent builder constructing a request to `AssociateAlias`.
///
/// <p>Associates an alias (also known as a CNAME or an alternate domain name) with a CloudFront distribution.</p>
/// <p>With this operation you can move an alias that's already in use on a CloudFront distribution to a different distribution in one step. This prevents the downtime that could occur if you first remove the alias from one distribution and then separately add the alias to another distribution.</p>
/// <p>To use this operation to associate an alias with a distribution, you provide the alias and the ID of the target distribution for the alias. For more information, including how to set up the target distribution, prerequisites that you must complete, and other restrictions, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-move">Moving an alternate domain name to a different distribution</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateAliasFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_alias::builders::AssociateAliasInputBuilder,
}
impl AssociateAliasFluentBuilder {
    /// Creates a new `AssociateAlias`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::associate_alias::AssociateAlias,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::associate_alias::AssociateAliasError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::associate_alias::AssociateAliasOutput,
        aws_smithy_http::result::SdkError<crate::operation::associate_alias::AssociateAliasError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the distribution that you're associating the alias with.</p>
    pub fn target_distribution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_distribution_id(input.into());
        self
    }
    /// <p>The ID of the distribution that you're associating the alias with.</p>
    pub fn set_target_distribution_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_distribution_id(input);
        self
    }
    /// <p>The alias (also known as a CNAME) to add to the target distribution.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alias(input.into());
        self
    }
    /// <p>The alias (also known as a CNAME) to add to the target distribution.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alias(input);
        self
    }
}
