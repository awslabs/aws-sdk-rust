// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublishFunctionInput {
    /// <p>The name of the function that you are publishing.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current version (<code>ETag</code> value) of the function that you are publishing, which you can get using <code>DescribeFunction</code>.</p>
    #[doc(hidden)]
    pub if_match: std::option::Option<std::string::String>,
}
impl PublishFunctionInput {
    /// <p>The name of the function that you are publishing.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current version (<code>ETag</code> value) of the function that you are publishing, which you can get using <code>DescribeFunction</code>.</p>
    pub fn if_match(&self) -> std::option::Option<&str> {
        self.if_match.as_deref()
    }
}
impl PublishFunctionInput {
    /// Creates a new builder-style object to manufacture [`PublishFunctionInput`](crate::operation::publish_function::PublishFunctionInput).
    pub fn builder() -> crate::operation::publish_function::builders::PublishFunctionInputBuilder {
        crate::operation::publish_function::builders::PublishFunctionInputBuilder::default()
    }
}

/// A builder for [`PublishFunctionInput`](crate::operation::publish_function::PublishFunctionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublishFunctionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) if_match: std::option::Option<std::string::String>,
}
impl PublishFunctionInputBuilder {
    /// <p>The name of the function that you are publishing.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the function that you are publishing.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The current version (<code>ETag</code> value) of the function that you are publishing, which you can get using <code>DescribeFunction</code>.</p>
    pub fn if_match(mut self, input: impl Into<std::string::String>) -> Self {
        self.if_match = Some(input.into());
        self
    }
    /// <p>The current version (<code>ETag</code> value) of the function that you are publishing, which you can get using <code>DescribeFunction</code>.</p>
    pub fn set_if_match(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.if_match = input;
        self
    }
    /// Consumes the builder and constructs a [`PublishFunctionInput`](crate::operation::publish_function::PublishFunctionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::publish_function::PublishFunctionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::publish_function::PublishFunctionInput {
            name: self.name,
            if_match: self.if_match,
        })
    }
}
