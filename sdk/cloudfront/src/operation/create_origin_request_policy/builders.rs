// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_origin_request_policy::_create_origin_request_policy_output::CreateOriginRequestPolicyOutputBuilder;

pub use crate::operation::create_origin_request_policy::_create_origin_request_policy_input::CreateOriginRequestPolicyInputBuilder;

/// Fluent builder constructing a request to `CreateOriginRequestPolicy`.
///
/// <p>Creates an origin request policy.</p>
/// <p>After you create an origin request policy, you can attach it to one or more cache behaviors. When it's attached to a cache behavior, the origin request policy determines the values that CloudFront includes in requests that it sends to the origin. Each request that CloudFront sends to the origin includes the following:</p>
/// <ul>
/// <li> <p>The request body and the URL path (without the domain name) from the viewer request.</p> </li>
/// <li> <p>The headers that CloudFront automatically includes in every origin request, including <code>Host</code>, <code>User-Agent</code>, and <code>X-Amz-Cf-Id</code>.</p> </li>
/// <li> <p>All HTTP headers, cookies, and URL query strings that are specified in the cache policy or the origin request policy. These can include items from the viewer request and, in the case of headers, additional ones that are added by CloudFront.</p> </li>
/// </ul>
/// <p>CloudFront sends a request when it can't find a valid object in its cache that matches the request. If you want to send values to the origin and also include them in the cache key, use <code>CachePolicy</code>.</p>
/// <p>For more information about origin request policies, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html">Controlling origin requests</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateOriginRequestPolicyFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_origin_request_policy::builders::CreateOriginRequestPolicyInputBuilder
            }
impl CreateOriginRequestPolicyFluentBuilder {
    /// Creates a new `CreateOriginRequestPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_origin_request_policy::CreateOriginRequestPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_origin_request_policy::CreateOriginRequestPolicyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_origin_request_policy::CreateOriginRequestPolicyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_origin_request_policy::CreateOriginRequestPolicyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>An origin request policy configuration.</p>
    pub fn origin_request_policy_config(
        mut self,
        input: crate::types::OriginRequestPolicyConfig,
    ) -> Self {
        self.inner = self.inner.origin_request_policy_config(input);
        self
    }
    /// <p>An origin request policy configuration.</p>
    pub fn set_origin_request_policy_config(
        mut self,
        input: std::option::Option<crate::types::OriginRequestPolicyConfig>,
    ) -> Self {
        self.inner = self.inner.set_origin_request_policy_config(input);
        self
    }
}
