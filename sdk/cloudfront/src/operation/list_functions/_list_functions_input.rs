// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFunctionsInput {
    /// <p>Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of functions that you want in the response.</p>
    #[doc(hidden)]
    pub max_items: std::option::Option<i32>,
    /// <p>An optional filter to return only the functions that are in the specified stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    #[doc(hidden)]
    pub stage: std::option::Option<crate::types::FunctionStage>,
}
impl ListFunctionsInput {
    /// <p>Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of functions that you want in the response.</p>
    pub fn max_items(&self) -> std::option::Option<i32> {
        self.max_items
    }
    /// <p>An optional filter to return only the functions that are in the specified stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    pub fn stage(&self) -> std::option::Option<&crate::types::FunctionStage> {
        self.stage.as_ref()
    }
}
impl ListFunctionsInput {
    /// Creates a new builder-style object to manufacture [`ListFunctionsInput`](crate::operation::list_functions::ListFunctionsInput).
    pub fn builder() -> crate::operation::list_functions::builders::ListFunctionsInputBuilder {
        crate::operation::list_functions::builders::ListFunctionsInputBuilder::default()
    }
}

/// A builder for [`ListFunctionsInput`](crate::operation::list_functions::ListFunctionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListFunctionsInputBuilder {
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
    pub(crate) stage: std::option::Option<crate::types::FunctionStage>,
}
impl ListFunctionsInputBuilder {
    /// <p>Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>Use this field when paginating results to indicate where to begin in your list of functions. The response includes functions in the list that occur after the marker. To get the next page of the list, set this field's value to the value of <code>NextMarker</code> from the current page's response.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The maximum number of functions that you want in the response.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>The maximum number of functions that you want in the response.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>An optional filter to return only the functions that are in the specified stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    pub fn stage(mut self, input: crate::types::FunctionStage) -> Self {
        self.stage = Some(input);
        self
    }
    /// <p>An optional filter to return only the functions that are in the specified stage, either <code>DEVELOPMENT</code> or <code>LIVE</code>.</p>
    pub fn set_stage(mut self, input: std::option::Option<crate::types::FunctionStage>) -> Self {
        self.stage = input;
        self
    }
    /// Consumes the builder and constructs a [`ListFunctionsInput`](crate::operation::list_functions::ListFunctionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_functions::ListFunctionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_functions::ListFunctionsInput {
            marker: self.marker,
            max_items: self.max_items,
            stage: self.stage,
        })
    }
}
