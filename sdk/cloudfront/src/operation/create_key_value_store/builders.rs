// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_key_value_store::_create_key_value_store_output::CreateKeyValueStoreOutputBuilder;

pub use crate::operation::create_key_value_store::_create_key_value_store_input::CreateKeyValueStoreInputBuilder;

impl crate::operation::create_key_value_store::builders::CreateKeyValueStoreInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_key_value_store::CreateKeyValueStoreOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_key_value_store::CreateKeyValueStoreError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_key_value_store();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateKeyValueStore`.
///
/// <p>Specifies the key value store resource to add to your account. In your account, the key value store names must be unique. You can also import key value store data in JSON format from an S3 bucket by providing a valid <code>ImportSource</code> that you own.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateKeyValueStoreFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_key_value_store::builders::CreateKeyValueStoreInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_key_value_store::CreateKeyValueStoreOutput,
        crate::operation::create_key_value_store::CreateKeyValueStoreError,
    > for CreateKeyValueStoreFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_key_value_store::CreateKeyValueStoreOutput,
            crate::operation::create_key_value_store::CreateKeyValueStoreError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateKeyValueStoreFluentBuilder {
    /// Creates a new `CreateKeyValueStore`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateKeyValueStore as a reference.
    pub fn as_input(&self) -> &crate::operation::create_key_value_store::builders::CreateKeyValueStoreInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_key_value_store::CreateKeyValueStoreOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_key_value_store::CreateKeyValueStoreError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_key_value_store::CreateKeyValueStore::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_key_value_store::CreateKeyValueStore::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_key_value_store::CreateKeyValueStoreOutput,
        crate::operation::create_key_value_store::CreateKeyValueStoreError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the key value store. The minimum length is 1 character and the maximum length is 64 characters.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the key value store. The minimum length is 1 character and the maximum length is 64 characters.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the key value store. The minimum length is 1 character and the maximum length is 64 characters.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The comment of the key value store.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.comment(input.into());
        self
    }
    /// <p>The comment of the key value store.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_comment(input);
        self
    }
    /// <p>The comment of the key value store.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_comment()
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn import_source(mut self, input: crate::types::ImportSource) -> Self {
        self.inner = self.inner.import_source(input);
        self
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn set_import_source(mut self, input: ::std::option::Option<crate::types::ImportSource>) -> Self {
        self.inner = self.inner.set_import_source(input);
        self
    }
    /// <p>The S3 bucket that provides the source for the import. The source must be in a valid JSON format.</p>
    pub fn get_import_source(&self) -> &::std::option::Option<crate::types::ImportSource> {
        self.inner.get_import_source()
    }
}
