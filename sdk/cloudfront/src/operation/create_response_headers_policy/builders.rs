// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_response_headers_policy::_create_response_headers_policy_output::CreateResponseHeadersPolicyOutputBuilder;

pub use crate::operation::create_response_headers_policy::_create_response_headers_policy_input::CreateResponseHeadersPolicyInputBuilder;

impl CreateResponseHeadersPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_response_headers_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateResponseHeadersPolicy`.
///
/// <p>Creates a response headers policy.</p>
/// <p>A response headers policy contains information about a set of HTTP headers. To create a response headers policy, you provide some metadata about the policy and a set of configurations that specify the headers.</p>
/// <p>After you create a response headers policy, you can use its ID to attach it to one or more cache behaviors in a CloudFront distribution. When it's attached to a cache behavior, the response headers policy affects the HTTP headers that CloudFront includes in HTTP responses to requests that match the cache behavior. CloudFront adds or removes response headers according to the configuration of the response headers policy.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/modifying-response-headers.html">Adding or removing HTTP headers in CloudFront responses</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateResponseHeadersPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_response_headers_policy::builders::CreateResponseHeadersPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
    > for CreateResponseHeadersPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateResponseHeadersPolicyFluentBuilder {
    /// Creates a new `CreateResponseHeadersPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateResponseHeadersPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::create_response_headers_policy::builders::CreateResponseHeadersPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_response_headers_policy::CreateResponseHeadersPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
        crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Contains metadata about the response headers policy, and a set of configurations that specify the HTTP headers.</p>
    pub fn response_headers_policy_config(mut self, input: crate::types::ResponseHeadersPolicyConfig) -> Self {
        self.inner = self.inner.response_headers_policy_config(input);
        self
    }
    /// <p>Contains metadata about the response headers policy, and a set of configurations that specify the HTTP headers.</p>
    pub fn set_response_headers_policy_config(mut self, input: ::std::option::Option<crate::types::ResponseHeadersPolicyConfig>) -> Self {
        self.inner = self.inner.set_response_headers_policy_config(input);
        self
    }
    /// <p>Contains metadata about the response headers policy, and a set of configurations that specify the HTTP headers.</p>
    pub fn get_response_headers_policy_config(&self) -> &::std::option::Option<crate::types::ResponseHeadersPolicyConfig> {
        self.inner.get_response_headers_policy_config()
    }
}
