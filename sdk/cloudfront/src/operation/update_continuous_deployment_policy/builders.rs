// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_continuous_deployment_policy::_update_continuous_deployment_policy_output::UpdateContinuousDeploymentPolicyOutputBuilder;

pub use crate::operation::update_continuous_deployment_policy::_update_continuous_deployment_policy_input::UpdateContinuousDeploymentPolicyInputBuilder;

impl crate::operation::update_continuous_deployment_policy::builders::UpdateContinuousDeploymentPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_continuous_deployment_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateContinuousDeploymentPolicy`.
///
/// <p>Updates a continuous deployment policy. You can update a continuous deployment policy to enable or disable it, to change the percentage of traffic that it sends to the staging distribution, or to change the staging distribution that it sends traffic to.</p>
/// <p>When you update a continuous deployment policy configuration, all the fields are updated with the values that are provided in the request. You cannot update some fields independent of others. To update a continuous deployment policy configuration:</p>
/// <ol>
/// <li>
/// <p>Use <code>GetContinuousDeploymentPolicyConfig</code> to get the current configuration.</p></li>
/// <li>
/// <p>Locally modify the fields in the continuous deployment policy configuration that you want to update.</p></li>
/// <li>
/// <p>Use <code>UpdateContinuousDeploymentPolicy</code>, providing the entire continuous deployment policy configuration, including the fields that you modified and those that you didn't.</p></li>
/// </ol>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateContinuousDeploymentPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_continuous_deployment_policy::builders::UpdateContinuousDeploymentPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyOutput,
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyError,
    > for UpdateContinuousDeploymentPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyOutput,
            crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateContinuousDeploymentPolicyFluentBuilder {
    /// Creates a new `UpdateContinuousDeploymentPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateContinuousDeploymentPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::update_continuous_deployment_policy::builders::UpdateContinuousDeploymentPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyOutput,
        crate::operation::update_continuous_deployment_policy::UpdateContinuousDeploymentPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The continuous deployment policy configuration.</p>
    pub fn continuous_deployment_policy_config(mut self, input: crate::types::ContinuousDeploymentPolicyConfig) -> Self {
        self.inner = self.inner.continuous_deployment_policy_config(input);
        self
    }
    /// <p>The continuous deployment policy configuration.</p>
    pub fn set_continuous_deployment_policy_config(mut self, input: ::std::option::Option<crate::types::ContinuousDeploymentPolicyConfig>) -> Self {
        self.inner = self.inner.set_continuous_deployment_policy_config(input);
        self
    }
    /// <p>The continuous deployment policy configuration.</p>
    pub fn get_continuous_deployment_policy_config(&self) -> &::std::option::Option<crate::types::ContinuousDeploymentPolicyConfig> {
        self.inner.get_continuous_deployment_policy_config()
    }
    /// <p>The identifier of the continuous deployment policy that you are updating.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The identifier of the continuous deployment policy that you are updating.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The identifier of the continuous deployment policy that you are updating.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_id()
    }
    /// <p>The current version (<code>ETag</code> value) of the continuous deployment policy that you are updating.</p>
    pub fn if_match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.if_match(input.into());
        self
    }
    /// <p>The current version (<code>ETag</code> value) of the continuous deployment policy that you are updating.</p>
    pub fn set_if_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_if_match(input);
        self
    }
    /// <p>The current version (<code>ETag</code> value) of the continuous deployment policy that you are updating.</p>
    pub fn get_if_match(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_if_match()
    }
}
