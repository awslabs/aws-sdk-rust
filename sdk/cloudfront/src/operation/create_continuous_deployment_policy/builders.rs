// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_continuous_deployment_policy::_create_continuous_deployment_policy_output::CreateContinuousDeploymentPolicyOutputBuilder;

pub use crate::operation::create_continuous_deployment_policy::_create_continuous_deployment_policy_input::CreateContinuousDeploymentPolicyInputBuilder;

/// Fluent builder constructing a request to `CreateContinuousDeploymentPolicy`.
///
/// <p>Creates a continuous deployment policy that distributes traffic for a custom domain name to two different CloudFront distributions.</p>
/// <p>To use a continuous deployment policy, first use <code>CopyDistribution</code> to create a staging distribution, then use <code>UpdateDistribution</code> to modify the staging distribution's configuration.</p>
/// <p>After you create and update a staging distribution, you can use a continuous deployment policy to incrementally move traffic to the staging distribution. This workflow enables you to test changes to a distribution's configuration before moving all of your domain's production traffic to the new configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateContinuousDeploymentPolicyFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_continuous_deployment_policy::builders::CreateContinuousDeploymentPolicyInputBuilder
            }
impl CreateContinuousDeploymentPolicyFluentBuilder {
    /// Creates a new `CreateContinuousDeploymentPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_continuous_deployment_policy::CreateContinuousDeploymentPolicy, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_continuous_deployment_policy::CreateContinuousDeploymentPolicyError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_continuous_deployment_policy::CreateContinuousDeploymentPolicyOutput, aws_smithy_http::result::SdkError<crate::operation::create_continuous_deployment_policy::CreateContinuousDeploymentPolicyError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Contains the configuration for a continuous deployment policy.</p>
    pub fn continuous_deployment_policy_config(
        mut self,
        input: crate::types::ContinuousDeploymentPolicyConfig,
    ) -> Self {
        self.inner = self.inner.continuous_deployment_policy_config(input);
        self
    }
    /// <p>Contains the configuration for a continuous deployment policy.</p>
    pub fn set_continuous_deployment_policy_config(
        mut self,
        input: std::option::Option<crate::types::ContinuousDeploymentPolicyConfig>,
    ) -> Self {
        self.inner = self.inner.set_continuous_deployment_policy_config(input);
        self
    }
}
