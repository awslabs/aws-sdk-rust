// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_continuous_deployment_policy_config(
    input: &crate::types::ContinuousDeploymentPolicyConfig,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.staging_distribution_dns_names {
        let inner_writer = scope.start_el("StagingDistributionDnsNames");
        crate::protocol_serde::shape_staging_distribution_dns_names::ser_staging_distribution_dns_names(var_1, inner_writer)?
    }
    if let Some(var_2) = &input.enabled {
        let mut inner_writer = scope.start_el("Enabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_2).encode());
    }
    if let Some(var_3) = &input.traffic_config {
        let inner_writer = scope.start_el("TrafficConfig");
        crate::protocol_serde::shape_traffic_config::ser_traffic_config(var_3, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn de_continuous_deployment_policy_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ContinuousDeploymentPolicyConfig, aws_smithy_xml::decode::XmlDecodeError>
{
    #[allow(unused_mut)]
    let mut builder = crate::types::ContinuousDeploymentPolicyConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StagingDistributionDnsNames") /* StagingDistributionDnsNames com.amazonaws.cloudfront#ContinuousDeploymentPolicyConfig$StagingDistributionDnsNames */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_staging_distribution_dns_names::de_staging_distribution_dns_names(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_staging_distribution_dns_names(var_4);
            }
            ,
            s if s.matches("Enabled") /* Enabled com.amazonaws.cloudfront#ContinuousDeploymentPolicyConfig$Enabled */ =>  {
                let var_5 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.cloudfront#boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_5);
            }
            ,
            s if s.matches("TrafficConfig") /* TrafficConfig com.amazonaws.cloudfront#ContinuousDeploymentPolicyConfig$TrafficConfig */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_traffic_config::de_traffic_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_traffic_config(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
