// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_traffic_config(
    input: &crate::types::TrafficConfig,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.single_weight_config {
        let inner_writer = scope.start_el("SingleWeightConfig");
        crate::protocol_serde::shape_continuous_deployment_single_weight_config::ser_continuous_deployment_single_weight_config(var_1, inner_writer)?
    }
    if let Some(var_2) = &input.single_header_config {
        let inner_writer = scope.start_el("SingleHeaderConfig");
        crate::protocol_serde::shape_continuous_deployment_single_header_config::ser_continuous_deployment_single_header_config(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.r#type {
        let mut inner_writer = scope.start_el("Type").finish();
        inner_writer.data(var_3.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn de_traffic_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TrafficConfig, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TrafficConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SingleWeightConfig") /* SingleWeightConfig com.amazonaws.cloudfront#TrafficConfig$SingleWeightConfig */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_continuous_deployment_single_weight_config::de_continuous_deployment_single_weight_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_single_weight_config(var_4);
            }
            ,
            s if s.matches("SingleHeaderConfig") /* SingleHeaderConfig com.amazonaws.cloudfront#TrafficConfig$SingleHeaderConfig */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_continuous_deployment_single_header_config::de_continuous_deployment_single_header_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_single_header_config(var_5);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.cloudfront#TrafficConfig$Type */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::ContinuousDeploymentPolicyType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ContinuousDeploymentPolicyType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
