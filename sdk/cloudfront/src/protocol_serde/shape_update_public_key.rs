// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_public_key_headers(
    input: &crate::operation::update_public_key::UpdatePublicKeyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.if_match {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "if_match",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("If-Match", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_public_key_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::update_public_key::UpdatePublicKeyOutput,
    crate::operation::update_public_key::UpdatePublicKeyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::update_public_key::UpdatePublicKeyError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDenied" => crate::operation::update_public_key::UpdatePublicKeyError::AccessDenied({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccessDeniedBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_access_denied::de_access_denied_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "CannotChangeImmutablePublicKeyFields" => crate::operation::update_public_key::UpdatePublicKeyError::CannotChangeImmutablePublicKeyFields({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CannotChangeImmutablePublicKeyFieldsBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_cannot_change_immutable_public_key_fields::de_cannot_change_immutable_public_key_fields_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "IllegalUpdate" => crate::operation::update_public_key::UpdatePublicKeyError::IllegalUpdate({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IllegalUpdateBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_illegal_update::de_illegal_update_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidArgument" => crate::operation::update_public_key::UpdatePublicKeyError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidArgumentBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidIfMatchVersion" => crate::operation::update_public_key::UpdatePublicKeyError::InvalidIfMatchVersion({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidIfMatchVersionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_if_match_version::de_invalid_if_match_version_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NoSuchPublicKey" => crate::operation::update_public_key::UpdatePublicKeyError::NoSuchPublicKey({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NoSuchPublicKeyBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_no_such_public_key::de_no_such_public_key_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "PreconditionFailed" => crate::operation::update_public_key::UpdatePublicKeyError::PreconditionFailed({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PreconditionFailedBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_precondition_failed::de_precondition_failed_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_public_key::UpdatePublicKeyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::update_public_key::UpdatePublicKeyError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_public_key_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::update_public_key::UpdatePublicKeyOutput,
    crate::operation::update_public_key::UpdatePublicKeyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::update_public_key::builders::UpdatePublicKeyOutputBuilder::default();
        let _ = response;
        output = output.set_e_tag(
            crate::protocol_serde::shape_update_public_key_output::de_e_tag_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::update_public_key::UpdatePublicKeyError::unhandled(
                    "Failed to parse ETag from header `ETag",
                )
            })?,
        );
        output = output.set_public_key(
            crate::protocol_serde::shape_update_public_key_output::de_public_key_payload(
                response.body().as_ref(),
            )?,
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
