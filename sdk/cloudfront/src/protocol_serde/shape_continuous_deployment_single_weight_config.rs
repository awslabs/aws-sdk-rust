// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_continuous_deployment_single_weight_config(
    input: &crate::types::ContinuousDeploymentSingleWeightConfig,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.weight {
        let mut inner_writer = scope.start_el("Weight").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_1).encode());
    }
    if let Some(var_2) = &input.session_stickiness_config {
        let inner_writer = scope.start_el("SessionStickinessConfig");
        crate::protocol_serde::shape_session_stickiness_config::ser_session_stickiness_config(
            var_2,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn de_continuous_deployment_single_weight_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::types::ContinuousDeploymentSingleWeightConfig,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ContinuousDeploymentSingleWeightConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Weight") /* Weight com.amazonaws.cloudfront#ContinuousDeploymentSingleWeightConfig$Weight */ =>  {
                let var_3 =
                    Some(
                         {
                            <f32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (float: `com.amazonaws.cloudfront#float`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_weight(var_3);
            }
            ,
            s if s.matches("SessionStickinessConfig") /* SessionStickinessConfig com.amazonaws.cloudfront#ContinuousDeploymentSingleWeightConfig$SessionStickinessConfig */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_session_stickiness_config::de_session_stickiness_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_session_stickiness_config(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
