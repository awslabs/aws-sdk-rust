// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_response_headers_policy_security_headers_config(
    input: &crate::types::ResponseHeadersPolicySecurityHeadersConfig,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.xss_protection {
        let inner_writer = scope.start_el("XSSProtection");
        crate::protocol_serde::shape_response_headers_policy_xss_protection::ser_response_headers_policy_xss_protection(var_1, inner_writer)?
    }
    if let Some(var_2) = &input.frame_options {
        let inner_writer = scope.start_el("FrameOptions");
        crate::protocol_serde::shape_response_headers_policy_frame_options::ser_response_headers_policy_frame_options(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.referrer_policy {
        let inner_writer = scope.start_el("ReferrerPolicy");
        crate::protocol_serde::shape_response_headers_policy_referrer_policy::ser_response_headers_policy_referrer_policy(var_3, inner_writer)?
    }
    if let Some(var_4) = &input.content_security_policy {
        let inner_writer = scope.start_el("ContentSecurityPolicy");
        crate::protocol_serde::shape_response_headers_policy_content_security_policy::ser_response_headers_policy_content_security_policy(
            var_4,
            inner_writer,
        )?
    }
    if let Some(var_5) = &input.content_type_options {
        let inner_writer = scope.start_el("ContentTypeOptions");
        crate::protocol_serde::shape_response_headers_policy_content_type_options::ser_response_headers_policy_content_type_options(
            var_5,
            inner_writer,
        )?
    }
    if let Some(var_6) = &input.strict_transport_security {
        let inner_writer = scope.start_el("StrictTransportSecurity");
        crate::protocol_serde::shape_response_headers_policy_strict_transport_security::ser_response_headers_policy_strict_transport_security(
            var_6,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_response_headers_policy_security_headers_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ResponseHeadersPolicySecurityHeadersConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ResponseHeadersPolicySecurityHeadersConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("XSSProtection") /* XSSProtection com.amazonaws.cloudfront#ResponseHeadersPolicySecurityHeadersConfig$XSSProtection */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_xss_protection::de_response_headers_policy_xss_protection(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_xss_protection(var_7);
            }
            ,
            s if s.matches("FrameOptions") /* FrameOptions com.amazonaws.cloudfront#ResponseHeadersPolicySecurityHeadersConfig$FrameOptions */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_frame_options::de_response_headers_policy_frame_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_frame_options(var_8);
            }
            ,
            s if s.matches("ReferrerPolicy") /* ReferrerPolicy com.amazonaws.cloudfront#ResponseHeadersPolicySecurityHeadersConfig$ReferrerPolicy */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_referrer_policy::de_response_headers_policy_referrer_policy(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_referrer_policy(var_9);
            }
            ,
            s if s.matches("ContentSecurityPolicy") /* ContentSecurityPolicy com.amazonaws.cloudfront#ResponseHeadersPolicySecurityHeadersConfig$ContentSecurityPolicy */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_content_security_policy::de_response_headers_policy_content_security_policy(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_content_security_policy(var_10);
            }
            ,
            s if s.matches("ContentTypeOptions") /* ContentTypeOptions com.amazonaws.cloudfront#ResponseHeadersPolicySecurityHeadersConfig$ContentTypeOptions */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_content_type_options::de_response_headers_policy_content_type_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_content_type_options(var_11);
            }
            ,
            s if s.matches("StrictTransportSecurity") /* StrictTransportSecurity com.amazonaws.cloudfront#ResponseHeadersPolicySecurityHeadersConfig$StrictTransportSecurity */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_strict_transport_security::de_response_headers_policy_strict_transport_security(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_strict_transport_security(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
