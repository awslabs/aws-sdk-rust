// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_distribution_tenants_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::list_distribution_tenants::ListDistributionTenantsOutput,
    crate::operation::list_distribution_tenants::ListDistributionTenantsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::list_distribution_tenants::ListDistributionTenantsError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::list_distribution_tenants::ListDistributionTenantsError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDenied" => crate::operation::list_distribution_tenants::ListDistributionTenantsError::AccessDenied({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedBuilder::default();
                output = crate::protocol_serde::shape_access_denied::de_access_denied_xml_err(_response_body, output)
                    .map_err(crate::operation::list_distribution_tenants::ListDistributionTenantsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityNotFound" => crate::operation::list_distribution_tenants::ListDistributionTenantsError::EntityNotFound({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityNotFoundBuilder::default();
                output = crate::protocol_serde::shape_entity_not_found::de_entity_not_found_xml_err(_response_body, output)
                    .map_err(crate::operation::list_distribution_tenants::ListDistributionTenantsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgument" => crate::operation::list_distribution_tenants::ListDistributionTenantsError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(_response_body, output)
                    .map_err(crate::operation::list_distribution_tenants::ListDistributionTenantsError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::list_distribution_tenants::ListDistributionTenantsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_distribution_tenants_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::list_distribution_tenants::ListDistributionTenantsOutput,
    crate::operation::list_distribution_tenants::ListDistributionTenantsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::list_distribution_tenants::builders::ListDistributionTenantsOutputBuilder::default();
        output = crate::protocol_serde::shape_list_distribution_tenants::de_list_distribution_tenants(_response_body, output)
            .map_err(crate::operation::list_distribution_tenants::ListDistributionTenantsError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_list_distribution_tenants_op_input(
    input: &crate::operation::list_distribution_tenants::ListDistributionTenantsInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = ::aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("ListDistributionTenantsRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::protocol_serde::shape_list_distribution_tenants_input::ser_list_distribution_tenants_input_input_input(input, root)?
    }
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

#[allow(unused_mut)]
pub fn de_list_distribution_tenants(
    inp: &[u8],
    mut builder: crate::operation::list_distribution_tenants::builders::ListDistributionTenantsOutputBuilder,
) -> std::result::Result<
    crate::operation::list_distribution_tenants::builders::ListDistributionTenantsOutputBuilder,
    ::aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("ListDistributionTenantsResult") {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "encountered invalid XML root: expected ListDistributionTenantsResult but got {start_el:?}. This is likely a bug in the SDK."
        )));
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DistributionTenantList") /* DistributionTenantList com.amazonaws.cloudfront.synthetic#ListDistributionTenantsOutput$DistributionTenantList */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_distribution_tenant_list::de_distribution_tenant_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_distribution_tenant_list(var_1);
            }
            ,
            s if s.matches("NextMarker") /* NextMarker com.amazonaws.cloudfront.synthetic#ListDistributionTenantsOutput$NextMarker */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_marker(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
