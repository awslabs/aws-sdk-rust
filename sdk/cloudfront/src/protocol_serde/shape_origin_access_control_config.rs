// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_origin_access_control_config(
    input: &crate::types::OriginAccessControlConfig,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(input.name.as_str());
    }
    if let Some(var_1) = &input.description {
        let mut inner_writer = scope.start_el("Description").finish();
        inner_writer.data(var_1.as_str());
    }
    {
        let mut inner_writer = scope.start_el("SigningProtocol").finish();
        inner_writer.data(input.signing_protocol.as_str());
    }
    {
        let mut inner_writer = scope.start_el("SigningBehavior").finish();
        inner_writer.data(input.signing_behavior.as_str());
    }
    {
        let mut inner_writer = scope.start_el("OriginAccessControlOriginType").finish();
        inner_writer.data(input.origin_access_control_origin_type.as_str());
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_origin_access_control_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::OriginAccessControlConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::OriginAccessControlConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.cloudfront#OriginAccessControlConfig$Name */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudfront#OriginAccessControlConfig$Description */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_3);
            }
            ,
            s if s.matches("SigningProtocol") /* SigningProtocol com.amazonaws.cloudfront#OriginAccessControlConfig$SigningProtocol */ =>  {
                let var_4 =
                    Some(
                        Result::<crate::types::OriginAccessControlSigningProtocols, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::OriginAccessControlSigningProtocols::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_signing_protocol(var_4);
            }
            ,
            s if s.matches("SigningBehavior") /* SigningBehavior com.amazonaws.cloudfront#OriginAccessControlConfig$SigningBehavior */ =>  {
                let var_5 =
                    Some(
                        Result::<crate::types::OriginAccessControlSigningBehaviors, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::OriginAccessControlSigningBehaviors::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_signing_behavior(var_5);
            }
            ,
            s if s.matches("OriginAccessControlOriginType") /* OriginAccessControlOriginType com.amazonaws.cloudfront#OriginAccessControlConfig$OriginAccessControlOriginType */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::OriginAccessControlOriginTypes, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::OriginAccessControlOriginTypes::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_origin_access_control_origin_type(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::origin_access_control_config_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
