// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cookie_preference(
    input: &crate::types::CookiePreference,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.forward {
        let mut inner_writer = scope.start_el("Forward").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.whitelisted_names {
        let inner_writer = scope.start_el("WhitelistedNames");
        crate::protocol_serde::shape_cookie_names::ser_cookie_names(var_2, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn de_cookie_preference(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CookiePreference, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CookiePreference::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Forward") /* Forward com.amazonaws.cloudfront#CookiePreference$Forward */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::ItemSelection, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::ItemSelection::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_forward(var_3);
            }
            ,
            s if s.matches("WhitelistedNames") /* WhitelistedNames com.amazonaws.cloudfront#CookiePreference$WhitelistedNames */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_cookie_names::de_cookie_names(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_whitelisted_names(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
