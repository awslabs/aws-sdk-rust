// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_key_group_config(
    input: &crate::types::KeyGroupConfig,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.items {
        let mut inner_writer = scope.start_el("Items").finish();
        for list_item_3 in var_2 {
            {
                let mut inner_writer = inner_writer.start_el("PublicKey").finish();
                inner_writer.data(list_item_3.as_str());
            }
        }
    }
    if let Some(var_4) = &input.comment {
        let mut inner_writer = scope.start_el("Comment").finish();
        inner_writer.data(var_4.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn de_key_group_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::KeyGroupConfig, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::KeyGroupConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.cloudfront#KeyGroupConfig$Name */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_5);
            }
            ,
            s if s.matches("Items") /* Items com.amazonaws.cloudfront#KeyGroupConfig$Items */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_public_key_id_list::de_public_key_id_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_items(var_6);
            }
            ,
            s if s.matches("Comment") /* Comment com.amazonaws.cloudfront#KeyGroupConfig$Comment */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_comment(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
