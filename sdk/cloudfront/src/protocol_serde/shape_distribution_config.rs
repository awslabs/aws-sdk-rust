// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_distribution_config(
    input: &crate::types::DistributionConfig,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.caller_reference {
        let mut inner_writer = scope.start_el("CallerReference").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.aliases {
        let inner_writer = scope.start_el("Aliases");
        crate::protocol_serde::shape_aliases::ser_aliases(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.default_root_object {
        let mut inner_writer = scope.start_el("DefaultRootObject").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.origins {
        let inner_writer = scope.start_el("Origins");
        crate::protocol_serde::shape_origins::ser_origins(var_4, inner_writer)?
    }
    if let Some(var_5) = &input.origin_groups {
        let inner_writer = scope.start_el("OriginGroups");
        crate::protocol_serde::shape_origin_groups::ser_origin_groups(var_5, inner_writer)?
    }
    if let Some(var_6) = &input.default_cache_behavior {
        let inner_writer = scope.start_el("DefaultCacheBehavior");
        crate::protocol_serde::shape_default_cache_behavior::ser_default_cache_behavior(
            var_6,
            inner_writer,
        )?
    }
    if let Some(var_7) = &input.cache_behaviors {
        let inner_writer = scope.start_el("CacheBehaviors");
        crate::protocol_serde::shape_cache_behaviors::ser_cache_behaviors(var_7, inner_writer)?
    }
    if let Some(var_8) = &input.custom_error_responses {
        let inner_writer = scope.start_el("CustomErrorResponses");
        crate::protocol_serde::shape_custom_error_responses::ser_custom_error_responses(
            var_8,
            inner_writer,
        )?
    }
    if let Some(var_9) = &input.comment {
        let mut inner_writer = scope.start_el("Comment").finish();
        inner_writer.data(var_9.as_str());
    }
    if let Some(var_10) = &input.logging {
        let inner_writer = scope.start_el("Logging");
        crate::protocol_serde::shape_logging_config::ser_logging_config(var_10, inner_writer)?
    }
    if let Some(var_11) = &input.price_class {
        let mut inner_writer = scope.start_el("PriceClass").finish();
        inner_writer.data(var_11.as_str());
    }
    if let Some(var_12) = &input.enabled {
        let mut inner_writer = scope.start_el("Enabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_12).encode());
    }
    if let Some(var_13) = &input.viewer_certificate {
        let inner_writer = scope.start_el("ViewerCertificate");
        crate::protocol_serde::shape_viewer_certificate::ser_viewer_certificate(
            var_13,
            inner_writer,
        )?
    }
    if let Some(var_14) = &input.restrictions {
        let inner_writer = scope.start_el("Restrictions");
        crate::protocol_serde::shape_restrictions::ser_restrictions(var_14, inner_writer)?
    }
    if let Some(var_15) = &input.web_acl_id {
        let mut inner_writer = scope.start_el("WebACLId").finish();
        inner_writer.data(var_15.as_str());
    }
    if let Some(var_16) = &input.http_version {
        let mut inner_writer = scope.start_el("HttpVersion").finish();
        inner_writer.data(var_16.as_str());
    }
    if let Some(var_17) = &input.is_ipv6_enabled {
        let mut inner_writer = scope.start_el("IsIPV6Enabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_17).encode());
    }
    if let Some(var_18) = &input.continuous_deployment_policy_id {
        let mut inner_writer = scope.start_el("ContinuousDeploymentPolicyId").finish();
        inner_writer.data(var_18.as_str());
    }
    if let Some(var_19) = &input.staging {
        let mut inner_writer = scope.start_el("Staging").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_19).encode());
    }
    scope.finish();
    Ok(())
}

pub fn de_distribution_config(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::DistributionConfig, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::DistributionConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CallerReference") /* CallerReference com.amazonaws.cloudfront#DistributionConfig$CallerReference */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_caller_reference(var_20);
            }
            ,
            s if s.matches("Aliases") /* Aliases com.amazonaws.cloudfront#DistributionConfig$Aliases */ =>  {
                let var_21 =
                    Some(
                        crate::protocol_serde::shape_aliases::de_aliases(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_aliases(var_21);
            }
            ,
            s if s.matches("DefaultRootObject") /* DefaultRootObject com.amazonaws.cloudfront#DistributionConfig$DefaultRootObject */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_default_root_object(var_22);
            }
            ,
            s if s.matches("Origins") /* Origins com.amazonaws.cloudfront#DistributionConfig$Origins */ =>  {
                let var_23 =
                    Some(
                        crate::protocol_serde::shape_origins::de_origins(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_origins(var_23);
            }
            ,
            s if s.matches("OriginGroups") /* OriginGroups com.amazonaws.cloudfront#DistributionConfig$OriginGroups */ =>  {
                let var_24 =
                    Some(
                        crate::protocol_serde::shape_origin_groups::de_origin_groups(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_origin_groups(var_24);
            }
            ,
            s if s.matches("DefaultCacheBehavior") /* DefaultCacheBehavior com.amazonaws.cloudfront#DistributionConfig$DefaultCacheBehavior */ =>  {
                let var_25 =
                    Some(
                        crate::protocol_serde::shape_default_cache_behavior::de_default_cache_behavior(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_default_cache_behavior(var_25);
            }
            ,
            s if s.matches("CacheBehaviors") /* CacheBehaviors com.amazonaws.cloudfront#DistributionConfig$CacheBehaviors */ =>  {
                let var_26 =
                    Some(
                        crate::protocol_serde::shape_cache_behaviors::de_cache_behaviors(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cache_behaviors(var_26);
            }
            ,
            s if s.matches("CustomErrorResponses") /* CustomErrorResponses com.amazonaws.cloudfront#DistributionConfig$CustomErrorResponses */ =>  {
                let var_27 =
                    Some(
                        crate::protocol_serde::shape_custom_error_responses::de_custom_error_responses(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_custom_error_responses(var_27);
            }
            ,
            s if s.matches("Comment") /* Comment com.amazonaws.cloudfront#DistributionConfig$Comment */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_comment(var_28);
            }
            ,
            s if s.matches("Logging") /* Logging com.amazonaws.cloudfront#DistributionConfig$Logging */ =>  {
                let var_29 =
                    Some(
                        crate::protocol_serde::shape_logging_config::de_logging_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_logging(var_29);
            }
            ,
            s if s.matches("PriceClass") /* PriceClass com.amazonaws.cloudfront#DistributionConfig$PriceClass */ =>  {
                let var_30 =
                    Some(
                        Result::<crate::types::PriceClass, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PriceClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_price_class(var_30);
            }
            ,
            s if s.matches("Enabled") /* Enabled com.amazonaws.cloudfront#DistributionConfig$Enabled */ =>  {
                let var_31 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.cloudfront#boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_31);
            }
            ,
            s if s.matches("ViewerCertificate") /* ViewerCertificate com.amazonaws.cloudfront#DistributionConfig$ViewerCertificate */ =>  {
                let var_32 =
                    Some(
                        crate::protocol_serde::shape_viewer_certificate::de_viewer_certificate(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_viewer_certificate(var_32);
            }
            ,
            s if s.matches("Restrictions") /* Restrictions com.amazonaws.cloudfront#DistributionConfig$Restrictions */ =>  {
                let var_33 =
                    Some(
                        crate::protocol_serde::shape_restrictions::de_restrictions(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_restrictions(var_33);
            }
            ,
            s if s.matches("WebACLId") /* WebACLId com.amazonaws.cloudfront#DistributionConfig$WebACLId */ =>  {
                let var_34 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_web_acl_id(var_34);
            }
            ,
            s if s.matches("HttpVersion") /* HttpVersion com.amazonaws.cloudfront#DistributionConfig$HttpVersion */ =>  {
                let var_35 =
                    Some(
                        Result::<crate::types::HttpVersion, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::HttpVersion::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_version(var_35);
            }
            ,
            s if s.matches("IsIPV6Enabled") /* IsIPV6Enabled com.amazonaws.cloudfront#DistributionConfig$IsIPV6Enabled */ =>  {
                let var_36 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.cloudfront#boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_ipv6_enabled(var_36);
            }
            ,
            s if s.matches("ContinuousDeploymentPolicyId") /* ContinuousDeploymentPolicyId com.amazonaws.cloudfront#DistributionConfig$ContinuousDeploymentPolicyId */ =>  {
                let var_37 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_continuous_deployment_policy_id(var_37);
            }
            ,
            s if s.matches("Staging") /* Staging com.amazonaws.cloudfront#DistributionConfig$Staging */ =>  {
                let var_38 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.cloudfront#boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_staging(var_38);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
