// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_connection_group_payload(
    body: &[u8],
) -> std::result::Result<::std::option::Option<crate::types::ConnectionGroup>, crate::operation::create_connection_group::CreateConnectionGroupError>
{
    (!body.is_empty())
        .then(|| {
            crate::protocol_serde::shape_create_connection_group_output::de_connection_group(body)
                .map_err(crate::operation::create_connection_group::CreateConnectionGroupError::unhandled)
        })
        .transpose()
}

pub(crate) fn de_e_tag_header(
    header_map: &::aws_smithy_runtime_api::http::Headers,
) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("ETag");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub fn de_connection_group(inp: &[u8]) -> std::result::Result<crate::types::ConnectionGroup, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = ::aws_smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ConnectionGroup")) {
        return Err(::aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected ConnectionGroup got {start_el:?}"
        )));
    }
    crate::protocol_serde::shape_connection_group::de_connection_group(&mut decoder)
}
