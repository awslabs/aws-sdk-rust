// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_streaming_distribution_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_streaming_distribution::CreateStreamingDistributionOutput,
    crate::operation::create_streaming_distribution::CreateStreamingDistributionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDenied" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::AccessDenied({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccessDeniedBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_access_denied::de_access_denied_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "CNAMEAlreadyExists" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::CnameAlreadyExists({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CnameAlreadyExistsBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_cname_already_exists::de_cname_already_exists_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InconsistentQuantities" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::InconsistentQuantities({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InconsistentQuantitiesBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_inconsistent_quantities::de_inconsistent_quantities_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidArgument" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidArgumentBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidOrigin" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::InvalidOrigin({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidOriginBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_origin::de_invalid_origin_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidOriginAccessControl" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::InvalidOriginAccessControl({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidOriginAccessControlBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_origin_access_control::de_invalid_origin_access_control_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidOriginAccessIdentity" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::InvalidOriginAccessIdentity({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidOriginAccessIdentityBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_origin_access_identity::de_invalid_origin_access_identity_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "MissingBody" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::MissingBody({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MissingBodyBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_missing_body::de_missing_body_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "StreamingDistributionAlreadyExists" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::StreamingDistributionAlreadyExists({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::StreamingDistributionAlreadyExistsBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_streaming_distribution_already_exists::de_streaming_distribution_already_exists_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyStreamingDistributionCNAMEs" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::TooManyStreamingDistributionCnamEs({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyStreamingDistributionCnamEsBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_streaming_distribution_cnam_es::de_too_many_streaming_distribution_cnam_es_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyStreamingDistributions" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::TooManyStreamingDistributions({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyStreamingDistributionsBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_streaming_distributions::de_too_many_streaming_distributions_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TooManyTrustedSigners" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::TooManyTrustedSigners({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyTrustedSignersBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_trusted_signers::de_too_many_trusted_signers_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "TrustedSignerDoesNotExist" => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::TrustedSignerDoesNotExist({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TrustedSignerDoesNotExistBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_trusted_signer_does_not_exist::de_trusted_signer_does_not_exist_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::create_streaming_distribution::CreateStreamingDistributionError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_streaming_distribution_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_streaming_distribution::CreateStreamingDistributionOutput,
    crate::operation::create_streaming_distribution::CreateStreamingDistributionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_streaming_distribution::builders::CreateStreamingDistributionOutputBuilder::default();
        let _ = response;
        output = output.set_e_tag(
            crate::protocol_serde::shape_create_streaming_distribution_output::de_e_tag_header(response.headers())
                                    .map_err(|_|crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled("Failed to parse ETag from header `ETag"))?
        );
        output = output.set_location(
            crate::protocol_serde::shape_create_streaming_distribution_output::de_location_header(response.headers())
                                    .map_err(|_|crate::operation::create_streaming_distribution::CreateStreamingDistributionError::unhandled("Failed to parse Location from header `Location"))?
        );
        output = output.set_streaming_distribution(
            crate::protocol_serde::shape_create_streaming_distribution_output::de_streaming_distribution_payload(response.body().as_ref())?
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
