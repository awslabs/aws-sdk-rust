// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_tags(
    input: &crate::types::Tags,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.items {
        let mut inner_writer = scope.start_el("Items").finish();
        for list_item_2 in var_1 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::protocol_serde::shape_tag::ser_tag(list_item_2, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn de_tags(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::Tags, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Tags::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Items") /* Items com.amazonaws.cloudfront#Tags$Items */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_tag_list::de_tag_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_items(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
