// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_allowed_methods(
    input: &crate::types::AllowedMethods,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.quantity {
        let mut inner_writer = scope.start_el("Quantity").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_1).encode());
    }
    if let Some(var_2) = &input.items {
        let mut inner_writer = scope.start_el("Items").finish();
        for list_item_3 in var_2 {
            {
                let mut inner_writer = inner_writer.start_el("Method").finish();
                inner_writer.data(list_item_3.as_str());
            }
        }
    }
    if let Some(var_4) = &input.cached_methods {
        let inner_writer = scope.start_el("CachedMethods");
        crate::protocol_serde::shape_cached_methods::ser_cached_methods(var_4, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn de_allowed_methods(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::AllowedMethods, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AllowedMethods::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Quantity") /* Quantity com.amazonaws.cloudfront#AllowedMethods$Quantity */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudfront#integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_quantity(var_5);
            }
            ,
            s if s.matches("Items") /* Items com.amazonaws.cloudfront#AllowedMethods$Items */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_methods_list::de_methods_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_items(var_6);
            }
            ,
            s if s.matches("CachedMethods") /* CachedMethods com.amazonaws.cloudfront#AllowedMethods$CachedMethods */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_cached_methods::de_cached_methods(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cached_methods(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
