// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_response_headers_policy_cors_config(
    input: &crate::types::ResponseHeadersPolicyCorsConfig,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.access_control_allow_origins {
        let inner_writer = scope.start_el("AccessControlAllowOrigins");
        crate::protocol_serde::shape_response_headers_policy_access_control_allow_origins::ser_response_headers_policy_access_control_allow_origins(
            var_1,
            inner_writer,
        )?
    }
    if let Some(var_2) = &input.access_control_allow_headers {
        let inner_writer = scope.start_el("AccessControlAllowHeaders");
        crate::protocol_serde::shape_response_headers_policy_access_control_allow_headers::ser_response_headers_policy_access_control_allow_headers(
            var_2,
            inner_writer,
        )?
    }
    if let Some(var_3) = &input.access_control_allow_methods {
        let inner_writer = scope.start_el("AccessControlAllowMethods");
        crate::protocol_serde::shape_response_headers_policy_access_control_allow_methods::ser_response_headers_policy_access_control_allow_methods(
            var_3,
            inner_writer,
        )?
    }
    {
        let mut inner_writer = scope.start_el("AccessControlAllowCredentials").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(input.access_control_allow_credentials).encode());
    }
    if let Some(var_4) = &input.access_control_expose_headers {
        let inner_writer = scope.start_el("AccessControlExposeHeaders");
        crate::protocol_serde::shape_response_headers_policy_access_control_expose_headers::ser_response_headers_policy_access_control_expose_headers(
            var_4,
            inner_writer,
        )?
    }
    if let Some(var_5) = &input.access_control_max_age_sec {
        let mut inner_writer = scope.start_el("AccessControlMaxAgeSec").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(*var_5).encode());
    }
    {
        let mut inner_writer = scope.start_el("OriginOverride").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(input.origin_override).encode());
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_response_headers_policy_cors_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ResponseHeadersPolicyCorsConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ResponseHeadersPolicyCorsConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AccessControlAllowOrigins") /* AccessControlAllowOrigins com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$AccessControlAllowOrigins */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_access_control_allow_origins::de_response_headers_policy_access_control_allow_origins(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_allow_origins(var_6);
            }
            ,
            s if s.matches("AccessControlAllowHeaders") /* AccessControlAllowHeaders com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$AccessControlAllowHeaders */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_access_control_allow_headers::de_response_headers_policy_access_control_allow_headers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_allow_headers(var_7);
            }
            ,
            s if s.matches("AccessControlAllowMethods") /* AccessControlAllowMethods com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$AccessControlAllowMethods */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_access_control_allow_methods::de_response_headers_policy_access_control_allow_methods(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_allow_methods(var_8);
            }
            ,
            s if s.matches("AccessControlAllowCredentials") /* AccessControlAllowCredentials com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$AccessControlAllowCredentials */ =>  {
                let var_9 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.cloudfront#boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_access_control_allow_credentials(var_9);
            }
            ,
            s if s.matches("AccessControlExposeHeaders") /* AccessControlExposeHeaders com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$AccessControlExposeHeaders */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_response_headers_policy_access_control_expose_headers::de_response_headers_policy_access_control_expose_headers(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_expose_headers(var_10);
            }
            ,
            s if s.matches("AccessControlMaxAgeSec") /* AccessControlMaxAgeSec com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$AccessControlMaxAgeSec */ =>  {
                let var_11 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudfront#integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_access_control_max_age_sec(var_11);
            }
            ,
            s if s.matches("OriginOverride") /* OriginOverride com.amazonaws.cloudfront#ResponseHeadersPolicyCorsConfig$OriginOverride */ =>  {
                let var_12 =
                    Some(
                         {
                            <bool as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.cloudfront#boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_origin_override(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::response_headers_policy_cors_config_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
