// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_payload_create_cache_policy_create_cache_policy_output_cache_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CachePolicy>,
    crate::error::CreateCachePolicyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_cache_policy_output_cache_policy(body).map_err(crate::error::CreateCachePolicyError::unhandled)
    }).transpose()
}

pub fn deser_header_create_cache_policy_create_cache_policy_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_cache_policy_create_cache_policy_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_cloud_front_origin_access_identity_create_cloud_front_origin_access_identity_output_cloud_front_origin_access_identity(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CloudFrontOriginAccessIdentity>,
    crate::error::CreateCloudFrontOriginAccessIdentityError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_cloud_front_origin_access_identity_output_cloud_front_origin_access_identity(body).map_err(crate::error::CreateCloudFrontOriginAccessIdentityError::unhandled)
    }).transpose()
}

pub fn deser_header_create_cloud_front_origin_access_identity_create_cloud_front_origin_access_identity_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_cloud_front_origin_access_identity_create_cloud_front_origin_access_identity_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_distribution_create_distribution_output_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Distribution>,
    crate::error::CreateDistributionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_distribution_output_distribution(body).map_err(crate::error::CreateDistributionError::unhandled)
    }).transpose()
}

pub fn deser_header_create_distribution_create_distribution_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_distribution_create_distribution_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_distribution_with_tags_create_distribution_with_tags_output_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Distribution>,
    crate::error::CreateDistributionWithTagsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_distribution_with_tags_output_distribution(body).map_err(crate::error::CreateDistributionWithTagsError::unhandled)
    }).transpose()
}

pub fn deser_header_create_distribution_with_tags_create_distribution_with_tags_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_distribution_with_tags_create_distribution_with_tags_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_field_level_encryption_config_create_field_level_encryption_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_field_level_encryption_config_create_field_level_encryption_config_output_field_level_encryption(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryption>,
    crate::error::CreateFieldLevelEncryptionConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_field_level_encryption_config_output_field_level_encryption(body).map_err(crate::error::CreateFieldLevelEncryptionConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_create_field_level_encryption_config_create_field_level_encryption_config_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_field_level_encryption_profile_create_field_level_encryption_profile_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_field_level_encryption_profile_create_field_level_encryption_profile_output_field_level_encryption_profile(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionProfile>,
    crate::error::CreateFieldLevelEncryptionProfileError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_field_level_encryption_profile_output_field_level_encryption_profile(body).map_err(crate::error::CreateFieldLevelEncryptionProfileError::unhandled)
    }).transpose()
}

pub fn deser_header_create_field_level_encryption_profile_create_field_level_encryption_profile_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_function_create_function_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_function_create_function_output_function_summary(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FunctionSummary>,
    crate::error::CreateFunctionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_function_output_function_summary(body).map_err(crate::error::CreateFunctionError::unhandled)
    }).transpose()
}

pub fn deser_header_create_function_create_function_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_invalidation_create_invalidation_output_invalidation(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Invalidation>,
    crate::error::CreateInvalidationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_invalidation_output_invalidation(body).map_err(crate::error::CreateInvalidationError::unhandled)
    }).transpose()
}

pub fn deser_header_create_invalidation_create_invalidation_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_key_group_create_key_group_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_key_group_create_key_group_output_key_group(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::KeyGroup>,
    crate::error::CreateKeyGroupError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_key_group_output_key_group(body).map_err(crate::error::CreateKeyGroupError::unhandled)
    }).transpose()
}

pub fn deser_header_create_key_group_create_key_group_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_monitoring_subscription_create_monitoring_subscription_output_monitoring_subscription(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MonitoringSubscription>,
    crate::error::CreateMonitoringSubscriptionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_monitoring_subscription_output_monitoring_subscription(body).map_err(crate::error::CreateMonitoringSubscriptionError::unhandled)
    }).transpose()
}

pub fn deser_header_create_origin_request_policy_create_origin_request_policy_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_origin_request_policy_create_origin_request_policy_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_origin_request_policy_create_origin_request_policy_output_origin_request_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::OriginRequestPolicy>,
    crate::error::CreateOriginRequestPolicyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_origin_request_policy_output_origin_request_policy(body).map_err(crate::error::CreateOriginRequestPolicyError::unhandled)
    }).transpose()
}

pub fn deser_header_create_public_key_create_public_key_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_public_key_create_public_key_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_public_key_create_public_key_output_public_key(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicKey>,
    crate::error::CreatePublicKeyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_public_key_output_public_key(body).map_err(crate::error::CreatePublicKeyError::unhandled)
    }).transpose()
}

pub fn deser_header_create_streaming_distribution_create_streaming_distribution_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_streaming_distribution_create_streaming_distribution_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_streaming_distribution_create_streaming_distribution_output_streaming_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StreamingDistribution>,
    crate::error::CreateStreamingDistributionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_streaming_distribution_output_streaming_distribution(body).map_err(crate::error::CreateStreamingDistributionError::unhandled)
    }).transpose()
}

pub fn deser_header_create_streaming_distribution_with_tags_create_streaming_distribution_with_tags_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_streaming_distribution_with_tags_create_streaming_distribution_with_tags_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Location").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_streaming_distribution_with_tags_create_streaming_distribution_with_tags_output_streaming_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StreamingDistribution>,
    crate::error::CreateStreamingDistributionWithTagsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_create_streaming_distribution_with_tags_output_streaming_distribution(body).map_err(crate::error::CreateStreamingDistributionWithTagsError::unhandled)
    }).transpose()
}

pub fn deser_header_describe_function_describe_function_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_describe_function_describe_function_output_function_summary(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FunctionSummary>,
    crate::error::DescribeFunctionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_describe_function_output_function_summary(body).map_err(crate::error::DescribeFunctionError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_cache_policy_get_cache_policy_output_cache_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CachePolicy>,
    crate::error::GetCachePolicyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_cache_policy_output_cache_policy(body).map_err(crate::error::GetCachePolicyError::unhandled)
    }).transpose()
}

pub fn deser_header_get_cache_policy_get_cache_policy_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_cache_policy_config_get_cache_policy_config_output_cache_policy_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CachePolicyConfig>,
    crate::error::GetCachePolicyConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_cache_policy_config_output_cache_policy_config(body).map_err(crate::error::GetCachePolicyConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_cache_policy_config_get_cache_policy_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_cloud_front_origin_access_identity_get_cloud_front_origin_access_identity_output_cloud_front_origin_access_identity(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CloudFrontOriginAccessIdentity>,
    crate::error::GetCloudFrontOriginAccessIdentityError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_cloud_front_origin_access_identity_output_cloud_front_origin_access_identity(body).map_err(crate::error::GetCloudFrontOriginAccessIdentityError::unhandled)
    }).transpose()
}

pub fn deser_header_get_cloud_front_origin_access_identity_get_cloud_front_origin_access_identity_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_cloud_front_origin_access_identity_config_get_cloud_front_origin_access_identity_config_output_cloud_front_origin_access_identity_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CloudFrontOriginAccessIdentityConfig>,
    crate::error::GetCloudFrontOriginAccessIdentityConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_cloud_front_origin_access_identity_config_output_cloud_front_origin_access_identity_config(body).map_err(crate::error::GetCloudFrontOriginAccessIdentityConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_cloud_front_origin_access_identity_config_get_cloud_front_origin_access_identity_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_distribution_get_distribution_output_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Distribution>,
    crate::error::GetDistributionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_distribution_output_distribution(body).map_err(crate::error::GetDistributionError::unhandled)
    }).transpose()
}

pub fn deser_header_get_distribution_get_distribution_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_distribution_config_get_distribution_config_output_distribution_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionConfig>,
    crate::error::GetDistributionConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_distribution_config_output_distribution_config(body).map_err(crate::error::GetDistributionConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_distribution_config_get_distribution_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_field_level_encryption_get_field_level_encryption_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_field_level_encryption_get_field_level_encryption_output_field_level_encryption(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryption>,
    crate::error::GetFieldLevelEncryptionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_field_level_encryption_output_field_level_encryption(body).map_err(crate::error::GetFieldLevelEncryptionError::unhandled)
    }).transpose()
}

pub fn deser_header_get_field_level_encryption_config_get_field_level_encryption_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_field_level_encryption_config_get_field_level_encryption_config_output_field_level_encryption_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionConfig>,
    crate::error::GetFieldLevelEncryptionConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_field_level_encryption_config_output_field_level_encryption_config(body).map_err(crate::error::GetFieldLevelEncryptionConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_field_level_encryption_profile_get_field_level_encryption_profile_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_field_level_encryption_profile_get_field_level_encryption_profile_output_field_level_encryption_profile(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionProfile>,
    crate::error::GetFieldLevelEncryptionProfileError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_field_level_encryption_profile_output_field_level_encryption_profile(body).map_err(crate::error::GetFieldLevelEncryptionProfileError::unhandled)
    }).transpose()
}

pub fn deser_header_get_field_level_encryption_profile_config_get_field_level_encryption_profile_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_field_level_encryption_profile_config_get_field_level_encryption_profile_config_output_field_level_encryption_profile_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionProfileConfig>,
    crate::error::GetFieldLevelEncryptionProfileConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_field_level_encryption_profile_config_output_field_level_encryption_profile_config(body).map_err(crate::error::GetFieldLevelEncryptionProfileConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_function_get_function_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_function_get_function_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_function_get_function_output_function_code(
    body: &[u8],
) -> std::result::Result<std::option::Option<smithy_types::Blob>, crate::error::GetFunctionError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_payload_get_invalidation_get_invalidation_output_invalidation(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Invalidation>,
    crate::error::GetInvalidationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_invalidation_output_invalidation(body).map_err(crate::error::GetInvalidationError::unhandled)
    }).transpose()
}

pub fn deser_header_get_key_group_get_key_group_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_key_group_get_key_group_output_key_group(
    body: &[u8],
) -> std::result::Result<std::option::Option<crate::model::KeyGroup>, crate::error::GetKeyGroupError>
{
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_key_group_output_key_group(body).map_err(crate::error::GetKeyGroupError::unhandled)
    }).transpose()
}

pub fn deser_header_get_key_group_config_get_key_group_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_key_group_config_get_key_group_config_output_key_group_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::KeyGroupConfig>,
    crate::error::GetKeyGroupConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_key_group_config_output_key_group_config(body).map_err(crate::error::GetKeyGroupConfigError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_monitoring_subscription_get_monitoring_subscription_output_monitoring_subscription(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::MonitoringSubscription>,
    crate::error::GetMonitoringSubscriptionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_monitoring_subscription_output_monitoring_subscription(body).map_err(crate::error::GetMonitoringSubscriptionError::unhandled)
    }).transpose()
}

pub fn deser_header_get_origin_request_policy_get_origin_request_policy_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_origin_request_policy_get_origin_request_policy_output_origin_request_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::OriginRequestPolicy>,
    crate::error::GetOriginRequestPolicyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_origin_request_policy_output_origin_request_policy(body).map_err(crate::error::GetOriginRequestPolicyError::unhandled)
    }).transpose()
}

pub fn deser_header_get_origin_request_policy_config_get_origin_request_policy_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_origin_request_policy_config_get_origin_request_policy_config_output_origin_request_policy_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::OriginRequestPolicyConfig>,
    crate::error::GetOriginRequestPolicyConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_origin_request_policy_config_output_origin_request_policy_config(body).map_err(crate::error::GetOriginRequestPolicyConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_public_key_get_public_key_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_public_key_get_public_key_output_public_key(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicKey>,
    crate::error::GetPublicKeyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_public_key_output_public_key(body).map_err(crate::error::GetPublicKeyError::unhandled)
    }).transpose()
}

pub fn deser_header_get_public_key_config_get_public_key_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_public_key_config_get_public_key_config_output_public_key_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicKeyConfig>,
    crate::error::GetPublicKeyConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_public_key_config_output_public_key_config(body).map_err(crate::error::GetPublicKeyConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_get_streaming_distribution_get_streaming_distribution_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_streaming_distribution_get_streaming_distribution_output_streaming_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StreamingDistribution>,
    crate::error::GetStreamingDistributionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_streaming_distribution_output_streaming_distribution(body).map_err(crate::error::GetStreamingDistributionError::unhandled)
    }).transpose()
}

pub fn deser_header_get_streaming_distribution_config_get_streaming_distribution_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_streaming_distribution_config_get_streaming_distribution_config_output_streaming_distribution_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StreamingDistributionConfig>,
    crate::error::GetStreamingDistributionConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_get_streaming_distribution_config_output_streaming_distribution_config(body).map_err(crate::error::GetStreamingDistributionConfigError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_cache_policies_list_cache_policies_output_cache_policy_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CachePolicyList>,
    crate::error::ListCachePoliciesError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_cache_policies_output_cache_policy_list(body).map_err(crate::error::ListCachePoliciesError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_cloud_front_origin_access_identities_list_cloud_front_origin_access_identities_output_cloud_front_origin_access_identity_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CloudFrontOriginAccessIdentityList>,
    crate::error::ListCloudFrontOriginAccessIdentitiesError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_cloud_front_origin_access_identities_output_cloud_front_origin_access_identity_list(body).map_err(crate::error::ListCloudFrontOriginAccessIdentitiesError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_conflicting_aliases_list_conflicting_aliases_output_conflicting_aliases_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::ConflictingAliasesList>,
    crate::error::ListConflictingAliasesError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_conflicting_aliases_output_conflicting_aliases_list(body).map_err(crate::error::ListConflictingAliasesError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_distributions_list_distributions_output_distribution_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionList>,
    crate::error::ListDistributionsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_distributions_output_distribution_list(body).map_err(crate::error::ListDistributionsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_distributions_by_cache_policy_id_list_distributions_by_cache_policy_id_output_distribution_id_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionIdList>,
    crate::error::ListDistributionsByCachePolicyIdError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_distributions_by_cache_policy_id_output_distribution_id_list(body).map_err(crate::error::ListDistributionsByCachePolicyIdError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_distributions_by_key_group_list_distributions_by_key_group_output_distribution_id_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionIdList>,
    crate::error::ListDistributionsByKeyGroupError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_distributions_by_key_group_output_distribution_id_list(body).map_err(crate::error::ListDistributionsByKeyGroupError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_distributions_by_origin_request_policy_id_list_distributions_by_origin_request_policy_id_output_distribution_id_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionIdList>,
    crate::error::ListDistributionsByOriginRequestPolicyIdError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_distributions_by_origin_request_policy_id_output_distribution_id_list(body).map_err(crate::error::ListDistributionsByOriginRequestPolicyIdError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_distributions_by_realtime_log_config_list_distributions_by_realtime_log_config_output_distribution_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionList>,
    crate::error::ListDistributionsByRealtimeLogConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_distributions_by_realtime_log_config_output_distribution_list(body).map_err(crate::error::ListDistributionsByRealtimeLogConfigError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_distributions_by_web_acl_id_list_distributions_by_web_acl_id_output_distribution_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::DistributionList>,
    crate::error::ListDistributionsByWebACLIdError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_distributions_by_web_acl_id_output_distribution_list(body).map_err(crate::error::ListDistributionsByWebACLIdError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_field_level_encryption_configs_list_field_level_encryption_configs_output_field_level_encryption_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionList>,
    crate::error::ListFieldLevelEncryptionConfigsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_field_level_encryption_configs_output_field_level_encryption_list(body).map_err(crate::error::ListFieldLevelEncryptionConfigsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_field_level_encryption_profiles_list_field_level_encryption_profiles_output_field_level_encryption_profile_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionProfileList>,
    crate::error::ListFieldLevelEncryptionProfilesError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_field_level_encryption_profiles_output_field_level_encryption_profile_list(body).map_err(crate::error::ListFieldLevelEncryptionProfilesError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_functions_list_functions_output_function_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FunctionList>,
    crate::error::ListFunctionsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_functions_output_function_list(body).map_err(crate::error::ListFunctionsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_invalidations_list_invalidations_output_invalidation_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::InvalidationList>,
    crate::error::ListInvalidationsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_invalidations_output_invalidation_list(body).map_err(crate::error::ListInvalidationsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_key_groups_list_key_groups_output_key_group_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::KeyGroupList>,
    crate::error::ListKeyGroupsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_key_groups_output_key_group_list(body).map_err(crate::error::ListKeyGroupsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_origin_request_policies_list_origin_request_policies_output_origin_request_policy_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::OriginRequestPolicyList>,
    crate::error::ListOriginRequestPoliciesError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_origin_request_policies_output_origin_request_policy_list(body).map_err(crate::error::ListOriginRequestPoliciesError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_public_keys_list_public_keys_output_public_key_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicKeyList>,
    crate::error::ListPublicKeysError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_public_keys_output_public_key_list(body).map_err(crate::error::ListPublicKeysError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_realtime_log_configs_list_realtime_log_configs_output_realtime_log_configs(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::RealtimeLogConfigs>,
    crate::error::ListRealtimeLogConfigsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_realtime_log_configs_output_realtime_log_configs(body).map_err(crate::error::ListRealtimeLogConfigsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_streaming_distributions_list_streaming_distributions_output_streaming_distribution_list(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StreamingDistributionList>,
    crate::error::ListStreamingDistributionsError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_streaming_distributions_output_streaming_distribution_list(body).map_err(crate::error::ListStreamingDistributionsError::unhandled)
    }).transpose()
}

pub fn deser_payload_list_tags_for_resource_list_tags_for_resource_output_tags(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Tags>,
    crate::error::ListTagsForResourceError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_list_tags_for_resource_output_tags(body).map_err(crate::error::ListTagsForResourceError::unhandled)
    }).transpose()
}

pub fn deser_payload_publish_function_publish_function_output_function_summary(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FunctionSummary>,
    crate::error::PublishFunctionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_publish_function_output_function_summary(body).map_err(crate::error::PublishFunctionError::unhandled)
    }).transpose()
}

pub fn deser_payload_test_function_test_function_output_test_result(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::TestResult>,
    crate::error::TestFunctionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_test_function_output_test_result(body).map_err(crate::error::TestFunctionError::unhandled)
    }).transpose()
}

pub fn deser_payload_update_cache_policy_update_cache_policy_output_cache_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CachePolicy>,
    crate::error::UpdateCachePolicyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_cache_policy_output_cache_policy(body).map_err(crate::error::UpdateCachePolicyError::unhandled)
    }).transpose()
}

pub fn deser_header_update_cache_policy_update_cache_policy_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_cloud_front_origin_access_identity_update_cloud_front_origin_access_identity_output_cloud_front_origin_access_identity(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::CloudFrontOriginAccessIdentity>,
    crate::error::UpdateCloudFrontOriginAccessIdentityError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_cloud_front_origin_access_identity_output_cloud_front_origin_access_identity(body).map_err(crate::error::UpdateCloudFrontOriginAccessIdentityError::unhandled)
    }).transpose()
}

pub fn deser_header_update_cloud_front_origin_access_identity_update_cloud_front_origin_access_identity_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_distribution_update_distribution_output_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::Distribution>,
    crate::error::UpdateDistributionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_distribution_output_distribution(body).map_err(crate::error::UpdateDistributionError::unhandled)
    }).transpose()
}

pub fn deser_header_update_distribution_update_distribution_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_field_level_encryption_config_update_field_level_encryption_config_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_field_level_encryption_config_update_field_level_encryption_config_output_field_level_encryption(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryption>,
    crate::error::UpdateFieldLevelEncryptionConfigError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_field_level_encryption_config_output_field_level_encryption(body).map_err(crate::error::UpdateFieldLevelEncryptionConfigError::unhandled)
    }).transpose()
}

pub fn deser_header_update_field_level_encryption_profile_update_field_level_encryption_profile_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_field_level_encryption_profile_update_field_level_encryption_profile_output_field_level_encryption_profile(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FieldLevelEncryptionProfile>,
    crate::error::UpdateFieldLevelEncryptionProfileError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_field_level_encryption_profile_output_field_level_encryption_profile(body).map_err(crate::error::UpdateFieldLevelEncryptionProfileError::unhandled)
    }).transpose()
}

pub fn deser_header_update_function_update_function_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETtag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_function_update_function_output_function_summary(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::FunctionSummary>,
    crate::error::UpdateFunctionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_function_output_function_summary(body).map_err(crate::error::UpdateFunctionError::unhandled)
    }).transpose()
}

pub fn deser_header_update_key_group_update_key_group_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_key_group_update_key_group_output_key_group(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::KeyGroup>,
    crate::error::UpdateKeyGroupError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_key_group_output_key_group(body).map_err(crate::error::UpdateKeyGroupError::unhandled)
    }).transpose()
}

pub fn deser_header_update_origin_request_policy_update_origin_request_policy_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_origin_request_policy_update_origin_request_policy_output_origin_request_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::OriginRequestPolicy>,
    crate::error::UpdateOriginRequestPolicyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_origin_request_policy_output_origin_request_policy(body).map_err(crate::error::UpdateOriginRequestPolicyError::unhandled)
    }).transpose()
}

pub fn deser_header_update_public_key_update_public_key_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_public_key_update_public_key_output_public_key(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicKey>,
    crate::error::UpdatePublicKeyError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_public_key_output_public_key(body).map_err(crate::error::UpdatePublicKeyError::unhandled)
    }).transpose()
}

pub fn deser_header_update_streaming_distribution_update_streaming_distribution_output_e_tag(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("ETag").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_update_streaming_distribution_update_streaming_distribution_output_streaming_distribution(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StreamingDistribution>,
    crate::error::UpdateStreamingDistributionError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_cloudfront_synthetic_update_streaming_distribution_output_streaming_distribution(body).map_err(crate::error::UpdateStreamingDistributionError::unhandled)
    }).transpose()
}
