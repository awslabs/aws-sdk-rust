// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of identifiers for the public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KgKeyPairIds {
    /// <p>The identifier of the key group that contains the public keys.</p>
    #[doc(hidden)]
    pub key_group_id: std::option::Option<std::string::String>,
    /// <p>A list of CloudFront key pair identifiers.</p>
    #[doc(hidden)]
    pub key_pair_ids: std::option::Option<crate::types::KeyPairIds>,
}
impl KgKeyPairIds {
    /// <p>The identifier of the key group that contains the public keys.</p>
    pub fn key_group_id(&self) -> std::option::Option<&str> {
        self.key_group_id.as_deref()
    }
    /// <p>A list of CloudFront key pair identifiers.</p>
    pub fn key_pair_ids(&self) -> std::option::Option<&crate::types::KeyPairIds> {
        self.key_pair_ids.as_ref()
    }
}
impl KgKeyPairIds {
    /// Creates a new builder-style object to manufacture [`KgKeyPairIds`](crate::types::KgKeyPairIds).
    pub fn builder() -> crate::types::builders::KgKeyPairIdsBuilder {
        crate::types::builders::KgKeyPairIdsBuilder::default()
    }
}

/// A builder for [`KgKeyPairIds`](crate::types::KgKeyPairIds).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KgKeyPairIdsBuilder {
    pub(crate) key_group_id: std::option::Option<std::string::String>,
    pub(crate) key_pair_ids: std::option::Option<crate::types::KeyPairIds>,
}
impl KgKeyPairIdsBuilder {
    /// <p>The identifier of the key group that contains the public keys.</p>
    pub fn key_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_group_id = Some(input.into());
        self
    }
    /// <p>The identifier of the key group that contains the public keys.</p>
    pub fn set_key_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_group_id = input;
        self
    }
    /// <p>A list of CloudFront key pair identifiers.</p>
    pub fn key_pair_ids(mut self, input: crate::types::KeyPairIds) -> Self {
        self.key_pair_ids = Some(input);
        self
    }
    /// <p>A list of CloudFront key pair identifiers.</p>
    pub fn set_key_pair_ids(
        mut self,
        input: std::option::Option<crate::types::KeyPairIds>,
    ) -> Self {
        self.key_pair_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`KgKeyPairIds`](crate::types::KgKeyPairIds).
    pub fn build(self) -> crate::types::KgKeyPairIds {
        crate::types::KgKeyPairIds {
            key_group_id: self.key_group_id,
            key_pair_ids: self.key_pair_ids,
        }
    }
}
