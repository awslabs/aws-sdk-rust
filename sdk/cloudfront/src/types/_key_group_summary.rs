// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a key group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyGroupSummary {
    /// <p>A key group.</p>
    pub key_group: ::std::option::Option<crate::types::KeyGroup>,
}
impl KeyGroupSummary {
    /// <p>A key group.</p>
    pub fn key_group(&self) -> ::std::option::Option<&crate::types::KeyGroup> {
        self.key_group.as_ref()
    }
}
impl KeyGroupSummary {
    /// Creates a new builder-style object to manufacture [`KeyGroupSummary`](crate::types::KeyGroupSummary).
    pub fn builder() -> crate::types::builders::KeyGroupSummaryBuilder {
        crate::types::builders::KeyGroupSummaryBuilder::default()
    }
}

/// A builder for [`KeyGroupSummary`](crate::types::KeyGroupSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyGroupSummaryBuilder {
    pub(crate) key_group: ::std::option::Option<crate::types::KeyGroup>,
}
impl KeyGroupSummaryBuilder {
    /// <p>A key group.</p>
    /// This field is required.
    pub fn key_group(mut self, input: crate::types::KeyGroup) -> Self {
        self.key_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>A key group.</p>
    pub fn set_key_group(mut self, input: ::std::option::Option<crate::types::KeyGroup>) -> Self {
        self.key_group = input;
        self
    }
    /// <p>A key group.</p>
    pub fn get_key_group(&self) -> &::std::option::Option<crate::types::KeyGroup> {
        &self.key_group
    }
    /// Consumes the builder and constructs a [`KeyGroupSummary`](crate::types::KeyGroupSummary).
    pub fn build(self) -> crate::types::KeyGroupSummary {
        crate::types::KeyGroupSummary { key_group: self.key_group }
    }
}
