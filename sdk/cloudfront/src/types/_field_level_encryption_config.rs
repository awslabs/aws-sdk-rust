// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex data type that includes the profile configurations specified for field-level encryption.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldLevelEncryptionConfig {
    /// <p>A unique number that ensures the request can't be replayed.</p>
    #[doc(hidden)]
    pub caller_reference: std::option::Option<std::string::String>,
    /// <p>An optional comment about the configuration. The comment cannot be longer than 128 characters.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>A complex data type that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.</p>
    #[doc(hidden)]
    pub query_arg_profile_config: std::option::Option<crate::types::QueryArgProfileConfig>,
    /// <p>A complex data type that specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.</p>
    #[doc(hidden)]
    pub content_type_profile_config: std::option::Option<crate::types::ContentTypeProfileConfig>,
}
impl FieldLevelEncryptionConfig {
    /// <p>A unique number that ensures the request can't be replayed.</p>
    pub fn caller_reference(&self) -> std::option::Option<&str> {
        self.caller_reference.as_deref()
    }
    /// <p>An optional comment about the configuration. The comment cannot be longer than 128 characters.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>A complex data type that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.</p>
    pub fn query_arg_profile_config(
        &self,
    ) -> std::option::Option<&crate::types::QueryArgProfileConfig> {
        self.query_arg_profile_config.as_ref()
    }
    /// <p>A complex data type that specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.</p>
    pub fn content_type_profile_config(
        &self,
    ) -> std::option::Option<&crate::types::ContentTypeProfileConfig> {
        self.content_type_profile_config.as_ref()
    }
}
impl FieldLevelEncryptionConfig {
    /// Creates a new builder-style object to manufacture [`FieldLevelEncryptionConfig`](crate::types::FieldLevelEncryptionConfig).
    pub fn builder() -> crate::types::builders::FieldLevelEncryptionConfigBuilder {
        crate::types::builders::FieldLevelEncryptionConfigBuilder::default()
    }
}

/// A builder for [`FieldLevelEncryptionConfig`](crate::types::FieldLevelEncryptionConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldLevelEncryptionConfigBuilder {
    pub(crate) caller_reference: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) query_arg_profile_config: std::option::Option<crate::types::QueryArgProfileConfig>,
    pub(crate) content_type_profile_config:
        std::option::Option<crate::types::ContentTypeProfileConfig>,
}
impl FieldLevelEncryptionConfigBuilder {
    /// <p>A unique number that ensures the request can't be replayed.</p>
    pub fn caller_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.caller_reference = Some(input.into());
        self
    }
    /// <p>A unique number that ensures the request can't be replayed.</p>
    pub fn set_caller_reference(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.caller_reference = input;
        self
    }
    /// <p>An optional comment about the configuration. The comment cannot be longer than 128 characters.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>An optional comment about the configuration. The comment cannot be longer than 128 characters.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A complex data type that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.</p>
    pub fn query_arg_profile_config(mut self, input: crate::types::QueryArgProfileConfig) -> Self {
        self.query_arg_profile_config = Some(input);
        self
    }
    /// <p>A complex data type that specifies when to forward content if a profile isn't found and the profile that can be provided as a query argument in a request.</p>
    pub fn set_query_arg_profile_config(
        mut self,
        input: std::option::Option<crate::types::QueryArgProfileConfig>,
    ) -> Self {
        self.query_arg_profile_config = input;
        self
    }
    /// <p>A complex data type that specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.</p>
    pub fn content_type_profile_config(
        mut self,
        input: crate::types::ContentTypeProfileConfig,
    ) -> Self {
        self.content_type_profile_config = Some(input);
        self
    }
    /// <p>A complex data type that specifies when to forward content if a content type isn't recognized and profiles to use as by default in a request if a query argument doesn't specify a profile to use.</p>
    pub fn set_content_type_profile_config(
        mut self,
        input: std::option::Option<crate::types::ContentTypeProfileConfig>,
    ) -> Self {
        self.content_type_profile_config = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldLevelEncryptionConfig`](crate::types::FieldLevelEncryptionConfig).
    pub fn build(self) -> crate::types::FieldLevelEncryptionConfig {
        crate::types::FieldLevelEncryptionConfig {
            caller_reference: self.caller_reference,
            comment: self.comment,
            query_arg_profile_config: self.query_arg_profile_config,
            content_type_profile_config: self.content_type_profile_config,
        }
    }
}
