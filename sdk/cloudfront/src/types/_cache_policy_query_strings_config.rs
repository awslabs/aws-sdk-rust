// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CachePolicyQueryStringsConfig {
    /// <p>Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All query strings in viewer requests that are <i> <b>not</b> </i> listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub query_string_behavior: std::option::Option<crate::types::CachePolicyQueryStringBehavior>,
    /// <p>Contains the specific query strings in viewer requests that either <i> <b>are</b> </i> or <i> <b>are not</b> </i> included in the cache key and automatically included in requests that CloudFront sends to the origin. The behavior depends on whether the <code>QueryStringBehavior</code> field in the <code>CachePolicyQueryStringsConfig</code> type is set to <code>whitelist</code> (the listed query strings <i> <b>are</b> </i> included) or <code>allExcept</code> (the listed query strings <i> <b>are not</b> </i> included, but all other query strings are).</p>
    #[doc(hidden)]
    pub query_strings: std::option::Option<crate::types::QueryStringNames>,
}
impl CachePolicyQueryStringsConfig {
    /// <p>Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All query strings in viewer requests that are <i> <b>not</b> </i> listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn query_string_behavior(
        &self,
    ) -> std::option::Option<&crate::types::CachePolicyQueryStringBehavior> {
        self.query_string_behavior.as_ref()
    }
    /// <p>Contains the specific query strings in viewer requests that either <i> <b>are</b> </i> or <i> <b>are not</b> </i> included in the cache key and automatically included in requests that CloudFront sends to the origin. The behavior depends on whether the <code>QueryStringBehavior</code> field in the <code>CachePolicyQueryStringsConfig</code> type is set to <code>whitelist</code> (the listed query strings <i> <b>are</b> </i> included) or <code>allExcept</code> (the listed query strings <i> <b>are not</b> </i> included, but all other query strings are).</p>
    pub fn query_strings(&self) -> std::option::Option<&crate::types::QueryStringNames> {
        self.query_strings.as_ref()
    }
}
impl CachePolicyQueryStringsConfig {
    /// Creates a new builder-style object to manufacture [`CachePolicyQueryStringsConfig`](crate::types::CachePolicyQueryStringsConfig).
    pub fn builder() -> crate::types::builders::CachePolicyQueryStringsConfigBuilder {
        crate::types::builders::CachePolicyQueryStringsConfigBuilder::default()
    }
}

/// A builder for [`CachePolicyQueryStringsConfig`](crate::types::CachePolicyQueryStringsConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CachePolicyQueryStringsConfigBuilder {
    pub(crate) query_string_behavior:
        std::option::Option<crate::types::CachePolicyQueryStringBehavior>,
    pub(crate) query_strings: std::option::Option<crate::types::QueryStringNames>,
}
impl CachePolicyQueryStringsConfigBuilder {
    /// <p>Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All query strings in viewer requests that are <i> <b>not</b> </i> listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn query_string_behavior(
        mut self,
        input: crate::types::CachePolicyQueryStringBehavior,
    ) -> Self {
        self.query_string_behavior = Some(input);
        self
    }
    /// <p>Determines whether any URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All query strings in viewer requests that are <i> <b>not</b> </i> listed in the <code>QueryStringNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn set_query_string_behavior(
        mut self,
        input: std::option::Option<crate::types::CachePolicyQueryStringBehavior>,
    ) -> Self {
        self.query_string_behavior = input;
        self
    }
    /// <p>Contains the specific query strings in viewer requests that either <i> <b>are</b> </i> or <i> <b>are not</b> </i> included in the cache key and automatically included in requests that CloudFront sends to the origin. The behavior depends on whether the <code>QueryStringBehavior</code> field in the <code>CachePolicyQueryStringsConfig</code> type is set to <code>whitelist</code> (the listed query strings <i> <b>are</b> </i> included) or <code>allExcept</code> (the listed query strings <i> <b>are not</b> </i> included, but all other query strings are).</p>
    pub fn query_strings(mut self, input: crate::types::QueryStringNames) -> Self {
        self.query_strings = Some(input);
        self
    }
    /// <p>Contains the specific query strings in viewer requests that either <i> <b>are</b> </i> or <i> <b>are not</b> </i> included in the cache key and automatically included in requests that CloudFront sends to the origin. The behavior depends on whether the <code>QueryStringBehavior</code> field in the <code>CachePolicyQueryStringsConfig</code> type is set to <code>whitelist</code> (the listed query strings <i> <b>are</b> </i> included) or <code>allExcept</code> (the listed query strings <i> <b>are not</b> </i> included, but all other query strings are).</p>
    pub fn set_query_strings(
        mut self,
        input: std::option::Option<crate::types::QueryStringNames>,
    ) -> Self {
        self.query_strings = input;
        self
    }
    /// Consumes the builder and constructs a [`CachePolicyQueryStringsConfig`](crate::types::CachePolicyQueryStringsConfig).
    pub fn build(self) -> crate::types::CachePolicyQueryStringsConfig {
        crate::types::CachePolicyQueryStringsConfig {
            query_string_behavior: self.query_string_behavior,
            query_strings: self.query_strings,
        }
    }
}
