// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of public keys that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublicKeyList {
    /// <p>If there are more elements to be listed, this element is present and contains the value that you can use for the <code>Marker</code> request parameter to continue listing your public keys where you left off.</p>
    #[doc(hidden)]
    pub next_marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of public keys you want in the response.</p>
    #[doc(hidden)]
    pub max_items: std::option::Option<i32>,
    /// <p>The number of public keys in the list.</p>
    #[doc(hidden)]
    pub quantity: std::option::Option<i32>,
    /// <p>A list of public keys.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::types::PublicKeySummary>>,
}
impl PublicKeyList {
    /// <p>If there are more elements to be listed, this element is present and contains the value that you can use for the <code>Marker</code> request parameter to continue listing your public keys where you left off.</p>
    pub fn next_marker(&self) -> std::option::Option<&str> {
        self.next_marker.as_deref()
    }
    /// <p>The maximum number of public keys you want in the response.</p>
    pub fn max_items(&self) -> std::option::Option<i32> {
        self.max_items
    }
    /// <p>The number of public keys in the list.</p>
    pub fn quantity(&self) -> std::option::Option<i32> {
        self.quantity
    }
    /// <p>A list of public keys.</p>
    pub fn items(&self) -> std::option::Option<&[crate::types::PublicKeySummary]> {
        self.items.as_deref()
    }
}
impl PublicKeyList {
    /// Creates a new builder-style object to manufacture [`PublicKeyList`](crate::types::PublicKeyList).
    pub fn builder() -> crate::types::builders::PublicKeyListBuilder {
        crate::types::builders::PublicKeyListBuilder::default()
    }
}

/// A builder for [`PublicKeyList`](crate::types::PublicKeyList).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublicKeyListBuilder {
    pub(crate) next_marker: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
    pub(crate) quantity: std::option::Option<i32>,
    pub(crate) items: std::option::Option<std::vec::Vec<crate::types::PublicKeySummary>>,
}
impl PublicKeyListBuilder {
    /// <p>If there are more elements to be listed, this element is present and contains the value that you can use for the <code>Marker</code> request parameter to continue listing your public keys where you left off.</p>
    pub fn next_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_marker = Some(input.into());
        self
    }
    /// <p>If there are more elements to be listed, this element is present and contains the value that you can use for the <code>Marker</code> request parameter to continue listing your public keys where you left off.</p>
    pub fn set_next_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_marker = input;
        self
    }
    /// <p>The maximum number of public keys you want in the response.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>The maximum number of public keys you want in the response.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    /// <p>The number of public keys in the list.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = Some(input);
        self
    }
    /// <p>The number of public keys in the list.</p>
    pub fn set_quantity(mut self, input: std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A list of public keys.</p>
    pub fn items(mut self, input: crate::types::PublicKeySummary) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = Some(v);
        self
    }
    /// <p>A list of public keys.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PublicKeySummary>>,
    ) -> Self {
        self.items = input;
        self
    }
    /// Consumes the builder and constructs a [`PublicKeyList`](crate::types::PublicKeyList).
    pub fn build(self) -> crate::types::PublicKeyList {
        crate::types::PublicKeyList {
            next_marker: self.next_marker,
            max_items: self.max_items,
            quantity: self.quantity,
            items: self.items,
        }
    }
}
