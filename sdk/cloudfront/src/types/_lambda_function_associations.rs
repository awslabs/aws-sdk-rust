// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that specifies a list of Lambda@Edge functions associations for a cache behavior.</p>
/// <p>If you want to invoke one or more Lambda@Edge functions triggered by requests that match the <code>PathPattern</code> of the cache behavior, specify the applicable values for <code>Quantity</code> and <code>Items</code>. Note that there can be up to 4 <code>LambdaFunctionAssociation</code> items in this list (one for each possible value of <code>EventType</code>) and each <code>EventType</code> can be associated with only one function.</p>
/// <p>If you don't want to invoke any Lambda@Edge functions for the requests that match <code>PathPattern</code>, specify <code>0</code> for <code>Quantity</code> and omit <code>Items</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LambdaFunctionAssociations {
    /// <p>The number of Lambda@Edge function associations for this cache behavior.</p>
    pub quantity: i32,
    /// <p> <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::LambdaFunctionAssociation>>,
}
impl LambdaFunctionAssociations {
    /// <p>The number of Lambda@Edge function associations for this cache behavior.</p>
    pub fn quantity(&self) -> i32 {
        self.quantity
    }
    /// <p> <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::LambdaFunctionAssociation] {
        self.items.as_deref().unwrap_or_default()
    }
}
impl LambdaFunctionAssociations {
    /// Creates a new builder-style object to manufacture [`LambdaFunctionAssociations`](crate::types::LambdaFunctionAssociations).
    pub fn builder() -> crate::types::builders::LambdaFunctionAssociationsBuilder {
        crate::types::builders::LambdaFunctionAssociationsBuilder::default()
    }
}

/// A builder for [`LambdaFunctionAssociations`](crate::types::LambdaFunctionAssociations).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LambdaFunctionAssociationsBuilder {
    pub(crate) quantity: ::std::option::Option<i32>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::LambdaFunctionAssociation>>,
}
impl LambdaFunctionAssociationsBuilder {
    /// <p>The number of Lambda@Edge function associations for this cache behavior.</p>
    /// This field is required.
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Lambda@Edge function associations for this cache behavior.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The number of Lambda@Edge function associations for this cache behavior.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<i32> {
        &self.quantity
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p> <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.</p>
    pub fn items(mut self, input: crate::types::LambdaFunctionAssociation) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p> <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LambdaFunctionAssociation>>) -> Self {
        self.items = input;
        self
    }
    /// <p> <b>Optional</b>: A complex type that contains <code>LambdaFunctionAssociation</code> items for this cache behavior. If <code>Quantity</code> is <code>0</code>, you can omit <code>Items</code>.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LambdaFunctionAssociation>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`LambdaFunctionAssociations`](crate::types::LambdaFunctionAssociations).
    /// This method will fail if any of the following fields are not set:
    /// - [`quantity`](crate::types::builders::LambdaFunctionAssociationsBuilder::quantity)
    pub fn build(self) -> ::std::result::Result<crate::types::LambdaFunctionAssociations, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LambdaFunctionAssociations {
            quantity: self.quantity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quantity",
                    "quantity was not specified but it is required when building LambdaFunctionAssociations",
                )
            })?,
            items: self.items,
        })
    }
}
