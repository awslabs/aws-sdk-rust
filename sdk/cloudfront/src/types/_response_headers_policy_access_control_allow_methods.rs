// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of HTTP methods that CloudFront includes as values for the <code>Access-Control-Allow-Methods</code> HTTP response header.</p>
/// <p>For more information about the <code>Access-Control-Allow-Methods</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods">Access-Control-Allow-Methods</a> in the MDN Web Docs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResponseHeadersPolicyAccessControlAllowMethods {
    /// <p>The number of HTTP methods in the list.</p>
    pub quantity: i32,
    /// <p>The list of HTTP methods. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>GET</code> </p> </li>
    /// <li> <p> <code>DELETE</code> </p> </li>
    /// <li> <p> <code>HEAD</code> </p> </li>
    /// <li> <p> <code>OPTIONS</code> </p> </li>
    /// <li> <p> <code>PATCH</code> </p> </li>
    /// <li> <p> <code>POST</code> </p> </li>
    /// <li> <p> <code>PUT</code> </p> </li>
    /// <li> <p> <code>ALL</code> </p> </li>
    /// </ul>
    /// <p> <code>ALL</code> is a special value that includes all of the listed HTTP methods.</p>
    pub items: ::std::vec::Vec<crate::types::ResponseHeadersPolicyAccessControlAllowMethodsValues>,
}
impl ResponseHeadersPolicyAccessControlAllowMethods {
    /// <p>The number of HTTP methods in the list.</p>
    pub fn quantity(&self) -> i32 {
        self.quantity
    }
    /// <p>The list of HTTP methods. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>GET</code> </p> </li>
    /// <li> <p> <code>DELETE</code> </p> </li>
    /// <li> <p> <code>HEAD</code> </p> </li>
    /// <li> <p> <code>OPTIONS</code> </p> </li>
    /// <li> <p> <code>PATCH</code> </p> </li>
    /// <li> <p> <code>POST</code> </p> </li>
    /// <li> <p> <code>PUT</code> </p> </li>
    /// <li> <p> <code>ALL</code> </p> </li>
    /// </ul>
    /// <p> <code>ALL</code> is a special value that includes all of the listed HTTP methods.</p>
    pub fn items(&self) -> &[crate::types::ResponseHeadersPolicyAccessControlAllowMethodsValues] {
        use std::ops::Deref;
        self.items.deref()
    }
}
impl ResponseHeadersPolicyAccessControlAllowMethods {
    /// Creates a new builder-style object to manufacture [`ResponseHeadersPolicyAccessControlAllowMethods`](crate::types::ResponseHeadersPolicyAccessControlAllowMethods).
    pub fn builder() -> crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder {
        crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder::default()
    }
}

/// A builder for [`ResponseHeadersPolicyAccessControlAllowMethods`](crate::types::ResponseHeadersPolicyAccessControlAllowMethods).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResponseHeadersPolicyAccessControlAllowMethodsBuilder {
    pub(crate) quantity: ::std::option::Option<i32>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyAccessControlAllowMethodsValues>>,
}
impl ResponseHeadersPolicyAccessControlAllowMethodsBuilder {
    /// <p>The number of HTTP methods in the list.</p>
    /// This field is required.
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of HTTP methods in the list.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The number of HTTP methods in the list.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<i32> {
        &self.quantity
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The list of HTTP methods. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>GET</code> </p> </li>
    /// <li> <p> <code>DELETE</code> </p> </li>
    /// <li> <p> <code>HEAD</code> </p> </li>
    /// <li> <p> <code>OPTIONS</code> </p> </li>
    /// <li> <p> <code>PATCH</code> </p> </li>
    /// <li> <p> <code>POST</code> </p> </li>
    /// <li> <p> <code>PUT</code> </p> </li>
    /// <li> <p> <code>ALL</code> </p> </li>
    /// </ul>
    /// <p> <code>ALL</code> is a special value that includes all of the listed HTTP methods.</p>
    pub fn items(mut self, input: crate::types::ResponseHeadersPolicyAccessControlAllowMethodsValues) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of HTTP methods. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>GET</code> </p> </li>
    /// <li> <p> <code>DELETE</code> </p> </li>
    /// <li> <p> <code>HEAD</code> </p> </li>
    /// <li> <p> <code>OPTIONS</code> </p> </li>
    /// <li> <p> <code>PATCH</code> </p> </li>
    /// <li> <p> <code>POST</code> </p> </li>
    /// <li> <p> <code>PUT</code> </p> </li>
    /// <li> <p> <code>ALL</code> </p> </li>
    /// </ul>
    /// <p> <code>ALL</code> is a special value that includes all of the listed HTTP methods.</p>
    pub fn set_items(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyAccessControlAllowMethodsValues>>,
    ) -> Self {
        self.items = input;
        self
    }
    /// <p>The list of HTTP methods. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>GET</code> </p> </li>
    /// <li> <p> <code>DELETE</code> </p> </li>
    /// <li> <p> <code>HEAD</code> </p> </li>
    /// <li> <p> <code>OPTIONS</code> </p> </li>
    /// <li> <p> <code>PATCH</code> </p> </li>
    /// <li> <p> <code>POST</code> </p> </li>
    /// <li> <p> <code>PUT</code> </p> </li>
    /// <li> <p> <code>ALL</code> </p> </li>
    /// </ul>
    /// <p> <code>ALL</code> is a special value that includes all of the listed HTTP methods.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyAccessControlAllowMethodsValues>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`ResponseHeadersPolicyAccessControlAllowMethods`](crate::types::ResponseHeadersPolicyAccessControlAllowMethods).
    /// This method will fail if any of the following fields are not set:
    /// - [`quantity`](crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder::quantity)
    /// - [`items`](crate::types::builders::ResponseHeadersPolicyAccessControlAllowMethodsBuilder::items)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ResponseHeadersPolicyAccessControlAllowMethods, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResponseHeadersPolicyAccessControlAllowMethods {
            quantity: self.quantity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quantity",
                    "quantity was not specified but it is required when building ResponseHeadersPolicyAccessControlAllowMethods",
                )
            })?,
            items: self.items.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "items",
                    "items was not specified but it is required when building ResponseHeadersPolicyAccessControlAllowMethods",
                )
            })?,
        })
    }
}
