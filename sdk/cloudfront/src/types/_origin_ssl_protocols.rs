// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use when establishing an HTTPS connection with your origin.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OriginSslProtocols {
    /// <p>The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.</p>
    pub quantity: i32,
    /// <p>A list that contains allowed SSL/TLS protocols for this distribution.</p>
    pub items: ::std::vec::Vec<crate::types::SslProtocol>,
}
impl OriginSslProtocols {
    /// <p>The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.</p>
    pub fn quantity(&self) -> i32 {
        self.quantity
    }
    /// <p>A list that contains allowed SSL/TLS protocols for this distribution.</p>
    pub fn items(&self) -> &[crate::types::SslProtocol] {
        use std::ops::Deref;
        self.items.deref()
    }
}
impl OriginSslProtocols {
    /// Creates a new builder-style object to manufacture [`OriginSslProtocols`](crate::types::OriginSslProtocols).
    pub fn builder() -> crate::types::builders::OriginSslProtocolsBuilder {
        crate::types::builders::OriginSslProtocolsBuilder::default()
    }
}

/// A builder for [`OriginSslProtocols`](crate::types::OriginSslProtocols).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OriginSslProtocolsBuilder {
    pub(crate) quantity: ::std::option::Option<i32>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::SslProtocol>>,
}
impl OriginSslProtocolsBuilder {
    /// <p>The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.</p>
    /// This field is required.
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing an HTTPS connection with this origin.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<i32> {
        &self.quantity
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A list that contains allowed SSL/TLS protocols for this distribution.</p>
    pub fn items(mut self, input: crate::types::SslProtocol) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list that contains allowed SSL/TLS protocols for this distribution.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SslProtocol>>) -> Self {
        self.items = input;
        self
    }
    /// <p>A list that contains allowed SSL/TLS protocols for this distribution.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SslProtocol>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`OriginSslProtocols`](crate::types::OriginSslProtocols).
    /// This method will fail if any of the following fields are not set:
    /// - [`quantity`](crate::types::builders::OriginSslProtocolsBuilder::quantity)
    /// - [`items`](crate::types::builders::OriginSslProtocolsBuilder::items)
    pub fn build(self) -> ::std::result::Result<crate::types::OriginSslProtocols, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OriginSslProtocols {
            quantity: self.quantity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quantity",
                    "quantity was not specified but it is required when building OriginSslProtocols",
                )
            })?,
            items: self.items.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "items",
                    "items was not specified but it is required when building OriginSslProtocols",
                )
            })?,
        })
    }
}
