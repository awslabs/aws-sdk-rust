// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An origin in an origin group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OriginGroupMember {
    /// <p>The ID for an origin in an origin group.</p>
    pub origin_id: ::std::string::String,
}
impl OriginGroupMember {
    /// <p>The ID for an origin in an origin group.</p>
    pub fn origin_id(&self) -> &str {
        use std::ops::Deref;
        self.origin_id.deref()
    }
}
impl OriginGroupMember {
    /// Creates a new builder-style object to manufacture [`OriginGroupMember`](crate::types::OriginGroupMember).
    pub fn builder() -> crate::types::builders::OriginGroupMemberBuilder {
        crate::types::builders::OriginGroupMemberBuilder::default()
    }
}

/// A builder for [`OriginGroupMember`](crate::types::OriginGroupMember).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OriginGroupMemberBuilder {
    pub(crate) origin_id: ::std::option::Option<::std::string::String>,
}
impl OriginGroupMemberBuilder {
    /// <p>The ID for an origin in an origin group.</p>
    /// This field is required.
    pub fn origin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for an origin in an origin group.</p>
    pub fn set_origin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_id = input;
        self
    }
    /// <p>The ID for an origin in an origin group.</p>
    pub fn get_origin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_id
    }
    /// Consumes the builder and constructs a [`OriginGroupMember`](crate::types::OriginGroupMember).
    /// This method will fail if any of the following fields are not set:
    /// - [`origin_id`](crate::types::builders::OriginGroupMemberBuilder::origin_id)
    pub fn build(self) -> ::std::result::Result<crate::types::OriginGroupMember, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OriginGroupMember {
            origin_id: self.origin_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "origin_id",
                    "origin_id was not specified but it is required when building OriginGroupMember",
                )
            })?,
        })
    }
}
