// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of HTTP response header names and their values. CloudFront includes these headers in HTTP responses that it sends for requests that match a cache behavior that's associated with this response headers policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResponseHeadersPolicyCustomHeadersConfig {
    /// <p>The number of HTTP response headers in the list.</p>
    pub quantity: i32,
    /// <p>The list of HTTP response headers and their values.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyCustomHeader>>,
}
impl ResponseHeadersPolicyCustomHeadersConfig {
    /// <p>The number of HTTP response headers in the list.</p>
    pub fn quantity(&self) -> i32 {
        self.quantity
    }
    /// <p>The list of HTTP response headers and their values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::ResponseHeadersPolicyCustomHeader] {
        self.items.as_deref().unwrap_or_default()
    }
}
impl ResponseHeadersPolicyCustomHeadersConfig {
    /// Creates a new builder-style object to manufacture [`ResponseHeadersPolicyCustomHeadersConfig`](crate::types::ResponseHeadersPolicyCustomHeadersConfig).
    pub fn builder() -> crate::types::builders::ResponseHeadersPolicyCustomHeadersConfigBuilder {
        crate::types::builders::ResponseHeadersPolicyCustomHeadersConfigBuilder::default()
    }
}

/// A builder for [`ResponseHeadersPolicyCustomHeadersConfig`](crate::types::ResponseHeadersPolicyCustomHeadersConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResponseHeadersPolicyCustomHeadersConfigBuilder {
    pub(crate) quantity: ::std::option::Option<i32>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyCustomHeader>>,
}
impl ResponseHeadersPolicyCustomHeadersConfigBuilder {
    /// <p>The number of HTTP response headers in the list.</p>
    /// This field is required.
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of HTTP response headers in the list.</p>
    pub fn set_quantity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// <p>The number of HTTP response headers in the list.</p>
    pub fn get_quantity(&self) -> &::std::option::Option<i32> {
        &self.quantity
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The list of HTTP response headers and their values.</p>
    pub fn items(mut self, input: crate::types::ResponseHeadersPolicyCustomHeader) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of HTTP response headers and their values.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyCustomHeader>>) -> Self {
        self.items = input;
        self
    }
    /// <p>The list of HTTP response headers and their values.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResponseHeadersPolicyCustomHeader>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`ResponseHeadersPolicyCustomHeadersConfig`](crate::types::ResponseHeadersPolicyCustomHeadersConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`quantity`](crate::types::builders::ResponseHeadersPolicyCustomHeadersConfigBuilder::quantity)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ResponseHeadersPolicyCustomHeadersConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResponseHeadersPolicyCustomHeadersConfig {
            quantity: self.quantity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "quantity",
                    "quantity was not specified but it is required when building ResponseHeadersPolicyCustomHeadersConfig",
                )
            })?,
            items: self.items,
        })
    }
}
