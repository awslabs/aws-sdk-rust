// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in requests that CloudFront sends to the origin.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OriginRequestPolicyQueryStringsConfig {
    /// <p>Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub query_string_behavior:
        std::option::Option<crate::types::OriginRequestPolicyQueryStringBehavior>,
    /// <p>Contains a list of the query strings in viewer requests that are included in requests that CloudFront sends to the origin.</p>
    #[doc(hidden)]
    pub query_strings: std::option::Option<crate::types::QueryStringNames>,
}
impl OriginRequestPolicyQueryStringsConfig {
    /// <p>Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn query_string_behavior(
        &self,
    ) -> std::option::Option<&crate::types::OriginRequestPolicyQueryStringBehavior> {
        self.query_string_behavior.as_ref()
    }
    /// <p>Contains a list of the query strings in viewer requests that are included in requests that CloudFront sends to the origin.</p>
    pub fn query_strings(&self) -> std::option::Option<&crate::types::QueryStringNames> {
        self.query_strings.as_ref()
    }
}
impl OriginRequestPolicyQueryStringsConfig {
    /// Creates a new builder-style object to manufacture [`OriginRequestPolicyQueryStringsConfig`](crate::types::OriginRequestPolicyQueryStringsConfig).
    pub fn builder() -> crate::types::builders::OriginRequestPolicyQueryStringsConfigBuilder {
        crate::types::builders::OriginRequestPolicyQueryStringsConfigBuilder::default()
    }
}

/// A builder for [`OriginRequestPolicyQueryStringsConfig`](crate::types::OriginRequestPolicyQueryStringsConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OriginRequestPolicyQueryStringsConfigBuilder {
    pub(crate) query_string_behavior:
        std::option::Option<crate::types::OriginRequestPolicyQueryStringBehavior>,
    pub(crate) query_strings: std::option::Option<crate::types::QueryStringNames>,
}
impl OriginRequestPolicyQueryStringsConfigBuilder {
    /// <p>Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn query_string_behavior(
        mut self,
        input: crate::types::OriginRequestPolicyQueryStringBehavior,
    ) -> Self {
        self.query_string_behavior = Some(input);
        self
    }
    /// <p>Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Query strings in viewer requests are not included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any query strings that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The query strings in viewer requests that are listed in the <code>QueryStringNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All query strings in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn set_query_string_behavior(
        mut self,
        input: std::option::Option<crate::types::OriginRequestPolicyQueryStringBehavior>,
    ) -> Self {
        self.query_string_behavior = input;
        self
    }
    /// <p>Contains a list of the query strings in viewer requests that are included in requests that CloudFront sends to the origin.</p>
    pub fn query_strings(mut self, input: crate::types::QueryStringNames) -> Self {
        self.query_strings = Some(input);
        self
    }
    /// <p>Contains a list of the query strings in viewer requests that are included in requests that CloudFront sends to the origin.</p>
    pub fn set_query_strings(
        mut self,
        input: std::option::Option<crate::types::QueryStringNames>,
    ) -> Self {
        self.query_strings = input;
        self
    }
    /// Consumes the builder and constructs a [`OriginRequestPolicyQueryStringsConfig`](crate::types::OriginRequestPolicyQueryStringsConfig).
    pub fn build(self) -> crate::types::OriginRequestPolicyQueryStringsConfig {
        crate::types::OriginRequestPolicyQueryStringsConfig {
            query_string_behavior: self.query_string_behavior,
            query_strings: self.query_strings,
        }
    }
}
