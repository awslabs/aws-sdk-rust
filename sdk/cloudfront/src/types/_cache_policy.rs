// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A cache policy.</p>
/// <p>When it's attached to a cache behavior, the cache policy determines the following:</p>
/// <ul>
/// <li> <p>The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.</p> </li>
/// <li> <p>The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.</p> </li>
/// </ul>
/// <p>The headers, cookies, and query strings that are included in the cache key are automatically included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but <i>not</i> include them in the cache key, use <code>OriginRequestPolicy</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CachePolicy {
    /// <p>The unique identifier for the cache policy.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The date and time when the cache policy was last modified.</p>
    #[doc(hidden)]
    pub last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The cache policy configuration.</p>
    #[doc(hidden)]
    pub cache_policy_config: std::option::Option<crate::types::CachePolicyConfig>,
}
impl CachePolicy {
    /// <p>The unique identifier for the cache policy.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The date and time when the cache policy was last modified.</p>
    pub fn last_modified_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The cache policy configuration.</p>
    pub fn cache_policy_config(&self) -> std::option::Option<&crate::types::CachePolicyConfig> {
        self.cache_policy_config.as_ref()
    }
}
impl CachePolicy {
    /// Creates a new builder-style object to manufacture [`CachePolicy`](crate::types::CachePolicy).
    pub fn builder() -> crate::types::builders::CachePolicyBuilder {
        crate::types::builders::CachePolicyBuilder::default()
    }
}

/// A builder for [`CachePolicy`](crate::types::CachePolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CachePolicyBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) last_modified_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) cache_policy_config: std::option::Option<crate::types::CachePolicyConfig>,
}
impl CachePolicyBuilder {
    /// <p>The unique identifier for the cache policy.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the cache policy.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The date and time when the cache policy was last modified.</p>
    pub fn last_modified_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = Some(input);
        self
    }
    /// <p>The date and time when the cache policy was last modified.</p>
    pub fn set_last_modified_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The cache policy configuration.</p>
    pub fn cache_policy_config(mut self, input: crate::types::CachePolicyConfig) -> Self {
        self.cache_policy_config = Some(input);
        self
    }
    /// <p>The cache policy configuration.</p>
    pub fn set_cache_policy_config(
        mut self,
        input: std::option::Option<crate::types::CachePolicyConfig>,
    ) -> Self {
        self.cache_policy_config = input;
        self
    }
    /// Consumes the builder and constructs a [`CachePolicy`](crate::types::CachePolicy).
    pub fn build(self) -> crate::types::CachePolicy {
        crate::types::CachePolicy {
            id: self.id,
            last_modified_time: self.last_modified_time,
            cache_policy_config: self.cache_policy_config,
        }
    }
}
