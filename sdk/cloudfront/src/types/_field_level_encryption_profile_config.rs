// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex data type of profiles for the field-level encryption.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FieldLevelEncryptionProfileConfig {
    /// <p>Profile name for the field-level encryption profile.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A unique number that ensures that the request can't be replayed.</p>
    #[doc(hidden)]
    pub caller_reference: std::option::Option<std::string::String>,
    /// <p>An optional comment for the field-level encryption profile. The comment cannot be longer than 128 characters.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.</p>
    #[doc(hidden)]
    pub encryption_entities: std::option::Option<crate::types::EncryptionEntities>,
}
impl FieldLevelEncryptionProfileConfig {
    /// <p>Profile name for the field-level encryption profile.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A unique number that ensures that the request can't be replayed.</p>
    pub fn caller_reference(&self) -> std::option::Option<&str> {
        self.caller_reference.as_deref()
    }
    /// <p>An optional comment for the field-level encryption profile. The comment cannot be longer than 128 characters.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.</p>
    pub fn encryption_entities(&self) -> std::option::Option<&crate::types::EncryptionEntities> {
        self.encryption_entities.as_ref()
    }
}
impl FieldLevelEncryptionProfileConfig {
    /// Creates a new builder-style object to manufacture [`FieldLevelEncryptionProfileConfig`](crate::types::FieldLevelEncryptionProfileConfig).
    pub fn builder() -> crate::types::builders::FieldLevelEncryptionProfileConfigBuilder {
        crate::types::builders::FieldLevelEncryptionProfileConfigBuilder::default()
    }
}

/// A builder for [`FieldLevelEncryptionProfileConfig`](crate::types::FieldLevelEncryptionProfileConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FieldLevelEncryptionProfileConfigBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) caller_reference: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) encryption_entities: std::option::Option<crate::types::EncryptionEntities>,
}
impl FieldLevelEncryptionProfileConfigBuilder {
    /// <p>Profile name for the field-level encryption profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Profile name for the field-level encryption profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A unique number that ensures that the request can't be replayed.</p>
    pub fn caller_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.caller_reference = Some(input.into());
        self
    }
    /// <p>A unique number that ensures that the request can't be replayed.</p>
    pub fn set_caller_reference(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.caller_reference = input;
        self
    }
    /// <p>An optional comment for the field-level encryption profile. The comment cannot be longer than 128 characters.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>An optional comment for the field-level encryption profile. The comment cannot be longer than 128 characters.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.</p>
    pub fn encryption_entities(mut self, input: crate::types::EncryptionEntities) -> Self {
        self.encryption_entities = Some(input);
        self
    }
    /// <p>A complex data type of encryption entities for the field-level encryption profile that include the public key ID, provider, and field patterns for specifying which fields to encrypt with this key.</p>
    pub fn set_encryption_entities(
        mut self,
        input: std::option::Option<crate::types::EncryptionEntities>,
    ) -> Self {
        self.encryption_entities = input;
        self
    }
    /// Consumes the builder and constructs a [`FieldLevelEncryptionProfileConfig`](crate::types::FieldLevelEncryptionProfileConfig).
    pub fn build(self) -> crate::types::FieldLevelEncryptionProfileConfig {
        crate::types::FieldLevelEncryptionProfileConfig {
            name: self.name,
            caller_reference: self.caller_reference,
            comment: self.comment,
            encryption_entities: self.encryption_entities,
        }
    }
}
