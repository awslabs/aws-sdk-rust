// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of key groups whose public keys CloudFront can use to verify the signatures of signed URLs and signed cookies.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrustedKeyGroups {
    /// <p>This field is <code>true</code> if any of the key groups in the list have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not, this field is <code>false</code>.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The number of key groups in the list.</p>
    #[doc(hidden)]
    pub quantity: std::option::Option<i32>,
    /// <p>A list of key groups identifiers.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TrustedKeyGroups {
    /// <p>This field is <code>true</code> if any of the key groups in the list have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not, this field is <code>false</code>.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The number of key groups in the list.</p>
    pub fn quantity(&self) -> std::option::Option<i32> {
        self.quantity
    }
    /// <p>A list of key groups identifiers.</p>
    pub fn items(&self) -> std::option::Option<&[std::string::String]> {
        self.items.as_deref()
    }
}
impl TrustedKeyGroups {
    /// Creates a new builder-style object to manufacture [`TrustedKeyGroups`](crate::types::TrustedKeyGroups).
    pub fn builder() -> crate::types::builders::TrustedKeyGroupsBuilder {
        crate::types::builders::TrustedKeyGroupsBuilder::default()
    }
}

/// A builder for [`TrustedKeyGroups`](crate::types::TrustedKeyGroups).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrustedKeyGroupsBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) quantity: std::option::Option<i32>,
    pub(crate) items: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TrustedKeyGroupsBuilder {
    /// <p>This field is <code>true</code> if any of the key groups in the list have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not, this field is <code>false</code>.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>This field is <code>true</code> if any of the key groups in the list have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies. If not, this field is <code>false</code>.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The number of key groups in the list.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = Some(input);
        self
    }
    /// <p>The number of key groups in the list.</p>
    pub fn set_quantity(mut self, input: std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A list of key groups identifiers.</p>
    pub fn items(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input.into());
        self.items = Some(v);
        self
    }
    /// <p>A list of key groups identifiers.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.items = input;
        self
    }
    /// Consumes the builder and constructs a [`TrustedKeyGroups`](crate::types::TrustedKeyGroups).
    pub fn build(self) -> crate::types::TrustedKeyGroups {
        crate::types::TrustedKeyGroups {
            enabled: self.enabled,
            quantity: self.quantity,
            items: self.items,
        }
    }
}
