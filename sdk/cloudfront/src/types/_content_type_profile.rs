// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A field-level encryption content type profile.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContentTypeProfile {
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::Format>,
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    #[doc(hidden)]
    pub profile_id: std::option::Option<std::string::String>,
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
}
impl ContentTypeProfile {
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::Format> {
        self.format.as_ref()
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn profile_id(&self) -> std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
}
impl ContentTypeProfile {
    /// Creates a new builder-style object to manufacture [`ContentTypeProfile`](crate::types::ContentTypeProfile).
    pub fn builder() -> crate::types::builders::ContentTypeProfileBuilder {
        crate::types::builders::ContentTypeProfileBuilder::default()
    }
}

/// A builder for [`ContentTypeProfile`](crate::types::ContentTypeProfile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContentTypeProfileBuilder {
    pub(crate) format: std::option::Option<crate::types::Format>,
    pub(crate) profile_id: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<std::string::String>,
}
impl ContentTypeProfileBuilder {
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub fn format(mut self, input: crate::types::Format) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::Format>) -> Self {
        self.format = input;
        self
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_id = Some(input.into());
        self
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ContentTypeProfile`](crate::types::ContentTypeProfile).
    pub fn build(self) -> crate::types::ContentTypeProfile {
        crate::types::ContentTypeProfile {
            format: self.format,
            profile_id: self.profile_id,
            content_type: self.content_type,
        }
    }
}
