// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A field-level encryption content type profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentTypeProfile {
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub format: crate::types::Format,
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub content_type: ::std::string::String,
}
impl ContentTypeProfile {
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub fn format(&self) -> &crate::types::Format {
        &self.format
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
}
impl ContentTypeProfile {
    /// Creates a new builder-style object to manufacture [`ContentTypeProfile`](crate::types::ContentTypeProfile).
    pub fn builder() -> crate::types::builders::ContentTypeProfileBuilder {
        crate::types::builders::ContentTypeProfileBuilder::default()
    }
}

/// A builder for [`ContentTypeProfile`](crate::types::ContentTypeProfile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContentTypeProfileBuilder {
    pub(crate) format: ::std::option::Option<crate::types::Format>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
}
impl ContentTypeProfileBuilder {
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::Format) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::Format>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format for a field-level encryption content type-profile mapping.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::Format> {
        &self.format
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The profile ID for a field-level encryption content type-profile mapping.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The content type for a field-level encryption content type-profile mapping.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// Consumes the builder and constructs a [`ContentTypeProfile`](crate::types::ContentTypeProfile).
    /// This method will fail if any of the following fields are not set:
    /// - [`format`](crate::types::builders::ContentTypeProfileBuilder::format)
    /// - [`content_type`](crate::types::builders::ContentTypeProfileBuilder::content_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ContentTypeProfile, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContentTypeProfile {
            format: self.format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "format",
                    "format was not specified but it is required when building ContentTypeProfile",
                )
            })?,
            profile_id: self.profile_id,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building ContentTypeProfile",
                )
            })?,
        })
    }
}
