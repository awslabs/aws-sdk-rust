// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the information about a CloudFront distribution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DistributionSummary {
    /// <p>The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub id: ::std::string::String,
    /// <p>The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your Amazon Web Services account ID.</p>
    pub arn: ::std::string::String,
    /// <p>The current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.</p>
    pub status: ::std::string::String,
    /// <p>The date and time the distribution was last modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>The domain name that corresponds to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub domain_name: ::std::string::String,
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.</p>
    pub aliases: ::std::option::Option<crate::types::Aliases>,
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub origins: ::std::option::Option<crate::types::Origins>,
    /// <p>A complex type that contains information about origin groups for this distribution.</p>
    pub origin_groups: ::std::option::Option<crate::types::OriginGroups>,
    /// <p>A complex type that describes the default cache behavior if you don't specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.</p>
    pub default_cache_behavior: ::std::option::Option<crate::types::DefaultCacheBehavior>,
    /// <p>A complex type that contains zero or more <code>CacheBehavior</code> elements.</p>
    pub cache_behaviors: ::std::option::Option<crate::types::CacheBehaviors>,
    /// <p>A complex type that contains zero or more <code>CustomErrorResponses</code> elements.</p>
    pub custom_error_responses: ::std::option::Option<crate::types::CustomErrorResponses>,
    /// <p>The comment originally specified when this distribution was created.</p>
    pub comment: ::std::string::String,
    /// <p>A complex type that contains information about price class for this streaming distribution.</p>
    pub price_class: crate::types::PriceClass,
    /// <p>Whether the distribution is enabled to accept user requests for content.</p>
    pub enabled: bool,
    /// <p>A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.</p>
    pub viewer_certificate: ::std::option::Option<crate::types::ViewerCertificate>,
    /// <p>A complex type that identifies ways in which you want to restrict distribution of your content.</p>
    pub restrictions: ::std::option::Option<crate::types::Restrictions>,
    /// <p>The Web ACL Id (if any) associated with the distribution.</p>
    pub web_acl_id: ::std::string::String,
    /// <p>Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't support <code>HTTP/2</code> will automatically use an earlier version.</p>
    pub http_version: crate::types::HttpVersion,
    /// <p>Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.</p>
    pub is_ipv6_enabled: bool,
    /// <p>Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions.</p>
    /// <p>For more information about ICP recordals, see <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html"> Signup, Accounts, and Credentials</a> in <i>Getting Started with Amazon Web Services services in China</i>.</p>
    pub alias_icp_recordals: ::std::option::Option<::std::vec::Vec<crate::types::AliasIcpRecordal>>,
    /// <p>Whether the primary distribution has a staging distribution enabled.</p>
    pub staging: bool,
}
impl DistributionSummary {
    /// <p>The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your Amazon Web Services account ID.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>The date and time the distribution was last modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>The domain name that corresponds to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub fn domain_name(&self) -> &str {
        use std::ops::Deref;
        self.domain_name.deref()
    }
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.</p>
    pub fn aliases(&self) -> ::std::option::Option<&crate::types::Aliases> {
        self.aliases.as_ref()
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub fn origins(&self) -> ::std::option::Option<&crate::types::Origins> {
        self.origins.as_ref()
    }
    /// <p>A complex type that contains information about origin groups for this distribution.</p>
    pub fn origin_groups(&self) -> ::std::option::Option<&crate::types::OriginGroups> {
        self.origin_groups.as_ref()
    }
    /// <p>A complex type that describes the default cache behavior if you don't specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.</p>
    pub fn default_cache_behavior(&self) -> ::std::option::Option<&crate::types::DefaultCacheBehavior> {
        self.default_cache_behavior.as_ref()
    }
    /// <p>A complex type that contains zero or more <code>CacheBehavior</code> elements.</p>
    pub fn cache_behaviors(&self) -> ::std::option::Option<&crate::types::CacheBehaviors> {
        self.cache_behaviors.as_ref()
    }
    /// <p>A complex type that contains zero or more <code>CustomErrorResponses</code> elements.</p>
    pub fn custom_error_responses(&self) -> ::std::option::Option<&crate::types::CustomErrorResponses> {
        self.custom_error_responses.as_ref()
    }
    /// <p>The comment originally specified when this distribution was created.</p>
    pub fn comment(&self) -> &str {
        use std::ops::Deref;
        self.comment.deref()
    }
    /// <p>A complex type that contains information about price class for this streaming distribution.</p>
    pub fn price_class(&self) -> &crate::types::PriceClass {
        &self.price_class
    }
    /// <p>Whether the distribution is enabled to accept user requests for content.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.</p>
    pub fn viewer_certificate(&self) -> ::std::option::Option<&crate::types::ViewerCertificate> {
        self.viewer_certificate.as_ref()
    }
    /// <p>A complex type that identifies ways in which you want to restrict distribution of your content.</p>
    pub fn restrictions(&self) -> ::std::option::Option<&crate::types::Restrictions> {
        self.restrictions.as_ref()
    }
    /// <p>The Web ACL Id (if any) associated with the distribution.</p>
    pub fn web_acl_id(&self) -> &str {
        use std::ops::Deref;
        self.web_acl_id.deref()
    }
    /// <p>Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't support <code>HTTP/2</code> will automatically use an earlier version.</p>
    pub fn http_version(&self) -> &crate::types::HttpVersion {
        &self.http_version
    }
    /// <p>Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.</p>
    pub fn is_ipv6_enabled(&self) -> bool {
        self.is_ipv6_enabled
    }
    /// <p>Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions.</p>
    /// <p>For more information about ICP recordals, see <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html"> Signup, Accounts, and Credentials</a> in <i>Getting Started with Amazon Web Services services in China</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alias_icp_recordals.is_none()`.
    pub fn alias_icp_recordals(&self) -> &[crate::types::AliasIcpRecordal] {
        self.alias_icp_recordals.as_deref().unwrap_or_default()
    }
    /// <p>Whether the primary distribution has a staging distribution enabled.</p>
    pub fn staging(&self) -> bool {
        self.staging
    }
}
impl DistributionSummary {
    /// Creates a new builder-style object to manufacture [`DistributionSummary`](crate::types::DistributionSummary).
    pub fn builder() -> crate::types::builders::DistributionSummaryBuilder {
        crate::types::builders::DistributionSummaryBuilder::default()
    }
}

/// A builder for [`DistributionSummary`](crate::types::DistributionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DistributionSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) aliases: ::std::option::Option<crate::types::Aliases>,
    pub(crate) origins: ::std::option::Option<crate::types::Origins>,
    pub(crate) origin_groups: ::std::option::Option<crate::types::OriginGroups>,
    pub(crate) default_cache_behavior: ::std::option::Option<crate::types::DefaultCacheBehavior>,
    pub(crate) cache_behaviors: ::std::option::Option<crate::types::CacheBehaviors>,
    pub(crate) custom_error_responses: ::std::option::Option<crate::types::CustomErrorResponses>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) price_class: ::std::option::Option<crate::types::PriceClass>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) viewer_certificate: ::std::option::Option<crate::types::ViewerCertificate>,
    pub(crate) restrictions: ::std::option::Option<crate::types::Restrictions>,
    pub(crate) web_acl_id: ::std::option::Option<::std::string::String>,
    pub(crate) http_version: ::std::option::Option<crate::types::HttpVersion>,
    pub(crate) is_ipv6_enabled: ::std::option::Option<bool>,
    pub(crate) alias_icp_recordals: ::std::option::Option<::std::vec::Vec<crate::types::AliasIcpRecordal>>,
    pub(crate) staging: ::std::option::Option<bool>,
}
impl DistributionSummaryBuilder {
    /// <p>The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the distribution. For example: <code>EDFDVBD632BHDS5</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your Amazon Web Services account ID.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your Amazon Web Services account ID.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the distribution. For example: <code>arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5</code>, where <code>123456789012</code> is your Amazon Web Services account ID.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the distribution. When the status is <code>Deployed</code>, the distribution's information is propagated to all CloudFront edge locations.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The date and time the distribution was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the distribution was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time the distribution was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The domain name that corresponds to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name that corresponds to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name that corresponds to the distribution, for example, <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.</p>
    /// This field is required.
    pub fn aliases(mut self, input: crate::types::Aliases) -> Self {
        self.aliases = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.</p>
    pub fn set_aliases(mut self, input: ::std::option::Option<crate::types::Aliases>) -> Self {
        self.aliases = input;
        self
    }
    /// <p>A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.</p>
    pub fn get_aliases(&self) -> &::std::option::Option<crate::types::Aliases> {
        &self.aliases
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    /// This field is required.
    pub fn origins(mut self, input: crate::types::Origins) -> Self {
        self.origins = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub fn set_origins(mut self, input: ::std::option::Option<crate::types::Origins>) -> Self {
        self.origins = input;
        self
    }
    /// <p>A complex type that contains information about origins for this distribution.</p>
    pub fn get_origins(&self) -> &::std::option::Option<crate::types::Origins> {
        &self.origins
    }
    /// <p>A complex type that contains information about origin groups for this distribution.</p>
    pub fn origin_groups(mut self, input: crate::types::OriginGroups) -> Self {
        self.origin_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about origin groups for this distribution.</p>
    pub fn set_origin_groups(mut self, input: ::std::option::Option<crate::types::OriginGroups>) -> Self {
        self.origin_groups = input;
        self
    }
    /// <p>A complex type that contains information about origin groups for this distribution.</p>
    pub fn get_origin_groups(&self) -> &::std::option::Option<crate::types::OriginGroups> {
        &self.origin_groups
    }
    /// <p>A complex type that describes the default cache behavior if you don't specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.</p>
    /// This field is required.
    pub fn default_cache_behavior(mut self, input: crate::types::DefaultCacheBehavior) -> Self {
        self.default_cache_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that describes the default cache behavior if you don't specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.</p>
    pub fn set_default_cache_behavior(mut self, input: ::std::option::Option<crate::types::DefaultCacheBehavior>) -> Self {
        self.default_cache_behavior = input;
        self
    }
    /// <p>A complex type that describes the default cache behavior if you don't specify a <code>CacheBehavior</code> element or if files don't match any of the values of <code>PathPattern</code> in <code>CacheBehavior</code> elements. You must create exactly one default cache behavior.</p>
    pub fn get_default_cache_behavior(&self) -> &::std::option::Option<crate::types::DefaultCacheBehavior> {
        &self.default_cache_behavior
    }
    /// <p>A complex type that contains zero or more <code>CacheBehavior</code> elements.</p>
    /// This field is required.
    pub fn cache_behaviors(mut self, input: crate::types::CacheBehaviors) -> Self {
        self.cache_behaviors = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains zero or more <code>CacheBehavior</code> elements.</p>
    pub fn set_cache_behaviors(mut self, input: ::std::option::Option<crate::types::CacheBehaviors>) -> Self {
        self.cache_behaviors = input;
        self
    }
    /// <p>A complex type that contains zero or more <code>CacheBehavior</code> elements.</p>
    pub fn get_cache_behaviors(&self) -> &::std::option::Option<crate::types::CacheBehaviors> {
        &self.cache_behaviors
    }
    /// <p>A complex type that contains zero or more <code>CustomErrorResponses</code> elements.</p>
    /// This field is required.
    pub fn custom_error_responses(mut self, input: crate::types::CustomErrorResponses) -> Self {
        self.custom_error_responses = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains zero or more <code>CustomErrorResponses</code> elements.</p>
    pub fn set_custom_error_responses(mut self, input: ::std::option::Option<crate::types::CustomErrorResponses>) -> Self {
        self.custom_error_responses = input;
        self
    }
    /// <p>A complex type that contains zero or more <code>CustomErrorResponses</code> elements.</p>
    pub fn get_custom_error_responses(&self) -> &::std::option::Option<crate::types::CustomErrorResponses> {
        &self.custom_error_responses
    }
    /// <p>The comment originally specified when this distribution was created.</p>
    /// This field is required.
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The comment originally specified when this distribution was created.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The comment originally specified when this distribution was created.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>A complex type that contains information about price class for this streaming distribution.</p>
    /// This field is required.
    pub fn price_class(mut self, input: crate::types::PriceClass) -> Self {
        self.price_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about price class for this streaming distribution.</p>
    pub fn set_price_class(mut self, input: ::std::option::Option<crate::types::PriceClass>) -> Self {
        self.price_class = input;
        self
    }
    /// <p>A complex type that contains information about price class for this streaming distribution.</p>
    pub fn get_price_class(&self) -> &::std::option::Option<crate::types::PriceClass> {
        &self.price_class
    }
    /// <p>Whether the distribution is enabled to accept user requests for content.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the distribution is enabled to accept user requests for content.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Whether the distribution is enabled to accept user requests for content.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.</p>
    /// This field is required.
    pub fn viewer_certificate(mut self, input: crate::types::ViewerCertificate) -> Self {
        self.viewer_certificate = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.</p>
    pub fn set_viewer_certificate(mut self, input: ::std::option::Option<crate::types::ViewerCertificate>) -> Self {
        self.viewer_certificate = input;
        self
    }
    /// <p>A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.</p>
    pub fn get_viewer_certificate(&self) -> &::std::option::Option<crate::types::ViewerCertificate> {
        &self.viewer_certificate
    }
    /// <p>A complex type that identifies ways in which you want to restrict distribution of your content.</p>
    /// This field is required.
    pub fn restrictions(mut self, input: crate::types::Restrictions) -> Self {
        self.restrictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that identifies ways in which you want to restrict distribution of your content.</p>
    pub fn set_restrictions(mut self, input: ::std::option::Option<crate::types::Restrictions>) -> Self {
        self.restrictions = input;
        self
    }
    /// <p>A complex type that identifies ways in which you want to restrict distribution of your content.</p>
    pub fn get_restrictions(&self) -> &::std::option::Option<crate::types::Restrictions> {
        &self.restrictions
    }
    /// <p>The Web ACL Id (if any) associated with the distribution.</p>
    /// This field is required.
    pub fn web_acl_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_acl_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Web ACL Id (if any) associated with the distribution.</p>
    pub fn set_web_acl_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_acl_id = input;
        self
    }
    /// <p>The Web ACL Id (if any) associated with the distribution.</p>
    pub fn get_web_acl_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_acl_id
    }
    /// <p>Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't support <code>HTTP/2</code> will automatically use an earlier version.</p>
    /// This field is required.
    pub fn http_version(mut self, input: crate::types::HttpVersion) -> Self {
        self.http_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't support <code>HTTP/2</code> will automatically use an earlier version.</p>
    pub fn set_http_version(mut self, input: ::std::option::Option<crate::types::HttpVersion>) -> Self {
        self.http_version = input;
        self
    }
    /// <p>Specify the maximum HTTP version that you want viewers to use to communicate with CloudFront. The default value for new web distributions is <code>http2</code>. Viewers that don't support <code>HTTP/2</code> will automatically use an earlier version.</p>
    pub fn get_http_version(&self) -> &::std::option::Option<crate::types::HttpVersion> {
        &self.http_version
    }
    /// <p>Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.</p>
    /// This field is required.
    pub fn is_ipv6_enabled(mut self, input: bool) -> Self {
        self.is_ipv6_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.</p>
    pub fn set_is_ipv6_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_ipv6_enabled = input;
        self
    }
    /// <p>Whether CloudFront responds to IPv6 DNS requests with an IPv6 address for your distribution.</p>
    pub fn get_is_ipv6_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_ipv6_enabled
    }
    /// Appends an item to `alias_icp_recordals`.
    ///
    /// To override the contents of this collection use [`set_alias_icp_recordals`](Self::set_alias_icp_recordals).
    ///
    /// <p>Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions.</p>
    /// <p>For more information about ICP recordals, see <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html"> Signup, Accounts, and Credentials</a> in <i>Getting Started with Amazon Web Services services in China</i>.</p>
    pub fn alias_icp_recordals(mut self, input: crate::types::AliasIcpRecordal) -> Self {
        let mut v = self.alias_icp_recordals.unwrap_or_default();
        v.push(input);
        self.alias_icp_recordals = ::std::option::Option::Some(v);
        self
    }
    /// <p>Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions.</p>
    /// <p>For more information about ICP recordals, see <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html"> Signup, Accounts, and Credentials</a> in <i>Getting Started with Amazon Web Services services in China</i>.</p>
    pub fn set_alias_icp_recordals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AliasIcpRecordal>>) -> Self {
        self.alias_icp_recordals = input;
        self
    }
    /// <p>Amazon Web Services services in China customers must file for an Internet Content Provider (ICP) recordal if they want to serve content publicly on an alternate domain name, also known as a CNAME, that they've added to CloudFront. AliasICPRecordal provides the ICP recordal status for CNAMEs associated with distributions.</p>
    /// <p>For more information about ICP recordals, see <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/accounts-and-credentials.html"> Signup, Accounts, and Credentials</a> in <i>Getting Started with Amazon Web Services services in China</i>.</p>
    pub fn get_alias_icp_recordals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AliasIcpRecordal>> {
        &self.alias_icp_recordals
    }
    /// <p>Whether the primary distribution has a staging distribution enabled.</p>
    /// This field is required.
    pub fn staging(mut self, input: bool) -> Self {
        self.staging = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the primary distribution has a staging distribution enabled.</p>
    pub fn set_staging(mut self, input: ::std::option::Option<bool>) -> Self {
        self.staging = input;
        self
    }
    /// <p>Whether the primary distribution has a staging distribution enabled.</p>
    pub fn get_staging(&self) -> &::std::option::Option<bool> {
        &self.staging
    }
    /// Consumes the builder and constructs a [`DistributionSummary`](crate::types::DistributionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::DistributionSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::DistributionSummaryBuilder::arn)
    /// - [`status`](crate::types::builders::DistributionSummaryBuilder::status)
    /// - [`last_modified_time`](crate::types::builders::DistributionSummaryBuilder::last_modified_time)
    /// - [`domain_name`](crate::types::builders::DistributionSummaryBuilder::domain_name)
    /// - [`comment`](crate::types::builders::DistributionSummaryBuilder::comment)
    /// - [`price_class`](crate::types::builders::DistributionSummaryBuilder::price_class)
    /// - [`enabled`](crate::types::builders::DistributionSummaryBuilder::enabled)
    /// - [`web_acl_id`](crate::types::builders::DistributionSummaryBuilder::web_acl_id)
    /// - [`http_version`](crate::types::builders::DistributionSummaryBuilder::http_version)
    /// - [`is_ipv6_enabled`](crate::types::builders::DistributionSummaryBuilder::is_ipv6_enabled)
    /// - [`staging`](crate::types::builders::DistributionSummaryBuilder::staging)
    pub fn build(self) -> ::std::result::Result<crate::types::DistributionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DistributionSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building DistributionSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building DistributionSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DistributionSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building DistributionSummary",
                )
            })?,
            domain_name: self.domain_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_name",
                    "domain_name was not specified but it is required when building DistributionSummary",
                )
            })?,
            aliases: self.aliases,
            origins: self.origins,
            origin_groups: self.origin_groups,
            default_cache_behavior: self.default_cache_behavior,
            cache_behaviors: self.cache_behaviors,
            custom_error_responses: self.custom_error_responses,
            comment: self.comment.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "comment",
                    "comment was not specified but it is required when building DistributionSummary",
                )
            })?,
            price_class: self.price_class.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "price_class",
                    "price_class was not specified but it is required when building DistributionSummary",
                )
            })?,
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building DistributionSummary",
                )
            })?,
            viewer_certificate: self.viewer_certificate,
            restrictions: self.restrictions,
            web_acl_id: self.web_acl_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "web_acl_id",
                    "web_acl_id was not specified but it is required when building DistributionSummary",
                )
            })?,
            http_version: self.http_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "http_version",
                    "http_version was not specified but it is required when building DistributionSummary",
                )
            })?,
            is_ipv6_enabled: self.is_ipv6_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_ipv6_enabled",
                    "is_ipv6_enabled was not specified but it is required when building DistributionSummary",
                )
            })?,
            alias_icp_recordals: self.alias_icp_recordals,
            staging: self.staging.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "staging",
                    "staging was not specified but it is required when building DistributionSummary",
                )
            })?,
        })
    }
}
