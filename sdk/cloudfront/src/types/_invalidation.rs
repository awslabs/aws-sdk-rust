// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An invalidation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Invalidation {
    /// <p>The identifier for the invalidation request. For example: <code>IDFDVBD632BHDS5</code>.</p>
    pub id: ::std::string::String,
    /// <p>The status of the invalidation request. When the invalidation batch is finished, the status is <code>Completed</code>.</p>
    pub status: ::std::string::String,
    /// <p>The date and time the invalidation request was first made.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The current invalidation information for the batch request.</p>
    pub invalidation_batch: ::std::option::Option<crate::types::InvalidationBatch>,
}
impl Invalidation {
    /// <p>The identifier for the invalidation request. For example: <code>IDFDVBD632BHDS5</code>.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The status of the invalidation request. When the invalidation batch is finished, the status is <code>Completed</code>.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>The date and time the invalidation request was first made.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The current invalidation information for the batch request.</p>
    pub fn invalidation_batch(&self) -> ::std::option::Option<&crate::types::InvalidationBatch> {
        self.invalidation_batch.as_ref()
    }
}
impl Invalidation {
    /// Creates a new builder-style object to manufacture [`Invalidation`](crate::types::Invalidation).
    pub fn builder() -> crate::types::builders::InvalidationBuilder {
        crate::types::builders::InvalidationBuilder::default()
    }
}

/// A builder for [`Invalidation`](crate::types::Invalidation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InvalidationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) invalidation_batch: ::std::option::Option<crate::types::InvalidationBatch>,
}
impl InvalidationBuilder {
    /// <p>The identifier for the invalidation request. For example: <code>IDFDVBD632BHDS5</code>.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the invalidation request. For example: <code>IDFDVBD632BHDS5</code>.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the invalidation request. For example: <code>IDFDVBD632BHDS5</code>.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The status of the invalidation request. When the invalidation batch is finished, the status is <code>Completed</code>.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the invalidation request. When the invalidation batch is finished, the status is <code>Completed</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the invalidation request. When the invalidation batch is finished, the status is <code>Completed</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The date and time the invalidation request was first made.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the invalidation request was first made.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The date and time the invalidation request was first made.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The current invalidation information for the batch request.</p>
    /// This field is required.
    pub fn invalidation_batch(mut self, input: crate::types::InvalidationBatch) -> Self {
        self.invalidation_batch = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current invalidation information for the batch request.</p>
    pub fn set_invalidation_batch(mut self, input: ::std::option::Option<crate::types::InvalidationBatch>) -> Self {
        self.invalidation_batch = input;
        self
    }
    /// <p>The current invalidation information for the batch request.</p>
    pub fn get_invalidation_batch(&self) -> &::std::option::Option<crate::types::InvalidationBatch> {
        &self.invalidation_batch
    }
    /// Consumes the builder and constructs a [`Invalidation`](crate::types::Invalidation).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::InvalidationBuilder::id)
    /// - [`status`](crate::types::builders::InvalidationBuilder::status)
    /// - [`create_time`](crate::types::builders::InvalidationBuilder::create_time)
    pub fn build(self) -> ::std::result::Result<crate::types::Invalidation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Invalidation {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building Invalidation",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building Invalidation",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building Invalidation",
                )
            })?,
            invalidation_batch: self.invalidation_batch,
        })
    }
}
