// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringSubscription {
    /// <p>A subscription configuration for additional CloudWatch metrics.</p>
    #[doc(hidden)]
    pub realtime_metrics_subscription_config:
        std::option::Option<crate::types::RealtimeMetricsSubscriptionConfig>,
}
impl MonitoringSubscription {
    /// <p>A subscription configuration for additional CloudWatch metrics.</p>
    pub fn realtime_metrics_subscription_config(
        &self,
    ) -> std::option::Option<&crate::types::RealtimeMetricsSubscriptionConfig> {
        self.realtime_metrics_subscription_config.as_ref()
    }
}
impl MonitoringSubscription {
    /// Creates a new builder-style object to manufacture [`MonitoringSubscription`](crate::types::MonitoringSubscription).
    pub fn builder() -> crate::types::builders::MonitoringSubscriptionBuilder {
        crate::types::builders::MonitoringSubscriptionBuilder::default()
    }
}

/// A builder for [`MonitoringSubscription`](crate::types::MonitoringSubscription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringSubscriptionBuilder {
    pub(crate) realtime_metrics_subscription_config:
        std::option::Option<crate::types::RealtimeMetricsSubscriptionConfig>,
}
impl MonitoringSubscriptionBuilder {
    /// <p>A subscription configuration for additional CloudWatch metrics.</p>
    pub fn realtime_metrics_subscription_config(
        mut self,
        input: crate::types::RealtimeMetricsSubscriptionConfig,
    ) -> Self {
        self.realtime_metrics_subscription_config = Some(input);
        self
    }
    /// <p>A subscription configuration for additional CloudWatch metrics.</p>
    pub fn set_realtime_metrics_subscription_config(
        mut self,
        input: std::option::Option<crate::types::RealtimeMetricsSubscriptionConfig>,
    ) -> Self {
        self.realtime_metrics_subscription_config = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringSubscription`](crate::types::MonitoringSubscription).
    pub fn build(self) -> crate::types::MonitoringSubscription {
        crate::types::MonitoringSubscription {
            realtime_metrics_subscription_config: self.realtime_metrics_subscription_config,
        }
    }
}
