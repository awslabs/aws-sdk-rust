// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Aliases {
    /// <p>The number of CNAME aliases, if any, that you want to associate with this distribution.</p>
    #[doc(hidden)]
    pub quantity: std::option::Option<i32>,
    /// <p>A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Aliases {
    /// <p>The number of CNAME aliases, if any, that you want to associate with this distribution.</p>
    pub fn quantity(&self) -> std::option::Option<i32> {
        self.quantity
    }
    /// <p>A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.</p>
    pub fn items(&self) -> std::option::Option<&[std::string::String]> {
        self.items.as_deref()
    }
}
impl Aliases {
    /// Creates a new builder-style object to manufacture [`Aliases`](crate::types::Aliases).
    pub fn builder() -> crate::types::builders::AliasesBuilder {
        crate::types::builders::AliasesBuilder::default()
    }
}

/// A builder for [`Aliases`](crate::types::Aliases).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AliasesBuilder {
    pub(crate) quantity: std::option::Option<i32>,
    pub(crate) items: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AliasesBuilder {
    /// <p>The number of CNAME aliases, if any, that you want to associate with this distribution.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = Some(input);
        self
    }
    /// <p>The number of CNAME aliases, if any, that you want to associate with this distribution.</p>
    pub fn set_quantity(mut self, input: std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.</p>
    pub fn items(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input.into());
        self.items = Some(v);
        self
    }
    /// <p>A complex type that contains the CNAME aliases, if any, that you want to associate with this distribution.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.items = input;
        self
    }
    /// Consumes the builder and constructs a [`Aliases`](crate::types::Aliases).
    pub fn build(self) -> crate::types::Aliases {
        crate::types::Aliases {
            quantity: self.quantity,
            items: self.items,
        }
    }
}
