// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration information and metadata about a CloudFront function.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FunctionSummary {
    /// <p>The name of the CloudFront function.</p>
    pub name: ::std::string::String,
    /// <p>The status of the CloudFront function.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Contains configuration information about a CloudFront function.</p>
    pub function_config: ::std::option::Option<crate::types::FunctionConfig>,
    /// <p>Contains metadata about a CloudFront function.</p>
    pub function_metadata: ::std::option::Option<crate::types::FunctionMetadata>,
}
impl FunctionSummary {
    /// <p>The name of the CloudFront function.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The status of the CloudFront function.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Contains configuration information about a CloudFront function.</p>
    pub fn function_config(&self) -> ::std::option::Option<&crate::types::FunctionConfig> {
        self.function_config.as_ref()
    }
    /// <p>Contains metadata about a CloudFront function.</p>
    pub fn function_metadata(&self) -> ::std::option::Option<&crate::types::FunctionMetadata> {
        self.function_metadata.as_ref()
    }
}
impl FunctionSummary {
    /// Creates a new builder-style object to manufacture [`FunctionSummary`](crate::types::FunctionSummary).
    pub fn builder() -> crate::types::builders::FunctionSummaryBuilder {
        crate::types::builders::FunctionSummaryBuilder::default()
    }
}

/// A builder for [`FunctionSummary`](crate::types::FunctionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FunctionSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) function_config: ::std::option::Option<crate::types::FunctionConfig>,
    pub(crate) function_metadata: ::std::option::Option<crate::types::FunctionMetadata>,
}
impl FunctionSummaryBuilder {
    /// <p>The name of the CloudFront function.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CloudFront function.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the CloudFront function.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the CloudFront function.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the CloudFront function.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the CloudFront function.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Contains configuration information about a CloudFront function.</p>
    /// This field is required.
    pub fn function_config(mut self, input: crate::types::FunctionConfig) -> Self {
        self.function_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configuration information about a CloudFront function.</p>
    pub fn set_function_config(mut self, input: ::std::option::Option<crate::types::FunctionConfig>) -> Self {
        self.function_config = input;
        self
    }
    /// <p>Contains configuration information about a CloudFront function.</p>
    pub fn get_function_config(&self) -> &::std::option::Option<crate::types::FunctionConfig> {
        &self.function_config
    }
    /// <p>Contains metadata about a CloudFront function.</p>
    /// This field is required.
    pub fn function_metadata(mut self, input: crate::types::FunctionMetadata) -> Self {
        self.function_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains metadata about a CloudFront function.</p>
    pub fn set_function_metadata(mut self, input: ::std::option::Option<crate::types::FunctionMetadata>) -> Self {
        self.function_metadata = input;
        self
    }
    /// <p>Contains metadata about a CloudFront function.</p>
    pub fn get_function_metadata(&self) -> &::std::option::Option<crate::types::FunctionMetadata> {
        &self.function_metadata
    }
    /// Consumes the builder and constructs a [`FunctionSummary`](crate::types::FunctionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::FunctionSummaryBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::FunctionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FunctionSummary {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FunctionSummary",
                )
            })?,
            status: self.status,
            function_config: self.function_config,
            function_metadata: self.function_metadata,
        })
    }
}
