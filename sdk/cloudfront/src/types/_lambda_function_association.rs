// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains a Lambda@Edge function association.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LambdaFunctionAssociation {
    /// <p>The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.</p>
    pub lambda_function_arn: ::std::string::String,
    /// <p>Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:</p>
    /// <ul>
    /// <li> <p> <code>viewer-request</code>: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.</p> </li>
    /// <li> <p> <code>origin-request</code>: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>origin-response</code>: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>viewer-response</code>: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache.</p> <p>If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.</p> </li>
    /// </ul>
    pub event_type: crate::types::EventType,
    /// <p>A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html">Accessing the Request Body by Choosing the Include Body Option</a> in the Amazon CloudFront Developer Guide.</p>
    pub include_body: ::std::option::Option<bool>,
}
impl LambdaFunctionAssociation {
    /// <p>The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.</p>
    pub fn lambda_function_arn(&self) -> &str {
        use std::ops::Deref;
        self.lambda_function_arn.deref()
    }
    /// <p>Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:</p>
    /// <ul>
    /// <li> <p> <code>viewer-request</code>: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.</p> </li>
    /// <li> <p> <code>origin-request</code>: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>origin-response</code>: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>viewer-response</code>: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache.</p> <p>If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.</p> </li>
    /// </ul>
    pub fn event_type(&self) -> &crate::types::EventType {
        &self.event_type
    }
    /// <p>A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html">Accessing the Request Body by Choosing the Include Body Option</a> in the Amazon CloudFront Developer Guide.</p>
    pub fn include_body(&self) -> ::std::option::Option<bool> {
        self.include_body
    }
}
impl LambdaFunctionAssociation {
    /// Creates a new builder-style object to manufacture [`LambdaFunctionAssociation`](crate::types::LambdaFunctionAssociation).
    pub fn builder() -> crate::types::builders::LambdaFunctionAssociationBuilder {
        crate::types::builders::LambdaFunctionAssociationBuilder::default()
    }
}

/// A builder for [`LambdaFunctionAssociation`](crate::types::LambdaFunctionAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LambdaFunctionAssociationBuilder {
    pub(crate) lambda_function_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_type: ::std::option::Option<crate::types::EventType>,
    pub(crate) include_body: ::std::option::Option<bool>,
}
impl LambdaFunctionAssociationBuilder {
    /// <p>The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.</p>
    /// This field is required.
    pub fn lambda_function_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lambda_function_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.</p>
    pub fn set_lambda_function_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lambda_function_arn = input;
        self
    }
    /// <p>The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.</p>
    pub fn get_lambda_function_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lambda_function_arn
    }
    /// <p>Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:</p>
    /// <ul>
    /// <li> <p> <code>viewer-request</code>: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.</p> </li>
    /// <li> <p> <code>origin-request</code>: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>origin-response</code>: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>viewer-response</code>: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache.</p> <p>If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::EventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:</p>
    /// <ul>
    /// <li> <p> <code>viewer-request</code>: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.</p> </li>
    /// <li> <p> <code>origin-request</code>: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>origin-response</code>: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>viewer-response</code>: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache.</p> <p>If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.</p> </li>
    /// </ul>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::EventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:</p>
    /// <ul>
    /// <li> <p> <code>viewer-request</code>: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.</p> </li>
    /// <li> <p> <code>origin-request</code>: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>origin-response</code>: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.</p> </li>
    /// <li> <p> <code>viewer-response</code>: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache.</p> <p>If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.</p> </li>
    /// </ul>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::EventType> {
        &self.event_type
    }
    /// <p>A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html">Accessing the Request Body by Choosing the Include Body Option</a> in the Amazon CloudFront Developer Guide.</p>
    pub fn include_body(mut self, input: bool) -> Self {
        self.include_body = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html">Accessing the Request Body by Choosing the Include Body Option</a> in the Amazon CloudFront Developer Guide.</p>
    pub fn set_include_body(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_body = input;
        self
    }
    /// <p>A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html">Accessing the Request Body by Choosing the Include Body Option</a> in the Amazon CloudFront Developer Guide.</p>
    pub fn get_include_body(&self) -> &::std::option::Option<bool> {
        &self.include_body
    }
    /// Consumes the builder and constructs a [`LambdaFunctionAssociation`](crate::types::LambdaFunctionAssociation).
    /// This method will fail if any of the following fields are not set:
    /// - [`lambda_function_arn`](crate::types::builders::LambdaFunctionAssociationBuilder::lambda_function_arn)
    /// - [`event_type`](crate::types::builders::LambdaFunctionAssociationBuilder::event_type)
    pub fn build(self) -> ::std::result::Result<crate::types::LambdaFunctionAssociation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LambdaFunctionAssociation {
            lambda_function_arn: self.lambda_function_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lambda_function_arn",
                    "lambda_function_arn was not specified but it is required when building LambdaFunctionAssociation",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building LambdaFunctionAssociation",
                )
            })?,
            include_body: self.include_body,
        })
    }
}
