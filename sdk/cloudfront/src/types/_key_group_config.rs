// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A key group configuration.</p>
/// <p>A key group contains a list of public keys that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">CloudFront signed URLs and signed cookies</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyGroupConfig {
    /// <p>A name to identify the key group.</p>
    pub name: ::std::string::String,
    /// <p>A list of the identifiers of the public keys in the key group.</p>
    pub items: ::std::vec::Vec<::std::string::String>,
    /// <p>A comment to describe the key group. The comment cannot be longer than 128 characters.</p>
    pub comment: ::std::option::Option<::std::string::String>,
}
impl KeyGroupConfig {
    /// <p>A name to identify the key group.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A list of the identifiers of the public keys in the key group.</p>
    pub fn items(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.items.deref()
    }
    /// <p>A comment to describe the key group. The comment cannot be longer than 128 characters.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl KeyGroupConfig {
    /// Creates a new builder-style object to manufacture [`KeyGroupConfig`](crate::types::KeyGroupConfig).
    pub fn builder() -> crate::types::builders::KeyGroupConfigBuilder {
        crate::types::builders::KeyGroupConfigBuilder::default()
    }
}

/// A builder for [`KeyGroupConfig`](crate::types::KeyGroupConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyGroupConfigBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
}
impl KeyGroupConfigBuilder {
    /// <p>A name to identify the key group.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name to identify the key group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name to identify the key group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A list of the identifiers of the public keys in the key group.</p>
    pub fn items(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input.into());
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of the identifiers of the public keys in the key group.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.items = input;
        self
    }
    /// <p>A list of the identifiers of the public keys in the key group.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.items
    }
    /// <p>A comment to describe the key group. The comment cannot be longer than 128 characters.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A comment to describe the key group. The comment cannot be longer than 128 characters.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A comment to describe the key group. The comment cannot be longer than 128 characters.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// Consumes the builder and constructs a [`KeyGroupConfig`](crate::types::KeyGroupConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::KeyGroupConfigBuilder::name)
    /// - [`items`](crate::types::builders::KeyGroupConfigBuilder::items)
    pub fn build(self) -> ::std::result::Result<crate::types::KeyGroupConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KeyGroupConfig {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building KeyGroupConfig",
                )
            })?,
            items: self.items.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "items",
                    "items was not specified but it is required when building KeyGroupConfig",
                )
            })?,
            comment: self.comment,
        })
    }
}
