// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An origin group includes two origins (a primary origin and a second origin to failover to) and a failover criteria that you specify. You create an origin group to support origin failover in CloudFront. When you create or update a distribution, you can specifiy the origin group instead of a single origin, and CloudFront will failover from the primary origin to the second origin under the failover conditions that you've chosen.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OriginGroup {
    /// <p>The origin group's ID.</p>
    pub id: ::std::string::String,
    /// <p>A complex type that contains information about the failover criteria for an origin group.</p>
    pub failover_criteria: ::std::option::Option<crate::types::OriginGroupFailoverCriteria>,
    /// <p>A complex type that contains information about the origins in an origin group.</p>
    pub members: ::std::option::Option<crate::types::OriginGroupMembers>,
}
impl OriginGroup {
    /// <p>The origin group's ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>A complex type that contains information about the failover criteria for an origin group.</p>
    pub fn failover_criteria(&self) -> ::std::option::Option<&crate::types::OriginGroupFailoverCriteria> {
        self.failover_criteria.as_ref()
    }
    /// <p>A complex type that contains information about the origins in an origin group.</p>
    pub fn members(&self) -> ::std::option::Option<&crate::types::OriginGroupMembers> {
        self.members.as_ref()
    }
}
impl OriginGroup {
    /// Creates a new builder-style object to manufacture [`OriginGroup`](crate::types::OriginGroup).
    pub fn builder() -> crate::types::builders::OriginGroupBuilder {
        crate::types::builders::OriginGroupBuilder::default()
    }
}

/// A builder for [`OriginGroup`](crate::types::OriginGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OriginGroupBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) failover_criteria: ::std::option::Option<crate::types::OriginGroupFailoverCriteria>,
    pub(crate) members: ::std::option::Option<crate::types::OriginGroupMembers>,
}
impl OriginGroupBuilder {
    /// <p>The origin group's ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The origin group's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The origin group's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A complex type that contains information about the failover criteria for an origin group.</p>
    /// This field is required.
    pub fn failover_criteria(mut self, input: crate::types::OriginGroupFailoverCriteria) -> Self {
        self.failover_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about the failover criteria for an origin group.</p>
    pub fn set_failover_criteria(mut self, input: ::std::option::Option<crate::types::OriginGroupFailoverCriteria>) -> Self {
        self.failover_criteria = input;
        self
    }
    /// <p>A complex type that contains information about the failover criteria for an origin group.</p>
    pub fn get_failover_criteria(&self) -> &::std::option::Option<crate::types::OriginGroupFailoverCriteria> {
        &self.failover_criteria
    }
    /// <p>A complex type that contains information about the origins in an origin group.</p>
    /// This field is required.
    pub fn members(mut self, input: crate::types::OriginGroupMembers) -> Self {
        self.members = ::std::option::Option::Some(input);
        self
    }
    /// <p>A complex type that contains information about the origins in an origin group.</p>
    pub fn set_members(mut self, input: ::std::option::Option<crate::types::OriginGroupMembers>) -> Self {
        self.members = input;
        self
    }
    /// <p>A complex type that contains information about the origins in an origin group.</p>
    pub fn get_members(&self) -> &::std::option::Option<crate::types::OriginGroupMembers> {
        &self.members
    }
    /// Consumes the builder and constructs a [`OriginGroup`](crate::types::OriginGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::OriginGroupBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::OriginGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OriginGroup {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building OriginGroup",
                )
            })?,
            failover_criteria: self.failover_criteria,
            members: self.members,
        })
    }
}
