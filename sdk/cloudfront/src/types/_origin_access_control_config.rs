// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A CloudFront origin access control configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OriginAccessControlConfig {
    /// <p>A name to identify the origin access control.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the origin access control.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is <code>sigv4</code>.</p>
    #[doc(hidden)]
    pub signing_protocol: std::option::Option<crate::types::OriginAccessControlSigningProtocols>,
    /// <p>Specifies which requests CloudFront signs (adds authentication information to). Specify <code>always</code> for the most common use case. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings">origin access control advanced settings</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    /// <p>This field can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>always</code> – CloudFront signs all origin requests, overwriting the <code>Authorization</code> header from the viewer request if one exists.</p> </li>
    /// <li> <p> <code>never</code> – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control.</p> </li>
    /// <li> <p> <code>no-override</code> – If the viewer request doesn't contain the <code>Authorization</code> header, then CloudFront signs the origin request. If the viewer request contains the <code>Authorization</code> header, then CloudFront doesn't sign the origin request and instead passes along the <code>Authorization</code> header from the viewer request. <b>WARNING: To pass along the <code>Authorization</code> header from the viewer request, you <i>must</i> add the <code>Authorization</code> header to a <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html">cache policy</a> for all cache behaviors that use origins associated with this origin access control.</b> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub signing_behavior: std::option::Option<crate::types::OriginAccessControlSigningBehaviors>,
    /// <p>The type of origin that this origin access control is for. The only valid value is <code>s3</code>.</p>
    #[doc(hidden)]
    pub origin_access_control_origin_type:
        std::option::Option<crate::types::OriginAccessControlOriginTypes>,
}
impl OriginAccessControlConfig {
    /// <p>A name to identify the origin access control.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the origin access control.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is <code>sigv4</code>.</p>
    pub fn signing_protocol(
        &self,
    ) -> std::option::Option<&crate::types::OriginAccessControlSigningProtocols> {
        self.signing_protocol.as_ref()
    }
    /// <p>Specifies which requests CloudFront signs (adds authentication information to). Specify <code>always</code> for the most common use case. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings">origin access control advanced settings</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    /// <p>This field can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>always</code> – CloudFront signs all origin requests, overwriting the <code>Authorization</code> header from the viewer request if one exists.</p> </li>
    /// <li> <p> <code>never</code> – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control.</p> </li>
    /// <li> <p> <code>no-override</code> – If the viewer request doesn't contain the <code>Authorization</code> header, then CloudFront signs the origin request. If the viewer request contains the <code>Authorization</code> header, then CloudFront doesn't sign the origin request and instead passes along the <code>Authorization</code> header from the viewer request. <b>WARNING: To pass along the <code>Authorization</code> header from the viewer request, you <i>must</i> add the <code>Authorization</code> header to a <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html">cache policy</a> for all cache behaviors that use origins associated with this origin access control.</b> </p> </li>
    /// </ul>
    pub fn signing_behavior(
        &self,
    ) -> std::option::Option<&crate::types::OriginAccessControlSigningBehaviors> {
        self.signing_behavior.as_ref()
    }
    /// <p>The type of origin that this origin access control is for. The only valid value is <code>s3</code>.</p>
    pub fn origin_access_control_origin_type(
        &self,
    ) -> std::option::Option<&crate::types::OriginAccessControlOriginTypes> {
        self.origin_access_control_origin_type.as_ref()
    }
}
impl OriginAccessControlConfig {
    /// Creates a new builder-style object to manufacture [`OriginAccessControlConfig`](crate::types::OriginAccessControlConfig).
    pub fn builder() -> crate::types::builders::OriginAccessControlConfigBuilder {
        crate::types::builders::OriginAccessControlConfigBuilder::default()
    }
}

/// A builder for [`OriginAccessControlConfig`](crate::types::OriginAccessControlConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OriginAccessControlConfigBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) signing_protocol:
        std::option::Option<crate::types::OriginAccessControlSigningProtocols>,
    pub(crate) signing_behavior:
        std::option::Option<crate::types::OriginAccessControlSigningBehaviors>,
    pub(crate) origin_access_control_origin_type:
        std::option::Option<crate::types::OriginAccessControlOriginTypes>,
}
impl OriginAccessControlConfigBuilder {
    /// <p>A name to identify the origin access control.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name to identify the origin access control.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the origin access control.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the origin access control.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is <code>sigv4</code>.</p>
    pub fn signing_protocol(
        mut self,
        input: crate::types::OriginAccessControlSigningProtocols,
    ) -> Self {
        self.signing_protocol = Some(input);
        self
    }
    /// <p>The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is <code>sigv4</code>.</p>
    pub fn set_signing_protocol(
        mut self,
        input: std::option::Option<crate::types::OriginAccessControlSigningProtocols>,
    ) -> Self {
        self.signing_protocol = input;
        self
    }
    /// <p>Specifies which requests CloudFront signs (adds authentication information to). Specify <code>always</code> for the most common use case. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings">origin access control advanced settings</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    /// <p>This field can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>always</code> – CloudFront signs all origin requests, overwriting the <code>Authorization</code> header from the viewer request if one exists.</p> </li>
    /// <li> <p> <code>never</code> – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control.</p> </li>
    /// <li> <p> <code>no-override</code> – If the viewer request doesn't contain the <code>Authorization</code> header, then CloudFront signs the origin request. If the viewer request contains the <code>Authorization</code> header, then CloudFront doesn't sign the origin request and instead passes along the <code>Authorization</code> header from the viewer request. <b>WARNING: To pass along the <code>Authorization</code> header from the viewer request, you <i>must</i> add the <code>Authorization</code> header to a <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html">cache policy</a> for all cache behaviors that use origins associated with this origin access control.</b> </p> </li>
    /// </ul>
    pub fn signing_behavior(
        mut self,
        input: crate::types::OriginAccessControlSigningBehaviors,
    ) -> Self {
        self.signing_behavior = Some(input);
        self
    }
    /// <p>Specifies which requests CloudFront signs (adds authentication information to). Specify <code>always</code> for the most common use case. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings">origin access control advanced settings</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    /// <p>This field can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>always</code> – CloudFront signs all origin requests, overwriting the <code>Authorization</code> header from the viewer request if one exists.</p> </li>
    /// <li> <p> <code>never</code> – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control.</p> </li>
    /// <li> <p> <code>no-override</code> – If the viewer request doesn't contain the <code>Authorization</code> header, then CloudFront signs the origin request. If the viewer request contains the <code>Authorization</code> header, then CloudFront doesn't sign the origin request and instead passes along the <code>Authorization</code> header from the viewer request. <b>WARNING: To pass along the <code>Authorization</code> header from the viewer request, you <i>must</i> add the <code>Authorization</code> header to a <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html">cache policy</a> for all cache behaviors that use origins associated with this origin access control.</b> </p> </li>
    /// </ul>
    pub fn set_signing_behavior(
        mut self,
        input: std::option::Option<crate::types::OriginAccessControlSigningBehaviors>,
    ) -> Self {
        self.signing_behavior = input;
        self
    }
    /// <p>The type of origin that this origin access control is for. The only valid value is <code>s3</code>.</p>
    pub fn origin_access_control_origin_type(
        mut self,
        input: crate::types::OriginAccessControlOriginTypes,
    ) -> Self {
        self.origin_access_control_origin_type = Some(input);
        self
    }
    /// <p>The type of origin that this origin access control is for. The only valid value is <code>s3</code>.</p>
    pub fn set_origin_access_control_origin_type(
        mut self,
        input: std::option::Option<crate::types::OriginAccessControlOriginTypes>,
    ) -> Self {
        self.origin_access_control_origin_type = input;
        self
    }
    /// Consumes the builder and constructs a [`OriginAccessControlConfig`](crate::types::OriginAccessControlConfig).
    pub fn build(self) -> crate::types::OriginAccessControlConfig {
        crate::types::OriginAccessControlConfig {
            name: self.name,
            description: self.description,
            signing_protocol: self.signing_protocol,
            signing_behavior: self.signing_behavior,
            origin_access_control_origin_type: self.origin_access_control_origin_type,
        }
    }
}
