// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex data type for the status codes that you specify that, when returned by a primary origin, trigger CloudFront to failover to a second origin.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatusCodes {
    /// <p>The number of status codes.</p>
    #[doc(hidden)]
    pub quantity: std::option::Option<i32>,
    /// <p>The items (status codes) for an origin group.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<i32>>,
}
impl StatusCodes {
    /// <p>The number of status codes.</p>
    pub fn quantity(&self) -> std::option::Option<i32> {
        self.quantity
    }
    /// <p>The items (status codes) for an origin group.</p>
    pub fn items(&self) -> std::option::Option<&[i32]> {
        self.items.as_deref()
    }
}
impl StatusCodes {
    /// Creates a new builder-style object to manufacture [`StatusCodes`](crate::types::StatusCodes).
    pub fn builder() -> crate::types::builders::StatusCodesBuilder {
        crate::types::builders::StatusCodesBuilder::default()
    }
}

/// A builder for [`StatusCodes`](crate::types::StatusCodes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatusCodesBuilder {
    pub(crate) quantity: std::option::Option<i32>,
    pub(crate) items: std::option::Option<std::vec::Vec<i32>>,
}
impl StatusCodesBuilder {
    /// <p>The number of status codes.</p>
    pub fn quantity(mut self, input: i32) -> Self {
        self.quantity = Some(input);
        self
    }
    /// <p>The number of status codes.</p>
    pub fn set_quantity(mut self, input: std::option::Option<i32>) -> Self {
        self.quantity = input;
        self
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The items (status codes) for an origin group.</p>
    pub fn items(mut self, input: i32) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = Some(v);
        self
    }
    /// <p>The items (status codes) for an origin group.</p>
    pub fn set_items(mut self, input: std::option::Option<std::vec::Vec<i32>>) -> Self {
        self.items = input;
        self
    }
    /// Consumes the builder and constructs a [`StatusCodes`](crate::types::StatusCodes).
    pub fn build(self) -> crate::types::StatusCodes {
        crate::types::StatusCodes {
            quantity: self.quantity,
            items: self.items,
        }
    }
}
