// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagKeys {
    /// <p>A complex type that contains <code>Tag</code> key elements.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TagKeys {
    /// <p>A complex type that contains <code>Tag</code> key elements.</p>
    pub fn items(&self) -> std::option::Option<&[std::string::String]> {
        self.items.as_deref()
    }
}
impl TagKeys {
    /// Creates a new builder-style object to manufacture [`TagKeys`](crate::types::TagKeys).
    pub fn builder() -> crate::types::builders::TagKeysBuilder {
        crate::types::builders::TagKeysBuilder::default()
    }
}

/// A builder for [`TagKeys`](crate::types::TagKeys).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagKeysBuilder {
    pub(crate) items: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TagKeysBuilder {
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A complex type that contains <code>Tag</code> key elements.</p>
    pub fn items(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input.into());
        self.items = Some(v);
        self
    }
    /// <p>A complex type that contains <code>Tag</code> key elements.</p>
    pub fn set_items(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.items = input;
        self
    }
    /// Consumes the builder and constructs a [`TagKeys`](crate::types::TagKeys).
    pub fn build(self) -> crate::types::TagKeys {
        crate::types::TagKeys { items: self.items }
    }
}
