// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines whether CloudFront includes the <code>X-XSS-Protection</code> HTTP response header and the header's value.</p>
/// <p>For more information about the <code>X-XSS-Protection</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResponseHeadersPolicyXssProtection {
    /// <p>A Boolean that determines whether CloudFront overrides the <code>X-XSS-Protection</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    #[doc(hidden)]
    pub r#override: std::option::Option<bool>,
    /// <p>A Boolean that determines the value of the <code>X-XSS-Protection</code> HTTP response header. When this setting is <code>true</code>, the value of the <code>X-XSS-Protection</code> header is <code>1</code>. When this setting is <code>false</code>, the value of the <code>X-XSS-Protection</code> header is <code>0</code>.</p>
    /// <p>For more information about these settings, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub protection: std::option::Option<bool>,
    /// <p>A Boolean that determines whether CloudFront includes the <code>mode=block</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>For more information about this directive, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub mode_block: std::option::Option<bool>,
    /// <p>A reporting URI, which CloudFront uses as the value of the <code>report</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>You cannot specify a <code>ReportUri</code> when <code>ModeBlock</code> is <code>true</code>.</p>
    /// <p>For more information about using a reporting URL, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub report_uri: std::option::Option<std::string::String>,
}
impl ResponseHeadersPolicyXssProtection {
    /// <p>A Boolean that determines whether CloudFront overrides the <code>X-XSS-Protection</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    pub fn r#override(&self) -> std::option::Option<bool> {
        self.r#override
    }
    /// <p>A Boolean that determines the value of the <code>X-XSS-Protection</code> HTTP response header. When this setting is <code>true</code>, the value of the <code>X-XSS-Protection</code> header is <code>1</code>. When this setting is <code>false</code>, the value of the <code>X-XSS-Protection</code> header is <code>0</code>.</p>
    /// <p>For more information about these settings, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn protection(&self) -> std::option::Option<bool> {
        self.protection
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>mode=block</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>For more information about this directive, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn mode_block(&self) -> std::option::Option<bool> {
        self.mode_block
    }
    /// <p>A reporting URI, which CloudFront uses as the value of the <code>report</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>You cannot specify a <code>ReportUri</code> when <code>ModeBlock</code> is <code>true</code>.</p>
    /// <p>For more information about using a reporting URL, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn report_uri(&self) -> std::option::Option<&str> {
        self.report_uri.as_deref()
    }
}
impl ResponseHeadersPolicyXssProtection {
    /// Creates a new builder-style object to manufacture [`ResponseHeadersPolicyXssProtection`](crate::types::ResponseHeadersPolicyXssProtection).
    pub fn builder() -> crate::types::builders::ResponseHeadersPolicyXssProtectionBuilder {
        crate::types::builders::ResponseHeadersPolicyXssProtectionBuilder::default()
    }
}

/// A builder for [`ResponseHeadersPolicyXssProtection`](crate::types::ResponseHeadersPolicyXssProtection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResponseHeadersPolicyXssProtectionBuilder {
    pub(crate) r#override: std::option::Option<bool>,
    pub(crate) protection: std::option::Option<bool>,
    pub(crate) mode_block: std::option::Option<bool>,
    pub(crate) report_uri: std::option::Option<std::string::String>,
}
impl ResponseHeadersPolicyXssProtectionBuilder {
    /// <p>A Boolean that determines whether CloudFront overrides the <code>X-XSS-Protection</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    pub fn r#override(mut self, input: bool) -> Self {
        self.r#override = Some(input);
        self
    }
    /// <p>A Boolean that determines whether CloudFront overrides the <code>X-XSS-Protection</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    pub fn set_override(mut self, input: std::option::Option<bool>) -> Self {
        self.r#override = input;
        self
    }
    /// <p>A Boolean that determines the value of the <code>X-XSS-Protection</code> HTTP response header. When this setting is <code>true</code>, the value of the <code>X-XSS-Protection</code> header is <code>1</code>. When this setting is <code>false</code>, the value of the <code>X-XSS-Protection</code> header is <code>0</code>.</p>
    /// <p>For more information about these settings, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn protection(mut self, input: bool) -> Self {
        self.protection = Some(input);
        self
    }
    /// <p>A Boolean that determines the value of the <code>X-XSS-Protection</code> HTTP response header. When this setting is <code>true</code>, the value of the <code>X-XSS-Protection</code> header is <code>1</code>. When this setting is <code>false</code>, the value of the <code>X-XSS-Protection</code> header is <code>0</code>.</p>
    /// <p>For more information about these settings, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn set_protection(mut self, input: std::option::Option<bool>) -> Self {
        self.protection = input;
        self
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>mode=block</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>For more information about this directive, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn mode_block(mut self, input: bool) -> Self {
        self.mode_block = Some(input);
        self
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>mode=block</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>For more information about this directive, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn set_mode_block(mut self, input: std::option::Option<bool>) -> Self {
        self.mode_block = input;
        self
    }
    /// <p>A reporting URI, which CloudFront uses as the value of the <code>report</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>You cannot specify a <code>ReportUri</code> when <code>ModeBlock</code> is <code>true</code>.</p>
    /// <p>For more information about using a reporting URL, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn report_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.report_uri = Some(input.into());
        self
    }
    /// <p>A reporting URI, which CloudFront uses as the value of the <code>report</code> directive in the <code>X-XSS-Protection</code> header.</p>
    /// <p>You cannot specify a <code>ReportUri</code> when <code>ModeBlock</code> is <code>true</code>.</p>
    /// <p>For more information about using a reporting URL, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn set_report_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.report_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`ResponseHeadersPolicyXssProtection`](crate::types::ResponseHeadersPolicyXssProtection).
    pub fn build(self) -> crate::types::ResponseHeadersPolicyXssProtection {
        crate::types::ResponseHeadersPolicyXssProtection {
            r#override: self.r#override,
            protection: self.protection,
            mode_block: self.mode_block,
            report_uri: self.report_uri,
        }
    }
}
