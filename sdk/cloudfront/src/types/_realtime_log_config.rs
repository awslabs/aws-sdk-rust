// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A real-time log configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RealtimeLogConfig {
    /// <p>The Amazon Resource Name (ARN) of this real-time log configuration.</p>
    pub arn: ::std::string::String,
    /// <p>The unique name of this real-time log configuration.</p>
    pub name: ::std::string::String,
    /// <p>The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.</p>
    pub sampling_rate: i64,
    /// <p>Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.</p>
    pub end_points: ::std::vec::Vec<crate::types::EndPoint>,
    /// <p>A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.</p>
    /// <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fields: ::std::vec::Vec<::std::string::String>,
}
impl RealtimeLogConfig {
    /// <p>The Amazon Resource Name (ARN) of this real-time log configuration.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique name of this real-time log configuration.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.</p>
    pub fn sampling_rate(&self) -> i64 {
        self.sampling_rate
    }
    /// <p>Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.</p>
    pub fn end_points(&self) -> &[crate::types::EndPoint] {
        use std::ops::Deref;
        self.end_points.deref()
    }
    /// <p>A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.</p>
    /// <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn fields(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.fields.deref()
    }
}
impl RealtimeLogConfig {
    /// Creates a new builder-style object to manufacture [`RealtimeLogConfig`](crate::types::RealtimeLogConfig).
    pub fn builder() -> crate::types::builders::RealtimeLogConfigBuilder {
        crate::types::builders::RealtimeLogConfigBuilder::default()
    }
}

/// A builder for [`RealtimeLogConfig`](crate::types::RealtimeLogConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RealtimeLogConfigBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) sampling_rate: ::std::option::Option<i64>,
    pub(crate) end_points: ::std::option::Option<::std::vec::Vec<crate::types::EndPoint>>,
    pub(crate) fields: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RealtimeLogConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of this real-time log configuration.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this real-time log configuration.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this real-time log configuration.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique name of this real-time log configuration.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of this real-time log configuration.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique name of this real-time log configuration.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.</p>
    /// This field is required.
    pub fn sampling_rate(mut self, input: i64) -> Self {
        self.sampling_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.</p>
    pub fn set_sampling_rate(mut self, input: ::std::option::Option<i64>) -> Self {
        self.sampling_rate = input;
        self
    }
    /// <p>The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.</p>
    pub fn get_sampling_rate(&self) -> &::std::option::Option<i64> {
        &self.sampling_rate
    }
    /// Appends an item to `end_points`.
    ///
    /// To override the contents of this collection use [`set_end_points`](Self::set_end_points).
    ///
    /// <p>Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.</p>
    pub fn end_points(mut self, input: crate::types::EndPoint) -> Self {
        let mut v = self.end_points.unwrap_or_default();
        v.push(input);
        self.end_points = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.</p>
    pub fn set_end_points(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EndPoint>>) -> Self {
        self.end_points = input;
        self
    }
    /// <p>Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.</p>
    pub fn get_end_points(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EndPoint>> {
        &self.end_points
    }
    /// Appends an item to `fields`.
    ///
    /// To override the contents of this collection use [`set_fields`](Self::set_fields).
    ///
    /// <p>A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.</p>
    /// <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.fields.unwrap_or_default();
        v.push(input.into());
        self.fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.</p>
    /// <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn set_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.fields = input;
        self
    }
    /// <p>A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.</p>
    /// <p>For more information about fields, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields">Real-time log configuration fields</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn get_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`RealtimeLogConfig`](crate::types::RealtimeLogConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::RealtimeLogConfigBuilder::arn)
    /// - [`name`](crate::types::builders::RealtimeLogConfigBuilder::name)
    /// - [`sampling_rate`](crate::types::builders::RealtimeLogConfigBuilder::sampling_rate)
    /// - [`end_points`](crate::types::builders::RealtimeLogConfigBuilder::end_points)
    /// - [`fields`](crate::types::builders::RealtimeLogConfigBuilder::fields)
    pub fn build(self) -> ::std::result::Result<crate::types::RealtimeLogConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RealtimeLogConfig {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building RealtimeLogConfig",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RealtimeLogConfig",
                )
            })?,
            sampling_rate: self.sampling_rate.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sampling_rate",
                    "sampling_rate was not specified but it is required when building RealtimeLogConfig",
                )
            })?,
            end_points: self.end_points.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_points",
                    "end_points was not specified but it is required when building RealtimeLogConfig",
                )
            })?,
            fields: self.fields.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "fields",
                    "fields was not specified but it is required when building RealtimeLogConfig",
                )
            })?,
        })
    }
}
