// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in requests that CloudFront sends to the origin.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OriginRequestPolicyCookiesConfig {
    /// <p>Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – Only the cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin, <i> <b>except</b> </i> for those listed in the <code>CookieNames</code> type, which are not included.</p> </li>
    /// </ul>
    pub cookie_behavior: crate::types::OriginRequestPolicyCookieBehavior,
    /// <p>Contains a list of cookie names.</p>
    pub cookies: ::std::option::Option<crate::types::CookieNames>,
}
impl OriginRequestPolicyCookiesConfig {
    /// <p>Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – Only the cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin, <i> <b>except</b> </i> for those listed in the <code>CookieNames</code> type, which are not included.</p> </li>
    /// </ul>
    pub fn cookie_behavior(&self) -> &crate::types::OriginRequestPolicyCookieBehavior {
        &self.cookie_behavior
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn cookies(&self) -> ::std::option::Option<&crate::types::CookieNames> {
        self.cookies.as_ref()
    }
}
impl OriginRequestPolicyCookiesConfig {
    /// Creates a new builder-style object to manufacture [`OriginRequestPolicyCookiesConfig`](crate::types::OriginRequestPolicyCookiesConfig).
    pub fn builder() -> crate::types::builders::OriginRequestPolicyCookiesConfigBuilder {
        crate::types::builders::OriginRequestPolicyCookiesConfigBuilder::default()
    }
}

/// A builder for [`OriginRequestPolicyCookiesConfig`](crate::types::OriginRequestPolicyCookiesConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OriginRequestPolicyCookiesConfigBuilder {
    pub(crate) cookie_behavior: ::std::option::Option<crate::types::OriginRequestPolicyCookieBehavior>,
    pub(crate) cookies: ::std::option::Option<crate::types::CookieNames>,
}
impl OriginRequestPolicyCookiesConfigBuilder {
    /// <p>Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – Only the cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin, <i> <b>except</b> </i> for those listed in the <code>CookieNames</code> type, which are not included.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn cookie_behavior(mut self, input: crate::types::OriginRequestPolicyCookieBehavior) -> Self {
        self.cookie_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – Only the cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin, <i> <b>except</b> </i> for those listed in the <code>CookieNames</code> type, which are not included.</p> </li>
    /// </ul>
    pub fn set_cookie_behavior(mut self, input: ::std::option::Option<crate::types::OriginRequestPolicyCookieBehavior>) -> Self {
        self.cookie_behavior = input;
        self
    }
    /// <p>Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in a <code>CachePolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – Only the cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests are included in requests that CloudFront sends to the origin, <i> <b>except</b> </i> for those listed in the <code>CookieNames</code> type, which are not included.</p> </li>
    /// </ul>
    pub fn get_cookie_behavior(&self) -> &::std::option::Option<crate::types::OriginRequestPolicyCookieBehavior> {
        &self.cookie_behavior
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn cookies(mut self, input: crate::types::CookieNames) -> Self {
        self.cookies = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn set_cookies(mut self, input: ::std::option::Option<crate::types::CookieNames>) -> Self {
        self.cookies = input;
        self
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn get_cookies(&self) -> &::std::option::Option<crate::types::CookieNames> {
        &self.cookies
    }
    /// Consumes the builder and constructs a [`OriginRequestPolicyCookiesConfig`](crate::types::OriginRequestPolicyCookiesConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`cookie_behavior`](crate::types::builders::OriginRequestPolicyCookiesConfigBuilder::cookie_behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::OriginRequestPolicyCookiesConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OriginRequestPolicyCookiesConfig {
            cookie_behavior: self.cookie_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cookie_behavior",
                    "cookie_behavior was not specified but it is required when building OriginRequestPolicyCookiesConfig",
                )
            })?,
            cookies: self.cookies,
        })
    }
}
