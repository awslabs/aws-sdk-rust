// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An alias (also called a CNAME) and the CloudFront distribution and Amazon Web Services account ID that it's associated with. The distribution and account IDs are partially hidden, which allows you to identify the distributions and accounts that you own, but helps to protect the information of ones that you don't own.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConflictingAlias {
    /// <p>An alias (also called a CNAME).</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p>The (partially hidden) ID of the CloudFront distribution associated with the alias.</p>
    #[doc(hidden)]
    pub distribution_id: std::option::Option<std::string::String>,
    /// <p>The (partially hidden) ID of the Amazon Web Services account that owns the distribution that's associated with the alias.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
}
impl ConflictingAlias {
    /// <p>An alias (also called a CNAME).</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The (partially hidden) ID of the CloudFront distribution associated with the alias.</p>
    pub fn distribution_id(&self) -> std::option::Option<&str> {
        self.distribution_id.as_deref()
    }
    /// <p>The (partially hidden) ID of the Amazon Web Services account that owns the distribution that's associated with the alias.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl ConflictingAlias {
    /// Creates a new builder-style object to manufacture [`ConflictingAlias`](crate::types::ConflictingAlias).
    pub fn builder() -> crate::types::builders::ConflictingAliasBuilder {
        crate::types::builders::ConflictingAliasBuilder::default()
    }
}

/// A builder for [`ConflictingAlias`](crate::types::ConflictingAlias).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConflictingAliasBuilder {
    pub(crate) alias: std::option::Option<std::string::String>,
    pub(crate) distribution_id: std::option::Option<std::string::String>,
    pub(crate) account_id: std::option::Option<std::string::String>,
}
impl ConflictingAliasBuilder {
    /// <p>An alias (also called a CNAME).</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias = Some(input.into());
        self
    }
    /// <p>An alias (also called a CNAME).</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The (partially hidden) ID of the CloudFront distribution associated with the alias.</p>
    pub fn distribution_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.distribution_id = Some(input.into());
        self
    }
    /// <p>The (partially hidden) ID of the CloudFront distribution associated with the alias.</p>
    pub fn set_distribution_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.distribution_id = input;
        self
    }
    /// <p>The (partially hidden) ID of the Amazon Web Services account that owns the distribution that's associated with the alias.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The (partially hidden) ID of the Amazon Web Services account that owns the distribution that's associated with the alias.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ConflictingAlias`](crate::types::ConflictingAlias).
    pub fn build(self) -> crate::types::ConflictingAlias {
        crate::types::ConflictingAlias {
            alias: self.alias,
            distribution_id: self.distribution_id,
            account_id: self.account_id,
        }
    }
}
