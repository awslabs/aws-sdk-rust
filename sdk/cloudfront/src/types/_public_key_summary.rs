// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a public key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PublicKeySummary {
    /// <p>The identifier of the public key.</p>
    pub id: ::std::string::String,
    /// <p>A name to help identify the public key.</p>
    pub name: ::std::string::String,
    /// <p>The date and time when the public key was uploaded.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The public key.</p>
    pub encoded_key: ::std::string::String,
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub comment: ::std::option::Option<::std::string::String>,
}
impl PublicKeySummary {
    /// <p>The identifier of the public key.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>A name to help identify the public key.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The date and time when the public key was uploaded.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The public key.</p>
    pub fn encoded_key(&self) -> &str {
        use std::ops::Deref;
        self.encoded_key.deref()
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl PublicKeySummary {
    /// Creates a new builder-style object to manufacture [`PublicKeySummary`](crate::types::PublicKeySummary).
    pub fn builder() -> crate::types::builders::PublicKeySummaryBuilder {
        crate::types::builders::PublicKeySummaryBuilder::default()
    }
}

/// A builder for [`PublicKeySummary`](crate::types::PublicKeySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PublicKeySummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) encoded_key: ::std::option::Option<::std::string::String>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
}
impl PublicKeySummaryBuilder {
    /// <p>The identifier of the public key.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the public key.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the public key.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A name to help identify the public key.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name to help identify the public key.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name to help identify the public key.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The date and time when the public key was uploaded.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the public key was uploaded.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time when the public key was uploaded.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The public key.</p>
    /// This field is required.
    pub fn encoded_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encoded_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key.</p>
    pub fn set_encoded_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encoded_key = input;
        self
    }
    /// <p>The public key.</p>
    pub fn get_encoded_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.encoded_key
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// Consumes the builder and constructs a [`PublicKeySummary`](crate::types::PublicKeySummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::PublicKeySummaryBuilder::id)
    /// - [`name`](crate::types::builders::PublicKeySummaryBuilder::name)
    /// - [`created_time`](crate::types::builders::PublicKeySummaryBuilder::created_time)
    /// - [`encoded_key`](crate::types::builders::PublicKeySummaryBuilder::encoded_key)
    pub fn build(self) -> ::std::result::Result<crate::types::PublicKeySummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PublicKeySummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building PublicKeySummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building PublicKeySummary",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building PublicKeySummary",
                )
            })?,
            encoded_key: self.encoded_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encoded_key",
                    "encoded_key was not specified but it is required when building PublicKeySummary",
                )
            })?,
            comment: self.comment,
        })
    }
}
