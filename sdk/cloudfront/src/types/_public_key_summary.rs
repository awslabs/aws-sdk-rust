// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a public key.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublicKeySummary {
    /// <p>The identifier of the public key.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A name to help identify the public key.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The date and time when the public key was uploaded.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The public key.</p>
    #[doc(hidden)]
    pub encoded_key: std::option::Option<std::string::String>,
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl PublicKeySummary {
    /// <p>The identifier of the public key.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A name to help identify the public key.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The date and time when the public key was uploaded.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The public key.</p>
    pub fn encoded_key(&self) -> std::option::Option<&str> {
        self.encoded_key.as_deref()
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl PublicKeySummary {
    /// Creates a new builder-style object to manufacture [`PublicKeySummary`](crate::types::PublicKeySummary).
    pub fn builder() -> crate::types::builders::PublicKeySummaryBuilder {
        crate::types::builders::PublicKeySummaryBuilder::default()
    }
}

/// A builder for [`PublicKeySummary`](crate::types::PublicKeySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublicKeySummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) encoded_key: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
}
impl PublicKeySummaryBuilder {
    /// <p>The identifier of the public key.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the public key.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A name to help identify the public key.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name to help identify the public key.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The date and time when the public key was uploaded.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The date and time when the public key was uploaded.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The public key.</p>
    pub fn encoded_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encoded_key = Some(input.into());
        self
    }
    /// <p>The public key.</p>
    pub fn set_encoded_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encoded_key = input;
        self
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// Consumes the builder and constructs a [`PublicKeySummary`](crate::types::PublicKeySummary).
    pub fn build(self) -> crate::types::PublicKeySummary {
        crate::types::PublicKeySummary {
            id: self.id,
            name: self.name,
            created_time: self.created_time,
            encoded_key: self.encoded_key,
            comment: self.comment,
        }
    }
}
