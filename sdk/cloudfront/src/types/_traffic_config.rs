// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The traffic configuration of your continuous deployment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrafficConfig {
    /// <p>Contains the percentage of traffic to send to the staging distribution.</p>
    pub single_weight_config: ::std::option::Option<crate::types::ContinuousDeploymentSingleWeightConfig>,
    /// <p>Determines which HTTP requests are sent to the staging distribution.</p>
    pub single_header_config: ::std::option::Option<crate::types::ContinuousDeploymentSingleHeaderConfig>,
    /// <p>The type of traffic configuration.</p>
    pub r#type: crate::types::ContinuousDeploymentPolicyType,
}
impl TrafficConfig {
    /// <p>Contains the percentage of traffic to send to the staging distribution.</p>
    pub fn single_weight_config(&self) -> ::std::option::Option<&crate::types::ContinuousDeploymentSingleWeightConfig> {
        self.single_weight_config.as_ref()
    }
    /// <p>Determines which HTTP requests are sent to the staging distribution.</p>
    pub fn single_header_config(&self) -> ::std::option::Option<&crate::types::ContinuousDeploymentSingleHeaderConfig> {
        self.single_header_config.as_ref()
    }
    /// <p>The type of traffic configuration.</p>
    pub fn r#type(&self) -> &crate::types::ContinuousDeploymentPolicyType {
        &self.r#type
    }
}
impl TrafficConfig {
    /// Creates a new builder-style object to manufacture [`TrafficConfig`](crate::types::TrafficConfig).
    pub fn builder() -> crate::types::builders::TrafficConfigBuilder {
        crate::types::builders::TrafficConfigBuilder::default()
    }
}

/// A builder for [`TrafficConfig`](crate::types::TrafficConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrafficConfigBuilder {
    pub(crate) single_weight_config: ::std::option::Option<crate::types::ContinuousDeploymentSingleWeightConfig>,
    pub(crate) single_header_config: ::std::option::Option<crate::types::ContinuousDeploymentSingleHeaderConfig>,
    pub(crate) r#type: ::std::option::Option<crate::types::ContinuousDeploymentPolicyType>,
}
impl TrafficConfigBuilder {
    /// <p>Contains the percentage of traffic to send to the staging distribution.</p>
    pub fn single_weight_config(mut self, input: crate::types::ContinuousDeploymentSingleWeightConfig) -> Self {
        self.single_weight_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the percentage of traffic to send to the staging distribution.</p>
    pub fn set_single_weight_config(mut self, input: ::std::option::Option<crate::types::ContinuousDeploymentSingleWeightConfig>) -> Self {
        self.single_weight_config = input;
        self
    }
    /// <p>Contains the percentage of traffic to send to the staging distribution.</p>
    pub fn get_single_weight_config(&self) -> &::std::option::Option<crate::types::ContinuousDeploymentSingleWeightConfig> {
        &self.single_weight_config
    }
    /// <p>Determines which HTTP requests are sent to the staging distribution.</p>
    pub fn single_header_config(mut self, input: crate::types::ContinuousDeploymentSingleHeaderConfig) -> Self {
        self.single_header_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines which HTTP requests are sent to the staging distribution.</p>
    pub fn set_single_header_config(mut self, input: ::std::option::Option<crate::types::ContinuousDeploymentSingleHeaderConfig>) -> Self {
        self.single_header_config = input;
        self
    }
    /// <p>Determines which HTTP requests are sent to the staging distribution.</p>
    pub fn get_single_header_config(&self) -> &::std::option::Option<crate::types::ContinuousDeploymentSingleHeaderConfig> {
        &self.single_header_config
    }
    /// <p>The type of traffic configuration.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ContinuousDeploymentPolicyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of traffic configuration.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ContinuousDeploymentPolicyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of traffic configuration.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ContinuousDeploymentPolicyType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`TrafficConfig`](crate::types::TrafficConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::TrafficConfigBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::TrafficConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrafficConfig {
            single_weight_config: self.single_weight_config,
            single_header_config: self.single_header_config,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building TrafficConfig",
                )
            })?,
        })
    }
}
