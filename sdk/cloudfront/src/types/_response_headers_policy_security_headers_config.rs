// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configuration for a set of security-related HTTP response headers. CloudFront adds these headers to HTTP responses that it sends for requests that match a cache behavior associated with this response headers policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResponseHeadersPolicySecurityHeadersConfig {
    /// <p>Determines whether CloudFront includes the <code>X-XSS-Protection</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-XSS-Protection</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub xss_protection: std::option::Option<crate::types::ResponseHeadersPolicyXssProtection>,
    /// <p>Determines whether CloudFront includes the <code>X-Frame-Options</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-Frame-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">X-Frame-Options</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub frame_options: std::option::Option<crate::types::ResponseHeadersPolicyFrameOptions>,
    /// <p>Determines whether CloudFront includes the <code>Referrer-Policy</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Referrer-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy">Referrer-Policy</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub referrer_policy: std::option::Option<crate::types::ResponseHeadersPolicyReferrerPolicy>,
    /// <p>The policy directives and their values that CloudFront includes as values for the <code>Content-Security-Policy</code> HTTP response header.</p>
    /// <p>For more information about the <code>Content-Security-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content-Security-Policy</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub content_security_policy:
        std::option::Option<crate::types::ResponseHeadersPolicyContentSecurityPolicy>,
    /// <p>Determines whether CloudFront includes the <code>X-Content-Type-Options</code> HTTP response header with its value set to <code>nosniff</code>.</p>
    /// <p>For more information about the <code>X-Content-Type-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub content_type_options:
        std::option::Option<crate::types::ResponseHeadersPolicyContentTypeOptions>,
    /// <p>Determines whether CloudFront includes the <code>Strict-Transport-Security</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Strict-Transport-Security</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">Strict-Transport-Security</a> in the MDN Web Docs.</p>
    #[doc(hidden)]
    pub strict_transport_security:
        std::option::Option<crate::types::ResponseHeadersPolicyStrictTransportSecurity>,
}
impl ResponseHeadersPolicySecurityHeadersConfig {
    /// <p>Determines whether CloudFront includes the <code>X-XSS-Protection</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-XSS-Protection</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn xss_protection(
        &self,
    ) -> std::option::Option<&crate::types::ResponseHeadersPolicyXssProtection> {
        self.xss_protection.as_ref()
    }
    /// <p>Determines whether CloudFront includes the <code>X-Frame-Options</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-Frame-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">X-Frame-Options</a> in the MDN Web Docs.</p>
    pub fn frame_options(
        &self,
    ) -> std::option::Option<&crate::types::ResponseHeadersPolicyFrameOptions> {
        self.frame_options.as_ref()
    }
    /// <p>Determines whether CloudFront includes the <code>Referrer-Policy</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Referrer-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy">Referrer-Policy</a> in the MDN Web Docs.</p>
    pub fn referrer_policy(
        &self,
    ) -> std::option::Option<&crate::types::ResponseHeadersPolicyReferrerPolicy> {
        self.referrer_policy.as_ref()
    }
    /// <p>The policy directives and their values that CloudFront includes as values for the <code>Content-Security-Policy</code> HTTP response header.</p>
    /// <p>For more information about the <code>Content-Security-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content-Security-Policy</a> in the MDN Web Docs.</p>
    pub fn content_security_policy(
        &self,
    ) -> std::option::Option<&crate::types::ResponseHeadersPolicyContentSecurityPolicy> {
        self.content_security_policy.as_ref()
    }
    /// <p>Determines whether CloudFront includes the <code>X-Content-Type-Options</code> HTTP response header with its value set to <code>nosniff</code>.</p>
    /// <p>For more information about the <code>X-Content-Type-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a> in the MDN Web Docs.</p>
    pub fn content_type_options(
        &self,
    ) -> std::option::Option<&crate::types::ResponseHeadersPolicyContentTypeOptions> {
        self.content_type_options.as_ref()
    }
    /// <p>Determines whether CloudFront includes the <code>Strict-Transport-Security</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Strict-Transport-Security</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">Strict-Transport-Security</a> in the MDN Web Docs.</p>
    pub fn strict_transport_security(
        &self,
    ) -> std::option::Option<&crate::types::ResponseHeadersPolicyStrictTransportSecurity> {
        self.strict_transport_security.as_ref()
    }
}
impl ResponseHeadersPolicySecurityHeadersConfig {
    /// Creates a new builder-style object to manufacture [`ResponseHeadersPolicySecurityHeadersConfig`](crate::types::ResponseHeadersPolicySecurityHeadersConfig).
    pub fn builder() -> crate::types::builders::ResponseHeadersPolicySecurityHeadersConfigBuilder {
        crate::types::builders::ResponseHeadersPolicySecurityHeadersConfigBuilder::default()
    }
}

/// A builder for [`ResponseHeadersPolicySecurityHeadersConfig`](crate::types::ResponseHeadersPolicySecurityHeadersConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResponseHeadersPolicySecurityHeadersConfigBuilder {
    pub(crate) xss_protection:
        std::option::Option<crate::types::ResponseHeadersPolicyXssProtection>,
    pub(crate) frame_options: std::option::Option<crate::types::ResponseHeadersPolicyFrameOptions>,
    pub(crate) referrer_policy:
        std::option::Option<crate::types::ResponseHeadersPolicyReferrerPolicy>,
    pub(crate) content_security_policy:
        std::option::Option<crate::types::ResponseHeadersPolicyContentSecurityPolicy>,
    pub(crate) content_type_options:
        std::option::Option<crate::types::ResponseHeadersPolicyContentTypeOptions>,
    pub(crate) strict_transport_security:
        std::option::Option<crate::types::ResponseHeadersPolicyStrictTransportSecurity>,
}
impl ResponseHeadersPolicySecurityHeadersConfigBuilder {
    /// <p>Determines whether CloudFront includes the <code>X-XSS-Protection</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-XSS-Protection</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn xss_protection(
        mut self,
        input: crate::types::ResponseHeadersPolicyXssProtection,
    ) -> Self {
        self.xss_protection = Some(input);
        self
    }
    /// <p>Determines whether CloudFront includes the <code>X-XSS-Protection</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-XSS-Protection</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection">X-XSS-Protection</a> in the MDN Web Docs.</p>
    pub fn set_xss_protection(
        mut self,
        input: std::option::Option<crate::types::ResponseHeadersPolicyXssProtection>,
    ) -> Self {
        self.xss_protection = input;
        self
    }
    /// <p>Determines whether CloudFront includes the <code>X-Frame-Options</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-Frame-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">X-Frame-Options</a> in the MDN Web Docs.</p>
    pub fn frame_options(mut self, input: crate::types::ResponseHeadersPolicyFrameOptions) -> Self {
        self.frame_options = Some(input);
        self
    }
    /// <p>Determines whether CloudFront includes the <code>X-Frame-Options</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>X-Frame-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">X-Frame-Options</a> in the MDN Web Docs.</p>
    pub fn set_frame_options(
        mut self,
        input: std::option::Option<crate::types::ResponseHeadersPolicyFrameOptions>,
    ) -> Self {
        self.frame_options = input;
        self
    }
    /// <p>Determines whether CloudFront includes the <code>Referrer-Policy</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Referrer-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy">Referrer-Policy</a> in the MDN Web Docs.</p>
    pub fn referrer_policy(
        mut self,
        input: crate::types::ResponseHeadersPolicyReferrerPolicy,
    ) -> Self {
        self.referrer_policy = Some(input);
        self
    }
    /// <p>Determines whether CloudFront includes the <code>Referrer-Policy</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Referrer-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy">Referrer-Policy</a> in the MDN Web Docs.</p>
    pub fn set_referrer_policy(
        mut self,
        input: std::option::Option<crate::types::ResponseHeadersPolicyReferrerPolicy>,
    ) -> Self {
        self.referrer_policy = input;
        self
    }
    /// <p>The policy directives and their values that CloudFront includes as values for the <code>Content-Security-Policy</code> HTTP response header.</p>
    /// <p>For more information about the <code>Content-Security-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content-Security-Policy</a> in the MDN Web Docs.</p>
    pub fn content_security_policy(
        mut self,
        input: crate::types::ResponseHeadersPolicyContentSecurityPolicy,
    ) -> Self {
        self.content_security_policy = Some(input);
        self
    }
    /// <p>The policy directives and their values that CloudFront includes as values for the <code>Content-Security-Policy</code> HTTP response header.</p>
    /// <p>For more information about the <code>Content-Security-Policy</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content-Security-Policy</a> in the MDN Web Docs.</p>
    pub fn set_content_security_policy(
        mut self,
        input: std::option::Option<crate::types::ResponseHeadersPolicyContentSecurityPolicy>,
    ) -> Self {
        self.content_security_policy = input;
        self
    }
    /// <p>Determines whether CloudFront includes the <code>X-Content-Type-Options</code> HTTP response header with its value set to <code>nosniff</code>.</p>
    /// <p>For more information about the <code>X-Content-Type-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a> in the MDN Web Docs.</p>
    pub fn content_type_options(
        mut self,
        input: crate::types::ResponseHeadersPolicyContentTypeOptions,
    ) -> Self {
        self.content_type_options = Some(input);
        self
    }
    /// <p>Determines whether CloudFront includes the <code>X-Content-Type-Options</code> HTTP response header with its value set to <code>nosniff</code>.</p>
    /// <p>For more information about the <code>X-Content-Type-Options</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options</a> in the MDN Web Docs.</p>
    pub fn set_content_type_options(
        mut self,
        input: std::option::Option<crate::types::ResponseHeadersPolicyContentTypeOptions>,
    ) -> Self {
        self.content_type_options = input;
        self
    }
    /// <p>Determines whether CloudFront includes the <code>Strict-Transport-Security</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Strict-Transport-Security</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">Strict-Transport-Security</a> in the MDN Web Docs.</p>
    pub fn strict_transport_security(
        mut self,
        input: crate::types::ResponseHeadersPolicyStrictTransportSecurity,
    ) -> Self {
        self.strict_transport_security = Some(input);
        self
    }
    /// <p>Determines whether CloudFront includes the <code>Strict-Transport-Security</code> HTTP response header and the header's value.</p>
    /// <p>For more information about the <code>Strict-Transport-Security</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">Strict-Transport-Security</a> in the MDN Web Docs.</p>
    pub fn set_strict_transport_security(
        mut self,
        input: std::option::Option<crate::types::ResponseHeadersPolicyStrictTransportSecurity>,
    ) -> Self {
        self.strict_transport_security = input;
        self
    }
    /// Consumes the builder and constructs a [`ResponseHeadersPolicySecurityHeadersConfig`](crate::types::ResponseHeadersPolicySecurityHeadersConfig).
    pub fn build(self) -> crate::types::ResponseHeadersPolicySecurityHeadersConfig {
        crate::types::ResponseHeadersPolicySecurityHeadersConfig {
            xss_protection: self.xss_protection,
            frame_options: self.frame_options,
            referrer_policy: self.referrer_policy,
            content_security_policy: self.content_security_policy,
            content_type_options: self.content_type_options,
            strict_transport_security: self.strict_transport_security,
        }
    }
}
