// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Determines whether CloudFront includes the <code>Strict-Transport-Security</code> HTTP response header and the header's value.</p>
/// <p>For more information about the <code>Strict-Transport-Security</code> HTTP response header, see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security">Strict-Transport-Security</a> in the MDN Web Docs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResponseHeadersPolicyStrictTransportSecurity {
    /// <p>A Boolean that determines whether CloudFront overrides the <code>Strict-Transport-Security</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    #[doc(hidden)]
    pub r#override: std::option::Option<bool>,
    /// <p>A Boolean that determines whether CloudFront includes the <code>includeSubDomains</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    #[doc(hidden)]
    pub include_subdomains: std::option::Option<bool>,
    /// <p>A Boolean that determines whether CloudFront includes the <code>preload</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    #[doc(hidden)]
    pub preload: std::option::Option<bool>,
    /// <p>A number that CloudFront uses as the value for the <code>max-age</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    #[doc(hidden)]
    pub access_control_max_age_sec: std::option::Option<i32>,
}
impl ResponseHeadersPolicyStrictTransportSecurity {
    /// <p>A Boolean that determines whether CloudFront overrides the <code>Strict-Transport-Security</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    pub fn r#override(&self) -> std::option::Option<bool> {
        self.r#override
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>includeSubDomains</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn include_subdomains(&self) -> std::option::Option<bool> {
        self.include_subdomains
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>preload</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn preload(&self) -> std::option::Option<bool> {
        self.preload
    }
    /// <p>A number that CloudFront uses as the value for the <code>max-age</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn access_control_max_age_sec(&self) -> std::option::Option<i32> {
        self.access_control_max_age_sec
    }
}
impl ResponseHeadersPolicyStrictTransportSecurity {
    /// Creates a new builder-style object to manufacture [`ResponseHeadersPolicyStrictTransportSecurity`](crate::types::ResponseHeadersPolicyStrictTransportSecurity).
    pub fn builder() -> crate::types::builders::ResponseHeadersPolicyStrictTransportSecurityBuilder
    {
        crate::types::builders::ResponseHeadersPolicyStrictTransportSecurityBuilder::default()
    }
}

/// A builder for [`ResponseHeadersPolicyStrictTransportSecurity`](crate::types::ResponseHeadersPolicyStrictTransportSecurity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResponseHeadersPolicyStrictTransportSecurityBuilder {
    pub(crate) r#override: std::option::Option<bool>,
    pub(crate) include_subdomains: std::option::Option<bool>,
    pub(crate) preload: std::option::Option<bool>,
    pub(crate) access_control_max_age_sec: std::option::Option<i32>,
}
impl ResponseHeadersPolicyStrictTransportSecurityBuilder {
    /// <p>A Boolean that determines whether CloudFront overrides the <code>Strict-Transport-Security</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    pub fn r#override(mut self, input: bool) -> Self {
        self.r#override = Some(input);
        self
    }
    /// <p>A Boolean that determines whether CloudFront overrides the <code>Strict-Transport-Security</code> HTTP response header received from the origin with the one specified in this response headers policy.</p>
    pub fn set_override(mut self, input: std::option::Option<bool>) -> Self {
        self.r#override = input;
        self
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>includeSubDomains</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn include_subdomains(mut self, input: bool) -> Self {
        self.include_subdomains = Some(input);
        self
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>includeSubDomains</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn set_include_subdomains(mut self, input: std::option::Option<bool>) -> Self {
        self.include_subdomains = input;
        self
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>preload</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn preload(mut self, input: bool) -> Self {
        self.preload = Some(input);
        self
    }
    /// <p>A Boolean that determines whether CloudFront includes the <code>preload</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn set_preload(mut self, input: std::option::Option<bool>) -> Self {
        self.preload = input;
        self
    }
    /// <p>A number that CloudFront uses as the value for the <code>max-age</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn access_control_max_age_sec(mut self, input: i32) -> Self {
        self.access_control_max_age_sec = Some(input);
        self
    }
    /// <p>A number that CloudFront uses as the value for the <code>max-age</code> directive in the <code>Strict-Transport-Security</code> HTTP response header.</p>
    pub fn set_access_control_max_age_sec(mut self, input: std::option::Option<i32>) -> Self {
        self.access_control_max_age_sec = input;
        self
    }
    /// Consumes the builder and constructs a [`ResponseHeadersPolicyStrictTransportSecurity`](crate::types::ResponseHeadersPolicyStrictTransportSecurity).
    pub fn build(self) -> crate::types::ResponseHeadersPolicyStrictTransportSecurity {
        crate::types::ResponseHeadersPolicyStrictTransportSecurity {
            r#override: self.r#override,
            include_subdomains: self.include_subdomains,
            preload: self.preload,
            access_control_max_age_sec: self.access_control_max_age_sec,
        }
    }
}
