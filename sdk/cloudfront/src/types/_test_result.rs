// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the result of testing a CloudFront function with <code>TestFunction</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TestResult {
    /// <p>Contains configuration information and metadata about the CloudFront function that was tested.</p>
    pub function_summary: ::std::option::Option<crate::types::FunctionSummary>,
    /// <p>The amount of time that the function took to run as a percentage of the maximum allowed time. For example, a compute utilization of 35 means that the function completed in 35% of the maximum allowed time.</p>
    pub compute_utilization: ::std::option::Option<::std::string::String>,
    /// <p>Contains the log lines that the function wrote (if any) when running the test.</p>
    pub function_execution_logs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If the result of testing the function was an error, this field contains the error message.</p>
    pub function_error_message: ::std::option::Option<::std::string::String>,
    /// <p>The event object returned by the function. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html">Event object structure</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub function_output: ::std::option::Option<::std::string::String>,
}
impl TestResult {
    /// <p>Contains configuration information and metadata about the CloudFront function that was tested.</p>
    pub fn function_summary(&self) -> ::std::option::Option<&crate::types::FunctionSummary> {
        self.function_summary.as_ref()
    }
    /// <p>The amount of time that the function took to run as a percentage of the maximum allowed time. For example, a compute utilization of 35 means that the function completed in 35% of the maximum allowed time.</p>
    pub fn compute_utilization(&self) -> ::std::option::Option<&str> {
        self.compute_utilization.as_deref()
    }
    /// <p>Contains the log lines that the function wrote (if any) when running the test.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.function_execution_logs.is_none()`.
    pub fn function_execution_logs(&self) -> &[::std::string::String] {
        self.function_execution_logs.as_deref().unwrap_or_default()
    }
    /// <p>If the result of testing the function was an error, this field contains the error message.</p>
    pub fn function_error_message(&self) -> ::std::option::Option<&str> {
        self.function_error_message.as_deref()
    }
    /// <p>The event object returned by the function. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html">Event object structure</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn function_output(&self) -> ::std::option::Option<&str> {
        self.function_output.as_deref()
    }
}
impl ::std::fmt::Debug for TestResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TestResult");
        formatter.field("function_summary", &self.function_summary);
        formatter.field("compute_utilization", &self.compute_utilization);
        formatter.field("function_execution_logs", &"*** Sensitive Data Redacted ***");
        formatter.field("function_error_message", &"*** Sensitive Data Redacted ***");
        formatter.field("function_output", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TestResult {
    /// Creates a new builder-style object to manufacture [`TestResult`](crate::types::TestResult).
    pub fn builder() -> crate::types::builders::TestResultBuilder {
        crate::types::builders::TestResultBuilder::default()
    }
}

/// A builder for [`TestResult`](crate::types::TestResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TestResultBuilder {
    pub(crate) function_summary: ::std::option::Option<crate::types::FunctionSummary>,
    pub(crate) compute_utilization: ::std::option::Option<::std::string::String>,
    pub(crate) function_execution_logs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) function_error_message: ::std::option::Option<::std::string::String>,
    pub(crate) function_output: ::std::option::Option<::std::string::String>,
}
impl TestResultBuilder {
    /// <p>Contains configuration information and metadata about the CloudFront function that was tested.</p>
    pub fn function_summary(mut self, input: crate::types::FunctionSummary) -> Self {
        self.function_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configuration information and metadata about the CloudFront function that was tested.</p>
    pub fn set_function_summary(mut self, input: ::std::option::Option<crate::types::FunctionSummary>) -> Self {
        self.function_summary = input;
        self
    }
    /// <p>Contains configuration information and metadata about the CloudFront function that was tested.</p>
    pub fn get_function_summary(&self) -> &::std::option::Option<crate::types::FunctionSummary> {
        &self.function_summary
    }
    /// <p>The amount of time that the function took to run as a percentage of the maximum allowed time. For example, a compute utilization of 35 means that the function completed in 35% of the maximum allowed time.</p>
    pub fn compute_utilization(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compute_utilization = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The amount of time that the function took to run as a percentage of the maximum allowed time. For example, a compute utilization of 35 means that the function completed in 35% of the maximum allowed time.</p>
    pub fn set_compute_utilization(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compute_utilization = input;
        self
    }
    /// <p>The amount of time that the function took to run as a percentage of the maximum allowed time. For example, a compute utilization of 35 means that the function completed in 35% of the maximum allowed time.</p>
    pub fn get_compute_utilization(&self) -> &::std::option::Option<::std::string::String> {
        &self.compute_utilization
    }
    /// Appends an item to `function_execution_logs`.
    ///
    /// To override the contents of this collection use [`set_function_execution_logs`](Self::set_function_execution_logs).
    ///
    /// <p>Contains the log lines that the function wrote (if any) when running the test.</p>
    pub fn function_execution_logs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.function_execution_logs.unwrap_or_default();
        v.push(input.into());
        self.function_execution_logs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the log lines that the function wrote (if any) when running the test.</p>
    pub fn set_function_execution_logs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.function_execution_logs = input;
        self
    }
    /// <p>Contains the log lines that the function wrote (if any) when running the test.</p>
    pub fn get_function_execution_logs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.function_execution_logs
    }
    /// <p>If the result of testing the function was an error, this field contains the error message.</p>
    pub fn function_error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the result of testing the function was an error, this field contains the error message.</p>
    pub fn set_function_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_error_message = input;
        self
    }
    /// <p>If the result of testing the function was an error, this field contains the error message.</p>
    pub fn get_function_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_error_message
    }
    /// <p>The event object returned by the function. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html">Event object structure</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn function_output(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_output = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The event object returned by the function. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html">Event object structure</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn set_function_output(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_output = input;
        self
    }
    /// <p>The event object returned by the function. For more information about the structure of the event object, see <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/functions-event-structure.html">Event object structure</a> in the <i>Amazon CloudFront Developer Guide</i>.</p>
    pub fn get_function_output(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_output
    }
    /// Consumes the builder and constructs a [`TestResult`](crate::types::TestResult).
    pub fn build(self) -> crate::types::TestResult {
        crate::types::TestResult {
            function_summary: self.function_summary,
            compute_utilization: self.compute_utilization,
            function_execution_logs: self.function_execution_logs,
            function_error_message: self.function_error_message,
            function_output: self.function_output,
        }
    }
}
impl ::std::fmt::Debug for TestResultBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TestResultBuilder");
        formatter.field("function_summary", &self.function_summary);
        formatter.field("compute_utilization", &self.compute_utilization);
        formatter.field("function_execution_logs", &"*** Sensitive Data Redacted ***");
        formatter.field("function_error_message", &"*** Sensitive Data Redacted ***");
        formatter.field("function_output", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
