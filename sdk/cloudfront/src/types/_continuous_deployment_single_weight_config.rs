// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the percentage of traffic to send to a staging distribution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContinuousDeploymentSingleWeightConfig {
    /// <p>The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and .15.</p>
    #[doc(hidden)]
    pub weight: std::option::Option<f32>,
    /// <p>Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.</p>
    #[doc(hidden)]
    pub session_stickiness_config: std::option::Option<crate::types::SessionStickinessConfig>,
}
impl ContinuousDeploymentSingleWeightConfig {
    /// <p>The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and .15.</p>
    pub fn weight(&self) -> std::option::Option<f32> {
        self.weight
    }
    /// <p>Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.</p>
    pub fn session_stickiness_config(
        &self,
    ) -> std::option::Option<&crate::types::SessionStickinessConfig> {
        self.session_stickiness_config.as_ref()
    }
}
impl ContinuousDeploymentSingleWeightConfig {
    /// Creates a new builder-style object to manufacture [`ContinuousDeploymentSingleWeightConfig`](crate::types::ContinuousDeploymentSingleWeightConfig).
    pub fn builder() -> crate::types::builders::ContinuousDeploymentSingleWeightConfigBuilder {
        crate::types::builders::ContinuousDeploymentSingleWeightConfigBuilder::default()
    }
}

/// A builder for [`ContinuousDeploymentSingleWeightConfig`](crate::types::ContinuousDeploymentSingleWeightConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContinuousDeploymentSingleWeightConfigBuilder {
    pub(crate) weight: std::option::Option<f32>,
    pub(crate) session_stickiness_config:
        std::option::Option<crate::types::SessionStickinessConfig>,
}
impl ContinuousDeploymentSingleWeightConfigBuilder {
    /// <p>The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and .15.</p>
    pub fn weight(mut self, input: f32) -> Self {
        self.weight = Some(input);
        self
    }
    /// <p>The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and .15.</p>
    pub fn set_weight(mut self, input: std::option::Option<f32>) -> Self {
        self.weight = input;
        self
    }
    /// <p>Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.</p>
    pub fn session_stickiness_config(
        mut self,
        input: crate::types::SessionStickinessConfig,
    ) -> Self {
        self.session_stickiness_config = Some(input);
        self
    }
    /// <p>Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.</p>
    pub fn set_session_stickiness_config(
        mut self,
        input: std::option::Option<crate::types::SessionStickinessConfig>,
    ) -> Self {
        self.session_stickiness_config = input;
        self
    }
    /// Consumes the builder and constructs a [`ContinuousDeploymentSingleWeightConfig`](crate::types::ContinuousDeploymentSingleWeightConfig).
    pub fn build(self) -> crate::types::ContinuousDeploymentSingleWeightConfig {
        crate::types::ContinuousDeploymentSingleWeightConfig {
            weight: self.weight,
            session_stickiness_config: self.session_stickiness_config,
        }
    }
}
