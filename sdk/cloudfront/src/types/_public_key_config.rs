// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information about a public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublicKeyConfig {
    /// <p>A string included in the request to help make sure that the request can't be replayed.</p>
    #[doc(hidden)]
    pub caller_reference: std::option::Option<std::string::String>,
    /// <p>A name to help identify the public key.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.</p>
    #[doc(hidden)]
    pub encoded_key: std::option::Option<std::string::String>,
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl PublicKeyConfig {
    /// <p>A string included in the request to help make sure that the request can't be replayed.</p>
    pub fn caller_reference(&self) -> std::option::Option<&str> {
        self.caller_reference.as_deref()
    }
    /// <p>A name to help identify the public key.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.</p>
    pub fn encoded_key(&self) -> std::option::Option<&str> {
        self.encoded_key.as_deref()
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl PublicKeyConfig {
    /// Creates a new builder-style object to manufacture [`PublicKeyConfig`](crate::types::PublicKeyConfig).
    pub fn builder() -> crate::types::builders::PublicKeyConfigBuilder {
        crate::types::builders::PublicKeyConfigBuilder::default()
    }
}

/// A builder for [`PublicKeyConfig`](crate::types::PublicKeyConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublicKeyConfigBuilder {
    pub(crate) caller_reference: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) encoded_key: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
}
impl PublicKeyConfigBuilder {
    /// <p>A string included in the request to help make sure that the request can't be replayed.</p>
    pub fn caller_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.caller_reference = Some(input.into());
        self
    }
    /// <p>A string included in the request to help make sure that the request can't be replayed.</p>
    pub fn set_caller_reference(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.caller_reference = input;
        self
    }
    /// <p>A name to help identify the public key.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name to help identify the public key.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.</p>
    pub fn encoded_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encoded_key = Some(input.into());
        self
    }
    /// <p>The public key that you can use with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html">signed URLs and signed cookies</a>, or with <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html">field-level encryption</a>.</p>
    pub fn set_encoded_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encoded_key = input;
        self
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>A comment to describe the public key. The comment cannot be longer than 128 characters.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// Consumes the builder and constructs a [`PublicKeyConfig`](crate::types::PublicKeyConfig).
    pub fn build(self) -> crate::types::PublicKeyConfig {
        crate::types::PublicKeyConfig {
            caller_reference: self.caller_reference,
            name: self.name,
            encoded_key: self.encoded_key,
            comment: self.comment,
        }
    }
}
