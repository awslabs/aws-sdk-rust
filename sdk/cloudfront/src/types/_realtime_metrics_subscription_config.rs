// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A subscription configuration for additional CloudWatch metrics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RealtimeMetricsSubscriptionConfig {
    /// <p>A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.</p>
    pub realtime_metrics_subscription_status: crate::types::RealtimeMetricsSubscriptionStatus,
}
impl RealtimeMetricsSubscriptionConfig {
    /// <p>A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.</p>
    pub fn realtime_metrics_subscription_status(&self) -> &crate::types::RealtimeMetricsSubscriptionStatus {
        &self.realtime_metrics_subscription_status
    }
}
impl RealtimeMetricsSubscriptionConfig {
    /// Creates a new builder-style object to manufacture [`RealtimeMetricsSubscriptionConfig`](crate::types::RealtimeMetricsSubscriptionConfig).
    pub fn builder() -> crate::types::builders::RealtimeMetricsSubscriptionConfigBuilder {
        crate::types::builders::RealtimeMetricsSubscriptionConfigBuilder::default()
    }
}

/// A builder for [`RealtimeMetricsSubscriptionConfig`](crate::types::RealtimeMetricsSubscriptionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RealtimeMetricsSubscriptionConfigBuilder {
    pub(crate) realtime_metrics_subscription_status: ::std::option::Option<crate::types::RealtimeMetricsSubscriptionStatus>,
}
impl RealtimeMetricsSubscriptionConfigBuilder {
    /// <p>A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.</p>
    /// This field is required.
    pub fn realtime_metrics_subscription_status(mut self, input: crate::types::RealtimeMetricsSubscriptionStatus) -> Self {
        self.realtime_metrics_subscription_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.</p>
    pub fn set_realtime_metrics_subscription_status(mut self, input: ::std::option::Option<crate::types::RealtimeMetricsSubscriptionStatus>) -> Self {
        self.realtime_metrics_subscription_status = input;
        self
    }
    /// <p>A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.</p>
    pub fn get_realtime_metrics_subscription_status(&self) -> &::std::option::Option<crate::types::RealtimeMetricsSubscriptionStatus> {
        &self.realtime_metrics_subscription_status
    }
    /// Consumes the builder and constructs a [`RealtimeMetricsSubscriptionConfig`](crate::types::RealtimeMetricsSubscriptionConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`realtime_metrics_subscription_status`](crate::types::builders::RealtimeMetricsSubscriptionConfigBuilder::realtime_metrics_subscription_status)
    pub fn build(self) -> ::std::result::Result<crate::types::RealtimeMetricsSubscriptionConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RealtimeMetricsSubscriptionConfig {
            realtime_metrics_subscription_status: self.realtime_metrics_subscription_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "realtime_metrics_subscription_status",
                    "realtime_metrics_subscription_status was not specified but it is required when building RealtimeMetricsSubscriptionConfig",
                )
            })?,
        })
    }
}
