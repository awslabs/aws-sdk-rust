// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration for a continuous deployment policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContinuousDeploymentPolicyConfig {
    /// <p>The CloudFront domain name of the staging distribution. For example: <code>d111111abcdef8.cloudfront.net</code>.</p>
    #[doc(hidden)]
    pub staging_distribution_dns_names:
        std::option::Option<crate::types::StagingDistributionDnsNames>,
    /// <p>A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is <code>true</code>, this policy is enabled and in effect. When this value is <code>false</code>, this policy is not enabled and has no effect.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>Contains the parameters for routing production traffic from your primary to staging distributions.</p>
    #[doc(hidden)]
    pub traffic_config: std::option::Option<crate::types::TrafficConfig>,
}
impl ContinuousDeploymentPolicyConfig {
    /// <p>The CloudFront domain name of the staging distribution. For example: <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub fn staging_distribution_dns_names(
        &self,
    ) -> std::option::Option<&crate::types::StagingDistributionDnsNames> {
        self.staging_distribution_dns_names.as_ref()
    }
    /// <p>A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is <code>true</code>, this policy is enabled and in effect. When this value is <code>false</code>, this policy is not enabled and has no effect.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>Contains the parameters for routing production traffic from your primary to staging distributions.</p>
    pub fn traffic_config(&self) -> std::option::Option<&crate::types::TrafficConfig> {
        self.traffic_config.as_ref()
    }
}
impl ContinuousDeploymentPolicyConfig {
    /// Creates a new builder-style object to manufacture [`ContinuousDeploymentPolicyConfig`](crate::types::ContinuousDeploymentPolicyConfig).
    pub fn builder() -> crate::types::builders::ContinuousDeploymentPolicyConfigBuilder {
        crate::types::builders::ContinuousDeploymentPolicyConfigBuilder::default()
    }
}

/// A builder for [`ContinuousDeploymentPolicyConfig`](crate::types::ContinuousDeploymentPolicyConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContinuousDeploymentPolicyConfigBuilder {
    pub(crate) staging_distribution_dns_names:
        std::option::Option<crate::types::StagingDistributionDnsNames>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) traffic_config: std::option::Option<crate::types::TrafficConfig>,
}
impl ContinuousDeploymentPolicyConfigBuilder {
    /// <p>The CloudFront domain name of the staging distribution. For example: <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub fn staging_distribution_dns_names(
        mut self,
        input: crate::types::StagingDistributionDnsNames,
    ) -> Self {
        self.staging_distribution_dns_names = Some(input);
        self
    }
    /// <p>The CloudFront domain name of the staging distribution. For example: <code>d111111abcdef8.cloudfront.net</code>.</p>
    pub fn set_staging_distribution_dns_names(
        mut self,
        input: std::option::Option<crate::types::StagingDistributionDnsNames>,
    ) -> Self {
        self.staging_distribution_dns_names = input;
        self
    }
    /// <p>A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is <code>true</code>, this policy is enabled and in effect. When this value is <code>false</code>, this policy is not enabled and has no effect.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is <code>true</code>, this policy is enabled and in effect. When this value is <code>false</code>, this policy is not enabled and has no effect.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Contains the parameters for routing production traffic from your primary to staging distributions.</p>
    pub fn traffic_config(mut self, input: crate::types::TrafficConfig) -> Self {
        self.traffic_config = Some(input);
        self
    }
    /// <p>Contains the parameters for routing production traffic from your primary to staging distributions.</p>
    pub fn set_traffic_config(
        mut self,
        input: std::option::Option<crate::types::TrafficConfig>,
    ) -> Self {
        self.traffic_config = input;
        self
    }
    /// Consumes the builder and constructs a [`ContinuousDeploymentPolicyConfig`](crate::types::ContinuousDeploymentPolicyConfig).
    pub fn build(self) -> crate::types::ContinuousDeploymentPolicyConfig {
        crate::types::ContinuousDeploymentPolicyConfig {
            staging_distribution_dns_names: self.staging_distribution_dns_names,
            enabled: self.enabled,
            traffic_config: self.traffic_config,
        }
    }
}
