// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A CloudFront function that is associated with a cache behavior in a CloudFront distribution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FunctionAssociation {
    /// <p>The Amazon Resource Name (ARN) of the function.</p>
    #[doc(hidden)]
    pub function_arn: std::option::Option<std::string::String>,
    /// <p>The event type of the function, either <code>viewer-request</code> or <code>viewer-response</code>. You cannot use origin-facing event types (<code>origin-request</code> and <code>origin-response</code>) with a CloudFront function.</p>
    #[doc(hidden)]
    pub event_type: std::option::Option<crate::types::EventType>,
}
impl FunctionAssociation {
    /// <p>The Amazon Resource Name (ARN) of the function.</p>
    pub fn function_arn(&self) -> std::option::Option<&str> {
        self.function_arn.as_deref()
    }
    /// <p>The event type of the function, either <code>viewer-request</code> or <code>viewer-response</code>. You cannot use origin-facing event types (<code>origin-request</code> and <code>origin-response</code>) with a CloudFront function.</p>
    pub fn event_type(&self) -> std::option::Option<&crate::types::EventType> {
        self.event_type.as_ref()
    }
}
impl FunctionAssociation {
    /// Creates a new builder-style object to manufacture [`FunctionAssociation`](crate::types::FunctionAssociation).
    pub fn builder() -> crate::types::builders::FunctionAssociationBuilder {
        crate::types::builders::FunctionAssociationBuilder::default()
    }
}

/// A builder for [`FunctionAssociation`](crate::types::FunctionAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FunctionAssociationBuilder {
    pub(crate) function_arn: std::option::Option<std::string::String>,
    pub(crate) event_type: std::option::Option<crate::types::EventType>,
}
impl FunctionAssociationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the function.</p>
    pub fn function_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.function_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the function.</p>
    pub fn set_function_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function_arn = input;
        self
    }
    /// <p>The event type of the function, either <code>viewer-request</code> or <code>viewer-response</code>. You cannot use origin-facing event types (<code>origin-request</code> and <code>origin-response</code>) with a CloudFront function.</p>
    pub fn event_type(mut self, input: crate::types::EventType) -> Self {
        self.event_type = Some(input);
        self
    }
    /// <p>The event type of the function, either <code>viewer-request</code> or <code>viewer-response</code>. You cannot use origin-facing event types (<code>origin-request</code> and <code>origin-response</code>) with a CloudFront function.</p>
    pub fn set_event_type(mut self, input: std::option::Option<crate::types::EventType>) -> Self {
        self.event_type = input;
        self
    }
    /// Consumes the builder and constructs a [`FunctionAssociation`](crate::types::FunctionAssociation).
    pub fn build(self) -> crate::types::FunctionAssociation {
        crate::types::FunctionAssociation {
            function_arn: self.function_arn,
            event_type: self.event_type,
        }
    }
}
