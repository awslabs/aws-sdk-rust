// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CachePolicyCookiesConfig {
    /// <p>Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Cookies in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests that are <i> <b>not</b> </i> listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub cookie_behavior: std::option::Option<crate::types::CachePolicyCookieBehavior>,
    /// <p>Contains a list of cookie names.</p>
    #[doc(hidden)]
    pub cookies: std::option::Option<crate::types::CookieNames>,
}
impl CachePolicyCookiesConfig {
    /// <p>Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Cookies in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests that are <i> <b>not</b> </i> listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn cookie_behavior(&self) -> std::option::Option<&crate::types::CachePolicyCookieBehavior> {
        self.cookie_behavior.as_ref()
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn cookies(&self) -> std::option::Option<&crate::types::CookieNames> {
        self.cookies.as_ref()
    }
}
impl CachePolicyCookiesConfig {
    /// Creates a new builder-style object to manufacture [`CachePolicyCookiesConfig`](crate::types::CachePolicyCookiesConfig).
    pub fn builder() -> crate::types::builders::CachePolicyCookiesConfigBuilder {
        crate::types::builders::CachePolicyCookiesConfigBuilder::default()
    }
}

/// A builder for [`CachePolicyCookiesConfig`](crate::types::CachePolicyCookiesConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CachePolicyCookiesConfigBuilder {
    pub(crate) cookie_behavior: std::option::Option<crate::types::CachePolicyCookieBehavior>,
    pub(crate) cookies: std::option::Option<crate::types::CookieNames>,
}
impl CachePolicyCookiesConfigBuilder {
    /// <p>Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Cookies in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests that are <i> <b>not</b> </i> listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn cookie_behavior(mut self, input: crate::types::CachePolicyCookieBehavior) -> Self {
        self.cookie_behavior = Some(input);
        self
    }
    /// <p>Determines whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values are:</p>
    /// <ul>
    /// <li> <p> <code>none</code> – Cookies in viewer requests are not included in the cache key and are not automatically included in requests that CloudFront sends to the origin. Even when this field is set to <code>none</code>, any cookies that are listed in an <code>OriginRequestPolicy</code> <i>are</i> included in origin requests.</p> </li>
    /// <li> <p> <code>whitelist</code> – The cookies in viewer requests that are listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>allExcept</code> – All cookies in viewer requests that are <i> <b>not</b> </i> listed in the <code>CookieNames</code> type are included in the cache key and automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// <li> <p> <code>all</code> – All cookies in viewer requests are included in the cache key and are automatically included in requests that CloudFront sends to the origin.</p> </li>
    /// </ul>
    pub fn set_cookie_behavior(
        mut self,
        input: std::option::Option<crate::types::CachePolicyCookieBehavior>,
    ) -> Self {
        self.cookie_behavior = input;
        self
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn cookies(mut self, input: crate::types::CookieNames) -> Self {
        self.cookies = Some(input);
        self
    }
    /// <p>Contains a list of cookie names.</p>
    pub fn set_cookies(mut self, input: std::option::Option<crate::types::CookieNames>) -> Self {
        self.cookies = input;
        self
    }
    /// Consumes the builder and constructs a [`CachePolicyCookiesConfig`](crate::types::CachePolicyCookiesConfig).
    pub fn build(self) -> crate::types::CachePolicyCookiesConfig {
        crate::types::CachePolicyCookiesConfig {
            cookie_behavior: self.cookie_behavior,
            cookies: self.cookies,
        }
    }
}
