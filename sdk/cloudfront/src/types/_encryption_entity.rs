// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Complex data type for field-level encryption profiles that includes the encryption key and field pattern specifications.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionEntity {
    /// <p>The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.</p>
    pub public_key_id: ::std::string::String,
    /// <p>The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.</p>
    pub provider_id: ::std::string::String,
    /// <p>Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive.</p>
    pub field_patterns: ::std::option::Option<crate::types::FieldPatterns>,
}
impl EncryptionEntity {
    /// <p>The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.</p>
    pub fn public_key_id(&self) -> &str {
        use std::ops::Deref;
        self.public_key_id.deref()
    }
    /// <p>The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.</p>
    pub fn provider_id(&self) -> &str {
        use std::ops::Deref;
        self.provider_id.deref()
    }
    /// <p>Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive.</p>
    pub fn field_patterns(&self) -> ::std::option::Option<&crate::types::FieldPatterns> {
        self.field_patterns.as_ref()
    }
}
impl EncryptionEntity {
    /// Creates a new builder-style object to manufacture [`EncryptionEntity`](crate::types::EncryptionEntity).
    pub fn builder() -> crate::types::builders::EncryptionEntityBuilder {
        crate::types::builders::EncryptionEntityBuilder::default()
    }
}

/// A builder for [`EncryptionEntity`](crate::types::EncryptionEntity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EncryptionEntityBuilder {
    pub(crate) public_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) provider_id: ::std::option::Option<::std::string::String>,
    pub(crate) field_patterns: ::std::option::Option<crate::types::FieldPatterns>,
}
impl EncryptionEntityBuilder {
    /// <p>The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.</p>
    /// This field is required.
    pub fn public_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.</p>
    pub fn set_public_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key_id = input;
        self
    }
    /// <p>The public key associated with a set of field-level encryption patterns, to be used when encrypting the fields that match the patterns.</p>
    pub fn get_public_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key_id
    }
    /// <p>The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.</p>
    /// This field is required.
    pub fn provider_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.</p>
    pub fn set_provider_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_id = input;
        self
    }
    /// <p>The provider associated with the public key being used for encryption. This value must also be provided with the private key for applications to be able to decrypt data.</p>
    pub fn get_provider_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_id
    }
    /// <p>Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive.</p>
    /// This field is required.
    pub fn field_patterns(mut self, input: crate::types::FieldPatterns) -> Self {
        self.field_patterns = ::std::option::Option::Some(input);
        self
    }
    /// <p>Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive.</p>
    pub fn set_field_patterns(mut self, input: ::std::option::Option<crate::types::FieldPatterns>) -> Self {
        self.field_patterns = input;
        self
    }
    /// <p>Field patterns in a field-level encryption content type profile specify the fields that you want to be encrypted. You can provide the full field name, or any beginning characters followed by a wildcard (*). You can't overlap field patterns. For example, you can't have both ABC* and AB*. Note that field patterns are case-sensitive.</p>
    pub fn get_field_patterns(&self) -> &::std::option::Option<crate::types::FieldPatterns> {
        &self.field_patterns
    }
    /// Consumes the builder and constructs a [`EncryptionEntity`](crate::types::EncryptionEntity).
    /// This method will fail if any of the following fields are not set:
    /// - [`public_key_id`](crate::types::builders::EncryptionEntityBuilder::public_key_id)
    /// - [`provider_id`](crate::types::builders::EncryptionEntityBuilder::provider_id)
    pub fn build(self) -> ::std::result::Result<crate::types::EncryptionEntity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EncryptionEntity {
            public_key_id: self.public_key_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "public_key_id",
                    "public_key_id was not specified but it is required when building EncryptionEntity",
                )
            })?,
            provider_id: self.provider_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_id",
                    "provider_id was not specified but it is required when building EncryptionEntity",
                )
            })?,
            field_patterns: self.field_patterns,
        })
    }
}
