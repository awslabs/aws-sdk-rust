// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateServicePipeline`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`service_name(impl Into<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::service_name) / [`set_service_name(Option<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::set_service_name): <p>The name of the service to that the pipeline is associated with.</p>
    ///   - [`spec(impl Into<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::spec) / [`set_spec(Option<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::set_spec): <p>The spec for the service pipeline to update.</p>
    ///   - [`deployment_type(DeploymentUpdateType)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::deployment_type) / [`set_deployment_type(Option<DeploymentUpdateType>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::set_deployment_type): <p>The deployment type.</p>  <p>There are four modes for updating a service pipeline. The <code>deploymentType</code> field defines the mode.</p>  <dl>   <dt></dt>   <dd>    <p> <code>NONE</code> </p>    <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>   </dd>   <dt></dt>   <dd>    <p> <code>CURRENT_VERSION</code> </p>    <p>In this mode, the service pipeline is deployed and updated with the new spec that you provide. Only requested parameters are updated. <i>Donâ€™t</i> include major or minor version parameters when you use this <code>deployment-type</code>.</p>   </dd>   <dt></dt>   <dd>    <p> <code>MINOR_VERSION</code> </p>    <p>In this mode, the service pipeline is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can specify a different minor version of the current major version in use.</p>   </dd>   <dt></dt>   <dd>    <p> <code>MAJOR_VERSION</code> </p>    <p>In this mode, the service pipeline is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.</p>   </dd>  </dl>
    ///   - [`template_major_version(impl Into<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::template_major_version) / [`set_template_major_version(Option<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::set_template_major_version): <p>The major version of the service template that was used to create the service that the pipeline is associated with.</p>
    ///   - [`template_minor_version(impl Into<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::template_minor_version) / [`set_template_minor_version(Option<String>)`](crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::set_template_minor_version): <p>The minor version of the service template that was used to create the service that the pipeline is associated with.</p>
    /// - On success, responds with [`UpdateServicePipelineOutput`](crate::operation::update_service_pipeline::UpdateServicePipelineOutput) with field(s):
    ///   - [`pipeline(Option<ServicePipeline>)`](crate::operation::update_service_pipeline::UpdateServicePipelineOutput::pipeline): <p>The pipeline details that are returned by Proton.</p>
    /// - On failure, responds with [`SdkError<UpdateServicePipelineError>`](crate::operation::update_service_pipeline::UpdateServicePipelineError)
    pub fn update_service_pipeline(
        &self,
    ) -> crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder
    {
        crate::operation::update_service_pipeline::builders::UpdateServicePipelineFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
