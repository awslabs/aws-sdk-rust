// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateServiceInstance`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::set_name): <p>The name of the service instance to update.</p>
    ///   - [`service_name(impl Into<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::service_name) / [`set_service_name(Option<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::set_service_name): <p>The name of the service that the service instance belongs to.</p>
    ///   - [`deployment_type(DeploymentUpdateType)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::deployment_type) / [`set_deployment_type(Option<DeploymentUpdateType>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::set_deployment_type): <p>The deployment type. It defines the mode for updating a service instance, as follows:</p>  <dl>   <dt></dt>   <dd>    <p> <code>NONE</code> </p>    <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>   </dd>   <dt></dt>   <dd>    <p> <code>CURRENT_VERSION</code> </p>    <p>In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. <i>Donâ€™t</i> include major or minor version parameters when you use this deployment type.</p>   </dd>   <dt></dt>   <dd>    <p> <code>MINOR_VERSION</code> </p>    <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.</p>   </dd>   <dt></dt>   <dd>    <p> <code>MAJOR_VERSION</code> </p>    <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.</p>   </dd>  </dl>
    ///   - [`spec(impl Into<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::spec) / [`set_spec(Option<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::set_spec): <p>The formatted specification that defines the service instance update.</p>
    ///   - [`template_major_version(impl Into<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::template_major_version) / [`set_template_major_version(Option<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::set_template_major_version): <p>The major version of the service template to update.</p>
    ///   - [`template_minor_version(impl Into<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::template_minor_version) / [`set_template_minor_version(Option<String>)`](crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::set_template_minor_version): <p>The minor version of the service template to update.</p>
    /// - On success, responds with [`UpdateServiceInstanceOutput`](crate::operation::update_service_instance::UpdateServiceInstanceOutput) with field(s):
    ///   - [`service_instance(Option<ServiceInstance>)`](crate::operation::update_service_instance::UpdateServiceInstanceOutput::service_instance): <p>The service instance summary data that's returned by Proton.</p>
    /// - On failure, responds with [`SdkError<UpdateServiceInstanceError>`](crate::operation::update_service_instance::UpdateServiceInstanceError)
    pub fn update_service_instance(
        &self,
    ) -> crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder
    {
        crate::operation::update_service_instance::builders::UpdateServiceInstanceFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
