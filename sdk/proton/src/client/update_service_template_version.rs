// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateServiceTemplateVersion`](crate::client::fluent_builders::UpdateServiceTemplateVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`template_name(impl Into<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::template_name) / [`set_template_name(Option<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_template_name): <p>The name of the service template.</p>
    ///   - [`major_version(impl Into<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::major_version) / [`set_major_version(Option<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_major_version): <p>To update a major version of a service template, include <code>major Version</code>.</p>
    ///   - [`minor_version(impl Into<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::minor_version) / [`set_minor_version(Option<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_minor_version): <p>To update a minor version of a service template, include <code>minorVersion</code>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_description): <p>A description of a service template version to update.</p>
    ///   - [`status(TemplateVersionStatus)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::status) / [`set_status(Option<TemplateVersionStatus>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_status): <p>The status of the service template minor version to update.</p>
    ///   - [`compatible_environment_templates(Vec<CompatibleEnvironmentTemplateInput>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::compatible_environment_templates) / [`set_compatible_environment_templates(Option<Vec<CompatibleEnvironmentTemplateInput>>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_compatible_environment_templates): <p>An array of environment template objects that are compatible with this service template version. A service instance based on this service template version can run in environments based on compatible templates.</p>
    ///   - [`supported_component_sources(Vec<ServiceTemplateSupportedComponentSourceType>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::supported_component_sources) / [`set_supported_component_sources(Option<Vec<ServiceTemplateSupportedComponentSourceType>>)`](crate::client::fluent_builders::UpdateServiceTemplateVersion::set_supported_component_sources): <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p> <note>   <p>A change to <code>supportedComponentSources</code> doesn't impact existing component attachments to instances based on this template version. A change only affects later associations.</p>  </note>  <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    /// - On success, responds with [`UpdateServiceTemplateVersionOutput`](crate::output::UpdateServiceTemplateVersionOutput) with field(s):
    ///   - [`service_template_version(Option<ServiceTemplateVersion>)`](crate::output::UpdateServiceTemplateVersionOutput::service_template_version): <p>The service template version detail data that's returned by Proton.</p>
    /// - On failure, responds with [`SdkError<UpdateServiceTemplateVersionError>`](crate::error::UpdateServiceTemplateVersionError)
    pub fn update_service_template_version(
        &self,
    ) -> crate::client::fluent_builders::UpdateServiceTemplateVersion {
        crate::client::fluent_builders::UpdateServiceTemplateVersion::new(self.handle.clone())
    }
}
