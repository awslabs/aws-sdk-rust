// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListEnvironmentTemplates`](crate::client::fluent_builders::ListEnvironmentTemplates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEnvironmentTemplates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEnvironmentTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEnvironmentTemplates::set_next_token): <p>A token that indicates the location of the next environment template in the array of environment templates, after the list of environment templates that was previously requested.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEnvironmentTemplates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEnvironmentTemplates::set_max_results): <p>The maximum number of environment templates to list.</p>
    /// - On success, responds with [`ListEnvironmentTemplatesOutput`](crate::output::ListEnvironmentTemplatesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListEnvironmentTemplatesOutput::next_token): <p>A token that indicates the location of the next environment template in the array of environment templates, after the current requested list of environment templates.</p>
    ///   - [`templates(Option<Vec<EnvironmentTemplateSummary>>)`](crate::output::ListEnvironmentTemplatesOutput::templates): <p>An array of environment templates with detail data.</p>
    /// - On failure, responds with [`SdkError<ListEnvironmentTemplatesError>`](crate::error::ListEnvironmentTemplatesError)
    pub fn list_environment_templates(
        &self,
    ) -> crate::client::fluent_builders::ListEnvironmentTemplates {
        crate::client::fluent_builders::ListEnvironmentTemplates::new(self.handle.clone())
    }
}
