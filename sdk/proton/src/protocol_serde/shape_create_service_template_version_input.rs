// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_service_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_service_template_version::CreateServiceTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.template_name {
        object.key("templateName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.major_version {
        object.key("majorVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.source {
        #[allow(unused_mut)]
        let mut object_6 = object.key("source").start_object();
        crate::protocol_serde::shape_template_version_source_input::ser_template_version_source_input(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.compatible_environment_templates {
        let mut array_8 = object.key("compatibleEnvironmentTemplates").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_compatible_environment_template_input::ser_compatible_environment_template_input(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.supported_component_sources {
        let mut array_16 = object.key("supportedComponentSources").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}
