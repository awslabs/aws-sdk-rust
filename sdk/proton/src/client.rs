// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) conf: crate::Config,
    #[allow(dead_code)] // unused when a service does not provide any operations
    pub(crate) runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
}

/// Client for AWS Proton
///
/// Client for invoking operations on AWS Proton. Each operation on AWS Proton is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_proton::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific values that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Builder`](crate::config::Builder) struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = ::aws_config::load_from_env().await;
/// let config = aws_sdk_proton::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Using the `Client`
///
/// A client has a function for every operation that can be performed by the service.
/// For example, the [`CancelComponentDeployment`](crate::operation::cancel_component_deployment) operation has
/// a [`Client::cancel_component_deployment`], function which returns a builder for that operation.
/// The fluent builder ultimately has a `send()` function that returns an async future that
/// returns a result, as illustrated below:
///
/// ```rust,ignore
/// let result = client.cancel_component_deployment()
///     .component_name("example")
///     .send()
///     .await;
/// ```
///
/// The underlying HTTP requests that get made by this can be modified with the `customize_operation`
/// function on the fluent builder. See the [`customize`](crate::client::customize) module for more
/// information.
/// # Waiters
///
/// This client provides `wait_until` methods behind the [`Waiters`](crate::client::Waiters) trait.
/// To use them, simply import the trait, and then call one of the `wait_until` methods. This will
/// return a waiter fluent builder that takes various parameters, which are documented on the builder
/// type. Once parameters have been provided, the `wait` method can be called to initiate waiting.
///
/// For example, if there was a `wait_until_thing` method, it could look like:
/// ```rust,ignore
/// let result = client.wait_until_thing()
///     .thing_id("someId")
///     .wait(Duration::from_secs(120))
///     .await;
/// ```
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct Client {
    handle: ::std::sync::Arc<Handle>,
}

impl Client {
    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// This method will panic in the following cases:
    ///
    /// - Retries or timeouts are enabled without a `sleep_impl` configured.
    /// - Identity caching is enabled without a `sleep_impl` and `time_source` configured.
    /// - No `behavior_version` is provided.
    ///
    /// The panic message for each of these will have instructions on how to resolve them.
    #[track_caller]
    pub fn from_conf(conf: crate::Config) -> Self {
        let handle = Handle {
            conf: conf.clone(),
            runtime_plugins: crate::config::base_client_runtime_plugins(conf),
        };
        if let Err(err) = Self::validate_config(&handle) {
            panic!("Invalid client configuration: {err}");
        }
        Self {
            handle: ::std::sync::Arc::new(handle),
        }
    }

    /// Returns the client's configuration.
    pub fn config(&self) -> &crate::Config {
        &self.handle.conf
    }

    fn validate_config(handle: &Handle) -> Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        handle
            .runtime_plugins
            .apply_client_configuration(&mut cfg)?
            .validate_base_client_config(&cfg)?;
        Ok(())
    }
}

///
/// Waiter functions for the client.
///
/// Import this trait to get `wait_until` methods on the client.
///
pub trait Waiters {
    /// Wait until a Component is deployed. Use this after invoking CreateComponent or UpdateComponent
    fn wait_until_component_deployed(&self) -> crate::waiters::component_deployed::ComponentDeployedFluentBuilder;
    /// Wait until a Component is deleted. Use this after invoking DeleteComponent
    fn wait_until_component_deleted(&self) -> crate::waiters::component_deleted::ComponentDeletedFluentBuilder;
    /// Wait until an Environment is deployed. Use this after invoking CreateEnvironment or UpdateEnvironment
    fn wait_until_environment_deployed(&self) -> crate::waiters::environment_deployed::EnvironmentDeployedFluentBuilder;
    /// Wait until an EnvironmentTemplateVersion is registered. Use this after invoking CreateEnvironmentTemplateVersion
    fn wait_until_environment_template_version_registered(
        &self,
    ) -> crate::waiters::environment_template_version_registered::EnvironmentTemplateVersionRegisteredFluentBuilder;
    /// Wait until an Service has deployed its instances and possibly pipeline. Use this after invoking CreateService
    fn wait_until_service_created(&self) -> crate::waiters::service_created::ServiceCreatedFluentBuilder;
    /// Wait until a Service, its instances, and possibly pipeline have been deployed after UpdateService is invoked
    fn wait_until_service_updated(&self) -> crate::waiters::service_updated::ServiceUpdatedFluentBuilder;
    /// Wait until a Service, its instances, and possibly pipeline have been deleted after DeleteService is invoked
    fn wait_until_service_deleted(&self) -> crate::waiters::service_deleted::ServiceDeletedFluentBuilder;
    /// Wait until an ServicePipeline is deployed. Use this after invoking CreateService or UpdateServicePipeline
    fn wait_until_service_pipeline_deployed(&self) -> crate::waiters::service_pipeline_deployed::ServicePipelineDeployedFluentBuilder;
    /// Wait until a ServiceInstance is deployed. Use this after invoking CreateService or UpdateServiceInstance
    fn wait_until_service_instance_deployed(&self) -> crate::waiters::service_instance_deployed::ServiceInstanceDeployedFluentBuilder;
    /// Wait until a ServiceTemplateVersion is registered. Use this after invoking CreateServiceTemplateVersion
    fn wait_until_service_template_version_registered(
        &self,
    ) -> crate::waiters::service_template_version_registered::ServiceTemplateVersionRegisteredFluentBuilder;
}
impl Waiters for Client {
    fn wait_until_component_deployed(&self) -> crate::waiters::component_deployed::ComponentDeployedFluentBuilder {
        crate::waiters::component_deployed::ComponentDeployedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_component_deleted(&self) -> crate::waiters::component_deleted::ComponentDeletedFluentBuilder {
        crate::waiters::component_deleted::ComponentDeletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_environment_deployed(&self) -> crate::waiters::environment_deployed::EnvironmentDeployedFluentBuilder {
        crate::waiters::environment_deployed::EnvironmentDeployedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_environment_template_version_registered(
        &self,
    ) -> crate::waiters::environment_template_version_registered::EnvironmentTemplateVersionRegisteredFluentBuilder {
        crate::waiters::environment_template_version_registered::EnvironmentTemplateVersionRegisteredFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_service_created(&self) -> crate::waiters::service_created::ServiceCreatedFluentBuilder {
        crate::waiters::service_created::ServiceCreatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_service_updated(&self) -> crate::waiters::service_updated::ServiceUpdatedFluentBuilder {
        crate::waiters::service_updated::ServiceUpdatedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_service_deleted(&self) -> crate::waiters::service_deleted::ServiceDeletedFluentBuilder {
        crate::waiters::service_deleted::ServiceDeletedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_service_pipeline_deployed(&self) -> crate::waiters::service_pipeline_deployed::ServicePipelineDeployedFluentBuilder {
        crate::waiters::service_pipeline_deployed::ServicePipelineDeployedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_service_instance_deployed(&self) -> crate::waiters::service_instance_deployed::ServiceInstanceDeployedFluentBuilder {
        crate::waiters::service_instance_deployed::ServiceInstanceDeployedFluentBuilder::new(self.handle.clone())
    }
    fn wait_until_service_template_version_registered(
        &self,
    ) -> crate::waiters::service_template_version_registered::ServiceTemplateVersionRegisteredFluentBuilder {
        crate::waiters::service_template_version_registered::ServiceTemplateVersionRegisteredFluentBuilder::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](::aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    /// - This method will panic if no `BehaviorVersion` is provided. If you experience this panic, set `behavior_version` on the Config or enable the `behavior-version-latest` Cargo feature.
    #[track_caller]
    pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }
}

mod accept_environment_account_connection;

mod cancel_component_deployment;

mod cancel_environment_deployment;

mod cancel_service_instance_deployment;

mod cancel_service_pipeline_deployment;

mod create_component;

mod create_environment;

mod create_environment_account_connection;

mod create_environment_template;

mod create_environment_template_version;

mod create_repository;

mod create_service;

mod create_service_instance;

mod create_service_sync_config;

mod create_service_template;

mod create_service_template_version;

mod create_template_sync_config;

/// Operation customization and supporting types.
///
/// The underlying HTTP requests made during an operation can be customized
/// by calling the `customize()` method on the builder returned from a client
/// operation call. For example, this can be used to add an additional HTTP header:
///
/// ```ignore
/// # async fn wrapper() -> ::std::result::Result<(), aws_sdk_proton::Error> {
/// # let client: aws_sdk_proton::Client = unimplemented!();
/// use ::http::header::{HeaderName, HeaderValue};
///
/// let result = client.cancel_component_deployment()
///     .customize()
///     .mutate_request(|req| {
///         // Add `x-example-header` with value
///         req.headers_mut()
///             .insert(
///                 HeaderName::from_static("x-example-header"),
///                 HeaderValue::from_static("1"),
///             );
///     })
///     .send()
///     .await;
/// # }
/// ```
pub mod customize;

mod delete_component;

mod delete_deployment;

mod delete_environment;

mod delete_environment_account_connection;

mod delete_environment_template;

mod delete_environment_template_version;

mod delete_repository;

mod delete_service;

mod delete_service_sync_config;

mod delete_service_template;

mod delete_service_template_version;

mod delete_template_sync_config;

mod get_account_settings;

mod get_component;

mod get_deployment;

mod get_environment;

mod get_environment_account_connection;

mod get_environment_template;

mod get_environment_template_version;

mod get_repository;

mod get_repository_sync_status;

mod get_resources_summary;

mod get_service;

mod get_service_instance;

mod get_service_instance_sync_status;

mod get_service_sync_blocker_summary;

mod get_service_sync_config;

mod get_service_template;

mod get_service_template_version;

mod get_template_sync_config;

mod get_template_sync_status;

mod list_component_outputs;

mod list_component_provisioned_resources;

mod list_components;

mod list_deployments;

mod list_environment_account_connections;

mod list_environment_outputs;

mod list_environment_provisioned_resources;

mod list_environment_template_versions;

mod list_environment_templates;

mod list_environments;

mod list_repositories;

mod list_repository_sync_definitions;

mod list_service_instance_outputs;

mod list_service_instance_provisioned_resources;

mod list_service_instances;

mod list_service_pipeline_outputs;

mod list_service_pipeline_provisioned_resources;

mod list_service_template_versions;

mod list_service_templates;

mod list_services;

mod list_tags_for_resource;

mod notify_resource_deployment_status_change;

mod reject_environment_account_connection;

mod tag_resource;

mod untag_resource;

mod update_account_settings;

mod update_component;

mod update_environment;

mod update_environment_account_connection;

mod update_environment_template;

mod update_environment_template_version;

mod update_service;

mod update_service_instance;

mod update_service_pipeline;

mod update_service_sync_blocker;

mod update_service_sync_config;

mod update_service_template;

mod update_service_template_version;

mod update_template_sync_config;
