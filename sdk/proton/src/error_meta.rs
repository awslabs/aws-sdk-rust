// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>There <i>isn't</i> sufficient access for performing this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request <i>couldn't</i> be made due to a conflicting operation or resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request failed to register with the service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The requested resource <i>wasn't</i> found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>A quota was exceeded. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-limits.html">Proton Quotas</a> in the <i>Proton User Guide</i>.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input is invalid or an out-of-range value was supplied for the input parameter.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_component_deployment::CancelComponentDeploymentError> for Error {
    fn from(
        err: crate::operation::cancel_component_deployment::CancelComponentDeploymentError,
    ) -> Self {
        match err {
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_component_deployment::CancelComponentDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError>
    for Error
{
    fn from(
        err: crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError,
    ) -> Self {
        match err {
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_environment_deployment::CancelEnvironmentDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError>
    for Error
{
    fn from(
        err: crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError,
    ) -> Self {
        match err {
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError>
    for Error
{
    fn from(
        err: crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError,
    ) -> Self {
        match err {
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_service_pipeline_deployment::CancelServicePipelineDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_component::CreateComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_component::CreateComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_component::CreateComponentError> for Error {
    fn from(err: crate::operation::create_component::CreateComponentError) -> Self {
        match err {
            crate::operation::create_component::CreateComponentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_component::CreateComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_component::CreateComponentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_component::CreateComponentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_component::CreateComponentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_component::CreateComponentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_component::CreateComponentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_component::CreateComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_environment::CreateEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_environment::CreateEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment::CreateEnvironmentError> for Error {
    fn from(err: crate::operation::create_environment::CreateEnvironmentError) -> Self {
        match err {
            crate::operation::create_environment::CreateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment::CreateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment::CreateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment_account_connection::CreateEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_environment_template::CreateEnvironmentTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_environment_template::CreateEnvironmentTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment_template::CreateEnvironmentTemplateError> for Error {
    fn from(
        err: crate::operation::create_environment_template::CreateEnvironmentTemplateError,
    ) -> Self {
        match err {
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment_template::CreateEnvironmentTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_repository::CreateRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_repository::CreateRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_repository::CreateRepositoryError> for Error {
    fn from(err: crate::operation::create_repository::CreateRepositoryError) -> Self {
        match err {
            crate::operation::create_repository::CreateRepositoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_repository::CreateRepositoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_repository::CreateRepositoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_repository::CreateRepositoryError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_repository::CreateRepositoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_repository::CreateRepositoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_repository::CreateRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_service::CreateServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_service::CreateServiceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service::CreateServiceError> for Error {
    fn from(err: crate::operation::create_service::CreateServiceError) -> Self {
        match err {
            crate::operation::create_service::CreateServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_service::CreateServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_service::CreateServiceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_service::CreateServiceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_service::CreateServiceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_service::CreateServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_service::CreateServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_service::CreateServiceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_service_template::CreateServiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_service_template::CreateServiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_template::CreateServiceTemplateError> for Error {
    fn from(err: crate::operation::create_service_template::CreateServiceTemplateError) -> Self {
        match err {
            crate::operation::create_service_template::CreateServiceTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_service_template::CreateServiceTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_service_template::CreateServiceTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_service_template::CreateServiceTemplateError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_service_template::CreateServiceTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_service_template::CreateServiceTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_service_template::CreateServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_service_template_version::CreateServiceTemplateVersionError>
    for Error
{
    fn from(
        err: crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
    ) -> Self {
        match err {
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_template_sync_config::CreateTemplateSyncConfigError> for Error {
    fn from(
        err: crate::operation::create_template_sync_config::CreateTemplateSyncConfigError,
    ) -> Self {
        match err {
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_template_sync_config::CreateTemplateSyncConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_component::DeleteComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_component::DeleteComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_component::DeleteComponentError> for Error {
    fn from(err: crate::operation::delete_component::DeleteComponentError) -> Self {
        match err {
            crate::operation::delete_component::DeleteComponentError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_component::DeleteComponentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_component::DeleteComponentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_component::DeleteComponentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_component::DeleteComponentError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::delete_component::DeleteComponentError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::delete_component::DeleteComponentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_environment::DeleteEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_environment::DeleteEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment::DeleteEnvironmentError> for Error {
    fn from(err: crate::operation::delete_environment::DeleteEnvironmentError) -> Self {
        match err {
            crate::operation::delete_environment::DeleteEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment_account_connection::DeleteEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment_template::DeleteEnvironmentTemplateError> for Error {
    fn from(
        err: crate::operation::delete_environment_template::DeleteEnvironmentTemplateError,
    ) -> Self {
        match err {
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment_template::DeleteEnvironmentTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment_template_version::DeleteEnvironmentTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_repository::DeleteRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_repository::DeleteRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_repository::DeleteRepositoryError> for Error {
    fn from(err: crate::operation::delete_repository::DeleteRepositoryError) -> Self {
        match err {
            crate::operation::delete_repository::DeleteRepositoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_service::DeleteServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_service::DeleteServiceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service::DeleteServiceError> for Error {
    fn from(err: crate::operation::delete_service::DeleteServiceError) -> Self {
        match err {
            crate::operation::delete_service::DeleteServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_service::DeleteServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_service::DeleteServiceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_service::DeleteServiceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_service::DeleteServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_service::DeleteServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_service::DeleteServiceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_service_template::DeleteServiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_service_template::DeleteServiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_template::DeleteServiceTemplateError> for Error {
    fn from(err: crate::operation::delete_service_template::DeleteServiceTemplateError) -> Self {
        match err {
            crate::operation::delete_service_template::DeleteServiceTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_service_template::DeleteServiceTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_service_template::DeleteServiceTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_service_template::DeleteServiceTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_service_template::DeleteServiceTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_service_template::DeleteServiceTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_service_template::DeleteServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError>
    for Error
{
    fn from(
        err: crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError,
    ) -> Self {
        match err {
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_service_template_version::DeleteServiceTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError> for Error {
    fn from(
        err: crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError,
    ) -> Self {
        match err {
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_template_sync_config::DeleteTemplateSyncConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_account_settings::GetAccountSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_account_settings::GetAccountSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_settings::GetAccountSettingsError> for Error {
    fn from(err: crate::operation::get_account_settings::GetAccountSettingsError) -> Self {
        match err {
            crate::operation::get_account_settings::GetAccountSettingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_component::GetComponentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_component::GetComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_component::GetComponentError> for Error {
    fn from(err: crate::operation::get_component::GetComponentError) -> Self {
        match err {
            crate::operation::get_component::GetComponentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_component::GetComponentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_component::GetComponentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_component::GetComponentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_component::GetComponentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_component::GetComponentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_environment::GetEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_environment::GetEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment::GetEnvironmentError> for Error {
    fn from(err: crate::operation::get_environment::GetEnvironmentError) -> Self {
        match err {
            crate::operation::get_environment::GetEnvironmentError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_environment::GetEnvironmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_environment::GetEnvironmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment::GetEnvironmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_environment::GetEnvironmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_environment::GetEnvironmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError>
    for Error
{
    fn from(
        err: crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError,
    ) -> Self {
        match err {
            crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment_account_connection::GetEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_environment_template::GetEnvironmentTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_environment_template::GetEnvironmentTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment_template::GetEnvironmentTemplateError> for Error {
    fn from(err: crate::operation::get_environment_template::GetEnvironmentTemplateError) -> Self {
        match err {
            crate::operation::get_environment_template::GetEnvironmentTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment_template::GetEnvironmentTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_environment_template::GetEnvironmentTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment_template::GetEnvironmentTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment_template::GetEnvironmentTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment_template::GetEnvironmentTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError,
    ) -> Self {
        match err {
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment_template_version::GetEnvironmentTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_repository::GetRepositoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_repository::GetRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_repository::GetRepositoryError> for Error {
    fn from(err: crate::operation::get_repository::GetRepositoryError) -> Self {
        match err {
            crate::operation::get_repository::GetRepositoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_repository::GetRepositoryError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_repository::GetRepositoryError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_repository::GetRepositoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_repository::GetRepositoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_repository::GetRepositoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_repository_sync_status::GetRepositorySyncStatusError> for Error {
    fn from(
        err: crate::operation::get_repository_sync_status::GetRepositorySyncStatusError,
    ) -> Self {
        match err {
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_service::GetServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_service::GetServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service::GetServiceError> for Error {
    fn from(err: crate::operation::get_service::GetServiceError) -> Self {
        match err {
            crate::operation::get_service::GetServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_service::GetServiceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_service::GetServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_service::GetServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_service::GetServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_service::GetServiceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_service_instance::GetServiceInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_service_instance::GetServiceInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_instance::GetServiceInstanceError> for Error {
    fn from(err: crate::operation::get_service_instance::GetServiceInstanceError) -> Self {
        match err {
            crate::operation::get_service_instance::GetServiceInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service_instance::GetServiceInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service_instance::GetServiceInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_service_instance::GetServiceInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service_instance::GetServiceInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service_instance::GetServiceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_service_template::GetServiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_service_template::GetServiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_template::GetServiceTemplateError> for Error {
    fn from(err: crate::operation::get_service_template::GetServiceTemplateError) -> Self {
        match err {
            crate::operation::get_service_template::GetServiceTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service_template::GetServiceTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service_template::GetServiceTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_service_template::GetServiceTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service_template::GetServiceTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service_template::GetServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_service_template_version::GetServiceTemplateVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_service_template_version::GetServiceTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_service_template_version::GetServiceTemplateVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_service_template_version::GetServiceTemplateVersionError,
    ) -> Self {
        match err {
            crate::operation::get_service_template_version::GetServiceTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_service_template_version::GetServiceTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_service_template_version::GetServiceTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_service_template_version::GetServiceTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_service_template_version::GetServiceTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_service_template_version::GetServiceTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template_sync_config::GetTemplateSyncConfigError> for Error {
    fn from(err: crate::operation::get_template_sync_config::GetTemplateSyncConfigError) -> Self {
        match err {
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_template_sync_config::GetTemplateSyncConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template_sync_status::GetTemplateSyncStatusError> for Error {
    fn from(err: crate::operation::get_template_sync_status::GetTemplateSyncStatusError) -> Self {
        match err {
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_template_sync_status::GetTemplateSyncStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_component_outputs::ListComponentOutputsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_component_outputs::ListComponentOutputsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_component_outputs::ListComponentOutputsError> for Error {
    fn from(err: crate::operation::list_component_outputs::ListComponentOutputsError) -> Self {
        match err {
            crate::operation::list_component_outputs::ListComponentOutputsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_component_outputs::ListComponentOutputsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_component_outputs::ListComponentOutputsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_component_outputs::ListComponentOutputsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_component_outputs::ListComponentOutputsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_component_outputs::ListComponentOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError> for Error {
    fn from(err: crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError) -> Self {
        match err {
            crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_components::ListComponentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_components::ListComponentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_components::ListComponentsError> for Error {
    fn from(err: crate::operation::list_components::ListComponentsError) -> Self {
        match err {
            crate::operation::list_components::ListComponentsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_components::ListComponentsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_components::ListComponentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_components::ListComponentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_components::ListComponentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError> for Error {
    fn from(err: crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError) -> Self {
        match err {
            crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environment_outputs::ListEnvironmentOutputsError> for Error {
    fn from(err: crate::operation::list_environment_outputs::ListEnvironmentOutputsError) -> Self {
        match err {
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environment_outputs::ListEnvironmentOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError> for Error {
    fn from(err: crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError) -> Self {
        match err {
            crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_environments::ListEnvironmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_environments::ListEnvironmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environments::ListEnvironmentsError> for Error {
    fn from(err: crate::operation::list_environments::ListEnvironmentsError) -> Self {
        match err {
            crate::operation::list_environments::ListEnvironmentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environments::ListEnvironmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environments::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environment_templates::ListEnvironmentTemplatesError> for Error {
    fn from(
        err: crate::operation::list_environment_templates::ListEnvironmentTemplatesError,
    ) -> Self {
        match err {
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environment_templates::ListEnvironmentTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_repositories::ListRepositoriesError> for Error {
    fn from(err: crate::operation::list_repositories::ListRepositoriesError) -> Self {
        match err {
            crate::operation::list_repositories::ListRepositoriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_repositories::ListRepositoriesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_repositories::ListRepositoriesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_repositories::ListRepositoriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_repositories::ListRepositoriesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_repositories::ListRepositoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError>
    for Error
{
    fn from(
        err: crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError,
    ) -> Self {
        match err {
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError>
    for Error
{
    fn from(
        err: crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError,
    ) -> Self {
        match err {
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError> for Error {
    fn from(err: crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError) -> Self {
        match err {
            crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_service_instances::ListServiceInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_service_instances::ListServiceInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_instances::ListServiceInstancesError> for Error {
    fn from(err: crate::operation::list_service_instances::ListServiceInstancesError) -> Self {
        match err {
            crate::operation::list_service_instances::ListServiceInstancesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_instances::ListServiceInstancesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_instances::ListServiceInstancesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_service_instances::ListServiceInstancesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_instances::ListServiceInstancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_instances::ListServiceInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError>
    for Error
{
    fn from(
        err: crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError,
    ) -> Self {
        match err {
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError> for Error {
    fn from(err: crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError) -> Self {
        match err {
            crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_services::ListServicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_services::ListServicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_services::ListServicesError> for Error {
    fn from(err: crate::operation::list_services::ListServicesError) -> Self {
        match err {
            crate::operation::list_services::ListServicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_services::ListServicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_services::ListServicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_services::ListServicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_services::ListServicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_service_templates::ListServiceTemplatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_service_templates::ListServiceTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_templates::ListServiceTemplatesError> for Error {
    fn from(err: crate::operation::list_service_templates::ListServiceTemplatesError) -> Self {
        match err {
            crate::operation::list_service_templates::ListServiceTemplatesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_templates::ListServiceTemplatesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_templates::ListServiceTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_templates::ListServiceTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_templates::ListServiceTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_service_template_versions::ListServiceTemplateVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_service_template_versions::ListServiceTemplateVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_service_template_versions::ListServiceTemplateVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError> for Error {
    fn from(err: crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError) -> Self {
        match err {
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reject_environment_account_connection::RejectEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_account_settings::UpdateAccountSettingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_account_settings::UpdateAccountSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_account_settings::UpdateAccountSettingsError> for Error {
    fn from(err: crate::operation::update_account_settings::UpdateAccountSettingsError) -> Self {
        match err {
            crate::operation::update_account_settings::UpdateAccountSettingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_component::UpdateComponentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_component::UpdateComponentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_component::UpdateComponentError> for Error {
    fn from(err: crate::operation::update_component::UpdateComponentError) -> Self {
        match err {
            crate::operation::update_component::UpdateComponentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_component::UpdateComponentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_component::UpdateComponentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_component::UpdateComponentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_component::UpdateComponentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_component::UpdateComponentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_component::UpdateComponentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_component::UpdateComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment::UpdateEnvironmentError> for Error {
    fn from(err: crate::operation::update_environment::UpdateEnvironmentError) -> Self {
        match err {
            crate::operation::update_environment::UpdateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment_account_connection::UpdateEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment_template::UpdateEnvironmentTemplateError> for Error {
    fn from(
        err: crate::operation::update_environment_template::UpdateEnvironmentTemplateError,
    ) -> Self {
        match err {
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment_template::UpdateEnvironmentTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_service::UpdateServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_service::UpdateServiceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service::UpdateServiceError> for Error {
    fn from(err: crate::operation::update_service::UpdateServiceError) -> Self {
        match err {
            crate::operation::update_service::UpdateServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_service::UpdateServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_service::UpdateServiceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_service::UpdateServiceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_service::UpdateServiceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_service::UpdateServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_service::UpdateServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_service::UpdateServiceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_service_instance::UpdateServiceInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_service_instance::UpdateServiceInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service_instance::UpdateServiceInstanceError> for Error {
    fn from(err: crate::operation::update_service_instance::UpdateServiceInstanceError) -> Self {
        match err {
            crate::operation::update_service_instance::UpdateServiceInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service_instance::UpdateServiceInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_service_instance::UpdateServiceInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_service_instance::UpdateServiceInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_service_instance::UpdateServiceInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_service_instance::UpdateServiceInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_service_instance::UpdateServiceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_service_pipeline::UpdateServicePipelineError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_service_pipeline::UpdateServicePipelineError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service_pipeline::UpdateServicePipelineError> for Error {
    fn from(err: crate::operation::update_service_pipeline::UpdateServicePipelineError) -> Self {
        match err {
            crate::operation::update_service_pipeline::UpdateServicePipelineError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service_pipeline::UpdateServicePipelineError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_service_pipeline::UpdateServicePipelineError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_service_pipeline::UpdateServicePipelineError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_service_pipeline::UpdateServicePipelineError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_service_pipeline::UpdateServicePipelineError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_service_pipeline::UpdateServicePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_service_template::UpdateServiceTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_service_template::UpdateServiceTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service_template::UpdateServiceTemplateError> for Error {
    fn from(err: crate::operation::update_service_template::UpdateServiceTemplateError) -> Self {
        match err {
            crate::operation::update_service_template::UpdateServiceTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service_template::UpdateServiceTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_service_template::UpdateServiceTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_service_template::UpdateServiceTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_service_template::UpdateServiceTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_service_template::UpdateServiceTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_service_template::UpdateServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_service_template_version::UpdateServiceTemplateVersionError>
    for Error
{
    fn from(
        err: crate::operation::update_service_template_version::UpdateServiceTemplateVersionError,
    ) -> Self {
        match err {
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_service_template_version::UpdateServiceTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError> for Error {
    fn from(
        err: crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError,
    ) -> Self {
        match err {
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
