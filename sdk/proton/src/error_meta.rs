// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>There <i>isn't</i> sufficient access for performing this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The request <i>couldn't</i> be made due to a conflicting operation or resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request failed to register with the service.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The requested resource <i>wasn't</i> found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>A quota was exceeded. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-limits.html">Proton Quotas</a> in the <i>Proton User Guide</i>.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input is invalid or an out-of-range value was supplied for the input parameter.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::AcceptEnvironmentAccountConnectionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AcceptEnvironmentAccountConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::error::AcceptEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::error::AcceptEnvironmentAccountConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AcceptEnvironmentAccountConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AcceptEnvironmentAccountConnectionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::AcceptEnvironmentAccountConnectionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::AcceptEnvironmentAccountConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AcceptEnvironmentAccountConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcceptEnvironmentAccountConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelComponentDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelComponentDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelComponentDeploymentError> for Error {
    fn from(err: crate::error::CancelComponentDeploymentError) -> Self {
        match err {
            crate::error::CancelComponentDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelComponentDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CancelComponentDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelComponentDeploymentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelComponentDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelComponentDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelComponentDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelEnvironmentDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelEnvironmentDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelEnvironmentDeploymentError> for Error {
    fn from(err: crate::error::CancelEnvironmentDeploymentError) -> Self {
        match err {
            crate::error::CancelEnvironmentDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelEnvironmentDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CancelEnvironmentDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelEnvironmentDeploymentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelEnvironmentDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelEnvironmentDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelEnvironmentDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CancelServiceInstanceDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CancelServiceInstanceDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelServiceInstanceDeploymentError> for Error {
    fn from(err: crate::error::CancelServiceInstanceDeploymentError) -> Self {
        match err {
            crate::error::CancelServiceInstanceDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelServiceInstanceDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CancelServiceInstanceDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelServiceInstanceDeploymentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CancelServiceInstanceDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelServiceInstanceDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelServiceInstanceDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CancelServicePipelineDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CancelServicePipelineDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelServicePipelineDeploymentError> for Error {
    fn from(err: crate::error::CancelServicePipelineDeploymentError) -> Self {
        match err {
            crate::error::CancelServicePipelineDeploymentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CancelServicePipelineDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CancelServicePipelineDeploymentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelServicePipelineDeploymentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CancelServicePipelineDeploymentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelServicePipelineDeploymentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelServicePipelineDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateComponentError> for Error {
    fn from(err: crate::error::CreateComponentError) -> Self {
        match err {
            crate::error::CreateComponentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateComponentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateComponentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateComponentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateComponentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateComponentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateComponentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEnvironmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEnvironmentError> for Error {
    fn from(err: crate::error::CreateEnvironmentError) -> Self {
        match err {
            crate::error::CreateEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateEnvironmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateEnvironmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateEnvironmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateEnvironmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::CreateEnvironmentAccountConnectionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateEnvironmentAccountConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::error::CreateEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::error::CreateEnvironmentAccountConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateEnvironmentAccountConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateEnvironmentAccountConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateEnvironmentAccountConnectionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateEnvironmentAccountConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateEnvironmentAccountConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateEnvironmentAccountConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEnvironmentTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEnvironmentTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEnvironmentTemplateError> for Error {
    fn from(err: crate::error::CreateEnvironmentTemplateError) -> Self {
        match err {
            crate::error::CreateEnvironmentTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateEnvironmentTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateEnvironmentTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEnvironmentTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateEnvironmentTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateEnvironmentTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateEnvironmentTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateEnvironmentTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateEnvironmentTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::error::CreateEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::error::CreateEnvironmentTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateEnvironmentTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateEnvironmentTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEnvironmentTemplateVersionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::CreateEnvironmentTemplateVersionError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateEnvironmentTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateEnvironmentTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateEnvironmentTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRepositoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRepositoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRepositoryError> for Error {
    fn from(err: crate::error::CreateRepositoryError) -> Self {
        match err {
            crate::error::CreateRepositoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateRepositoryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateRepositoryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateRepositoryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateRepositoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRepositoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceError> for Error {
    fn from(err: crate::error::CreateServiceError) -> Self {
        match err {
            crate::error::CreateServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateServiceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateServiceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateServiceTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateServiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceTemplateError> for Error {
    fn from(err: crate::error::CreateServiceTemplateError) -> Self {
        match err {
            crate::error::CreateServiceTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateServiceTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateServiceTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateServiceTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateServiceTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateServiceTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateServiceTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateServiceTemplateVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateServiceTemplateVersionError> for Error {
    fn from(err: crate::error::CreateServiceTemplateVersionError) -> Self {
        match err {
            crate::error::CreateServiceTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateServiceTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateServiceTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateServiceTemplateVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateServiceTemplateVersionError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateServiceTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateServiceTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateServiceTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTemplateSyncConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTemplateSyncConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTemplateSyncConfigError> for Error {
    fn from(err: crate::error::CreateTemplateSyncConfigError) -> Self {
        match err {
            crate::error::CreateTemplateSyncConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTemplateSyncConfigError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateTemplateSyncConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateTemplateSyncConfigError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateTemplateSyncConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateTemplateSyncConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateTemplateSyncConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteComponentError> for Error {
    fn from(err: crate::error::DeleteComponentError) -> Self {
        match err {
            crate::error::DeleteComponentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteComponentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteComponentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteComponentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteComponentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteComponentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEnvironmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEnvironmentError> for Error {
    fn from(err: crate::error::DeleteEnvironmentError) -> Self {
        match err {
            crate::error::DeleteEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEnvironmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEnvironmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEnvironmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DeleteEnvironmentAccountConnectionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteEnvironmentAccountConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::error::DeleteEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::error::DeleteEnvironmentAccountConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEnvironmentAccountConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEnvironmentAccountConnectionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DeleteEnvironmentAccountConnectionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteEnvironmentAccountConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEnvironmentAccountConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEnvironmentAccountConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEnvironmentTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEnvironmentTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEnvironmentTemplateError> for Error {
    fn from(err: crate::error::DeleteEnvironmentTemplateError) -> Self {
        match err {
            crate::error::DeleteEnvironmentTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEnvironmentTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEnvironmentTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEnvironmentTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEnvironmentTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEnvironmentTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEnvironmentTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteEnvironmentTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteEnvironmentTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::error::DeleteEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::error::DeleteEnvironmentTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEnvironmentTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteEnvironmentTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEnvironmentTemplateVersionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteEnvironmentTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEnvironmentTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEnvironmentTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRepositoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRepositoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRepositoryError> for Error {
    fn from(err: crate::error::DeleteRepositoryError) -> Self {
        match err {
            crate::error::DeleteRepositoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteRepositoryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteRepositoryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteRepositoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteRepositoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteRepositoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceError> for Error {
    fn from(err: crate::error::DeleteServiceError) -> Self {
        match err {
            crate::error::DeleteServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteServiceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteServiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceTemplateError> for Error {
    fn from(err: crate::error::DeleteServiceTemplateError) -> Self {
        match err {
            crate::error::DeleteServiceTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteServiceTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteServiceTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteServiceTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteServiceTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteServiceTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteServiceTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteServiceTemplateVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteServiceTemplateVersionError> for Error {
    fn from(err: crate::error::DeleteServiceTemplateVersionError) -> Self {
        match err {
            crate::error::DeleteServiceTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteServiceTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteServiceTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteServiceTemplateVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteServiceTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteServiceTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteServiceTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTemplateSyncConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteTemplateSyncConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTemplateSyncConfigError> for Error {
    fn from(err: crate::error::DeleteTemplateSyncConfigError) -> Self {
        match err {
            crate::error::DeleteTemplateSyncConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteTemplateSyncConfigError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteTemplateSyncConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteTemplateSyncConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTemplateSyncConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteTemplateSyncConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteTemplateSyncConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountSettingsError> for Error {
    fn from(err: crate::error::GetAccountSettingsError) -> Self {
        match err {
            crate::error::GetAccountSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAccountSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAccountSettingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAccountSettingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetAccountSettingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComponentError> for Error {
    fn from(err: crate::error::GetComponentError) -> Self {
        match err {
            crate::error::GetComponentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetComponentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetComponentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetComponentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetComponentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEnvironmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEnvironmentError> for Error {
    fn from(err: crate::error::GetEnvironmentError) -> Self {
        match err {
            crate::error::GetEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEnvironmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEnvironmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetEnvironmentAccountConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetEnvironmentAccountConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::error::GetEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::error::GetEnvironmentAccountConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEnvironmentAccountConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEnvironmentAccountConnectionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetEnvironmentAccountConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEnvironmentAccountConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEnvironmentAccountConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEnvironmentTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEnvironmentTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEnvironmentTemplateError> for Error {
    fn from(err: crate::error::GetEnvironmentTemplateError) -> Self {
        match err {
            crate::error::GetEnvironmentTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEnvironmentTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEnvironmentTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEnvironmentTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEnvironmentTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEnvironmentTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEnvironmentTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEnvironmentTemplateVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::error::GetEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::error::GetEnvironmentTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEnvironmentTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEnvironmentTemplateVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEnvironmentTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetEnvironmentTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEnvironmentTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRepositoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRepositoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRepositoryError> for Error {
    fn from(err: crate::error::GetRepositoryError) -> Self {
        match err {
            crate::error::GetRepositoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRepositoryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetRepositoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRepositoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRepositoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRepositorySyncStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRepositorySyncStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRepositorySyncStatusError> for Error {
    fn from(err: crate::error::GetRepositorySyncStatusError) -> Self {
        match err {
            crate::error::GetRepositorySyncStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRepositorySyncStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetRepositorySyncStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetRepositorySyncStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRepositorySyncStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetRepositorySyncStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceError> for Error {
    fn from(err: crate::error::GetServiceError) -> Self {
        match err {
            crate::error::GetServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetServiceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServiceInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceInstanceError> for Error {
    fn from(err: crate::error::GetServiceInstanceError) -> Self {
        match err {
            crate::error::GetServiceInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetServiceInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetServiceInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetServiceInstanceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetServiceInstanceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetServiceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceTemplateError> for Error {
    fn from(err: crate::error::GetServiceTemplateError) -> Self {
        match err {
            crate::error::GetServiceTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetServiceTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetServiceTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetServiceTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetServiceTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServiceTemplateVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceTemplateVersionError> for Error {
    fn from(err: crate::error::GetServiceTemplateVersionError) -> Self {
        match err {
            crate::error::GetServiceTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetServiceTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetServiceTemplateVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetServiceTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetServiceTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetServiceTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTemplateSyncConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTemplateSyncConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTemplateSyncConfigError> for Error {
    fn from(err: crate::error::GetTemplateSyncConfigError) -> Self {
        match err {
            crate::error::GetTemplateSyncConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTemplateSyncConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetTemplateSyncConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTemplateSyncConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTemplateSyncConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetTemplateSyncConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTemplateSyncStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetTemplateSyncStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTemplateSyncStatusError> for Error {
    fn from(err: crate::error::GetTemplateSyncStatusError) -> Self {
        match err {
            crate::error::GetTemplateSyncStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTemplateSyncStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetTemplateSyncStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetTemplateSyncStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTemplateSyncStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetTemplateSyncStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComponentOutputsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListComponentOutputsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComponentOutputsError> for Error {
    fn from(err: crate::error::ListComponentOutputsError) -> Self {
        match err {
            crate::error::ListComponentOutputsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListComponentOutputsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListComponentOutputsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListComponentOutputsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListComponentOutputsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListComponentOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListComponentProvisionedResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListComponentProvisionedResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComponentProvisionedResourcesError> for Error {
    fn from(err: crate::error::ListComponentProvisionedResourcesError) -> Self {
        match err {
            crate::error::ListComponentProvisionedResourcesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListComponentProvisionedResourcesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListComponentProvisionedResourcesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListComponentProvisionedResourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListComponentProvisionedResourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListComponentProvisionedResourcesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComponentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListComponentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComponentsError> for Error {
    fn from(err: crate::error::ListComponentsError) -> Self {
        match err {
            crate::error::ListComponentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListComponentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListComponentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListComponentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListComponentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListEnvironmentAccountConnectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListEnvironmentAccountConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnvironmentAccountConnectionsError> for Error {
    fn from(err: crate::error::ListEnvironmentAccountConnectionsError) -> Self {
        match err {
            crate::error::ListEnvironmentAccountConnectionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEnvironmentAccountConnectionsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListEnvironmentAccountConnectionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEnvironmentAccountConnectionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEnvironmentAccountConnectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEnvironmentOutputsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEnvironmentOutputsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnvironmentOutputsError> for Error {
    fn from(err: crate::error::ListEnvironmentOutputsError) -> Self {
        match err {
            crate::error::ListEnvironmentOutputsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEnvironmentOutputsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEnvironmentOutputsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListEnvironmentOutputsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEnvironmentOutputsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEnvironmentOutputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListEnvironmentProvisionedResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListEnvironmentProvisionedResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnvironmentProvisionedResourcesError> for Error {
    fn from(err: crate::error::ListEnvironmentProvisionedResourcesError) -> Self {
        match err {
            crate::error::ListEnvironmentProvisionedResourcesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListEnvironmentProvisionedResourcesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListEnvironmentProvisionedResourcesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListEnvironmentProvisionedResourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEnvironmentProvisionedResourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEnvironmentProvisionedResourcesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEnvironmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEnvironmentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnvironmentsError> for Error {
    fn from(err: crate::error::ListEnvironmentsError) -> Self {
        match err {
            crate::error::ListEnvironmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEnvironmentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEnvironmentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListEnvironmentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEnvironmentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEnvironmentTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEnvironmentTemplatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnvironmentTemplatesError> for Error {
    fn from(err: crate::error::ListEnvironmentTemplatesError) -> Self {
        match err {
            crate::error::ListEnvironmentTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEnvironmentTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEnvironmentTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEnvironmentTemplatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEnvironmentTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListEnvironmentTemplateVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListEnvironmentTemplateVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEnvironmentTemplateVersionsError> for Error {
    fn from(err: crate::error::ListEnvironmentTemplateVersionsError) -> Self {
        match err {
            crate::error::ListEnvironmentTemplateVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListEnvironmentTemplateVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEnvironmentTemplateVersionsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListEnvironmentTemplateVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListEnvironmentTemplateVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEnvironmentTemplateVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRepositoriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRepositoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRepositoriesError> for Error {
    fn from(err: crate::error::ListRepositoriesError) -> Self {
        match err {
            crate::error::ListRepositoriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListRepositoriesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListRepositoriesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListRepositoriesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRepositoriesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListRepositoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRepositorySyncDefinitionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRepositorySyncDefinitionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRepositorySyncDefinitionsError> for Error {
    fn from(err: crate::error::ListRepositorySyncDefinitionsError) -> Self {
        match err {
            crate::error::ListRepositorySyncDefinitionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListRepositorySyncDefinitionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListRepositorySyncDefinitionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRepositorySyncDefinitionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListRepositorySyncDefinitionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServiceInstanceOutputsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServiceInstanceOutputsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServiceInstanceOutputsError> for Error {
    fn from(err: crate::error::ListServiceInstanceOutputsError) -> Self {
        match err {
            crate::error::ListServiceInstanceOutputsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListServiceInstanceOutputsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListServiceInstanceOutputsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListServiceInstanceOutputsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListServiceInstanceOutputsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListServiceInstanceOutputsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListServiceInstanceProvisionedResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListServiceInstanceProvisionedResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServiceInstanceProvisionedResourcesError> for Error {
    fn from(err: crate::error::ListServiceInstanceProvisionedResourcesError) -> Self {
        match err {
            crate::error::ListServiceInstanceProvisionedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListServiceInstanceProvisionedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListServiceInstanceProvisionedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListServiceInstanceProvisionedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListServiceInstanceProvisionedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListServiceInstanceProvisionedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServiceInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServiceInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServiceInstancesError> for Error {
    fn from(err: crate::error::ListServiceInstancesError) -> Self {
        match err {
            crate::error::ListServiceInstancesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListServiceInstancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListServiceInstancesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListServiceInstancesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListServiceInstancesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListServiceInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServicePipelineOutputsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServicePipelineOutputsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServicePipelineOutputsError> for Error {
    fn from(err: crate::error::ListServicePipelineOutputsError) -> Self {
        match err {
            crate::error::ListServicePipelineOutputsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListServicePipelineOutputsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListServicePipelineOutputsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListServicePipelineOutputsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListServicePipelineOutputsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListServicePipelineOutputsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListServicePipelineProvisionedResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListServicePipelineProvisionedResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServicePipelineProvisionedResourcesError> for Error {
    fn from(err: crate::error::ListServicePipelineProvisionedResourcesError) -> Self {
        match err {
            crate::error::ListServicePipelineProvisionedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListServicePipelineProvisionedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListServicePipelineProvisionedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListServicePipelineProvisionedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListServicePipelineProvisionedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListServicePipelineProvisionedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListServicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServicesError> for Error {
    fn from(err: crate::error::ListServicesError) -> Self {
        match err {
            crate::error::ListServicesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListServicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListServicesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListServicesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServiceTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServiceTemplatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServiceTemplatesError> for Error {
    fn from(err: crate::error::ListServiceTemplatesError) -> Self {
        match err {
            crate::error::ListServiceTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListServiceTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListServiceTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListServiceTemplatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListServiceTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListServiceTemplateVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListServiceTemplateVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListServiceTemplateVersionsError> for Error {
    fn from(err: crate::error::ListServiceTemplateVersionsError) -> Self {
        match err {
            crate::error::ListServiceTemplateVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListServiceTemplateVersionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListServiceTemplateVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListServiceTemplateVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListServiceTemplateVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListServiceTemplateVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::NotifyResourceDeploymentStatusChangeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::NotifyResourceDeploymentStatusChangeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::NotifyResourceDeploymentStatusChangeError> for Error {
    fn from(err: crate::error::NotifyResourceDeploymentStatusChangeError) -> Self {
        match err {
            crate::error::NotifyResourceDeploymentStatusChangeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::NotifyResourceDeploymentStatusChangeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::RejectEnvironmentAccountConnectionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RejectEnvironmentAccountConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::error::RejectEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::error::RejectEnvironmentAccountConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RejectEnvironmentAccountConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RejectEnvironmentAccountConnectionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::RejectEnvironmentAccountConnectionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::RejectEnvironmentAccountConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RejectEnvironmentAccountConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RejectEnvironmentAccountConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountSettingsError> for Error {
    fn from(err: crate::error::UpdateAccountSettingsError) -> Self {
        match err {
            crate::error::UpdateAccountSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAccountSettingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAccountSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAccountSettingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAccountSettingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateComponentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateComponentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateComponentError> for Error {
    fn from(err: crate::error::UpdateComponentError) -> Self {
        match err {
            crate::error::UpdateComponentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateComponentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateComponentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateComponentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateComponentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateComponentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateComponentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateComponentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEnvironmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEnvironmentError> for Error {
    fn from(err: crate::error::UpdateEnvironmentError) -> Self {
        match err {
            crate::error::UpdateEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEnvironmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateEnvironmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateEnvironmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::UpdateEnvironmentAccountConnectionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateEnvironmentAccountConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEnvironmentAccountConnectionError> for Error {
    fn from(err: crate::error::UpdateEnvironmentAccountConnectionError) -> Self {
        match err {
            crate::error::UpdateEnvironmentAccountConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEnvironmentAccountConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateEnvironmentAccountConnectionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::UpdateEnvironmentAccountConnectionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateEnvironmentAccountConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateEnvironmentAccountConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateEnvironmentAccountConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEnvironmentTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEnvironmentTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEnvironmentTemplateError> for Error {
    fn from(err: crate::error::UpdateEnvironmentTemplateError) -> Self {
        match err {
            crate::error::UpdateEnvironmentTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEnvironmentTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateEnvironmentTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEnvironmentTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateEnvironmentTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateEnvironmentTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateEnvironmentTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateEnvironmentTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateEnvironmentTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEnvironmentTemplateVersionError> for Error {
    fn from(err: crate::error::UpdateEnvironmentTemplateVersionError) -> Self {
        match err {
            crate::error::UpdateEnvironmentTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEnvironmentTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateEnvironmentTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEnvironmentTemplateVersionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateEnvironmentTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateEnvironmentTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateEnvironmentTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceError> for Error {
    fn from(err: crate::error::UpdateServiceError) -> Self {
        match err {
            crate::error::UpdateServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateServiceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateServiceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceInstanceError> for Error {
    fn from(err: crate::error::UpdateServiceInstanceError) -> Self {
        match err {
            crate::error::UpdateServiceInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServiceInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateServiceInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateServiceInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateServiceInstanceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateServiceInstanceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateServiceInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServicePipelineError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServicePipelineError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServicePipelineError> for Error {
    fn from(err: crate::error::UpdateServicePipelineError) -> Self {
        match err {
            crate::error::UpdateServicePipelineError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServicePipelineError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateServicePipelineError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateServicePipelineError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateServicePipelineError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateServicePipelineError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateServicePipelineError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceTemplateError> for Error {
    fn from(err: crate::error::UpdateServiceTemplateError) -> Self {
        match err {
            crate::error::UpdateServiceTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServiceTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateServiceTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateServiceTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateServiceTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateServiceTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateServiceTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceTemplateVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceTemplateVersionError> for Error {
    fn from(err: crate::error::UpdateServiceTemplateVersionError) -> Self {
        match err {
            crate::error::UpdateServiceTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServiceTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateServiceTemplateVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateServiceTemplateVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateServiceTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateServiceTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateServiceTemplateVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTemplateSyncConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateTemplateSyncConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTemplateSyncConfigError> for Error {
    fn from(err: crate::error::UpdateTemplateSyncConfigError) -> Self {
        match err {
            crate::error::UpdateTemplateSyncConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateTemplateSyncConfigError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateTemplateSyncConfigError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateTemplateSyncConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateTemplateSyncConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateTemplateSyncConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateTemplateSyncConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
