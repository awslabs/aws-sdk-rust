// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateEnvironmentTemplateVersionInput {
    /// <p>The name of the environment template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub major_version: ::std::option::Option<::std::string::String>,
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub minor_version: ::std::option::Option<::std::string::String>,
    /// <p>A description of environment template version to update.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the environment template minor version to update.</p>
    pub status: ::std::option::Option<crate::types::TemplateVersionStatus>,
}
impl UpdateEnvironmentTemplateVersionInput {
    /// <p>The name of the environment template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub fn major_version(&self) -> ::std::option::Option<&str> {
        self.major_version.as_deref()
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub fn minor_version(&self) -> ::std::option::Option<&str> {
        self.minor_version.as_deref()
    }
    /// <p>A description of environment template version to update.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TemplateVersionStatus> {
        self.status.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateEnvironmentTemplateVersionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEnvironmentTemplateVersionInput");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
impl UpdateEnvironmentTemplateVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentTemplateVersionInput`](crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput).
    pub fn builder() -> crate::operation::update_environment_template_version::builders::UpdateEnvironmentTemplateVersionInputBuilder {
        crate::operation::update_environment_template_version::builders::UpdateEnvironmentTemplateVersionInputBuilder::default()
    }
}

/// A builder for [`UpdateEnvironmentTemplateVersionInput`](crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateEnvironmentTemplateVersionInputBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) major_version: ::std::option::Option<::std::string::String>,
    pub(crate) minor_version: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TemplateVersionStatus>,
}
impl UpdateEnvironmentTemplateVersionInputBuilder {
    /// <p>The name of the environment template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    /// This field is required.
    pub fn major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub fn set_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub fn get_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_version
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    /// This field is required.
    pub fn minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub fn set_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.minor_version = input;
        self
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub fn get_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.minor_version
    }
    /// <p>A description of environment template version to update.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of environment template version to update.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of environment template version to update.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn status(mut self, input: crate::types::TemplateVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TemplateVersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TemplateVersionStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`UpdateEnvironmentTemplateVersionInput`](crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput {
                template_name: self.template_name,
                major_version: self.major_version,
                minor_version: self.minor_version,
                description: self.description,
                status: self.status,
            },
        )
    }
}
impl ::std::fmt::Debug for UpdateEnvironmentTemplateVersionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEnvironmentTemplateVersionInputBuilder");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
