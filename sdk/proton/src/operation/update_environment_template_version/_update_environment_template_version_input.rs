// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEnvironmentTemplateVersionInput {
    /// <p>The name of the environment template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    #[doc(hidden)]
    pub major_version: std::option::Option<std::string::String>,
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    #[doc(hidden)]
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>A description of environment template version to update.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the environment template minor version to update.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TemplateVersionStatus>,
}
impl UpdateEnvironmentTemplateVersionInput {
    /// <p>The name of the environment template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub fn major_version(&self) -> std::option::Option<&str> {
        self.major_version.as_deref()
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub fn minor_version(&self) -> std::option::Option<&str> {
        self.minor_version.as_deref()
    }
    /// <p>A description of environment template version to update.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TemplateVersionStatus> {
        self.status.as_ref()
    }
}
impl std::fmt::Debug for UpdateEnvironmentTemplateVersionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEnvironmentTemplateVersionInput");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
impl UpdateEnvironmentTemplateVersionInput {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentTemplateVersionInput`](crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput).
    pub fn builder() -> crate::operation::update_environment_template_version::builders::UpdateEnvironmentTemplateVersionInputBuilder{
        crate::operation::update_environment_template_version::builders::UpdateEnvironmentTemplateVersionInputBuilder::default()
    }
}

/// A builder for [`UpdateEnvironmentTemplateVersionInput`](crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateEnvironmentTemplateVersionInputBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) major_version: std::option::Option<std::string::String>,
    pub(crate) minor_version: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TemplateVersionStatus>,
}
impl UpdateEnvironmentTemplateVersionInputBuilder {
    /// <p>The name of the environment template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.major_version = Some(input.into());
        self
    }
    /// <p>To update a major version of an environment template, include <code>major Version</code>.</p>
    pub fn set_major_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.minor_version = Some(input.into());
        self
    }
    /// <p>To update a minor version of an environment template, include <code>minorVersion</code>.</p>
    pub fn set_minor_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.minor_version = input;
        self
    }
    /// <p>A description of environment template version to update.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of environment template version to update.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn status(mut self, input: crate::types::TemplateVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the environment template minor version to update.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TemplateVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateEnvironmentTemplateVersionInput`](crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput).
    pub fn build(self) -> Result<crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_environment_template_version::UpdateEnvironmentTemplateVersionInput {
                template_name: self.template_name
                ,
                major_version: self.major_version
                ,
                minor_version: self.minor_version
                ,
                description: self.description
                ,
                status: self.status
                ,
            }
        )
    }
}
impl std::fmt::Debug for UpdateEnvironmentTemplateVersionInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEnvironmentTemplateVersionInputBuilder");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
