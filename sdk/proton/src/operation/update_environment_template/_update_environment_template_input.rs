// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateEnvironmentTemplateInput {
    /// <p>The name of the environment template to update.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the environment template to update as displayed in the developer interface.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A description of the environment template update.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl UpdateEnvironmentTemplateInput {
    /// <p>The name of the environment template to update.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the environment template to update as displayed in the developer interface.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A description of the environment template update.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl std::fmt::Debug for UpdateEnvironmentTemplateInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEnvironmentTemplateInput");
        formatter.field("name", &self.name);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateEnvironmentTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentTemplateInput`](crate::operation::update_environment_template::UpdateEnvironmentTemplateInput).
    pub fn builder() -> crate::operation::update_environment_template::builders::UpdateEnvironmentTemplateInputBuilder{
        crate::operation::update_environment_template::builders::UpdateEnvironmentTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateEnvironmentTemplateInput`](crate::operation::update_environment_template::UpdateEnvironmentTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateEnvironmentTemplateInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl UpdateEnvironmentTemplateInputBuilder {
    /// <p>The name of the environment template to update.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the environment template to update.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment template to update as displayed in the developer interface.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name of the environment template to update as displayed in the developer interface.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A description of the environment template update.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the environment template update.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateEnvironmentTemplateInput`](crate::operation::update_environment_template::UpdateEnvironmentTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_environment_template::UpdateEnvironmentTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_environment_template::UpdateEnvironmentTemplateInput {
                name: self.name,
                display_name: self.display_name,
                description: self.description,
            },
        )
    }
}
impl std::fmt::Debug for UpdateEnvironmentTemplateInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateEnvironmentTemplateInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
