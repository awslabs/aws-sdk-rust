// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRepositoryInput {
    /// <p>The repository provider.</p>
    pub provider: ::std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository name, for example <code>myrepos/myrepo</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl GetRepositoryInput {
    /// <p>The repository provider.</p>
    pub fn provider(&self) -> ::std::option::Option<&crate::types::RepositoryProvider> {
        self.provider.as_ref()
    }
    /// <p>The repository name, for example <code>myrepos/myrepo</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl GetRepositoryInput {
    /// Creates a new builder-style object to manufacture [`GetRepositoryInput`](crate::operation::get_repository::GetRepositoryInput).
    pub fn builder() -> crate::operation::get_repository::builders::GetRepositoryInputBuilder {
        crate::operation::get_repository::builders::GetRepositoryInputBuilder::default()
    }
}

/// A builder for [`GetRepositoryInput`](crate::operation::get_repository::GetRepositoryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetRepositoryInputBuilder {
    pub(crate) provider: ::std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl GetRepositoryInputBuilder {
    /// <p>The repository provider.</p>
    /// This field is required.
    pub fn provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::RepositoryProvider>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The repository provider.</p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::RepositoryProvider> {
        &self.provider
    }
    /// <p>The repository name, for example <code>myrepos/myrepo</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository name, for example <code>myrepos/myrepo</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The repository name, for example <code>myrepos/myrepo</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`GetRepositoryInput`](crate::operation::get_repository::GetRepositoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_repository::GetRepositoryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_repository::GetRepositoryInput {
            provider: self.provider,
            name: self.name,
        })
    }
}
