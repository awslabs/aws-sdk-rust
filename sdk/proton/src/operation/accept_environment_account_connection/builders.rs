// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::accept_environment_account_connection::_accept_environment_account_connection_output::AcceptEnvironmentAccountConnectionOutputBuilder;

pub use crate::operation::accept_environment_account_connection::_accept_environment_account_connection_input::AcceptEnvironmentAccountConnectionInputBuilder;

impl crate::operation::accept_environment_account_connection::builders::AcceptEnvironmentAccountConnectionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.accept_environment_account_connection();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AcceptEnvironmentAccountConnection`.
///
/// <p>In a management account, an environment account connection request is accepted. When the environment account connection request is accepted, Proton can use the associated IAM role to provision environment infrastructure resources in the associated environment account.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-env-account-connections.html">Environment account connections</a> in the <i>Proton User guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AcceptEnvironmentAccountConnectionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::accept_environment_account_connection::builders::AcceptEnvironmentAccountConnectionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionOutput,
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError,
    > for AcceptEnvironmentAccountConnectionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionOutput,
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AcceptEnvironmentAccountConnectionFluentBuilder {
    /// Creates a new `AcceptEnvironmentAccountConnection`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AcceptEnvironmentAccountConnection as a reference.
    pub fn as_input(&self) -> &crate::operation::accept_environment_account_connection::builders::AcceptEnvironmentAccountConnectionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnection::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnection::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionOutput,
        crate::operation::accept_environment_account_connection::AcceptEnvironmentAccountConnectionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the environment account connection.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The ID of the environment account connection.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The ID of the environment account connection.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_id()
    }
}
