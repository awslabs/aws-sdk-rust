// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRepositoryInput {
    /// <p>The repository provider.</p>
    #[doc(hidden)]
    pub provider: std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html">Setting up for Proton</a> in the <i>Proton User Guide</i>.</p>
    #[doc(hidden)]
    pub connection_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of your customer Amazon Web Services Key Management Service (Amazon Web Services KMS) key.</p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>An optional list of metadata items that you can associate with the Proton repository. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateRepositoryInput {
    /// <p>The repository provider.</p>
    pub fn provider(&self) -> std::option::Option<&crate::types::RepositoryProvider> {
        self.provider.as_ref()
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html">Setting up for Proton</a> in the <i>Proton User Guide</i>.</p>
    pub fn connection_arn(&self) -> std::option::Option<&str> {
        self.connection_arn.as_deref()
    }
    /// <p>The ARN of your customer Amazon Web Services Key Management Service (Amazon Web Services KMS) key.</p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>An optional list of metadata items that you can associate with the Proton repository. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateRepositoryInput {
    /// Creates a new builder-style object to manufacture [`CreateRepositoryInput`](crate::operation::create_repository::CreateRepositoryInput).
    pub fn builder() -> crate::operation::create_repository::builders::CreateRepositoryInputBuilder
    {
        crate::operation::create_repository::builders::CreateRepositoryInputBuilder::default()
    }
}

/// A builder for [`CreateRepositoryInput`](crate::operation::create_repository::CreateRepositoryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateRepositoryInputBuilder {
    pub(crate) provider: std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) connection_arn: std::option::Option<std::string::String>,
    pub(crate) encryption_key: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateRepositoryInputBuilder {
    /// <p>The repository provider.</p>
    pub fn provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.provider = Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.provider = input;
        self
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html">Setting up for Proton</a> in the <i>Proton User Guide</i>.</p>
    pub fn connection_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/setting-up-for-service.html">Setting up for Proton</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_connection_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The ARN of your customer Amazon Web Services Key Management Service (Amazon Web Services KMS) key.</p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p>The ARN of your customer Amazon Web Services Key Management Service (Amazon Web Services KMS) key.</p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional list of metadata items that you can associate with the Proton repository. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An optional list of metadata items that you can associate with the Proton repository. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateRepositoryInput`](crate::operation::create_repository::CreateRepositoryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_repository::CreateRepositoryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_repository::CreateRepositoryInput {
            provider: self.provider,
            name: self.name,
            connection_arn: self.connection_arn,
            encryption_key: self.encryption_key,
            tags: self.tags,
        })
    }
}
