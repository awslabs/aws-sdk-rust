// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListComponentsInput {
    /// <p>A token that indicates the location of the next component in the array of components, after the list of components that was previously requested.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of an environment for result list filtering. Proton returns components associated with the environment or attached to service instances running in it.</p>
    pub environment_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of a service for result list filtering. Proton returns components attached to service instances of the service.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of a service instance for result list filtering. Proton returns the component attached to the service instance, if any.</p>
    pub service_instance_name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of components to list.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListComponentsInput {
    /// <p>A token that indicates the location of the next component in the array of components, after the list of components that was previously requested.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The name of an environment for result list filtering. Proton returns components associated with the environment or attached to service instances running in it.</p>
    pub fn environment_name(&self) -> ::std::option::Option<&str> {
        self.environment_name.as_deref()
    }
    /// <p>The name of a service for result list filtering. Proton returns components attached to service instances of the service.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The name of a service instance for result list filtering. Proton returns the component attached to the service instance, if any.</p>
    pub fn service_instance_name(&self) -> ::std::option::Option<&str> {
        self.service_instance_name.as_deref()
    }
    /// <p>The maximum number of components to list.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListComponentsInput {
    /// Creates a new builder-style object to manufacture [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
    pub fn builder() -> crate::operation::list_components::builders::ListComponentsInputBuilder {
        crate::operation::list_components::builders::ListComponentsInputBuilder::default()
    }
}

/// A builder for [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListComponentsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) environment_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_instance_name: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListComponentsInputBuilder {
    /// <p>A token that indicates the location of the next component in the array of components, after the list of components that was previously requested.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates the location of the next component in the array of components, after the list of components that was previously requested.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates the location of the next component in the array of components, after the list of components that was previously requested.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The name of an environment for result list filtering. Proton returns components associated with the environment or attached to service instances running in it.</p>
    pub fn environment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an environment for result list filtering. Proton returns components associated with the environment or attached to service instances running in it.</p>
    pub fn set_environment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_name = input;
        self
    }
    /// <p>The name of an environment for result list filtering. Proton returns components associated with the environment or attached to service instances running in it.</p>
    pub fn get_environment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_name
    }
    /// <p>The name of a service for result list filtering. Proton returns components attached to service instances of the service.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a service for result list filtering. Proton returns components attached to service instances of the service.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of a service for result list filtering. Proton returns components attached to service instances of the service.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The name of a service instance for result list filtering. Proton returns the component attached to the service instance, if any.</p>
    pub fn service_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_instance_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a service instance for result list filtering. Proton returns the component attached to the service instance, if any.</p>
    pub fn set_service_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_instance_name = input;
        self
    }
    /// <p>The name of a service instance for result list filtering. Proton returns the component attached to the service instance, if any.</p>
    pub fn get_service_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_instance_name
    }
    /// <p>The maximum number of components to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of components to list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of components to list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListComponentsInput`](crate::operation::list_components::ListComponentsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_components::ListComponentsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_components::ListComponentsInput {
            next_token: self.next_token,
            environment_name: self.environment_name,
            service_name: self.service_name,
            service_instance_name: self.service_instance_name,
            max_results: self.max_results,
        })
    }
}
