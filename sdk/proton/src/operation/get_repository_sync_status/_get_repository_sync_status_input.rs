// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRepositorySyncStatusInput {
    /// <p>The repository name.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The repository provider.</p>
    #[doc(hidden)]
    pub repository_provider: std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository branch.</p>
    #[doc(hidden)]
    pub branch: std::option::Option<std::string::String>,
    /// <p>The repository sync type.</p>
    #[doc(hidden)]
    pub sync_type: std::option::Option<crate::types::SyncType>,
}
impl GetRepositorySyncStatusInput {
    /// <p>The repository name.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(&self) -> std::option::Option<&crate::types::RepositoryProvider> {
        self.repository_provider.as_ref()
    }
    /// <p>The repository branch.</p>
    pub fn branch(&self) -> std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p>The repository sync type.</p>
    pub fn sync_type(&self) -> std::option::Option<&crate::types::SyncType> {
        self.sync_type.as_ref()
    }
}
impl GetRepositorySyncStatusInput {
    /// Creates a new builder-style object to manufacture [`GetRepositorySyncStatusInput`](crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput).
    pub fn builder(
    ) -> crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder
    {
        crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder::default()
    }
}

/// A builder for [`GetRepositorySyncStatusInput`](crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRepositorySyncStatusInputBuilder {
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) repository_provider: std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) branch: std::option::Option<std::string::String>,
    pub(crate) sync_type: std::option::Option<crate::types::SyncType>,
}
impl GetRepositorySyncStatusInputBuilder {
    /// <p>The repository name.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.repository_provider = Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_repository_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.repository_provider = input;
        self
    }
    /// <p>The repository branch.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch = Some(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The repository sync type.</p>
    pub fn sync_type(mut self, input: crate::types::SyncType) -> Self {
        self.sync_type = Some(input);
        self
    }
    /// <p>The repository sync type.</p>
    pub fn set_sync_type(mut self, input: std::option::Option<crate::types::SyncType>) -> Self {
        self.sync_type = input;
        self
    }
    /// Consumes the builder and constructs a [`GetRepositorySyncStatusInput`](crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusInput {
                repository_name: self.repository_name,
                repository_provider: self.repository_provider,
                branch: self.branch,
                sync_type: self.sync_type,
            },
        )
    }
}
