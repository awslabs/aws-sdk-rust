// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_repository_sync_status::_get_repository_sync_status_output::GetRepositorySyncStatusOutputBuilder;

pub use crate::operation::get_repository_sync_status::_get_repository_sync_status_input::GetRepositorySyncStatusInputBuilder;

/// Fluent builder constructing a request to `GetRepositorySyncStatus`.
///
/// <p>Get the sync status of a repository used for Proton template sync. For more information about template sync, see .</p> <note>
/// <p>A repository sync status isn't tied to the Proton Repository resource (or any other Proton resource). Therefore, tags on an Proton Repository resource have no effect on this action. Specifically, you can't use these tags to control access to this action using Attribute-based access control (ABAC).</p>
/// <p>For more information about ABAC, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/security_iam_service-with-iam.html#security_iam_service-with-iam-tags">ABAC</a> in the <i>Proton User Guide</i>.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetRepositorySyncStatusFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::get_repository_sync_status::builders::GetRepositorySyncStatusInputBuilder,
}
impl GetRepositorySyncStatusFluentBuilder {
    /// Creates a new `GetRepositorySyncStatus`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_repository_sync_status::GetRepositorySyncStatus,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_repository_sync_status::GetRepositorySyncStatusOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_repository_sync_status::GetRepositorySyncStatusError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The repository name.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.inner = self.inner.repository_provider(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_repository_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.inner = self.inner.set_repository_provider(input);
        self
    }
    /// <p>The repository branch.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch(input);
        self
    }
    /// <p>The repository sync type.</p>
    pub fn sync_type(mut self, input: crate::types::SyncType) -> Self {
        self.inner = self.inner.sync_type(input);
        self
    }
    /// <p>The repository sync type.</p>
    pub fn set_sync_type(mut self, input: std::option::Option<crate::types::SyncType>) -> Self {
        self.inner = self.inner.set_sync_type(input);
        self
    }
}
