// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateServiceSyncConfigInput {
    /// <p>The name of the service the Proton Ops file is for.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>The provider type for your repository.</p>
    pub repository_provider: ::std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository name.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The repository branch for your Proton Ops file.</p>
    pub branch: ::std::option::Option<::std::string::String>,
    /// <p>The path to the Proton Ops file.</p>
    pub file_path: ::std::option::Option<::std::string::String>,
}
impl CreateServiceSyncConfigInput {
    /// <p>The name of the service the Proton Ops file is for.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The provider type for your repository.</p>
    pub fn repository_provider(&self) -> ::std::option::Option<&crate::types::RepositoryProvider> {
        self.repository_provider.as_ref()
    }
    /// <p>The repository name.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The repository branch for your Proton Ops file.</p>
    pub fn branch(&self) -> ::std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p>The path to the Proton Ops file.</p>
    pub fn file_path(&self) -> ::std::option::Option<&str> {
        self.file_path.as_deref()
    }
}
impl CreateServiceSyncConfigInput {
    /// Creates a new builder-style object to manufacture [`CreateServiceSyncConfigInput`](crate::operation::create_service_sync_config::CreateServiceSyncConfigInput).
    pub fn builder() -> crate::operation::create_service_sync_config::builders::CreateServiceSyncConfigInputBuilder {
        crate::operation::create_service_sync_config::builders::CreateServiceSyncConfigInputBuilder::default()
    }
}

/// A builder for [`CreateServiceSyncConfigInput`](crate::operation::create_service_sync_config::CreateServiceSyncConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateServiceSyncConfigInputBuilder {
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) repository_provider: ::std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) branch: ::std::option::Option<::std::string::String>,
    pub(crate) file_path: ::std::option::Option<::std::string::String>,
}
impl CreateServiceSyncConfigInputBuilder {
    /// <p>The name of the service the Proton Ops file is for.</p>
    /// This field is required.
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service the Proton Ops file is for.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service the Proton Ops file is for.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The provider type for your repository.</p>
    /// This field is required.
    pub fn repository_provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.repository_provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provider type for your repository.</p>
    pub fn set_repository_provider(mut self, input: ::std::option::Option<crate::types::RepositoryProvider>) -> Self {
        self.repository_provider = input;
        self
    }
    /// <p>The provider type for your repository.</p>
    pub fn get_repository_provider(&self) -> &::std::option::Option<crate::types::RepositoryProvider> {
        &self.repository_provider
    }
    /// <p>The repository name.</p>
    /// This field is required.
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The repository name.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The repository branch for your Proton Ops file.</p>
    /// This field is required.
    pub fn branch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository branch for your Proton Ops file.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The repository branch for your Proton Ops file.</p>
    pub fn get_branch(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch
    }
    /// <p>The path to the Proton Ops file.</p>
    /// This field is required.
    pub fn file_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the Proton Ops file.</p>
    pub fn set_file_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The path to the Proton Ops file.</p>
    pub fn get_file_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_path
    }
    /// Consumes the builder and constructs a [`CreateServiceSyncConfigInput`](crate::operation::create_service_sync_config::CreateServiceSyncConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_service_sync_config::CreateServiceSyncConfigInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_service_sync_config::CreateServiceSyncConfigInput {
            service_name: self.service_name,
            repository_provider: self.repository_provider,
            repository_name: self.repository_name,
            branch: self.branch,
            file_path: self.file_path,
        })
    }
}
