// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEnvironmentTemplateVersionInput {
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the environment template version that the first request created.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The name of the environment template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>A description of the new version of an environment template.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>To create a new minor version of the environment template, include <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the environment template, exclude <code>major Version</code>.</p>
    #[doc(hidden)]
    pub major_version: std::option::Option<std::string::String>,
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of an template.</p>
    #[doc(hidden)]
    pub source: std::option::Option<crate::types::TemplateVersionSourceInput>,
    /// <p>An optional list of metadata items that you can associate with the Proton environment template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateEnvironmentTemplateVersionInput {
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the environment template version that the first request created.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The name of the environment template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>A description of the new version of an environment template.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>To create a new minor version of the environment template, include <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the environment template, exclude <code>major Version</code>.</p>
    pub fn major_version(&self) -> std::option::Option<&str> {
        self.major_version.as_deref()
    }
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of an template.</p>
    pub fn source(&self) -> std::option::Option<&crate::types::TemplateVersionSourceInput> {
        self.source.as_ref()
    }
    /// <p>An optional list of metadata items that you can associate with the Proton environment template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for CreateEnvironmentTemplateVersionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEnvironmentTemplateVersionInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("template_name", &self.template_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("major_version", &self.major_version);
        formatter.field("source", &self.source);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateEnvironmentTemplateVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentTemplateVersionInput`](crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionInput).
    pub fn builder() -> crate::operation::create_environment_template_version::builders::CreateEnvironmentTemplateVersionInputBuilder{
        crate::operation::create_environment_template_version::builders::CreateEnvironmentTemplateVersionInputBuilder::default()
    }
}

/// A builder for [`CreateEnvironmentTemplateVersionInput`](crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateEnvironmentTemplateVersionInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) major_version: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<crate::types::TemplateVersionSourceInput>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateEnvironmentTemplateVersionInputBuilder {
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the environment template version that the first request created.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the environment template version that the first request created.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>A description of the new version of an environment template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the new version of an environment template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>To create a new minor version of the environment template, include <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the environment template, exclude <code>major Version</code>.</p>
    pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.major_version = Some(input.into());
        self
    }
    /// <p>To create a new minor version of the environment template, include <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the environment template, exclude <code>major Version</code>.</p>
    pub fn set_major_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of an template.</p>
    pub fn source(mut self, input: crate::types::TemplateVersionSourceInput) -> Self {
        self.source = Some(input);
        self
    }
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of an template.</p>
    pub fn set_source(
        mut self,
        input: std::option::Option<crate::types::TemplateVersionSourceInput>,
    ) -> Self {
        self.source = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional list of metadata items that you can associate with the Proton environment template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An optional list of metadata items that you can associate with the Proton environment template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateEnvironmentTemplateVersionInput`](crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionInput).
    pub fn build(self) -> Result<crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_environment_template_version::CreateEnvironmentTemplateVersionInput {
                client_token: self.client_token
                ,
                template_name: self.template_name
                ,
                description: self.description
                ,
                major_version: self.major_version
                ,
                source: self.source
                ,
                tags: self.tags
                ,
            }
        )
    }
}
impl std::fmt::Debug for CreateEnvironmentTemplateVersionInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEnvironmentTemplateVersionInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("template_name", &self.template_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("major_version", &self.major_version);
        formatter.field("source", &self.source);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
