// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::cancel_service_instance_deployment::_cancel_service_instance_deployment_output::CancelServiceInstanceDeploymentOutputBuilder;

pub use crate::operation::cancel_service_instance_deployment::_cancel_service_instance_deployment_input::CancelServiceInstanceDeploymentInputBuilder;

/// Fluent builder constructing a request to `CancelServiceInstanceDeployment`.
///
/// <p>Attempts to cancel a service instance deployment on an <code>UpdateServiceInstance</code> action, if the deployment is <code>IN_PROGRESS</code>. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-svc-instance-update.html">Update a service instance</a> in the <i>Proton User guide</i>.</p>
/// <p>The following list includes potential cancellation scenarios.</p>
/// <ul>
/// <li> <p>If the cancellation attempt succeeds, the resulting deployment state is <code>CANCELLED</code>.</p> </li>
/// <li> <p>If the cancellation attempt fails, the resulting deployment state is <code>FAILED</code>.</p> </li>
/// <li> <p>If the current <code>UpdateServiceInstance</code> action succeeds before the cancellation attempt starts, the resulting deployment state is <code>SUCCEEDED</code> and the cancellation attempt has no effect.</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelServiceInstanceDeploymentFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::cancel_service_instance_deployment::builders::CancelServiceInstanceDeploymentInputBuilder
            }
impl CancelServiceInstanceDeploymentFluentBuilder {
    /// Creates a new `CancelServiceInstanceDeployment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeployment, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentOutput, aws_smithy_http::result::SdkError<crate::operation::cancel_service_instance_deployment::CancelServiceInstanceDeploymentError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the service instance with the deployment to cancel.</p>
    pub fn service_instance_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_instance_name(input.into());
        self
    }
    /// <p>The name of the service instance with the deployment to cancel.</p>
    pub fn set_service_instance_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_service_instance_name(input);
        self
    }
    /// <p>The name of the service with the service instance deployment to cancel.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_name(input.into());
        self
    }
    /// <p>The name of the service with the service instance deployment to cancel.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service_name(input);
        self
    }
}
