// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateServiceInstanceInput {
    /// <p>The name of the service instance to update.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name of the service that the service instance belongs to.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The deployment type. It defines the mode for updating a service instance, as follows:</p>
    /// <dl>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>NONE</code> </p>
    /// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>CURRENT_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. <i>Don’t</i> include major or minor version parameters when you use this deployment type.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MINOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MAJOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub deployment_type: std::option::Option<crate::types::DeploymentUpdateType>,
    /// <p>The formatted specification that defines the service instance update.</p>
    #[doc(hidden)]
    pub spec: std::option::Option<std::string::String>,
    /// <p>The major version of the service template to update.</p>
    #[doc(hidden)]
    pub template_major_version: std::option::Option<std::string::String>,
    /// <p>The minor version of the service template to update.</p>
    #[doc(hidden)]
    pub template_minor_version: std::option::Option<std::string::String>,
}
impl UpdateServiceInstanceInput {
    /// <p>The name of the service instance to update.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the service that the service instance belongs to.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The deployment type. It defines the mode for updating a service instance, as follows:</p>
    /// <dl>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>NONE</code> </p>
    /// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>CURRENT_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. <i>Don’t</i> include major or minor version parameters when you use this deployment type.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MINOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MAJOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.</p>
    /// </dd>
    /// </dl>
    pub fn deployment_type(&self) -> std::option::Option<&crate::types::DeploymentUpdateType> {
        self.deployment_type.as_ref()
    }
    /// <p>The formatted specification that defines the service instance update.</p>
    pub fn spec(&self) -> std::option::Option<&str> {
        self.spec.as_deref()
    }
    /// <p>The major version of the service template to update.</p>
    pub fn template_major_version(&self) -> std::option::Option<&str> {
        self.template_major_version.as_deref()
    }
    /// <p>The minor version of the service template to update.</p>
    pub fn template_minor_version(&self) -> std::option::Option<&str> {
        self.template_minor_version.as_deref()
    }
}
impl std::fmt::Debug for UpdateServiceInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateServiceInstanceInput");
        formatter.field("name", &self.name);
        formatter.field("service_name", &self.service_name);
        formatter.field("deployment_type", &self.deployment_type);
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.finish()
    }
}
impl UpdateServiceInstanceInput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceInstanceInput`](crate::operation::update_service_instance::UpdateServiceInstanceInput).
    pub fn builder(
    ) -> crate::operation::update_service_instance::builders::UpdateServiceInstanceInputBuilder
    {
        crate::operation::update_service_instance::builders::UpdateServiceInstanceInputBuilder::default()
    }
}

/// A builder for [`UpdateServiceInstanceInput`](crate::operation::update_service_instance::UpdateServiceInstanceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateServiceInstanceInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) deployment_type: std::option::Option<crate::types::DeploymentUpdateType>,
    pub(crate) spec: std::option::Option<std::string::String>,
    pub(crate) template_major_version: std::option::Option<std::string::String>,
    pub(crate) template_minor_version: std::option::Option<std::string::String>,
}
impl UpdateServiceInstanceInputBuilder {
    /// <p>The name of the service instance to update.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the service instance to update.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the service that the service instance belongs to.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The name of the service that the service instance belongs to.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The deployment type. It defines the mode for updating a service instance, as follows:</p>
    /// <dl>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>NONE</code> </p>
    /// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>CURRENT_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. <i>Don’t</i> include major or minor version parameters when you use this deployment type.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MINOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MAJOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.</p>
    /// </dd>
    /// </dl>
    pub fn deployment_type(mut self, input: crate::types::DeploymentUpdateType) -> Self {
        self.deployment_type = Some(input);
        self
    }
    /// <p>The deployment type. It defines the mode for updating a service instance, as follows:</p>
    /// <dl>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>NONE</code> </p>
    /// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>CURRENT_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are updated. <i>Don’t</i> include major or minor version parameters when you use this deployment type.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MINOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use.</p>
    /// </dd>
    /// <dt></dt>
    /// <dd>
    /// <p> <code>MAJOR_VERSION</code> </p>
    /// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can specify a different major version that's higher than the major version in use and a minor version.</p>
    /// </dd>
    /// </dl>
    pub fn set_deployment_type(
        mut self,
        input: std::option::Option<crate::types::DeploymentUpdateType>,
    ) -> Self {
        self.deployment_type = input;
        self
    }
    /// <p>The formatted specification that defines the service instance update.</p>
    pub fn spec(mut self, input: impl Into<std::string::String>) -> Self {
        self.spec = Some(input.into());
        self
    }
    /// <p>The formatted specification that defines the service instance update.</p>
    pub fn set_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.spec = input;
        self
    }
    /// <p>The major version of the service template to update.</p>
    pub fn template_major_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_major_version = Some(input.into());
        self
    }
    /// <p>The major version of the service template to update.</p>
    pub fn set_template_major_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.template_major_version = input;
        self
    }
    /// <p>The minor version of the service template to update.</p>
    pub fn template_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_minor_version = Some(input.into());
        self
    }
    /// <p>The minor version of the service template to update.</p>
    pub fn set_template_minor_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.template_minor_version = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateServiceInstanceInput`](crate::operation::update_service_instance::UpdateServiceInstanceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_service_instance::UpdateServiceInstanceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_service_instance::UpdateServiceInstanceInput {
                name: self.name,
                service_name: self.service_name,
                deployment_type: self.deployment_type,
                spec: self.spec,
                template_major_version: self.template_major_version,
                template_minor_version: self.template_minor_version,
            },
        )
    }
}
impl std::fmt::Debug for UpdateServiceInstanceInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateServiceInstanceInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("service_name", &self.service_name);
        formatter.field("deployment_type", &self.deployment_type);
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.finish()
    }
}
