// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTemplateSyncConfigInput {
    /// <p>The template name.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The template type.</p>
    pub template_type: ::std::option::Option<crate::types::TemplateType>,
}
impl GetTemplateSyncConfigInput {
    /// <p>The template name.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The template type.</p>
    pub fn template_type(&self) -> ::std::option::Option<&crate::types::TemplateType> {
        self.template_type.as_ref()
    }
}
impl GetTemplateSyncConfigInput {
    /// Creates a new builder-style object to manufacture [`GetTemplateSyncConfigInput`](crate::operation::get_template_sync_config::GetTemplateSyncConfigInput).
    pub fn builder() -> crate::operation::get_template_sync_config::builders::GetTemplateSyncConfigInputBuilder {
        crate::operation::get_template_sync_config::builders::GetTemplateSyncConfigInputBuilder::default()
    }
}

/// A builder for [`GetTemplateSyncConfigInput`](crate::operation::get_template_sync_config::GetTemplateSyncConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTemplateSyncConfigInputBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_type: ::std::option::Option<crate::types::TemplateType>,
}
impl GetTemplateSyncConfigInputBuilder {
    /// <p>The template name.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template name.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The template name.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The template type.</p>
    /// This field is required.
    pub fn template_type(mut self, input: crate::types::TemplateType) -> Self {
        self.template_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The template type.</p>
    pub fn set_template_type(mut self, input: ::std::option::Option<crate::types::TemplateType>) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The template type.</p>
    pub fn get_template_type(&self) -> &::std::option::Option<crate::types::TemplateType> {
        &self.template_type
    }
    /// Consumes the builder and constructs a [`GetTemplateSyncConfigInput`](crate::operation::get_template_sync_config::GetTemplateSyncConfigInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_template_sync_config::GetTemplateSyncConfigInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_template_sync_config::GetTemplateSyncConfigInput {
            template_name: self.template_name,
            template_type: self.template_type,
        })
    }
}
