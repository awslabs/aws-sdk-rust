// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_service_sync_blocker_summary::_get_service_sync_blocker_summary_output::GetServiceSyncBlockerSummaryOutputBuilder;

pub use crate::operation::get_service_sync_blocker_summary::_get_service_sync_blocker_summary_input::GetServiceSyncBlockerSummaryInputBuilder;

impl GetServiceSyncBlockerSummaryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_service_sync_blocker_summary();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetServiceSyncBlockerSummary`.
///
/// <p>Get detailed data for the service sync blocker summary.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetServiceSyncBlockerSummaryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_service_sync_blocker_summary::builders::GetServiceSyncBlockerSummaryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryOutput,
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryError,
    > for GetServiceSyncBlockerSummaryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryOutput,
            crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetServiceSyncBlockerSummaryFluentBuilder {
    /// Creates a new `GetServiceSyncBlockerSummary`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetServiceSyncBlockerSummary as a reference.
    pub fn as_input(&self) -> &crate::operation::get_service_sync_blocker_summary::builders::GetServiceSyncBlockerSummaryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummary::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummary::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryOutput,
        crate::operation::get_service_sync_blocker_summary::GetServiceSyncBlockerSummaryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the service that you want to get the service sync blocker summary for. If given only the service name, all instances are blocked.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_name(input.into());
        self
    }
    /// <p>The name of the service that you want to get the service sync blocker summary for. If given only the service name, all instances are blocked.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_name(input);
        self
    }
    /// <p>The name of the service that you want to get the service sync blocker summary for. If given only the service name, all instances are blocked.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_name()
    }
    /// <p>The name of the service instance that you want to get the service sync blocker summary for. If given bothe the instance name and the service name, only the instance is blocked.</p>
    pub fn service_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_instance_name(input.into());
        self
    }
    /// <p>The name of the service instance that you want to get the service sync blocker summary for. If given bothe the instance name and the service name, only the instance is blocked.</p>
    pub fn set_service_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_instance_name(input);
        self
    }
    /// <p>The name of the service instance that you want to get the service sync blocker summary for. If given bothe the instance name and the service name, only the instance is blocked.</p>
    pub fn get_service_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_instance_name()
    }
}
