// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListEnvironmentTemplateVersionsInput {
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The name of the environment template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub major_version: ::std::option::Option<::std::string::String>,
}
impl ListEnvironmentTemplateVersionsInput {
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The name of the environment template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn major_version(&self) -> ::std::option::Option<&str> {
        self.major_version.as_deref()
    }
}
impl ListEnvironmentTemplateVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListEnvironmentTemplateVersionsInput`](crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsInput).
    pub fn builder() -> crate::operation::list_environment_template_versions::builders::ListEnvironmentTemplateVersionsInputBuilder {
        crate::operation::list_environment_template_versions::builders::ListEnvironmentTemplateVersionsInputBuilder::default()
    }
}

/// A builder for [`ListEnvironmentTemplateVersionsInput`](crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListEnvironmentTemplateVersionsInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) major_version: ::std::option::Option<::std::string::String>,
}
impl ListEnvironmentTemplateVersionsInputBuilder {
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The name of the environment template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn set_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn get_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_version
    }
    /// Consumes the builder and constructs a [`ListEnvironmentTemplateVersionsInput`](crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsInput {
                next_token: self.next_token,
                max_results: self.max_results,
                template_name: self.template_name,
                major_version: self.major_version,
            },
        )
    }
}
