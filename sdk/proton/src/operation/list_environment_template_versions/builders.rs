// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_environment_template_versions::_list_environment_template_versions_output::ListEnvironmentTemplateVersionsOutputBuilder;

pub use crate::operation::list_environment_template_versions::_list_environment_template_versions_input::ListEnvironmentTemplateVersionsInputBuilder;

/// Fluent builder constructing a request to `ListEnvironmentTemplateVersions`.
///
/// <p>List major or minor versions of an environment template with detail data.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListEnvironmentTemplateVersionsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_environment_template_versions::builders::ListEnvironmentTemplateVersionsInputBuilder
            }
impl ListEnvironmentTemplateVersionsFluentBuilder {
    /// Creates a new `ListEnvironmentTemplateVersions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersions, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsOutput, aws_smithy_http::result::SdkError<crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_environment_template_versions::paginator::ListEnvironmentTemplateVersionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_environment_template_versions::paginator::ListEnvironmentTemplateVersionsPaginator{
        crate::operation::list_environment_template_versions::paginator::ListEnvironmentTemplateVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token that indicates the location of the next major or minor version in the array of major or minor versions of an environment template, after the list of major or minor versions that was previously requested.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of major or minor versions of an environment template to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.template_name(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_template_name(input);
        self
    }
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.major_version(input.into());
        self
    }
    /// <p>To view a list of minor of versions under a major version of an environment template, include <code>major Version</code>.</p>
    /// <p>To view a list of major versions of an environment template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn set_major_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_major_version(input);
        self
    }
}
