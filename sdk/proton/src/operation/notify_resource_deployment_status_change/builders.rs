// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::notify_resource_deployment_status_change::_notify_resource_deployment_status_change_output::NotifyResourceDeploymentStatusChangeOutputBuilder;

pub use crate::operation::notify_resource_deployment_status_change::_notify_resource_deployment_status_change_input::NotifyResourceDeploymentStatusChangeInputBuilder;

impl NotifyResourceDeploymentStatusChangeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.notify_resource_deployment_status_change();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `NotifyResourceDeploymentStatusChange`.
///
/// <p>Notify Proton of status changes to a provisioned resource when you use self-managed provisioning.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-works-prov-methods.html#ag-works-prov-methods-self">Self-managed provisioning</a> in the <i>Proton User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct NotifyResourceDeploymentStatusChangeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::notify_resource_deployment_status_change::builders::NotifyResourceDeploymentStatusChangeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeOutput,
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError,
    > for NotifyResourceDeploymentStatusChangeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeOutput,
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl NotifyResourceDeploymentStatusChangeFluentBuilder {
    /// Creates a new `NotifyResourceDeploymentStatusChange`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the NotifyResourceDeploymentStatusChange as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::notify_resource_deployment_status_change::builders::NotifyResourceDeploymentStatusChangeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChange::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChange::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeOutput,
        crate::operation::notify_resource_deployment_status_change::NotifyResourceDeploymentStatusChangeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The provisioned resource Amazon Resource Name (ARN).</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The provisioned resource Amazon Resource Name (ARN).</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The provisioned resource Amazon Resource Name (ARN).</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>The status of your provisioned resource.</p>
    pub fn status(mut self, input: crate::types::ResourceDeploymentStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of your provisioned resource.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceDeploymentStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The status of your provisioned resource.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceDeploymentStatus> {
        self.inner.get_status()
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>The provisioned resource state change detail data that's returned by Proton.</p>
    pub fn outputs(mut self, input: crate::types::Output) -> Self {
        self.inner = self.inner.outputs(input);
        self
    }
    /// <p>The provisioned resource state change detail data that's returned by Proton.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Output>>) -> Self {
        self.inner = self.inner.set_outputs(input);
        self
    }
    /// <p>The provisioned resource state change detail data that's returned by Proton.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Output>> {
        self.inner.get_outputs()
    }
    /// <p>The deployment ID for your provisioned resource.</p>
    pub fn deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.deployment_id(input.into());
        self
    }
    /// <p>The deployment ID for your provisioned resource.</p>
    pub fn set_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_deployment_id(input);
        self
    }
    /// <p>The deployment ID for your provisioned resource.</p>
    pub fn get_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_deployment_id()
    }
    /// <p>The deployment status message for your provisioned resource.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.status_message(input.into());
        self
    }
    /// <p>The deployment status message for your provisioned resource.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_status_message(input);
        self
    }
    /// <p>The deployment status message for your provisioned resource.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_status_message()
    }
}
