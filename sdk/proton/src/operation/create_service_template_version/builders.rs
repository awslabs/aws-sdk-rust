// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_service_template_version::_create_service_template_version_output::CreateServiceTemplateVersionOutputBuilder;

pub use crate::operation::create_service_template_version::_create_service_template_version_input::CreateServiceTemplateVersionInputBuilder;

impl CreateServiceTemplateVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_service_template_version::CreateServiceTemplateVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_service_template_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateServiceTemplateVersion`.
///
/// <p>Create a new major or minor version of a service template. A major version of a service template is a version that <i>isn't</i> backward compatible. A minor version of a service template is a version that's backward compatible within its major version.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateServiceTemplateVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_service_template_version::builders::CreateServiceTemplateVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_service_template_version::CreateServiceTemplateVersionOutput,
        crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
    > for CreateServiceTemplateVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_service_template_version::CreateServiceTemplateVersionOutput,
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateServiceTemplateVersionFluentBuilder {
    /// Creates a new `CreateServiceTemplateVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateServiceTemplateVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::create_service_template_version::builders::CreateServiceTemplateVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_service_template_version::CreateServiceTemplateVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_service_template_version::CreateServiceTemplateVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_service_template_version::CreateServiceTemplateVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_service_template_version::CreateServiceTemplateVersionOutput,
        crate::operation::create_service_template_version::CreateServiceTemplateVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the service template version that the first request created.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the service template version that the first request created.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>When included, if two identical requests are made with the same client token, Proton returns the service template version that the first request created.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The name of the service template.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.template_name(input.into());
        self
    }
    /// <p>The name of the service template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_template_name(input);
        self
    }
    /// <p>The name of the service template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_template_name()
    }
    /// <p>A description of the new version of a service template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the new version of a service template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the new version of a service template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>To create a new minor version of the service template, include a <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the service template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.major_version(input.into());
        self
    }
    /// <p>To create a new minor version of the service template, include a <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the service template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn set_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_major_version(input);
        self
    }
    /// <p>To create a new minor version of the service template, include a <code>major Version</code>.</p>
    /// <p>To create a new major and minor version of the service template, <i>exclude</i> <code>major Version</code>.</p>
    pub fn get_major_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_major_version()
    }
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of a service template.</p>
    pub fn source(mut self, input: crate::types::TemplateVersionSourceInput) -> Self {
        self.inner = self.inner.source(input);
        self
    }
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of a service template.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::TemplateVersionSourceInput>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>An object that includes the template bundle S3 bucket path and name for the new version of a service template.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::TemplateVersionSourceInput> {
        self.inner.get_source()
    }
    /// Appends an item to `compatibleEnvironmentTemplates`.
    ///
    /// To override the contents of this collection use [`set_compatible_environment_templates`](Self::set_compatible_environment_templates).
    ///
    /// <p>An array of environment template objects that are compatible with the new service template version. A service instance based on this service template version can run in environments based on compatible templates.</p>
    pub fn compatible_environment_templates(mut self, input: crate::types::CompatibleEnvironmentTemplateInput) -> Self {
        self.inner = self.inner.compatible_environment_templates(input);
        self
    }
    /// <p>An array of environment template objects that are compatible with the new service template version. A service instance based on this service template version can run in environments based on compatible templates.</p>
    pub fn set_compatible_environment_templates(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CompatibleEnvironmentTemplateInput>>,
    ) -> Self {
        self.inner = self.inner.set_compatible_environment_templates(input);
        self
    }
    /// <p>An array of environment template objects that are compatible with the new service template version. A service instance based on this service template version can run in environments based on compatible templates.</p>
    pub fn get_compatible_environment_templates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CompatibleEnvironmentTemplateInput>> {
        self.inner.get_compatible_environment_templates()
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional list of metadata items that you can associate with the Proton service template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An optional list of metadata items that you can associate with the Proton service template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>An optional list of metadata items that you can associate with the Proton service template version. A tag is a key-value pair.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// Appends an item to `supportedComponentSources`.
    ///
    /// To override the contents of this collection use [`set_supported_component_sources`](Self::set_supported_component_sources).
    ///
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn supported_component_sources(mut self, input: crate::types::ServiceTemplateSupportedComponentSourceType) -> Self {
        self.inner = self.inner.supported_component_sources(input);
        self
    }
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_supported_component_sources(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceTemplateSupportedComponentSourceType>>,
    ) -> Self {
        self.inner = self.inner.set_supported_component_sources(input);
        self
    }
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn get_supported_component_sources(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceTemplateSupportedComponentSourceType>> {
        self.inner.get_supported_component_sources()
    }
}
