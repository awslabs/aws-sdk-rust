// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_template_sync_config::_update_template_sync_config_output::UpdateTemplateSyncConfigOutputBuilder;

pub use crate::operation::update_template_sync_config::_update_template_sync_config_input::UpdateTemplateSyncConfigInputBuilder;

/// Fluent builder constructing a request to `UpdateTemplateSyncConfig`.
///
/// <p>Update template sync configuration parameters, except for the <code>templateName</code> and <code>templateType</code>. Repository details (branch, name, and provider) should be of a linked repository. A linked repository is a repository that has been registered with Proton. For more information, see <code>CreateRepository</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTemplateSyncConfigFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_template_sync_config::builders::UpdateTemplateSyncConfigInputBuilder
            }
impl UpdateTemplateSyncConfigFluentBuilder {
    /// Creates a new `UpdateTemplateSyncConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_template_sync_config::UpdateTemplateSyncConfigOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_template_sync_config::UpdateTemplateSyncConfigError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The synced template name.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.template_name(input.into());
        self
    }
    /// <p>The synced template name.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_template_name(input);
        self
    }
    /// <p>The synced template type.</p>
    pub fn template_type(mut self, input: crate::types::TemplateType) -> Self {
        self.inner = self.inner.template_type(input);
        self
    }
    /// <p>The synced template type.</p>
    pub fn set_template_type(
        mut self,
        input: std::option::Option<crate::types::TemplateType>,
    ) -> Self {
        self.inner = self.inner.set_template_type(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.inner = self.inner.repository_provider(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_repository_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.inner = self.inner.set_repository_provider(input);
        self
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// <p>The repository branch for your template.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.branch(input.into());
        self
    }
    /// <p>The repository branch for your template.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_branch(input);
        self
    }
    /// <p>A subdirectory path to your template bundle version. When included, limits the template bundle search to this repository directory.</p>
    pub fn subdirectory(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subdirectory(input.into());
        self
    }
    /// <p>A subdirectory path to your template bundle version. When included, limits the template bundle search to this repository directory.</p>
    pub fn set_subdirectory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subdirectory(input);
        self
    }
}
