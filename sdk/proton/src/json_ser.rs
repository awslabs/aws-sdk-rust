// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_environment_account_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptEnvironmentAccountConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.id {
        object.key("id").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_environment_deployment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelEnvironmentDeploymentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.environment_name {
        object.key("environmentName").string(var_2.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_service_instance_deployment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelServiceInstanceDeploymentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.service_instance_name {
        object.key("serviceInstanceName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.service_name {
        object.key("serviceName").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_service_pipeline_deployment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelServicePipelineDeploymentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.service_name {
        object.key("serviceName").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.template_name {
        object.key("templateName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.template_major_version {
        object.key("templateMajorVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.template_minor_version {
        object.key("templateMinorVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.spec {
        object.key("spec").string(var_11.as_str());
    }
    if let Some(var_12) = &input.proton_service_role_arn {
        object.key("protonServiceRoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.environment_account_connection_id {
        object
            .key("environmentAccountConnectionId")
            .string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("tags").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.provisioning_repository {
        let mut object_19 = object.key("provisioningRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_branch_input(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_environment_account_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEnvironmentAccountConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.client_token {
        object.key("clientToken").string(var_20.as_str());
    }
    if let Some(var_21) = &input.management_account_id {
        object.key("managementAccountId").string(var_21.as_str());
    }
    if let Some(var_22) = &input.role_arn {
        object.key("roleArn").string(var_22.as_str());
    }
    if let Some(var_23) = &input.environment_name {
        object.key("environmentName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("tags").start_array();
        for item_26 in var_24 {
            {
                let mut object_27 = array_25.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_environment_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEnvironmentTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.name {
        object.key("name").string(var_28.as_str());
    }
    if let Some(var_29) = &input.display_name {
        object.key("displayName").string(var_29.as_str());
    }
    if let Some(var_30) = &input.description {
        object.key("description").string(var_30.as_str());
    }
    if let Some(var_31) = &input.encryption_key {
        object.key("encryptionKey").string(var_31.as_str());
    }
    if let Some(var_32) = &input.provisioning {
        object.key("provisioning").string(var_32.as_str());
    }
    if let Some(var_33) = &input.tags {
        let mut array_34 = object.key("tags").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_environment_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEnvironmentTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.client_token {
        object.key("clientToken").string(var_37.as_str());
    }
    if let Some(var_38) = &input.template_name {
        object.key("templateName").string(var_38.as_str());
    }
    if let Some(var_39) = &input.description {
        object.key("description").string(var_39.as_str());
    }
    if let Some(var_40) = &input.major_version {
        object.key("majorVersion").string(var_40.as_str());
    }
    if let Some(var_41) = &input.source {
        let mut object_42 = object.key("source").start_object();
        crate::json_ser::serialize_union_crate_model_template_version_source_input(
            &mut object_42,
            var_41,
        )?;
        object_42.finish();
    }
    if let Some(var_43) = &input.tags {
        let mut array_44 = object.key("tags").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.provider {
        object.key("provider").string(var_47.as_str());
    }
    if let Some(var_48) = &input.name {
        object.key("name").string(var_48.as_str());
    }
    if let Some(var_49) = &input.connection_arn {
        object.key("connectionArn").string(var_49.as_str());
    }
    if let Some(var_50) = &input.encryption_key {
        object.key("encryptionKey").string(var_50.as_str());
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_54, item_53)?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.name {
        object.key("name").string(var_55.as_str());
    }
    if let Some(var_56) = &input.description {
        object.key("description").string(var_56.as_str());
    }
    if let Some(var_57) = &input.template_name {
        object.key("templateName").string(var_57.as_str());
    }
    if let Some(var_58) = &input.template_major_version {
        object.key("templateMajorVersion").string(var_58.as_str());
    }
    if let Some(var_59) = &input.template_minor_version {
        object.key("templateMinorVersion").string(var_59.as_str());
    }
    if let Some(var_60) = &input.spec {
        object.key("spec").string(var_60.as_str());
    }
    if let Some(var_61) = &input.repository_connection_arn {
        object
            .key("repositoryConnectionArn")
            .string(var_61.as_str());
    }
    if let Some(var_62) = &input.repository_id {
        object.key("repositoryId").string(var_62.as_str());
    }
    if let Some(var_63) = &input.branch_name {
        object.key("branchName").string(var_63.as_str());
    }
    if let Some(var_64) = &input.tags {
        let mut array_65 = object.key("tags").start_array();
        for item_66 in var_64 {
            {
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_67, item_66)?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.name {
        object.key("name").string(var_68.as_str());
    }
    if let Some(var_69) = &input.display_name {
        object.key("displayName").string(var_69.as_str());
    }
    if let Some(var_70) = &input.description {
        object.key("description").string(var_70.as_str());
    }
    if let Some(var_71) = &input.encryption_key {
        object.key("encryptionKey").string(var_71.as_str());
    }
    if let Some(var_72) = &input.pipeline_provisioning {
        object.key("pipelineProvisioning").string(var_72.as_str());
    }
    if let Some(var_73) = &input.tags {
        let mut array_74 = object.key("tags").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_76, item_75)?;
                object_76.finish();
            }
        }
        array_74.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.client_token {
        object.key("clientToken").string(var_77.as_str());
    }
    if let Some(var_78) = &input.template_name {
        object.key("templateName").string(var_78.as_str());
    }
    if let Some(var_79) = &input.description {
        object.key("description").string(var_79.as_str());
    }
    if let Some(var_80) = &input.major_version {
        object.key("majorVersion").string(var_80.as_str());
    }
    if let Some(var_81) = &input.source {
        let mut object_82 = object.key("source").start_object();
        crate::json_ser::serialize_union_crate_model_template_version_source_input(
            &mut object_82,
            var_81,
        )?;
        object_82.finish();
    }
    if let Some(var_83) = &input.compatible_environment_templates {
        let mut array_84 = object.key("compatibleEnvironmentTemplates").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compatible_environment_template_input(&mut object_86, item_85)?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.tags {
        let mut array_88 = object.key("tags").start_array();
        for item_89 in var_87 {
            {
                let mut object_90 = array_88.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_90, item_89)?;
                object_90.finish();
            }
        }
        array_88.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_template_sync_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTemplateSyncConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.template_name {
        object.key("templateName").string(var_91.as_str());
    }
    if let Some(var_92) = &input.template_type {
        object.key("templateType").string(var_92.as_str());
    }
    if let Some(var_93) = &input.repository_provider {
        object.key("repositoryProvider").string(var_93.as_str());
    }
    if let Some(var_94) = &input.repository_name {
        object.key("repositoryName").string(var_94.as_str());
    }
    if let Some(var_95) = &input.branch {
        object.key("branch").string(var_95.as_str());
    }
    if let Some(var_96) = &input.subdirectory {
        object.key("subdirectory").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.name {
        object.key("name").string(var_97.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_environment_account_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEnvironmentAccountConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.id {
        object.key("id").string(var_98.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_environment_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEnvironmentTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.name {
        object.key("name").string(var_99.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_environment_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEnvironmentTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.template_name {
        object.key("templateName").string(var_100.as_str());
    }
    if let Some(var_101) = &input.major_version {
        object.key("majorVersion").string(var_101.as_str());
    }
    if let Some(var_102) = &input.minor_version {
        object.key("minorVersion").string(var_102.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_103) = &input.provider {
        object.key("provider").string(var_103.as_str());
    }
    if let Some(var_104) = &input.name {
        object.key("name").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.name {
        object.key("name").string(var_105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.name {
        object.key("name").string(var_106.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.template_name {
        object.key("templateName").string(var_107.as_str());
    }
    if let Some(var_108) = &input.major_version {
        object.key("majorVersion").string(var_108.as_str());
    }
    if let Some(var_109) = &input.minor_version {
        object.key("minorVersion").string(var_109.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_template_sync_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTemplateSyncConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.template_name {
        object.key("templateName").string(var_110.as_str());
    }
    if let Some(var_111) = &input.template_type {
        object.key("templateType").string(var_111.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.name {
        object.key("name").string(var_112.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_environment_account_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnvironmentAccountConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_113) = &input.id {
        object.key("id").string(var_113.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_environment_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnvironmentTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.name {
        object.key("name").string(var_114.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_environment_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEnvironmentTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.template_name {
        object.key("templateName").string(var_115.as_str());
    }
    if let Some(var_116) = &input.major_version {
        object.key("majorVersion").string(var_116.as_str());
    }
    if let Some(var_117) = &input.minor_version {
        object.key("minorVersion").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_repository_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRepositoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.provider {
        object.key("provider").string(var_118.as_str());
    }
    if let Some(var_119) = &input.name {
        object.key("name").string(var_119.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_repository_sync_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetRepositorySyncStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.repository_name {
        object.key("repositoryName").string(var_120.as_str());
    }
    if let Some(var_121) = &input.repository_provider {
        object.key("repositoryProvider").string(var_121.as_str());
    }
    if let Some(var_122) = &input.branch {
        object.key("branch").string(var_122.as_str());
    }
    if let Some(var_123) = &input.sync_type {
        object.key("syncType").string(var_123.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.name {
        object.key("name").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.name {
        object.key("name").string(var_125.as_str());
    }
    if let Some(var_126) = &input.service_name {
        object.key("serviceName").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.name {
        object.key("name").string(var_127.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_service_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetServiceTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.template_name {
        object.key("templateName").string(var_128.as_str());
    }
    if let Some(var_129) = &input.major_version {
        object.key("majorVersion").string(var_129.as_str());
    }
    if let Some(var_130) = &input.minor_version {
        object.key("minorVersion").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_template_sync_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTemplateSyncConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.template_name {
        object.key("templateName").string(var_131.as_str());
    }
    if let Some(var_132) = &input.template_type {
        object.key("templateType").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_template_sync_status_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTemplateSyncStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.template_name {
        object.key("templateName").string(var_133.as_str());
    }
    if let Some(var_134) = &input.template_type {
        object.key("templateType").string(var_134.as_str());
    }
    if let Some(var_135) = &input.template_version {
        object.key("templateVersion").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_environment_account_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEnvironmentAccountConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.requested_by {
        object.key("requestedBy").string(var_136.as_str());
    }
    if let Some(var_137) = &input.environment_name {
        object.key("environmentName").string(var_137.as_str());
    }
    if let Some(var_138) = &input.statuses {
        let mut array_139 = object.key("statuses").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140.as_str());
            }
        }
        array_139.finish();
    }
    if let Some(var_141) = &input.next_token {
        object.key("nextToken").string(var_141.as_str());
    }
    if let Some(var_142) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_environment_outputs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEnvironmentOutputsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.environment_name {
        object.key("environmentName").string(var_143.as_str());
    }
    if let Some(var_144) = &input.next_token {
        object.key("nextToken").string(var_144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_environment_provisioned_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEnvironmentProvisionedResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.environment_name {
        object.key("environmentName").string(var_145.as_str());
    }
    if let Some(var_146) = &input.next_token {
        object.key("nextToken").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_environments_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEnvironmentsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.next_token {
        object.key("nextToken").string(var_147.as_str());
    }
    if let Some(var_148) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    if let Some(var_149) = &input.environment_templates {
        let mut array_150 = object.key("environmentTemplates").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_environment_template_filter(
                    &mut object_152,
                    item_151,
                )?;
                object_152.finish();
            }
        }
        array_150.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_environment_templates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEnvironmentTemplatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.next_token {
        object.key("nextToken").string(var_153.as_str());
    }
    if let Some(var_154) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_environment_template_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEnvironmentTemplateVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.next_token {
        object.key("nextToken").string(var_155.as_str());
    }
    if let Some(var_156) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_156).into()),
        );
    }
    if let Some(var_157) = &input.template_name {
        object.key("templateName").string(var_157.as_str());
    }
    if let Some(var_158) = &input.major_version {
        object.key("majorVersion").string(var_158.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_repositories_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRepositoriesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.next_token {
        object.key("nextToken").string(var_159.as_str());
    }
    if let Some(var_160) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_160).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_repository_sync_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRepositorySyncDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_161) = &input.repository_name {
        object.key("repositoryName").string(var_161.as_str());
    }
    if let Some(var_162) = &input.repository_provider {
        object.key("repositoryProvider").string(var_162.as_str());
    }
    if let Some(var_163) = &input.sync_type {
        object.key("syncType").string(var_163.as_str());
    }
    if let Some(var_164) = &input.next_token {
        object.key("nextToken").string(var_164.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_instance_outputs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceInstanceOutputsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.service_instance_name {
        object.key("serviceInstanceName").string(var_165.as_str());
    }
    if let Some(var_166) = &input.service_name {
        object.key("serviceName").string(var_166.as_str());
    }
    if let Some(var_167) = &input.next_token {
        object.key("nextToken").string(var_167.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_instance_provisioned_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceInstanceProvisionedResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_168) = &input.service_name {
        object.key("serviceName").string(var_168.as_str());
    }
    if let Some(var_169) = &input.service_instance_name {
        object.key("serviceInstanceName").string(var_169.as_str());
    }
    if let Some(var_170) = &input.next_token {
        object.key("nextToken").string(var_170.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_171) = &input.service_name {
        object.key("serviceName").string(var_171.as_str());
    }
    if let Some(var_172) = &input.next_token {
        object.key("nextToken").string(var_172.as_str());
    }
    if let Some(var_173) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_pipeline_outputs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServicePipelineOutputsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.service_name {
        object.key("serviceName").string(var_174.as_str());
    }
    if let Some(var_175) = &input.next_token {
        object.key("nextToken").string(var_175.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_pipeline_provisioned_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServicePipelineProvisionedResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_176) = &input.service_name {
        object.key("serviceName").string(var_176.as_str());
    }
    if let Some(var_177) = &input.next_token {
        object.key("nextToken").string(var_177.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_services_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.next_token {
        object.key("nextToken").string(var_178.as_str());
    }
    if let Some(var_179) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_templates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceTemplatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.next_token {
        object.key("nextToken").string(var_180.as_str());
    }
    if let Some(var_181) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_181).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_service_template_versions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServiceTemplateVersionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.next_token {
        object.key("nextToken").string(var_182.as_str());
    }
    if let Some(var_183) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.template_name {
        object.key("templateName").string(var_184.as_str());
    }
    if let Some(var_185) = &input.major_version {
        object.key("majorVersion").string(var_185.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.resource_arn {
        object.key("resourceArn").string(var_186.as_str());
    }
    if let Some(var_187) = &input.next_token {
        object.key("nextToken").string(var_187.as_str());
    }
    if let Some(var_188) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_188).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_notify_resource_deployment_status_change_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::NotifyResourceDeploymentStatusChangeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.resource_arn {
        object.key("resourceArn").string(var_189.as_str());
    }
    if let Some(var_190) = &input.status {
        object.key("status").string(var_190.as_str());
    }
    if let Some(var_191) = &input.outputs {
        let mut array_192 = object.key("outputs").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_crate_model_output(&mut object_194, item_193)?;
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.deployment_id {
        object.key("deploymentId").string(var_195.as_str());
    }
    if let Some(var_196) = &input.status_message {
        object.key("statusMessage").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reject_environment_account_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectEnvironmentAccountConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.id {
        object.key("id").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.resource_arn {
        object.key("resourceArn").string(var_198.as_str());
    }
    if let Some(var_199) = &input.tags {
        let mut array_200 = object.key("tags").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_202, item_201)?;
                object_202.finish();
            }
        }
        array_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.resource_arn {
        object.key("resourceArn").string(var_203.as_str());
    }
    if let Some(var_204) = &input.tag_keys {
        let mut array_205 = object.key("tagKeys").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206.as_str());
            }
        }
        array_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.pipeline_service_role_arn {
        object
            .key("pipelineServiceRoleArn")
            .string(var_207.as_str());
    }
    if let Some(var_208) = &input.pipeline_provisioning_repository {
        let mut object_209 = object.key("pipelineProvisioningRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_branch_input(
            &mut object_209,
            var_208,
        )?;
        object_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.name {
        object.key("name").string(var_210.as_str());
    }
    if let Some(var_211) = &input.description {
        object.key("description").string(var_211.as_str());
    }
    if let Some(var_212) = &input.spec {
        object.key("spec").string(var_212.as_str());
    }
    if let Some(var_213) = &input.template_major_version {
        object.key("templateMajorVersion").string(var_213.as_str());
    }
    if let Some(var_214) = &input.template_minor_version {
        object.key("templateMinorVersion").string(var_214.as_str());
    }
    if let Some(var_215) = &input.proton_service_role_arn {
        object.key("protonServiceRoleArn").string(var_215.as_str());
    }
    if let Some(var_216) = &input.deployment_type {
        object.key("deploymentType").string(var_216.as_str());
    }
    if let Some(var_217) = &input.environment_account_connection_id {
        object
            .key("environmentAccountConnectionId")
            .string(var_217.as_str());
    }
    if let Some(var_218) = &input.provisioning_repository {
        let mut object_219 = object.key("provisioningRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_repository_branch_input(
            &mut object_219,
            var_218,
        )?;
        object_219.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_environment_account_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEnvironmentAccountConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.id {
        object.key("id").string(var_220.as_str());
    }
    if let Some(var_221) = &input.role_arn {
        object.key("roleArn").string(var_221.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_environment_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEnvironmentTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.name {
        object.key("name").string(var_222.as_str());
    }
    if let Some(var_223) = &input.display_name {
        object.key("displayName").string(var_223.as_str());
    }
    if let Some(var_224) = &input.description {
        object.key("description").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_environment_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEnvironmentTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.template_name {
        object.key("templateName").string(var_225.as_str());
    }
    if let Some(var_226) = &input.major_version {
        object.key("majorVersion").string(var_226.as_str());
    }
    if let Some(var_227) = &input.minor_version {
        object.key("minorVersion").string(var_227.as_str());
    }
    if let Some(var_228) = &input.description {
        object.key("description").string(var_228.as_str());
    }
    if let Some(var_229) = &input.status {
        object.key("status").string(var_229.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.name {
        object.key("name").string(var_230.as_str());
    }
    if let Some(var_231) = &input.description {
        object.key("description").string(var_231.as_str());
    }
    if let Some(var_232) = &input.spec {
        object.key("spec").string(var_232.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_233) = &input.name {
        object.key("name").string(var_233.as_str());
    }
    if let Some(var_234) = &input.service_name {
        object.key("serviceName").string(var_234.as_str());
    }
    if let Some(var_235) = &input.deployment_type {
        object.key("deploymentType").string(var_235.as_str());
    }
    if let Some(var_236) = &input.spec {
        object.key("spec").string(var_236.as_str());
    }
    if let Some(var_237) = &input.template_major_version {
        object.key("templateMajorVersion").string(var_237.as_str());
    }
    if let Some(var_238) = &input.template_minor_version {
        object.key("templateMinorVersion").string(var_238.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_pipeline_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServicePipelineInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_239) = &input.service_name {
        object.key("serviceName").string(var_239.as_str());
    }
    if let Some(var_240) = &input.spec {
        object.key("spec").string(var_240.as_str());
    }
    if let Some(var_241) = &input.deployment_type {
        object.key("deploymentType").string(var_241.as_str());
    }
    if let Some(var_242) = &input.template_major_version {
        object.key("templateMajorVersion").string(var_242.as_str());
    }
    if let Some(var_243) = &input.template_minor_version {
        object.key("templateMinorVersion").string(var_243.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_244) = &input.name {
        object.key("name").string(var_244.as_str());
    }
    if let Some(var_245) = &input.display_name {
        object.key("displayName").string(var_245.as_str());
    }
    if let Some(var_246) = &input.description {
        object.key("description").string(var_246.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.template_name {
        object.key("templateName").string(var_247.as_str());
    }
    if let Some(var_248) = &input.major_version {
        object.key("majorVersion").string(var_248.as_str());
    }
    if let Some(var_249) = &input.minor_version {
        object.key("minorVersion").string(var_249.as_str());
    }
    if let Some(var_250) = &input.description {
        object.key("description").string(var_250.as_str());
    }
    if let Some(var_251) = &input.status {
        object.key("status").string(var_251.as_str());
    }
    if let Some(var_252) = &input.compatible_environment_templates {
        let mut array_253 = object.key("compatibleEnvironmentTemplates").start_array();
        for item_254 in var_252 {
            {
                let mut object_255 = array_253.value().start_object();
                crate::json_ser::serialize_structure_crate_model_compatible_environment_template_input(&mut object_255, item_254)?;
                object_255.finish();
            }
        }
        array_253.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_template_sync_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTemplateSyncConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_256) = &input.template_name {
        object.key("templateName").string(var_256.as_str());
    }
    if let Some(var_257) = &input.template_type {
        object.key("templateType").string(var_257.as_str());
    }
    if let Some(var_258) = &input.repository_provider {
        object.key("repositoryProvider").string(var_258.as_str());
    }
    if let Some(var_259) = &input.repository_name {
        object.key("repositoryName").string(var_259.as_str());
    }
    if let Some(var_260) = &input.branch {
        object.key("branch").string(var_260.as_str());
    }
    if let Some(var_261) = &input.subdirectory {
        object.key("subdirectory").string(var_261.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_262) = &input.key {
        object.key("key").string(var_262.as_str());
    }
    if let Some(var_263) = &input.value {
        object.key("value").string(var_263.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_repository_branch_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepositoryBranchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.provider {
        object.key("provider").string(var_264.as_str());
    }
    if let Some(var_265) = &input.name {
        object.key("name").string(var_265.as_str());
    }
    if let Some(var_266) = &input.branch {
        object.key("branch").string(var_266.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_template_version_source_input(
    object_42: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateVersionSourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::TemplateVersionSourceInput::S3(inner) => {
            let mut object_267 = object_42.key("s3").start_object();
            crate::json_ser::serialize_structure_crate_model_s3_object_source(
                &mut object_267,
                inner,
            )?;
            object_267.finish();
        }
        crate::model::TemplateVersionSourceInput::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "TemplateVersionSourceInput",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compatible_environment_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CompatibleEnvironmentTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.template_name {
        object.key("templateName").string(var_268.as_str());
    }
    if let Some(var_269) = &input.major_version {
        object.key("majorVersion").string(var_269.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_environment_template_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentTemplateFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_270) = &input.template_name {
        object.key("templateName").string(var_270.as_str());
    }
    if let Some(var_271) = &input.major_version {
        object.key("majorVersion").string(var_271.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Output,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.key {
        object.key("key").string(var_272.as_str());
    }
    if let Some(var_273) = &input.value_string {
        object.key("valueString").string(var_273.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ObjectSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.bucket {
        object.key("bucket").string(var_274.as_str());
    }
    if let Some(var_275) = &input.key {
        object.key("key").string(var_275.as_str());
    }
    Ok(())
}
