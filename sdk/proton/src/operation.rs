// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>In a management account, an environment account connection request is accepted. When the environment account connection request is
/// accepted, AWS Proton can use the associated IAM role to provision environment infrastructure resources in the associated environment
/// account.</p>
/// <p>For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a>
/// in the <i>AWS Proton Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptEnvironmentAccountConnection {
    _private: (),
}
impl AcceptEnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`AcceptEnvironmentAccountConnectionInput`](crate::input::AcceptEnvironmentAccountConnectionInput)
    pub fn builder() -> crate::input::accept_environment_account_connection_input::Builder {
        crate::input::accept_environment_account_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptEnvironmentAccountConnection {
    type Output = std::result::Result<
        crate::output::AcceptEnvironmentAccountConnectionOutput,
        crate::error::AcceptEnvironmentAccountConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_environment_account_connection_error(response)
        } else {
            crate::operation_deser::parse_accept_environment_account_connection_response(response)
        }
    }
}

/// <p>Attempts to cancel an environment deployment on an <a>UpdateEnvironment</a> action, if the deployment is
/// <code>IN_PROGRESS</code>. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/ag-env-update.html">Update an environment</a> in the <i>AWS Proton Administration guide</i>.</p>
/// <p>The following list includes potential cancellation scenarios.</p>
/// <ul>
/// <li>
/// <p>If the cancellation attempt succeeds, the resulting deployment state is <code>CANCELLED</code>.</p>
/// </li>
/// <li>
/// <p>If the cancellation attempt fails, the resulting deployment state is <code>FAILED</code>.</p>
/// </li>
/// <li>
/// <p>If the current <a>UpdateEnvironment</a> action succeeds before the cancellation attempt starts, the resulting
/// deployment state is <code>SUCCEEDED</code> and the cancellation attempt has no effect.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelEnvironmentDeployment {
    _private: (),
}
impl CancelEnvironmentDeployment {
    /// Creates a new builder-style object to manufacture [`CancelEnvironmentDeploymentInput`](crate::input::CancelEnvironmentDeploymentInput)
    pub fn builder() -> crate::input::cancel_environment_deployment_input::Builder {
        crate::input::cancel_environment_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelEnvironmentDeployment {
    type Output = std::result::Result<
        crate::output::CancelEnvironmentDeploymentOutput,
        crate::error::CancelEnvironmentDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_environment_deployment_error(response)
        } else {
            crate::operation_deser::parse_cancel_environment_deployment_response(response)
        }
    }
}

/// <p>Attempts to cancel a service instance deployment on an <a>UpdateServiceInstance</a> action, if the deployment is
/// <code>IN_PROGRESS</code>. For more information, see <i>Update a service instance</i> in the <a href="https://docs.aws.amazon.com/proton/latest/adminguide/ag-svc-instance-update.html">AWS Proton Administration guide</a> or the <a href="https://docs.aws.amazon.com/proton/latest/userguide/ug-svc-instance-update.html">AWS Proton User guide</a>.</p>
/// <p>The following list includes potential cancellation scenarios.</p>
/// <ul>
/// <li>
/// <p>If the cancellation attempt succeeds, the resulting deployment state is <code>CANCELLED</code>.</p>
/// </li>
/// <li>
/// <p>If the cancellation attempt fails, the resulting deployment state is <code>FAILED</code>.</p>
/// </li>
/// <li>
/// <p>If the current <a>UpdateServiceInstance</a> action succeeds before the cancellation attempt starts, the resulting
/// deployment state is <code>SUCCEEDED</code> and the cancellation attempt has no effect.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelServiceInstanceDeployment {
    _private: (),
}
impl CancelServiceInstanceDeployment {
    /// Creates a new builder-style object to manufacture [`CancelServiceInstanceDeploymentInput`](crate::input::CancelServiceInstanceDeploymentInput)
    pub fn builder() -> crate::input::cancel_service_instance_deployment_input::Builder {
        crate::input::cancel_service_instance_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelServiceInstanceDeployment {
    type Output = std::result::Result<
        crate::output::CancelServiceInstanceDeploymentOutput,
        crate::error::CancelServiceInstanceDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_service_instance_deployment_error(response)
        } else {
            crate::operation_deser::parse_cancel_service_instance_deployment_response(response)
        }
    }
}

/// <p>Attempts to cancel a service pipeline deployment on an <a>UpdateServicePipeline</a> action, if the deployment is
/// <code>IN_PROGRESS</code>. For more information, see <i>Update a service pipeline</i> in the <a href="https://docs.aws.amazon.com/proton/latest/adminguide/ag-svc-pipeline-update.html">AWS Proton Administration guide</a> or the <a href="https://docs.aws.amazon.com/proton/latest/userguide/ug-svc-pipeline-update.html">AWS Proton User guide</a>.</p>
/// <p>The following list includes potential cancellation scenarios.</p>
/// <ul>
/// <li>
/// <p>If the cancellation attempt succeeds, the resulting deployment state is <code>CANCELLED</code>.</p>
/// </li>
/// <li>
/// <p>If the cancellation attempt fails, the resulting deployment state is <code>FAILED</code>.</p>
/// </li>
/// <li>
/// <p>If the current <a>UpdateServicePipeline</a> action succeeds before the cancellation attempt starts, the resulting
/// deployment state is <code>SUCCEEDED</code> and the cancellation attempt has no effect.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelServicePipelineDeployment {
    _private: (),
}
impl CancelServicePipelineDeployment {
    /// Creates a new builder-style object to manufacture [`CancelServicePipelineDeploymentInput`](crate::input::CancelServicePipelineDeploymentInput)
    pub fn builder() -> crate::input::cancel_service_pipeline_deployment_input::Builder {
        crate::input::cancel_service_pipeline_deployment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelServicePipelineDeployment {
    type Output = std::result::Result<
        crate::output::CancelServicePipelineDeploymentOutput,
        crate::error::CancelServicePipelineDeploymentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_service_pipeline_deployment_error(response)
        } else {
            crate::operation_deser::parse_cancel_service_pipeline_deployment_response(response)
        }
    }
}

/// <p>Deploy a new environment. An AWS Proton environment is created from an environment template that defines infrastructure and resources that
/// can be shared across services. For more information, see the <a href="https://docs.aws.amazon.com/proton/latest/adminguide/ag-environments.html">Environments</a> in the <i>AWS Proton Administration
/// Guide.</i>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEnvironment {
    _private: (),
}
impl CreateEnvironment {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentInput`](crate::input::CreateEnvironmentInput)
    pub fn builder() -> crate::input::create_environment_input::Builder {
        crate::input::create_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEnvironment {
    type Output = std::result::Result<
        crate::output::CreateEnvironmentOutput,
        crate::error::CreateEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_environment_error(response)
        } else {
            crate::operation_deser::parse_create_environment_response(response)
        }
    }
}

/// <p>Create an environment account connection in an environment account so that environment infrastructure resources can be provisioned in
/// the environment account from the management account.</p>
/// <p>An environment account connection is a secure bi-directional connection between a <i>management account</i> and an
/// <i>environment account</i> that maintains authorization and permissions. For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a> in the <i>AWS Proton
/// Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEnvironmentAccountConnection {
    _private: (),
}
impl CreateEnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentAccountConnectionInput`](crate::input::CreateEnvironmentAccountConnectionInput)
    pub fn builder() -> crate::input::create_environment_account_connection_input::Builder {
        crate::input::create_environment_account_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEnvironmentAccountConnection {
    type Output = std::result::Result<
        crate::output::CreateEnvironmentAccountConnectionOutput,
        crate::error::CreateEnvironmentAccountConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_environment_account_connection_error(response)
        } else {
            crate::operation_deser::parse_create_environment_account_connection_response(response)
        }
    }
}

/// <p>Create an environment template for AWS Proton. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/ag-env-templates.html">Environment Templates</a> in the <i>AWS Proton Administration
/// Guide</i>.</p>
/// <p>You can create an environment template in one of the two following ways:</p>
/// <ul>
/// <li>
/// <p>Register and publish a <i>standard</i> environment template that instructs AWS Proton to deploy and manage
/// environment infrastructure.</p>
/// </li>
/// <li>
/// <p>Register and publish a <i>customer managed</i> environment template that connects AWS Proton to your existing
/// provisioned infrastructure that you manage. AWS Proton <i>doesn't</i> manage your existing provisioned
/// infrastructure. To create an environment template for customer provisioned and managed infrastructure, include the
/// <code>provisioning</code> parameter and set the value to <code>CUSTOMER_MANAGED</code>. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/env-template-v1.html">Register and publish an environment template</a>
/// in the <i>AWS Proton Administration Guide</i>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEnvironmentTemplate {
    _private: (),
}
impl CreateEnvironmentTemplate {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentTemplateInput`](crate::input::CreateEnvironmentTemplateInput)
    pub fn builder() -> crate::input::create_environment_template_input::Builder {
        crate::input::create_environment_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEnvironmentTemplate {
    type Output = std::result::Result<
        crate::output::CreateEnvironmentTemplateOutput,
        crate::error::CreateEnvironmentTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_environment_template_error(response)
        } else {
            crate::operation_deser::parse_create_environment_template_response(response)
        }
    }
}

/// <p>Create a new major or minor version of an environment template. A major version of an environment template is a version that
/// <i>isn't</i> backwards compatible. A minor version of an environment template is a version that's backwards compatible
/// within its major version.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEnvironmentTemplateVersion {
    _private: (),
}
impl CreateEnvironmentTemplateVersion {
    /// Creates a new builder-style object to manufacture [`CreateEnvironmentTemplateVersionInput`](crate::input::CreateEnvironmentTemplateVersionInput)
    pub fn builder() -> crate::input::create_environment_template_version_input::Builder {
        crate::input::create_environment_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEnvironmentTemplateVersion {
    type Output = std::result::Result<
        crate::output::CreateEnvironmentTemplateVersionOutput,
        crate::error::CreateEnvironmentTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_environment_template_version_error(response)
        } else {
            crate::operation_deser::parse_create_environment_template_version_response(response)
        }
    }
}

/// <p>Create an AWS Proton service. An AWS Proton service is an instantiation of a service template and often includes several service instances and
/// pipeline. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/ag-services.html">Services</a> in the
/// <i>AWS Proton Administration Guide</i> and <a href="https://docs.aws.amazon.com/proton/latest/userguide/ug-service.html">Services</a> in the <i>AWS Proton User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateService {
    _private: (),
}
impl CreateService {
    /// Creates a new builder-style object to manufacture [`CreateServiceInput`](crate::input::CreateServiceInput)
    pub fn builder() -> crate::input::create_service_input::Builder {
        crate::input::create_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateService {
    type Output =
        std::result::Result<crate::output::CreateServiceOutput, crate::error::CreateServiceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_service_error(response)
        } else {
            crate::operation_deser::parse_create_service_response(response)
        }
    }
}

/// <p>Create a service template. The administrator creates a service template to define standardized infrastructure and an optional CICD
/// service pipeline. Developers, in turn, select the service template from AWS Proton. If the selected service template includes a service
/// pipeline definition, they provide a link to their source code repository. AWS Proton then deploys and manages the infrastructure defined by the
/// selected service template. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/managing-svc-templates.html">Service Templates</a> in the <i>AWS Proton Administration
/// Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateServiceTemplate {
    _private: (),
}
impl CreateServiceTemplate {
    /// Creates a new builder-style object to manufacture [`CreateServiceTemplateInput`](crate::input::CreateServiceTemplateInput)
    pub fn builder() -> crate::input::create_service_template_input::Builder {
        crate::input::create_service_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateServiceTemplate {
    type Output = std::result::Result<
        crate::output::CreateServiceTemplateOutput,
        crate::error::CreateServiceTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_service_template_error(response)
        } else {
            crate::operation_deser::parse_create_service_template_response(response)
        }
    }
}

/// <p>Create a new major or minor version of a service template. A major version of a service template is a version that
/// <i>isn't</i> backwards compatible. A minor version of a service template is a version that's backwards compatible within
/// its major version.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateServiceTemplateVersion {
    _private: (),
}
impl CreateServiceTemplateVersion {
    /// Creates a new builder-style object to manufacture [`CreateServiceTemplateVersionInput`](crate::input::CreateServiceTemplateVersionInput)
    pub fn builder() -> crate::input::create_service_template_version_input::Builder {
        crate::input::create_service_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateServiceTemplateVersion {
    type Output = std::result::Result<
        crate::output::CreateServiceTemplateVersionOutput,
        crate::error::CreateServiceTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_service_template_version_error(response)
        } else {
            crate::operation_deser::parse_create_service_template_version_response(response)
        }
    }
}

/// <p>Delete an environment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEnvironment {
    _private: (),
}
impl DeleteEnvironment {
    /// Creates a new builder-style object to manufacture [`DeleteEnvironmentInput`](crate::input::DeleteEnvironmentInput)
    pub fn builder() -> crate::input::delete_environment_input::Builder {
        crate::input::delete_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEnvironment {
    type Output = std::result::Result<
        crate::output::DeleteEnvironmentOutput,
        crate::error::DeleteEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_environment_error(response)
        } else {
            crate::operation_deser::parse_delete_environment_response(response)
        }
    }
}

/// <p>In an environment account, delete an environment account connection.</p>
/// <p>After you delete an environment account connection that’s in use by an AWS Proton environment, AWS Proton <i>can’t</i>
/// manage the environment infrastructure resources until a new environment account connection is accepted for the environment account and
/// associated environment. You're responsible for cleaning up provisioned resources that remain without an environment connection.</p>
/// <p>For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a>
/// in the <i>AWS Proton Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEnvironmentAccountConnection {
    _private: (),
}
impl DeleteEnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`DeleteEnvironmentAccountConnectionInput`](crate::input::DeleteEnvironmentAccountConnectionInput)
    pub fn builder() -> crate::input::delete_environment_account_connection_input::Builder {
        crate::input::delete_environment_account_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEnvironmentAccountConnection {
    type Output = std::result::Result<
        crate::output::DeleteEnvironmentAccountConnectionOutput,
        crate::error::DeleteEnvironmentAccountConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_environment_account_connection_error(response)
        } else {
            crate::operation_deser::parse_delete_environment_account_connection_response(response)
        }
    }
}

/// <p>If no other major or minor versions of an environment template exist, delete the environment template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEnvironmentTemplate {
    _private: (),
}
impl DeleteEnvironmentTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteEnvironmentTemplateInput`](crate::input::DeleteEnvironmentTemplateInput)
    pub fn builder() -> crate::input::delete_environment_template_input::Builder {
        crate::input::delete_environment_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEnvironmentTemplate {
    type Output = std::result::Result<
        crate::output::DeleteEnvironmentTemplateOutput,
        crate::error::DeleteEnvironmentTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_environment_template_error(response)
        } else {
            crate::operation_deser::parse_delete_environment_template_response(response)
        }
    }
}

/// <p>If no other minor versions of an environment template exist, delete a major version of the environment template if it's not the
/// <code>Recommended</code> version. Delete the <code>Recommended</code> version of the environment template if no other major versions
/// or minor versions of the environment template exist. A major version of an environment template is a version that's not backwards
/// compatible.</p>
/// <p>Delete a minor version of an environment template if it <i>isn't</i> the <code>Recommended</code> version. Delete a
/// <code>Recommended</code> minor version of the environment template if no other minor versions of the environment template exist. A
/// minor version of an environment template is a version that's backwards compatible.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEnvironmentTemplateVersion {
    _private: (),
}
impl DeleteEnvironmentTemplateVersion {
    /// Creates a new builder-style object to manufacture [`DeleteEnvironmentTemplateVersionInput`](crate::input::DeleteEnvironmentTemplateVersionInput)
    pub fn builder() -> crate::input::delete_environment_template_version_input::Builder {
        crate::input::delete_environment_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEnvironmentTemplateVersion {
    type Output = std::result::Result<
        crate::output::DeleteEnvironmentTemplateVersionOutput,
        crate::error::DeleteEnvironmentTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_environment_template_version_error(response)
        } else {
            crate::operation_deser::parse_delete_environment_template_version_response(response)
        }
    }
}

/// <p>Delete a service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteService {
    _private: (),
}
impl DeleteService {
    /// Creates a new builder-style object to manufacture [`DeleteServiceInput`](crate::input::DeleteServiceInput)
    pub fn builder() -> crate::input::delete_service_input::Builder {
        crate::input::delete_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteService {
    type Output =
        std::result::Result<crate::output::DeleteServiceOutput, crate::error::DeleteServiceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_service_error(response)
        } else {
            crate::operation_deser::parse_delete_service_response(response)
        }
    }
}

/// <p>If no other major or minor versions of the service template exist, delete the service template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteServiceTemplate {
    _private: (),
}
impl DeleteServiceTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteServiceTemplateInput`](crate::input::DeleteServiceTemplateInput)
    pub fn builder() -> crate::input::delete_service_template_input::Builder {
        crate::input::delete_service_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteServiceTemplate {
    type Output = std::result::Result<
        crate::output::DeleteServiceTemplateOutput,
        crate::error::DeleteServiceTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_service_template_error(response)
        } else {
            crate::operation_deser::parse_delete_service_template_response(response)
        }
    }
}

/// <p>If no other minor versions of a service template exist, delete a major version of the service template if it's not the
/// <code>Recommended</code> version. Delete the <code>Recommended</code> version of the service template if no other major versions or
/// minor versions of the service template exist. A major version of a service template is a version that <i>isn't</i> backwards
/// compatible.</p>
/// <p>Delete a minor version of a service template if it's not the <code>Recommended</code> version. Delete a <code>Recommended</code> minor
/// version of the service template if no other minor versions of the service template exist. A minor version of a service template is a
/// version that's backwards compatible.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteServiceTemplateVersion {
    _private: (),
}
impl DeleteServiceTemplateVersion {
    /// Creates a new builder-style object to manufacture [`DeleteServiceTemplateVersionInput`](crate::input::DeleteServiceTemplateVersionInput)
    pub fn builder() -> crate::input::delete_service_template_version_input::Builder {
        crate::input::delete_service_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteServiceTemplateVersion {
    type Output = std::result::Result<
        crate::output::DeleteServiceTemplateVersionOutput,
        crate::error::DeleteServiceTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_service_template_version_error(response)
        } else {
            crate::operation_deser::parse_delete_service_template_version_response(response)
        }
    }
}

/// <p>Get detail data for the AWS Proton pipeline service role.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAccountSettings {
    _private: (),
}
impl GetAccountSettings {
    /// Creates a new builder-style object to manufacture [`GetAccountSettingsInput`](crate::input::GetAccountSettingsInput)
    pub fn builder() -> crate::input::get_account_settings_input::Builder {
        crate::input::get_account_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAccountSettings {
    type Output = std::result::Result<
        crate::output::GetAccountSettingsOutput,
        crate::error::GetAccountSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_settings_error(response)
        } else {
            crate::operation_deser::parse_get_account_settings_response(response)
        }
    }
}

/// <p>Get detail data for an environment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEnvironment {
    _private: (),
}
impl GetEnvironment {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentInput`](crate::input::GetEnvironmentInput)
    pub fn builder() -> crate::input::get_environment_input::Builder {
        crate::input::get_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEnvironment {
    type Output =
        std::result::Result<crate::output::GetEnvironmentOutput, crate::error::GetEnvironmentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_environment_error(response)
        } else {
            crate::operation_deser::parse_get_environment_response(response)
        }
    }
}

/// <p>In an environment account, view the detail data for an environment account connection.</p>
/// <p>For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a>
/// in the <i>AWS Proton Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEnvironmentAccountConnection {
    _private: (),
}
impl GetEnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentAccountConnectionInput`](crate::input::GetEnvironmentAccountConnectionInput)
    pub fn builder() -> crate::input::get_environment_account_connection_input::Builder {
        crate::input::get_environment_account_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEnvironmentAccountConnection {
    type Output = std::result::Result<
        crate::output::GetEnvironmentAccountConnectionOutput,
        crate::error::GetEnvironmentAccountConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_environment_account_connection_error(response)
        } else {
            crate::operation_deser::parse_get_environment_account_connection_response(response)
        }
    }
}

/// <p>Get detail data for an environment template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEnvironmentTemplate {
    _private: (),
}
impl GetEnvironmentTemplate {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentTemplateInput`](crate::input::GetEnvironmentTemplateInput)
    pub fn builder() -> crate::input::get_environment_template_input::Builder {
        crate::input::get_environment_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEnvironmentTemplate {
    type Output = std::result::Result<
        crate::output::GetEnvironmentTemplateOutput,
        crate::error::GetEnvironmentTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_environment_template_error(response)
        } else {
            crate::operation_deser::parse_get_environment_template_response(response)
        }
    }
}

/// <p>View detail data for a major or minor version of an environment template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEnvironmentTemplateVersion {
    _private: (),
}
impl GetEnvironmentTemplateVersion {
    /// Creates a new builder-style object to manufacture [`GetEnvironmentTemplateVersionInput`](crate::input::GetEnvironmentTemplateVersionInput)
    pub fn builder() -> crate::input::get_environment_template_version_input::Builder {
        crate::input::get_environment_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEnvironmentTemplateVersion {
    type Output = std::result::Result<
        crate::output::GetEnvironmentTemplateVersionOutput,
        crate::error::GetEnvironmentTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_environment_template_version_error(response)
        } else {
            crate::operation_deser::parse_get_environment_template_version_response(response)
        }
    }
}

/// <p>Get detail data for a service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetService {
    _private: (),
}
impl GetService {
    /// Creates a new builder-style object to manufacture [`GetServiceInput`](crate::input::GetServiceInput)
    pub fn builder() -> crate::input::get_service_input::Builder {
        crate::input::get_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetService {
    type Output =
        std::result::Result<crate::output::GetServiceOutput, crate::error::GetServiceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_error(response)
        } else {
            crate::operation_deser::parse_get_service_response(response)
        }
    }
}

/// <p>Get detail data for a service instance. A service instance is an instantiation of service template, which is running in a specific
/// environment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceInstance {
    _private: (),
}
impl GetServiceInstance {
    /// Creates a new builder-style object to manufacture [`GetServiceInstanceInput`](crate::input::GetServiceInstanceInput)
    pub fn builder() -> crate::input::get_service_instance_input::Builder {
        crate::input::get_service_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceInstance {
    type Output = std::result::Result<
        crate::output::GetServiceInstanceOutput,
        crate::error::GetServiceInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_instance_error(response)
        } else {
            crate::operation_deser::parse_get_service_instance_response(response)
        }
    }
}

/// <p>Get detail data for a service template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceTemplate {
    _private: (),
}
impl GetServiceTemplate {
    /// Creates a new builder-style object to manufacture [`GetServiceTemplateInput`](crate::input::GetServiceTemplateInput)
    pub fn builder() -> crate::input::get_service_template_input::Builder {
        crate::input::get_service_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceTemplate {
    type Output = std::result::Result<
        crate::output::GetServiceTemplateOutput,
        crate::error::GetServiceTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_template_error(response)
        } else {
            crate::operation_deser::parse_get_service_template_response(response)
        }
    }
}

/// <p>View detail data for a major or minor version of a service template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServiceTemplateVersion {
    _private: (),
}
impl GetServiceTemplateVersion {
    /// Creates a new builder-style object to manufacture [`GetServiceTemplateVersionInput`](crate::input::GetServiceTemplateVersionInput)
    pub fn builder() -> crate::input::get_service_template_version_input::Builder {
        crate::input::get_service_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServiceTemplateVersion {
    type Output = std::result::Result<
        crate::output::GetServiceTemplateVersionOutput,
        crate::error::GetServiceTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_service_template_version_error(response)
        } else {
            crate::operation_deser::parse_get_service_template_version_response(response)
        }
    }
}

/// <p>View a list of environment account connections.</p>
/// <p>For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a>
/// in the <i>AWS Proton Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEnvironmentAccountConnections {
    _private: (),
}
impl ListEnvironmentAccountConnections {
    /// Creates a new builder-style object to manufacture [`ListEnvironmentAccountConnectionsInput`](crate::input::ListEnvironmentAccountConnectionsInput)
    pub fn builder() -> crate::input::list_environment_account_connections_input::Builder {
        crate::input::list_environment_account_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEnvironmentAccountConnections {
    type Output = std::result::Result<
        crate::output::ListEnvironmentAccountConnectionsOutput,
        crate::error::ListEnvironmentAccountConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_environment_account_connections_error(response)
        } else {
            crate::operation_deser::parse_list_environment_account_connections_response(response)
        }
    }
}

/// <p>List environments with detail data summaries.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEnvironments {
    _private: (),
}
impl ListEnvironments {
    /// Creates a new builder-style object to manufacture [`ListEnvironmentsInput`](crate::input::ListEnvironmentsInput)
    pub fn builder() -> crate::input::list_environments_input::Builder {
        crate::input::list_environments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEnvironments {
    type Output = std::result::Result<
        crate::output::ListEnvironmentsOutput,
        crate::error::ListEnvironmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_environments_error(response)
        } else {
            crate::operation_deser::parse_list_environments_response(response)
        }
    }
}

/// <p>List environment templates.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEnvironmentTemplates {
    _private: (),
}
impl ListEnvironmentTemplates {
    /// Creates a new builder-style object to manufacture [`ListEnvironmentTemplatesInput`](crate::input::ListEnvironmentTemplatesInput)
    pub fn builder() -> crate::input::list_environment_templates_input::Builder {
        crate::input::list_environment_templates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEnvironmentTemplates {
    type Output = std::result::Result<
        crate::output::ListEnvironmentTemplatesOutput,
        crate::error::ListEnvironmentTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_environment_templates_error(response)
        } else {
            crate::operation_deser::parse_list_environment_templates_response(response)
        }
    }
}

/// <p>List major or minor versions of an environment template with detail data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListEnvironmentTemplateVersions {
    _private: (),
}
impl ListEnvironmentTemplateVersions {
    /// Creates a new builder-style object to manufacture [`ListEnvironmentTemplateVersionsInput`](crate::input::ListEnvironmentTemplateVersionsInput)
    pub fn builder() -> crate::input::list_environment_template_versions_input::Builder {
        crate::input::list_environment_template_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListEnvironmentTemplateVersions {
    type Output = std::result::Result<
        crate::output::ListEnvironmentTemplateVersionsOutput,
        crate::error::ListEnvironmentTemplateVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_environment_template_versions_error(response)
        } else {
            crate::operation_deser::parse_list_environment_template_versions_response(response)
        }
    }
}

/// <p>List service instances with summaries of detail data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceInstances {
    _private: (),
}
impl ListServiceInstances {
    /// Creates a new builder-style object to manufacture [`ListServiceInstancesInput`](crate::input::ListServiceInstancesInput)
    pub fn builder() -> crate::input::list_service_instances_input::Builder {
        crate::input::list_service_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceInstances {
    type Output = std::result::Result<
        crate::output::ListServiceInstancesOutput,
        crate::error::ListServiceInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_instances_error(response)
        } else {
            crate::operation_deser::parse_list_service_instances_response(response)
        }
    }
}

/// <p>List services with summaries of detail data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServices {
    _private: (),
}
impl ListServices {
    /// Creates a new builder-style object to manufacture [`ListServicesInput`](crate::input::ListServicesInput)
    pub fn builder() -> crate::input::list_services_input::Builder {
        crate::input::list_services_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServices {
    type Output =
        std::result::Result<crate::output::ListServicesOutput, crate::error::ListServicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_services_error(response)
        } else {
            crate::operation_deser::parse_list_services_response(response)
        }
    }
}

/// <p>List service templates with detail data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceTemplates {
    _private: (),
}
impl ListServiceTemplates {
    /// Creates a new builder-style object to manufacture [`ListServiceTemplatesInput`](crate::input::ListServiceTemplatesInput)
    pub fn builder() -> crate::input::list_service_templates_input::Builder {
        crate::input::list_service_templates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceTemplates {
    type Output = std::result::Result<
        crate::output::ListServiceTemplatesOutput,
        crate::error::ListServiceTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_templates_error(response)
        } else {
            crate::operation_deser::parse_list_service_templates_response(response)
        }
    }
}

/// <p>List major or minor versions of a service template with detail data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListServiceTemplateVersions {
    _private: (),
}
impl ListServiceTemplateVersions {
    /// Creates a new builder-style object to manufacture [`ListServiceTemplateVersionsInput`](crate::input::ListServiceTemplateVersionsInput)
    pub fn builder() -> crate::input::list_service_template_versions_input::Builder {
        crate::input::list_service_template_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListServiceTemplateVersions {
    type Output = std::result::Result<
        crate::output::ListServiceTemplateVersionsOutput,
        crate::error::ListServiceTemplateVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_service_template_versions_error(response)
        } else {
            crate::operation_deser::parse_list_service_template_versions_response(response)
        }
    }
}

/// <p>List tags for a resource. For more information, see <i>AWS Proton resources and tagging</i> in the <a href="https://docs.aws.amazon.com/proton/latest/adminguide/resources.html">AWS Proton Administration Guide</a> or <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">AWS Proton User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>In a management account, reject an environment account connection from another environment account.</p>
/// <p>After you reject an environment account connection request, you <i>won’t</i> be able to accept or use the rejected
/// environment account connection.</p>
/// <p>You <i>can’t</i> reject an environment account connection that is connected to an environment.</p>
/// <p>For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a>
/// in the <i>AWS Proton Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectEnvironmentAccountConnection {
    _private: (),
}
impl RejectEnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`RejectEnvironmentAccountConnectionInput`](crate::input::RejectEnvironmentAccountConnectionInput)
    pub fn builder() -> crate::input::reject_environment_account_connection_input::Builder {
        crate::input::reject_environment_account_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectEnvironmentAccountConnection {
    type Output = std::result::Result<
        crate::output::RejectEnvironmentAccountConnectionOutput,
        crate::error::RejectEnvironmentAccountConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_environment_account_connection_error(response)
        } else {
            crate::operation_deser::parse_reject_environment_account_connection_response(response)
        }
    }
}

/// <p>Tag a resource. For more information, see <i>AWS Proton resources and tagging</i> in the <a href="https://docs.aws.amazon.com/proton/latest/adminguide/resources.html">AWS Proton Administration Guide</a> or <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">AWS Proton User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Remove a tag from a resource. For more information, see <i>AWS Proton resources and tagging</i> in the <a href="https://docs.aws.amazon.com/proton/latest/adminguide/resources.html">AWS Proton Administration Guide</a> or <a href="https://docs.aws.amazon.com/proton/latest/userguide/resources.html">AWS Proton User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Update the AWS Proton pipeline service account settings.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAccountSettings {
    _private: (),
}
impl UpdateAccountSettings {
    /// Creates a new builder-style object to manufacture [`UpdateAccountSettingsInput`](crate::input::UpdateAccountSettingsInput)
    pub fn builder() -> crate::input::update_account_settings_input::Builder {
        crate::input::update_account_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAccountSettings {
    type Output = std::result::Result<
        crate::output::UpdateAccountSettingsOutput,
        crate::error::UpdateAccountSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_account_settings_error(response)
        } else {
            crate::operation_deser::parse_update_account_settings_response(response)
        }
    }
}

/// <p>Update an environment.</p>
/// <p>If the environment is associated with an environment account connection, <i>don't</i> update or include the
/// <code>protonServiceRoleArn</code> parameter to update or connect to an environment account connection. </p>
/// <p>You can only update to a new environment account connection if it was created in the same environment account that the current
/// environment account connection was created in and associated with the current environment.</p>
/// <p>If the environment <i>isn't</i> associated with an environment account connection, <i>don't</i> update or
/// include the <code>environmentAccountConnectionId</code> parameter to update or connect to an environment account connection.</p>
/// <p>You can update either the <code>environmentAccountConnectionId</code> or <code>protonServiceRoleArn</code> parameter and value. You
/// can’t update both.</p>
/// <p>There are four modes for updating an environment as described in the following. The <code>deploymentType</code> field defines the
/// mode.</p>
/// <dl>
/// <dt/>
/// <dd>
/// <p>
/// <code>NONE</code>
/// </p>
/// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>CURRENT_VERSION</code>
/// </p>
/// <p>In this mode, the environment is deployed and updated with the new spec that you provide. Only requested parameters are
/// updated. <i>Don’t</i> include minor or major version parameters when you use this
/// <code>deployment-type</code>.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>MINOR_VERSION</code>
/// </p>
/// <p>In this mode, the environment is deployed and updated with the published, recommended (latest) minor version of the current
/// major version in use, by default. You can also specify a different minor version of the current major version in use.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>MAJOR_VERSION</code>
/// </p>
/// <p>In this mode, the environment is deployed and updated with the published, recommended (latest) major and minor version of
/// the current template, by default. You can also specify a different major version that's higher than the major version in use
/// and a minor version (optional).</p>
/// </dd>
/// </dl>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironment {
    _private: (),
}
impl UpdateEnvironment {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentInput`](crate::input::UpdateEnvironmentInput)
    pub fn builder() -> crate::input::update_environment_input::Builder {
        crate::input::update_environment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEnvironment {
    type Output = std::result::Result<
        crate::output::UpdateEnvironmentOutput,
        crate::error::UpdateEnvironmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_environment_error(response)
        } else {
            crate::operation_deser::parse_update_environment_response(response)
        }
    }
}

/// <p>In an environment account, update an environment account connection to use a new IAM role.</p>
/// <p>For more information, see <a href="proton/latest/adminguide/ag-env-account-connections.html">Environment account connections</a>
/// in the <i>AWS Proton Administration guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironmentAccountConnection {
    _private: (),
}
impl UpdateEnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentAccountConnectionInput`](crate::input::UpdateEnvironmentAccountConnectionInput)
    pub fn builder() -> crate::input::update_environment_account_connection_input::Builder {
        crate::input::update_environment_account_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEnvironmentAccountConnection {
    type Output = std::result::Result<
        crate::output::UpdateEnvironmentAccountConnectionOutput,
        crate::error::UpdateEnvironmentAccountConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_environment_account_connection_error(response)
        } else {
            crate::operation_deser::parse_update_environment_account_connection_response(response)
        }
    }
}

/// <p>Update an environment template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironmentTemplate {
    _private: (),
}
impl UpdateEnvironmentTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentTemplateInput`](crate::input::UpdateEnvironmentTemplateInput)
    pub fn builder() -> crate::input::update_environment_template_input::Builder {
        crate::input::update_environment_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEnvironmentTemplate {
    type Output = std::result::Result<
        crate::output::UpdateEnvironmentTemplateOutput,
        crate::error::UpdateEnvironmentTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_environment_template_error(response)
        } else {
            crate::operation_deser::parse_update_environment_template_response(response)
        }
    }
}

/// <p>Update a major or minor version of an environment template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironmentTemplateVersion {
    _private: (),
}
impl UpdateEnvironmentTemplateVersion {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentTemplateVersionInput`](crate::input::UpdateEnvironmentTemplateVersionInput)
    pub fn builder() -> crate::input::update_environment_template_version_input::Builder {
        crate::input::update_environment_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateEnvironmentTemplateVersion {
    type Output = std::result::Result<
        crate::output::UpdateEnvironmentTemplateVersionOutput,
        crate::error::UpdateEnvironmentTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_environment_template_version_error(response)
        } else {
            crate::operation_deser::parse_update_environment_template_version_response(response)
        }
    }
}

/// <p>Edit a service description or use a spec to add and delete service instances.</p>
/// <note>
/// <p>Existing service instances and the service pipeline <i>can't</i> be edited using this API. They can only be
/// deleted.</p>
/// </note>
/// <p>Use the <code>description</code> parameter to modify the description.</p>
/// <p>Edit the <code>spec</code> parameter to add or delete instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateService {
    _private: (),
}
impl UpdateService {
    /// Creates a new builder-style object to manufacture [`UpdateServiceInput`](crate::input::UpdateServiceInput)
    pub fn builder() -> crate::input::update_service_input::Builder {
        crate::input::update_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateService {
    type Output =
        std::result::Result<crate::output::UpdateServiceOutput, crate::error::UpdateServiceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_error(response)
        } else {
            crate::operation_deser::parse_update_service_response(response)
        }
    }
}

/// <p>Update a service instance.</p>
/// <p>There are four modes for updating a service instance as described in the following. The <code>deploymentType</code> field defines the
/// mode.</p>
/// <dl>
/// <dt/>
/// <dd>
/// <p>
/// <code>NONE</code>
/// </p>
/// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>CURRENT_VERSION</code>
/// </p>
/// <p>In this mode, the service instance is deployed and updated with the new spec that you provide. Only requested parameters are
/// updated. <i>Don’t</i> include minor or major version parameters when you use this
/// <code>deployment-type</code>.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>MINOR_VERSION</code>
/// </p>
/// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) minor version of the
/// current major version in use, by default. You can also specify a different minor version of the current major version in
/// use.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>MAJOR_VERSION</code>
/// </p>
/// <p>In this mode, the service instance is deployed and updated with the published, recommended (latest) major and minor version
/// of the current template, by default. You can also specify a different major version that is higher than the major version in
/// use and a minor version (optional).</p>
/// </dd>
/// </dl>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceInstance {
    _private: (),
}
impl UpdateServiceInstance {
    /// Creates a new builder-style object to manufacture [`UpdateServiceInstanceInput`](crate::input::UpdateServiceInstanceInput)
    pub fn builder() -> crate::input::update_service_instance_input::Builder {
        crate::input::update_service_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServiceInstance {
    type Output = std::result::Result<
        crate::output::UpdateServiceInstanceOutput,
        crate::error::UpdateServiceInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_instance_error(response)
        } else {
            crate::operation_deser::parse_update_service_instance_response(response)
        }
    }
}

/// <p>Update the service pipeline.</p>
/// <p>There are four modes for updating a service pipeline as described in the following. The <code>deploymentType</code> field defines the
/// mode.</p>
/// <dl>
/// <dt/>
/// <dd>
/// <p>
/// <code>NONE</code>
/// </p>
/// <p>In this mode, a deployment <i>doesn't</i> occur. Only the requested metadata parameters are updated.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>CURRENT_VERSION</code>
/// </p>
/// <p>In this mode, the service pipeline is deployed and updated with the new spec that you provide. Only requested parameters are
/// updated. <i>Don’t</i> include minor or major version parameters when you use this
/// <code>deployment-type</code>.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>MINOR_VERSION</code>
/// </p>
/// <p>In this mode, the service pipeline is deployed and updated with the published, recommended (latest) minor version of the
/// current major version in use, by default. You can also specify a different minor version of the current major version in
/// use.</p>
/// </dd>
/// <dt/>
/// <dd>
/// <p>
/// <code>MAJOR_VERSION</code>
/// </p>
/// <p>In this mode, the service pipeline is deployed and updated with the published, recommended (latest) major and minor version
/// of the current template by default. You can also specify a different major version that is higher than the major version in
/// use and a minor version (optional).</p>
/// </dd>
/// </dl>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServicePipeline {
    _private: (),
}
impl UpdateServicePipeline {
    /// Creates a new builder-style object to manufacture [`UpdateServicePipelineInput`](crate::input::UpdateServicePipelineInput)
    pub fn builder() -> crate::input::update_service_pipeline_input::Builder {
        crate::input::update_service_pipeline_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServicePipeline {
    type Output = std::result::Result<
        crate::output::UpdateServicePipelineOutput,
        crate::error::UpdateServicePipelineError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_pipeline_error(response)
        } else {
            crate::operation_deser::parse_update_service_pipeline_response(response)
        }
    }
}

/// <p>Update a service template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceTemplate {
    _private: (),
}
impl UpdateServiceTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateServiceTemplateInput`](crate::input::UpdateServiceTemplateInput)
    pub fn builder() -> crate::input::update_service_template_input::Builder {
        crate::input::update_service_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServiceTemplate {
    type Output = std::result::Result<
        crate::output::UpdateServiceTemplateOutput,
        crate::error::UpdateServiceTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_template_error(response)
        } else {
            crate::operation_deser::parse_update_service_template_response(response)
        }
    }
}

/// <p>Update a major or minor version of a service template.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateServiceTemplateVersion {
    _private: (),
}
impl UpdateServiceTemplateVersion {
    /// Creates a new builder-style object to manufacture [`UpdateServiceTemplateVersionInput`](crate::input::UpdateServiceTemplateVersionInput)
    pub fn builder() -> crate::input::update_service_template_version_input::Builder {
        crate::input::update_service_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateServiceTemplateVersion {
    type Output = std::result::Result<
        crate::output::UpdateServiceTemplateVersionOutput,
        crate::error::UpdateServiceTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_service_template_version_error(response)
        } else {
            crate::operation_deser::parse_update_service_template_version_response(response)
        }
    }
}
