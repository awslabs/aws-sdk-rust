// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>A summary of the service template version detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceTemplateVersionSummary {
    /// <p>The name of the service template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the latest major version that's associated with the version of a service template.</p>
    pub major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of a service template.</p>
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended minor version of the service template.</p>
    pub recommended_minor_version: std::option::Option<std::string::String>,
    /// <p>The service template minor version status.</p>
    pub status: std::option::Option<crate::model::TemplateVersionStatus>,
    /// <p>A service template minor version status message.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>A description of the version of a service template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the version of a service template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the version of a service template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for ServiceTemplateVersionSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateVersionSummary");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.finish()
    }
}
/// See [`ServiceTemplateVersionSummary`](crate::model::ServiceTemplateVersionSummary)
pub mod service_template_version_summary {
    /// A builder for [`ServiceTemplateVersionSummary`](crate::model::ServiceTemplateVersionSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
        pub(crate) minor_version: std::option::Option<std::string::String>,
        pub(crate) recommended_minor_version: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::TemplateVersionStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The name of the service template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the latest major version that's associated with the version of a service template.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// <p>The ID of the minor version of a service template.</p>
        pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.minor_version = Some(input.into());
            self
        }
        pub fn set_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.minor_version = input;
            self
        }
        /// <p>The ID of the recommended minor version of the service template.</p>
        pub fn recommended_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_minor_version = Some(input.into());
            self
        }
        pub fn set_recommended_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_minor_version = input;
            self
        }
        /// <p>The service template minor version status.</p>
        pub fn status(mut self, input: crate::model::TemplateVersionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TemplateVersionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A service template minor version status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>A description of the version of a service template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the version of a service template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the version of a service template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceTemplateVersionSummary`](crate::model::ServiceTemplateVersionSummary)
        pub fn build(self) -> crate::model::ServiceTemplateVersionSummary {
            crate::model::ServiceTemplateVersionSummary {
                template_name: self.template_name,
                major_version: self.major_version,
                minor_version: self.minor_version,
                recommended_minor_version: self.recommended_minor_version,
                status: self.status,
                status_message: self.status_message,
                description: self.description,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
            }
        }
    }
}
impl ServiceTemplateVersionSummary {
    /// Creates a new builder-style object to manufacture [`ServiceTemplateVersionSummary`](crate::model::ServiceTemplateVersionSummary)
    pub fn builder() -> crate::model::service_template_version_summary::Builder {
        crate::model::service_template_version_summary::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TemplateVersionStatus {
    Draft,
    Published,
    RegistrationFailed,
    RegistrationInProgress,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for TemplateVersionStatus {
    fn from(s: &str) -> Self {
        match s {
            "DRAFT" => TemplateVersionStatus::Draft,
            "PUBLISHED" => TemplateVersionStatus::Published,
            "REGISTRATION_FAILED" => TemplateVersionStatus::RegistrationFailed,
            "REGISTRATION_IN_PROGRESS" => TemplateVersionStatus::RegistrationInProgress,
            other => TemplateVersionStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for TemplateVersionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TemplateVersionStatus::from(s))
    }
}
impl TemplateVersionStatus {
    pub fn as_str(&self) -> &str {
        match self {
            TemplateVersionStatus::Draft => "DRAFT",
            TemplateVersionStatus::Published => "PUBLISHED",
            TemplateVersionStatus::RegistrationFailed => "REGISTRATION_FAILED",
            TemplateVersionStatus::RegistrationInProgress => "REGISTRATION_IN_PROGRESS",
            TemplateVersionStatus::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &[
            "DRAFT",
            "PUBLISHED",
            "REGISTRATION_FAILED",
            "REGISTRATION_IN_PROGRESS",
        ]
    }
}
impl AsRef<str> for TemplateVersionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The version of a service template detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceTemplateVersion {
    /// <p>The name of the version of a service template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the latest major version that's associated with the version of a service template.</p>
    pub major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of a service template.</p>
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended minor version of the service template.</p>
    pub recommended_minor_version: std::option::Option<std::string::String>,
    /// <p>The service template version status.</p>
    pub status: std::option::Option<crate::model::TemplateVersionStatus>,
    /// <p>A service template version status message.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>A description of the version of a service template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the version of a service template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the version of a service template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>An array of compatible environment template names for the major version of a service template.</p>
    pub compatible_environment_templates:
        std::option::Option<std::vec::Vec<crate::model::CompatibleEnvironmentTemplate>>,
    /// <p>The schema of the version of a service template.</p>
    pub schema: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceTemplateVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateVersion");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field(
            "compatible_environment_templates",
            &self.compatible_environment_templates,
        );
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ServiceTemplateVersion`](crate::model::ServiceTemplateVersion)
pub mod service_template_version {
    /// A builder for [`ServiceTemplateVersion`](crate::model::ServiceTemplateVersion)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
        pub(crate) minor_version: std::option::Option<std::string::String>,
        pub(crate) recommended_minor_version: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::TemplateVersionStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) compatible_environment_templates:
            std::option::Option<std::vec::Vec<crate::model::CompatibleEnvironmentTemplate>>,
        pub(crate) schema: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the version of a service template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the latest major version that's associated with the version of a service template.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// <p>The ID of the minor version of a service template.</p>
        pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.minor_version = Some(input.into());
            self
        }
        pub fn set_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.minor_version = input;
            self
        }
        /// <p>The ID of the recommended minor version of the service template.</p>
        pub fn recommended_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_minor_version = Some(input.into());
            self
        }
        pub fn set_recommended_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_minor_version = input;
            self
        }
        /// <p>The service template version status.</p>
        pub fn status(mut self, input: crate::model::TemplateVersionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TemplateVersionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A service template version status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>A description of the version of a service template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the version of a service template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the version of a service template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        pub fn compatible_environment_templates(
            mut self,
            input: impl Into<crate::model::CompatibleEnvironmentTemplate>,
        ) -> Self {
            let mut v = self.compatible_environment_templates.unwrap_or_default();
            v.push(input.into());
            self.compatible_environment_templates = Some(v);
            self
        }
        pub fn set_compatible_environment_templates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CompatibleEnvironmentTemplate>>,
        ) -> Self {
            self.compatible_environment_templates = input;
            self
        }
        /// <p>The schema of the version of a service template.</p>
        pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
            self.schema = Some(input.into());
            self
        }
        pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.schema = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceTemplateVersion`](crate::model::ServiceTemplateVersion)
        pub fn build(self) -> crate::model::ServiceTemplateVersion {
            crate::model::ServiceTemplateVersion {
                template_name: self.template_name,
                major_version: self.major_version,
                minor_version: self.minor_version,
                recommended_minor_version: self.recommended_minor_version,
                status: self.status,
                status_message: self.status_message,
                description: self.description,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                compatible_environment_templates: self.compatible_environment_templates,
                schema: self.schema,
            }
        }
    }
}
impl ServiceTemplateVersion {
    /// Creates a new builder-style object to manufacture [`ServiceTemplateVersion`](crate::model::ServiceTemplateVersion)
    pub fn builder() -> crate::model::service_template_version::Builder {
        crate::model::service_template_version::Builder::default()
    }
}

/// <p>Compatible environment template data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompatibleEnvironmentTemplate {
    /// <p>The compatible environment template name.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The major version of the compatible environment template.</p>
    pub major_version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CompatibleEnvironmentTemplate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CompatibleEnvironmentTemplate");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.finish()
    }
}
/// See [`CompatibleEnvironmentTemplate`](crate::model::CompatibleEnvironmentTemplate)
pub mod compatible_environment_template {
    /// A builder for [`CompatibleEnvironmentTemplate`](crate::model::CompatibleEnvironmentTemplate)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The compatible environment template name.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The major version of the compatible environment template.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// Consumes the builder and constructs a [`CompatibleEnvironmentTemplate`](crate::model::CompatibleEnvironmentTemplate)
        pub fn build(self) -> crate::model::CompatibleEnvironmentTemplate {
            crate::model::CompatibleEnvironmentTemplate {
                template_name: self.template_name,
                major_version: self.major_version,
            }
        }
    }
}
impl CompatibleEnvironmentTemplate {
    /// Creates a new builder-style object to manufacture [`CompatibleEnvironmentTemplate`](crate::model::CompatibleEnvironmentTemplate)
    pub fn builder() -> crate::model::compatible_environment_template::Builder {
        crate::model::compatible_environment_template::Builder::default()
    }
}

/// <p>A description of a resource tag.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Tag {
    /// <p>The key of the resource tag.</p>
    pub key: std::option::Option<std::string::String>,
    /// <p>The value of the resource tag.</p>
    pub value: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Tag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Tag");
        formatter.field("key", &self.key);
        formatter.field("value", &self.value);
        formatter.finish()
    }
}
/// See [`Tag`](crate::model::Tag)
pub mod tag {
    /// A builder for [`Tag`](crate::model::Tag)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The key of the resource tag.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// <p>The value of the resource tag.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// Consumes the builder and constructs a [`Tag`](crate::model::Tag)
        pub fn build(self) -> crate::model::Tag {
            crate::model::Tag {
                key: self.key,
                value: self.value,
            }
        }
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::model::Tag)
    pub fn builder() -> crate::model::tag::Builder {
        crate::model::tag::Builder::default()
    }
}

/// <p>Compatible environment template data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompatibleEnvironmentTemplateInput {
    /// <p>The compatible environment template name.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The major version of the compatible environment template.</p>
    pub major_version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CompatibleEnvironmentTemplateInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CompatibleEnvironmentTemplateInput");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.finish()
    }
}
/// See [`CompatibleEnvironmentTemplateInput`](crate::model::CompatibleEnvironmentTemplateInput)
pub mod compatible_environment_template_input {
    /// A builder for [`CompatibleEnvironmentTemplateInput`](crate::model::CompatibleEnvironmentTemplateInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The compatible environment template name.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The major version of the compatible environment template.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// Consumes the builder and constructs a [`CompatibleEnvironmentTemplateInput`](crate::model::CompatibleEnvironmentTemplateInput)
        pub fn build(self) -> crate::model::CompatibleEnvironmentTemplateInput {
            crate::model::CompatibleEnvironmentTemplateInput {
                template_name: self.template_name,
                major_version: self.major_version,
            }
        }
    }
}
impl CompatibleEnvironmentTemplateInput {
    /// Creates a new builder-style object to manufacture [`CompatibleEnvironmentTemplateInput`](crate::model::CompatibleEnvironmentTemplateInput)
    pub fn builder() -> crate::model::compatible_environment_template_input::Builder {
        crate::model::compatible_environment_template_input::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum TemplateVersionSourceInput {
    /// <p>An S3 source object that includes the template bundle S3 path and name for a template minor version.</p>
    S3(crate::model::S3ObjectSource),
}
impl TemplateVersionSourceInput {
    #[allow(irrefutable_let_patterns)]
    pub fn as_s3(&self) -> Result<&crate::model::S3ObjectSource, &Self> {
        if let TemplateVersionSourceInput::S3(val) = &self {
            Ok(&val)
        } else {
            Err(&self)
        }
    }
    pub fn is_s3(&self) -> bool {
        self.as_s3().is_ok()
    }
}

/// <p>Template bundle S3 bucket data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct S3ObjectSource {
    /// <p>The name of the S3 bucket that contains a template bundle.</p>
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The path to the S3 bucket that contains a template bundle.</p>
    pub key: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for S3ObjectSource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("S3ObjectSource");
        formatter.field("bucket", &self.bucket);
        formatter.field("key", &self.key);
        formatter.finish()
    }
}
/// See [`S3ObjectSource`](crate::model::S3ObjectSource)
pub mod s3_object_source {
    /// A builder for [`S3ObjectSource`](crate::model::S3ObjectSource)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) key: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the S3 bucket that contains a template bundle.</p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p>The path to the S3 bucket that contains a template bundle.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// Consumes the builder and constructs a [`S3ObjectSource`](crate::model::S3ObjectSource)
        pub fn build(self) -> crate::model::S3ObjectSource {
            crate::model::S3ObjectSource {
                bucket: self.bucket,
                key: self.key,
            }
        }
    }
}
impl S3ObjectSource {
    /// Creates a new builder-style object to manufacture [`S3ObjectSource`](crate::model::S3ObjectSource)
    pub fn builder() -> crate::model::s3_object_source::Builder {
        crate::model::s3_object_source::Builder::default()
    }
}

/// <p>The service template summary data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceTemplateSummary {
    /// <p>The name of the service template.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the service template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The service template name as displayed in the developer interface.</p>
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A description of the service template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended version of the service template.</p>
    pub recommended_version: std::option::Option<std::string::String>,
    /// <p>If <code>pipelineProvisioning</code> is <code>true</code>, a service pipeline is included in the service template, otherwise a service
    /// pipeline <i>isn't</i> included in the service template.</p>
    pub pipeline_provisioning: std::option::Option<crate::model::Provisioning>,
}
impl std::fmt::Debug for ServiceTemplateSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateSummary");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("recommended_version", &self.recommended_version);
        formatter.field("pipeline_provisioning", &self.pipeline_provisioning);
        formatter.finish()
    }
}
/// See [`ServiceTemplateSummary`](crate::model::ServiceTemplateSummary)
pub mod service_template_summary {
    /// A builder for [`ServiceTemplateSummary`](crate::model::ServiceTemplateSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) display_name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) recommended_version: std::option::Option<std::string::String>,
        pub(crate) pipeline_provisioning: std::option::Option<crate::model::Provisioning>,
    }
    impl Builder {
        /// <p>The name of the service template.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the service template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the service template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The service template name as displayed in the developer interface.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.display_name = Some(input.into());
            self
        }
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.display_name = input;
            self
        }
        /// <p>A description of the service template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ID of the recommended version of the service template.</p>
        pub fn recommended_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_version = Some(input.into());
            self
        }
        pub fn set_recommended_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_version = input;
            self
        }
        /// <p>If <code>pipelineProvisioning</code> is <code>true</code>, a service pipeline is included in the service template, otherwise a service
        /// pipeline <i>isn't</i> included in the service template.</p>
        pub fn pipeline_provisioning(mut self, input: crate::model::Provisioning) -> Self {
            self.pipeline_provisioning = Some(input);
            self
        }
        pub fn set_pipeline_provisioning(
            mut self,
            input: std::option::Option<crate::model::Provisioning>,
        ) -> Self {
            self.pipeline_provisioning = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceTemplateSummary`](crate::model::ServiceTemplateSummary)
        pub fn build(self) -> crate::model::ServiceTemplateSummary {
            crate::model::ServiceTemplateSummary {
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                display_name: self.display_name,
                description: self.description,
                recommended_version: self.recommended_version,
                pipeline_provisioning: self.pipeline_provisioning,
            }
        }
    }
}
impl ServiceTemplateSummary {
    /// Creates a new builder-style object to manufacture [`ServiceTemplateSummary`](crate::model::ServiceTemplateSummary)
    pub fn builder() -> crate::model::service_template_summary::Builder {
        crate::model::service_template_summary::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Provisioning {
    CustomerManaged,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for Provisioning {
    fn from(s: &str) -> Self {
        match s {
            "CUSTOMER_MANAGED" => Provisioning::CustomerManaged,
            other => Provisioning::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for Provisioning {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Provisioning::from(s))
    }
}
impl Provisioning {
    pub fn as_str(&self) -> &str {
        match self {
            Provisioning::CustomerManaged => "CUSTOMER_MANAGED",
            Provisioning::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["CUSTOMER_MANAGED"]
    }
}
impl AsRef<str> for Provisioning {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The service template detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceTemplate {
    /// <p>The name of the service template.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the service template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The service template name as displayed in the developer interface.</p>
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A description of the service template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended version of the service template.</p>
    pub recommended_version: std::option::Option<std::string::String>,
    /// <p>The customer provided service template encryption key that's used to encrypt data.</p>
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>If <code>pipelineProvisioning</code> is <code>true</code>, a service pipeline is included in the service template. Otherwise, a service
    /// pipeline <i>isn't</i> included in the service template.</p>
    pub pipeline_provisioning: std::option::Option<crate::model::Provisioning>,
}
impl std::fmt::Debug for ServiceTemplate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplate");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("recommended_version", &self.recommended_version);
        formatter.field("encryption_key", &self.encryption_key);
        formatter.field("pipeline_provisioning", &self.pipeline_provisioning);
        formatter.finish()
    }
}
/// See [`ServiceTemplate`](crate::model::ServiceTemplate)
pub mod service_template {
    /// A builder for [`ServiceTemplate`](crate::model::ServiceTemplate)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) display_name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) recommended_version: std::option::Option<std::string::String>,
        pub(crate) encryption_key: std::option::Option<std::string::String>,
        pub(crate) pipeline_provisioning: std::option::Option<crate::model::Provisioning>,
    }
    impl Builder {
        /// <p>The name of the service template.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the service template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the service template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The service template name as displayed in the developer interface.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.display_name = Some(input.into());
            self
        }
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.display_name = input;
            self
        }
        /// <p>A description of the service template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ID of the recommended version of the service template.</p>
        pub fn recommended_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_version = Some(input.into());
            self
        }
        pub fn set_recommended_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_version = input;
            self
        }
        /// <p>The customer provided service template encryption key that's used to encrypt data.</p>
        pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.encryption_key = Some(input.into());
            self
        }
        pub fn set_encryption_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_key = input;
            self
        }
        /// <p>If <code>pipelineProvisioning</code> is <code>true</code>, a service pipeline is included in the service template. Otherwise, a service
        /// pipeline <i>isn't</i> included in the service template.</p>
        pub fn pipeline_provisioning(mut self, input: crate::model::Provisioning) -> Self {
            self.pipeline_provisioning = Some(input);
            self
        }
        pub fn set_pipeline_provisioning(
            mut self,
            input: std::option::Option<crate::model::Provisioning>,
        ) -> Self {
            self.pipeline_provisioning = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceTemplate`](crate::model::ServiceTemplate)
        pub fn build(self) -> crate::model::ServiceTemplate {
            crate::model::ServiceTemplate {
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                display_name: self.display_name,
                description: self.description,
                recommended_version: self.recommended_version,
                encryption_key: self.encryption_key,
                pipeline_provisioning: self.pipeline_provisioning,
            }
        }
    }
}
impl ServiceTemplate {
    /// Creates a new builder-style object to manufacture [`ServiceTemplate`](crate::model::ServiceTemplate)
    pub fn builder() -> crate::model::service_template::Builder {
        crate::model::service_template::Builder::default()
    }
}

/// <p>A summary of the service detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceSummary {
    /// <p>The name of the service.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the service.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the service template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The time when the service was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The status of the service.</p>
    pub status: std::option::Option<crate::model::ServiceStatus>,
    /// <p>A service status message.</p>
    pub status_message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceSummary");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("template_name", &self.template_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ServiceSummary`](crate::model::ServiceSummary)
pub mod service_summary {
    /// A builder for [`ServiceSummary`](crate::model::ServiceSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<crate::model::ServiceStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the service.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>A description of the service.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the service template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The time when the service was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the service was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The status of the service.</p>
        pub fn status(mut self, input: crate::model::ServiceStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ServiceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A service status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceSummary`](crate::model::ServiceSummary)
        pub fn build(self) -> crate::model::ServiceSummary {
            crate::model::ServiceSummary {
                name: self.name,
                description: self.description,
                arn: self.arn,
                template_name: self.template_name,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                status: self.status,
                status_message: self.status_message,
            }
        }
    }
}
impl ServiceSummary {
    /// Creates a new builder-style object to manufacture [`ServiceSummary`](crate::model::ServiceSummary)
    pub fn builder() -> crate::model::service_summary::Builder {
        crate::model::service_summary::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ServiceStatus {
    Active,
    CreateFailed,
    CreateFailedCleanupComplete,
    CreateFailedCleanupFailed,
    CreateFailedCleanupInProgress,
    CreateInProgress,
    DeleteFailed,
    DeleteInProgress,
    UpdateCompleteCleanupFailed,
    UpdateFailed,
    UpdateFailedCleanupComplete,
    UpdateFailedCleanupFailed,
    UpdateFailedCleanupInProgress,
    UpdateInProgress,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for ServiceStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVE" => ServiceStatus::Active,
            "CREATE_FAILED" => ServiceStatus::CreateFailed,
            "CREATE_FAILED_CLEANUP_COMPLETE" => ServiceStatus::CreateFailedCleanupComplete,
            "CREATE_FAILED_CLEANUP_FAILED" => ServiceStatus::CreateFailedCleanupFailed,
            "CREATE_FAILED_CLEANUP_IN_PROGRESS" => ServiceStatus::CreateFailedCleanupInProgress,
            "CREATE_IN_PROGRESS" => ServiceStatus::CreateInProgress,
            "DELETE_FAILED" => ServiceStatus::DeleteFailed,
            "DELETE_IN_PROGRESS" => ServiceStatus::DeleteInProgress,
            "UPDATE_COMPLETE_CLEANUP_FAILED" => ServiceStatus::UpdateCompleteCleanupFailed,
            "UPDATE_FAILED" => ServiceStatus::UpdateFailed,
            "UPDATE_FAILED_CLEANUP_COMPLETE" => ServiceStatus::UpdateFailedCleanupComplete,
            "UPDATE_FAILED_CLEANUP_FAILED" => ServiceStatus::UpdateFailedCleanupFailed,
            "UPDATE_FAILED_CLEANUP_IN_PROGRESS" => ServiceStatus::UpdateFailedCleanupInProgress,
            "UPDATE_IN_PROGRESS" => ServiceStatus::UpdateInProgress,
            other => ServiceStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for ServiceStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ServiceStatus::from(s))
    }
}
impl ServiceStatus {
    pub fn as_str(&self) -> &str {
        match self {
            ServiceStatus::Active => "ACTIVE",
            ServiceStatus::CreateFailed => "CREATE_FAILED",
            ServiceStatus::CreateFailedCleanupComplete => "CREATE_FAILED_CLEANUP_COMPLETE",
            ServiceStatus::CreateFailedCleanupFailed => "CREATE_FAILED_CLEANUP_FAILED",
            ServiceStatus::CreateFailedCleanupInProgress => "CREATE_FAILED_CLEANUP_IN_PROGRESS",
            ServiceStatus::CreateInProgress => "CREATE_IN_PROGRESS",
            ServiceStatus::DeleteFailed => "DELETE_FAILED",
            ServiceStatus::DeleteInProgress => "DELETE_IN_PROGRESS",
            ServiceStatus::UpdateCompleteCleanupFailed => "UPDATE_COMPLETE_CLEANUP_FAILED",
            ServiceStatus::UpdateFailed => "UPDATE_FAILED",
            ServiceStatus::UpdateFailedCleanupComplete => "UPDATE_FAILED_CLEANUP_COMPLETE",
            ServiceStatus::UpdateFailedCleanupFailed => "UPDATE_FAILED_CLEANUP_FAILED",
            ServiceStatus::UpdateFailedCleanupInProgress => "UPDATE_FAILED_CLEANUP_IN_PROGRESS",
            ServiceStatus::UpdateInProgress => "UPDATE_IN_PROGRESS",
            ServiceStatus::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &[
            "ACTIVE",
            "CREATE_FAILED",
            "CREATE_FAILED_CLEANUP_COMPLETE",
            "CREATE_FAILED_CLEANUP_FAILED",
            "CREATE_FAILED_CLEANUP_IN_PROGRESS",
            "CREATE_IN_PROGRESS",
            "DELETE_FAILED",
            "DELETE_IN_PROGRESS",
            "UPDATE_COMPLETE_CLEANUP_FAILED",
            "UPDATE_FAILED",
            "UPDATE_FAILED_CLEANUP_COMPLETE",
            "UPDATE_FAILED_CLEANUP_FAILED",
            "UPDATE_FAILED_CLEANUP_IN_PROGRESS",
            "UPDATE_IN_PROGRESS",
        ]
    }
}
impl AsRef<str> for ServiceStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The service detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Service {
    /// <p>The name of the service.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of a service.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the service template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The time when the service was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The status of the service.</p>
    pub status: std::option::Option<crate::model::ServiceStatus>,
    /// <p>A service status message.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The formatted specification that defines the service.</p>
    pub spec: std::option::Option<std::string::String>,
    /// <p>The service pipeline detail data.</p>
    pub pipeline: std::option::Option<crate::model::ServicePipeline>,
    /// <p>The ARN of the repository connection. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/setting-up-for-service.html#setting-up-vcontrol">Set up a repository connection</a> in the
    /// <i>AWS Proton Administration Guide</i> and <a href="https://docs.aws.amazon.com/proton/latest/userguide/ug-getting-started.html#getting-started-step1">Getting started</a> in the <i>AWS Proton User
    /// Guide</i>.</p>
    pub repository_connection_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the code repository.</p>
    pub repository_id: std::option::Option<std::string::String>,
    /// <p>The name of the code repository branch that holds the code that's deployed in AWS Proton.</p>
    pub branch_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for Service {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Service");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("template_name", &self.template_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("pipeline", &self.pipeline);
        formatter.field("repository_connection_arn", &self.repository_connection_arn);
        formatter.field("repository_id", &self.repository_id);
        formatter.field("branch_name", &self.branch_name);
        formatter.finish()
    }
}
/// See [`Service`](crate::model::Service)
pub mod service {
    /// A builder for [`Service`](crate::model::Service)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<crate::model::ServiceStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) spec: std::option::Option<std::string::String>,
        pub(crate) pipeline: std::option::Option<crate::model::ServicePipeline>,
        pub(crate) repository_connection_arn: std::option::Option<std::string::String>,
        pub(crate) repository_id: std::option::Option<std::string::String>,
        pub(crate) branch_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the service.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>A description of a service.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the service template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The time when the service was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the service was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The status of the service.</p>
        pub fn status(mut self, input: crate::model::ServiceStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ServiceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A service status message.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The formatted specification that defines the service.</p>
        pub fn spec(mut self, input: impl Into<std::string::String>) -> Self {
            self.spec = Some(input.into());
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.spec = input;
            self
        }
        /// <p>The service pipeline detail data.</p>
        pub fn pipeline(mut self, input: crate::model::ServicePipeline) -> Self {
            self.pipeline = Some(input);
            self
        }
        pub fn set_pipeline(
            mut self,
            input: std::option::Option<crate::model::ServicePipeline>,
        ) -> Self {
            self.pipeline = input;
            self
        }
        /// <p>The ARN of the repository connection. For more information, see <a href="https://docs.aws.amazon.com/proton/latest/adminguide/setting-up-for-service.html#setting-up-vcontrol">Set up a repository connection</a> in the
        /// <i>AWS Proton Administration Guide</i> and <a href="https://docs.aws.amazon.com/proton/latest/userguide/ug-getting-started.html#getting-started-step1">Getting started</a> in the <i>AWS Proton User
        /// Guide</i>.</p>
        pub fn repository_connection_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.repository_connection_arn = Some(input.into());
            self
        }
        pub fn set_repository_connection_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.repository_connection_arn = input;
            self
        }
        /// <p>The ID of the code repository.</p>
        pub fn repository_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.repository_id = Some(input.into());
            self
        }
        pub fn set_repository_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.repository_id = input;
            self
        }
        /// <p>The name of the code repository branch that holds the code that's deployed in AWS Proton.</p>
        pub fn branch_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.branch_name = Some(input.into());
            self
        }
        pub fn set_branch_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.branch_name = input;
            self
        }
        /// Consumes the builder and constructs a [`Service`](crate::model::Service)
        pub fn build(self) -> crate::model::Service {
            crate::model::Service {
                name: self.name,
                description: self.description,
                arn: self.arn,
                template_name: self.template_name,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                status: self.status,
                status_message: self.status_message,
                spec: self.spec,
                pipeline: self.pipeline,
                repository_connection_arn: self.repository_connection_arn,
                repository_id: self.repository_id,
                branch_name: self.branch_name,
            }
        }
    }
}
impl Service {
    /// Creates a new builder-style object to manufacture [`Service`](crate::model::Service)
    pub fn builder() -> crate::model::service::Builder {
        crate::model::service::Builder::default()
    }
}

/// <p>The service pipeline detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServicePipeline {
    /// <p>The Amazon Resource Name (ARN) of the service pipeline.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the service pipeline was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when a deployment of the service pipeline was last attempted.</p>
    pub last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service pipeline was last deployed successfully.</p>
    pub last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
    /// <p>The name of the service template that was used to create the service pipeline.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the major version of the service template that was used to create the service pipeline.</p>
    pub template_major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of the service template that was used to create the service pipeline.</p>
    pub template_minor_version: std::option::Option<std::string::String>,
    /// <p>The deployment status of the service pipeline.</p>
    pub deployment_status: std::option::Option<crate::model::DeploymentStatus>,
    /// <p>A service pipeline deployment status message.</p>
    pub deployment_status_message: std::option::Option<std::string::String>,
    /// <p>The service spec that was used to create the service pipeline.</p>
    pub spec: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServicePipeline {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServicePipeline");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field(
            "last_deployment_attempted_at",
            &self.last_deployment_attempted_at,
        );
        formatter.field(
            "last_deployment_succeeded_at",
            &self.last_deployment_succeeded_at,
        );
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field(
            "deployment_status_message",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ServicePipeline`](crate::model::ServicePipeline)
pub mod service_pipeline {
    /// A builder for [`ServicePipeline`](crate::model::ServicePipeline)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) template_major_version: std::option::Option<std::string::String>,
        pub(crate) template_minor_version: std::option::Option<std::string::String>,
        pub(crate) deployment_status: std::option::Option<crate::model::DeploymentStatus>,
        pub(crate) deployment_status_message: std::option::Option<std::string::String>,
        pub(crate) spec: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the service pipeline.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the service pipeline was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when a deployment of the service pipeline was last attempted.</p>
        pub fn last_deployment_attempted_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_attempted_at = Some(input);
            self
        }
        pub fn set_last_deployment_attempted_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_attempted_at = input;
            self
        }
        /// <p>The time when the service pipeline was last deployed successfully.</p>
        pub fn last_deployment_succeeded_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_succeeded_at = Some(input);
            self
        }
        pub fn set_last_deployment_succeeded_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_succeeded_at = input;
            self
        }
        /// <p>The name of the service template that was used to create the service pipeline.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the major version of the service template that was used to create the service pipeline.</p>
        pub fn template_major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_major_version = Some(input.into());
            self
        }
        pub fn set_template_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_major_version = input;
            self
        }
        /// <p>The ID of the minor version of the service template that was used to create the service pipeline.</p>
        pub fn template_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_minor_version = Some(input.into());
            self
        }
        pub fn set_template_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_minor_version = input;
            self
        }
        /// <p>The deployment status of the service pipeline.</p>
        pub fn deployment_status(mut self, input: crate::model::DeploymentStatus) -> Self {
            self.deployment_status = Some(input);
            self
        }
        pub fn set_deployment_status(
            mut self,
            input: std::option::Option<crate::model::DeploymentStatus>,
        ) -> Self {
            self.deployment_status = input;
            self
        }
        /// <p>A service pipeline deployment status message.</p>
        pub fn deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.deployment_status_message = Some(input.into());
            self
        }
        pub fn set_deployment_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.deployment_status_message = input;
            self
        }
        /// <p>The service spec that was used to create the service pipeline.</p>
        pub fn spec(mut self, input: impl Into<std::string::String>) -> Self {
            self.spec = Some(input.into());
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.spec = input;
            self
        }
        /// Consumes the builder and constructs a [`ServicePipeline`](crate::model::ServicePipeline)
        pub fn build(self) -> crate::model::ServicePipeline {
            crate::model::ServicePipeline {
                arn: self.arn,
                created_at: self.created_at,
                last_deployment_attempted_at: self.last_deployment_attempted_at,
                last_deployment_succeeded_at: self.last_deployment_succeeded_at,
                template_name: self.template_name,
                template_major_version: self.template_major_version,
                template_minor_version: self.template_minor_version,
                deployment_status: self.deployment_status,
                deployment_status_message: self.deployment_status_message,
                spec: self.spec,
            }
        }
    }
}
impl ServicePipeline {
    /// Creates a new builder-style object to manufacture [`ServicePipeline`](crate::model::ServicePipeline)
    pub fn builder() -> crate::model::service_pipeline::Builder {
        crate::model::service_pipeline::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DeploymentStatus {
    Cancelled,
    Cancelling,
    DeleteComplete,
    DeleteFailed,
    DeleteInProgress,
    Failed,
    InProgress,
    Succeeded,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for DeploymentStatus {
    fn from(s: &str) -> Self {
        match s {
            "CANCELLED" => DeploymentStatus::Cancelled,
            "CANCELLING" => DeploymentStatus::Cancelling,
            "DELETE_COMPLETE" => DeploymentStatus::DeleteComplete,
            "DELETE_FAILED" => DeploymentStatus::DeleteFailed,
            "DELETE_IN_PROGRESS" => DeploymentStatus::DeleteInProgress,
            "FAILED" => DeploymentStatus::Failed,
            "IN_PROGRESS" => DeploymentStatus::InProgress,
            "SUCCEEDED" => DeploymentStatus::Succeeded,
            other => DeploymentStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for DeploymentStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DeploymentStatus::from(s))
    }
}
impl DeploymentStatus {
    pub fn as_str(&self) -> &str {
        match self {
            DeploymentStatus::Cancelled => "CANCELLED",
            DeploymentStatus::Cancelling => "CANCELLING",
            DeploymentStatus::DeleteComplete => "DELETE_COMPLETE",
            DeploymentStatus::DeleteFailed => "DELETE_FAILED",
            DeploymentStatus::DeleteInProgress => "DELETE_IN_PROGRESS",
            DeploymentStatus::Failed => "FAILED",
            DeploymentStatus::InProgress => "IN_PROGRESS",
            DeploymentStatus::Succeeded => "SUCCEEDED",
            DeploymentStatus::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &[
            "CANCELLED",
            "CANCELLING",
            "DELETE_COMPLETE",
            "DELETE_FAILED",
            "DELETE_IN_PROGRESS",
            "FAILED",
            "IN_PROGRESS",
            "SUCCEEDED",
        ]
    }
}
impl AsRef<str> for DeploymentStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DeploymentUpdateType {
    CurrentVersion,
    MajorVersion,
    MinorVersion,
    None,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for DeploymentUpdateType {
    fn from(s: &str) -> Self {
        match s {
            "CURRENT_VERSION" => DeploymentUpdateType::CurrentVersion,
            "MAJOR_VERSION" => DeploymentUpdateType::MajorVersion,
            "MINOR_VERSION" => DeploymentUpdateType::MinorVersion,
            "NONE" => DeploymentUpdateType::None,
            other => DeploymentUpdateType::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for DeploymentUpdateType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DeploymentUpdateType::from(s))
    }
}
impl DeploymentUpdateType {
    pub fn as_str(&self) -> &str {
        match self {
            DeploymentUpdateType::CurrentVersion => "CURRENT_VERSION",
            DeploymentUpdateType::MajorVersion => "MAJOR_VERSION",
            DeploymentUpdateType::MinorVersion => "MINOR_VERSION",
            DeploymentUpdateType::None => "NONE",
            DeploymentUpdateType::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["CURRENT_VERSION", "MAJOR_VERSION", "MINOR_VERSION", "NONE"]
    }
}
impl AsRef<str> for DeploymentUpdateType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A summary of the service instance detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceInstanceSummary {
    /// <p>The name of the service instance.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service instance.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the service instance was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when a deployment of the service was last attempted.</p>
    pub last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service was last deployed successfully.</p>
    pub last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
    /// <p>The name of the service that the service instance belongs to.</p>
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The name of the environment that the service instance was deployed into.</p>
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The name of the service template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the major version of a service template.</p>
    pub template_major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of a service template.</p>
    pub template_minor_version: std::option::Option<std::string::String>,
    /// <p>The service instance deployment status.</p>
    pub deployment_status: std::option::Option<crate::model::DeploymentStatus>,
    /// <p>A service instance deployment status message.</p>
    pub deployment_status_message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceInstanceSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceInstanceSummary");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field(
            "last_deployment_attempted_at",
            &self.last_deployment_attempted_at,
        );
        formatter.field(
            "last_deployment_succeeded_at",
            &self.last_deployment_succeeded_at,
        );
        formatter.field("service_name", &self.service_name);
        formatter.field("environment_name", &self.environment_name);
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field(
            "deployment_status_message",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
/// See [`ServiceInstanceSummary`](crate::model::ServiceInstanceSummary)
pub mod service_instance_summary {
    /// A builder for [`ServiceInstanceSummary`](crate::model::ServiceInstanceSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
        pub(crate) service_name: std::option::Option<std::string::String>,
        pub(crate) environment_name: std::option::Option<std::string::String>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) template_major_version: std::option::Option<std::string::String>,
        pub(crate) template_minor_version: std::option::Option<std::string::String>,
        pub(crate) deployment_status: std::option::Option<crate::model::DeploymentStatus>,
        pub(crate) deployment_status_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the service instance.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service instance.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the service instance was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when a deployment of the service was last attempted.</p>
        pub fn last_deployment_attempted_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_attempted_at = Some(input);
            self
        }
        pub fn set_last_deployment_attempted_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_attempted_at = input;
            self
        }
        /// <p>The time when the service was last deployed successfully.</p>
        pub fn last_deployment_succeeded_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_succeeded_at = Some(input);
            self
        }
        pub fn set_last_deployment_succeeded_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_succeeded_at = input;
            self
        }
        /// <p>The name of the service that the service instance belongs to.</p>
        pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_name = Some(input.into());
            self
        }
        pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_name = input;
            self
        }
        /// <p>The name of the environment that the service instance was deployed into.</p>
        pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_name = Some(input.into());
            self
        }
        pub fn set_environment_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_name = input;
            self
        }
        /// <p>The name of the service template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the major version of a service template.</p>
        pub fn template_major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_major_version = Some(input.into());
            self
        }
        pub fn set_template_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_major_version = input;
            self
        }
        /// <p>The ID of the minor version of a service template.</p>
        pub fn template_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_minor_version = Some(input.into());
            self
        }
        pub fn set_template_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_minor_version = input;
            self
        }
        /// <p>The service instance deployment status.</p>
        pub fn deployment_status(mut self, input: crate::model::DeploymentStatus) -> Self {
            self.deployment_status = Some(input);
            self
        }
        pub fn set_deployment_status(
            mut self,
            input: std::option::Option<crate::model::DeploymentStatus>,
        ) -> Self {
            self.deployment_status = input;
            self
        }
        /// <p>A service instance deployment status message.</p>
        pub fn deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.deployment_status_message = Some(input.into());
            self
        }
        pub fn set_deployment_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.deployment_status_message = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceInstanceSummary`](crate::model::ServiceInstanceSummary)
        pub fn build(self) -> crate::model::ServiceInstanceSummary {
            crate::model::ServiceInstanceSummary {
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                last_deployment_attempted_at: self.last_deployment_attempted_at,
                last_deployment_succeeded_at: self.last_deployment_succeeded_at,
                service_name: self.service_name,
                environment_name: self.environment_name,
                template_name: self.template_name,
                template_major_version: self.template_major_version,
                template_minor_version: self.template_minor_version,
                deployment_status: self.deployment_status,
                deployment_status_message: self.deployment_status_message,
            }
        }
    }
}
impl ServiceInstanceSummary {
    /// Creates a new builder-style object to manufacture [`ServiceInstanceSummary`](crate::model::ServiceInstanceSummary)
    pub fn builder() -> crate::model::service_instance_summary::Builder {
        crate::model::service_instance_summary::Builder::default()
    }
}

/// <p>The service instance detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceInstance {
    /// <p>The name of the service instance.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service instance.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the service instance was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when a deployment of the service instance was last attempted.</p>
    pub last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the service instance was last deployed successfully.</p>
    pub last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
    /// <p>The name of the service that the service instance belongs to.</p>
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The name of the environment that the service instance was deployed into.</p>
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The name of the service template that was used to create the service instance.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the major version of the service template that was used to create the service instance.</p>
    pub template_major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of the service template that was used to create the service instance.</p>
    pub template_minor_version: std::option::Option<std::string::String>,
    /// <p>The service instance deployment status.</p>
    pub deployment_status: std::option::Option<crate::model::DeploymentStatus>,
    /// <p>A service instance deployment status message.</p>
    pub deployment_status_message: std::option::Option<std::string::String>,
    /// <p>The service spec that was used to create the service instance.</p>
    pub spec: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceInstance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceInstance");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field(
            "last_deployment_attempted_at",
            &self.last_deployment_attempted_at,
        );
        formatter.field(
            "last_deployment_succeeded_at",
            &self.last_deployment_succeeded_at,
        );
        formatter.field("service_name", &self.service_name);
        formatter.field("environment_name", &self.environment_name);
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field(
            "deployment_status_message",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`ServiceInstance`](crate::model::ServiceInstance)
pub mod service_instance {
    /// A builder for [`ServiceInstance`](crate::model::ServiceInstance)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
        pub(crate) service_name: std::option::Option<std::string::String>,
        pub(crate) environment_name: std::option::Option<std::string::String>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) template_major_version: std::option::Option<std::string::String>,
        pub(crate) template_minor_version: std::option::Option<std::string::String>,
        pub(crate) deployment_status: std::option::Option<crate::model::DeploymentStatus>,
        pub(crate) deployment_status_message: std::option::Option<std::string::String>,
        pub(crate) spec: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the service instance.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service instance.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the service instance was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when a deployment of the service instance was last attempted.</p>
        pub fn last_deployment_attempted_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_attempted_at = Some(input);
            self
        }
        pub fn set_last_deployment_attempted_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_attempted_at = input;
            self
        }
        /// <p>The time when the service instance was last deployed successfully.</p>
        pub fn last_deployment_succeeded_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_succeeded_at = Some(input);
            self
        }
        pub fn set_last_deployment_succeeded_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_succeeded_at = input;
            self
        }
        /// <p>The name of the service that the service instance belongs to.</p>
        pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_name = Some(input.into());
            self
        }
        pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_name = input;
            self
        }
        /// <p>The name of the environment that the service instance was deployed into.</p>
        pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_name = Some(input.into());
            self
        }
        pub fn set_environment_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_name = input;
            self
        }
        /// <p>The name of the service template that was used to create the service instance.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the major version of the service template that was used to create the service instance.</p>
        pub fn template_major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_major_version = Some(input.into());
            self
        }
        pub fn set_template_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_major_version = input;
            self
        }
        /// <p>The ID of the minor version of the service template that was used to create the service instance.</p>
        pub fn template_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_minor_version = Some(input.into());
            self
        }
        pub fn set_template_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_minor_version = input;
            self
        }
        /// <p>The service instance deployment status.</p>
        pub fn deployment_status(mut self, input: crate::model::DeploymentStatus) -> Self {
            self.deployment_status = Some(input);
            self
        }
        pub fn set_deployment_status(
            mut self,
            input: std::option::Option<crate::model::DeploymentStatus>,
        ) -> Self {
            self.deployment_status = input;
            self
        }
        /// <p>A service instance deployment status message.</p>
        pub fn deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.deployment_status_message = Some(input.into());
            self
        }
        pub fn set_deployment_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.deployment_status_message = input;
            self
        }
        /// <p>The service spec that was used to create the service instance.</p>
        pub fn spec(mut self, input: impl Into<std::string::String>) -> Self {
            self.spec = Some(input.into());
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.spec = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceInstance`](crate::model::ServiceInstance)
        pub fn build(self) -> crate::model::ServiceInstance {
            crate::model::ServiceInstance {
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                last_deployment_attempted_at: self.last_deployment_attempted_at,
                last_deployment_succeeded_at: self.last_deployment_succeeded_at,
                service_name: self.service_name,
                environment_name: self.environment_name,
                template_name: self.template_name,
                template_major_version: self.template_major_version,
                template_minor_version: self.template_minor_version,
                deployment_status: self.deployment_status,
                deployment_status_message: self.deployment_status_message,
                spec: self.spec,
            }
        }
    }
}
impl ServiceInstance {
    /// Creates a new builder-style object to manufacture [`ServiceInstance`](crate::model::ServiceInstance)
    pub fn builder() -> crate::model::service_instance::Builder {
        crate::model::service_instance::Builder::default()
    }
}

/// <p>A summary of the version of an environment template detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentTemplateVersionSummary {
    /// <p>The name of the version of an environment template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the latest major version that's associated with the version of an environment template.</p>
    pub major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the version of an environment template.</p>
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended minor version of the environment template.</p>
    pub recommended_minor_version: std::option::Option<std::string::String>,
    /// <p>The status of the version of an environment template.</p>
    pub status: std::option::Option<crate::model::TemplateVersionStatus>,
    /// <p>The status message of the version of an environment template.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>A description of the version of an environment template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the version of an environment template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the version of an environment template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the version of an environment template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for EnvironmentTemplateVersionSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplateVersionSummary");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.finish()
    }
}
/// See [`EnvironmentTemplateVersionSummary`](crate::model::EnvironmentTemplateVersionSummary)
pub mod environment_template_version_summary {
    /// A builder for [`EnvironmentTemplateVersionSummary`](crate::model::EnvironmentTemplateVersionSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
        pub(crate) minor_version: std::option::Option<std::string::String>,
        pub(crate) recommended_minor_version: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::TemplateVersionStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The name of the version of an environment template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the latest major version that's associated with the version of an environment template.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// <p>The ID of the version of an environment template.</p>
        pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.minor_version = Some(input.into());
            self
        }
        pub fn set_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.minor_version = input;
            self
        }
        /// <p>The ID of the recommended minor version of the environment template.</p>
        pub fn recommended_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_minor_version = Some(input.into());
            self
        }
        pub fn set_recommended_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_minor_version = input;
            self
        }
        /// <p>The status of the version of an environment template.</p>
        pub fn status(mut self, input: crate::model::TemplateVersionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TemplateVersionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The status message of the version of an environment template.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>A description of the version of an environment template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the version of an environment template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the version of an environment template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the version of an environment template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentTemplateVersionSummary`](crate::model::EnvironmentTemplateVersionSummary)
        pub fn build(self) -> crate::model::EnvironmentTemplateVersionSummary {
            crate::model::EnvironmentTemplateVersionSummary {
                template_name: self.template_name,
                major_version: self.major_version,
                minor_version: self.minor_version,
                recommended_minor_version: self.recommended_minor_version,
                status: self.status,
                status_message: self.status_message,
                description: self.description,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
            }
        }
    }
}
impl EnvironmentTemplateVersionSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplateVersionSummary`](crate::model::EnvironmentTemplateVersionSummary)
    pub fn builder() -> crate::model::environment_template_version_summary::Builder {
        crate::model::environment_template_version_summary::Builder::default()
    }
}

/// <p>The environment template version data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentTemplateVersion {
    /// <p>The name of the version of an environment template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the latest major version that's associated with the version of an environment template.</p>
    pub major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of an environment template.</p>
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended minor version of the environment template.</p>
    pub recommended_minor_version: std::option::Option<std::string::String>,
    /// <p>The status of the version of an environment template.</p>
    pub status: std::option::Option<crate::model::TemplateVersionStatus>,
    /// <p>The status message of the version of an environment template.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>A description of the minor version of an environment template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the version of an environment template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the version of an environment template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the version of an environment template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The schema of the version of an environment template.</p>
    pub schema: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EnvironmentTemplateVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplateVersion");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
/// See [`EnvironmentTemplateVersion`](crate::model::EnvironmentTemplateVersion)
pub mod environment_template_version {
    /// A builder for [`EnvironmentTemplateVersion`](crate::model::EnvironmentTemplateVersion)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
        pub(crate) minor_version: std::option::Option<std::string::String>,
        pub(crate) recommended_minor_version: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::TemplateVersionStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) schema: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the version of an environment template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the latest major version that's associated with the version of an environment template.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// <p>The ID of the minor version of an environment template.</p>
        pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.minor_version = Some(input.into());
            self
        }
        pub fn set_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.minor_version = input;
            self
        }
        /// <p>The ID of the recommended minor version of the environment template.</p>
        pub fn recommended_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_minor_version = Some(input.into());
            self
        }
        pub fn set_recommended_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_minor_version = input;
            self
        }
        /// <p>The status of the version of an environment template.</p>
        pub fn status(mut self, input: crate::model::TemplateVersionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::TemplateVersionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The status message of the version of an environment template.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>A description of the minor version of an environment template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the version of an environment template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the version of an environment template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the version of an environment template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The schema of the version of an environment template.</p>
        pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
            self.schema = Some(input.into());
            self
        }
        pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.schema = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentTemplateVersion`](crate::model::EnvironmentTemplateVersion)
        pub fn build(self) -> crate::model::EnvironmentTemplateVersion {
            crate::model::EnvironmentTemplateVersion {
                template_name: self.template_name,
                major_version: self.major_version,
                minor_version: self.minor_version,
                recommended_minor_version: self.recommended_minor_version,
                status: self.status,
                status_message: self.status_message,
                description: self.description,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                schema: self.schema,
            }
        }
    }
}
impl EnvironmentTemplateVersion {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplateVersion`](crate::model::EnvironmentTemplateVersion)
    pub fn builder() -> crate::model::environment_template_version::Builder {
        crate::model::environment_template_version::Builder::default()
    }
}

/// <p>The environment template data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentTemplateSummary {
    /// <p>The name of the environment template.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the environment template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the environment template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A description of the environment template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended version of the environment template.</p>
    pub recommended_version: std::option::Option<std::string::String>,
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub provisioning: std::option::Option<crate::model::Provisioning>,
}
impl std::fmt::Debug for EnvironmentTemplateSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplateSummary");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("recommended_version", &self.recommended_version);
        formatter.field("provisioning", &self.provisioning);
        formatter.finish()
    }
}
/// See [`EnvironmentTemplateSummary`](crate::model::EnvironmentTemplateSummary)
pub mod environment_template_summary {
    /// A builder for [`EnvironmentTemplateSummary`](crate::model::EnvironmentTemplateSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) display_name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) recommended_version: std::option::Option<std::string::String>,
        pub(crate) provisioning: std::option::Option<crate::model::Provisioning>,
    }
    impl Builder {
        /// <p>The name of the environment template.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the environment template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the environment template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The name of the environment template as displayed in the developer interface.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.display_name = Some(input.into());
            self
        }
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.display_name = input;
            self
        }
        /// <p>A description of the environment template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ID of the recommended version of the environment template.</p>
        pub fn recommended_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_version = Some(input.into());
            self
        }
        pub fn set_recommended_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_version = input;
            self
        }
        /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
        pub fn provisioning(mut self, input: crate::model::Provisioning) -> Self {
            self.provisioning = Some(input);
            self
        }
        pub fn set_provisioning(
            mut self,
            input: std::option::Option<crate::model::Provisioning>,
        ) -> Self {
            self.provisioning = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentTemplateSummary`](crate::model::EnvironmentTemplateSummary)
        pub fn build(self) -> crate::model::EnvironmentTemplateSummary {
            crate::model::EnvironmentTemplateSummary {
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                display_name: self.display_name,
                description: self.description,
                recommended_version: self.recommended_version,
                provisioning: self.provisioning,
            }
        }
    }
}
impl EnvironmentTemplateSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplateSummary`](crate::model::EnvironmentTemplateSummary)
    pub fn builder() -> crate::model::environment_template_summary::Builder {
        crate::model::environment_template_summary::Builder::default()
    }
}

/// <p>The environment template data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentTemplate {
    /// <p>The name of the environment template.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the environment template was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the environment template was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub display_name: std::option::Option<std::string::String>,
    /// <p>A description of the environment template.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the recommended version of the environment template.</p>
    pub recommended_version: std::option::Option<std::string::String>,
    /// <p>The customer provided encryption key for the environment template.</p>
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub provisioning: std::option::Option<crate::model::Provisioning>,
}
impl std::fmt::Debug for EnvironmentTemplate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplate");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("recommended_version", &self.recommended_version);
        formatter.field("encryption_key", &self.encryption_key);
        formatter.field("provisioning", &self.provisioning);
        formatter.finish()
    }
}
/// See [`EnvironmentTemplate`](crate::model::EnvironmentTemplate)
pub mod environment_template {
    /// A builder for [`EnvironmentTemplate`](crate::model::EnvironmentTemplate)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) display_name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) recommended_version: std::option::Option<std::string::String>,
        pub(crate) encryption_key: std::option::Option<std::string::String>,
        pub(crate) provisioning: std::option::Option<crate::model::Provisioning>,
    }
    impl Builder {
        /// <p>The name of the environment template.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the environment template was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when the environment template was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The name of the environment template as displayed in the developer interface.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.display_name = Some(input.into());
            self
        }
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.display_name = input;
            self
        }
        /// <p>A description of the environment template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ID of the recommended version of the environment template.</p>
        pub fn recommended_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.recommended_version = Some(input.into());
            self
        }
        pub fn set_recommended_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.recommended_version = input;
            self
        }
        /// <p>The customer provided encryption key for the environment template.</p>
        pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.encryption_key = Some(input.into());
            self
        }
        pub fn set_encryption_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_key = input;
            self
        }
        /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
        pub fn provisioning(mut self, input: crate::model::Provisioning) -> Self {
            self.provisioning = Some(input);
            self
        }
        pub fn set_provisioning(
            mut self,
            input: std::option::Option<crate::model::Provisioning>,
        ) -> Self {
            self.provisioning = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentTemplate`](crate::model::EnvironmentTemplate)
        pub fn build(self) -> crate::model::EnvironmentTemplate {
            crate::model::EnvironmentTemplate {
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                last_modified_at: self.last_modified_at,
                display_name: self.display_name,
                description: self.description,
                recommended_version: self.recommended_version,
                encryption_key: self.encryption_key,
                provisioning: self.provisioning,
            }
        }
    }
}
impl EnvironmentTemplate {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplate`](crate::model::EnvironmentTemplate)
    pub fn builder() -> crate::model::environment_template::Builder {
        crate::model::environment_template::Builder::default()
    }
}

/// <p>A summary of the environment detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentSummary {
    /// <p>The name of the environment.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the environment.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The time when the environment was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when a deployment of the environment was last attempted.</p>
    pub last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the environment was last deployed successfully.</p>
    pub last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the environment template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the major version of the environment template.</p>
    pub template_major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of the environment template.</p>
    pub template_minor_version: std::option::Option<std::string::String>,
    /// <p>The environment deployment status.</p>
    pub deployment_status: std::option::Option<crate::model::DeploymentStatus>,
    /// <p>An environment deployment status message.</p>
    pub deployment_status_message: std::option::Option<std::string::String>,
    /// <p>The ARN of the AWS Proton service role that allows AWS Proton to make calls to other services on your behalf.</p>
    pub proton_service_role_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the environment account connection that the environment is associated with.</p>
    pub environment_account_connection_id: std::option::Option<std::string::String>,
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub environment_account_id: std::option::Option<std::string::String>,
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub provisioning: std::option::Option<crate::model::Provisioning>,
}
impl std::fmt::Debug for EnvironmentSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentSummary");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field(
            "last_deployment_attempted_at",
            &self.last_deployment_attempted_at,
        );
        formatter.field(
            "last_deployment_succeeded_at",
            &self.last_deployment_succeeded_at,
        );
        formatter.field("arn", &self.arn);
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field(
            "deployment_status_message",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("proton_service_role_arn", &self.proton_service_role_arn);
        formatter.field(
            "environment_account_connection_id",
            &self.environment_account_connection_id,
        );
        formatter.field("environment_account_id", &self.environment_account_id);
        formatter.field("provisioning", &self.provisioning);
        formatter.finish()
    }
}
/// See [`EnvironmentSummary`](crate::model::EnvironmentSummary)
pub mod environment_summary {
    /// A builder for [`EnvironmentSummary`](crate::model::EnvironmentSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) template_major_version: std::option::Option<std::string::String>,
        pub(crate) template_minor_version: std::option::Option<std::string::String>,
        pub(crate) deployment_status: std::option::Option<crate::model::DeploymentStatus>,
        pub(crate) deployment_status_message: std::option::Option<std::string::String>,
        pub(crate) proton_service_role_arn: std::option::Option<std::string::String>,
        pub(crate) environment_account_connection_id: std::option::Option<std::string::String>,
        pub(crate) environment_account_id: std::option::Option<std::string::String>,
        pub(crate) provisioning: std::option::Option<crate::model::Provisioning>,
    }
    impl Builder {
        /// <p>The name of the environment.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the environment.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The time when the environment was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when a deployment of the environment was last attempted.</p>
        pub fn last_deployment_attempted_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_attempted_at = Some(input);
            self
        }
        pub fn set_last_deployment_attempted_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_attempted_at = input;
            self
        }
        /// <p>The time when the environment was last deployed successfully.</p>
        pub fn last_deployment_succeeded_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_succeeded_at = Some(input);
            self
        }
        pub fn set_last_deployment_succeeded_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_succeeded_at = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the environment.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the environment template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the major version of the environment template.</p>
        pub fn template_major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_major_version = Some(input.into());
            self
        }
        pub fn set_template_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_major_version = input;
            self
        }
        /// <p>The ID of the minor version of the environment template.</p>
        pub fn template_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_minor_version = Some(input.into());
            self
        }
        pub fn set_template_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_minor_version = input;
            self
        }
        /// <p>The environment deployment status.</p>
        pub fn deployment_status(mut self, input: crate::model::DeploymentStatus) -> Self {
            self.deployment_status = Some(input);
            self
        }
        pub fn set_deployment_status(
            mut self,
            input: std::option::Option<crate::model::DeploymentStatus>,
        ) -> Self {
            self.deployment_status = input;
            self
        }
        /// <p>An environment deployment status message.</p>
        pub fn deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.deployment_status_message = Some(input.into());
            self
        }
        pub fn set_deployment_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.deployment_status_message = input;
            self
        }
        /// <p>The ARN of the AWS Proton service role that allows AWS Proton to make calls to other services on your behalf.</p>
        pub fn proton_service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.proton_service_role_arn = Some(input.into());
            self
        }
        pub fn set_proton_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.proton_service_role_arn = input;
            self
        }
        /// <p>The ID of the environment account connection that the environment is associated with.</p>
        pub fn environment_account_connection_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.environment_account_connection_id = Some(input.into());
            self
        }
        pub fn set_environment_account_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_account_connection_id = input;
            self
        }
        /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
        pub fn environment_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_account_id = Some(input.into());
            self
        }
        pub fn set_environment_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_account_id = input;
            self
        }
        /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
        pub fn provisioning(mut self, input: crate::model::Provisioning) -> Self {
            self.provisioning = Some(input);
            self
        }
        pub fn set_provisioning(
            mut self,
            input: std::option::Option<crate::model::Provisioning>,
        ) -> Self {
            self.provisioning = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentSummary`](crate::model::EnvironmentSummary)
        pub fn build(self) -> crate::model::EnvironmentSummary {
            crate::model::EnvironmentSummary {
                name: self.name,
                description: self.description,
                created_at: self.created_at,
                last_deployment_attempted_at: self.last_deployment_attempted_at,
                last_deployment_succeeded_at: self.last_deployment_succeeded_at,
                arn: self.arn,
                template_name: self.template_name,
                template_major_version: self.template_major_version,
                template_minor_version: self.template_minor_version,
                deployment_status: self.deployment_status,
                deployment_status_message: self.deployment_status_message,
                proton_service_role_arn: self.proton_service_role_arn,
                environment_account_connection_id: self.environment_account_connection_id,
                environment_account_id: self.environment_account_id,
                provisioning: self.provisioning,
            }
        }
    }
}
impl EnvironmentSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentSummary`](crate::model::EnvironmentSummary)
    pub fn builder() -> crate::model::environment_summary::Builder {
        crate::model::environment_summary::Builder::default()
    }
}

/// <p>A search filter for environment templates.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentTemplateFilter {
    /// <p>Include <code>templateName</code> to filter search for a template name.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>Include <code>majorVersion</code> to filter search for a major version.</p>
    pub major_version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EnvironmentTemplateFilter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplateFilter");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.finish()
    }
}
/// See [`EnvironmentTemplateFilter`](crate::model::EnvironmentTemplateFilter)
pub mod environment_template_filter {
    /// A builder for [`EnvironmentTemplateFilter`](crate::model::EnvironmentTemplateFilter)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) major_version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Include <code>templateName</code> to filter search for a template name.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>Include <code>majorVersion</code> to filter search for a major version.</p>
        pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_version = Some(input.into());
            self
        }
        pub fn set_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_version = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentTemplateFilter`](crate::model::EnvironmentTemplateFilter)
        pub fn build(self) -> crate::model::EnvironmentTemplateFilter {
            crate::model::EnvironmentTemplateFilter {
                template_name: self.template_name,
                major_version: self.major_version,
            }
        }
    }
}
impl EnvironmentTemplateFilter {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplateFilter`](crate::model::EnvironmentTemplateFilter)
    pub fn builder() -> crate::model::environment_template_filter::Builder {
        crate::model::environment_template_filter::Builder::default()
    }
}

/// <p>The environment detail data. An AWS Proton environment is a set resources shared across an AWS Proton service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Environment {
    /// <p>The name of the environment.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the environment.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The time when the environment was created.</p>
    pub created_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when a deployment of the environment was last attempted.</p>
    pub last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the environment was last deployed successfully.</p>
    pub last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the environment template.</p>
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The ID of the major version of the environment template.</p>
    pub template_major_version: std::option::Option<std::string::String>,
    /// <p>The ID of the minor version of the environment template.</p>
    pub template_minor_version: std::option::Option<std::string::String>,
    /// <p>The environment deployment status.</p>
    pub deployment_status: std::option::Option<crate::model::DeploymentStatus>,
    /// <p>An environment deployment status message.</p>
    pub deployment_status_message: std::option::Option<std::string::String>,
    /// <p>The ARN of the AWS Proton service role that allows AWS Proton to make calls to other services on your behalf.</p>
    pub proton_service_role_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the environment account connection that's used to provision infrastructure resources in an environment account.</p>
    pub environment_account_connection_id: std::option::Option<std::string::String>,
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub environment_account_id: std::option::Option<std::string::String>,
    /// <p>The environment spec.</p>
    pub spec: std::option::Option<std::string::String>,
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub provisioning: std::option::Option<crate::model::Provisioning>,
}
impl std::fmt::Debug for Environment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Environment");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field(
            "last_deployment_attempted_at",
            &self.last_deployment_attempted_at,
        );
        formatter.field(
            "last_deployment_succeeded_at",
            &self.last_deployment_succeeded_at,
        );
        formatter.field("arn", &self.arn);
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field(
            "deployment_status_message",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("proton_service_role_arn", &self.proton_service_role_arn);
        formatter.field(
            "environment_account_connection_id",
            &self.environment_account_connection_id,
        );
        formatter.field("environment_account_id", &self.environment_account_id);
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("provisioning", &self.provisioning);
        formatter.finish()
    }
}
/// See [`Environment`](crate::model::Environment)
pub mod environment {
    /// A builder for [`Environment`](crate::model::Environment)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_attempted_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_deployment_succeeded_at: std::option::Option<smithy_types::Instant>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) template_name: std::option::Option<std::string::String>,
        pub(crate) template_major_version: std::option::Option<std::string::String>,
        pub(crate) template_minor_version: std::option::Option<std::string::String>,
        pub(crate) deployment_status: std::option::Option<crate::model::DeploymentStatus>,
        pub(crate) deployment_status_message: std::option::Option<std::string::String>,
        pub(crate) proton_service_role_arn: std::option::Option<std::string::String>,
        pub(crate) environment_account_connection_id: std::option::Option<std::string::String>,
        pub(crate) environment_account_id: std::option::Option<std::string::String>,
        pub(crate) spec: std::option::Option<std::string::String>,
        pub(crate) provisioning: std::option::Option<crate::model::Provisioning>,
    }
    impl Builder {
        /// <p>The name of the environment.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The description of the environment.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The time when the environment was created.</p>
        pub fn created_at(mut self, input: smithy_types::Instant) -> Self {
            self.created_at = Some(input);
            self
        }
        pub fn set_created_at(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The time when a deployment of the environment was last attempted.</p>
        pub fn last_deployment_attempted_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_attempted_at = Some(input);
            self
        }
        pub fn set_last_deployment_attempted_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_attempted_at = input;
            self
        }
        /// <p>The time when the environment was last deployed successfully.</p>
        pub fn last_deployment_succeeded_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_deployment_succeeded_at = Some(input);
            self
        }
        pub fn set_last_deployment_succeeded_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_deployment_succeeded_at = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the environment.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ARN of the environment template.</p>
        pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_name = Some(input.into());
            self
        }
        pub fn set_template_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_name = input;
            self
        }
        /// <p>The ID of the major version of the environment template.</p>
        pub fn template_major_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_major_version = Some(input.into());
            self
        }
        pub fn set_template_major_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_major_version = input;
            self
        }
        /// <p>The ID of the minor version of the environment template.</p>
        pub fn template_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.template_minor_version = Some(input.into());
            self
        }
        pub fn set_template_minor_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.template_minor_version = input;
            self
        }
        /// <p>The environment deployment status.</p>
        pub fn deployment_status(mut self, input: crate::model::DeploymentStatus) -> Self {
            self.deployment_status = Some(input);
            self
        }
        pub fn set_deployment_status(
            mut self,
            input: std::option::Option<crate::model::DeploymentStatus>,
        ) -> Self {
            self.deployment_status = input;
            self
        }
        /// <p>An environment deployment status message.</p>
        pub fn deployment_status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.deployment_status_message = Some(input.into());
            self
        }
        pub fn set_deployment_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.deployment_status_message = input;
            self
        }
        /// <p>The ARN of the AWS Proton service role that allows AWS Proton to make calls to other services on your behalf.</p>
        pub fn proton_service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.proton_service_role_arn = Some(input.into());
            self
        }
        pub fn set_proton_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.proton_service_role_arn = input;
            self
        }
        /// <p>The ID of the environment account connection that's used to provision infrastructure resources in an environment account.</p>
        pub fn environment_account_connection_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.environment_account_connection_id = Some(input.into());
            self
        }
        pub fn set_environment_account_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_account_connection_id = input;
            self
        }
        /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
        pub fn environment_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_account_id = Some(input.into());
            self
        }
        pub fn set_environment_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_account_id = input;
            self
        }
        /// <p>The environment spec.</p>
        pub fn spec(mut self, input: impl Into<std::string::String>) -> Self {
            self.spec = Some(input.into());
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.spec = input;
            self
        }
        /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
        pub fn provisioning(mut self, input: crate::model::Provisioning) -> Self {
            self.provisioning = Some(input);
            self
        }
        pub fn set_provisioning(
            mut self,
            input: std::option::Option<crate::model::Provisioning>,
        ) -> Self {
            self.provisioning = input;
            self
        }
        /// Consumes the builder and constructs a [`Environment`](crate::model::Environment)
        pub fn build(self) -> crate::model::Environment {
            crate::model::Environment {
                name: self.name,
                description: self.description,
                created_at: self.created_at,
                last_deployment_attempted_at: self.last_deployment_attempted_at,
                last_deployment_succeeded_at: self.last_deployment_succeeded_at,
                arn: self.arn,
                template_name: self.template_name,
                template_major_version: self.template_major_version,
                template_minor_version: self.template_minor_version,
                deployment_status: self.deployment_status,
                deployment_status_message: self.deployment_status_message,
                proton_service_role_arn: self.proton_service_role_arn,
                environment_account_connection_id: self.environment_account_connection_id,
                environment_account_id: self.environment_account_id,
                spec: self.spec,
                provisioning: self.provisioning,
            }
        }
    }
}
impl Environment {
    /// Creates a new builder-style object to manufacture [`Environment`](crate::model::Environment)
    pub fn builder() -> crate::model::environment::Builder {
        crate::model::environment::Builder::default()
    }
}

/// <p>The environment account connection detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentAccountConnection {
    /// <p>The ID of the environment account connection.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the environment account connection.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the management account that's connected to the environment account connection.</p>
    pub management_account_id: std::option::Option<std::string::String>,
    /// <p>The environment account that's connected to the environment account connection.</p>
    pub environment_account_id: std::option::Option<std::string::String>,
    /// <p>The IAM service role that's associated with the environment account connection.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the environment that's associated with the environment account connection.</p>
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The time when the environment account connection request was made.</p>
    pub requested_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the environment account connection was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The status of the environment account connection.</p>
    pub status: std::option::Option<crate::model::EnvironmentAccountConnectionStatus>,
}
impl std::fmt::Debug for EnvironmentAccountConnection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentAccountConnection");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("management_account_id", &self.management_account_id);
        formatter.field("environment_account_id", &self.environment_account_id);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("environment_name", &self.environment_name);
        formatter.field("requested_at", &self.requested_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`EnvironmentAccountConnection`](crate::model::EnvironmentAccountConnection)
pub mod environment_account_connection {
    /// A builder for [`EnvironmentAccountConnection`](crate::model::EnvironmentAccountConnection)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) management_account_id: std::option::Option<std::string::String>,
        pub(crate) environment_account_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) environment_name: std::option::Option<std::string::String>,
        pub(crate) requested_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<crate::model::EnvironmentAccountConnectionStatus>,
    }
    impl Builder {
        /// <p>The ID of the environment account connection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the environment account connection.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the management account that's connected to the environment account connection.</p>
        pub fn management_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.management_account_id = Some(input.into());
            self
        }
        pub fn set_management_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.management_account_id = input;
            self
        }
        /// <p>The environment account that's connected to the environment account connection.</p>
        pub fn environment_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_account_id = Some(input.into());
            self
        }
        pub fn set_environment_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_account_id = input;
            self
        }
        /// <p>The IAM service role that's associated with the environment account connection.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The name of the environment that's associated with the environment account connection.</p>
        pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_name = Some(input.into());
            self
        }
        pub fn set_environment_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_name = input;
            self
        }
        /// <p>The time when the environment account connection request was made.</p>
        pub fn requested_at(mut self, input: smithy_types::Instant) -> Self {
            self.requested_at = Some(input);
            self
        }
        pub fn set_requested_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.requested_at = input;
            self
        }
        /// <p>The time when the environment account connection was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The status of the environment account connection.</p>
        pub fn status(mut self, input: crate::model::EnvironmentAccountConnectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::EnvironmentAccountConnectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentAccountConnection`](crate::model::EnvironmentAccountConnection)
        pub fn build(self) -> crate::model::EnvironmentAccountConnection {
            crate::model::EnvironmentAccountConnection {
                id: self.id,
                arn: self.arn,
                management_account_id: self.management_account_id,
                environment_account_id: self.environment_account_id,
                role_arn: self.role_arn,
                environment_name: self.environment_name,
                requested_at: self.requested_at,
                last_modified_at: self.last_modified_at,
                status: self.status,
            }
        }
    }
}
impl EnvironmentAccountConnection {
    /// Creates a new builder-style object to manufacture [`EnvironmentAccountConnection`](crate::model::EnvironmentAccountConnection)
    pub fn builder() -> crate::model::environment_account_connection::Builder {
        crate::model::environment_account_connection::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum EnvironmentAccountConnectionStatus {
    Connected,
    Pending,
    Rejected,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for EnvironmentAccountConnectionStatus {
    fn from(s: &str) -> Self {
        match s {
            "CONNECTED" => EnvironmentAccountConnectionStatus::Connected,
            "PENDING" => EnvironmentAccountConnectionStatus::Pending,
            "REJECTED" => EnvironmentAccountConnectionStatus::Rejected,
            other => EnvironmentAccountConnectionStatus::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for EnvironmentAccountConnectionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(EnvironmentAccountConnectionStatus::from(s))
    }
}
impl EnvironmentAccountConnectionStatus {
    pub fn as_str(&self) -> &str {
        match self {
            EnvironmentAccountConnectionStatus::Connected => "CONNECTED",
            EnvironmentAccountConnectionStatus::Pending => "PENDING",
            EnvironmentAccountConnectionStatus::Rejected => "REJECTED",
            EnvironmentAccountConnectionStatus::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["CONNECTED", "PENDING", "REJECTED"]
    }
}
impl AsRef<str> for EnvironmentAccountConnectionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A summary of the environment account connection detail data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnvironmentAccountConnectionSummary {
    /// <p>The ID of the environment account connection.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the environment account connection.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the management account that's connected to the environment account connection.</p>
    pub management_account_id: std::option::Option<std::string::String>,
    /// <p>The ID of the environment account that's connected to the environment account connection.</p>
    pub environment_account_id: std::option::Option<std::string::String>,
    /// <p>The IAM service role that's associated with the environment account connection.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the environment that's associated with the environment account connection.</p>
    pub environment_name: std::option::Option<std::string::String>,
    /// <p>The time when the environment account connection request was made.</p>
    pub requested_at: std::option::Option<smithy_types::Instant>,
    /// <p>The time when the environment account connection was last modified.</p>
    pub last_modified_at: std::option::Option<smithy_types::Instant>,
    /// <p>The status of the environment account connection.</p>
    pub status: std::option::Option<crate::model::EnvironmentAccountConnectionStatus>,
}
impl std::fmt::Debug for EnvironmentAccountConnectionSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentAccountConnectionSummary");
        formatter.field("id", &self.id);
        formatter.field("arn", &self.arn);
        formatter.field("management_account_id", &self.management_account_id);
        formatter.field("environment_account_id", &self.environment_account_id);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("environment_name", &self.environment_name);
        formatter.field("requested_at", &self.requested_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`EnvironmentAccountConnectionSummary`](crate::model::EnvironmentAccountConnectionSummary)
pub mod environment_account_connection_summary {
    /// A builder for [`EnvironmentAccountConnectionSummary`](crate::model::EnvironmentAccountConnectionSummary)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) management_account_id: std::option::Option<std::string::String>,
        pub(crate) environment_account_id: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) environment_name: std::option::Option<std::string::String>,
        pub(crate) requested_at: std::option::Option<smithy_types::Instant>,
        pub(crate) last_modified_at: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<crate::model::EnvironmentAccountConnectionStatus>,
    }
    impl Builder {
        /// <p>The ID of the environment account connection.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the environment account connection.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The ID of the management account that's connected to the environment account connection.</p>
        pub fn management_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.management_account_id = Some(input.into());
            self
        }
        pub fn set_management_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.management_account_id = input;
            self
        }
        /// <p>The ID of the environment account that's connected to the environment account connection.</p>
        pub fn environment_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_account_id = Some(input.into());
            self
        }
        pub fn set_environment_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_account_id = input;
            self
        }
        /// <p>The IAM service role that's associated with the environment account connection.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The name of the environment that's associated with the environment account connection.</p>
        pub fn environment_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.environment_name = Some(input.into());
            self
        }
        pub fn set_environment_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.environment_name = input;
            self
        }
        /// <p>The time when the environment account connection request was made.</p>
        pub fn requested_at(mut self, input: smithy_types::Instant) -> Self {
            self.requested_at = Some(input);
            self
        }
        pub fn set_requested_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.requested_at = input;
            self
        }
        /// <p>The time when the environment account connection was last modified.</p>
        pub fn last_modified_at(mut self, input: smithy_types::Instant) -> Self {
            self.last_modified_at = Some(input);
            self
        }
        pub fn set_last_modified_at(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_modified_at = input;
            self
        }
        /// <p>The status of the environment account connection.</p>
        pub fn status(mut self, input: crate::model::EnvironmentAccountConnectionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::EnvironmentAccountConnectionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`EnvironmentAccountConnectionSummary`](crate::model::EnvironmentAccountConnectionSummary)
        pub fn build(self) -> crate::model::EnvironmentAccountConnectionSummary {
            crate::model::EnvironmentAccountConnectionSummary {
                id: self.id,
                arn: self.arn,
                management_account_id: self.management_account_id,
                environment_account_id: self.environment_account_id,
                role_arn: self.role_arn,
                environment_name: self.environment_name,
                requested_at: self.requested_at,
                last_modified_at: self.last_modified_at,
                status: self.status,
            }
        }
    }
}
impl EnvironmentAccountConnectionSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentAccountConnectionSummary`](crate::model::EnvironmentAccountConnectionSummary)
    pub fn builder() -> crate::model::environment_account_connection_summary::Builder {
        crate::model::environment_account_connection_summary::Builder::default()
    }
}

#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum EnvironmentAccountConnectionRequesterAccountType {
    EnvironmentAccount,
    ManagementAccount,
    /// Unknown contains new variants that have been added since this code was generated.
    Unknown(String),
}
impl std::convert::From<&str> for EnvironmentAccountConnectionRequesterAccountType {
    fn from(s: &str) -> Self {
        match s {
            "ENVIRONMENT_ACCOUNT" => {
                EnvironmentAccountConnectionRequesterAccountType::EnvironmentAccount
            }
            "MANAGEMENT_ACCOUNT" => {
                EnvironmentAccountConnectionRequesterAccountType::ManagementAccount
            }
            other => EnvironmentAccountConnectionRequesterAccountType::Unknown(other.to_owned()),
        }
    }
}
impl std::str::FromStr for EnvironmentAccountConnectionRequesterAccountType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(EnvironmentAccountConnectionRequesterAccountType::from(s))
    }
}
impl EnvironmentAccountConnectionRequesterAccountType {
    pub fn as_str(&self) -> &str {
        match self {
            EnvironmentAccountConnectionRequesterAccountType::EnvironmentAccount => {
                "ENVIRONMENT_ACCOUNT"
            }
            EnvironmentAccountConnectionRequesterAccountType::ManagementAccount => {
                "MANAGEMENT_ACCOUNT"
            }
            EnvironmentAccountConnectionRequesterAccountType::Unknown(s) => s.as_ref(),
        }
    }
    pub fn values() -> &'static [&'static str] {
        &["ENVIRONMENT_ACCOUNT", "MANAGEMENT_ACCOUNT"]
    }
}
impl AsRef<str> for EnvironmentAccountConnectionRequesterAccountType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The AWS Proton pipeline service role data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AccountSettings {
    /// <p>The Amazon Resource Name (ARN) of the AWS Proton pipeline service role.</p>
    pub pipeline_service_role_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AccountSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AccountSettings");
        formatter.field("pipeline_service_role_arn", &self.pipeline_service_role_arn);
        formatter.finish()
    }
}
/// See [`AccountSettings`](crate::model::AccountSettings)
pub mod account_settings {
    /// A builder for [`AccountSettings`](crate::model::AccountSettings)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pipeline_service_role_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the AWS Proton pipeline service role.</p>
        pub fn pipeline_service_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.pipeline_service_role_arn = Some(input.into());
            self
        }
        pub fn set_pipeline_service_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pipeline_service_role_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AccountSettings`](crate::model::AccountSettings)
        pub fn build(self) -> crate::model::AccountSettings {
            crate::model::AccountSettings {
                pipeline_service_role_arn: self.pipeline_service_role_arn,
            }
        }
    }
}
impl AccountSettings {
    /// Creates a new builder-style object to manufacture [`AccountSettings`](crate::model::AccountSettings)
    pub fn builder() -> crate::model::account_settings::Builder {
        crate::model::account_settings::Builder::default()
    }
}
