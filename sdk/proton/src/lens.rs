// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_environment_account_connections_output_next_token(
    input: &crate::output::ListEnvironmentAccountConnectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_environment_outputs_output_next_token(
    input: &crate::output::ListEnvironmentOutputsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_environment_provisioned_resources_output_next_token(
    input: &crate::output::ListEnvironmentProvisionedResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_environments_output_next_token(
    input: &crate::output::ListEnvironmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_environment_templates_output_next_token(
    input: &crate::output::ListEnvironmentTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_environment_template_versions_output_next_token(
    input: &crate::output::ListEnvironmentTemplateVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_repositories_output_next_token(
    input: &crate::output::ListRepositoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_repository_sync_definitions_output_next_token(
    input: &crate::output::ListRepositorySyncDefinitionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_instance_outputs_output_next_token(
    input: &crate::output::ListServiceInstanceOutputsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_instance_provisioned_resources_output_next_token(
    input: &crate::output::ListServiceInstanceProvisionedResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_instances_output_next_token(
    input: &crate::output::ListServiceInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_pipeline_outputs_output_next_token(
    input: &crate::output::ListServicePipelineOutputsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_pipeline_provisioned_resources_output_next_token(
    input: &crate::output::ListServicePipelineProvisionedResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_services_output_next_token(
    input: &crate::output::ListServicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_templates_output_next_token(
    input: &crate::output::ListServiceTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_service_template_versions_output_next_token(
    input: &crate::output::ListServiceTemplateVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tags_for_resource_output_next_token(
    input: &crate::output::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_environment_account_connections_output_environment_account_connections(
    input: crate::output::ListEnvironmentAccountConnectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EnvironmentAccountConnectionSummary>> {
    let input = match input.environment_account_connections {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_environment_outputs_output_outputs(
    input: crate::output::ListEnvironmentOutputsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Output>> {
    let input = match input.outputs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_environment_provisioned_resources_output_provisioned_resources(
    input: crate::output::ListEnvironmentProvisionedResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProvisionedResource>> {
    let input = match input.provisioned_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_environments_output_environments(
    input: crate::output::ListEnvironmentsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EnvironmentSummary>> {
    let input = match input.environments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_environment_templates_output_templates(
    input: crate::output::ListEnvironmentTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EnvironmentTemplateSummary>> {
    let input = match input.templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_environment_template_versions_output_template_versions(
    input: crate::output::ListEnvironmentTemplateVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EnvironmentTemplateVersionSummary>> {
    let input = match input.template_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_repositories_output_repositories(
    input: crate::output::ListRepositoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RepositorySummary>> {
    let input = match input.repositories {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_repository_sync_definitions_output_sync_definitions(
    input: crate::output::ListRepositorySyncDefinitionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RepositorySyncDefinition>> {
    let input = match input.sync_definitions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_instance_outputs_output_outputs(
    input: crate::output::ListServiceInstanceOutputsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Output>> {
    let input = match input.outputs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_instance_provisioned_resources_output_provisioned_resources(
    input: crate::output::ListServiceInstanceProvisionedResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProvisionedResource>> {
    let input = match input.provisioned_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_instances_output_service_instances(
    input: crate::output::ListServiceInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ServiceInstanceSummary>> {
    let input = match input.service_instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_pipeline_outputs_output_outputs(
    input: crate::output::ListServicePipelineOutputsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Output>> {
    let input = match input.outputs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_pipeline_provisioned_resources_output_provisioned_resources(
    input: crate::output::ListServicePipelineProvisionedResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProvisionedResource>> {
    let input = match input.provisioned_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_services_output_services(
    input: crate::output::ListServicesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ServiceSummary>> {
    let input = match input.services {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_templates_output_templates(
    input: crate::output::ListServiceTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ServiceTemplateSummary>> {
    let input = match input.templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_service_template_versions_output_template_versions(
    input: crate::output::ListServiceTemplateVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ServiceTemplateVersionSummary>> {
    let input = match input.template_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tags_for_resource_output_tags(
    input: crate::output::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
