// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_component_outputs_output_next_token(
    input: &crate::operation::list_component_outputs::ListComponentOutputsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_component_provisioned_resources_output_next_token(
    input: &crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_components_output_next_token(
    input: &crate::operation::list_components::ListComponentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_deployments_output_next_token(
    input: &crate::operation::list_deployments::ListDeploymentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_account_connections_output_next_token(
    input: &crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_outputs_output_next_token(
    input: &crate::operation::list_environment_outputs::ListEnvironmentOutputsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_provisioned_resources_output_next_token(
    input: &crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_template_versions_output_next_token(
    input: &crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_templates_output_next_token(
    input: &crate::operation::list_environment_templates::ListEnvironmentTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environments_output_next_token(
    input: &crate::operation::list_environments::ListEnvironmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_repositories_output_next_token(
    input: &crate::operation::list_repositories::ListRepositoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_repository_sync_definitions_output_next_token(
    input: &crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_instance_outputs_output_next_token(
    input: &crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_instance_provisioned_resources_output_next_token(
    input: &crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_instances_output_next_token(
    input: &crate::operation::list_service_instances::ListServiceInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_pipeline_outputs_output_next_token(
    input: &crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_pipeline_provisioned_resources_output_next_token(
    input: &crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_template_versions_output_next_token(
    input: &crate::operation::list_service_template_versions::ListServiceTemplateVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_templates_output_next_token(
    input: &crate::operation::list_service_templates::ListServiceTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_services_output_next_token(
    input: &crate::operation::list_services::ListServicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_component_outputs_output_outputs(
    input: crate::operation::list_component_outputs::ListComponentOutputsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Output>> {
    let input = input.outputs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_component_provisioned_resources_output_provisioned_resources(
    input: crate::operation::list_component_provisioned_resources::ListComponentProvisionedResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisionedResource>> {
    let input = input.provisioned_resources;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_components_output_components(
    input: crate::operation::list_components::ListComponentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ComponentSummary>> {
    let input = input.components;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_deployments_output_deployments(
    input: crate::operation::list_deployments::ListDeploymentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DeploymentSummary>> {
    let input = input.deployments;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_account_connections_output_environment_account_connections(
    input: crate::operation::list_environment_account_connections::ListEnvironmentAccountConnectionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentAccountConnectionSummary>> {
    let input = input.environment_account_connections;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_outputs_output_outputs(
    input: crate::operation::list_environment_outputs::ListEnvironmentOutputsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Output>> {
    let input = input.outputs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_provisioned_resources_output_provisioned_resources(
    input: crate::operation::list_environment_provisioned_resources::ListEnvironmentProvisionedResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisionedResource>> {
    let input = input.provisioned_resources;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_template_versions_output_template_versions(
    input: crate::operation::list_environment_template_versions::ListEnvironmentTemplateVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentTemplateVersionSummary>> {
    let input = input.template_versions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_templates_output_templates(
    input: crate::operation::list_environment_templates::ListEnvironmentTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentTemplateSummary>> {
    let input = input.templates;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environments_output_environments(
    input: crate::operation::list_environments::ListEnvironmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentSummary>> {
    let input = input.environments;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_repositories_output_repositories(
    input: crate::operation::list_repositories::ListRepositoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RepositorySummary>> {
    let input = input.repositories;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_repository_sync_definitions_output_sync_definitions(
    input: crate::operation::list_repository_sync_definitions::ListRepositorySyncDefinitionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RepositorySyncDefinition>> {
    let input = input.sync_definitions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_instance_outputs_output_outputs(
    input: crate::operation::list_service_instance_outputs::ListServiceInstanceOutputsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Output>> {
    let input = input.outputs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_instance_provisioned_resources_output_provisioned_resources(
    input: crate::operation::list_service_instance_provisioned_resources::ListServiceInstanceProvisionedResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisionedResource>> {
    let input = input.provisioned_resources;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_instances_output_service_instances(
    input: crate::operation::list_service_instances::ListServiceInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceInstanceSummary>> {
    let input = input.service_instances;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_pipeline_outputs_output_outputs(
    input: crate::operation::list_service_pipeline_outputs::ListServicePipelineOutputsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Output>> {
    let input = input.outputs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_pipeline_provisioned_resources_output_provisioned_resources(
    input: crate::operation::list_service_pipeline_provisioned_resources::ListServicePipelineProvisionedResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisionedResource>> {
    let input = input.provisioned_resources;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_template_versions_output_template_versions(
    input: crate::operation::list_service_template_versions::ListServiceTemplateVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceTemplateVersionSummary>> {
    let input = input.template_versions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_templates_output_templates(
    input: crate::operation::list_service_templates::ListServiceTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceTemplateSummary>> {
    let input = input.templates;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_services_output_services(
    input: crate::operation::list_services::ListServicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceSummary>> {
    let input = input.services;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags;
    ::std::option::Option::Some(input)
}
