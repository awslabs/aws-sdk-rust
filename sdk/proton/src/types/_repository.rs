// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed data of a linked repositoryâ€”a repository that has been registered with Proton.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Repository {
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub arn: ::std::string::String,
    /// <p>The repository provider.</p>
    pub provider: crate::types::RepositoryProvider,
    /// <p>The repository name.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub connection_arn: ::std::string::String,
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub encryption_key: ::std::option::Option<::std::string::String>,
}
impl Repository {
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The repository provider.</p>
    pub fn provider(&self) -> &crate::types::RepositoryProvider {
        &self.provider
    }
    /// <p>The repository name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub fn connection_arn(&self) -> &str {
        use std::ops::Deref;
        self.connection_arn.deref()
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn encryption_key(&self) -> ::std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
}
impl Repository {
    /// Creates a new builder-style object to manufacture [`Repository`](crate::types::Repository).
    pub fn builder() -> crate::types::builders::RepositoryBuilder {
        crate::types::builders::RepositoryBuilder::default()
    }
}

/// A builder for [`Repository`](crate::types::Repository).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RepositoryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) provider: ::std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key: ::std::option::Option<::std::string::String>,
}
impl RepositoryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The repository provider.</p>
    /// This field is required.
    pub fn provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::RepositoryProvider>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The repository provider.</p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::RepositoryProvider> {
        &self.provider
    }
    /// <p>The repository name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The repository name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    /// This field is required.
    pub fn connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub fn set_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub fn get_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_arn
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn encryption_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn set_encryption_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn get_encryption_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key
    }
    /// Consumes the builder and constructs a [`Repository`](crate::types::Repository).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::RepositoryBuilder::arn)
    /// - [`provider`](crate::types::builders::RepositoryBuilder::provider)
    /// - [`name`](crate::types::builders::RepositoryBuilder::name)
    /// - [`connection_arn`](crate::types::builders::RepositoryBuilder::connection_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::Repository, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Repository {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Repository",
                )
            })?,
            provider: self.provider.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider",
                    "provider was not specified but it is required when building Repository",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Repository",
                )
            })?,
            connection_arn: self.connection_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_arn",
                    "connection_arn was not specified but it is required when building Repository",
                )
            })?,
            encryption_key: self.encryption_key,
        })
    }
}
