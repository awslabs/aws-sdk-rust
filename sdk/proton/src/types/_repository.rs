// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed data of a linked repositoryâ€”a repository that has been registered with Proton.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Repository {
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The repository provider.</p>
    #[doc(hidden)]
    pub provider: std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    #[doc(hidden)]
    pub connection_arn: std::option::Option<std::string::String>,
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
}
impl Repository {
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The repository provider.</p>
    pub fn provider(&self) -> std::option::Option<&crate::types::RepositoryProvider> {
        self.provider.as_ref()
    }
    /// <p>The repository name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub fn connection_arn(&self) -> std::option::Option<&str> {
        self.connection_arn.as_deref()
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
}
impl Repository {
    /// Creates a new builder-style object to manufacture [`Repository`](crate::types::Repository).
    pub fn builder() -> crate::types::builders::RepositoryBuilder {
        crate::types::builders::RepositoryBuilder::default()
    }
}

/// A builder for [`Repository`](crate::types::Repository).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) provider: std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) connection_arn: std::option::Option<std::string::String>,
    pub(crate) encryption_key: std::option::Option<std::string::String>,
}
impl RepositoryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the linked repository.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The repository provider.</p>
    pub fn provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.provider = Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.provider = input;
        self
    }
    /// <p>The repository name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub fn connection_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your AWS CodeStar connection that connects Proton to your repository provider account.</p>
    pub fn set_connection_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p>Your customer Amazon Web Services KMS encryption key.</p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// Consumes the builder and constructs a [`Repository`](crate::types::Repository).
    pub fn build(self) -> crate::types::Repository {
        crate::types::Repository {
            arn: self.arn,
            provider: self.provider,
            name: self.name,
            connection_arn: self.connection_arn,
            encryption_key: self.encryption_key,
        }
    }
}
