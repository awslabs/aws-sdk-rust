// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary counts of each Proton resource types.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceCountsSummary {
    /// <p>The total number of resources of this type in the Amazon Web Services account.</p>
    pub total: i32,
    /// <p>The number of resources of this type in the Amazon Web Services account that failed to deploy.</p>
    pub failed: ::std::option::Option<i32>,
    /// <p>The number of resources of this type in the Amazon Web Services account that are up-to-date with their template.</p>
    pub up_to_date: ::std::option::Option<i32>,
    /// <p>The number of resources of this type in the Amazon Web Services account that need a major template version update.</p>
    pub behind_major: ::std::option::Option<i32>,
    /// <p>The number of resources of this type in the Amazon Web Services account that need a minor template version update.</p>
    pub behind_minor: ::std::option::Option<i32>,
}
impl ResourceCountsSummary {
    /// <p>The total number of resources of this type in the Amazon Web Services account.</p>
    pub fn total(&self) -> i32 {
        self.total
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that failed to deploy.</p>
    pub fn failed(&self) -> ::std::option::Option<i32> {
        self.failed
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that are up-to-date with their template.</p>
    pub fn up_to_date(&self) -> ::std::option::Option<i32> {
        self.up_to_date
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a major template version update.</p>
    pub fn behind_major(&self) -> ::std::option::Option<i32> {
        self.behind_major
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a minor template version update.</p>
    pub fn behind_minor(&self) -> ::std::option::Option<i32> {
        self.behind_minor
    }
}
impl ResourceCountsSummary {
    /// Creates a new builder-style object to manufacture [`ResourceCountsSummary`](crate::types::ResourceCountsSummary).
    pub fn builder() -> crate::types::builders::ResourceCountsSummaryBuilder {
        crate::types::builders::ResourceCountsSummaryBuilder::default()
    }
}

/// A builder for [`ResourceCountsSummary`](crate::types::ResourceCountsSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceCountsSummaryBuilder {
    pub(crate) total: ::std::option::Option<i32>,
    pub(crate) failed: ::std::option::Option<i32>,
    pub(crate) up_to_date: ::std::option::Option<i32>,
    pub(crate) behind_major: ::std::option::Option<i32>,
    pub(crate) behind_minor: ::std::option::Option<i32>,
}
impl ResourceCountsSummaryBuilder {
    /// <p>The total number of resources of this type in the Amazon Web Services account.</p>
    /// This field is required.
    pub fn total(mut self, input: i32) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of resources of this type in the Amazon Web Services account.</p>
    pub fn set_total(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// <p>The total number of resources of this type in the Amazon Web Services account.</p>
    pub fn get_total(&self) -> &::std::option::Option<i32> {
        &self.total
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that failed to deploy.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that failed to deploy.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that failed to deploy.</p>
    pub fn get_failed(&self) -> &::std::option::Option<i32> {
        &self.failed
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that are up-to-date with their template.</p>
    pub fn up_to_date(mut self, input: i32) -> Self {
        self.up_to_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that are up-to-date with their template.</p>
    pub fn set_up_to_date(mut self, input: ::std::option::Option<i32>) -> Self {
        self.up_to_date = input;
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that are up-to-date with their template.</p>
    pub fn get_up_to_date(&self) -> &::std::option::Option<i32> {
        &self.up_to_date
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a major template version update.</p>
    pub fn behind_major(mut self, input: i32) -> Self {
        self.behind_major = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a major template version update.</p>
    pub fn set_behind_major(mut self, input: ::std::option::Option<i32>) -> Self {
        self.behind_major = input;
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a major template version update.</p>
    pub fn get_behind_major(&self) -> &::std::option::Option<i32> {
        &self.behind_major
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a minor template version update.</p>
    pub fn behind_minor(mut self, input: i32) -> Self {
        self.behind_minor = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a minor template version update.</p>
    pub fn set_behind_minor(mut self, input: ::std::option::Option<i32>) -> Self {
        self.behind_minor = input;
        self
    }
    /// <p>The number of resources of this type in the Amazon Web Services account that need a minor template version update.</p>
    pub fn get_behind_minor(&self) -> &::std::option::Option<i32> {
        &self.behind_minor
    }
    /// Consumes the builder and constructs a [`ResourceCountsSummary`](crate::types::ResourceCountsSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`total`](crate::types::builders::ResourceCountsSummaryBuilder::total)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceCountsSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceCountsSummary {
            total: self.total.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "total",
                    "total was not specified but it is required when building ResourceCountsSummary",
                )
            })?,
            failed: self.failed,
            up_to_date: self.up_to_date,
            behind_major: self.behind_major,
            behind_minor: self.behind_minor,
        })
    }
}
