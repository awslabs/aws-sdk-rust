// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detail data for a template sync configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateSyncConfig {
    /// <p>The template name.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The template type.</p>
    #[doc(hidden)]
    pub template_type: std::option::Option<crate::types::TemplateType>,
    /// <p>The repository provider.</p>
    #[doc(hidden)]
    pub repository_provider: std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>The repository branch.</p>
    #[doc(hidden)]
    pub branch: std::option::Option<std::string::String>,
    /// <p>A subdirectory path to your template bundle version.</p>
    #[doc(hidden)]
    pub subdirectory: std::option::Option<std::string::String>,
}
impl TemplateSyncConfig {
    /// <p>The template name.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The template type.</p>
    pub fn template_type(&self) -> std::option::Option<&crate::types::TemplateType> {
        self.template_type.as_ref()
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(&self) -> std::option::Option<&crate::types::RepositoryProvider> {
        self.repository_provider.as_ref()
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The repository branch.</p>
    pub fn branch(&self) -> std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p>A subdirectory path to your template bundle version.</p>
    pub fn subdirectory(&self) -> std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
}
impl TemplateSyncConfig {
    /// Creates a new builder-style object to manufacture [`TemplateSyncConfig`](crate::types::TemplateSyncConfig).
    pub fn builder() -> crate::types::builders::TemplateSyncConfigBuilder {
        crate::types::builders::TemplateSyncConfigBuilder::default()
    }
}

/// A builder for [`TemplateSyncConfig`](crate::types::TemplateSyncConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateSyncConfigBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) template_type: std::option::Option<crate::types::TemplateType>,
    pub(crate) repository_provider: std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) branch: std::option::Option<std::string::String>,
    pub(crate) subdirectory: std::option::Option<std::string::String>,
}
impl TemplateSyncConfigBuilder {
    /// <p>The template name.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The template name.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The template type.</p>
    pub fn template_type(mut self, input: crate::types::TemplateType) -> Self {
        self.template_type = Some(input);
        self
    }
    /// <p>The template type.</p>
    pub fn set_template_type(
        mut self,
        input: std::option::Option<crate::types::TemplateType>,
    ) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The repository provider.</p>
    pub fn repository_provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.repository_provider = Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_repository_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.repository_provider = input;
        self
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The repository name (for example, <code>myrepos/myrepo</code>).</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The repository branch.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch = Some(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>A subdirectory path to your template bundle version.</p>
    pub fn subdirectory(mut self, input: impl Into<std::string::String>) -> Self {
        self.subdirectory = Some(input.into());
        self
    }
    /// <p>A subdirectory path to your template bundle version.</p>
    pub fn set_subdirectory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateSyncConfig`](crate::types::TemplateSyncConfig).
    pub fn build(self) -> crate::types::TemplateSyncConfig {
        crate::types::TemplateSyncConfig {
            template_name: self.template_name,
            template_type: self.template_type,
            repository_provider: self.repository_provider,
            repository_name: self.repository_name,
            branch: self.branch,
            subdirectory: self.subdirectory,
        }
    }
}
