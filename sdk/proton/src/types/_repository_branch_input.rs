// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detail input data for a linked repository branch.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositoryBranchInput {
    /// <p>The repository provider.</p>
    #[doc(hidden)]
    pub provider: std::option::Option<crate::types::RepositoryProvider>,
    /// <p>The repository name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The repository branch.</p>
    #[doc(hidden)]
    pub branch: std::option::Option<std::string::String>,
}
impl RepositoryBranchInput {
    /// <p>The repository provider.</p>
    pub fn provider(&self) -> std::option::Option<&crate::types::RepositoryProvider> {
        self.provider.as_ref()
    }
    /// <p>The repository name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The repository branch.</p>
    pub fn branch(&self) -> std::option::Option<&str> {
        self.branch.as_deref()
    }
}
impl RepositoryBranchInput {
    /// Creates a new builder-style object to manufacture [`RepositoryBranchInput`](crate::types::RepositoryBranchInput).
    pub fn builder() -> crate::types::builders::RepositoryBranchInputBuilder {
        crate::types::builders::RepositoryBranchInputBuilder::default()
    }
}

/// A builder for [`RepositoryBranchInput`](crate::types::RepositoryBranchInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryBranchInputBuilder {
    pub(crate) provider: std::option::Option<crate::types::RepositoryProvider>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) branch: std::option::Option<std::string::String>,
}
impl RepositoryBranchInputBuilder {
    /// <p>The repository provider.</p>
    pub fn provider(mut self, input: crate::types::RepositoryProvider) -> Self {
        self.provider = Some(input);
        self
    }
    /// <p>The repository provider.</p>
    pub fn set_provider(
        mut self,
        input: std::option::Option<crate::types::RepositoryProvider>,
    ) -> Self {
        self.provider = input;
        self
    }
    /// <p>The repository name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The repository name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The repository branch.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch = Some(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositoryBranchInput`](crate::types::RepositoryBranchInput).
    pub fn build(self) -> crate::types::RepositoryBranchInput {
        crate::types::RepositoryBranchInput {
            provider: self.provider,
            name: self.name,
            branch: self.branch,
        }
    }
}
