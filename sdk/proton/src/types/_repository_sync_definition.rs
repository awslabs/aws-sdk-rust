// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A repository sync definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RepositorySyncDefinition {
    /// <p>The resource that is synced to.</p>
    pub target: ::std::string::String,
    /// <p>The resource that is synced from.</p>
    pub parent: ::std::string::String,
    /// <p>The repository branch.</p>
    pub branch: ::std::string::String,
    /// <p>The directory in the repository.</p>
    pub directory: ::std::string::String,
}
impl RepositorySyncDefinition {
    /// <p>The resource that is synced to.</p>
    pub fn target(&self) -> &str {
        use std::ops::Deref;
        self.target.deref()
    }
    /// <p>The resource that is synced from.</p>
    pub fn parent(&self) -> &str {
        use std::ops::Deref;
        self.parent.deref()
    }
    /// <p>The repository branch.</p>
    pub fn branch(&self) -> &str {
        use std::ops::Deref;
        self.branch.deref()
    }
    /// <p>The directory in the repository.</p>
    pub fn directory(&self) -> &str {
        use std::ops::Deref;
        self.directory.deref()
    }
}
impl RepositorySyncDefinition {
    /// Creates a new builder-style object to manufacture [`RepositorySyncDefinition`](crate::types::RepositorySyncDefinition).
    pub fn builder() -> crate::types::builders::RepositorySyncDefinitionBuilder {
        crate::types::builders::RepositorySyncDefinitionBuilder::default()
    }
}

/// A builder for [`RepositorySyncDefinition`](crate::types::RepositorySyncDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RepositorySyncDefinitionBuilder {
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) parent: ::std::option::Option<::std::string::String>,
    pub(crate) branch: ::std::option::Option<::std::string::String>,
    pub(crate) directory: ::std::option::Option<::std::string::String>,
}
impl RepositorySyncDefinitionBuilder {
    /// <p>The resource that is synced to.</p>
    /// This field is required.
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource that is synced to.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The resource that is synced to.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>The resource that is synced from.</p>
    /// This field is required.
    pub fn parent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource that is synced from.</p>
    pub fn set_parent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent = input;
        self
    }
    /// <p>The resource that is synced from.</p>
    pub fn get_parent(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent
    }
    /// <p>The repository branch.</p>
    /// This field is required.
    pub fn branch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The repository branch.</p>
    pub fn get_branch(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch
    }
    /// <p>The directory in the repository.</p>
    /// This field is required.
    pub fn directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory in the repository.</p>
    pub fn set_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory = input;
        self
    }
    /// <p>The directory in the repository.</p>
    pub fn get_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory
    }
    /// Consumes the builder and constructs a [`RepositorySyncDefinition`](crate::types::RepositorySyncDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`target`](crate::types::builders::RepositorySyncDefinitionBuilder::target)
    /// - [`parent`](crate::types::builders::RepositorySyncDefinitionBuilder::parent)
    /// - [`branch`](crate::types::builders::RepositorySyncDefinitionBuilder::branch)
    /// - [`directory`](crate::types::builders::RepositorySyncDefinitionBuilder::directory)
    pub fn build(self) -> ::std::result::Result<crate::types::RepositorySyncDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RepositorySyncDefinition {
            target: self.target.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target",
                    "target was not specified but it is required when building RepositorySyncDefinition",
                )
            })?,
            parent: self.parent.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parent",
                    "parent was not specified but it is required when building RepositorySyncDefinition",
                )
            })?,
            branch: self.branch.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "branch",
                    "branch was not specified but it is required when building RepositorySyncDefinition",
                )
            })?,
            directory: self.directory.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "directory",
                    "directory was not specified but it is required when building RepositorySyncDefinition",
                )
            })?,
        })
    }
}
