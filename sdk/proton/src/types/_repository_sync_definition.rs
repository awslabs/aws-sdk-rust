// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A repository sync definition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositorySyncDefinition {
    /// <p>The resource that is synced to.</p>
    #[doc(hidden)]
    pub target: std::option::Option<std::string::String>,
    /// <p>The resource that is synced from.</p>
    #[doc(hidden)]
    pub parent: std::option::Option<std::string::String>,
    /// <p>The repository branch.</p>
    #[doc(hidden)]
    pub branch: std::option::Option<std::string::String>,
    /// <p>The directory in the repository.</p>
    #[doc(hidden)]
    pub directory: std::option::Option<std::string::String>,
}
impl RepositorySyncDefinition {
    /// <p>The resource that is synced to.</p>
    pub fn target(&self) -> std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>The resource that is synced from.</p>
    pub fn parent(&self) -> std::option::Option<&str> {
        self.parent.as_deref()
    }
    /// <p>The repository branch.</p>
    pub fn branch(&self) -> std::option::Option<&str> {
        self.branch.as_deref()
    }
    /// <p>The directory in the repository.</p>
    pub fn directory(&self) -> std::option::Option<&str> {
        self.directory.as_deref()
    }
}
impl RepositorySyncDefinition {
    /// Creates a new builder-style object to manufacture [`RepositorySyncDefinition`](crate::types::RepositorySyncDefinition).
    pub fn builder() -> crate::types::builders::RepositorySyncDefinitionBuilder {
        crate::types::builders::RepositorySyncDefinitionBuilder::default()
    }
}

/// A builder for [`RepositorySyncDefinition`](crate::types::RepositorySyncDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositorySyncDefinitionBuilder {
    pub(crate) target: std::option::Option<std::string::String>,
    pub(crate) parent: std::option::Option<std::string::String>,
    pub(crate) branch: std::option::Option<std::string::String>,
    pub(crate) directory: std::option::Option<std::string::String>,
}
impl RepositorySyncDefinitionBuilder {
    /// <p>The resource that is synced to.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.target = Some(input.into());
        self
    }
    /// <p>The resource that is synced to.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The resource that is synced from.</p>
    pub fn parent(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent = Some(input.into());
        self
    }
    /// <p>The resource that is synced from.</p>
    pub fn set_parent(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent = input;
        self
    }
    /// <p>The repository branch.</p>
    pub fn branch(mut self, input: impl Into<std::string::String>) -> Self {
        self.branch = Some(input.into());
        self
    }
    /// <p>The repository branch.</p>
    pub fn set_branch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The directory in the repository.</p>
    pub fn directory(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory = Some(input.into());
        self
    }
    /// <p>The directory in the repository.</p>
    pub fn set_directory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositorySyncDefinition`](crate::types::RepositorySyncDefinition).
    pub fn build(self) -> crate::types::RepositorySyncDefinition {
        crate::types::RepositorySyncDefinition {
            target: self.target,
            parent: self.parent,
            branch: self.branch,
            directory: self.directory,
        }
    }
}
