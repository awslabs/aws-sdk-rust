// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filtering criterion to scope down the result list of the <code>ListServiceInstances</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListServiceInstancesFilter {
    /// <p>The name of a filtering criterion.</p>
    #[doc(hidden)]
    pub key: std::option::Option<crate::types::ListServiceInstancesFilterBy>,
    /// <p>A value to filter by.</p>
    /// <p>With the date/time keys (<code>*At{Before,After}</code>), the value is a valid <a href="https://datatracker.ietf.org/doc/html/rfc3339.html">RFC 3339</a> string with no UTC offset and with an optional fractional precision (for example, <code>1985-04-12T23:20:50.52Z</code>).</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl ListServiceInstancesFilter {
    /// <p>The name of a filtering criterion.</p>
    pub fn key(&self) -> std::option::Option<&crate::types::ListServiceInstancesFilterBy> {
        self.key.as_ref()
    }
    /// <p>A value to filter by.</p>
    /// <p>With the date/time keys (<code>*At{Before,After}</code>), the value is a valid <a href="https://datatracker.ietf.org/doc/html/rfc3339.html">RFC 3339</a> string with no UTC offset and with an optional fractional precision (for example, <code>1985-04-12T23:20:50.52Z</code>).</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ListServiceInstancesFilter {
    /// Creates a new builder-style object to manufacture [`ListServiceInstancesFilter`](crate::types::ListServiceInstancesFilter).
    pub fn builder() -> crate::types::builders::ListServiceInstancesFilterBuilder {
        crate::types::builders::ListServiceInstancesFilterBuilder::default()
    }
}

/// A builder for [`ListServiceInstancesFilter`](crate::types::ListServiceInstancesFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListServiceInstancesFilterBuilder {
    pub(crate) key: std::option::Option<crate::types::ListServiceInstancesFilterBy>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl ListServiceInstancesFilterBuilder {
    /// <p>The name of a filtering criterion.</p>
    pub fn key(mut self, input: crate::types::ListServiceInstancesFilterBy) -> Self {
        self.key = Some(input);
        self
    }
    /// <p>The name of a filtering criterion.</p>
    pub fn set_key(
        mut self,
        input: std::option::Option<crate::types::ListServiceInstancesFilterBy>,
    ) -> Self {
        self.key = input;
        self
    }
    /// <p>A value to filter by.</p>
    /// <p>With the date/time keys (<code>*At{Before,After}</code>), the value is a valid <a href="https://datatracker.ietf.org/doc/html/rfc3339.html">RFC 3339</a> string with no UTC offset and with an optional fractional precision (for example, <code>1985-04-12T23:20:50.52Z</code>).</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>A value to filter by.</p>
    /// <p>With the date/time keys (<code>*At{Before,After}</code>), the value is a valid <a href="https://datatracker.ietf.org/doc/html/rfc3339.html">RFC 3339</a> string with no UTC offset and with an optional fractional precision (for example, <code>1985-04-12T23:20:50.52Z</code>).</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ListServiceInstancesFilter`](crate::types::ListServiceInstancesFilter).
    pub fn build(self) -> crate::types::ListServiceInstancesFilter {
        crate::types::ListServiceInstancesFilter {
            key: self.key,
            value: self.value,
        }
    }
}
