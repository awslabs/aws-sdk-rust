// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed data of an Proton service template version resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceTemplateVersion {
    /// <p>The name of the version of a service template.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>The latest major version that's associated with the version of a service template.</p>
    #[doc(hidden)]
    pub major_version: std::option::Option<std::string::String>,
    /// <p>The minor version of a service template.</p>
    #[doc(hidden)]
    pub minor_version: std::option::Option<std::string::String>,
    /// <p>The recommended minor version of the service template.</p>
    #[doc(hidden)]
    pub recommended_minor_version: std::option::Option<std::string::String>,
    /// <p>The service template version status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TemplateVersionStatus>,
    /// <p>A service template version status message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>A description of the version of a service template.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the version of a service template was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the version of a service template was last modified.</p>
    #[doc(hidden)]
    pub last_modified_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An array of compatible environment template names for the major version of a service template.</p>
    #[doc(hidden)]
    pub compatible_environment_templates:
        std::option::Option<std::vec::Vec<crate::types::CompatibleEnvironmentTemplate>>,
    /// <p>The schema of the version of a service template.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::string::String>,
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    #[doc(hidden)]
    pub supported_component_sources: std::option::Option<
        std::vec::Vec<crate::types::ServiceTemplateSupportedComponentSourceType>,
    >,
}
impl ServiceTemplateVersion {
    /// <p>The name of the version of a service template.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub fn major_version(&self) -> std::option::Option<&str> {
        self.major_version.as_deref()
    }
    /// <p>The minor version of a service template.</p>
    pub fn minor_version(&self) -> std::option::Option<&str> {
        self.minor_version.as_deref()
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn recommended_minor_version(&self) -> std::option::Option<&str> {
        self.recommended_minor_version.as_deref()
    }
    /// <p>The service template version status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TemplateVersionStatus> {
        self.status.as_ref()
    }
    /// <p>A service template version status message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>A description of the version of a service template.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time when the version of a service template was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time when the version of a service template was last modified.</p>
    pub fn last_modified_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_at.as_ref()
    }
    /// <p>An array of compatible environment template names for the major version of a service template.</p>
    pub fn compatible_environment_templates(
        &self,
    ) -> std::option::Option<&[crate::types::CompatibleEnvironmentTemplate]> {
        self.compatible_environment_templates.as_deref()
    }
    /// <p>The schema of the version of a service template.</p>
    pub fn schema(&self) -> std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn supported_component_sources(
        &self,
    ) -> std::option::Option<&[crate::types::ServiceTemplateSupportedComponentSourceType]> {
        self.supported_component_sources.as_deref()
    }
}
impl std::fmt::Debug for ServiceTemplateVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateVersion");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field(
            "compatible_environment_templates",
            &self.compatible_environment_templates,
        );
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "supported_component_sources",
            &self.supported_component_sources,
        );
        formatter.finish()
    }
}
impl ServiceTemplateVersion {
    /// Creates a new builder-style object to manufacture [`ServiceTemplateVersion`](crate::types::ServiceTemplateVersion).
    pub fn builder() -> crate::types::builders::ServiceTemplateVersionBuilder {
        crate::types::builders::ServiceTemplateVersionBuilder::default()
    }
}

/// A builder for [`ServiceTemplateVersion`](crate::types::ServiceTemplateVersion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ServiceTemplateVersionBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) major_version: std::option::Option<std::string::String>,
    pub(crate) minor_version: std::option::Option<std::string::String>,
    pub(crate) recommended_minor_version: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TemplateVersionStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modified_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) compatible_environment_templates:
        std::option::Option<std::vec::Vec<crate::types::CompatibleEnvironmentTemplate>>,
    pub(crate) schema: std::option::Option<std::string::String>,
    pub(crate) supported_component_sources: std::option::Option<
        std::vec::Vec<crate::types::ServiceTemplateSupportedComponentSourceType>,
    >,
}
impl ServiceTemplateVersionBuilder {
    /// <p>The name of the version of a service template.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the version of a service template.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.major_version = Some(input.into());
        self
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub fn set_major_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>The minor version of a service template.</p>
    pub fn minor_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.minor_version = Some(input.into());
        self
    }
    /// <p>The minor version of a service template.</p>
    pub fn set_minor_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.minor_version = input;
        self
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn recommended_minor_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommended_minor_version = Some(input.into());
        self
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn set_recommended_minor_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommended_minor_version = input;
        self
    }
    /// <p>The service template version status.</p>
    pub fn status(mut self, input: crate::types::TemplateVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The service template version status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::TemplateVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A service template version status message.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A service template version status message.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A description of the version of a service template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the version of a service template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The time when the version of a service template was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time when the version of a service template was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the version of a service template was last modified.</p>
    pub fn last_modified_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = Some(input);
        self
    }
    /// <p>The time when the version of a service template was last modified.</p>
    pub fn set_last_modified_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_at = input;
        self
    }
    /// Appends an item to `compatible_environment_templates`.
    ///
    /// To override the contents of this collection use [`set_compatible_environment_templates`](Self::set_compatible_environment_templates).
    ///
    /// <p>An array of compatible environment template names for the major version of a service template.</p>
    pub fn compatible_environment_templates(
        mut self,
        input: crate::types::CompatibleEnvironmentTemplate,
    ) -> Self {
        let mut v = self.compatible_environment_templates.unwrap_or_default();
        v.push(input);
        self.compatible_environment_templates = Some(v);
        self
    }
    /// <p>An array of compatible environment template names for the major version of a service template.</p>
    pub fn set_compatible_environment_templates(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CompatibleEnvironmentTemplate>>,
    ) -> Self {
        self.compatible_environment_templates = input;
        self
    }
    /// <p>The schema of the version of a service template.</p>
    pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema = Some(input.into());
        self
    }
    /// <p>The schema of the version of a service template.</p>
    pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// Appends an item to `supported_component_sources`.
    ///
    /// To override the contents of this collection use [`set_supported_component_sources`](Self::set_supported_component_sources).
    ///
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn supported_component_sources(
        mut self,
        input: crate::types::ServiceTemplateSupportedComponentSourceType,
    ) -> Self {
        let mut v = self.supported_component_sources.unwrap_or_default();
        v.push(input);
        self.supported_component_sources = Some(v);
        self
    }
    /// <p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_supported_component_sources(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::ServiceTemplateSupportedComponentSourceType>,
        >,
    ) -> Self {
        self.supported_component_sources = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceTemplateVersion`](crate::types::ServiceTemplateVersion).
    pub fn build(self) -> crate::types::ServiceTemplateVersion {
        crate::types::ServiceTemplateVersion {
            template_name: self.template_name,
            major_version: self.major_version,
            minor_version: self.minor_version,
            recommended_minor_version: self.recommended_minor_version,
            status: self.status,
            status_message: self.status_message,
            description: self.description,
            arn: self.arn,
            created_at: self.created_at,
            last_modified_at: self.last_modified_at,
            compatible_environment_templates: self.compatible_environment_templates,
            schema: self.schema,
            supported_component_sources: self.supported_component_sources,
        }
    }
}
impl std::fmt::Debug for ServiceTemplateVersionBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateVersionBuilder");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field(
            "compatible_environment_templates",
            &self.compatible_environment_templates,
        );
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "supported_component_sources",
            &self.supported_component_sources,
        );
        formatter.finish()
    }
}
