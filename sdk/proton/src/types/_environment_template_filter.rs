// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A search filter for environment templates.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnvironmentTemplateFilter {
    /// <p>Include <code>templateName</code> to filter search for a template name.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>Include <code>majorVersion</code> to filter search for a major version.</p>
    #[doc(hidden)]
    pub major_version: std::option::Option<std::string::String>,
}
impl EnvironmentTemplateFilter {
    /// <p>Include <code>templateName</code> to filter search for a template name.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>Include <code>majorVersion</code> to filter search for a major version.</p>
    pub fn major_version(&self) -> std::option::Option<&str> {
        self.major_version.as_deref()
    }
}
impl EnvironmentTemplateFilter {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplateFilter`](crate::types::EnvironmentTemplateFilter).
    pub fn builder() -> crate::types::builders::EnvironmentTemplateFilterBuilder {
        crate::types::builders::EnvironmentTemplateFilterBuilder::default()
    }
}

/// A builder for [`EnvironmentTemplateFilter`](crate::types::EnvironmentTemplateFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnvironmentTemplateFilterBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) major_version: std::option::Option<std::string::String>,
}
impl EnvironmentTemplateFilterBuilder {
    /// <p>Include <code>templateName</code> to filter search for a template name.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>Include <code>templateName</code> to filter search for a template name.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>Include <code>majorVersion</code> to filter search for a major version.</p>
    pub fn major_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.major_version = Some(input.into());
        self
    }
    /// <p>Include <code>majorVersion</code> to filter search for a major version.</p>
    pub fn set_major_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// Consumes the builder and constructs a [`EnvironmentTemplateFilter`](crate::types::EnvironmentTemplateFilter).
    pub fn build(self) -> crate::types::EnvironmentTemplateFilter {
        crate::types::EnvironmentTemplateFilter {
            template_name: self.template_name,
            major_version: self.major_version,
        }
    }
}
