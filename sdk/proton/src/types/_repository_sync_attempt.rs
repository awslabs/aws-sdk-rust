// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detail data for a repository sync attempt activated by a push to a repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RepositorySyncAttempt {
    /// <p>The time when the sync attempt started.</p>
    pub started_at: ::aws_smithy_types::DateTime,
    /// <p>The sync attempt status.</p>
    pub status: crate::types::RepositorySyncStatus,
    /// <p>Detail data for sync attempt events.</p>
    pub events: ::std::vec::Vec<crate::types::RepositorySyncEvent>,
}
impl RepositorySyncAttempt {
    /// <p>The time when the sync attempt started.</p>
    pub fn started_at(&self) -> &::aws_smithy_types::DateTime {
        &self.started_at
    }
    /// <p>The sync attempt status.</p>
    pub fn status(&self) -> &crate::types::RepositorySyncStatus {
        &self.status
    }
    /// <p>Detail data for sync attempt events.</p>
    pub fn events(&self) -> &[crate::types::RepositorySyncEvent] {
        use std::ops::Deref;
        self.events.deref()
    }
}
impl RepositorySyncAttempt {
    /// Creates a new builder-style object to manufacture [`RepositorySyncAttempt`](crate::types::RepositorySyncAttempt).
    pub fn builder() -> crate::types::builders::RepositorySyncAttemptBuilder {
        crate::types::builders::RepositorySyncAttemptBuilder::default()
    }
}

/// A builder for [`RepositorySyncAttempt`](crate::types::RepositorySyncAttempt).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RepositorySyncAttemptBuilder {
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::RepositorySyncStatus>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::RepositorySyncEvent>>,
}
impl RepositorySyncAttemptBuilder {
    /// <p>The time when the sync attempt started.</p>
    /// This field is required.
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the sync attempt started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time when the sync attempt started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The sync attempt status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::RepositorySyncStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sync attempt status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RepositorySyncStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The sync attempt status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RepositorySyncStatus> {
        &self.status
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>Detail data for sync attempt events.</p>
    pub fn events(mut self, input: crate::types::RepositorySyncEvent) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>Detail data for sync attempt events.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RepositorySyncEvent>>) -> Self {
        self.events = input;
        self
    }
    /// <p>Detail data for sync attempt events.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RepositorySyncEvent>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`RepositorySyncAttempt`](crate::types::RepositorySyncAttempt).
    /// This method will fail if any of the following fields are not set:
    /// - [`started_at`](crate::types::builders::RepositorySyncAttemptBuilder::started_at)
    /// - [`status`](crate::types::builders::RepositorySyncAttemptBuilder::status)
    /// - [`events`](crate::types::builders::RepositorySyncAttemptBuilder::events)
    pub fn build(self) -> ::std::result::Result<crate::types::RepositorySyncAttempt, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RepositorySyncAttempt {
            started_at: self.started_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "started_at",
                    "started_at was not specified but it is required when building RepositorySyncAttempt",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building RepositorySyncAttempt",
                )
            })?,
            events: self.events.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "events",
                    "events was not specified but it is required when building RepositorySyncAttempt",
                )
            })?,
        })
    }
}
