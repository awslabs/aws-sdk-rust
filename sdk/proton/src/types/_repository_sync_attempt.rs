// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detail data for a repository sync attempt activated by a push to a repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositorySyncAttempt {
    /// <p>The time when the sync attempt started.</p>
    #[doc(hidden)]
    pub started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The sync attempt status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RepositorySyncStatus>,
    /// <p>Detail data for sync attempt events.</p>
    #[doc(hidden)]
    pub events: std::option::Option<std::vec::Vec<crate::types::RepositorySyncEvent>>,
}
impl RepositorySyncAttempt {
    /// <p>The time when the sync attempt started.</p>
    pub fn started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The sync attempt status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RepositorySyncStatus> {
        self.status.as_ref()
    }
    /// <p>Detail data for sync attempt events.</p>
    pub fn events(&self) -> std::option::Option<&[crate::types::RepositorySyncEvent]> {
        self.events.as_deref()
    }
}
impl RepositorySyncAttempt {
    /// Creates a new builder-style object to manufacture [`RepositorySyncAttempt`](crate::types::RepositorySyncAttempt).
    pub fn builder() -> crate::types::builders::RepositorySyncAttemptBuilder {
        crate::types::builders::RepositorySyncAttemptBuilder::default()
    }
}

/// A builder for [`RepositorySyncAttempt`](crate::types::RepositorySyncAttempt).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositorySyncAttemptBuilder {
    pub(crate) started_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::RepositorySyncStatus>,
    pub(crate) events: std::option::Option<std::vec::Vec<crate::types::RepositorySyncEvent>>,
}
impl RepositorySyncAttemptBuilder {
    /// <p>The time when the sync attempt started.</p>
    pub fn started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started_at = Some(input);
        self
    }
    /// <p>The time when the sync attempt started.</p>
    pub fn set_started_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The sync attempt status.</p>
    pub fn status(mut self, input: crate::types::RepositorySyncStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The sync attempt status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RepositorySyncStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>Detail data for sync attempt events.</p>
    pub fn events(mut self, input: crate::types::RepositorySyncEvent) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = Some(v);
        self
    }
    /// <p>Detail data for sync attempt events.</p>
    pub fn set_events(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RepositorySyncEvent>>,
    ) -> Self {
        self.events = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositorySyncAttempt`](crate::types::RepositorySyncAttempt).
    pub fn build(self) -> crate::types::RepositorySyncAttempt {
        crate::types::RepositorySyncAttempt {
            started_at: self.started_at,
            status: self.status,
            events: self.events,
        }
    }
}
