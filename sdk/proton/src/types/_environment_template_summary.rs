// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The environment template data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnvironmentTemplateSummary {
    /// <p>The name of the environment template.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    pub arn: ::std::string::String,
    /// <p>The time when the environment template was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time when the environment template was last modified.</p>
    pub last_modified_at: ::aws_smithy_types::DateTime,
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the environment template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The recommended version of the environment template.</p>
    pub recommended_version: ::std::option::Option<::std::string::String>,
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub provisioning: ::std::option::Option<crate::types::Provisioning>,
}
impl EnvironmentTemplateSummary {
    /// <p>The name of the environment template.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The time when the environment template was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time when the environment template was last modified.</p>
    pub fn last_modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_at
    }
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A description of the environment template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The recommended version of the environment template.</p>
    pub fn recommended_version(&self) -> ::std::option::Option<&str> {
        self.recommended_version.as_deref()
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn provisioning(&self) -> ::std::option::Option<&crate::types::Provisioning> {
        self.provisioning.as_ref()
    }
}
impl ::std::fmt::Debug for EnvironmentTemplateSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplateSummary");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("recommended_version", &self.recommended_version);
        formatter.field("provisioning", &self.provisioning);
        formatter.finish()
    }
}
impl EnvironmentTemplateSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentTemplateSummary`](crate::types::EnvironmentTemplateSummary).
    pub fn builder() -> crate::types::builders::EnvironmentTemplateSummaryBuilder {
        crate::types::builders::EnvironmentTemplateSummaryBuilder::default()
    }
}

/// A builder for [`EnvironmentTemplateSummary`](crate::types::EnvironmentTemplateSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EnvironmentTemplateSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) recommended_version: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning: ::std::option::Option<crate::types::Provisioning>,
}
impl EnvironmentTemplateSummaryBuilder {
    /// <p>The name of the environment template.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time when the environment template was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the environment template was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the environment template was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time when the environment template was last modified.</p>
    /// This field is required.
    pub fn last_modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the environment template was last modified.</p>
    pub fn set_last_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_at = input;
        self
    }
    /// <p>The time when the environment template was last modified.</p>
    pub fn get_last_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_at
    }
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the environment template as displayed in the developer interface.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>A description of the environment template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the environment template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the environment template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The recommended version of the environment template.</p>
    pub fn recommended_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended version of the environment template.</p>
    pub fn set_recommended_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_version = input;
        self
    }
    /// <p>The recommended version of the environment template.</p>
    pub fn get_recommended_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_version
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn provisioning(mut self, input: crate::types::Provisioning) -> Self {
        self.provisioning = ::std::option::Option::Some(input);
        self
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn set_provisioning(mut self, input: ::std::option::Option<crate::types::Provisioning>) -> Self {
        self.provisioning = input;
        self
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn get_provisioning(&self) -> &::std::option::Option<crate::types::Provisioning> {
        &self.provisioning
    }
    /// Consumes the builder and constructs a [`EnvironmentTemplateSummary`](crate::types::EnvironmentTemplateSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::EnvironmentTemplateSummaryBuilder::name)
    /// - [`arn`](crate::types::builders::EnvironmentTemplateSummaryBuilder::arn)
    /// - [`created_at`](crate::types::builders::EnvironmentTemplateSummaryBuilder::created_at)
    /// - [`last_modified_at`](crate::types::builders::EnvironmentTemplateSummaryBuilder::last_modified_at)
    pub fn build(self) -> ::std::result::Result<crate::types::EnvironmentTemplateSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnvironmentTemplateSummary {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EnvironmentTemplateSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building EnvironmentTemplateSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building EnvironmentTemplateSummary",
                )
            })?,
            last_modified_at: self.last_modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_at",
                    "last_modified_at was not specified but it is required when building EnvironmentTemplateSummary",
                )
            })?,
            display_name: self.display_name,
            description: self.description,
            recommended_version: self.recommended_version,
            provisioning: self.provisioning,
        })
    }
}
impl ::std::fmt::Debug for EnvironmentTemplateSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentTemplateSummaryBuilder");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("recommended_version", &self.recommended_version);
        formatter.field("provisioning", &self.provisioning);
        formatter.finish()
    }
}
