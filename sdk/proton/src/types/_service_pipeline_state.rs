// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detailed data about the current state of the service pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ServicePipelineState {
    /// <p>The service spec that was used to create the service pipeline.</p>
    pub spec: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service template that was used to create the service pipeline.</p>
    pub template_name: ::std::string::String,
    /// <p>The major version of the service template that was used to create the service pipeline.</p>
    pub template_major_version: ::std::string::String,
    /// <p>The minor version of the service template that was used to create the service pipeline.</p>
    pub template_minor_version: ::std::string::String,
}
impl ServicePipelineState {
    /// <p>The service spec that was used to create the service pipeline.</p>
    pub fn spec(&self) -> ::std::option::Option<&str> {
        self.spec.as_deref()
    }
    /// <p>The name of the service template that was used to create the service pipeline.</p>
    pub fn template_name(&self) -> &str {
        use std::ops::Deref;
        self.template_name.deref()
    }
    /// <p>The major version of the service template that was used to create the service pipeline.</p>
    pub fn template_major_version(&self) -> &str {
        use std::ops::Deref;
        self.template_major_version.deref()
    }
    /// <p>The minor version of the service template that was used to create the service pipeline.</p>
    pub fn template_minor_version(&self) -> &str {
        use std::ops::Deref;
        self.template_minor_version.deref()
    }
}
impl ::std::fmt::Debug for ServicePipelineState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServicePipelineState");
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.finish()
    }
}
impl ServicePipelineState {
    /// Creates a new builder-style object to manufacture [`ServicePipelineState`](crate::types::ServicePipelineState).
    pub fn builder() -> crate::types::builders::ServicePipelineStateBuilder {
        crate::types::builders::ServicePipelineStateBuilder::default()
    }
}

/// A builder for [`ServicePipelineState`](crate::types::ServicePipelineState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ServicePipelineStateBuilder {
    pub(crate) spec: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_major_version: ::std::option::Option<::std::string::String>,
    pub(crate) template_minor_version: ::std::option::Option<::std::string::String>,
}
impl ServicePipelineStateBuilder {
    /// <p>The service spec that was used to create the service pipeline.</p>
    pub fn spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service spec that was used to create the service pipeline.</p>
    pub fn set_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.spec = input;
        self
    }
    /// <p>The service spec that was used to create the service pipeline.</p>
    pub fn get_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.spec
    }
    /// <p>The name of the service template that was used to create the service pipeline.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service template that was used to create the service pipeline.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the service template that was used to create the service pipeline.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The major version of the service template that was used to create the service pipeline.</p>
    /// This field is required.
    pub fn template_major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The major version of the service template that was used to create the service pipeline.</p>
    pub fn set_template_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_major_version = input;
        self
    }
    /// <p>The major version of the service template that was used to create the service pipeline.</p>
    pub fn get_template_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_major_version
    }
    /// <p>The minor version of the service template that was used to create the service pipeline.</p>
    /// This field is required.
    pub fn template_minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minor version of the service template that was used to create the service pipeline.</p>
    pub fn set_template_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_minor_version = input;
        self
    }
    /// <p>The minor version of the service template that was used to create the service pipeline.</p>
    pub fn get_template_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_minor_version
    }
    /// Consumes the builder and constructs a [`ServicePipelineState`](crate::types::ServicePipelineState).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_name`](crate::types::builders::ServicePipelineStateBuilder::template_name)
    /// - [`template_major_version`](crate::types::builders::ServicePipelineStateBuilder::template_major_version)
    /// - [`template_minor_version`](crate::types::builders::ServicePipelineStateBuilder::template_minor_version)
    pub fn build(self) -> ::std::result::Result<crate::types::ServicePipelineState, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServicePipelineState {
            spec: self.spec,
            template_name: self.template_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_name",
                    "template_name was not specified but it is required when building ServicePipelineState",
                )
            })?,
            template_major_version: self.template_major_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_major_version",
                    "template_major_version was not specified but it is required when building ServicePipelineState",
                )
            })?,
            template_minor_version: self.template_minor_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_minor_version",
                    "template_minor_version was not specified but it is required when building ServicePipelineState",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ServicePipelineStateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServicePipelineStateBuilder");
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.finish()
    }
}
