// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detail data for a resource sync event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceSyncEvent {
    /// <p>The type of event.</p>
    pub r#type: ::std::string::String,
    /// <p>The external ID for the event.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The time when the event occurred.</p>
    pub time: ::aws_smithy_types::DateTime,
    /// <p>A resource sync event.</p>
    pub event: ::std::string::String,
}
impl ResourceSyncEvent {
    /// <p>The type of event.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The external ID for the event.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The time when the event occurred.</p>
    pub fn time(&self) -> &::aws_smithy_types::DateTime {
        &self.time
    }
    /// <p>A resource sync event.</p>
    pub fn event(&self) -> &str {
        use std::ops::Deref;
        self.event.deref()
    }
}
impl ResourceSyncEvent {
    /// Creates a new builder-style object to manufacture [`ResourceSyncEvent`](crate::types::ResourceSyncEvent).
    pub fn builder() -> crate::types::builders::ResourceSyncEventBuilder {
        crate::types::builders::ResourceSyncEventBuilder::default()
    }
}

/// A builder for [`ResourceSyncEvent`](crate::types::ResourceSyncEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceSyncEventBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event: ::std::option::Option<::std::string::String>,
}
impl ResourceSyncEventBuilder {
    /// <p>The type of event.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of event.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of event.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The external ID for the event.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID for the event.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID for the event.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The time when the event occurred.</p>
    /// This field is required.
    pub fn time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the event occurred.</p>
    pub fn set_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.time = input;
        self
    }
    /// <p>The time when the event occurred.</p>
    pub fn get_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.time
    }
    /// <p>A resource sync event.</p>
    /// This field is required.
    pub fn event(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A resource sync event.</p>
    pub fn set_event(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event = input;
        self
    }
    /// <p>A resource sync event.</p>
    pub fn get_event(&self) -> &::std::option::Option<::std::string::String> {
        &self.event
    }
    /// Consumes the builder and constructs a [`ResourceSyncEvent`](crate::types::ResourceSyncEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ResourceSyncEventBuilder::r#type)
    /// - [`time`](crate::types::builders::ResourceSyncEventBuilder::time)
    /// - [`event`](crate::types::builders::ResourceSyncEventBuilder::event)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceSyncEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceSyncEvent {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ResourceSyncEvent",
                )
            })?,
            external_id: self.external_id,
            time: self.time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time",
                    "time was not specified but it is required when building ResourceSyncEvent",
                )
            })?,
            event: self.event.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event",
                    "event was not specified but it is required when building ResourceSyncEvent",
                )
            })?,
        })
    }
}
