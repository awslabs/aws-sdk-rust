// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary data of an Proton service template version resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ServiceTemplateVersionSummary {
    /// <p>The name of the service template.</p>
    pub template_name: ::std::string::String,
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub major_version: ::std::string::String,
    /// <p>The minor version of a service template.</p>
    pub minor_version: ::std::string::String,
    /// <p>The recommended minor version of the service template.</p>
    pub recommended_minor_version: ::std::option::Option<::std::string::String>,
    /// <p>The service template minor version status.</p>
    pub status: crate::types::TemplateVersionStatus,
    /// <p>A service template minor version status message.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>A description of the version of a service template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub arn: ::std::string::String,
    /// <p>The time when the version of a service template was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time when the version of a service template was last modified.</p>
    pub last_modified_at: ::aws_smithy_types::DateTime,
}
impl ServiceTemplateVersionSummary {
    /// <p>The name of the service template.</p>
    pub fn template_name(&self) -> &str {
        use std::ops::Deref;
        self.template_name.deref()
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub fn major_version(&self) -> &str {
        use std::ops::Deref;
        self.major_version.deref()
    }
    /// <p>The minor version of a service template.</p>
    pub fn minor_version(&self) -> &str {
        use std::ops::Deref;
        self.minor_version.deref()
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn recommended_minor_version(&self) -> ::std::option::Option<&str> {
        self.recommended_minor_version.as_deref()
    }
    /// <p>The service template minor version status.</p>
    pub fn status(&self) -> &crate::types::TemplateVersionStatus {
        &self.status
    }
    /// <p>A service template minor version status message.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>A description of the version of a service template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The time when the version of a service template was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time when the version of a service template was last modified.</p>
    pub fn last_modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_at
    }
}
impl ::std::fmt::Debug for ServiceTemplateVersionSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateVersionSummary");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.finish()
    }
}
impl ServiceTemplateVersionSummary {
    /// Creates a new builder-style object to manufacture [`ServiceTemplateVersionSummary`](crate::types::ServiceTemplateVersionSummary).
    pub fn builder() -> crate::types::builders::ServiceTemplateVersionSummaryBuilder {
        crate::types::builders::ServiceTemplateVersionSummaryBuilder::default()
    }
}

/// A builder for [`ServiceTemplateVersionSummary`](crate::types::ServiceTemplateVersionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ServiceTemplateVersionSummaryBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) major_version: ::std::option::Option<::std::string::String>,
    pub(crate) minor_version: ::std::option::Option<::std::string::String>,
    pub(crate) recommended_minor_version: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TemplateVersionStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServiceTemplateVersionSummaryBuilder {
    /// <p>The name of the service template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the service template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    /// This field is required.
    pub fn major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub fn set_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_version = input;
        self
    }
    /// <p>The latest major version that's associated with the version of a service template.</p>
    pub fn get_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_version
    }
    /// <p>The minor version of a service template.</p>
    /// This field is required.
    pub fn minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minor version of a service template.</p>
    pub fn set_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.minor_version = input;
        self
    }
    /// <p>The minor version of a service template.</p>
    pub fn get_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.minor_version
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn recommended_minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommended_minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn set_recommended_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommended_minor_version = input;
        self
    }
    /// <p>The recommended minor version of the service template.</p>
    pub fn get_recommended_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommended_minor_version
    }
    /// <p>The service template minor version status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TemplateVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service template minor version status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TemplateVersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The service template minor version status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TemplateVersionStatus> {
        &self.status
    }
    /// <p>A service template minor version status message.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service template minor version status message.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A service template minor version status message.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>A description of the version of a service template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the version of a service template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the version of a service template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the version of a service template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time when the version of a service template was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the version of a service template was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the version of a service template was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time when the version of a service template was last modified.</p>
    /// This field is required.
    pub fn last_modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the version of a service template was last modified.</p>
    pub fn set_last_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_at = input;
        self
    }
    /// <p>The time when the version of a service template was last modified.</p>
    pub fn get_last_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_at
    }
    /// Consumes the builder and constructs a [`ServiceTemplateVersionSummary`](crate::types::ServiceTemplateVersionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_name`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::template_name)
    /// - [`major_version`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::major_version)
    /// - [`minor_version`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::minor_version)
    /// - [`status`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::status)
    /// - [`arn`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::arn)
    /// - [`created_at`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::created_at)
    /// - [`last_modified_at`](crate::types::builders::ServiceTemplateVersionSummaryBuilder::last_modified_at)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceTemplateVersionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceTemplateVersionSummary {
            template_name: self.template_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_name",
                    "template_name was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
            major_version: self.major_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "major_version",
                    "major_version was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
            minor_version: self.minor_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "minor_version",
                    "minor_version was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
            recommended_minor_version: self.recommended_minor_version,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
            status_message: self.status_message,
            description: self.description,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
            last_modified_at: self.last_modified_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_at",
                    "last_modified_at was not specified but it is required when building ServiceTemplateVersionSummary",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ServiceTemplateVersionSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceTemplateVersionSummaryBuilder");
        formatter.field("template_name", &self.template_name);
        formatter.field("major_version", &self.major_version);
        formatter.field("minor_version", &self.minor_version);
        formatter.field("recommended_minor_version", &self.recommended_minor_version);
        formatter.field("status", &self.status);
        formatter.field("status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("arn", &self.arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_modified_at", &self.last_modified_at);
        formatter.finish()
    }
}
