// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary data of an Proton environment resource. An Proton environment is a set of resources shared across Proton services.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnvironmentSummary {
    /// <p>The name of the environment.</p>
    pub name: ::std::string::String,
    /// <p>The description of the environment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The time when the environment was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time when a deployment of the environment was last attempted.</p>
    pub last_deployment_attempted_at: ::aws_smithy_types::DateTime,
    /// <p>The time when the environment was last deployed successfully.</p>
    pub last_deployment_succeeded_at: ::aws_smithy_types::DateTime,
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the environment template.</p>
    pub template_name: ::std::string::String,
    /// <p>The major version of the environment template.</p>
    pub template_major_version: ::std::string::String,
    /// <p>The minor version of the environment template.</p>
    pub template_minor_version: ::std::string::String,
    /// <p>The environment deployment status.</p>
    pub deployment_status: crate::types::DeploymentStatus,
    /// <p>An environment deployment status message.</p>
    pub deployment_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.</p>
    pub proton_service_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the environment account connection that the environment is associated with.</p>
    pub environment_account_connection_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub environment_account_id: ::std::option::Option<::std::string::String>,
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub provisioning: ::std::option::Option<crate::types::Provisioning>,
    /// <p>The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision.</p>
    /// <p>The environment must have a <code>componentRoleArn</code> to allow directly defined components to be associated with the environment.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub component_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the last attempted deployment of this environment.</p>
    pub last_attempted_deployment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the last successful deployment of this environment.</p>
    pub last_succeeded_deployment_id: ::std::option::Option<::std::string::String>,
}
impl EnvironmentSummary {
    /// <p>The name of the environment.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the environment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The time when the environment was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time when a deployment of the environment was last attempted.</p>
    pub fn last_deployment_attempted_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_deployment_attempted_at
    }
    /// <p>The time when the environment was last deployed successfully.</p>
    pub fn last_deployment_succeeded_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_deployment_succeeded_at
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the environment template.</p>
    pub fn template_name(&self) -> &str {
        use std::ops::Deref;
        self.template_name.deref()
    }
    /// <p>The major version of the environment template.</p>
    pub fn template_major_version(&self) -> &str {
        use std::ops::Deref;
        self.template_major_version.deref()
    }
    /// <p>The minor version of the environment template.</p>
    pub fn template_minor_version(&self) -> &str {
        use std::ops::Deref;
        self.template_minor_version.deref()
    }
    /// <p>The environment deployment status.</p>
    pub fn deployment_status(&self) -> &crate::types::DeploymentStatus {
        &self.deployment_status
    }
    /// <p>An environment deployment status message.</p>
    pub fn deployment_status_message(&self) -> ::std::option::Option<&str> {
        self.deployment_status_message.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.</p>
    pub fn proton_service_role_arn(&self) -> ::std::option::Option<&str> {
        self.proton_service_role_arn.as_deref()
    }
    /// <p>The ID of the environment account connection that the environment is associated with.</p>
    pub fn environment_account_connection_id(&self) -> ::std::option::Option<&str> {
        self.environment_account_connection_id.as_deref()
    }
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub fn environment_account_id(&self) -> ::std::option::Option<&str> {
        self.environment_account_id.as_deref()
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn provisioning(&self) -> ::std::option::Option<&crate::types::Provisioning> {
        self.provisioning.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision.</p>
    /// <p>The environment must have a <code>componentRoleArn</code> to allow directly defined components to be associated with the environment.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn component_role_arn(&self) -> ::std::option::Option<&str> {
        self.component_role_arn.as_deref()
    }
    /// <p>The ID of the last attempted deployment of this environment.</p>
    pub fn last_attempted_deployment_id(&self) -> ::std::option::Option<&str> {
        self.last_attempted_deployment_id.as_deref()
    }
    /// <p>The ID of the last successful deployment of this environment.</p>
    pub fn last_succeeded_deployment_id(&self) -> ::std::option::Option<&str> {
        self.last_succeeded_deployment_id.as_deref()
    }
}
impl ::std::fmt::Debug for EnvironmentSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentSummary");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("last_deployment_attempted_at", &self.last_deployment_attempted_at);
        formatter.field("last_deployment_succeeded_at", &self.last_deployment_succeeded_at);
        formatter.field("arn", &self.arn);
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field("deployment_status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("proton_service_role_arn", &self.proton_service_role_arn);
        formatter.field("environment_account_connection_id", &self.environment_account_connection_id);
        formatter.field("environment_account_id", &self.environment_account_id);
        formatter.field("provisioning", &self.provisioning);
        formatter.field("component_role_arn", &self.component_role_arn);
        formatter.field("last_attempted_deployment_id", &self.last_attempted_deployment_id);
        formatter.field("last_succeeded_deployment_id", &self.last_succeeded_deployment_id);
        formatter.finish()
    }
}
impl EnvironmentSummary {
    /// Creates a new builder-style object to manufacture [`EnvironmentSummary`](crate::types::EnvironmentSummary).
    pub fn builder() -> crate::types::builders::EnvironmentSummaryBuilder {
        crate::types::builders::EnvironmentSummaryBuilder::default()
    }
}

/// A builder for [`EnvironmentSummary`](crate::types::EnvironmentSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EnvironmentSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_deployment_attempted_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_deployment_succeeded_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_major_version: ::std::option::Option<::std::string::String>,
    pub(crate) template_minor_version: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_status: ::std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) deployment_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) proton_service_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) environment_account_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) environment_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning: ::std::option::Option<crate::types::Provisioning>,
    pub(crate) component_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) last_attempted_deployment_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_succeeded_deployment_id: ::std::option::Option<::std::string::String>,
}
impl EnvironmentSummaryBuilder {
    /// <p>The name of the environment.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the environment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the environment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the environment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the environment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The time when the environment was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the environment was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the environment was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time when a deployment of the environment was last attempted.</p>
    /// This field is required.
    pub fn last_deployment_attempted_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_deployment_attempted_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when a deployment of the environment was last attempted.</p>
    pub fn set_last_deployment_attempted_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_deployment_attempted_at = input;
        self
    }
    /// <p>The time when a deployment of the environment was last attempted.</p>
    pub fn get_last_deployment_attempted_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_deployment_attempted_at
    }
    /// <p>The time when the environment was last deployed successfully.</p>
    /// This field is required.
    pub fn last_deployment_succeeded_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_deployment_succeeded_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the environment was last deployed successfully.</p>
    pub fn set_last_deployment_succeeded_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_deployment_succeeded_at = input;
        self
    }
    /// <p>The time when the environment was last deployed successfully.</p>
    pub fn get_last_deployment_succeeded_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_deployment_succeeded_at
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the environment.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the environment template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the environment template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The major version of the environment template.</p>
    /// This field is required.
    pub fn template_major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The major version of the environment template.</p>
    pub fn set_template_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_major_version = input;
        self
    }
    /// <p>The major version of the environment template.</p>
    pub fn get_template_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_major_version
    }
    /// <p>The minor version of the environment template.</p>
    /// This field is required.
    pub fn template_minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minor version of the environment template.</p>
    pub fn set_template_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_minor_version = input;
        self
    }
    /// <p>The minor version of the environment template.</p>
    pub fn get_template_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_minor_version
    }
    /// <p>The environment deployment status.</p>
    /// This field is required.
    pub fn deployment_status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.deployment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The environment deployment status.</p>
    pub fn set_deployment_status(mut self, input: ::std::option::Option<crate::types::DeploymentStatus>) -> Self {
        self.deployment_status = input;
        self
    }
    /// <p>The environment deployment status.</p>
    pub fn get_deployment_status(&self) -> &::std::option::Option<crate::types::DeploymentStatus> {
        &self.deployment_status
    }
    /// <p>An environment deployment status message.</p>
    pub fn deployment_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An environment deployment status message.</p>
    pub fn set_deployment_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_status_message = input;
        self
    }
    /// <p>An environment deployment status message.</p>
    pub fn get_deployment_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_status_message
    }
    /// <p>The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.</p>
    pub fn proton_service_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.proton_service_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.</p>
    pub fn set_proton_service_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.proton_service_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make calls to other services on your behalf.</p>
    pub fn get_proton_service_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.proton_service_role_arn
    }
    /// <p>The ID of the environment account connection that the environment is associated with.</p>
    pub fn environment_account_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_account_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment account connection that the environment is associated with.</p>
    pub fn set_environment_account_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_account_connection_id = input;
        self
    }
    /// <p>The ID of the environment account connection that the environment is associated with.</p>
    pub fn get_environment_account_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_account_connection_id
    }
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub fn environment_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub fn set_environment_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_account_id = input;
        self
    }
    /// <p>The ID of the environment account that the environment infrastructure resources are provisioned in.</p>
    pub fn get_environment_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_account_id
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn provisioning(mut self, input: crate::types::Provisioning) -> Self {
        self.provisioning = ::std::option::Option::Some(input);
        self
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn set_provisioning(mut self, input: ::std::option::Option<crate::types::Provisioning>) -> Self {
        self.provisioning = input;
        self
    }
    /// <p>When included, indicates that the environment template is for customer provisioned and managed infrastructure.</p>
    pub fn get_provisioning(&self) -> &::std::option::Option<crate::types::Provisioning> {
        &self.provisioning
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision.</p>
    /// <p>The environment must have a <code>componentRoleArn</code> to allow directly defined components to be associated with the environment.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn component_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.component_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision.</p>
    /// <p>The environment must have a <code>componentRoleArn</code> to allow directly defined components to be associated with the environment.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn set_component_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.component_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision.</p>
    /// <p>The environment must have a <code>componentRoleArn</code> to allow directly defined components to be associated with the environment.</p>
    /// <p>For more information about components, see <a href="https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html">Proton components</a> in the <i>Proton User Guide</i>.</p>
    pub fn get_component_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.component_role_arn
    }
    /// <p>The ID of the last attempted deployment of this environment.</p>
    pub fn last_attempted_deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_attempted_deployment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the last attempted deployment of this environment.</p>
    pub fn set_last_attempted_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_attempted_deployment_id = input;
        self
    }
    /// <p>The ID of the last attempted deployment of this environment.</p>
    pub fn get_last_attempted_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_attempted_deployment_id
    }
    /// <p>The ID of the last successful deployment of this environment.</p>
    pub fn last_succeeded_deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_succeeded_deployment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the last successful deployment of this environment.</p>
    pub fn set_last_succeeded_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_succeeded_deployment_id = input;
        self
    }
    /// <p>The ID of the last successful deployment of this environment.</p>
    pub fn get_last_succeeded_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_succeeded_deployment_id
    }
    /// Consumes the builder and constructs a [`EnvironmentSummary`](crate::types::EnvironmentSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::EnvironmentSummaryBuilder::name)
    /// - [`created_at`](crate::types::builders::EnvironmentSummaryBuilder::created_at)
    /// - [`last_deployment_attempted_at`](crate::types::builders::EnvironmentSummaryBuilder::last_deployment_attempted_at)
    /// - [`last_deployment_succeeded_at`](crate::types::builders::EnvironmentSummaryBuilder::last_deployment_succeeded_at)
    /// - [`arn`](crate::types::builders::EnvironmentSummaryBuilder::arn)
    /// - [`template_name`](crate::types::builders::EnvironmentSummaryBuilder::template_name)
    /// - [`template_major_version`](crate::types::builders::EnvironmentSummaryBuilder::template_major_version)
    /// - [`template_minor_version`](crate::types::builders::EnvironmentSummaryBuilder::template_minor_version)
    /// - [`deployment_status`](crate::types::builders::EnvironmentSummaryBuilder::deployment_status)
    pub fn build(self) -> ::std::result::Result<crate::types::EnvironmentSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnvironmentSummary {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            description: self.description,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            last_deployment_attempted_at: self.last_deployment_attempted_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_deployment_attempted_at",
                    "last_deployment_attempted_at was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            last_deployment_succeeded_at: self.last_deployment_succeeded_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_deployment_succeeded_at",
                    "last_deployment_succeeded_at was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            template_name: self.template_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_name",
                    "template_name was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            template_major_version: self.template_major_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_major_version",
                    "template_major_version was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            template_minor_version: self.template_minor_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_minor_version",
                    "template_minor_version was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            deployment_status: self.deployment_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "deployment_status",
                    "deployment_status was not specified but it is required when building EnvironmentSummary",
                )
            })?,
            deployment_status_message: self.deployment_status_message,
            proton_service_role_arn: self.proton_service_role_arn,
            environment_account_connection_id: self.environment_account_connection_id,
            environment_account_id: self.environment_account_id,
            provisioning: self.provisioning,
            component_role_arn: self.component_role_arn,
            last_attempted_deployment_id: self.last_attempted_deployment_id,
            last_succeeded_deployment_id: self.last_succeeded_deployment_id,
        })
    }
}
impl ::std::fmt::Debug for EnvironmentSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentSummaryBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("last_deployment_attempted_at", &self.last_deployment_attempted_at);
        formatter.field("last_deployment_succeeded_at", &self.last_deployment_succeeded_at);
        formatter.field("arn", &self.arn);
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.field("deployment_status", &self.deployment_status);
        formatter.field("deployment_status_message", &"*** Sensitive Data Redacted ***");
        formatter.field("proton_service_role_arn", &self.proton_service_role_arn);
        formatter.field("environment_account_connection_id", &self.environment_account_connection_id);
        formatter.field("environment_account_id", &self.environment_account_id);
        formatter.field("provisioning", &self.provisioning);
        formatter.field("component_role_arn", &self.component_role_arn);
        formatter.field("last_attempted_deployment_id", &self.last_attempted_deployment_id);
        formatter.field("last_succeeded_deployment_id", &self.last_succeeded_deployment_id);
        formatter.finish()
    }
}
