// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn accept_environment_account_connection_output_correct_errors(
    mut builder: crate::operation::accept_environment_account_connection::builders::AcceptEnvironmentAccountConnectionOutputBuilder,
) -> crate::operation::accept_environment_account_connection::builders::AcceptEnvironmentAccountConnectionOutputBuilder {
    if builder.environment_account_connection.is_none() {
        builder.environment_account_connection = {
            let builder = crate::types::builders::EnvironmentAccountConnectionBuilder::default();
            crate::serde_util::environment_account_connection_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cancel_component_deployment_output_correct_errors(
    mut builder: crate::operation::cancel_component_deployment::builders::CancelComponentDeploymentOutputBuilder,
) -> crate::operation::cancel_component_deployment::builders::CancelComponentDeploymentOutputBuilder {
    if builder.component.is_none() {
        builder.component = {
            let builder = crate::types::builders::ComponentBuilder::default();
            crate::serde_util::component_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cancel_environment_deployment_output_correct_errors(
    mut builder: crate::operation::cancel_environment_deployment::builders::CancelEnvironmentDeploymentOutputBuilder,
) -> crate::operation::cancel_environment_deployment::builders::CancelEnvironmentDeploymentOutputBuilder {
    if builder.environment.is_none() {
        builder.environment = {
            let builder = crate::types::builders::EnvironmentBuilder::default();
            crate::serde_util::environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cancel_service_instance_deployment_output_correct_errors(
    mut builder: crate::operation::cancel_service_instance_deployment::builders::CancelServiceInstanceDeploymentOutputBuilder,
) -> crate::operation::cancel_service_instance_deployment::builders::CancelServiceInstanceDeploymentOutputBuilder {
    if builder.service_instance.is_none() {
        builder.service_instance = {
            let builder = crate::types::builders::ServiceInstanceBuilder::default();
            crate::serde_util::service_instance_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cancel_service_pipeline_deployment_output_correct_errors(
    mut builder: crate::operation::cancel_service_pipeline_deployment::builders::CancelServicePipelineDeploymentOutputBuilder,
) -> crate::operation::cancel_service_pipeline_deployment::builders::CancelServicePipelineDeploymentOutputBuilder {
    if builder.pipeline.is_none() {
        builder.pipeline = {
            let builder = crate::types::builders::ServicePipelineBuilder::default();
            crate::serde_util::service_pipeline_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_component_output_correct_errors(
    mut builder: crate::operation::create_component::builders::CreateComponentOutputBuilder,
) -> crate::operation::create_component::builders::CreateComponentOutputBuilder {
    if builder.component.is_none() {
        builder.component = {
            let builder = crate::types::builders::ComponentBuilder::default();
            crate::serde_util::component_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_environment_output_correct_errors(
    mut builder: crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder,
) -> crate::operation::create_environment::builders::CreateEnvironmentOutputBuilder {
    if builder.environment.is_none() {
        builder.environment = {
            let builder = crate::types::builders::EnvironmentBuilder::default();
            crate::serde_util::environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_environment_account_connection_output_correct_errors(
    mut builder: crate::operation::create_environment_account_connection::builders::CreateEnvironmentAccountConnectionOutputBuilder,
) -> crate::operation::create_environment_account_connection::builders::CreateEnvironmentAccountConnectionOutputBuilder {
    if builder.environment_account_connection.is_none() {
        builder.environment_account_connection = {
            let builder = crate::types::builders::EnvironmentAccountConnectionBuilder::default();
            crate::serde_util::environment_account_connection_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_environment_template_output_correct_errors(
    mut builder: crate::operation::create_environment_template::builders::CreateEnvironmentTemplateOutputBuilder,
) -> crate::operation::create_environment_template::builders::CreateEnvironmentTemplateOutputBuilder {
    if builder.environment_template.is_none() {
        builder.environment_template = {
            let builder = crate::types::builders::EnvironmentTemplateBuilder::default();
            crate::serde_util::environment_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_environment_template_version_output_correct_errors(
    mut builder: crate::operation::create_environment_template_version::builders::CreateEnvironmentTemplateVersionOutputBuilder,
) -> crate::operation::create_environment_template_version::builders::CreateEnvironmentTemplateVersionOutputBuilder {
    if builder.environment_template_version.is_none() {
        builder.environment_template_version = {
            let builder = crate::types::builders::EnvironmentTemplateVersionBuilder::default();
            crate::serde_util::environment_template_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_repository_output_correct_errors(
    mut builder: crate::operation::create_repository::builders::CreateRepositoryOutputBuilder,
) -> crate::operation::create_repository::builders::CreateRepositoryOutputBuilder {
    if builder.repository.is_none() {
        builder.repository = {
            let builder = crate::types::builders::RepositoryBuilder::default();
            crate::serde_util::repository_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_service_output_correct_errors(
    mut builder: crate::operation::create_service::builders::CreateServiceOutputBuilder,
) -> crate::operation::create_service::builders::CreateServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_service_instance_output_correct_errors(
    mut builder: crate::operation::create_service_instance::builders::CreateServiceInstanceOutputBuilder,
) -> crate::operation::create_service_instance::builders::CreateServiceInstanceOutputBuilder {
    if builder.service_instance.is_none() {
        builder.service_instance = {
            let builder = crate::types::builders::ServiceInstanceBuilder::default();
            crate::serde_util::service_instance_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_service_template_output_correct_errors(
    mut builder: crate::operation::create_service_template::builders::CreateServiceTemplateOutputBuilder,
) -> crate::operation::create_service_template::builders::CreateServiceTemplateOutputBuilder {
    if builder.service_template.is_none() {
        builder.service_template = {
            let builder = crate::types::builders::ServiceTemplateBuilder::default();
            crate::serde_util::service_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_service_template_version_output_correct_errors(
    mut builder: crate::operation::create_service_template_version::builders::CreateServiceTemplateVersionOutputBuilder,
) -> crate::operation::create_service_template_version::builders::CreateServiceTemplateVersionOutputBuilder {
    if builder.service_template_version.is_none() {
        builder.service_template_version = {
            let builder = crate::types::builders::ServiceTemplateVersionBuilder::default();
            crate::serde_util::service_template_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_environment_output_correct_errors(
    mut builder: crate::operation::get_environment::builders::GetEnvironmentOutputBuilder,
) -> crate::operation::get_environment::builders::GetEnvironmentOutputBuilder {
    if builder.environment.is_none() {
        builder.environment = {
            let builder = crate::types::builders::EnvironmentBuilder::default();
            crate::serde_util::environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_environment_account_connection_output_correct_errors(
    mut builder: crate::operation::get_environment_account_connection::builders::GetEnvironmentAccountConnectionOutputBuilder,
) -> crate::operation::get_environment_account_connection::builders::GetEnvironmentAccountConnectionOutputBuilder {
    if builder.environment_account_connection.is_none() {
        builder.environment_account_connection = {
            let builder = crate::types::builders::EnvironmentAccountConnectionBuilder::default();
            crate::serde_util::environment_account_connection_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_environment_template_output_correct_errors(
    mut builder: crate::operation::get_environment_template::builders::GetEnvironmentTemplateOutputBuilder,
) -> crate::operation::get_environment_template::builders::GetEnvironmentTemplateOutputBuilder {
    if builder.environment_template.is_none() {
        builder.environment_template = {
            let builder = crate::types::builders::EnvironmentTemplateBuilder::default();
            crate::serde_util::environment_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_environment_template_version_output_correct_errors(
    mut builder: crate::operation::get_environment_template_version::builders::GetEnvironmentTemplateVersionOutputBuilder,
) -> crate::operation::get_environment_template_version::builders::GetEnvironmentTemplateVersionOutputBuilder {
    if builder.environment_template_version.is_none() {
        builder.environment_template_version = {
            let builder = crate::types::builders::EnvironmentTemplateVersionBuilder::default();
            crate::serde_util::environment_template_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_repository_output_correct_errors(
    mut builder: crate::operation::get_repository::builders::GetRepositoryOutputBuilder,
) -> crate::operation::get_repository::builders::GetRepositoryOutputBuilder {
    if builder.repository.is_none() {
        builder.repository = {
            let builder = crate::types::builders::RepositoryBuilder::default();
            crate::serde_util::repository_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_resources_summary_output_correct_errors(
    mut builder: crate::operation::get_resources_summary::builders::GetResourcesSummaryOutputBuilder,
) -> crate::operation::get_resources_summary::builders::GetResourcesSummaryOutputBuilder {
    if builder.counts.is_none() {
        builder.counts = {
            let builder = crate::types::builders::CountsSummaryBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_service_instance_output_correct_errors(
    mut builder: crate::operation::get_service_instance::builders::GetServiceInstanceOutputBuilder,
) -> crate::operation::get_service_instance::builders::GetServiceInstanceOutputBuilder {
    if builder.service_instance.is_none() {
        builder.service_instance = {
            let builder = crate::types::builders::ServiceInstanceBuilder::default();
            crate::serde_util::service_instance_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_service_template_output_correct_errors(
    mut builder: crate::operation::get_service_template::builders::GetServiceTemplateOutputBuilder,
) -> crate::operation::get_service_template::builders::GetServiceTemplateOutputBuilder {
    if builder.service_template.is_none() {
        builder.service_template = {
            let builder = crate::types::builders::ServiceTemplateBuilder::default();
            crate::serde_util::service_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_service_template_version_output_correct_errors(
    mut builder: crate::operation::get_service_template_version::builders::GetServiceTemplateVersionOutputBuilder,
) -> crate::operation::get_service_template_version::builders::GetServiceTemplateVersionOutputBuilder {
    if builder.service_template_version.is_none() {
        builder.service_template_version = {
            let builder = crate::types::builders::ServiceTemplateVersionBuilder::default();
            crate::serde_util::service_template_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_component_outputs_output_correct_errors(
    mut builder: crate::operation::list_component_outputs::builders::ListComponentOutputsOutputBuilder,
) -> crate::operation::list_component_outputs::builders::ListComponentOutputsOutputBuilder {
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_component_provisioned_resources_output_correct_errors(
    mut builder: crate::operation::list_component_provisioned_resources::builders::ListComponentProvisionedResourcesOutputBuilder,
) -> crate::operation::list_component_provisioned_resources::builders::ListComponentProvisionedResourcesOutputBuilder {
    if builder.provisioned_resources.is_none() {
        builder.provisioned_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_components_output_correct_errors(
    mut builder: crate::operation::list_components::builders::ListComponentsOutputBuilder,
) -> crate::operation::list_components::builders::ListComponentsOutputBuilder {
    if builder.components.is_none() {
        builder.components = Some(Default::default())
    }
    builder
}

pub(crate) fn list_deployments_output_correct_errors(
    mut builder: crate::operation::list_deployments::builders::ListDeploymentsOutputBuilder,
) -> crate::operation::list_deployments::builders::ListDeploymentsOutputBuilder {
    if builder.deployments.is_none() {
        builder.deployments = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_account_connections_output_correct_errors(
    mut builder: crate::operation::list_environment_account_connections::builders::ListEnvironmentAccountConnectionsOutputBuilder,
) -> crate::operation::list_environment_account_connections::builders::ListEnvironmentAccountConnectionsOutputBuilder {
    if builder.environment_account_connections.is_none() {
        builder.environment_account_connections = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_outputs_output_correct_errors(
    mut builder: crate::operation::list_environment_outputs::builders::ListEnvironmentOutputsOutputBuilder,
) -> crate::operation::list_environment_outputs::builders::ListEnvironmentOutputsOutputBuilder {
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_provisioned_resources_output_correct_errors(
    mut builder: crate::operation::list_environment_provisioned_resources::builders::ListEnvironmentProvisionedResourcesOutputBuilder,
) -> crate::operation::list_environment_provisioned_resources::builders::ListEnvironmentProvisionedResourcesOutputBuilder {
    if builder.provisioned_resources.is_none() {
        builder.provisioned_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_template_versions_output_correct_errors(
    mut builder: crate::operation::list_environment_template_versions::builders::ListEnvironmentTemplateVersionsOutputBuilder,
) -> crate::operation::list_environment_template_versions::builders::ListEnvironmentTemplateVersionsOutputBuilder {
    if builder.template_versions.is_none() {
        builder.template_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environment_templates_output_correct_errors(
    mut builder: crate::operation::list_environment_templates::builders::ListEnvironmentTemplatesOutputBuilder,
) -> crate::operation::list_environment_templates::builders::ListEnvironmentTemplatesOutputBuilder {
    if builder.templates.is_none() {
        builder.templates = Some(Default::default())
    }
    builder
}

pub(crate) fn list_environments_output_correct_errors(
    mut builder: crate::operation::list_environments::builders::ListEnvironmentsOutputBuilder,
) -> crate::operation::list_environments::builders::ListEnvironmentsOutputBuilder {
    if builder.environments.is_none() {
        builder.environments = Some(Default::default())
    }
    builder
}

pub(crate) fn list_repositories_output_correct_errors(
    mut builder: crate::operation::list_repositories::builders::ListRepositoriesOutputBuilder,
) -> crate::operation::list_repositories::builders::ListRepositoriesOutputBuilder {
    if builder.repositories.is_none() {
        builder.repositories = Some(Default::default())
    }
    builder
}

pub(crate) fn list_repository_sync_definitions_output_correct_errors(
    mut builder: crate::operation::list_repository_sync_definitions::builders::ListRepositorySyncDefinitionsOutputBuilder,
) -> crate::operation::list_repository_sync_definitions::builders::ListRepositorySyncDefinitionsOutputBuilder {
    if builder.sync_definitions.is_none() {
        builder.sync_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_instance_outputs_output_correct_errors(
    mut builder: crate::operation::list_service_instance_outputs::builders::ListServiceInstanceOutputsOutputBuilder,
) -> crate::operation::list_service_instance_outputs::builders::ListServiceInstanceOutputsOutputBuilder {
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_instance_provisioned_resources_output_correct_errors(
    mut builder: crate::operation::list_service_instance_provisioned_resources::builders::ListServiceInstanceProvisionedResourcesOutputBuilder,
) -> crate::operation::list_service_instance_provisioned_resources::builders::ListServiceInstanceProvisionedResourcesOutputBuilder {
    if builder.provisioned_resources.is_none() {
        builder.provisioned_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_instances_output_correct_errors(
    mut builder: crate::operation::list_service_instances::builders::ListServiceInstancesOutputBuilder,
) -> crate::operation::list_service_instances::builders::ListServiceInstancesOutputBuilder {
    if builder.service_instances.is_none() {
        builder.service_instances = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_pipeline_outputs_output_correct_errors(
    mut builder: crate::operation::list_service_pipeline_outputs::builders::ListServicePipelineOutputsOutputBuilder,
) -> crate::operation::list_service_pipeline_outputs::builders::ListServicePipelineOutputsOutputBuilder {
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_pipeline_provisioned_resources_output_correct_errors(
    mut builder: crate::operation::list_service_pipeline_provisioned_resources::builders::ListServicePipelineProvisionedResourcesOutputBuilder,
) -> crate::operation::list_service_pipeline_provisioned_resources::builders::ListServicePipelineProvisionedResourcesOutputBuilder {
    if builder.provisioned_resources.is_none() {
        builder.provisioned_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_template_versions_output_correct_errors(
    mut builder: crate::operation::list_service_template_versions::builders::ListServiceTemplateVersionsOutputBuilder,
) -> crate::operation::list_service_template_versions::builders::ListServiceTemplateVersionsOutputBuilder {
    if builder.template_versions.is_none() {
        builder.template_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_templates_output_correct_errors(
    mut builder: crate::operation::list_service_templates::builders::ListServiceTemplatesOutputBuilder,
) -> crate::operation::list_service_templates::builders::ListServiceTemplatesOutputBuilder {
    if builder.templates.is_none() {
        builder.templates = Some(Default::default())
    }
    builder
}

pub(crate) fn list_services_output_correct_errors(
    mut builder: crate::operation::list_services::builders::ListServicesOutputBuilder,
) -> crate::operation::list_services::builders::ListServicesOutputBuilder {
    if builder.services.is_none() {
        builder.services = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn reject_environment_account_connection_output_correct_errors(
    mut builder: crate::operation::reject_environment_account_connection::builders::RejectEnvironmentAccountConnectionOutputBuilder,
) -> crate::operation::reject_environment_account_connection::builders::RejectEnvironmentAccountConnectionOutputBuilder {
    if builder.environment_account_connection.is_none() {
        builder.environment_account_connection = {
            let builder = crate::types::builders::EnvironmentAccountConnectionBuilder::default();
            crate::serde_util::environment_account_connection_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_account_settings_output_correct_errors(
    mut builder: crate::operation::update_account_settings::builders::UpdateAccountSettingsOutputBuilder,
) -> crate::operation::update_account_settings::builders::UpdateAccountSettingsOutputBuilder {
    if builder.account_settings.is_none() {
        builder.account_settings = {
            let builder = crate::types::builders::AccountSettingsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_component_output_correct_errors(
    mut builder: crate::operation::update_component::builders::UpdateComponentOutputBuilder,
) -> crate::operation::update_component::builders::UpdateComponentOutputBuilder {
    if builder.component.is_none() {
        builder.component = {
            let builder = crate::types::builders::ComponentBuilder::default();
            crate::serde_util::component_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_environment_output_correct_errors(
    mut builder: crate::operation::update_environment::builders::UpdateEnvironmentOutputBuilder,
) -> crate::operation::update_environment::builders::UpdateEnvironmentOutputBuilder {
    if builder.environment.is_none() {
        builder.environment = {
            let builder = crate::types::builders::EnvironmentBuilder::default();
            crate::serde_util::environment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_environment_account_connection_output_correct_errors(
    mut builder: crate::operation::update_environment_account_connection::builders::UpdateEnvironmentAccountConnectionOutputBuilder,
) -> crate::operation::update_environment_account_connection::builders::UpdateEnvironmentAccountConnectionOutputBuilder {
    if builder.environment_account_connection.is_none() {
        builder.environment_account_connection = {
            let builder = crate::types::builders::EnvironmentAccountConnectionBuilder::default();
            crate::serde_util::environment_account_connection_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_environment_template_output_correct_errors(
    mut builder: crate::operation::update_environment_template::builders::UpdateEnvironmentTemplateOutputBuilder,
) -> crate::operation::update_environment_template::builders::UpdateEnvironmentTemplateOutputBuilder {
    if builder.environment_template.is_none() {
        builder.environment_template = {
            let builder = crate::types::builders::EnvironmentTemplateBuilder::default();
            crate::serde_util::environment_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_environment_template_version_output_correct_errors(
    mut builder: crate::operation::update_environment_template_version::builders::UpdateEnvironmentTemplateVersionOutputBuilder,
) -> crate::operation::update_environment_template_version::builders::UpdateEnvironmentTemplateVersionOutputBuilder {
    if builder.environment_template_version.is_none() {
        builder.environment_template_version = {
            let builder = crate::types::builders::EnvironmentTemplateVersionBuilder::default();
            crate::serde_util::environment_template_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_output_correct_errors(
    mut builder: crate::operation::update_service::builders::UpdateServiceOutputBuilder,
) -> crate::operation::update_service::builders::UpdateServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_instance_output_correct_errors(
    mut builder: crate::operation::update_service_instance::builders::UpdateServiceInstanceOutputBuilder,
) -> crate::operation::update_service_instance::builders::UpdateServiceInstanceOutputBuilder {
    if builder.service_instance.is_none() {
        builder.service_instance = {
            let builder = crate::types::builders::ServiceInstanceBuilder::default();
            crate::serde_util::service_instance_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_pipeline_output_correct_errors(
    mut builder: crate::operation::update_service_pipeline::builders::UpdateServicePipelineOutputBuilder,
) -> crate::operation::update_service_pipeline::builders::UpdateServicePipelineOutputBuilder {
    if builder.pipeline.is_none() {
        builder.pipeline = {
            let builder = crate::types::builders::ServicePipelineBuilder::default();
            crate::serde_util::service_pipeline_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_sync_blocker_output_correct_errors(
    mut builder: crate::operation::update_service_sync_blocker::builders::UpdateServiceSyncBlockerOutputBuilder,
) -> crate::operation::update_service_sync_blocker::builders::UpdateServiceSyncBlockerOutputBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.service_sync_blocker.is_none() {
        builder.service_sync_blocker = {
            let builder = crate::types::builders::SyncBlockerBuilder::default();
            crate::serde_util::sync_blocker_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_template_output_correct_errors(
    mut builder: crate::operation::update_service_template::builders::UpdateServiceTemplateOutputBuilder,
) -> crate::operation::update_service_template::builders::UpdateServiceTemplateOutputBuilder {
    if builder.service_template.is_none() {
        builder.service_template = {
            let builder = crate::types::builders::ServiceTemplateBuilder::default();
            crate::serde_util::service_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_template_version_output_correct_errors(
    mut builder: crate::operation::update_service_template_version::builders::UpdateServiceTemplateVersionOutputBuilder,
) -> crate::operation::update_service_template_version::builders::UpdateServiceTemplateVersionOutputBuilder {
    if builder.service_template_version.is_none() {
        builder.service_template_version = {
            let builder = crate::types::builders::ServiceTemplateVersionBuilder::default();
            crate::serde_util::service_template_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn environment_account_connection_correct_errors(
    mut builder: crate::types::builders::EnvironmentAccountConnectionBuilder,
) -> crate::types::builders::EnvironmentAccountConnectionBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.management_account_id.is_none() {
        builder.management_account_id = Some(Default::default())
    }
    if builder.environment_account_id.is_none() {
        builder.environment_account_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.requested_at.is_none() {
        builder.requested_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EnvironmentAccountConnectionStatus>().ok()
    }
    builder
}

pub(crate) fn component_correct_errors(mut builder: crate::types::builders::ComponentBuilder) -> crate::types::builders::ComponentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn environment_correct_errors(mut builder: crate::types::builders::EnvironmentBuilder) -> crate::types::builders::EnvironmentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_attempted_at.is_none() {
        builder.last_deployment_attempted_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_succeeded_at.is_none() {
        builder.last_deployment_succeeded_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn service_instance_correct_errors(
    mut builder: crate::types::builders::ServiceInstanceBuilder,
) -> crate::types::builders::ServiceInstanceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_attempted_at.is_none() {
        builder.last_deployment_attempted_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_succeeded_at.is_none() {
        builder.last_deployment_succeeded_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn service_pipeline_correct_errors(
    mut builder: crate::types::builders::ServicePipelineBuilder,
) -> crate::types::builders::ServicePipelineBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_attempted_at.is_none() {
        builder.last_deployment_attempted_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_succeeded_at.is_none() {
        builder.last_deployment_succeeded_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn environment_template_correct_errors(
    mut builder: crate::types::builders::EnvironmentTemplateBuilder,
) -> crate::types::builders::EnvironmentTemplateBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn environment_template_version_correct_errors(
    mut builder: crate::types::builders::EnvironmentTemplateVersionBuilder,
) -> crate::types::builders::EnvironmentTemplateVersionBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.major_version.is_none() {
        builder.major_version = Some(Default::default())
    }
    if builder.minor_version.is_none() {
        builder.minor_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TemplateVersionStatus>().ok()
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn repository_correct_errors(mut builder: crate::types::builders::RepositoryBuilder) -> crate::types::builders::RepositoryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = "no value was set".parse::<crate::types::RepositoryProvider>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connection_arn.is_none() {
        builder.connection_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn service_correct_errors(mut builder: crate::types::builders::ServiceBuilder) -> crate::types::builders::ServiceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ServiceStatus>().ok()
    }
    if builder.spec.is_none() {
        builder.spec = Some(Default::default())
    }
    builder
}

pub(crate) fn service_template_correct_errors(
    mut builder: crate::types::builders::ServiceTemplateBuilder,
) -> crate::types::builders::ServiceTemplateBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn service_template_version_correct_errors(
    mut builder: crate::types::builders::ServiceTemplateVersionBuilder,
) -> crate::types::builders::ServiceTemplateVersionBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.major_version.is_none() {
        builder.major_version = Some(Default::default())
    }
    if builder.minor_version.is_none() {
        builder.minor_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TemplateVersionStatus>().ok()
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.compatible_environment_templates.is_none() {
        builder.compatible_environment_templates = Some(Default::default())
    }
    builder
}

pub(crate) fn sync_blocker_correct_errors(mut builder: crate::types::builders::SyncBlockerBuilder) -> crate::types::builders::SyncBlockerBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::BlockerType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BlockerStatus>().ok()
    }
    if builder.created_reason.is_none() {
        builder.created_reason = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn deployment_correct_errors(mut builder: crate::types::builders::DeploymentBuilder) -> crate::types::builders::DeploymentBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    if builder.target_resource_created_at.is_none() {
        builder.target_resource_created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.target_resource_type.is_none() {
        builder.target_resource_type = "no value was set".parse::<crate::types::DeploymentTargetResourceType>().ok()
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn repository_sync_attempt_correct_errors(
    mut builder: crate::types::builders::RepositorySyncAttemptBuilder,
) -> crate::types::builders::RepositorySyncAttemptBuilder {
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RepositorySyncStatus>().ok()
    }
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_sync_attempt_correct_errors(
    mut builder: crate::types::builders::ResourceSyncAttemptBuilder,
) -> crate::types::builders::ResourceSyncAttemptBuilder {
    if builder.initial_revision.is_none() {
        builder.initial_revision = {
            let builder = crate::types::builders::RevisionBuilder::default();
            crate::serde_util::revision_correct_errors(builder).build().ok()
        }
    }
    if builder.target_revision.is_none() {
        builder.target_revision = {
            let builder = crate::types::builders::RevisionBuilder::default();
            crate::serde_util::revision_correct_errors(builder).build().ok()
        }
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceSyncStatus>().ok()
    }
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn revision_correct_errors(mut builder: crate::types::builders::RevisionBuilder) -> crate::types::builders::RevisionBuilder {
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    if builder.repository_provider.is_none() {
        builder.repository_provider = "no value was set".parse::<crate::types::RepositoryProvider>().ok()
    }
    if builder.sha.is_none() {
        builder.sha = Some(Default::default())
    }
    if builder.directory.is_none() {
        builder.directory = Some(Default::default())
    }
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    builder
}

pub(crate) fn service_sync_blocker_summary_correct_errors(
    mut builder: crate::types::builders::ServiceSyncBlockerSummaryBuilder,
) -> crate::types::builders::ServiceSyncBlockerSummaryBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    builder
}

pub(crate) fn service_sync_config_correct_errors(
    mut builder: crate::types::builders::ServiceSyncConfigBuilder,
) -> crate::types::builders::ServiceSyncConfigBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.repository_provider.is_none() {
        builder.repository_provider = "no value was set".parse::<crate::types::RepositoryProvider>().ok()
    }
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    if builder.file_path.is_none() {
        builder.file_path = Some(Default::default())
    }
    builder
}

pub(crate) fn template_sync_config_correct_errors(
    mut builder: crate::types::builders::TemplateSyncConfigBuilder,
) -> crate::types::builders::TemplateSyncConfigBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::TemplateType>().ok()
    }
    if builder.repository_provider.is_none() {
        builder.repository_provider = "no value was set".parse::<crate::types::RepositoryProvider>().ok()
    }
    if builder.repository_name.is_none() {
        builder.repository_name = Some(Default::default())
    }
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    builder
}

pub(crate) fn component_summary_correct_errors(
    mut builder: crate::types::builders::ComponentSummaryBuilder,
) -> crate::types::builders::ComponentSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn deployment_summary_correct_errors(
    mut builder: crate::types::builders::DeploymentSummaryBuilder,
) -> crate::types::builders::DeploymentSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    if builder.target_resource_created_at.is_none() {
        builder.target_resource_created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.target_resource_type.is_none() {
        builder.target_resource_type = "no value was set".parse::<crate::types::DeploymentTargetResourceType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn environment_account_connection_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentAccountConnectionSummaryBuilder,
) -> crate::types::builders::EnvironmentAccountConnectionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.management_account_id.is_none() {
        builder.management_account_id = Some(Default::default())
    }
    if builder.environment_account_id.is_none() {
        builder.environment_account_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.requested_at.is_none() {
        builder.requested_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EnvironmentAccountConnectionStatus>().ok()
    }
    builder
}

pub(crate) fn environment_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentSummaryBuilder,
) -> crate::types::builders::EnvironmentSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_attempted_at.is_none() {
        builder.last_deployment_attempted_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_succeeded_at.is_none() {
        builder.last_deployment_succeeded_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn environment_template_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentTemplateSummaryBuilder,
) -> crate::types::builders::EnvironmentTemplateSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn environment_template_version_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentTemplateVersionSummaryBuilder,
) -> crate::types::builders::EnvironmentTemplateVersionSummaryBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.major_version.is_none() {
        builder.major_version = Some(Default::default())
    }
    if builder.minor_version.is_none() {
        builder.minor_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TemplateVersionStatus>().ok()
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn repository_branch_correct_errors(
    mut builder: crate::types::builders::RepositoryBranchBuilder,
) -> crate::types::builders::RepositoryBranchBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = "no value was set".parse::<crate::types::RepositoryProvider>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_summary_correct_errors(
    mut builder: crate::types::builders::RepositorySummaryBuilder,
) -> crate::types::builders::RepositorySummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.provider.is_none() {
        builder.provider = "no value was set".parse::<crate::types::RepositoryProvider>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.connection_arn.is_none() {
        builder.connection_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_sync_definition_correct_errors(
    mut builder: crate::types::builders::RepositorySyncDefinitionBuilder,
) -> crate::types::builders::RepositorySyncDefinitionBuilder {
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    if builder.parent.is_none() {
        builder.parent = Some(Default::default())
    }
    if builder.branch.is_none() {
        builder.branch = Some(Default::default())
    }
    if builder.directory.is_none() {
        builder.directory = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_counts_summary_correct_errors(
    mut builder: crate::types::builders::ResourceCountsSummaryBuilder,
) -> crate::types::builders::ResourceCountsSummaryBuilder {
    if builder.total.is_none() {
        builder.total = Some(Default::default())
    }
    builder
}

pub(crate) fn service_instance_summary_correct_errors(
    mut builder: crate::types::builders::ServiceInstanceSummaryBuilder,
) -> crate::types::builders::ServiceInstanceSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_attempted_at.is_none() {
        builder.last_deployment_attempted_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_deployment_succeeded_at.is_none() {
        builder.last_deployment_succeeded_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.environment_name.is_none() {
        builder.environment_name = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    if builder.deployment_status.is_none() {
        builder.deployment_status = "no value was set".parse::<crate::types::DeploymentStatus>().ok()
    }
    builder
}

pub(crate) fn service_summary_correct_errors(
    mut builder: crate::types::builders::ServiceSummaryBuilder,
) -> crate::types::builders::ServiceSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ServiceStatus>().ok()
    }
    builder
}

pub(crate) fn service_template_summary_correct_errors(
    mut builder: crate::types::builders::ServiceTemplateSummaryBuilder,
) -> crate::types::builders::ServiceTemplateSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn service_template_version_summary_correct_errors(
    mut builder: crate::types::builders::ServiceTemplateVersionSummaryBuilder,
) -> crate::types::builders::ServiceTemplateVersionSummaryBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.major_version.is_none() {
        builder.major_version = Some(Default::default())
    }
    if builder.minor_version.is_none() {
        builder.minor_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TemplateVersionStatus>().ok()
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_at.is_none() {
        builder.last_modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn compatible_environment_template_correct_errors(
    mut builder: crate::types::builders::CompatibleEnvironmentTemplateBuilder,
) -> crate::types::builders::CompatibleEnvironmentTemplateBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.major_version.is_none() {
        builder.major_version = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_state_correct_errors(
    mut builder: crate::types::builders::EnvironmentStateBuilder,
) -> crate::types::builders::EnvironmentStateBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    builder
}

pub(crate) fn repository_sync_event_correct_errors(
    mut builder: crate::types::builders::RepositorySyncEventBuilder,
) -> crate::types::builders::RepositorySyncEventBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.time.is_none() {
        builder.time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event.is_none() {
        builder.event = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_sync_event_correct_errors(
    mut builder: crate::types::builders::ResourceSyncEventBuilder,
) -> crate::types::builders::ResourceSyncEventBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.time.is_none() {
        builder.time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event.is_none() {
        builder.event = Some(Default::default())
    }
    builder
}

pub(crate) fn service_instance_state_correct_errors(
    mut builder: crate::types::builders::ServiceInstanceStateBuilder,
) -> crate::types::builders::ServiceInstanceStateBuilder {
    if builder.spec.is_none() {
        builder.spec = Some(Default::default())
    }
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    builder
}

pub(crate) fn service_pipeline_state_correct_errors(
    mut builder: crate::types::builders::ServicePipelineStateBuilder,
) -> crate::types::builders::ServicePipelineStateBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    if builder.template_major_version.is_none() {
        builder.template_major_version = Some(Default::default())
    }
    if builder.template_minor_version.is_none() {
        builder.template_minor_version = Some(Default::default())
    }
    builder
}

pub(crate) fn sync_blocker_context_correct_errors(
    mut builder: crate::types::builders::SyncBlockerContextBuilder,
) -> crate::types::builders::SyncBlockerContextBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
