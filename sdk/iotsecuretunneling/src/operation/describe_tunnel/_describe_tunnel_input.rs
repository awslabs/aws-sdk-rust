// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTunnelInput {
    /// <p>The tunnel to describe.</p>
    #[doc(hidden)]
    pub tunnel_id: std::option::Option<std::string::String>,
}
impl DescribeTunnelInput {
    /// <p>The tunnel to describe.</p>
    pub fn tunnel_id(&self) -> std::option::Option<&str> {
        self.tunnel_id.as_deref()
    }
}
impl DescribeTunnelInput {
    /// Creates a new builder-style object to manufacture [`DescribeTunnelInput`](crate::operation::describe_tunnel::DescribeTunnelInput).
    pub fn builder() -> crate::operation::describe_tunnel::builders::DescribeTunnelInputBuilder {
        crate::operation::describe_tunnel::builders::DescribeTunnelInputBuilder::default()
    }
}

/// A builder for [`DescribeTunnelInput`](crate::operation::describe_tunnel::DescribeTunnelInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeTunnelInputBuilder {
    pub(crate) tunnel_id: std::option::Option<std::string::String>,
}
impl DescribeTunnelInputBuilder {
    /// <p>The tunnel to describe.</p>
    pub fn tunnel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.tunnel_id = Some(input.into());
        self
    }
    /// <p>The tunnel to describe.</p>
    pub fn set_tunnel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tunnel_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTunnelInput`](crate::operation::describe_tunnel::DescribeTunnelInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_tunnel::DescribeTunnelInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::describe_tunnel::DescribeTunnelInput {
            tunnel_id: self.tunnel_id,
        })
    }
}
