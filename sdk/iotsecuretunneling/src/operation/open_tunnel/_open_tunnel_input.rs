// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OpenTunnelInput {
    /// <p>A short text description of the tunnel. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A collection of tag metadata.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The destination configuration for the OpenTunnel request.</p>
    #[doc(hidden)]
    pub destination_config: std::option::Option<crate::types::DestinationConfig>,
    /// <p>Timeout configuration for a tunnel.</p>
    #[doc(hidden)]
    pub timeout_config: std::option::Option<crate::types::TimeoutConfig>,
}
impl OpenTunnelInput {
    /// <p>A short text description of the tunnel. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A collection of tag metadata.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The destination configuration for the OpenTunnel request.</p>
    pub fn destination_config(&self) -> std::option::Option<&crate::types::DestinationConfig> {
        self.destination_config.as_ref()
    }
    /// <p>Timeout configuration for a tunnel.</p>
    pub fn timeout_config(&self) -> std::option::Option<&crate::types::TimeoutConfig> {
        self.timeout_config.as_ref()
    }
}
impl OpenTunnelInput {
    /// Creates a new builder-style object to manufacture [`OpenTunnelInput`](crate::operation::open_tunnel::OpenTunnelInput).
    pub fn builder() -> crate::operation::open_tunnel::builders::OpenTunnelInputBuilder {
        crate::operation::open_tunnel::builders::OpenTunnelInputBuilder::default()
    }
}

/// A builder for [`OpenTunnelInput`](crate::operation::open_tunnel::OpenTunnelInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OpenTunnelInputBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) destination_config: std::option::Option<crate::types::DestinationConfig>,
    pub(crate) timeout_config: std::option::Option<crate::types::TimeoutConfig>,
}
impl OpenTunnelInputBuilder {
    /// <p>A short text description of the tunnel. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A short text description of the tunnel. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of tag metadata.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A collection of tag metadata.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The destination configuration for the OpenTunnel request.</p>
    pub fn destination_config(mut self, input: crate::types::DestinationConfig) -> Self {
        self.destination_config = Some(input);
        self
    }
    /// <p>The destination configuration for the OpenTunnel request.</p>
    pub fn set_destination_config(
        mut self,
        input: std::option::Option<crate::types::DestinationConfig>,
    ) -> Self {
        self.destination_config = input;
        self
    }
    /// <p>Timeout configuration for a tunnel.</p>
    pub fn timeout_config(mut self, input: crate::types::TimeoutConfig) -> Self {
        self.timeout_config = Some(input);
        self
    }
    /// <p>Timeout configuration for a tunnel.</p>
    pub fn set_timeout_config(
        mut self,
        input: std::option::Option<crate::types::TimeoutConfig>,
    ) -> Self {
        self.timeout_config = input;
        self
    }
    /// Consumes the builder and constructs a [`OpenTunnelInput`](crate::operation::open_tunnel::OpenTunnelInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::open_tunnel::OpenTunnelInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::open_tunnel::OpenTunnelInput {
            description: self.description,
            tags: self.tags,
            destination_config: self.destination_config,
            timeout_config: self.timeout_config,
        })
    }
}
