// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OpenTunnelOutput {
    /// <p>A unique alpha-numeric tunnel ID.</p>
    pub tunnel_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name for the tunnel. The tunnel ARN format is
    /// <code>arn:aws:tunnel:<region>:<account-id>:tunnel/<tunnel-id></code>
    /// </p>
    pub tunnel_arn: std::option::Option<std::string::String>,
    /// <p>The access token the source local proxy uses to connect to AWS IoT Secure
    /// Tunneling.</p>
    pub source_access_token: std::option::Option<std::string::String>,
    /// <p>The access token the destination local proxy uses to connect to AWS IoT Secure
    /// Tunneling.</p>
    pub destination_access_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for OpenTunnelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OpenTunnelOutput");
        formatter.field("tunnel_id", &self.tunnel_id);
        formatter.field("tunnel_arn", &self.tunnel_arn);
        formatter.field("source_access_token", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "destination_access_token",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.finish()
    }
}
/// See [`OpenTunnelOutput`](crate::output::OpenTunnelOutput)
pub mod open_tunnel_output {
    /// A builder for [`OpenTunnelOutput`](crate::output::OpenTunnelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tunnel_id: std::option::Option<std::string::String>,
        pub(crate) tunnel_arn: std::option::Option<std::string::String>,
        pub(crate) source_access_token: std::option::Option<std::string::String>,
        pub(crate) destination_access_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique alpha-numeric tunnel ID.</p>
        pub fn tunnel_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.tunnel_id = Some(input.into());
            self
        }
        /// <p>A unique alpha-numeric tunnel ID.</p>
        pub fn set_tunnel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.tunnel_id = input;
            self
        }
        /// <p>The Amazon Resource Name for the tunnel. The tunnel ARN format is
        /// <code>arn:aws:tunnel:<region>:<account-id>:tunnel/<tunnel-id></code>
        /// </p>
        pub fn tunnel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.tunnel_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name for the tunnel. The tunnel ARN format is
        /// <code>arn:aws:tunnel:<region>:<account-id>:tunnel/<tunnel-id></code>
        /// </p>
        pub fn set_tunnel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.tunnel_arn = input;
            self
        }
        /// <p>The access token the source local proxy uses to connect to AWS IoT Secure
        /// Tunneling.</p>
        pub fn source_access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_access_token = Some(input.into());
            self
        }
        /// <p>The access token the source local proxy uses to connect to AWS IoT Secure
        /// Tunneling.</p>
        pub fn set_source_access_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_access_token = input;
            self
        }
        /// <p>The access token the destination local proxy uses to connect to AWS IoT Secure
        /// Tunneling.</p>
        pub fn destination_access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.destination_access_token = Some(input.into());
            self
        }
        /// <p>The access token the destination local proxy uses to connect to AWS IoT Secure
        /// Tunneling.</p>
        pub fn set_destination_access_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.destination_access_token = input;
            self
        }
        /// Consumes the builder and constructs a [`OpenTunnelOutput`](crate::output::OpenTunnelOutput)
        pub fn build(self) -> crate::output::OpenTunnelOutput {
            crate::output::OpenTunnelOutput {
                tunnel_id: self.tunnel_id,
                tunnel_arn: self.tunnel_arn,
                source_access_token: self.source_access_token,
                destination_access_token: self.destination_access_token,
            }
        }
    }
}
impl OpenTunnelOutput {
    /// Creates a new builder-style object to manufacture [`OpenTunnelOutput`](crate::output::OpenTunnelOutput)
    pub fn builder() -> crate::output::open_tunnel_output::Builder {
        crate::output::open_tunnel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTunnelsOutput {
    /// <p>A short description of the tunnels in an AWS account.</p>
    pub tunnel_summaries: std::option::Option<std::vec::Vec<crate::model::TunnelSummary>>,
    /// <p>A token to used to retrieve the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListTunnelsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTunnelsOutput");
        formatter.field("tunnel_summaries", &self.tunnel_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTunnelsOutput`](crate::output::ListTunnelsOutput)
pub mod list_tunnels_output {
    /// A builder for [`ListTunnelsOutput`](crate::output::ListTunnelsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tunnel_summaries:
            std::option::Option<std::vec::Vec<crate::model::TunnelSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `tunnel_summaries`.
        ///
        /// To override the contents of this collection use [`set_tunnel_summaries`](Self::set_tunnel_summaries).
        ///
        /// <p>A short description of the tunnels in an AWS account.</p>
        pub fn tunnel_summaries(mut self, input: impl Into<crate::model::TunnelSummary>) -> Self {
            let mut v = self.tunnel_summaries.unwrap_or_default();
            v.push(input.into());
            self.tunnel_summaries = Some(v);
            self
        }
        /// <p>A short description of the tunnels in an AWS account.</p>
        pub fn set_tunnel_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TunnelSummary>>,
        ) -> Self {
            self.tunnel_summaries = input;
            self
        }
        /// <p>A token to used to retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to used to retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTunnelsOutput`](crate::output::ListTunnelsOutput)
        pub fn build(self) -> crate::output::ListTunnelsOutput {
            crate::output::ListTunnelsOutput {
                tunnel_summaries: self.tunnel_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTunnelsOutput {
    /// Creates a new builder-style object to manufacture [`ListTunnelsOutput`](crate::output::ListTunnelsOutput)
    pub fn builder() -> crate::output::list_tunnels_output::Builder {
        crate::output::list_tunnels_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags for the specified resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the specified resource.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>The tags for the specified resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTunnelOutput {
    /// <p>The tunnel being described.</p>
    pub tunnel: std::option::Option<crate::model::Tunnel>,
}
impl std::fmt::Debug for DescribeTunnelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTunnelOutput");
        formatter.field("tunnel", &self.tunnel);
        formatter.finish()
    }
}
/// See [`DescribeTunnelOutput`](crate::output::DescribeTunnelOutput)
pub mod describe_tunnel_output {
    /// A builder for [`DescribeTunnelOutput`](crate::output::DescribeTunnelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tunnel: std::option::Option<crate::model::Tunnel>,
    }
    impl Builder {
        /// <p>The tunnel being described.</p>
        pub fn tunnel(mut self, input: crate::model::Tunnel) -> Self {
            self.tunnel = Some(input);
            self
        }
        /// <p>The tunnel being described.</p>
        pub fn set_tunnel(mut self, input: std::option::Option<crate::model::Tunnel>) -> Self {
            self.tunnel = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTunnelOutput`](crate::output::DescribeTunnelOutput)
        pub fn build(self) -> crate::output::DescribeTunnelOutput {
            crate::output::DescribeTunnelOutput {
                tunnel: self.tunnel,
            }
        }
    }
}
impl DescribeTunnelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTunnelOutput`](crate::output::DescribeTunnelOutput)
    pub fn builder() -> crate::output::describe_tunnel_output::Builder {
        crate::output::describe_tunnel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CloseTunnelOutput {}
impl std::fmt::Debug for CloseTunnelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CloseTunnelOutput");
        formatter.finish()
    }
}
/// See [`CloseTunnelOutput`](crate::output::CloseTunnelOutput)
pub mod close_tunnel_output {
    /// A builder for [`CloseTunnelOutput`](crate::output::CloseTunnelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CloseTunnelOutput`](crate::output::CloseTunnelOutput)
        pub fn build(self) -> crate::output::CloseTunnelOutput {
            crate::output::CloseTunnelOutput {}
        }
    }
}
impl CloseTunnelOutput {
    /// Creates a new builder-style object to manufacture [`CloseTunnelOutput`](crate::output::CloseTunnelOutput)
    pub fn builder() -> crate::output::close_tunnel_output::Builder {
        crate::output::close_tunnel_output::Builder::default()
    }
}
