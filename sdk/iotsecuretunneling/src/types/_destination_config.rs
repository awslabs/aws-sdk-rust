// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The destination configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DestinationConfig {
    /// <p>The name of the IoT thing to which you want to connect.</p>
    #[doc(hidden)]
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    #[doc(hidden)]
    pub services: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DestinationConfig {
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn thing_name(&self) -> std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn services(&self) -> std::option::Option<&[std::string::String]> {
        self.services.as_deref()
    }
}
impl DestinationConfig {
    /// Creates a new builder-style object to manufacture [`DestinationConfig`](crate::types::DestinationConfig).
    pub fn builder() -> crate::types::builders::DestinationConfigBuilder {
        crate::types::builders::DestinationConfigBuilder::default()
    }
}

/// A builder for [`DestinationConfig`](crate::types::DestinationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationConfigBuilder {
    pub(crate) thing_name: std::option::Option<std::string::String>,
    pub(crate) services: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DestinationConfigBuilder {
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_name = Some(input.into());
        self
    }
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// Appends an item to `services`.
    ///
    /// To override the contents of this collection use [`set_services`](Self::set_services).
    ///
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn services(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.services.unwrap_or_default();
        v.push(input.into());
        self.services = Some(v);
        self
    }
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn set_services(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.services = input;
        self
    }
    /// Consumes the builder and constructs a [`DestinationConfig`](crate::types::DestinationConfig).
    pub fn build(self) -> crate::types::DestinationConfig {
        crate::types::DestinationConfig {
            thing_name: self.thing_name,
            services: self.services,
        }
    }
}
