// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The destination configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationConfig {
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub thing_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub services: ::std::vec::Vec<::std::string::String>,
}
impl DestinationConfig {
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn thing_name(&self) -> ::std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn services(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.services.deref()
    }
}
impl DestinationConfig {
    /// Creates a new builder-style object to manufacture [`DestinationConfig`](crate::types::DestinationConfig).
    pub fn builder() -> crate::types::builders::DestinationConfigBuilder {
        crate::types::builders::DestinationConfigBuilder::default()
    }
}

/// A builder for [`DestinationConfig`](crate::types::DestinationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DestinationConfigBuilder {
    pub(crate) thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DestinationConfigBuilder {
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The name of the IoT thing to which you want to connect.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_name
    }
    /// Appends an item to `services`.
    ///
    /// To override the contents of this collection use [`set_services`](Self::set_services).
    ///
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn services(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.services.unwrap_or_default();
        v.push(input.into());
        self.services = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn set_services(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.services = input;
        self
    }
    /// <p>A list of service names that identify the target application. The IoT client running on the destination device reads this value and uses it to look up a port or an IP address and a port. The IoT client instantiates the local proxy, which uses this information to connect to the destination application.</p>
    pub fn get_services(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.services
    }
    /// Consumes the builder and constructs a [`DestinationConfig`](crate::types::DestinationConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`services`](crate::types::builders::DestinationConfigBuilder::services)
    pub fn build(self) -> ::std::result::Result<crate::types::DestinationConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DestinationConfig {
            thing_name: self.thing_name,
            services: self.services.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "services",
                    "services was not specified but it is required when building DestinationConfig",
                )
            })?,
        })
    }
}
