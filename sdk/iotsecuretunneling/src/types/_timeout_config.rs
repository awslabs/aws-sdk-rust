// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Tunnel timeout configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeoutConfig {
    /// <p>The maximum amount of time (in minutes) a tunnel can remain open. If not specified, maxLifetimeTimeoutMinutes defaults to 720 minutes. Valid values are from 1 minute to 12 hours (720 minutes) </p>
    #[doc(hidden)]
    pub max_lifetime_timeout_minutes: std::option::Option<i32>,
}
impl TimeoutConfig {
    /// <p>The maximum amount of time (in minutes) a tunnel can remain open. If not specified, maxLifetimeTimeoutMinutes defaults to 720 minutes. Valid values are from 1 minute to 12 hours (720 minutes) </p>
    pub fn max_lifetime_timeout_minutes(&self) -> std::option::Option<i32> {
        self.max_lifetime_timeout_minutes
    }
}
impl TimeoutConfig {
    /// Creates a new builder-style object to manufacture [`TimeoutConfig`](crate::types::TimeoutConfig).
    pub fn builder() -> crate::types::builders::TimeoutConfigBuilder {
        crate::types::builders::TimeoutConfigBuilder::default()
    }
}

/// A builder for [`TimeoutConfig`](crate::types::TimeoutConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeoutConfigBuilder {
    pub(crate) max_lifetime_timeout_minutes: std::option::Option<i32>,
}
impl TimeoutConfigBuilder {
    /// <p>The maximum amount of time (in minutes) a tunnel can remain open. If not specified, maxLifetimeTimeoutMinutes defaults to 720 minutes. Valid values are from 1 minute to 12 hours (720 minutes) </p>
    pub fn max_lifetime_timeout_minutes(mut self, input: i32) -> Self {
        self.max_lifetime_timeout_minutes = Some(input);
        self
    }
    /// <p>The maximum amount of time (in minutes) a tunnel can remain open. If not specified, maxLifetimeTimeoutMinutes defaults to 720 minutes. Valid values are from 1 minute to 12 hours (720 minutes) </p>
    pub fn set_max_lifetime_timeout_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.max_lifetime_timeout_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeoutConfig`](crate::types::TimeoutConfig).
    pub fn build(self) -> crate::types::TimeoutConfig {
        crate::types::TimeoutConfig {
            max_lifetime_timeout_minutes: self.max_lifetime_timeout_minutes,
        }
    }
}
