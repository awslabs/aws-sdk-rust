// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RotateTunnelAccessToken`](crate::client::fluent_builders::RotateTunnelAccessToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tunnel_id(impl Into<String>)`](crate::client::fluent_builders::RotateTunnelAccessToken::tunnel_id) / [`set_tunnel_id(Option<String>)`](crate::client::fluent_builders::RotateTunnelAccessToken::set_tunnel_id): <p>The tunnel for which you want to rotate the access tokens.</p>
    ///   - [`client_mode(ClientMode)`](crate::client::fluent_builders::RotateTunnelAccessToken::client_mode) / [`set_client_mode(Option<ClientMode>)`](crate::client::fluent_builders::RotateTunnelAccessToken::set_client_mode): <p>The mode of the client that will use the client token, which can be either the source or destination, or both source and destination.</p>
    ///   - [`destination_config(DestinationConfig)`](crate::client::fluent_builders::RotateTunnelAccessToken::destination_config) / [`set_destination_config(Option<DestinationConfig>)`](crate::client::fluent_builders::RotateTunnelAccessToken::set_destination_config): <p>The destination configuration.</p>
    /// - On success, responds with [`RotateTunnelAccessTokenOutput`](crate::output::RotateTunnelAccessTokenOutput) with field(s):
    ///   - [`tunnel_arn(Option<String>)`](crate::output::RotateTunnelAccessTokenOutput::tunnel_arn): <p>The Amazon Resource Name for the tunnel.</p>
    ///   - [`source_access_token(Option<String>)`](crate::output::RotateTunnelAccessTokenOutput::source_access_token): <p>The client access token that the source local proxy uses to connect to IoT Secure Tunneling.</p>
    ///   - [`destination_access_token(Option<String>)`](crate::output::RotateTunnelAccessTokenOutput::destination_access_token): <p>The client access token that the destination local proxy uses to connect to IoT Secure Tunneling.</p>
    /// - On failure, responds with [`SdkError<RotateTunnelAccessTokenError>`](crate::error::RotateTunnelAccessTokenError)
    pub fn rotate_tunnel_access_token(
        &self,
    ) -> crate::client::fluent_builders::RotateTunnelAccessToken {
        crate::client::fluent_builders::RotateTunnelAccessToken::new(self.handle.clone())
    }
}
