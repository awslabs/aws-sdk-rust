// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`OpenTunnel`](crate::client::fluent_builders::OpenTunnel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::OpenTunnel::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::OpenTunnel::set_description): <p>A short text description of the tunnel. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::OpenTunnel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::OpenTunnel::set_tags): <p>A collection of tag metadata.</p>
    ///   - [`destination_config(DestinationConfig)`](crate::client::fluent_builders::OpenTunnel::destination_config) / [`set_destination_config(Option<DestinationConfig>)`](crate::client::fluent_builders::OpenTunnel::set_destination_config): <p>The destination configuration for the OpenTunnel request.</p>
    ///   - [`timeout_config(TimeoutConfig)`](crate::client::fluent_builders::OpenTunnel::timeout_config) / [`set_timeout_config(Option<TimeoutConfig>)`](crate::client::fluent_builders::OpenTunnel::set_timeout_config): <p>Timeout configuration for a tunnel.</p>
    /// - On success, responds with [`OpenTunnelOutput`](crate::output::OpenTunnelOutput) with field(s):
    ///   - [`tunnel_id(Option<String>)`](crate::output::OpenTunnelOutput::tunnel_id): <p>A unique alpha-numeric tunnel ID.</p>
    ///   - [`tunnel_arn(Option<String>)`](crate::output::OpenTunnelOutput::tunnel_arn): <p>The Amazon Resource Name for the tunnel.</p>
    ///   - [`source_access_token(Option<String>)`](crate::output::OpenTunnelOutput::source_access_token): <p>The access token the source local proxy uses to connect to IoT Secure Tunneling.</p>
    ///   - [`destination_access_token(Option<String>)`](crate::output::OpenTunnelOutput::destination_access_token): <p>The access token the destination local proxy uses to connect to IoT Secure Tunneling.</p>
    /// - On failure, responds with [`SdkError<OpenTunnelError>`](crate::error::OpenTunnelError)
    pub fn open_tunnel(&self) -> crate::client::fluent_builders::OpenTunnel {
        crate::client::fluent_builders::OpenTunnel::new(self.handle.clone())
    }
}
