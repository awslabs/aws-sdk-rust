// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9);
        }
        list_10.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23);
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37);
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42);
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47);
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(entry_56, item_54);
        }
        list_55.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("Type");
    if let Some(var_60) = &input.r#type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ActiveDirectory");
    if let Some(var_62) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_61, var_62,
        );
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("MutualAuthentication");
    if let Some(var_64) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_63, var_64,
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("FederatedAuthentication");
    if let Some(var_66) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_65, var_66,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) {
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("Enabled");
    if let Some(var_68) = &input.enabled {
        scope_67.boolean(*var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_70) = &input.cloudwatch_log_group {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("CloudwatchLogStream");
    if let Some(var_72) = &input.cloudwatch_log_stream {
        scope_71.string(var_72);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Enabled");
    if let Some(var_74) = &input.enabled {
        scope_73.boolean(*var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("LambdaFunctionArn");
    if let Some(var_76) = &input.lambda_function_arn {
        scope_75.string(var_76);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) {
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("Key");
    if let Some(var_78) = &input.key {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("Value");
    if let Some(var_80) = &input.values {
        let mut list_82 = scope_79.start_list(true, Some("item"));
        for item_81 in var_80 {
            #[allow(unused_mut)]
            let mut entry_83 = list_82.entry();
            entry_83.string(item_81);
        }
        list_82.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("AllocationStrategy");
    if let Some(var_85) = &input.allocation_strategy {
        scope_84.string(var_85.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("MaintenanceStrategies");
    if let Some(var_87) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
            scope_86, var_87,
        );
    }
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_89) = &input.instance_interruption_behavior {
        scope_88.string(var_89.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_91) = &input.instance_pools_to_use_count {
        scope_90.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("SingleInstanceType");
    if let Some(var_93) = &input.single_instance_type {
        scope_92.boolean(*var_93);
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_95) = &input.single_availability_zone {
        scope_94.boolean(*var_95);
    }
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("MinTargetCapacity");
    if let Some(var_97) = &input.min_target_capacity {
        scope_96.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_97).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("MaxTotalPrice");
    if let Some(var_99) = &input.max_total_price {
        scope_98.string(var_99);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("AllocationStrategy");
    if let Some(var_101) = &input.allocation_strategy {
        scope_100.string(var_101.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("CapacityReservationOptions");
    if let Some(var_103) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_102, var_103,
        );
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("SingleInstanceType");
    if let Some(var_105) = &input.single_instance_type {
        scope_104.boolean(*var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_107) = &input.single_availability_zone {
        scope_106.boolean(*var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("MinTargetCapacity");
    if let Some(var_109) = &input.min_target_capacity {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MaxTotalPrice");
    if let Some(var_111) = &input.max_total_price {
        scope_110.string(var_111);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) {
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_113) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_112, var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("Overrides");
    if let Some(var_115) = &input.overrides {
        let mut list_117 = scope_114.start_list(true, Some("item"));
        for item_116 in var_115 {
            #[allow(unused_mut)]
            let mut entry_118 = list_117.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_118, item_116);
        }
        list_117.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("TotalTargetCapacity");
    if let Some(var_120) = &input.total_target_capacity {
        scope_119.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_122) = &input.on_demand_target_capacity {
        scope_121.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("SpotTargetCapacity");
    if let Some(var_124) = &input.spot_target_capacity {
        scope_123.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_126) = &input.default_target_capacity_type {
        scope_125.string(var_126.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) {
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("Bucket");
    if let Some(var_128) = &input.bucket {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("Key");
    if let Some(var_130) = &input.key {
        scope_129.string(var_130);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) {
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("DeviceName");
    if let Some(var_132) = &input.device_name {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("VirtualName");
    if let Some(var_134) = &input.virtual_name {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("Ebs");
    if let Some(var_136) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_135, var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("NoDevice");
    if let Some(var_138) = &input.no_device {
        scope_137.string(var_138);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("StartWeekDay");
    if let Some(var_140) = &input.start_week_day {
        scope_139.string(var_140.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("StartHour");
    if let Some(var_142) = &input.start_hour {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("EndWeekDay");
    if let Some(var_144) = &input.end_week_day {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("EndHour");
    if let Some(var_146) = &input.end_hour {
        scope_145.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_146).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("ContainerFormat");
    if let Some(var_148) = &input.container_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("DiskImageFormat");
    if let Some(var_150) = &input.disk_image_format {
        scope_149.string(var_150.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("S3Bucket");
    if let Some(var_152) = &input.s3_bucket {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("S3Prefix");
    if let Some(var_154) = &input.s3_prefix {
        scope_153.string(var_154);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) {
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("KernelId");
    if let Some(var_156) = &input.kernel_id {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("EbsOptimized");
    if let Some(var_158) = &input.ebs_optimized {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("IamInstanceProfile");
    if let Some(var_160) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_159, var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("BlockDeviceMapping");
    if let Some(var_162) = &input.block_device_mappings {
        let mut list_164 = scope_161.start_list(true, Some("BlockDeviceMapping"));
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_165, item_163);
        }
        list_164.finish();
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("NetworkInterface");
    if let Some(var_167) = &input.network_interfaces {
        let mut list_169 =
            scope_166.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_168 in var_167 {
            #[allow(unused_mut)]
            let mut entry_170 = list_169.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_170, item_168);
        }
        list_169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("ImageId");
    if let Some(var_172) = &input.image_id {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("InstanceType");
    if let Some(var_174) = &input.instance_type {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("KeyName");
    if let Some(var_176) = &input.key_name {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("Monitoring");
    if let Some(var_178) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_177, var_178,
        );
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("Placement");
    if let Some(var_180) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_179, var_180,
        );
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RamDiskId");
    if let Some(var_182) = &input.ram_disk_id {
        scope_181.string(var_182);
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("DisableApiTermination");
    if let Some(var_184) = &input.disable_api_termination {
        scope_183.boolean(*var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_186) = &input.instance_initiated_shutdown_behavior {
        scope_185.string(var_186.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("UserData");
    if let Some(var_188) = &input.user_data {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("TagSpecification");
    if let Some(var_190) = &input.tag_specifications {
        let mut list_192 =
            scope_189.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_191 in var_190 {
            #[allow(unused_mut)]
            let mut entry_193 = list_192.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_193, item_191);
        }
        list_192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_195) = &input.elastic_gpu_specifications {
        let mut list_197 = scope_194.start_list(true, Some("ElasticGpuSpecification"));
        for item_196 in var_195 {
            #[allow(unused_mut)]
            let mut entry_198 = list_197.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_198, item_196,
            );
        }
        list_197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_200) = &input.elastic_inference_accelerators {
        let mut list_202 = scope_199.start_list(true, Some("item"));
        for item_201 in var_200 {
            #[allow(unused_mut)]
            let mut entry_203 = list_202.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_203, item_201);
        }
        list_202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("SecurityGroupId");
    if let Some(var_205) = &input.security_group_ids {
        let mut list_207 = scope_204.start_list(true, Some("SecurityGroupId"));
        for item_206 in var_205 {
            #[allow(unused_mut)]
            let mut entry_208 = list_207.entry();
            entry_208.string(item_206);
        }
        list_207.finish();
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("SecurityGroup");
    if let Some(var_210) = &input.security_groups {
        let mut list_212 = scope_209.start_list(true, Some("SecurityGroup"));
        for item_211 in var_210 {
            #[allow(unused_mut)]
            let mut entry_213 = list_212.entry();
            entry_213.string(item_211);
        }
        list_212.finish();
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("InstanceMarketOptions");
    if let Some(var_215) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_214, var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("CreditSpecification");
    if let Some(var_217) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_216, var_217,
        );
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("CpuOptions");
    if let Some(var_219) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_218, var_219,
        );
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_221) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_220, var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("LicenseSpecification");
    if let Some(var_223) = &input.license_specifications {
        let mut list_225 = scope_222.start_list(true, Some("item"));
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_226, item_224);
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("HibernationOptions");
    if let Some(var_228) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_227, var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("MetadataOptions");
    if let Some(var_230) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_229, var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("EnclaveOptions");
    if let Some(var_232) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_231, var_232,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) {
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("Cidr");
    if let Some(var_234) = &input.cidr {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("Description");
    if let Some(var_236) = &input.description {
        scope_235.string(var_236);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) {
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("Code");
    if let Some(var_238) = &input.code {
        scope_237.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("Type");
    if let Some(var_240) = &input.r#type {
        scope_239.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_240).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) {
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("From");
    if let Some(var_242) = &input.from {
        scope_241.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_242).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("To");
    if let Some(var_244) = &input.to {
        scope_243.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_244).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) {
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("Ipv6Address");
    if let Some(var_246) = &input.ipv6_address {
        scope_245.string(var_246);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("Primary");
    if let Some(var_248) = &input.primary {
        scope_247.boolean(*var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("PrivateIpAddress");
    if let Some(var_250) = &input.private_ip_address {
        scope_249.string(var_250);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("Ipv4Prefix");
    if let Some(var_252) = &input.ipv4_prefix {
        scope_251.string(var_252);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("Ipv6Prefix");
    if let Some(var_254) = &input.ipv6_prefix {
        scope_253.string(var_254);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("CurrencyCode");
    if let Some(var_256) = &input.currency_code {
        scope_255.string(var_256.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("Price");
    if let Some(var_258) = &input.price {
        scope_257.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_258).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("Term");
    if let Some(var_260) = &input.term {
        scope_259.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_260).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("InstanceId");
    if let Some(var_262) = &input.instance_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("ExcludeBootVolume");
    if let Some(var_264) = &input.exclude_boot_volume {
        scope_263.boolean(*var_264);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) {
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("Key");
    if let Some(var_266) = &input.key {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("Value");
    if let Some(var_268) = &input.value {
        scope_267.string(var_268);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) {
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Key");
    if let Some(var_270) = &input.key {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Value");
    if let Some(var_272) = &input.value {
        scope_271.string(var_272);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("FromPort");
    if let Some(var_274) = &input.from_port {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("ToPort");
    if let Some(var_276) = &input.to_port {
        scope_275.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_276).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("AmazonSideAsn");
    if let Some(var_278) = &input.amazon_side_asn {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_280) = &input.auto_accept_shared_attachments {
        scope_279.string(var_280.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_282) = &input.default_route_table_association {
        scope_281.string(var_282.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_284) = &input.default_route_table_propagation {
        scope_283.string(var_284.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("VpnEcmpSupport");
    if let Some(var_286) = &input.vpn_ecmp_support {
        scope_285.string(var_286.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("DnsSupport");
    if let Some(var_288) = &input.dns_support {
        scope_287.string(var_288.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("MulticastSupport");
    if let Some(var_290) = &input.multicast_support {
        scope_289.string(var_290.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_292) = &input.transit_gateway_cidr_blocks {
        let mut list_294 = scope_291.start_list(true, Some("item"));
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            entry_295.string(item_293);
        }
        list_294.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Protocol");
    if let Some(var_297) = &input.protocol {
        scope_296.string(var_297.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) {
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("PeerAsn");
    if let Some(var_299) = &input.peer_asn {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_299).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Igmpv2Support");
    if let Some(var_301) = &input.igmpv2_support {
        scope_300.string(var_301.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("StaticSourcesSupport");
    if let Some(var_303) = &input.static_sources_support {
        scope_302.string(var_303.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_305) = &input.auto_accept_shared_associations {
        scope_304.string(var_305.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("DnsSupport");
    if let Some(var_307) = &input.dns_support {
        scope_306.string(var_307.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("Ipv6Support");
    if let Some(var_309) = &input.ipv6_support {
        scope_308.string(var_309.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("ApplianceModeSupport");
    if let Some(var_311) = &input.appliance_mode_support {
        scope_310.string(var_311.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("EnableAcceleration");
    if let Some(var_313) = &input.enable_acceleration {
        scope_312.boolean(*var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("StaticRoutesOnly");
    if let Some(var_315) = &input.static_routes_only {
        scope_314.boolean(*var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_317) = &input.tunnel_inside_ip_version {
        scope_316.string(var_317.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("TunnelOptions");
    if let Some(var_319) = &input.tunnel_options {
        let mut list_321 = scope_318.start_list(true, None);
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_322, item_320,
            );
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_324) = &input.local_ipv4_network_cidr {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_326) = &input.remote_ipv4_network_cidr {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_328) = &input.local_ipv6_network_cidr {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_330) = &input.remote_ipv6_network_cidr {
        scope_329.string(var_330);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_332) = &input.include_all_tags_of_instance {
        scope_331.boolean(*var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("InstanceTagKey");
    if let Some(var_334) = &input.instance_tag_keys {
        let mut list_336 = scope_333.start_list(true, Some("item"));
        for item_335 in var_334 {
            #[allow(unused_mut)]
            let mut entry_337 = list_336.entry();
            entry_337.string(item_335);
        }
        list_336.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) {
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("Name");
    if let Some(var_339) = &input.name {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("Value");
    if let Some(var_341) = &input.values {
        let mut list_343 = scope_340.start_list(true, Some("item"));
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            entry_344.string(item_342);
        }
        list_343.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("EarliestTime");
    if let Some(var_346) = &input.earliest_time {
        scope_345.instant(var_346, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("LatestTime");
    if let Some(var_348) = &input.latest_time {
        scope_347.instant(var_348, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) {
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("Frequency");
    if let Some(var_350) = &input.frequency {
        scope_349.string(var_350);
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("Interval");
    if let Some(var_352) = &input.interval {
        scope_351.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_352).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("OccurrenceDay");
    if let Some(var_354) = &input.occurrence_days {
        let mut list_356 = scope_353.start_list(true, Some("OccurenceDay"));
        for item_355 in var_354 {
            #[allow(unused_mut)]
            let mut entry_357 = list_356.entry();
            entry_357.number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::NegInt((*item_355).into()),
            );
        }
        list_356.finish();
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_359) = &input.occurrence_relative_to_end {
        scope_358.boolean(*var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("OccurrenceUnit");
    if let Some(var_361) = &input.occurrence_unit {
        scope_360.string(var_361);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("EarliestTime");
    if let Some(var_363) = &input.earliest_time {
        scope_362.instant(var_363, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("LatestTime");
    if let Some(var_365) = &input.latest_time {
        scope_364.instant(var_365, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("InstanceId");
    if let Some(var_367) = &input.instance_ids {
        let mut list_369 = scope_366.start_list(true, Some("item"));
        for item_368 in var_367 {
            #[allow(unused_mut)]
            let mut entry_370 = list_369.entry();
            entry_370.string(item_368);
        }
        list_369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("InstanceTag");
    if let Some(var_372) = &input.instance_tags {
        let mut list_374 = scope_371.start_list(true, Some("item"));
        for item_373 in var_372 {
            #[allow(unused_mut)]
            let mut entry_375 = list_374.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_375, item_373);
        }
        list_374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("DedicatedHostId");
    if let Some(var_377) = &input.dedicated_host_ids {
        let mut list_379 = scope_376.start_list(true, Some("item"));
        for item_378 in var_377 {
            #[allow(unused_mut)]
            let mut entry_380 = list_379.entry();
            entry_380.string(item_378);
        }
        list_379.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("S3Bucket");
    if let Some(var_382) = &input.s3_bucket {
        scope_381.string(var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("S3Prefix");
    if let Some(var_384) = &input.s3_prefix {
        scope_383.string(var_384);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) {
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("AthenaIntegration");
    if let Some(var_386) = &input.athena_integrations {
        let mut list_388 = scope_385.start_list(true, Some("item"));
        for item_387 in var_386 {
            #[allow(unused_mut)]
            let mut entry_389 = list_388.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_389, item_387,
            );
        }
        list_388.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) {
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("Comment");
    if let Some(var_391) = &input.comment {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("UploadEnd");
    if let Some(var_393) = &input.upload_end {
        scope_392.instant(var_393, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("UploadSize");
    if let Some(var_395) = &input.upload_size {
        scope_394.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_395).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("UploadStart");
    if let Some(var_397) = &input.upload_start {
        scope_396.instant(var_397, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) {
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("Description");
    if let Some(var_399) = &input.description {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DeviceName");
    if let Some(var_401) = &input.device_name {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("Format");
    if let Some(var_403) = &input.format {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("SnapshotId");
    if let Some(var_405) = &input.snapshot_id {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("Url");
    if let Some(var_407) = &input.url {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("UserBucket");
    if let Some(var_409) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_408, var_409);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_411) = &input.license_configuration_arn {
        scope_410.string(var_411);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) {
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("Description");
    if let Some(var_413) = &input.description {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("Image");
    if let Some(var_415) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_414, var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("Volume");
    if let Some(var_417) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_416, var_417);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("AdditionalInfo");
    if let Some(var_419) = &input.additional_info {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("Architecture");
    if let Some(var_421) = &input.architecture {
        scope_420.string(var_421.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("GroupId");
    if let Some(var_423) = &input.group_ids {
        let mut list_425 = scope_422.start_list(true, Some("SecurityGroupId"));
        for item_424 in var_423 {
            #[allow(unused_mut)]
            let mut entry_426 = list_425.entry();
            entry_426.string(item_424);
        }
        list_425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("GroupName");
    if let Some(var_428) = &input.group_names {
        let mut list_430 = scope_427.start_list(true, Some("SecurityGroup"));
        for item_429 in var_428 {
            #[allow(unused_mut)]
            let mut entry_431 = list_430.entry();
            entry_431.string(item_429);
        }
        list_430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_433) = &input.instance_initiated_shutdown_behavior {
        scope_432.string(var_433.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("InstanceType");
    if let Some(var_435) = &input.instance_type {
        scope_434.string(var_435.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("Monitoring");
    if let Some(var_437) = &input.monitoring {
        scope_436.boolean(*var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("Placement");
    if let Some(var_439) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_438, var_439);
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("PrivateIpAddress");
    if let Some(var_441) = &input.private_ip_address {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("SubnetId");
    if let Some(var_443) = &input.subnet_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("UserData");
    if let Some(var_445) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_444, var_445);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) {
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("Description");
    if let Some(var_447) = &input.description {
        scope_446.string(var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("Format");
    if let Some(var_449) = &input.format {
        scope_448.string(var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("Url");
    if let Some(var_451) = &input.url {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("UserBucket");
    if let Some(var_453) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_452, var_453);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) {
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("Bytes");
    if let Some(var_455) = &input.bytes {
        scope_454.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("Format");
    if let Some(var_457) = &input.format {
        scope_456.string(var_457.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("ImportManifestUrl");
    if let Some(var_459) = &input.import_manifest_url {
        scope_458.string(var_459);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) {
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Size");
    if let Some(var_461) = &input.size {
        scope_460.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_461).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) {
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("CustomDnsServers");
    if let Some(var_463) = &input.custom_dns_servers {
        let mut list_465 = scope_462.start_list(true, Some("item"));
        for item_464 in var_463 {
            #[allow(unused_mut)]
            let mut entry_466 = list_465.entry();
            entry_466.string(item_464);
        }
        list_465.finish();
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("Enabled");
    if let Some(var_468) = &input.enabled {
        scope_467.boolean(*var_468);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) {
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("Add");
    if let Some(var_470) = &input.add {
        let mut list_472 = scope_469.start_list(true, Some("item"));
        for item_471 in var_470 {
            #[allow(unused_mut)]
            let mut entry_473 = list_472.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_473, item_471,
            );
        }
        list_472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("Remove");
    if let Some(var_475) = &input.remove {
        let mut list_477 = scope_474.start_list(true, Some("item"));
        for item_476 in var_475 {
            #[allow(unused_mut)]
            let mut entry_478 = list_477.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_478, item_476,
            );
        }
        list_477.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) {
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("Value");
    if let Some(var_480) = &input.value {
        scope_479.string(var_480);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) {
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("Add");
    if let Some(var_482) = &input.add {
        let mut list_484 = scope_481.start_list(true, Some("item"));
        for item_483 in var_482 {
            #[allow(unused_mut)]
            let mut entry_485 = list_484.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_485, item_483,
            );
        }
        list_484.finish();
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("Remove");
    if let Some(var_487) = &input.remove {
        let mut list_489 = scope_486.start_list(true, Some("item"));
        for item_488 in var_487 {
            #[allow(unused_mut)]
            let mut entry_490 = list_489.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_490, item_488,
            );
        }
        list_489.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) {
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("Value");
    if let Some(var_492) = &input.value {
        scope_491.boolean(*var_492);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("DeviceName");
    if let Some(var_494) = &input.device_name {
        scope_493.string(var_494);
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("Ebs");
    if let Some(var_496) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_495, var_496,
        );
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("NoDevice");
    if let Some(var_498) = &input.no_device {
        scope_497.string(var_498);
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("VirtualName");
    if let Some(var_500) = &input.virtual_name {
        scope_499.string(var_500);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) {
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("Value");
    if let Some(var_502) = &input.value {
        scope_501.string(&smithy_types::base64::encode(var_502));
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("CapacityReservationPreference");
    if let Some(var_504) = &input.capacity_reservation_preference {
        scope_503.string(var_504.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("CapacityReservationTarget");
    if let Some(var_506) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_505, var_506,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("InstanceId");
    if let Some(var_508) = &input.instance_id {
        scope_507.string(var_508);
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("CpuCredits");
    if let Some(var_510) = &input.cpu_credits {
        scope_509.string(var_510);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) {
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("Cidr");
    if let Some(var_512) = &input.cidr {
        scope_511.string(var_512);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) {
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("AttachmentId");
    if let Some(var_514) = &input.attachment_id {
        scope_513.string(var_514);
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("DeleteOnTermination");
    if let Some(var_516) = &input.delete_on_termination {
        scope_515.boolean(*var_516);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) {
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("AvailabilityZone");
    if let Some(var_518) = &input.availability_zone {
        scope_517.string(var_518);
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("InstanceCount");
    if let Some(var_520) = &input.instance_count {
        scope_519.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_520).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("InstanceType");
    if let Some(var_522) = &input.instance_type {
        scope_521.string(var_522.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("Platform");
    if let Some(var_524) = &input.platform {
        scope_523.string(var_524);
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("Scope");
    if let Some(var_526) = &input.scope {
        scope_525.string(var_526.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) {
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_528) = &input.security_group_rule_id {
        scope_527.string(var_528);
    }
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("SecurityGroupRule");
    if let Some(var_530) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_529, var_530,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) {
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("Add");
    if let Some(var_532) = &input.add {
        let mut list_534 = scope_531.start_list(true, Some("item"));
        for item_533 in var_532 {
            #[allow(unused_mut)]
            let mut entry_535 = list_534.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_535, item_533,
            );
        }
        list_534.finish();
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Remove");
    if let Some(var_537) = &input.remove {
        let mut list_539 = scope_536.start_list(true, Some("item"));
        for item_538 in var_537 {
            #[allow(unused_mut)]
            let mut entry_540 = list_539.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_540, item_538,
            );
        }
        list_539.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) {
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_542) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_541, var_542,
        );
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("Overrides");
    if let Some(var_544) = &input.overrides {
        let mut list_546 = scope_543.start_list(true, Some("item"));
        for item_545 in var_544 {
            #[allow(unused_mut)]
            let mut entry_547 = list_546.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_547, item_545,
            );
        }
        list_546.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) {
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_549) = &input.add_transit_gateway_cidr_blocks {
        let mut list_551 = scope_548.start_list(true, Some("item"));
        for item_550 in var_549 {
            #[allow(unused_mut)]
            let mut entry_552 = list_551.entry();
            entry_552.string(item_550);
        }
        list_551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_554) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_556 = scope_553.start_list(true, Some("item"));
        for item_555 in var_554 {
            #[allow(unused_mut)]
            let mut entry_557 = list_556.entry();
            entry_557.string(item_555);
        }
        list_556.finish();
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("VpnEcmpSupport");
    if let Some(var_559) = &input.vpn_ecmp_support {
        scope_558.string(var_559.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("DnsSupport");
    if let Some(var_561) = &input.dns_support {
        scope_560.string(var_561.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_563) = &input.auto_accept_shared_attachments {
        scope_562.string(var_563.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_565) = &input.default_route_table_association {
        scope_564.string(var_565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_567) = &input.association_default_route_table_id {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_569) = &input.default_route_table_propagation {
        scope_568.string(var_569.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_571) = &input.propagation_default_route_table_id {
        scope_570.string(var_571);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("DnsSupport");
    if let Some(var_573) = &input.dns_support {
        scope_572.string(var_573.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("Ipv6Support");
    if let Some(var_575) = &input.ipv6_support {
        scope_574.string(var_575.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("ApplianceModeSupport");
    if let Some(var_577) = &input.appliance_mode_support {
        scope_576.string(var_577.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_579) = &input.allow_dns_resolution_from_remote_vpc {
        scope_578.boolean(*var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_581) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_580.boolean(*var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_583) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_582.boolean(*var_583);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("TunnelInsideCidr");
    if let Some(var_585) = &input.tunnel_inside_cidr {
        scope_584.string(var_585);
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_587) = &input.tunnel_inside_ipv6_cidr {
        scope_586.string(var_587);
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("PreSharedKey");
    if let Some(var_589) = &input.pre_shared_key {
        scope_588.string(var_589);
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_591) = &input.phase1_lifetime_seconds {
        scope_590.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_591).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_593) = &input.phase2_lifetime_seconds {
        scope_592.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_593).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_595) = &input.rekey_margin_time_seconds {
        scope_594.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_597) = &input.rekey_fuzz_percentage {
        scope_596.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_597).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("ReplayWindowSize");
    if let Some(var_599) = &input.replay_window_size {
        scope_598.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_599).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_601) = &input.dpd_timeout_seconds {
        scope_600.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_601).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("DPDTimeoutAction");
    if let Some(var_603) = &input.dpd_timeout_action {
        scope_602.string(var_603);
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_605) = &input.phase1_encryption_algorithms {
        let mut list_607 = scope_604.start_list(true, Some("item"));
        for item_606 in var_605 {
            #[allow(unused_mut)]
            let mut entry_608 = list_607.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_608, item_606);
        }
        list_607.finish();
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_610) = &input.phase2_encryption_algorithms {
        let mut list_612 = scope_609.start_list(true, Some("item"));
        for item_611 in var_610 {
            #[allow(unused_mut)]
            let mut entry_613 = list_612.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_613, item_611);
        }
        list_612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_615) = &input.phase1_integrity_algorithms {
        let mut list_617 = scope_614.start_list(true, Some("item"));
        for item_616 in var_615 {
            #[allow(unused_mut)]
            let mut entry_618 = list_617.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_618, item_616);
        }
        list_617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_620) = &input.phase2_integrity_algorithms {
        let mut list_622 = scope_619.start_list(true, Some("item"));
        for item_621 in var_620 {
            #[allow(unused_mut)]
            let mut entry_623 = list_622.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_623, item_621);
        }
        list_622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_625) = &input.phase1_dh_group_numbers {
        let mut list_627 = scope_624.start_list(true, Some("item"));
        for item_626 in var_625 {
            #[allow(unused_mut)]
            let mut entry_628 = list_627.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_628, item_626);
        }
        list_627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_630) = &input.phase2_dh_group_numbers {
        let mut list_632 = scope_629.start_list(true, Some("item"));
        for item_631 in var_630 {
            #[allow(unused_mut)]
            let mut entry_633 = list_632.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_633, item_631);
        }
        list_632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("IKEVersion");
    if let Some(var_635) = &input.ike_versions {
        let mut list_637 = scope_634.start_list(true, Some("item"));
        for item_636 in var_635 {
            #[allow(unused_mut)]
            let mut entry_638 = list_637.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_638, item_636,
            );
        }
        list_637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("StartupAction");
    if let Some(var_640) = &input.startup_action {
        scope_639.string(var_640);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) {
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("Message");
    if let Some(var_642) = &input.message {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("Signature");
    if let Some(var_644) = &input.signature {
        scope_643.string(var_644);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) {
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("Amount");
    if let Some(var_646) = &input.amount {
        scope_645.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_646).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("CurrencyCode");
    if let Some(var_648) = &input.currency_code {
        scope_647.string(var_648.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) {
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("InstanceCount");
    if let Some(var_650) = &input.instance_count {
        scope_649.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_650).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("PurchaseToken");
    if let Some(var_652) = &input.purchase_token {
        scope_651.string(var_652);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_654) = &input.include_all_tags_of_instance {
        scope_653.boolean(*var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("InstanceTagKey");
    if let Some(var_656) = &input.instance_tag_keys {
        let mut list_658 = scope_655.start_list(true, Some("item"));
        for item_657 in var_656 {
            #[allow(unused_mut)]
            let mut entry_659 = list_658.entry();
            entry_659.string(item_657);
        }
        list_658.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) {
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("AllocationStrategy");
    if let Some(var_661) = &input.allocation_strategy {
        scope_660.string(var_661.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_663) = &input.on_demand_allocation_strategy {
        scope_662.string(var_663.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_665) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_664, var_665,
        );
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("ClientToken");
    if let Some(var_667) = &input.client_token {
        scope_666.string(var_667);
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_669) = &input.excess_capacity_termination_policy {
        scope_668.string(var_669.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("FulfilledCapacity");
    if let Some(var_671) = &input.fulfilled_capacity {
        scope_670.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_671).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_673) = &input.on_demand_fulfilled_capacity {
        scope_672.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_673).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("IamFleetRole");
    if let Some(var_675) = &input.iam_fleet_role {
        scope_674.string(var_675);
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("LaunchSpecifications");
    if let Some(var_677) = &input.launch_specifications {
        let mut list_679 = scope_676.start_list(true, Some("item"));
        for item_678 in var_677 {
            #[allow(unused_mut)]
            let mut entry_680 = list_679.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_680, item_678,
            );
        }
        list_679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_682) = &input.launch_template_configs {
        let mut list_684 = scope_681.start_list(true, Some("item"));
        for item_683 in var_682 {
            #[allow(unused_mut)]
            let mut entry_685 = list_684.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_685, item_683,
            );
        }
        list_684.finish();
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("SpotPrice");
    if let Some(var_687) = &input.spot_price {
        scope_686.string(var_687);
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("TargetCapacity");
    if let Some(var_689) = &input.target_capacity {
        scope_688.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_689).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_691) = &input.on_demand_target_capacity {
        scope_690.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_691).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_693) = &input.on_demand_max_total_price {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_695) = &input.spot_max_total_price {
        scope_694.string(var_695);
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_697) = &input.terminate_instances_with_expiration {
        scope_696.boolean(*var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("Type");
    if let Some(var_699) = &input.r#type {
        scope_698.string(var_699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("ValidFrom");
    if let Some(var_701) = &input.valid_from {
        scope_700.instant(var_701, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("ValidUntil");
    if let Some(var_703) = &input.valid_until {
        scope_702.instant(var_703, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_705) = &input.replace_unhealthy_instances {
        scope_704.boolean(*var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_707) = &input.instance_interruption_behavior {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("LoadBalancersConfig");
    if let Some(var_709) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(scope_708, var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_711) = &input.instance_pools_to_use_count {
        scope_710.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_711).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("Context");
    if let Some(var_713) = &input.context {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("TagSpecification");
    if let Some(var_715) = &input.tag_specifications {
        let mut list_717 = scope_714.start_list(true, Some("item"));
        for item_716 in var_715 {
            #[allow(unused_mut)]
            let mut entry_718 = list_717.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_718, item_716,
            );
        }
        list_717.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("SecurityGroupId");
    if let Some(var_720) = &input.security_group_ids {
        let mut list_722 = scope_719.start_list(true, Some("item"));
        for item_721 in var_720 {
            #[allow(unused_mut)]
            let mut entry_723 = list_722.entry();
            entry_723.string(item_721);
        }
        list_722.finish();
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("SecurityGroup");
    if let Some(var_725) = &input.security_groups {
        let mut list_727 = scope_724.start_list(true, Some("item"));
        for item_726 in var_725 {
            #[allow(unused_mut)]
            let mut entry_728 = list_727.entry();
            entry_728.string(item_726);
        }
        list_727.finish();
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("AddressingType");
    if let Some(var_730) = &input.addressing_type {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("BlockDeviceMapping");
    if let Some(var_732) = &input.block_device_mappings {
        let mut list_734 = scope_731.start_list(true, Some("item"));
        for item_733 in var_732 {
            #[allow(unused_mut)]
            let mut entry_735 = list_734.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_735, item_733,
            );
        }
        list_734.finish();
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("EbsOptimized");
    if let Some(var_737) = &input.ebs_optimized {
        scope_736.boolean(*var_737);
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("IamInstanceProfile");
    if let Some(var_739) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_738, var_739,
        );
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("ImageId");
    if let Some(var_741) = &input.image_id {
        scope_740.string(var_741);
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("InstanceType");
    if let Some(var_743) = &input.instance_type {
        scope_742.string(var_743.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("KernelId");
    if let Some(var_745) = &input.kernel_id {
        scope_744.string(var_745);
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("KeyName");
    if let Some(var_747) = &input.key_name {
        scope_746.string(var_747);
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("Monitoring");
    if let Some(var_749) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_748, var_749,
        );
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("NetworkInterface");
    if let Some(var_751) = &input.network_interfaces {
        let mut list_753 = scope_750.start_list(true, Some("item"));
        for item_752 in var_751 {
            #[allow(unused_mut)]
            let mut entry_754 = list_753.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_754, item_752);
        }
        list_753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("Placement");
    if let Some(var_756) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_755, var_756);
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("RamdiskId");
    if let Some(var_758) = &input.ramdisk_id {
        scope_757.string(var_758);
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("SubnetId");
    if let Some(var_760) = &input.subnet_id {
        scope_759.string(var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("UserData");
    if let Some(var_762) = &input.user_data {
        scope_761.string(var_762);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) {
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("Enabled");
    if let Some(var_764) = &input.enabled {
        scope_763.boolean(*var_764);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) {
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("AvailabilityZone");
    if let Some(var_766) = &input.availability_zone {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("Affinity");
    if let Some(var_768) = &input.affinity {
        scope_767.string(var_768);
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("GroupName");
    if let Some(var_770) = &input.group_name {
        scope_769.string(var_770);
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("PartitionNumber");
    if let Some(var_772) = &input.partition_number {
        scope_771.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_772).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("HostId");
    if let Some(var_774) = &input.host_id {
        scope_773.string(var_774);
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("Tenancy");
    if let Some(var_776) = &input.tenancy {
        scope_775.string(var_776.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("SpreadDomain");
    if let Some(var_778) = &input.spread_domain {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("HostResourceGroupArn");
    if let Some(var_780) = &input.host_resource_group_arn {
        scope_779.string(var_780);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_782) = &input.associate_public_ip_address {
        scope_781.boolean(*var_782);
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("DeleteOnTermination");
    if let Some(var_784) = &input.delete_on_termination {
        scope_783.boolean(*var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("Description");
    if let Some(var_786) = &input.description {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("DeviceIndex");
    if let Some(var_788) = &input.device_index {
        scope_787.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_788).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("SecurityGroupId");
    if let Some(var_790) = &input.groups {
        let mut list_792 = scope_789.start_list(true, Some("SecurityGroupId"));
        for item_791 in var_790 {
            #[allow(unused_mut)]
            let mut entry_793 = list_792.entry();
            entry_793.string(item_791);
        }
        list_792.finish();
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("Ipv6AddressCount");
    if let Some(var_795) = &input.ipv6_address_count {
        scope_794.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_795).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("Ipv6Addresses");
    if let Some(var_797) = &input.ipv6_addresses {
        let mut list_799 = scope_796.start_list(true, Some("item"));
        for item_798 in var_797 {
            #[allow(unused_mut)]
            let mut entry_800 = list_799.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_800, item_798,
            );
        }
        list_799.finish();
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("NetworkInterfaceId");
    if let Some(var_802) = &input.network_interface_id {
        scope_801.string(var_802);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("PrivateIpAddress");
    if let Some(var_804) = &input.private_ip_address {
        scope_803.string(var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("PrivateIpAddresses");
    if let Some(var_806) = &input.private_ip_addresses {
        let mut list_808 = scope_805.start_list(true, Some("item"));
        for item_807 in var_806 {
            #[allow(unused_mut)]
            let mut entry_809 = list_808.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_809, item_807,
            );
        }
        list_808.finish();
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_811) = &input.secondary_private_ip_address_count {
        scope_810.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("SubnetId");
    if let Some(var_813) = &input.subnet_id {
        scope_812.string(var_813);
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_815) = &input.associate_carrier_ip_address {
        scope_814.boolean(*var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("InterfaceType");
    if let Some(var_817) = &input.interface_type {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("NetworkCardIndex");
    if let Some(var_819) = &input.network_card_index {
        scope_818.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Ipv4Prefix");
    if let Some(var_821) = &input.ipv4_prefixes {
        let mut list_823 = scope_820.start_list(true, Some("item"));
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_824, item_822,
            );
        }
        list_823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_826) = &input.ipv4_prefix_count {
        scope_825.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_826).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("Ipv6Prefix");
    if let Some(var_828) = &input.ipv6_prefixes {
        let mut list_830 = scope_827.start_list(true, Some("item"));
        for item_829 in var_828 {
            #[allow(unused_mut)]
            let mut entry_831 = list_830.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_831, item_829,
            );
        }
        list_830.finish();
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_833) = &input.ipv6_prefix_count {
        scope_832.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_833).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("Type");
    if let Some(var_835) = &input.r#type {
        scope_834.string(var_835);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) {
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("Type");
    if let Some(var_837) = &input.r#type {
        scope_836.string(var_837);
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("Count");
    if let Some(var_839) = &input.count {
        scope_838.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_839).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("LaunchTemplateId");
    if let Some(var_841) = &input.launch_template_id {
        scope_840.string(var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("LaunchTemplateName");
    if let Some(var_843) = &input.launch_template_name {
        scope_842.string(var_843);
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("Version");
    if let Some(var_845) = &input.version {
        scope_844.string(var_845);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("MarketType");
    if let Some(var_847) = &input.market_type {
        scope_846.string(var_847.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("SpotOptions");
    if let Some(var_849) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_848, var_849);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("CpuCredits");
    if let Some(var_851) = &input.cpu_credits {
        scope_850.string(var_851);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("CoreCount");
    if let Some(var_853) = &input.core_count {
        scope_852.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_853).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_854 = writer.prefix("ThreadsPerCore");
    if let Some(var_855) = &input.threads_per_core {
        scope_854.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_855).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("Configured");
    if let Some(var_857) = &input.configured {
        scope_856.boolean(*var_857);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_859) = &input.license_configuration_arn {
        scope_858.string(var_859);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("HttpTokens");
    if let Some(var_861) = &input.http_tokens {
        scope_860.string(var_861.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_863) = &input.http_put_response_hop_limit {
        scope_862.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_863).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("HttpEndpoint");
    if let Some(var_865) = &input.http_endpoint {
        scope_864.string(var_865.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_867) = &input.http_protocol_ipv6 {
        scope_866.string(var_867.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Enabled");
    if let Some(var_869) = &input.enabled {
        scope_868.boolean(*var_869);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("BlockDeviceMapping");
    if let Some(var_871) = &input.block_device_mappings {
        let mut list_873 = scope_870.start_list(true, Some("BlockDeviceMapping"));
        for item_872 in var_871 {
            #[allow(unused_mut)]
            let mut entry_874 = list_873.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_874, item_872);
        }
        list_873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("EbsOptimized");
    if let Some(var_876) = &input.ebs_optimized {
        scope_875.boolean(*var_876);
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("IamInstanceProfile");
    if let Some(var_878) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_877, var_878,
        );
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("ImageId");
    if let Some(var_880) = &input.image_id {
        scope_879.string(var_880);
    }
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("InstanceType");
    if let Some(var_882) = &input.instance_type {
        scope_881.string(var_882);
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("KernelId");
    if let Some(var_884) = &input.kernel_id {
        scope_883.string(var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("KeyName");
    if let Some(var_886) = &input.key_name {
        scope_885.string(var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("Monitoring");
    if let Some(var_888) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_887, var_888,
        );
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("NetworkInterface");
    if let Some(var_890) = &input.network_interfaces {
        let mut list_892 = scope_889.start_list(true, Some("NetworkInterface"));
        for item_891 in var_890 {
            #[allow(unused_mut)]
            let mut entry_893 = list_892.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(
                entry_893, item_891,
            );
        }
        list_892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("Placement");
    if let Some(var_895) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_894, var_895,
        );
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("RamdiskId");
    if let Some(var_897) = &input.ramdisk_id {
        scope_896.string(var_897);
    }
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("SecurityGroupId");
    if let Some(var_899) = &input.security_group_ids {
        let mut list_901 = scope_898.start_list(true, Some("SecurityGroupId"));
        for item_900 in var_899 {
            #[allow(unused_mut)]
            let mut entry_902 = list_901.entry();
            entry_902.string(item_900);
        }
        list_901.finish();
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("SubnetId");
    if let Some(var_904) = &input.subnet_id {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("UserData");
    if let Some(var_906) = &input.user_data {
        scope_905.string(var_906);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) {
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_908) = &input.security_group_rule_id {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("Description");
    if let Some(var_910) = &input.description {
        scope_909.string(var_910);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) {
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("CidrIp");
    if let Some(var_912) = &input.cidr_ip {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("Description");
    if let Some(var_914) = &input.description {
        scope_913.string(var_914);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) {
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("CidrIpv6");
    if let Some(var_916) = &input.cidr_ipv6 {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("Description");
    if let Some(var_918) = &input.description {
        scope_917.string(var_918);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) {
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("Description");
    if let Some(var_920) = &input.description {
        scope_919.string(var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("PrefixListId");
    if let Some(var_922) = &input.prefix_list_id {
        scope_921.string(var_922);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) {
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("Description");
    if let Some(var_924) = &input.description {
        scope_923.string(var_924);
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("GroupId");
    if let Some(var_926) = &input.group_id {
        scope_925.string(var_926);
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("GroupName");
    if let Some(var_928) = &input.group_name {
        scope_927.string(var_928);
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("PeeringStatus");
    if let Some(var_930) = &input.peering_status {
        scope_929.string(var_930);
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("UserId");
    if let Some(var_932) = &input.user_id {
        scope_931.string(var_932);
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("VpcId");
    if let Some(var_934) = &input.vpc_id {
        scope_933.string(var_934);
    }
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_936) = &input.vpc_peering_connection_id {
        scope_935.string(var_936);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) {
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("AWSAccessKeyId");
    if let Some(var_938) = &input.aws_access_key_id {
        scope_937.string(var_938);
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("Bucket");
    if let Some(var_940) = &input.bucket {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("Prefix");
    if let Some(var_942) = &input.prefix {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("UploadPolicy");
    if let Some(var_944) = &input.upload_policy {
        scope_943.string(&smithy_types::base64::encode(var_944));
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("UploadPolicySignature");
    if let Some(var_946) = &input.upload_policy_signature {
        scope_945.string(var_946);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("DirectoryId");
    if let Some(var_948) = &input.directory_id {
        scope_947.string(var_948);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_950) = &input.client_root_certificate_chain_arn {
        scope_949.string(var_950);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("SAMLProviderArn");
    if let Some(var_952) = &input.saml_provider_arn {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_954) = &input.self_service_saml_provider_arn {
        scope_953.string(var_954);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) {
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("CapacityRebalance");
    if let Some(var_956) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_955, var_956,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("UsageStrategy");
    if let Some(var_958) = &input.usage_strategy {
        scope_957.string(var_958.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("LaunchTemplateId");
    if let Some(var_960) = &input.launch_template_id {
        scope_959.string(var_960);
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("LaunchTemplateName");
    if let Some(var_962) = &input.launch_template_name {
        scope_961.string(var_962);
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Version");
    if let Some(var_964) = &input.version {
        scope_963.string(var_964);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) {
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("InstanceType");
    if let Some(var_966) = &input.instance_type {
        scope_965.string(var_966.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("MaxPrice");
    if let Some(var_968) = &input.max_price {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("SubnetId");
    if let Some(var_970) = &input.subnet_id {
        scope_969.string(var_970);
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("AvailabilityZone");
    if let Some(var_972) = &input.availability_zone {
        scope_971.string(var_972);
    }
    #[allow(unused_mut)]
    let mut scope_973 = writer.prefix("WeightedCapacity");
    if let Some(var_974) = &input.weighted_capacity {
        scope_973.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_974).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_975 = writer.prefix("Priority");
    if let Some(var_976) = &input.priority {
        scope_975.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_976).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_977 = writer.prefix("Placement");
    if let Some(var_978) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_977, var_978);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) {
    #[allow(unused_mut)]
    let mut scope_979 = writer.prefix("DeleteOnTermination");
    if let Some(var_980) = &input.delete_on_termination {
        scope_979.boolean(*var_980);
    }
    #[allow(unused_mut)]
    let mut scope_981 = writer.prefix("Iops");
    if let Some(var_982) = &input.iops {
        scope_981.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_982).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_983 = writer.prefix("SnapshotId");
    if let Some(var_984) = &input.snapshot_id {
        scope_983.string(var_984);
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("VolumeSize");
    if let Some(var_986) = &input.volume_size {
        scope_985.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_986).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("VolumeType");
    if let Some(var_988) = &input.volume_type {
        scope_987.string(var_988.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("KmsKeyId");
    if let Some(var_990) = &input.kms_key_id {
        scope_989.string(var_990);
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("Throughput");
    if let Some(var_992) = &input.throughput {
        scope_991.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_992).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_993 = writer.prefix("OutpostArn");
    if let Some(var_994) = &input.outpost_arn {
        scope_993.string(var_994);
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("Encrypted");
    if let Some(var_996) = &input.encrypted {
        scope_995.boolean(*var_996);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("Arn");
    if let Some(var_998) = &input.arn {
        scope_997.string(var_998);
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("Name");
    if let Some(var_1000) = &input.name {
        scope_999.string(var_1000);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("DeviceName");
    if let Some(var_1002) = &input.device_name {
        scope_1001.string(var_1002);
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("VirtualName");
    if let Some(var_1004) = &input.virtual_name {
        scope_1003.string(var_1004);
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("Ebs");
    if let Some(var_1006) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1005, var_1006,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("NoDevice");
    if let Some(var_1008) = &input.no_device {
        scope_1007.string(var_1008);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1010) = &input.associate_carrier_ip_address {
        scope_1009.boolean(*var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1012) = &input.associate_public_ip_address {
        scope_1011.boolean(*var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("DeleteOnTermination");
    if let Some(var_1014) = &input.delete_on_termination {
        scope_1013.boolean(*var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("Description");
    if let Some(var_1016) = &input.description {
        scope_1015.string(var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("DeviceIndex");
    if let Some(var_1018) = &input.device_index {
        scope_1017.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1018).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("SecurityGroupId");
    if let Some(var_1020) = &input.groups {
        let mut list_1022 = scope_1019.start_list(true, Some("SecurityGroupId"));
        for item_1021 in var_1020 {
            #[allow(unused_mut)]
            let mut entry_1023 = list_1022.entry();
            entry_1023.string(item_1021);
        }
        list_1022.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("InterfaceType");
    if let Some(var_1025) = &input.interface_type {
        scope_1024.string(var_1025);
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1027) = &input.ipv6_address_count {
        scope_1026.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1027).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("Ipv6Addresses");
    if let Some(var_1029) = &input.ipv6_addresses {
        let mut list_1031 = scope_1028.start_list(true, Some("InstanceIpv6Address"));
        for item_1030 in var_1029 {
            #[allow(unused_mut)]
            let mut entry_1032 = list_1031.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1032, item_1030,
            );
        }
        list_1031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1034) = &input.network_interface_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("PrivateIpAddress");
    if let Some(var_1036) = &input.private_ip_address {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1038) = &input.private_ip_addresses {
        let mut list_1040 = scope_1037.start_list(true, Some("item"));
        for item_1039 in var_1038 {
            #[allow(unused_mut)]
            let mut entry_1041 = list_1040.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1041, item_1039,
            );
        }
        list_1040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1043) = &input.secondary_private_ip_address_count {
        scope_1042.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1043).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("SubnetId");
    if let Some(var_1045) = &input.subnet_id {
        scope_1044.string(var_1045);
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("NetworkCardIndex");
    if let Some(var_1047) = &input.network_card_index {
        scope_1046.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1047).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("Ipv4Prefix");
    if let Some(var_1049) = &input.ipv4_prefixes {
        let mut list_1051 = scope_1048.start_list(true, Some("item"));
        for item_1050 in var_1049 {
            #[allow(unused_mut)]
            let mut entry_1052 = list_1051.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1052, item_1050,
            );
        }
        list_1051.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1054) = &input.ipv4_prefix_count {
        scope_1053.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1054).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("Ipv6Prefix");
    if let Some(var_1056) = &input.ipv6_prefixes {
        let mut list_1058 = scope_1055.start_list(true, Some("item"));
        for item_1057 in var_1056 {
            #[allow(unused_mut)]
            let mut entry_1059 = list_1058.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1059, item_1057,
            );
        }
        list_1058.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1061) = &input.ipv6_prefix_count {
        scope_1060.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1061).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("Enabled");
    if let Some(var_1063) = &input.enabled {
        scope_1062.boolean(*var_1063);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("AvailabilityZone");
    if let Some(var_1065) = &input.availability_zone {
        scope_1064.string(var_1065);
    }
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("Affinity");
    if let Some(var_1067) = &input.affinity {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("GroupName");
    if let Some(var_1069) = &input.group_name {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("HostId");
    if let Some(var_1071) = &input.host_id {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("Tenancy");
    if let Some(var_1073) = &input.tenancy {
        scope_1072.string(var_1073.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("SpreadDomain");
    if let Some(var_1075) = &input.spread_domain {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1077) = &input.host_resource_group_arn {
        scope_1076.string(var_1077);
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("PartitionNumber");
    if let Some(var_1079) = &input.partition_number {
        scope_1078.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1079).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("ResourceType");
    if let Some(var_1081) = &input.resource_type {
        scope_1080.string(var_1081.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("Tag");
    if let Some(var_1083) = &input.tags {
        let mut list_1085 = scope_1082.start_list(true, Some("item"));
        for item_1084 in var_1083 {
            #[allow(unused_mut)]
            let mut entry_1086 = list_1085.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1086, item_1084);
        }
        list_1085.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) {
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("Type");
    if let Some(var_1088) = &input.r#type {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("Count");
    if let Some(var_1090) = &input.count {
        scope_1089.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1090).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("MarketType");
    if let Some(var_1092) = &input.market_type {
        scope_1091.string(var_1092.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("SpotOptions");
    if let Some(var_1094) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1093, var_1094);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("CoreCount");
    if let Some(var_1096) = &input.core_count {
        scope_1095.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1096).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("ThreadsPerCore");
    if let Some(var_1098) = &input.threads_per_core {
        scope_1097.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1098).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1100) = &input.capacity_reservation_preference {
        scope_1099.string(var_1100.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1102) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1101, var_1102,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1104) = &input.license_configuration_arn {
        scope_1103.string(var_1104);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("Configured");
    if let Some(var_1106) = &input.configured {
        scope_1105.boolean(*var_1106);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("HttpTokens");
    if let Some(var_1108) = &input.http_tokens {
        scope_1107.string(var_1108.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1110) = &input.http_put_response_hop_limit {
        scope_1109.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("HttpEndpoint");
    if let Some(var_1112) = &input.http_endpoint {
        scope_1111.string(var_1112.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1114) = &input.http_protocol_ipv6 {
        scope_1113.string(var_1114.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("Enabled");
    if let Some(var_1116) = &input.enabled {
        scope_1115.boolean(*var_1116);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1118) = &input.tunnel_inside_cidr {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1120) = &input.tunnel_inside_ipv6_cidr {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("PreSharedKey");
    if let Some(var_1122) = &input.pre_shared_key {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1124) = &input.phase1_lifetime_seconds {
        scope_1123.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1126) = &input.phase2_lifetime_seconds {
        scope_1125.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1126).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1128) = &input.rekey_margin_time_seconds {
        scope_1127.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1128).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1130) = &input.rekey_fuzz_percentage {
        scope_1129.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1130).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("ReplayWindowSize");
    if let Some(var_1132) = &input.replay_window_size {
        scope_1131.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1132).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1134) = &input.dpd_timeout_seconds {
        scope_1133.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1134).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1136) = &input.dpd_timeout_action {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1138) = &input.phase1_encryption_algorithms {
        let mut list_1140 = scope_1137.start_list(true, Some("item"));
        for item_1139 in var_1138 {
            #[allow(unused_mut)]
            let mut entry_1141 = list_1140.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1141, item_1139);
        }
        list_1140.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1143) = &input.phase2_encryption_algorithms {
        let mut list_1145 = scope_1142.start_list(true, Some("item"));
        for item_1144 in var_1143 {
            #[allow(unused_mut)]
            let mut entry_1146 = list_1145.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1146, item_1144);
        }
        list_1145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1148) = &input.phase1_integrity_algorithms {
        let mut list_1150 = scope_1147.start_list(true, Some("item"));
        for item_1149 in var_1148 {
            #[allow(unused_mut)]
            let mut entry_1151 = list_1150.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1151, item_1149);
        }
        list_1150.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1153) = &input.phase2_integrity_algorithms {
        let mut list_1155 = scope_1152.start_list(true, Some("item"));
        for item_1154 in var_1153 {
            #[allow(unused_mut)]
            let mut entry_1156 = list_1155.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1156, item_1154);
        }
        list_1155.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1158) = &input.phase1_dh_group_numbers {
        let mut list_1160 = scope_1157.start_list(true, Some("item"));
        for item_1159 in var_1158 {
            #[allow(unused_mut)]
            let mut entry_1161 = list_1160.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1161, item_1159);
        }
        list_1160.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1162 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1163) = &input.phase2_dh_group_numbers {
        let mut list_1165 = scope_1162.start_list(true, Some("item"));
        for item_1164 in var_1163 {
            #[allow(unused_mut)]
            let mut entry_1166 = list_1165.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1166, item_1164);
        }
        list_1165.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("IKEVersion");
    if let Some(var_1168) = &input.ike_versions {
        let mut list_1170 = scope_1167.start_list(true, Some("item"));
        for item_1169 in var_1168 {
            #[allow(unused_mut)]
            let mut entry_1171 = list_1170.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1171, item_1169,
            );
        }
        list_1170.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("StartupAction");
    if let Some(var_1173) = &input.startup_action {
        scope_1172.string(var_1173);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) {
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1175) = &input.integration_result_s3_destination_arn {
        scope_1174.string(var_1175);
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1177) = &input.partition_load_frequency {
        scope_1176.string(var_1177.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("PartitionStartDate");
    if let Some(var_1179) = &input.partition_start_date {
        scope_1178.instant(var_1179, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("PartitionEndDate");
    if let Some(var_1181) = &input.partition_end_date {
        scope_1180.instant(var_1181, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) {
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("S3Bucket");
    if let Some(var_1183) = &input.s3_bucket {
        scope_1182.string(var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("S3Key");
    if let Some(var_1185) = &input.s3_key {
        scope_1184.string(var_1185);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) {
    #[allow(unused_mut)]
    let mut scope_1186 = writer.prefix("Data");
    if let Some(var_1187) = &input.data {
        scope_1186.string(var_1187);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("Group");
    if let Some(var_1189) = &input.group {
        scope_1188.string(var_1189.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("UserId");
    if let Some(var_1191) = &input.user_id {
        scope_1190.string(var_1191);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) {
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("Group");
    if let Some(var_1193) = &input.group {
        scope_1192.string(var_1193.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("UserId");
    if let Some(var_1195) = &input.user_id {
        scope_1194.string(var_1195);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("DeleteOnTermination");
    if let Some(var_1197) = &input.delete_on_termination {
        scope_1196.boolean(*var_1197);
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("VolumeId");
    if let Some(var_1199) = &input.volume_id {
        scope_1198.string(var_1199);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) {
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("CapacityReservationId");
    if let Some(var_1201) = &input.capacity_reservation_id {
        scope_1200.string(var_1201);
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1203) = &input.capacity_reservation_resource_group_arn {
        scope_1202.string(var_1203);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("IpProtocol");
    if let Some(var_1205) = &input.ip_protocol {
        scope_1204.string(var_1205);
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("FromPort");
    if let Some(var_1207) = &input.from_port {
        scope_1206.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1207).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("ToPort");
    if let Some(var_1209) = &input.to_port {
        scope_1208.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1209).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("CidrIpv4");
    if let Some(var_1211) = &input.cidr_ipv4 {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("CidrIpv6");
    if let Some(var_1213) = &input.cidr_ipv6 {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("PrefixListId");
    if let Some(var_1215) = &input.prefix_list_id {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("ReferencedGroupId");
    if let Some(var_1217) = &input.referenced_group_id {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Description");
    if let Some(var_1219) = &input.description {
        scope_1218.string(var_1219);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) {
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("Group");
    if let Some(var_1221) = &input.group {
        scope_1220.string(var_1221.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("UserId");
    if let Some(var_1223) = &input.user_id {
        scope_1222.string(var_1223);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("LaunchTemplateId");
    if let Some(var_1225) = &input.launch_template_id {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("LaunchTemplateName");
    if let Some(var_1227) = &input.launch_template_name {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("Version");
    if let Some(var_1229) = &input.version {
        scope_1228.string(var_1229);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) {
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("InstanceType");
    if let Some(var_1231) = &input.instance_type {
        scope_1230.string(var_1231.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("SpotPrice");
    if let Some(var_1233) = &input.spot_price {
        scope_1232.string(var_1233);
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("SubnetId");
    if let Some(var_1235) = &input.subnet_id {
        scope_1234.string(var_1235);
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("AvailabilityZone");
    if let Some(var_1237) = &input.availability_zone {
        scope_1236.string(var_1237);
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("WeightedCapacity");
    if let Some(var_1239) = &input.weighted_capacity {
        scope_1238.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("Priority");
    if let Some(var_1241) = &input.priority {
        scope_1240.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1241).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("Value");
    if let Some(var_1243) = &input.value {
        scope_1242.string(var_1243);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("Value");
    if let Some(var_1245) = &input.value {
        scope_1244.string(var_1245);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1246 = writer.prefix("Value");
    if let Some(var_1247) = &input.value {
        scope_1246.string(var_1247);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1248 = writer.prefix("Value");
    if let Some(var_1249) = &input.value {
        scope_1248.string(var_1249);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1250 = writer.prefix("Value");
    if let Some(var_1251) = &input.value {
        scope_1250.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1251).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1252 = writer.prefix("Value");
    if let Some(var_1253) = &input.value {
        scope_1252.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1253).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1254 = writer.prefix("Value");
    if let Some(var_1255) = &input.value {
        scope_1254.string(var_1255);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) {
    #[allow(unused_mut)]
    let mut scope_1256 = writer.prefix("CapacityRebalance");
    if let Some(var_1257) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1256, var_1257,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1258 = writer.prefix("GroupSet");
    if let Some(var_1259) = &input.security_groups {
        let mut list_1261 = scope_1258.start_list(true, Some("item"));
        for item_1260 in var_1259 {
            #[allow(unused_mut)]
            let mut entry_1262 = list_1261.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1262, item_1260,
            );
        }
        list_1261.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("AddressingType");
    if let Some(var_1264) = &input.addressing_type {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1266) = &input.block_device_mappings {
        let mut list_1268 = scope_1265.start_list(true, Some("item"));
        for item_1267 in var_1266 {
            #[allow(unused_mut)]
            let mut entry_1269 = list_1268.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1269, item_1267,
            );
        }
        list_1268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("EbsOptimized");
    if let Some(var_1271) = &input.ebs_optimized {
        scope_1270.boolean(*var_1271);
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("IamInstanceProfile");
    if let Some(var_1273) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1272, var_1273,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("ImageId");
    if let Some(var_1275) = &input.image_id {
        scope_1274.string(var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("InstanceType");
    if let Some(var_1277) = &input.instance_type {
        scope_1276.string(var_1277.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("KernelId");
    if let Some(var_1279) = &input.kernel_id {
        scope_1278.string(var_1279);
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("KeyName");
    if let Some(var_1281) = &input.key_name {
        scope_1280.string(var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("Monitoring");
    if let Some(var_1283) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1282, var_1283,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1285) = &input.network_interfaces {
        let mut list_1287 = scope_1284.start_list(true, Some("item"));
        for item_1286 in var_1285 {
            #[allow(unused_mut)]
            let mut entry_1288 = list_1287.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1288, item_1286);
        }
        list_1287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("Placement");
    if let Some(var_1290) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1289, var_1290);
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("RamdiskId");
    if let Some(var_1292) = &input.ramdisk_id {
        scope_1291.string(var_1292);
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("SpotPrice");
    if let Some(var_1294) = &input.spot_price {
        scope_1293.string(var_1294);
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("SubnetId");
    if let Some(var_1296) = &input.subnet_id {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("UserData");
    if let Some(var_1298) = &input.user_data {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("WeightedCapacity");
    if let Some(var_1300) = &input.weighted_capacity {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("TagSpecificationSet");
    if let Some(var_1302) = &input.tag_specifications {
        let mut list_1304 = scope_1301.start_list(true, Some("item"));
        for item_1303 in var_1302 {
            #[allow(unused_mut)]
            let mut entry_1305 = list_1304.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1305, item_1303,
            );
        }
        list_1304.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1306 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1307) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1306, var_1307,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1308 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1309) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1308, var_1309,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) {
    #[allow(unused_mut)]
    let mut scope_1310 = writer.prefix("AvailabilityZone");
    if let Some(var_1311) = &input.availability_zone {
        scope_1310.string(var_1311);
    }
    #[allow(unused_mut)]
    let mut scope_1312 = writer.prefix("GroupName");
    if let Some(var_1313) = &input.group_name {
        scope_1312.string(var_1313);
    }
    #[allow(unused_mut)]
    let mut scope_1314 = writer.prefix("Tenancy");
    if let Some(var_1315) = &input.tenancy {
        scope_1314.string(var_1315.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) {
    #[allow(unused_mut)]
    let mut scope_1316 = writer.prefix("MaxPrice");
    if let Some(var_1317) = &input.max_price {
        scope_1316.string(var_1317);
    }
    #[allow(unused_mut)]
    let mut scope_1318 = writer.prefix("SpotInstanceType");
    if let Some(var_1319) = &input.spot_instance_type {
        scope_1318.string(var_1319.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1321) = &input.block_duration_minutes {
        scope_1320.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1321).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("ValidUntil");
    if let Some(var_1323) = &input.valid_until {
        scope_1322.instant(var_1323, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1325) = &input.instance_interruption_behavior {
        scope_1324.string(var_1325.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) {
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("DeviceName");
    if let Some(var_1327) = &input.device_name {
        scope_1326.string(var_1327);
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("Ebs");
    if let Some(var_1329) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1328, var_1329,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("NoDevice");
    if let Some(var_1331) = &input.no_device {
        scope_1330.string(var_1331);
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("VirtualName");
    if let Some(var_1333) = &input.virtual_name {
        scope_1332.string(var_1333);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) {
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("Arn");
    if let Some(var_1335) = &input.arn {
        scope_1334.string(var_1335);
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("Name");
    if let Some(var_1337) = &input.name {
        scope_1336.string(var_1337);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) {
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("Enabled");
    if let Some(var_1339) = &input.enabled {
        scope_1338.boolean(*var_1339);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) {
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1341) = &input.associate_public_ip_address {
        scope_1340.boolean(*var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("DeleteOnTermination");
    if let Some(var_1343) = &input.delete_on_termination {
        scope_1342.boolean(*var_1343);
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Description");
    if let Some(var_1345) = &input.description {
        scope_1344.string(var_1345);
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("DeviceIndex");
    if let Some(var_1347) = &input.device_index {
        scope_1346.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Group");
    if let Some(var_1349) = &input.groups {
        let mut list_1351 = scope_1348.start_list(true, Some("SecurityGroupId"));
        for item_1350 in var_1349 {
            #[allow(unused_mut)]
            let mut entry_1352 = list_1351.entry();
            entry_1352.string(item_1350);
        }
        list_1351.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1354) = &input.ipv6_address_count {
        scope_1353.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1354).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("Ipv6Address");
    if let Some(var_1356) = &input.ipv6_addresses {
        let mut list_1358 = scope_1355.start_list(true, Some("Ipv6Address"));
        for item_1357 in var_1356 {
            #[allow(unused_mut)]
            let mut entry_1359 = list_1358.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1359, item_1357,
            );
        }
        list_1358.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1361) = &input.network_interface_id {
        scope_1360.string(var_1361);
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("PrivateIpAddress");
    if let Some(var_1363) = &input.private_ip_address {
        scope_1362.string(var_1363);
    }
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1365) = &input.private_ip_address_configs {
        let mut list_1367 = scope_1364.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1366 in var_1365 {
            #[allow(unused_mut)]
            let mut entry_1368 = list_1367.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1368, item_1366);
        }
        list_1367.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1370) = &input.secondary_private_ip_address_count {
        scope_1369.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1370).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("SubnetId");
    if let Some(var_1372) = &input.subnet_id {
        scope_1371.string(var_1372);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) {
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("AvailabilityZone");
    if let Some(var_1374) = &input.availability_zone {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("GroupName");
    if let Some(var_1376) = &input.group_name {
        scope_1375.string(var_1376);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("ReplacementStrategy");
    if let Some(var_1378) = &input.replacement_strategy {
        scope_1377.string(var_1378.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("Encrypted");
    if let Some(var_1380) = &input.encrypted {
        scope_1379.boolean(*var_1380);
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("DeleteOnTermination");
    if let Some(var_1382) = &input.delete_on_termination {
        scope_1381.boolean(*var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("Iops");
    if let Some(var_1384) = &input.iops {
        scope_1383.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1384).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("KmsKeyId");
    if let Some(var_1386) = &input.kms_key_id {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("SnapshotId");
    if let Some(var_1388) = &input.snapshot_id {
        scope_1387.string(var_1388);
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("VolumeSize");
    if let Some(var_1390) = &input.volume_size {
        scope_1389.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1390).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("VolumeType");
    if let Some(var_1392) = &input.volume_type {
        scope_1391.string(var_1392.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("Throughput");
    if let Some(var_1394) = &input.throughput {
        scope_1393.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1394).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("Ipv6Address");
    if let Some(var_1396) = &input.ipv6_address {
        scope_1395.string(var_1396);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("MaxPrice");
    if let Some(var_1398) = &input.max_price {
        scope_1397.string(var_1398);
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("SpotInstanceType");
    if let Some(var_1400) = &input.spot_instance_type {
        scope_1399.string(var_1400.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1402) = &input.block_duration_minutes {
        scope_1401.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1402).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("ValidUntil");
    if let Some(var_1404) = &input.valid_until {
        scope_1403.instant(var_1404, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1406) = &input.instance_interruption_behavior {
        scope_1405.string(var_1406.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) {
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("ReplacementStrategy");
    if let Some(var_1408) = &input.replacement_strategy {
        scope_1407.string(var_1408.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) {
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("GroupName");
    if let Some(var_1410) = &input.group_name {
        scope_1409.string(var_1410);
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("GroupId");
    if let Some(var_1412) = &input.group_id {
        scope_1411.string(var_1412);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) {
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("Enabled");
    if let Some(var_1414) = &input.enabled {
        scope_1413.boolean(*var_1414);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("ResourceType");
    if let Some(var_1416) = &input.resource_type {
        scope_1415.string(var_1416.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("Tag");
    if let Some(var_1418) = &input.tags {
        let mut list_1420 = scope_1417.start_list(true, Some("item"));
        for item_1419 in var_1418 {
            #[allow(unused_mut)]
            let mut entry_1421 = list_1420.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1421, item_1419);
        }
        list_1420.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1423) = &input.classic_load_balancers {
        let mut list_1425 = scope_1422.start_list(true, Some("item"));
        for item_1424 in var_1423 {
            #[allow(unused_mut)]
            let mut entry_1426 = list_1425.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1426, item_1424,
            );
        }
        list_1425.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1427 = writer.prefix("TargetGroups");
    if let Some(var_1428) = &input.target_groups {
        let mut list_1430 = scope_1427.start_list(true, Some("item"));
        for item_1429 in var_1428 {
            #[allow(unused_mut)]
            let mut entry_1431 = list_1430.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1431, item_1429);
        }
        list_1430.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) {
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("DeleteOnTermination");
    if let Some(var_1433) = &input.delete_on_termination {
        scope_1432.boolean(*var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("Encrypted");
    if let Some(var_1435) = &input.encrypted {
        scope_1434.boolean(*var_1435);
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("Iops");
    if let Some(var_1437) = &input.iops {
        scope_1436.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1437).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("SnapshotId");
    if let Some(var_1439) = &input.snapshot_id {
        scope_1438.string(var_1439);
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("VolumeSize");
    if let Some(var_1441) = &input.volume_size {
        scope_1440.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1441).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("VolumeType");
    if let Some(var_1443) = &input.volume_type {
        scope_1442.string(var_1443);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) {
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("Ipv6Address");
    if let Some(var_1445) = &input.ipv6_address {
        scope_1444.string(var_1445);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("Primary");
    if let Some(var_1447) = &input.primary {
        scope_1446.boolean(*var_1447);
    }
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("PrivateIpAddress");
    if let Some(var_1449) = &input.private_ip_address {
        scope_1448.string(var_1449);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) {
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("Name");
    if let Some(var_1451) = &input.name {
        scope_1450.string(var_1451);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) {
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("Arn");
    if let Some(var_1453) = &input.arn {
        scope_1452.string(var_1453);
    }
}
