// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Key");
    if let Some(var_92) = &input.key {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Value");
    if let Some(var_94) = &input.values {
        let mut list_96 = scope_93.start_list(true, Some("item"));
        for item_95 in var_94 {
            #[allow(unused_mut)]
            let mut entry_97 = list_96.entry();
            entry_97.string(item_95);
        }
        list_96.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("AllocationStrategy");
    if let Some(var_99) = &input.allocation_strategy {
        scope_98.string(var_99.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("MaintenanceStrategies");
    if let Some(var_101) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_100, var_101)?;
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_103) = &input.instance_interruption_behavior {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_105) = &input.instance_pools_to_use_count {
        scope_104.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("SingleInstanceType");
    if let Some(var_107) = &input.single_instance_type {
        scope_106.boolean(*var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_109) = &input.single_availability_zone {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MinTargetCapacity");
    if let Some(var_111) = &input.min_target_capacity {
        scope_110.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("MaxTotalPrice");
    if let Some(var_113) = &input.max_total_price {
        scope_112.string(var_113);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("AllocationStrategy");
    if let Some(var_115) = &input.allocation_strategy {
        scope_114.string(var_115.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("CapacityReservationOptions");
    if let Some(var_117) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_116, var_117,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("SingleInstanceType");
    if let Some(var_119) = &input.single_instance_type {
        scope_118.boolean(*var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_121) = &input.single_availability_zone {
        scope_120.boolean(*var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("MinTargetCapacity");
    if let Some(var_123) = &input.min_target_capacity {
        scope_122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("MaxTotalPrice");
    if let Some(var_125) = &input.max_total_price {
        scope_124.string(var_125);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_127) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_126, var_127)?;
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Overrides");
    if let Some(var_129) = &input.overrides {
        let mut list_131 = scope_128.start_list(true, Some("item"));
        for item_130 in var_129 {
            #[allow(unused_mut)]
            let mut entry_132 = list_131.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_132, item_130)?;
        }
        list_131.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("TotalTargetCapacity");
    if let Some(var_134) = &input.total_target_capacity {
        scope_133.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_136) = &input.on_demand_target_capacity {
        scope_135.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("SpotTargetCapacity");
    if let Some(var_138) = &input.spot_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_140) = &input.default_target_capacity_type {
        scope_139.string(var_140.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_142) = &input.target_capacity_unit_type {
        scope_141.string(var_142.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("FileFormat");
    if let Some(var_144) = &input.file_format {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_146) = &input.hive_compatible_partitions {
        scope_145.boolean(*var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("PerHourPartition");
    if let Some(var_148) = &input.per_hour_partition {
        scope_147.boolean(*var_148);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Bucket");
    if let Some(var_150) = &input.bucket {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("Key");
    if let Some(var_152) = &input.key {
        scope_151.string(var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("DeviceName");
    if let Some(var_154) = &input.device_name {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("VirtualName");
    if let Some(var_156) = &input.virtual_name {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("Ebs");
    if let Some(var_158) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_157, var_158)?;
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("NoDevice");
    if let Some(var_160) = &input.no_device {
        scope_159.string(var_160);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("StartWeekDay");
    if let Some(var_162) = &input.start_week_day {
        scope_161.string(var_162.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("StartHour");
    if let Some(var_164) = &input.start_hour {
        scope_163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("EndWeekDay");
    if let Some(var_166) = &input.end_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("EndHour");
    if let Some(var_168) = &input.end_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ContainerFormat");
    if let Some(var_170) = &input.container_format {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DiskImageFormat");
    if let Some(var_172) = &input.disk_image_format {
        scope_171.string(var_172.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("S3Bucket");
    if let Some(var_174) = &input.s3_bucket {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("S3Prefix");
    if let Some(var_176) = &input.s3_prefix {
        scope_175.string(var_176);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("KernelId");
    if let Some(var_178) = &input.kernel_id {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("EbsOptimized");
    if let Some(var_180) = &input.ebs_optimized {
        scope_179.boolean(*var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("IamInstanceProfile");
    if let Some(var_182) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_181, var_182)?;
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("BlockDeviceMapping");
    if let Some(var_184) = &input.block_device_mappings {
        let mut list_186 = scope_183.start_list(true, Some("BlockDeviceMapping"));
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_187, item_185)?;
        }
        list_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("NetworkInterface");
    if let Some(var_189) = &input.network_interfaces {
        let mut list_191 =
            scope_188.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_190 in var_189 {
            #[allow(unused_mut)]
            let mut entry_192 = list_191.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_192, item_190)?;
        }
        list_191.finish();
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("ImageId");
    if let Some(var_194) = &input.image_id {
        scope_193.string(var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("InstanceType");
    if let Some(var_196) = &input.instance_type {
        scope_195.string(var_196.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("KeyName");
    if let Some(var_198) = &input.key_name {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("Monitoring");
    if let Some(var_200) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_199, var_200,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("Placement");
    if let Some(var_202) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_201, var_202,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("RamDiskId");
    if let Some(var_204) = &input.ram_disk_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("DisableApiTermination");
    if let Some(var_206) = &input.disable_api_termination {
        scope_205.boolean(*var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_208) = &input.instance_initiated_shutdown_behavior {
        scope_207.string(var_208.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("UserData");
    if let Some(var_210) = &input.user_data {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("TagSpecification");
    if let Some(var_212) = &input.tag_specifications {
        let mut list_214 =
            scope_211.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_215, item_213)?;
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_217) = &input.elastic_gpu_specifications {
        let mut list_219 = scope_216.start_list(true, Some("ElasticGpuSpecification"));
        for item_218 in var_217 {
            #[allow(unused_mut)]
            let mut entry_220 = list_219.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_220, item_218,
            )?;
        }
        list_219.finish();
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_222) = &input.elastic_inference_accelerators {
        let mut list_224 = scope_221.start_list(true, Some("item"));
        for item_223 in var_222 {
            #[allow(unused_mut)]
            let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("SecurityGroupId");
    if let Some(var_227) = &input.security_group_ids {
        let mut list_229 = scope_226.start_list(true, Some("SecurityGroupId"));
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            entry_230.string(item_228);
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("SecurityGroup");
    if let Some(var_232) = &input.security_groups {
        let mut list_234 = scope_231.start_list(true, Some("SecurityGroup"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            entry_235.string(item_233);
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("InstanceMarketOptions");
    if let Some(var_237) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_236, var_237)?;
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("CreditSpecification");
    if let Some(var_239) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_238, var_239,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("CpuOptions");
    if let Some(var_241) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_240, var_241,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_243) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_242, var_243)?;
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("LicenseSpecification");
    if let Some(var_245) = &input.license_specifications {
        let mut list_247 = scope_244.start_list(true, Some("item"));
        for item_246 in var_245 {
            #[allow(unused_mut)]
            let mut entry_248 = list_247.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_248, item_246)?;
        }
        list_247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("HibernationOptions");
    if let Some(var_250) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_249, var_250)?;
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("MetadataOptions");
    if let Some(var_252) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_251, var_252)?;
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("EnclaveOptions");
    if let Some(var_254) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_253, var_254,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("InstanceRequirements");
    if let Some(var_256) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_255, var_256,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("Cidr");
    if let Some(var_258) = &input.cidr {
        scope_257.string(var_258);
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("Description");
    if let Some(var_260) = &input.description {
        scope_259.string(var_260);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("Code");
    if let Some(var_262) = &input.code {
        scope_261.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("Type");
    if let Some(var_264) = &input.r#type {
        scope_263.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_264).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("From");
    if let Some(var_266) = &input.from {
        scope_265.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_266).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("To");
    if let Some(var_268) = &input.to {
        scope_267.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_268).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Ipv6Address");
    if let Some(var_270) = &input.ipv6_address {
        scope_269.string(var_270);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Primary");
    if let Some(var_272) = &input.primary {
        scope_271.boolean(*var_272);
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("PrivateIpAddress");
    if let Some(var_274) = &input.private_ip_address {
        scope_273.string(var_274);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("Ipv4Prefix");
    if let Some(var_276) = &input.ipv4_prefix {
        scope_275.string(var_276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Ipv6Prefix");
    if let Some(var_278) = &input.ipv6_prefix {
        scope_277.string(var_278);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("CurrencyCode");
    if let Some(var_280) = &input.currency_code {
        scope_279.string(var_280.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Price");
    if let Some(var_282) = &input.price {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_282).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Term");
    if let Some(var_284) = &input.term {
        scope_283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("InstanceId");
    if let Some(var_286) = &input.instance_id {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("ExcludeBootVolume");
    if let Some(var_288) = &input.exclude_boot_volume {
        scope_287.boolean(*var_288);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("Key");
    if let Some(var_290) = &input.key {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("Value");
    if let Some(var_292) = &input.value {
        scope_291.string(var_292);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("Key");
    if let Some(var_294) = &input.key {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("Value");
    if let Some(var_296) = &input.value {
        scope_295.string(var_296);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("FromPort");
    if let Some(var_298) = &input.from_port {
        scope_297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("ToPort");
    if let Some(var_300) = &input.to_port {
        scope_299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("AmazonSideAsn");
    if let Some(var_302) = &input.amazon_side_asn {
        scope_301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_304) = &input.auto_accept_shared_attachments {
        scope_303.string(var_304.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_306) = &input.default_route_table_association {
        scope_305.string(var_306.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_308) = &input.default_route_table_propagation {
        scope_307.string(var_308.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("VpnEcmpSupport");
    if let Some(var_310) = &input.vpn_ecmp_support {
        scope_309.string(var_310.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("DnsSupport");
    if let Some(var_312) = &input.dns_support {
        scope_311.string(var_312.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("MulticastSupport");
    if let Some(var_314) = &input.multicast_support {
        scope_313.string(var_314.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_316) = &input.transit_gateway_cidr_blocks {
        let mut list_318 = scope_315.start_list(true, Some("item"));
        for item_317 in var_316 {
            #[allow(unused_mut)]
            let mut entry_319 = list_318.entry();
            entry_319.string(item_317);
        }
        list_318.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("Protocol");
    if let Some(var_321) = &input.protocol {
        scope_320.string(var_321.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("PeerAsn");
    if let Some(var_323) = &input.peer_asn {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("Igmpv2Support");
    if let Some(var_325) = &input.igmpv2_support {
        scope_324.string(var_325.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("StaticSourcesSupport");
    if let Some(var_327) = &input.static_sources_support {
        scope_326.string(var_327.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_329) = &input.auto_accept_shared_associations {
        scope_328.string(var_329.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("DnsSupport");
    if let Some(var_331) = &input.dns_support {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("Ipv6Support");
    if let Some(var_333) = &input.ipv6_support {
        scope_332.string(var_333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("ApplianceModeSupport");
    if let Some(var_335) = &input.appliance_mode_support {
        scope_334.string(var_335.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("EnableAcceleration");
    if let Some(var_337) = &input.enable_acceleration {
        scope_336.boolean(*var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("StaticRoutesOnly");
    if let Some(var_339) = &input.static_routes_only {
        scope_338.boolean(*var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_341) = &input.tunnel_inside_ip_version {
        scope_340.string(var_341.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("TunnelOptions");
    if let Some(var_343) = &input.tunnel_options {
        let mut list_345 = scope_342.start_list(true, None);
        for item_344 in var_343 {
            #[allow(unused_mut)]
            let mut entry_346 = list_345.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_346, item_344,
            )?;
        }
        list_345.finish();
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_348) = &input.local_ipv4_network_cidr {
        scope_347.string(var_348);
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_350) = &input.remote_ipv4_network_cidr {
        scope_349.string(var_350);
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_352) = &input.local_ipv6_network_cidr {
        scope_351.string(var_352);
    }
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_354) = &input.remote_ipv6_network_cidr {
        scope_353.string(var_354);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_356) = &input.include_all_tags_of_instance {
        scope_355.boolean(*var_356);
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("InstanceTagKey");
    if let Some(var_358) = &input.instance_tag_keys {
        let mut list_360 = scope_357.start_list(true, Some("item"));
        for item_359 in var_358 {
            #[allow(unused_mut)]
            let mut entry_361 = list_360.entry();
            entry_361.string(item_359);
        }
        list_360.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("Name");
    if let Some(var_363) = &input.name {
        scope_362.string(var_363);
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("Value");
    if let Some(var_365) = &input.values {
        let mut list_367 = scope_364.start_list(true, Some("item"));
        for item_366 in var_365 {
            #[allow(unused_mut)]
            let mut entry_368 = list_367.entry();
            entry_368.string(item_366);
        }
        list_367.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("EarliestTime");
    if let Some(var_370) = &input.earliest_time {
        scope_369.date_time(var_370, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("LatestTime");
    if let Some(var_372) = &input.latest_time {
        scope_371.date_time(var_372, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("Frequency");
    if let Some(var_374) = &input.frequency {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("Interval");
    if let Some(var_376) = &input.interval {
        scope_375.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_376).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("OccurrenceDay");
    if let Some(var_378) = &input.occurrence_days {
        let mut list_380 = scope_377.start_list(true, Some("OccurenceDay"));
        for item_379 in var_378 {
            #[allow(unused_mut)]
            let mut entry_381 = list_380.entry();
            entry_381.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_379).into()),
            );
        }
        list_380.finish();
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_383) = &input.occurrence_relative_to_end {
        scope_382.boolean(*var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("OccurrenceUnit");
    if let Some(var_385) = &input.occurrence_unit {
        scope_384.string(var_385);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("EarliestTime");
    if let Some(var_387) = &input.earliest_time {
        scope_386.date_time(var_387, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("LatestTime");
    if let Some(var_389) = &input.latest_time {
        scope_388.date_time(var_389, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("InstanceId");
    if let Some(var_391) = &input.instance_ids {
        let mut list_393 = scope_390.start_list(true, Some("item"));
        for item_392 in var_391 {
            #[allow(unused_mut)]
            let mut entry_394 = list_393.entry();
            entry_394.string(item_392);
        }
        list_393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("InstanceTag");
    if let Some(var_396) = &input.instance_tags {
        let mut list_398 = scope_395.start_list(true, Some("item"));
        for item_397 in var_396 {
            #[allow(unused_mut)]
            let mut entry_399 = list_398.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_399, item_397)?;
        }
        list_398.finish();
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DedicatedHostId");
    if let Some(var_401) = &input.dedicated_host_ids {
        let mut list_403 = scope_400.start_list(true, Some("item"));
        for item_402 in var_401 {
            #[allow(unused_mut)]
            let mut entry_404 = list_403.entry();
            entry_404.string(item_402);
        }
        list_403.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("S3Bucket");
    if let Some(var_406) = &input.s3_bucket {
        scope_405.string(var_406);
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("S3Prefix");
    if let Some(var_408) = &input.s3_prefix {
        scope_407.string(var_408);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("AthenaIntegration");
    if let Some(var_410) = &input.athena_integrations {
        let mut list_412 = scope_409.start_list(true, Some("item"));
        for item_411 in var_410 {
            #[allow(unused_mut)]
            let mut entry_413 = list_412.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_413, item_411,
            )?;
        }
        list_412.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("VCpuCount");
    if let Some(var_415) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_414, var_415,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("MemoryMiB");
    if let Some(var_417) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_416, var_417)?;
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("CpuManufacturer");
    if let Some(var_419) = &input.cpu_manufacturers {
        let mut list_421 = scope_418.start_list(true, Some("item"));
        for item_420 in var_419 {
            #[allow(unused_mut)]
            let mut entry_422 = list_421.entry();
            entry_422.string(item_420.as_str());
        }
        list_421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_424) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_423, var_424,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("ExcludedInstanceType");
    if let Some(var_426) = &input.excluded_instance_types {
        let mut list_428 = scope_425.start_list(true, Some("item"));
        for item_427 in var_426 {
            #[allow(unused_mut)]
            let mut entry_429 = list_428.entry();
            entry_429.string(item_427);
        }
        list_428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("InstanceGeneration");
    if let Some(var_431) = &input.instance_generations {
        let mut list_433 = scope_430.start_list(true, Some("item"));
        for item_432 in var_431 {
            #[allow(unused_mut)]
            let mut entry_434 = list_433.entry();
            entry_434.string(item_432.as_str());
        }
        list_433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_436) = &input.spot_max_price_percentage_over_lowest_price {
        scope_435.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_438) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("BareMetal");
    if let Some(var_440) = &input.bare_metal {
        scope_439.string(var_440.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("BurstablePerformance");
    if let Some(var_442) = &input.burstable_performance {
        scope_441.string(var_442.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("RequireHibernateSupport");
    if let Some(var_444) = &input.require_hibernate_support {
        scope_443.boolean(*var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_446) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_445, var_446,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("LocalStorage");
    if let Some(var_448) = &input.local_storage {
        scope_447.string(var_448.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("LocalStorageType");
    if let Some(var_450) = &input.local_storage_types {
        let mut list_452 = scope_449.start_list(true, Some("item"));
        for item_451 in var_450 {
            #[allow(unused_mut)]
            let mut entry_453 = list_452.entry();
            entry_453.string(item_451.as_str());
        }
        list_452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_455) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_454, var_455,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_457) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_456, var_457,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("AcceleratorType");
    if let Some(var_459) = &input.accelerator_types {
        let mut list_461 = scope_458.start_list(true, Some("item"));
        for item_460 in var_459 {
            #[allow(unused_mut)]
            let mut entry_462 = list_461.entry();
            entry_462.string(item_460.as_str());
        }
        list_461.finish();
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("AcceleratorCount");
    if let Some(var_464) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_463, var_464,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_466) = &input.accelerator_manufacturers {
        let mut list_468 = scope_465.start_list(true, Some("item"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            entry_469.string(item_467.as_str());
        }
        list_468.finish();
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("AcceleratorName");
    if let Some(var_471) = &input.accelerator_names {
        let mut list_473 = scope_470.start_list(true, Some("item"));
        for item_472 in var_471 {
            #[allow(unused_mut)]
            let mut entry_474 = list_473.entry();
            entry_474.string(item_472.as_str());
        }
        list_473.finish();
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_476) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_475, var_476,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("ArchitectureType");
    if let Some(var_478) = &input.architecture_types {
        let mut list_480 = scope_477.start_list(true, Some("item"));
        for item_479 in var_478 {
            #[allow(unused_mut)]
            let mut entry_481 = list_480.entry();
            entry_481.string(item_479.as_str());
        }
        list_480.finish();
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("VirtualizationType");
    if let Some(var_483) = &input.virtualization_types {
        let mut list_485 = scope_482.start_list(true, Some("item"));
        for item_484 in var_483 {
            #[allow(unused_mut)]
            let mut entry_486 = list_485.entry();
            entry_486.string(item_484.as_str());
        }
        list_485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("InstanceRequirements");
    if let Some(var_488) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_487, var_488,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("Comment");
    if let Some(var_490) = &input.comment {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("UploadEnd");
    if let Some(var_492) = &input.upload_end {
        scope_491.date_time(var_492, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("UploadSize");
    if let Some(var_494) = &input.upload_size {
        scope_493.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_494).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("UploadStart");
    if let Some(var_496) = &input.upload_start {
        scope_495.date_time(var_496, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("Description");
    if let Some(var_498) = &input.description {
        scope_497.string(var_498);
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("DeviceName");
    if let Some(var_500) = &input.device_name {
        scope_499.string(var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("Format");
    if let Some(var_502) = &input.format {
        scope_501.string(var_502);
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("SnapshotId");
    if let Some(var_504) = &input.snapshot_id {
        scope_503.string(var_504);
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("Url");
    if let Some(var_506) = &input.url {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("UserBucket");
    if let Some(var_508) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_507, var_508)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_510) = &input.license_configuration_arn {
        scope_509.string(var_510);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("Description");
    if let Some(var_512) = &input.description {
        scope_511.string(var_512);
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("Image");
    if let Some(var_514) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_513, var_514)?;
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("Volume");
    if let Some(var_516) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_515, var_516)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("AdditionalInfo");
    if let Some(var_518) = &input.additional_info {
        scope_517.string(var_518);
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("Architecture");
    if let Some(var_520) = &input.architecture {
        scope_519.string(var_520.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("GroupId");
    if let Some(var_522) = &input.group_ids {
        let mut list_524 = scope_521.start_list(true, Some("SecurityGroupId"));
        for item_523 in var_522 {
            #[allow(unused_mut)]
            let mut entry_525 = list_524.entry();
            entry_525.string(item_523);
        }
        list_524.finish();
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("GroupName");
    if let Some(var_527) = &input.group_names {
        let mut list_529 = scope_526.start_list(true, Some("SecurityGroup"));
        for item_528 in var_527 {
            #[allow(unused_mut)]
            let mut entry_530 = list_529.entry();
            entry_530.string(item_528);
        }
        list_529.finish();
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_532) = &input.instance_initiated_shutdown_behavior {
        scope_531.string(var_532.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("InstanceType");
    if let Some(var_534) = &input.instance_type {
        scope_533.string(var_534.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("Monitoring");
    if let Some(var_536) = &input.monitoring {
        scope_535.boolean(*var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("Placement");
    if let Some(var_538) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_537, var_538)?;
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("PrivateIpAddress");
    if let Some(var_540) = &input.private_ip_address {
        scope_539.string(var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("SubnetId");
    if let Some(var_542) = &input.subnet_id {
        scope_541.string(var_542);
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("UserData");
    if let Some(var_544) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_543, var_544)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("Description");
    if let Some(var_546) = &input.description {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Format");
    if let Some(var_548) = &input.format {
        scope_547.string(var_548);
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("Url");
    if let Some(var_550) = &input.url {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("UserBucket");
    if let Some(var_552) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_551, var_552)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("Bytes");
    if let Some(var_554) = &input.bytes {
        scope_553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("Format");
    if let Some(var_556) = &input.format {
        scope_555.string(var_556.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("ImportManifestUrl");
    if let Some(var_558) = &input.import_manifest_url {
        scope_557.string(var_558);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("Size");
    if let Some(var_560) = &input.size {
        scope_559.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_560).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("CustomDnsServers");
    if let Some(var_562) = &input.custom_dns_servers {
        let mut list_564 = scope_561.start_list(true, Some("item"));
        for item_563 in var_562 {
            #[allow(unused_mut)]
            let mut entry_565 = list_564.entry();
            entry_565.string(item_563);
        }
        list_564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Enabled");
    if let Some(var_567) = &input.enabled {
        scope_566.boolean(*var_567);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("Add");
    if let Some(var_569) = &input.add {
        let mut list_571 = scope_568.start_list(true, Some("item"));
        for item_570 in var_569 {
            #[allow(unused_mut)]
            let mut entry_572 = list_571.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_572, item_570,
            )?;
        }
        list_571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("Remove");
    if let Some(var_574) = &input.remove {
        let mut list_576 = scope_573.start_list(true, Some("item"));
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_577, item_575,
            )?;
        }
        list_576.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Value");
    if let Some(var_579) = &input.value {
        scope_578.string(var_579);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("Add");
    if let Some(var_581) = &input.add {
        let mut list_583 = scope_580.start_list(true, Some("item"));
        for item_582 in var_581 {
            #[allow(unused_mut)]
            let mut entry_584 = list_583.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_584, item_582,
            )?;
        }
        list_583.finish();
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("Remove");
    if let Some(var_586) = &input.remove {
        let mut list_588 = scope_585.start_list(true, Some("item"));
        for item_587 in var_586 {
            #[allow(unused_mut)]
            let mut entry_589 = list_588.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_589, item_587,
            )?;
        }
        list_588.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Value");
    if let Some(var_591) = &input.value {
        scope_590.boolean(*var_591);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("DeviceName");
    if let Some(var_593) = &input.device_name {
        scope_592.string(var_593);
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("Ebs");
    if let Some(var_595) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_594, var_595,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("NoDevice");
    if let Some(var_597) = &input.no_device {
        scope_596.string(var_597);
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("VirtualName");
    if let Some(var_599) = &input.virtual_name {
        scope_598.string(var_599);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_600 = writer.prefix("Value");
    if let Some(var_601) = &input.value {
        scope_600.string(&aws_smithy_types::base64::encode(var_601));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("CapacityReservationPreference");
    if let Some(var_603) = &input.capacity_reservation_preference {
        scope_602.string(var_603.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("CapacityReservationTarget");
    if let Some(var_605) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_604, var_605,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_606 = writer.prefix("InstanceId");
    if let Some(var_607) = &input.instance_id {
        scope_606.string(var_607);
    }
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("CpuCredits");
    if let Some(var_609) = &input.cpu_credits {
        scope_608.string(var_609);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("Cidr");
    if let Some(var_611) = &input.cidr {
        scope_610.string(var_611);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("AttachmentId");
    if let Some(var_613) = &input.attachment_id {
        scope_612.string(var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("DeleteOnTermination");
    if let Some(var_615) = &input.delete_on_termination {
        scope_614.boolean(*var_615);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("AvailabilityZone");
    if let Some(var_617) = &input.availability_zone {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("InstanceCount");
    if let Some(var_619) = &input.instance_count {
        scope_618.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_619).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("InstanceType");
    if let Some(var_621) = &input.instance_type {
        scope_620.string(var_621.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("Platform");
    if let Some(var_623) = &input.platform {
        scope_622.string(var_623);
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("Scope");
    if let Some(var_625) = &input.scope {
        scope_624.string(var_625.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_627) = &input.security_group_rule_id {
        scope_626.string(var_627);
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("SecurityGroupRule");
    if let Some(var_629) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_628, var_629,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("Add");
    if let Some(var_631) = &input.add {
        let mut list_633 = scope_630.start_list(true, Some("item"));
        for item_632 in var_631 {
            #[allow(unused_mut)]
            let mut entry_634 = list_633.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_634, item_632,
            )?;
        }
        list_633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("Remove");
    if let Some(var_636) = &input.remove {
        let mut list_638 = scope_635.start_list(true, Some("item"));
        for item_637 in var_636 {
            #[allow(unused_mut)]
            let mut entry_639 = list_638.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_639, item_637,
            )?;
        }
        list_638.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_641) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_640, var_641,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("Overrides");
    if let Some(var_643) = &input.overrides {
        let mut list_645 = scope_642.start_list(true, Some("item"));
        for item_644 in var_643 {
            #[allow(unused_mut)]
            let mut entry_646 = list_645.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_646, item_644,
            )?;
        }
        list_645.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_648) = &input.add_transit_gateway_cidr_blocks {
        let mut list_650 = scope_647.start_list(true, Some("item"));
        for item_649 in var_648 {
            #[allow(unused_mut)]
            let mut entry_651 = list_650.entry();
            entry_651.string(item_649);
        }
        list_650.finish();
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_653) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_655 = scope_652.start_list(true, Some("item"));
        for item_654 in var_653 {
            #[allow(unused_mut)]
            let mut entry_656 = list_655.entry();
            entry_656.string(item_654);
        }
        list_655.finish();
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("VpnEcmpSupport");
    if let Some(var_658) = &input.vpn_ecmp_support {
        scope_657.string(var_658.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("DnsSupport");
    if let Some(var_660) = &input.dns_support {
        scope_659.string(var_660.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_662) = &input.auto_accept_shared_attachments {
        scope_661.string(var_662.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_664) = &input.default_route_table_association {
        scope_663.string(var_664.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_666) = &input.association_default_route_table_id {
        scope_665.string(var_666);
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_668) = &input.default_route_table_propagation {
        scope_667.string(var_668.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_670) = &input.propagation_default_route_table_id {
        scope_669.string(var_670);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("DnsSupport");
    if let Some(var_672) = &input.dns_support {
        scope_671.string(var_672.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("Ipv6Support");
    if let Some(var_674) = &input.ipv6_support {
        scope_673.string(var_674.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("ApplianceModeSupport");
    if let Some(var_676) = &input.appliance_mode_support {
        scope_675.string(var_676.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_678) = &input.allow_dns_resolution_from_remote_vpc {
        scope_677.boolean(*var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_680) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_679.boolean(*var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_682) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_681.boolean(*var_682);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("TunnelInsideCidr");
    if let Some(var_684) = &input.tunnel_inside_cidr {
        scope_683.string(var_684);
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_686) = &input.tunnel_inside_ipv6_cidr {
        scope_685.string(var_686);
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("PreSharedKey");
    if let Some(var_688) = &input.pre_shared_key {
        scope_687.string(var_688);
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_690) = &input.phase1_lifetime_seconds {
        scope_689.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_690).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_692) = &input.phase2_lifetime_seconds {
        scope_691.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_692).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_694) = &input.rekey_margin_time_seconds {
        scope_693.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_694).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_696) = &input.rekey_fuzz_percentage {
        scope_695.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_696).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("ReplayWindowSize");
    if let Some(var_698) = &input.replay_window_size {
        scope_697.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_698).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_700) = &input.dpd_timeout_seconds {
        scope_699.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_700).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("DPDTimeoutAction");
    if let Some(var_702) = &input.dpd_timeout_action {
        scope_701.string(var_702);
    }
    #[allow(unused_mut)]
    let mut scope_703 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_704) = &input.phase1_encryption_algorithms {
        let mut list_706 = scope_703.start_list(true, Some("item"));
        for item_705 in var_704 {
            #[allow(unused_mut)]
            let mut entry_707 = list_706.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_707, item_705)?;
        }
        list_706.finish();
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_709) = &input.phase2_encryption_algorithms {
        let mut list_711 = scope_708.start_list(true, Some("item"));
        for item_710 in var_709 {
            #[allow(unused_mut)]
            let mut entry_712 = list_711.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_712, item_710)?;
        }
        list_711.finish();
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_714) = &input.phase1_integrity_algorithms {
        let mut list_716 = scope_713.start_list(true, Some("item"));
        for item_715 in var_714 {
            #[allow(unused_mut)]
            let mut entry_717 = list_716.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_717, item_715)?;
        }
        list_716.finish();
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_719) = &input.phase2_integrity_algorithms {
        let mut list_721 = scope_718.start_list(true, Some("item"));
        for item_720 in var_719 {
            #[allow(unused_mut)]
            let mut entry_722 = list_721.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_722, item_720)?;
        }
        list_721.finish();
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_724) = &input.phase1_dh_group_numbers {
        let mut list_726 = scope_723.start_list(true, Some("item"));
        for item_725 in var_724 {
            #[allow(unused_mut)]
            let mut entry_727 = list_726.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_727, item_725)?;
        }
        list_726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_729) = &input.phase2_dh_group_numbers {
        let mut list_731 = scope_728.start_list(true, Some("item"));
        for item_730 in var_729 {
            #[allow(unused_mut)]
            let mut entry_732 = list_731.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_732, item_730)?;
        }
        list_731.finish();
    }
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("IKEVersion");
    if let Some(var_734) = &input.ike_versions {
        let mut list_736 = scope_733.start_list(true, Some("item"));
        for item_735 in var_734 {
            #[allow(unused_mut)]
            let mut entry_737 = list_736.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_737, item_735,
            )?;
        }
        list_736.finish();
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("StartupAction");
    if let Some(var_739) = &input.startup_action {
        scope_738.string(var_739);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("Message");
    if let Some(var_741) = &input.message {
        scope_740.string(var_741);
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("Signature");
    if let Some(var_743) = &input.signature {
        scope_742.string(var_743);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("Amount");
    if let Some(var_745) = &input.amount {
        scope_744.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_745).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("CurrencyCode");
    if let Some(var_747) = &input.currency_code {
        scope_746.string(var_747.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("InstanceCount");
    if let Some(var_749) = &input.instance_count {
        scope_748.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_749).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("PurchaseToken");
    if let Some(var_751) = &input.purchase_token {
        scope_750.string(var_751);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_753) = &input.include_all_tags_of_instance {
        scope_752.boolean(*var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("InstanceTagKey");
    if let Some(var_755) = &input.instance_tag_keys {
        let mut list_757 = scope_754.start_list(true, Some("item"));
        for item_756 in var_755 {
            #[allow(unused_mut)]
            let mut entry_758 = list_757.entry();
            entry_758.string(item_756);
        }
        list_757.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("AllocationStrategy");
    if let Some(var_760) = &input.allocation_strategy {
        scope_759.string(var_760.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_762) = &input.on_demand_allocation_strategy {
        scope_761.string(var_762.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_764) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_763, var_764,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("ClientToken");
    if let Some(var_766) = &input.client_token {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_768) = &input.excess_capacity_termination_policy {
        scope_767.string(var_768.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("FulfilledCapacity");
    if let Some(var_770) = &input.fulfilled_capacity {
        scope_769.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_770).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_772) = &input.on_demand_fulfilled_capacity {
        scope_771.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_772).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("IamFleetRole");
    if let Some(var_774) = &input.iam_fleet_role {
        scope_773.string(var_774);
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("LaunchSpecifications");
    if let Some(var_776) = &input.launch_specifications {
        let mut list_778 = scope_775.start_list(true, Some("item"));
        for item_777 in var_776 {
            #[allow(unused_mut)]
            let mut entry_779 = list_778.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_779, item_777,
            )?;
        }
        list_778.finish();
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_781) = &input.launch_template_configs {
        let mut list_783 = scope_780.start_list(true, Some("item"));
        for item_782 in var_781 {
            #[allow(unused_mut)]
            let mut entry_784 = list_783.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_784, item_782,
            )?;
        }
        list_783.finish();
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("SpotPrice");
    if let Some(var_786) = &input.spot_price {
        scope_785.string(var_786);
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("TargetCapacity");
    if let Some(var_788) = &input.target_capacity {
        scope_787.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_788).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_790) = &input.on_demand_target_capacity {
        scope_789.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_790).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_792) = &input.on_demand_max_total_price {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_794) = &input.spot_max_total_price {
        scope_793.string(var_794);
    }
    #[allow(unused_mut)]
    let mut scope_795 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_796) = &input.terminate_instances_with_expiration {
        scope_795.boolean(*var_796);
    }
    #[allow(unused_mut)]
    let mut scope_797 = writer.prefix("Type");
    if let Some(var_798) = &input.r#type {
        scope_797.string(var_798.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_799 = writer.prefix("ValidFrom");
    if let Some(var_800) = &input.valid_from {
        scope_799.date_time(var_800, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_801 = writer.prefix("ValidUntil");
    if let Some(var_802) = &input.valid_until {
        scope_801.date_time(var_802, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_804) = &input.replace_unhealthy_instances {
        scope_803.boolean(*var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_806) = &input.instance_interruption_behavior {
        scope_805.string(var_806.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("LoadBalancersConfig");
    if let Some(var_808) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_807, var_808,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_810) = &input.instance_pools_to_use_count {
        scope_809.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_810).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("Context");
    if let Some(var_812) = &input.context {
        scope_811.string(var_812);
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_814) = &input.target_capacity_unit_type {
        scope_813.string(var_814.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("TagSpecification");
    if let Some(var_816) = &input.tag_specifications {
        let mut list_818 = scope_815.start_list(true, Some("item"));
        for item_817 in var_816 {
            #[allow(unused_mut)]
            let mut entry_819 = list_818.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_819, item_817,
            )?;
        }
        list_818.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("SecurityGroupId");
    if let Some(var_821) = &input.security_group_ids {
        let mut list_823 = scope_820.start_list(true, Some("item"));
        for item_822 in var_821 {
            #[allow(unused_mut)]
            let mut entry_824 = list_823.entry();
            entry_824.string(item_822);
        }
        list_823.finish();
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("SecurityGroup");
    if let Some(var_826) = &input.security_groups {
        let mut list_828 = scope_825.start_list(true, Some("item"));
        for item_827 in var_826 {
            #[allow(unused_mut)]
            let mut entry_829 = list_828.entry();
            entry_829.string(item_827);
        }
        list_828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("AddressingType");
    if let Some(var_831) = &input.addressing_type {
        scope_830.string(var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("BlockDeviceMapping");
    if let Some(var_833) = &input.block_device_mappings {
        let mut list_835 = scope_832.start_list(true, Some("item"));
        for item_834 in var_833 {
            #[allow(unused_mut)]
            let mut entry_836 = list_835.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_836, item_834,
            )?;
        }
        list_835.finish();
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("EbsOptimized");
    if let Some(var_838) = &input.ebs_optimized {
        scope_837.boolean(*var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("IamInstanceProfile");
    if let Some(var_840) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_839, var_840,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("ImageId");
    if let Some(var_842) = &input.image_id {
        scope_841.string(var_842);
    }
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("InstanceType");
    if let Some(var_844) = &input.instance_type {
        scope_843.string(var_844.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("KernelId");
    if let Some(var_846) = &input.kernel_id {
        scope_845.string(var_846);
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("KeyName");
    if let Some(var_848) = &input.key_name {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("Monitoring");
    if let Some(var_850) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_849, var_850,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("NetworkInterface");
    if let Some(var_852) = &input.network_interfaces {
        let mut list_854 = scope_851.start_list(true, Some("item"));
        for item_853 in var_852 {
            #[allow(unused_mut)]
            let mut entry_855 = list_854.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_855, item_853)?;
        }
        list_854.finish();
    }
    #[allow(unused_mut)]
    let mut scope_856 = writer.prefix("Placement");
    if let Some(var_857) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_856, var_857)?;
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("RamdiskId");
    if let Some(var_859) = &input.ramdisk_id {
        scope_858.string(var_859);
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("SubnetId");
    if let Some(var_861) = &input.subnet_id {
        scope_860.string(var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("UserData");
    if let Some(var_863) = &input.user_data {
        scope_862.string(var_863);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("Enabled");
    if let Some(var_865) = &input.enabled {
        scope_864.boolean(*var_865);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("AvailabilityZone");
    if let Some(var_867) = &input.availability_zone {
        scope_866.string(var_867);
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("Affinity");
    if let Some(var_869) = &input.affinity {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("GroupName");
    if let Some(var_871) = &input.group_name {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("PartitionNumber");
    if let Some(var_873) = &input.partition_number {
        scope_872.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_873).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("HostId");
    if let Some(var_875) = &input.host_id {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("Tenancy");
    if let Some(var_877) = &input.tenancy {
        scope_876.string(var_877.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("SpreadDomain");
    if let Some(var_879) = &input.spread_domain {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("HostResourceGroupArn");
    if let Some(var_881) = &input.host_resource_group_arn {
        scope_880.string(var_881);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_883) = &input.associate_public_ip_address {
        scope_882.boolean(*var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("DeleteOnTermination");
    if let Some(var_885) = &input.delete_on_termination {
        scope_884.boolean(*var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("Description");
    if let Some(var_887) = &input.description {
        scope_886.string(var_887);
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("DeviceIndex");
    if let Some(var_889) = &input.device_index {
        scope_888.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_889).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_890 = writer.prefix("SecurityGroupId");
    if let Some(var_891) = &input.groups {
        let mut list_893 = scope_890.start_list(true, Some("SecurityGroupId"));
        for item_892 in var_891 {
            #[allow(unused_mut)]
            let mut entry_894 = list_893.entry();
            entry_894.string(item_892);
        }
        list_893.finish();
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("Ipv6AddressCount");
    if let Some(var_896) = &input.ipv6_address_count {
        scope_895.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_896).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("Ipv6Addresses");
    if let Some(var_898) = &input.ipv6_addresses {
        let mut list_900 = scope_897.start_list(true, Some("item"));
        for item_899 in var_898 {
            #[allow(unused_mut)]
            let mut entry_901 = list_900.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_901, item_899,
            )?;
        }
        list_900.finish();
    }
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("NetworkInterfaceId");
    if let Some(var_903) = &input.network_interface_id {
        scope_902.string(var_903);
    }
    #[allow(unused_mut)]
    let mut scope_904 = writer.prefix("PrivateIpAddress");
    if let Some(var_905) = &input.private_ip_address {
        scope_904.string(var_905);
    }
    #[allow(unused_mut)]
    let mut scope_906 = writer.prefix("PrivateIpAddresses");
    if let Some(var_907) = &input.private_ip_addresses {
        let mut list_909 = scope_906.start_list(true, Some("item"));
        for item_908 in var_907 {
            #[allow(unused_mut)]
            let mut entry_910 = list_909.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_910, item_908,
            )?;
        }
        list_909.finish();
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_912) = &input.secondary_private_ip_address_count {
        scope_911.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_912).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("SubnetId");
    if let Some(var_914) = &input.subnet_id {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_916) = &input.associate_carrier_ip_address {
        scope_915.boolean(*var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("InterfaceType");
    if let Some(var_918) = &input.interface_type {
        scope_917.string(var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("NetworkCardIndex");
    if let Some(var_920) = &input.network_card_index {
        scope_919.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_920).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("Ipv4Prefix");
    if let Some(var_922) = &input.ipv4_prefixes {
        let mut list_924 = scope_921.start_list(true, Some("item"));
        for item_923 in var_922 {
            #[allow(unused_mut)]
            let mut entry_925 = list_924.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_925, item_923,
            )?;
        }
        list_924.finish();
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_927) = &input.ipv4_prefix_count {
        scope_926.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_927).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_928 = writer.prefix("Ipv6Prefix");
    if let Some(var_929) = &input.ipv6_prefixes {
        let mut list_931 = scope_928.start_list(true, Some("item"));
        for item_930 in var_929 {
            #[allow(unused_mut)]
            let mut entry_932 = list_931.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_932, item_930,
            )?;
        }
        list_931.finish();
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_934) = &input.ipv6_prefix_count {
        scope_933.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_934).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("Type");
    if let Some(var_936) = &input.r#type {
        scope_935.string(var_936);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("Type");
    if let Some(var_938) = &input.r#type {
        scope_937.string(var_938);
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("Count");
    if let Some(var_940) = &input.count {
        scope_939.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_940).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("LaunchTemplateId");
    if let Some(var_942) = &input.launch_template_id {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("LaunchTemplateName");
    if let Some(var_944) = &input.launch_template_name {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("Version");
    if let Some(var_946) = &input.version {
        scope_945.string(var_946);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("MarketType");
    if let Some(var_948) = &input.market_type {
        scope_947.string(var_948.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("SpotOptions");
    if let Some(var_950) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_949, var_950)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("CpuCredits");
    if let Some(var_952) = &input.cpu_credits {
        scope_951.string(var_952);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("CoreCount");
    if let Some(var_954) = &input.core_count {
        scope_953.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_954).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_955 = writer.prefix("ThreadsPerCore");
    if let Some(var_956) = &input.threads_per_core {
        scope_955.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_956).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_957 = writer.prefix("Configured");
    if let Some(var_958) = &input.configured {
        scope_957.boolean(*var_958);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_959 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_960) = &input.license_configuration_arn {
        scope_959.string(var_960);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("HttpTokens");
    if let Some(var_962) = &input.http_tokens {
        scope_961.string(var_962.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_964) = &input.http_put_response_hop_limit {
        scope_963.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_964).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("HttpEndpoint");
    if let Some(var_966) = &input.http_endpoint {
        scope_965.string(var_966.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_968) = &input.http_protocol_ipv6 {
        scope_967.string(var_968.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("Enabled");
    if let Some(var_970) = &input.enabled {
        scope_969.boolean(*var_970);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("BlockDeviceMapping");
    if let Some(var_972) = &input.block_device_mappings {
        let mut list_974 = scope_971.start_list(true, Some("BlockDeviceMapping"));
        for item_973 in var_972 {
            #[allow(unused_mut)]
            let mut entry_975 = list_974.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_975, item_973)?;
        }
        list_974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("EbsOptimized");
    if let Some(var_977) = &input.ebs_optimized {
        scope_976.boolean(*var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("IamInstanceProfile");
    if let Some(var_979) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_978, var_979,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("ImageId");
    if let Some(var_981) = &input.image_id {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("InstanceType");
    if let Some(var_983) = &input.instance_type {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("KernelId");
    if let Some(var_985) = &input.kernel_id {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("KeyName");
    if let Some(var_987) = &input.key_name {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("Monitoring");
    if let Some(var_989) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_988, var_989,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("NetworkInterface");
    if let Some(var_991) = &input.network_interfaces {
        let mut list_993 = scope_990.start_list(true, Some("NetworkInterface"));
        for item_992 in var_991 {
            #[allow(unused_mut)]
            let mut entry_994 = list_993.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_994, item_992)?;
        }
        list_993.finish();
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("Placement");
    if let Some(var_996) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_995, var_996,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("RamdiskId");
    if let Some(var_998) = &input.ramdisk_id {
        scope_997.string(var_998);
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("SecurityGroupId");
    if let Some(var_1000) = &input.security_group_ids {
        let mut list_1002 = scope_999.start_list(true, Some("SecurityGroupId"));
        for item_1001 in var_1000 {
            #[allow(unused_mut)]
            let mut entry_1003 = list_1002.entry();
            entry_1003.string(item_1001);
        }
        list_1002.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("SubnetId");
    if let Some(var_1005) = &input.subnet_id {
        scope_1004.string(var_1005);
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("UserData");
    if let Some(var_1007) = &input.user_data {
        scope_1006.string(var_1007);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1009) = &input.security_group_rule_id {
        scope_1008.string(var_1009);
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("Description");
    if let Some(var_1011) = &input.description {
        scope_1010.string(var_1011);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("CidrIp");
    if let Some(var_1013) = &input.cidr_ip {
        scope_1012.string(var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("Description");
    if let Some(var_1015) = &input.description {
        scope_1014.string(var_1015);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("CidrIpv6");
    if let Some(var_1017) = &input.cidr_ipv6 {
        scope_1016.string(var_1017);
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("Description");
    if let Some(var_1019) = &input.description {
        scope_1018.string(var_1019);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("Description");
    if let Some(var_1021) = &input.description {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("PrefixListId");
    if let Some(var_1023) = &input.prefix_list_id {
        scope_1022.string(var_1023);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("Description");
    if let Some(var_1025) = &input.description {
        scope_1024.string(var_1025);
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("GroupId");
    if let Some(var_1027) = &input.group_id {
        scope_1026.string(var_1027);
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("GroupName");
    if let Some(var_1029) = &input.group_name {
        scope_1028.string(var_1029);
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("PeeringStatus");
    if let Some(var_1031) = &input.peering_status {
        scope_1030.string(var_1031);
    }
    #[allow(unused_mut)]
    let mut scope_1032 = writer.prefix("UserId");
    if let Some(var_1033) = &input.user_id {
        scope_1032.string(var_1033);
    }
    #[allow(unused_mut)]
    let mut scope_1034 = writer.prefix("VpcId");
    if let Some(var_1035) = &input.vpc_id {
        scope_1034.string(var_1035);
    }
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1037) = &input.vpc_peering_connection_id {
        scope_1036.string(var_1037);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1039) = &input.aws_access_key_id {
        scope_1038.string(var_1039);
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("Bucket");
    if let Some(var_1041) = &input.bucket {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("Prefix");
    if let Some(var_1043) = &input.prefix {
        scope_1042.string(var_1043);
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("UploadPolicy");
    if let Some(var_1045) = &input.upload_policy {
        scope_1044.string(&aws_smithy_types::base64::encode(var_1045));
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("UploadPolicySignature");
    if let Some(var_1047) = &input.upload_policy_signature {
        scope_1046.string(var_1047);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("DirectoryId");
    if let Some(var_1049) = &input.directory_id {
        scope_1048.string(var_1049);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1051) = &input.client_root_certificate_chain_arn {
        scope_1050.string(var_1051);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("SAMLProviderArn");
    if let Some(var_1053) = &input.saml_provider_arn {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1055) = &input.self_service_saml_provider_arn {
        scope_1054.string(var_1055);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("CapacityRebalance");
    if let Some(var_1057) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1056, var_1057,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("UsageStrategy");
    if let Some(var_1059) = &input.usage_strategy {
        scope_1058.string(var_1059.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("LaunchTemplateId");
    if let Some(var_1061) = &input.launch_template_id {
        scope_1060.string(var_1061);
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("LaunchTemplateName");
    if let Some(var_1063) = &input.launch_template_name {
        scope_1062.string(var_1063);
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("Version");
    if let Some(var_1065) = &input.version {
        scope_1064.string(var_1065);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("InstanceType");
    if let Some(var_1067) = &input.instance_type {
        scope_1066.string(var_1067.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("MaxPrice");
    if let Some(var_1069) = &input.max_price {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("SubnetId");
    if let Some(var_1071) = &input.subnet_id {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("AvailabilityZone");
    if let Some(var_1073) = &input.availability_zone {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("WeightedCapacity");
    if let Some(var_1075) = &input.weighted_capacity {
        scope_1074.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1075).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("Priority");
    if let Some(var_1077) = &input.priority {
        scope_1076.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1077).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("Placement");
    if let Some(var_1079) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1078, var_1079)?;
    }
    #[allow(unused_mut)]
    let mut scope_1080 = writer.prefix("InstanceRequirements");
    if let Some(var_1081) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1080, var_1081,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1082 = writer.prefix("DeleteOnTermination");
    if let Some(var_1083) = &input.delete_on_termination {
        scope_1082.boolean(*var_1083);
    }
    #[allow(unused_mut)]
    let mut scope_1084 = writer.prefix("Iops");
    if let Some(var_1085) = &input.iops {
        scope_1084.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1085).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("SnapshotId");
    if let Some(var_1087) = &input.snapshot_id {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("VolumeSize");
    if let Some(var_1089) = &input.volume_size {
        scope_1088.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1089).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("VolumeType");
    if let Some(var_1091) = &input.volume_type {
        scope_1090.string(var_1091.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("KmsKeyId");
    if let Some(var_1093) = &input.kms_key_id {
        scope_1092.string(var_1093);
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("Throughput");
    if let Some(var_1095) = &input.throughput {
        scope_1094.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1095).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("OutpostArn");
    if let Some(var_1097) = &input.outpost_arn {
        scope_1096.string(var_1097);
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("Encrypted");
    if let Some(var_1099) = &input.encrypted {
        scope_1098.boolean(*var_1099);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("Arn");
    if let Some(var_1101) = &input.arn {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("Name");
    if let Some(var_1103) = &input.name {
        scope_1102.string(var_1103);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("DeviceName");
    if let Some(var_1105) = &input.device_name {
        scope_1104.string(var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("VirtualName");
    if let Some(var_1107) = &input.virtual_name {
        scope_1106.string(var_1107);
    }
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("Ebs");
    if let Some(var_1109) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1108, var_1109,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("NoDevice");
    if let Some(var_1111) = &input.no_device {
        scope_1110.string(var_1111);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1113) = &input.associate_carrier_ip_address {
        scope_1112.boolean(*var_1113);
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1115) = &input.associate_public_ip_address {
        scope_1114.boolean(*var_1115);
    }
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("DeleteOnTermination");
    if let Some(var_1117) = &input.delete_on_termination {
        scope_1116.boolean(*var_1117);
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("Description");
    if let Some(var_1119) = &input.description {
        scope_1118.string(var_1119);
    }
    #[allow(unused_mut)]
    let mut scope_1120 = writer.prefix("DeviceIndex");
    if let Some(var_1121) = &input.device_index {
        scope_1120.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1121).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("SecurityGroupId");
    if let Some(var_1123) = &input.groups {
        let mut list_1125 = scope_1122.start_list(true, Some("SecurityGroupId"));
        for item_1124 in var_1123 {
            #[allow(unused_mut)]
            let mut entry_1126 = list_1125.entry();
            entry_1126.string(item_1124);
        }
        list_1125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("InterfaceType");
    if let Some(var_1128) = &input.interface_type {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1130) = &input.ipv6_address_count {
        scope_1129.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1130).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("Ipv6Addresses");
    if let Some(var_1132) = &input.ipv6_addresses {
        let mut list_1134 = scope_1131.start_list(true, Some("InstanceIpv6Address"));
        for item_1133 in var_1132 {
            #[allow(unused_mut)]
            let mut entry_1135 = list_1134.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1135, item_1133,
            )?;
        }
        list_1134.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1137) = &input.network_interface_id {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("PrivateIpAddress");
    if let Some(var_1139) = &input.private_ip_address {
        scope_1138.string(var_1139);
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1141) = &input.private_ip_addresses {
        let mut list_1143 = scope_1140.start_list(true, Some("item"));
        for item_1142 in var_1141 {
            #[allow(unused_mut)]
            let mut entry_1144 = list_1143.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1144, item_1142,
            )?;
        }
        list_1143.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1146) = &input.secondary_private_ip_address_count {
        scope_1145.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1146).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("SubnetId");
    if let Some(var_1148) = &input.subnet_id {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("NetworkCardIndex");
    if let Some(var_1150) = &input.network_card_index {
        scope_1149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1150).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("Ipv4Prefix");
    if let Some(var_1152) = &input.ipv4_prefixes {
        let mut list_1154 = scope_1151.start_list(true, Some("item"));
        for item_1153 in var_1152 {
            #[allow(unused_mut)]
            let mut entry_1155 = list_1154.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1155, item_1153,
            )?;
        }
        list_1154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1157) = &input.ipv4_prefix_count {
        scope_1156.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1157).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("Ipv6Prefix");
    if let Some(var_1159) = &input.ipv6_prefixes {
        let mut list_1161 = scope_1158.start_list(true, Some("item"));
        for item_1160 in var_1159 {
            #[allow(unused_mut)]
            let mut entry_1162 = list_1161.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1162, item_1160,
            )?;
        }
        list_1161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1164) = &input.ipv6_prefix_count {
        scope_1163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1164).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("Enabled");
    if let Some(var_1166) = &input.enabled {
        scope_1165.boolean(*var_1166);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("AvailabilityZone");
    if let Some(var_1168) = &input.availability_zone {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("Affinity");
    if let Some(var_1170) = &input.affinity {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("GroupName");
    if let Some(var_1172) = &input.group_name {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("HostId");
    if let Some(var_1174) = &input.host_id {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("Tenancy");
    if let Some(var_1176) = &input.tenancy {
        scope_1175.string(var_1176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("SpreadDomain");
    if let Some(var_1178) = &input.spread_domain {
        scope_1177.string(var_1178);
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1180) = &input.host_resource_group_arn {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("PartitionNumber");
    if let Some(var_1182) = &input.partition_number {
        scope_1181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1182).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("ResourceType");
    if let Some(var_1184) = &input.resource_type {
        scope_1183.string(var_1184.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("Tag");
    if let Some(var_1186) = &input.tags {
        let mut list_1188 = scope_1185.start_list(true, Some("item"));
        for item_1187 in var_1186 {
            #[allow(unused_mut)]
            let mut entry_1189 = list_1188.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1189, item_1187)?;
        }
        list_1188.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("Type");
    if let Some(var_1191) = &input.r#type {
        scope_1190.string(var_1191);
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("Count");
    if let Some(var_1193) = &input.count {
        scope_1192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1193).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("MarketType");
    if let Some(var_1195) = &input.market_type {
        scope_1194.string(var_1195.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("SpotOptions");
    if let Some(var_1197) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1196, var_1197)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("CoreCount");
    if let Some(var_1199) = &input.core_count {
        scope_1198.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1199).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("ThreadsPerCore");
    if let Some(var_1201) = &input.threads_per_core {
        scope_1200.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1201).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1203) = &input.capacity_reservation_preference {
        scope_1202.string(var_1203.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1205) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1204, var_1205,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1207) = &input.license_configuration_arn {
        scope_1206.string(var_1207);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("Configured");
    if let Some(var_1209) = &input.configured {
        scope_1208.boolean(*var_1209);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("HttpTokens");
    if let Some(var_1211) = &input.http_tokens {
        scope_1210.string(var_1211.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1213) = &input.http_put_response_hop_limit {
        scope_1212.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1213).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("HttpEndpoint");
    if let Some(var_1215) = &input.http_endpoint {
        scope_1214.string(var_1215.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1217) = &input.http_protocol_ipv6 {
        scope_1216.string(var_1217.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Enabled");
    if let Some(var_1219) = &input.enabled {
        scope_1218.boolean(*var_1219);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1221) = &input.tunnel_inside_cidr {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1223) = &input.tunnel_inside_ipv6_cidr {
        scope_1222.string(var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("PreSharedKey");
    if let Some(var_1225) = &input.pre_shared_key {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1227) = &input.phase1_lifetime_seconds {
        scope_1226.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1227).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1229) = &input.phase2_lifetime_seconds {
        scope_1228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1231) = &input.rekey_margin_time_seconds {
        scope_1230.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1233) = &input.rekey_fuzz_percentage {
        scope_1232.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1233).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("ReplayWindowSize");
    if let Some(var_1235) = &input.replay_window_size {
        scope_1234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1237) = &input.dpd_timeout_seconds {
        scope_1236.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1237).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1239) = &input.dpd_timeout_action {
        scope_1238.string(var_1239);
    }
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1241) = &input.phase1_encryption_algorithms {
        let mut list_1243 = scope_1240.start_list(true, Some("item"));
        for item_1242 in var_1241 {
            #[allow(unused_mut)]
            let mut entry_1244 = list_1243.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1244, item_1242)?;
        }
        list_1243.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1246) = &input.phase2_encryption_algorithms {
        let mut list_1248 = scope_1245.start_list(true, Some("item"));
        for item_1247 in var_1246 {
            #[allow(unused_mut)]
            let mut entry_1249 = list_1248.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1249, item_1247)?;
        }
        list_1248.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1250 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1251) = &input.phase1_integrity_algorithms {
        let mut list_1253 = scope_1250.start_list(true, Some("item"));
        for item_1252 in var_1251 {
            #[allow(unused_mut)]
            let mut entry_1254 = list_1253.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1254, item_1252)?;
        }
        list_1253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1256) = &input.phase2_integrity_algorithms {
        let mut list_1258 = scope_1255.start_list(true, Some("item"));
        for item_1257 in var_1256 {
            #[allow(unused_mut)]
            let mut entry_1259 = list_1258.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1259, item_1257)?;
        }
        list_1258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1261) = &input.phase1_dh_group_numbers {
        let mut list_1263 = scope_1260.start_list(true, Some("item"));
        for item_1262 in var_1261 {
            #[allow(unused_mut)]
            let mut entry_1264 = list_1263.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1264, item_1262)?;
        }
        list_1263.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1266) = &input.phase2_dh_group_numbers {
        let mut list_1268 = scope_1265.start_list(true, Some("item"));
        for item_1267 in var_1266 {
            #[allow(unused_mut)]
            let mut entry_1269 = list_1268.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1269, item_1267)?;
        }
        list_1268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("IKEVersion");
    if let Some(var_1271) = &input.ike_versions {
        let mut list_1273 = scope_1270.start_list(true, Some("item"));
        for item_1272 in var_1271 {
            #[allow(unused_mut)]
            let mut entry_1274 = list_1273.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1274, item_1272,
            )?;
        }
        list_1273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("StartupAction");
    if let Some(var_1276) = &input.startup_action {
        scope_1275.string(var_1276);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1278) = &input.integration_result_s3_destination_arn {
        scope_1277.string(var_1278);
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1280) = &input.partition_load_frequency {
        scope_1279.string(var_1280.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("PartitionStartDate");
    if let Some(var_1282) = &input.partition_start_date {
        scope_1281.date_time(var_1282, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("PartitionEndDate");
    if let Some(var_1284) = &input.partition_end_date {
        scope_1283.date_time(var_1284, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("Min");
    if let Some(var_1286) = &input.min {
        scope_1285.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1286).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("Max");
    if let Some(var_1288) = &input.max {
        scope_1287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1288).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("Min");
    if let Some(var_1290) = &input.min {
        scope_1289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("Max");
    if let Some(var_1292) = &input.max {
        scope_1291.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1292).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("Min");
    if let Some(var_1294) = &input.min {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("Max");
    if let Some(var_1296) = &input.max {
        scope_1295.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1296).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("Min");
    if let Some(var_1298) = &input.min {
        scope_1297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("Max");
    if let Some(var_1300) = &input.max {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("Min");
    if let Some(var_1302) = &input.min {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("Max");
    if let Some(var_1304) = &input.max {
        scope_1303.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1304).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("Min");
    if let Some(var_1306) = &input.min {
        scope_1305.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1306).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Max");
    if let Some(var_1308) = &input.max {
        scope_1307.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1308).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("Min");
    if let Some(var_1310) = &input.min {
        scope_1309.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1310).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("Max");
    if let Some(var_1312) = &input.max {
        scope_1311.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1312).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Min");
    if let Some(var_1314) = &input.min {
        scope_1313.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1314).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("Max");
    if let Some(var_1316) = &input.max {
        scope_1315.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1316).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("S3Bucket");
    if let Some(var_1318) = &input.s3_bucket {
        scope_1317.string(var_1318);
    }
    #[allow(unused_mut)]
    let mut scope_1319 = writer.prefix("S3Key");
    if let Some(var_1320) = &input.s3_key {
        scope_1319.string(var_1320);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1321 = writer.prefix("Data");
    if let Some(var_1322) = &input.data {
        scope_1321.string(var_1322);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("Group");
    if let Some(var_1324) = &input.group {
        scope_1323.string(var_1324.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1325 = writer.prefix("UserId");
    if let Some(var_1326) = &input.user_id {
        scope_1325.string(var_1326);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("Group");
    if let Some(var_1328) = &input.group {
        scope_1327.string(var_1328.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("UserId");
    if let Some(var_1330) = &input.user_id {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("OrganizationArn");
    if let Some(var_1332) = &input.organization_arn {
        scope_1331.string(var_1332);
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1334) = &input.organizational_unit_arn {
        scope_1333.string(var_1334);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1335 = writer.prefix("DeleteOnTermination");
    if let Some(var_1336) = &input.delete_on_termination {
        scope_1335.boolean(*var_1336);
    }
    #[allow(unused_mut)]
    let mut scope_1337 = writer.prefix("VolumeId");
    if let Some(var_1338) = &input.volume_id {
        scope_1337.string(var_1338);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1339 = writer.prefix("CapacityReservationId");
    if let Some(var_1340) = &input.capacity_reservation_id {
        scope_1339.string(var_1340);
    }
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1342) = &input.capacity_reservation_resource_group_arn {
        scope_1341.string(var_1342);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("IpProtocol");
    if let Some(var_1344) = &input.ip_protocol {
        scope_1343.string(var_1344);
    }
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("FromPort");
    if let Some(var_1346) = &input.from_port {
        scope_1345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1346).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("ToPort");
    if let Some(var_1348) = &input.to_port {
        scope_1347.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1348).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("CidrIpv4");
    if let Some(var_1350) = &input.cidr_ipv4 {
        scope_1349.string(var_1350);
    }
    #[allow(unused_mut)]
    let mut scope_1351 = writer.prefix("CidrIpv6");
    if let Some(var_1352) = &input.cidr_ipv6 {
        scope_1351.string(var_1352);
    }
    #[allow(unused_mut)]
    let mut scope_1353 = writer.prefix("PrefixListId");
    if let Some(var_1354) = &input.prefix_list_id {
        scope_1353.string(var_1354);
    }
    #[allow(unused_mut)]
    let mut scope_1355 = writer.prefix("ReferencedGroupId");
    if let Some(var_1356) = &input.referenced_group_id {
        scope_1355.string(var_1356);
    }
    #[allow(unused_mut)]
    let mut scope_1357 = writer.prefix("Description");
    if let Some(var_1358) = &input.description {
        scope_1357.string(var_1358);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("Group");
    if let Some(var_1360) = &input.group {
        scope_1359.string(var_1360.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1361 = writer.prefix("UserId");
    if let Some(var_1362) = &input.user_id {
        scope_1361.string(var_1362);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1363 = writer.prefix("LaunchTemplateId");
    if let Some(var_1364) = &input.launch_template_id {
        scope_1363.string(var_1364);
    }
    #[allow(unused_mut)]
    let mut scope_1365 = writer.prefix("LaunchTemplateName");
    if let Some(var_1366) = &input.launch_template_name {
        scope_1365.string(var_1366);
    }
    #[allow(unused_mut)]
    let mut scope_1367 = writer.prefix("Version");
    if let Some(var_1368) = &input.version {
        scope_1367.string(var_1368);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1369 = writer.prefix("InstanceType");
    if let Some(var_1370) = &input.instance_type {
        scope_1369.string(var_1370.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1371 = writer.prefix("SpotPrice");
    if let Some(var_1372) = &input.spot_price {
        scope_1371.string(var_1372);
    }
    #[allow(unused_mut)]
    let mut scope_1373 = writer.prefix("SubnetId");
    if let Some(var_1374) = &input.subnet_id {
        scope_1373.string(var_1374);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("AvailabilityZone");
    if let Some(var_1376) = &input.availability_zone {
        scope_1375.string(var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("WeightedCapacity");
    if let Some(var_1378) = &input.weighted_capacity {
        scope_1377.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1378).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("Priority");
    if let Some(var_1380) = &input.priority {
        scope_1379.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1380).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("InstanceRequirements");
    if let Some(var_1382) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1381, var_1382,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("Value");
    if let Some(var_1384) = &input.value {
        scope_1383.string(var_1384);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("Value");
    if let Some(var_1386) = &input.value {
        scope_1385.string(var_1386);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("Value");
    if let Some(var_1388) = &input.value {
        scope_1387.string(var_1388);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("Value");
    if let Some(var_1390) = &input.value {
        scope_1389.string(var_1390);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("Value");
    if let Some(var_1392) = &input.value {
        scope_1391.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1392).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("Value");
    if let Some(var_1394) = &input.value {
        scope_1393.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1394).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("Value");
    if let Some(var_1396) = &input.value {
        scope_1395.string(var_1396);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("CapacityRebalance");
    if let Some(var_1398) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1397, var_1398,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("GroupSet");
    if let Some(var_1400) = &input.security_groups {
        let mut list_1402 = scope_1399.start_list(true, Some("item"));
        for item_1401 in var_1400 {
            #[allow(unused_mut)]
            let mut entry_1403 = list_1402.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1403, item_1401,
            )?;
        }
        list_1402.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("AddressingType");
    if let Some(var_1405) = &input.addressing_type {
        scope_1404.string(var_1405);
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1407) = &input.block_device_mappings {
        let mut list_1409 = scope_1406.start_list(true, Some("item"));
        for item_1408 in var_1407 {
            #[allow(unused_mut)]
            let mut entry_1410 = list_1409.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1410, item_1408,
            )?;
        }
        list_1409.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("EbsOptimized");
    if let Some(var_1412) = &input.ebs_optimized {
        scope_1411.boolean(*var_1412);
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("IamInstanceProfile");
    if let Some(var_1414) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1413, var_1414,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("ImageId");
    if let Some(var_1416) = &input.image_id {
        scope_1415.string(var_1416);
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("InstanceType");
    if let Some(var_1418) = &input.instance_type {
        scope_1417.string(var_1418.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("KernelId");
    if let Some(var_1420) = &input.kernel_id {
        scope_1419.string(var_1420);
    }
    #[allow(unused_mut)]
    let mut scope_1421 = writer.prefix("KeyName");
    if let Some(var_1422) = &input.key_name {
        scope_1421.string(var_1422);
    }
    #[allow(unused_mut)]
    let mut scope_1423 = writer.prefix("Monitoring");
    if let Some(var_1424) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1423, var_1424,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1425 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1426) = &input.network_interfaces {
        let mut list_1428 = scope_1425.start_list(true, Some("item"));
        for item_1427 in var_1426 {
            #[allow(unused_mut)]
            let mut entry_1429 = list_1428.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1429, item_1427)?;
        }
        list_1428.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("Placement");
    if let Some(var_1431) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1430, var_1431)?;
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("RamdiskId");
    if let Some(var_1433) = &input.ramdisk_id {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("SpotPrice");
    if let Some(var_1435) = &input.spot_price {
        scope_1434.string(var_1435);
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("SubnetId");
    if let Some(var_1437) = &input.subnet_id {
        scope_1436.string(var_1437);
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("UserData");
    if let Some(var_1439) = &input.user_data {
        scope_1438.string(var_1439);
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("WeightedCapacity");
    if let Some(var_1441) = &input.weighted_capacity {
        scope_1440.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1441).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("TagSpecificationSet");
    if let Some(var_1443) = &input.tag_specifications {
        let mut list_1445 = scope_1442.start_list(true, Some("item"));
        for item_1444 in var_1443 {
            #[allow(unused_mut)]
            let mut entry_1446 = list_1445.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1446, item_1444,
            )?;
        }
        list_1445.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("InstanceRequirements");
    if let Some(var_1448) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1447, var_1448,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1450) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1449, var_1450,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1452) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1451, var_1452,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("AvailabilityZone");
    if let Some(var_1454) = &input.availability_zone {
        scope_1453.string(var_1454);
    }
    #[allow(unused_mut)]
    let mut scope_1455 = writer.prefix("GroupName");
    if let Some(var_1456) = &input.group_name {
        scope_1455.string(var_1456);
    }
    #[allow(unused_mut)]
    let mut scope_1457 = writer.prefix("Tenancy");
    if let Some(var_1458) = &input.tenancy {
        scope_1457.string(var_1458.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1459 = writer.prefix("MaxPrice");
    if let Some(var_1460) = &input.max_price {
        scope_1459.string(var_1460);
    }
    #[allow(unused_mut)]
    let mut scope_1461 = writer.prefix("SpotInstanceType");
    if let Some(var_1462) = &input.spot_instance_type {
        scope_1461.string(var_1462.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1464) = &input.block_duration_minutes {
        scope_1463.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1464).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1465 = writer.prefix("ValidUntil");
    if let Some(var_1466) = &input.valid_until {
        scope_1465.date_time(var_1466, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1468) = &input.instance_interruption_behavior {
        scope_1467.string(var_1468.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("DeviceName");
    if let Some(var_1470) = &input.device_name {
        scope_1469.string(var_1470);
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("Ebs");
    if let Some(var_1472) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1471, var_1472,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("NoDevice");
    if let Some(var_1474) = &input.no_device {
        scope_1473.string(var_1474);
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("VirtualName");
    if let Some(var_1476) = &input.virtual_name {
        scope_1475.string(var_1476);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("Arn");
    if let Some(var_1478) = &input.arn {
        scope_1477.string(var_1478);
    }
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("Name");
    if let Some(var_1480) = &input.name {
        scope_1479.string(var_1480);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("Enabled");
    if let Some(var_1482) = &input.enabled {
        scope_1481.boolean(*var_1482);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1484) = &input.associate_public_ip_address {
        scope_1483.boolean(*var_1484);
    }
    #[allow(unused_mut)]
    let mut scope_1485 = writer.prefix("DeleteOnTermination");
    if let Some(var_1486) = &input.delete_on_termination {
        scope_1485.boolean(*var_1486);
    }
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("Description");
    if let Some(var_1488) = &input.description {
        scope_1487.string(var_1488);
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("DeviceIndex");
    if let Some(var_1490) = &input.device_index {
        scope_1489.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1490).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("Group");
    if let Some(var_1492) = &input.groups {
        let mut list_1494 = scope_1491.start_list(true, Some("SecurityGroupId"));
        for item_1493 in var_1492 {
            #[allow(unused_mut)]
            let mut entry_1495 = list_1494.entry();
            entry_1495.string(item_1493);
        }
        list_1494.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1497) = &input.ipv6_address_count {
        scope_1496.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1497).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("Ipv6Address");
    if let Some(var_1499) = &input.ipv6_addresses {
        let mut list_1501 = scope_1498.start_list(true, Some("Ipv6Address"));
        for item_1500 in var_1499 {
            #[allow(unused_mut)]
            let mut entry_1502 = list_1501.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1502, item_1500,
            )?;
        }
        list_1501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1504) = &input.network_interface_id {
        scope_1503.string(var_1504);
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("PrivateIpAddress");
    if let Some(var_1506) = &input.private_ip_address {
        scope_1505.string(var_1506);
    }
    #[allow(unused_mut)]
    let mut scope_1507 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1508) = &input.private_ip_address_configs {
        let mut list_1510 = scope_1507.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1509 in var_1508 {
            #[allow(unused_mut)]
            let mut entry_1511 = list_1510.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1511, item_1509)?;
        }
        list_1510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1513) = &input.secondary_private_ip_address_count {
        scope_1512.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1513).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("SubnetId");
    if let Some(var_1515) = &input.subnet_id {
        scope_1514.string(var_1515);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("AvailabilityZone");
    if let Some(var_1517) = &input.availability_zone {
        scope_1516.string(var_1517);
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("GroupName");
    if let Some(var_1519) = &input.group_name {
        scope_1518.string(var_1519);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("ReplacementStrategy");
    if let Some(var_1521) = &input.replacement_strategy {
        scope_1520.string(var_1521.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("TerminationDelay");
    if let Some(var_1523) = &input.termination_delay {
        scope_1522.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1523).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("Encrypted");
    if let Some(var_1525) = &input.encrypted {
        scope_1524.boolean(*var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("DeleteOnTermination");
    if let Some(var_1527) = &input.delete_on_termination {
        scope_1526.boolean(*var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("Iops");
    if let Some(var_1529) = &input.iops {
        scope_1528.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1529).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("KmsKeyId");
    if let Some(var_1531) = &input.kms_key_id {
        scope_1530.string(var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("SnapshotId");
    if let Some(var_1533) = &input.snapshot_id {
        scope_1532.string(var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("VolumeSize");
    if let Some(var_1535) = &input.volume_size {
        scope_1534.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("VolumeType");
    if let Some(var_1537) = &input.volume_type {
        scope_1536.string(var_1537.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("Throughput");
    if let Some(var_1539) = &input.throughput {
        scope_1538.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1539).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("Ipv6Address");
    if let Some(var_1541) = &input.ipv6_address {
        scope_1540.string(var_1541);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("MaxPrice");
    if let Some(var_1543) = &input.max_price {
        scope_1542.string(var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("SpotInstanceType");
    if let Some(var_1545) = &input.spot_instance_type {
        scope_1544.string(var_1545.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1547) = &input.block_duration_minutes {
        scope_1546.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("ValidUntil");
    if let Some(var_1549) = &input.valid_until {
        scope_1548.date_time(var_1549, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1551) = &input.instance_interruption_behavior {
        scope_1550.string(var_1551.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("VCpuCount");
    if let Some(var_1553) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1552, var_1553)?;
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("MemoryMiB");
    if let Some(var_1555) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1554, var_1555)?;
    }
    #[allow(unused_mut)]
    let mut scope_1556 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1557) = &input.cpu_manufacturers {
        let mut list_1559 = scope_1556.start_list(true, Some("item"));
        for item_1558 in var_1557 {
            #[allow(unused_mut)]
            let mut entry_1560 = list_1559.entry();
            entry_1560.string(item_1558.as_str());
        }
        list_1559.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1562) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1561, var_1562,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1564) = &input.excluded_instance_types {
        let mut list_1566 = scope_1563.start_list(true, Some("item"));
        for item_1565 in var_1564 {
            #[allow(unused_mut)]
            let mut entry_1567 = list_1566.entry();
            entry_1567.string(item_1565);
        }
        list_1566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1569) = &input.instance_generations {
        let mut list_1571 = scope_1568.start_list(true, Some("item"));
        for item_1570 in var_1569 {
            #[allow(unused_mut)]
            let mut entry_1572 = list_1571.entry();
            entry_1572.string(item_1570.as_str());
        }
        list_1571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1574) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1573.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1574).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1576) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1576).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("BareMetal");
    if let Some(var_1578) = &input.bare_metal {
        scope_1577.string(var_1578.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("BurstablePerformance");
    if let Some(var_1580) = &input.burstable_performance {
        scope_1579.string(var_1580.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1582) = &input.require_hibernate_support {
        scope_1581.boolean(*var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1584) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1583, var_1584,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("LocalStorage");
    if let Some(var_1586) = &input.local_storage {
        scope_1585.string(var_1586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1588) = &input.local_storage_types {
        let mut list_1590 = scope_1587.start_list(true, Some("item"));
        for item_1589 in var_1588 {
            #[allow(unused_mut)]
            let mut entry_1591 = list_1590.entry();
            entry_1591.string(item_1589.as_str());
        }
        list_1590.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1593) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1592, var_1593,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1595) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1594, var_1595,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1597) = &input.accelerator_types {
        let mut list_1599 = scope_1596.start_list(true, Some("item"));
        for item_1598 in var_1597 {
            #[allow(unused_mut)]
            let mut entry_1600 = list_1599.entry();
            entry_1600.string(item_1598.as_str());
        }
        list_1599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("AcceleratorCount");
    if let Some(var_1602) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1601, var_1602)?;
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1604) = &input.accelerator_manufacturers {
        let mut list_1606 = scope_1603.start_list(true, Some("item"));
        for item_1605 in var_1604 {
            #[allow(unused_mut)]
            let mut entry_1607 = list_1606.entry();
            entry_1607.string(item_1605.as_str());
        }
        list_1606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1609) = &input.accelerator_names {
        let mut list_1611 = scope_1608.start_list(true, Some("item"));
        for item_1610 in var_1609 {
            #[allow(unused_mut)]
            let mut entry_1612 = list_1611.entry();
            entry_1612.string(item_1610.as_str());
        }
        list_1611.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1614) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1613, var_1614,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("ReplacementStrategy");
    if let Some(var_1616) = &input.replacement_strategy {
        scope_1615.string(var_1616.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1617 = writer.prefix("TerminationDelay");
    if let Some(var_1618) = &input.termination_delay {
        scope_1617.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1618).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("GroupName");
    if let Some(var_1620) = &input.group_name {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("GroupId");
    if let Some(var_1622) = &input.group_id {
        scope_1621.string(var_1622);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("Enabled");
    if let Some(var_1624) = &input.enabled {
        scope_1623.boolean(*var_1624);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("ResourceType");
    if let Some(var_1626) = &input.resource_type {
        scope_1625.string(var_1626.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("Tag");
    if let Some(var_1628) = &input.tags {
        let mut list_1630 = scope_1627.start_list(true, Some("item"));
        for item_1629 in var_1628 {
            #[allow(unused_mut)]
            let mut entry_1631 = list_1630.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1631, item_1629)?;
        }
        list_1630.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1632 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1633) = &input.classic_load_balancers {
        let mut list_1635 = scope_1632.start_list(true, Some("item"));
        for item_1634 in var_1633 {
            #[allow(unused_mut)]
            let mut entry_1636 = list_1635.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1636, item_1634,
            )?;
        }
        list_1635.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1637 = writer.prefix("TargetGroups");
    if let Some(var_1638) = &input.target_groups {
        let mut list_1640 = scope_1637.start_list(true, Some("item"));
        for item_1639 in var_1638 {
            #[allow(unused_mut)]
            let mut entry_1641 = list_1640.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1641, item_1639)?;
        }
        list_1640.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("DeleteOnTermination");
    if let Some(var_1643) = &input.delete_on_termination {
        scope_1642.boolean(*var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("Encrypted");
    if let Some(var_1645) = &input.encrypted {
        scope_1644.boolean(*var_1645);
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("Iops");
    if let Some(var_1647) = &input.iops {
        scope_1646.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1647).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("SnapshotId");
    if let Some(var_1649) = &input.snapshot_id {
        scope_1648.string(var_1649);
    }
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("VolumeSize");
    if let Some(var_1651) = &input.volume_size {
        scope_1650.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1651).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1652 = writer.prefix("VolumeType");
    if let Some(var_1653) = &input.volume_type {
        scope_1652.string(var_1653);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("Ipv6Address");
    if let Some(var_1655) = &input.ipv6_address {
        scope_1654.string(var_1655);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("Primary");
    if let Some(var_1657) = &input.primary {
        scope_1656.boolean(*var_1657);
    }
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("PrivateIpAddress");
    if let Some(var_1659) = &input.private_ip_address {
        scope_1658.string(var_1659);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("Min");
    if let Some(var_1661) = &input.min {
        scope_1660.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1661).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("Max");
    if let Some(var_1663) = &input.max {
        scope_1662.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1663).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("Min");
    if let Some(var_1665) = &input.min {
        scope_1664.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1666 = writer.prefix("Max");
    if let Some(var_1667) = &input.max {
        scope_1666.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1667).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1668 = writer.prefix("Min");
    if let Some(var_1669) = &input.min {
        scope_1668.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1669).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("Max");
    if let Some(var_1671) = &input.max {
        scope_1670.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1671).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1672 = writer.prefix("Min");
    if let Some(var_1673) = &input.min {
        scope_1672.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1673).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1674 = writer.prefix("Max");
    if let Some(var_1675) = &input.max {
        scope_1674.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1675).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("Min");
    if let Some(var_1677) = &input.min {
        scope_1676.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1677).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("Max");
    if let Some(var_1679) = &input.max {
        scope_1678.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1679).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("Min");
    if let Some(var_1681) = &input.min {
        scope_1680.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1681).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("Max");
    if let Some(var_1683) = &input.max {
        scope_1682.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1683).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("Min");
    if let Some(var_1685) = &input.min {
        scope_1684.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1685).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("Max");
    if let Some(var_1687) = &input.max {
        scope_1686.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1687).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("Min");
    if let Some(var_1689) = &input.min {
        scope_1688.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1689).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("Max");
    if let Some(var_1691) = &input.max {
        scope_1690.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1691).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("Name");
    if let Some(var_1693) = &input.name {
        scope_1692.string(var_1693);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("Arn");
    if let Some(var_1695) = &input.arn {
        scope_1694.string(var_1695);
    }
    Ok(())
}
