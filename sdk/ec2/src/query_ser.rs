// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Key");
    if let Some(var_92) = &input.key {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Value");
    if let Some(var_94) = &input.values {
        let mut list_96 = scope_93.start_list(true, Some("item"));
        for item_95 in var_94 {
            #[allow(unused_mut)]
            let mut entry_97 = list_96.entry();
            entry_97.string(item_95);
        }
        list_96.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("AllocationStrategy");
    if let Some(var_99) = &input.allocation_strategy {
        scope_98.string(var_99.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("MaintenanceStrategies");
    if let Some(var_101) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_100, var_101)?;
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_103) = &input.instance_interruption_behavior {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_105) = &input.instance_pools_to_use_count {
        scope_104.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("SingleInstanceType");
    if let Some(var_107) = &input.single_instance_type {
        scope_106.boolean(*var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_109) = &input.single_availability_zone {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MinTargetCapacity");
    if let Some(var_111) = &input.min_target_capacity {
        scope_110.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("MaxTotalPrice");
    if let Some(var_113) = &input.max_total_price {
        scope_112.string(var_113);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("AllocationStrategy");
    if let Some(var_115) = &input.allocation_strategy {
        scope_114.string(var_115.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("CapacityReservationOptions");
    if let Some(var_117) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_116, var_117,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("SingleInstanceType");
    if let Some(var_119) = &input.single_instance_type {
        scope_118.boolean(*var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_121) = &input.single_availability_zone {
        scope_120.boolean(*var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("MinTargetCapacity");
    if let Some(var_123) = &input.min_target_capacity {
        scope_122.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("MaxTotalPrice");
    if let Some(var_125) = &input.max_total_price {
        scope_124.string(var_125);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_127) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_126, var_127)?;
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Overrides");
    if let Some(var_129) = &input.overrides {
        let mut list_131 = scope_128.start_list(true, Some("item"));
        for item_130 in var_129 {
            #[allow(unused_mut)]
            let mut entry_132 = list_131.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_132, item_130)?;
        }
        list_131.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("TotalTargetCapacity");
    if let Some(var_134) = &input.total_target_capacity {
        scope_133.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_136) = &input.on_demand_target_capacity {
        scope_135.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("SpotTargetCapacity");
    if let Some(var_138) = &input.spot_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_140) = &input.default_target_capacity_type {
        scope_139.string(var_140.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_142) = &input.target_capacity_unit_type {
        scope_141.string(var_142.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("FileFormat");
    if let Some(var_144) = &input.file_format {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_146) = &input.hive_compatible_partitions {
        scope_145.boolean(*var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("PerHourPartition");
    if let Some(var_148) = &input.per_hour_partition {
        scope_147.boolean(*var_148);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Bucket");
    if let Some(var_150) = &input.bucket {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("Key");
    if let Some(var_152) = &input.key {
        scope_151.string(var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("DeviceName");
    if let Some(var_154) = &input.device_name {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("VirtualName");
    if let Some(var_156) = &input.virtual_name {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("Ebs");
    if let Some(var_158) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_157, var_158)?;
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("NoDevice");
    if let Some(var_160) = &input.no_device {
        scope_159.string(var_160);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("StartWeekDay");
    if let Some(var_162) = &input.start_week_day {
        scope_161.string(var_162.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("StartHour");
    if let Some(var_164) = &input.start_hour {
        scope_163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("EndWeekDay");
    if let Some(var_166) = &input.end_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("EndHour");
    if let Some(var_168) = &input.end_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ContainerFormat");
    if let Some(var_170) = &input.container_format {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("DiskImageFormat");
    if let Some(var_172) = &input.disk_image_format {
        scope_171.string(var_172.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("S3Bucket");
    if let Some(var_174) = &input.s3_bucket {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("S3Prefix");
    if let Some(var_176) = &input.s3_prefix {
        scope_175.string(var_176);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("RegionName");
    if let Some(var_178) = &input.region_name {
        scope_177.string(var_178);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestIpamResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("Key");
    if let Some(var_180) = &input.key {
        scope_179.string(var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("Value");
    if let Some(var_182) = &input.value {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("KernelId");
    if let Some(var_184) = &input.kernel_id {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("EbsOptimized");
    if let Some(var_186) = &input.ebs_optimized {
        scope_185.boolean(*var_186);
    }
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("IamInstanceProfile");
    if let Some(var_188) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_187, var_188)?;
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("BlockDeviceMapping");
    if let Some(var_190) = &input.block_device_mappings {
        let mut list_192 = scope_189.start_list(true, Some("BlockDeviceMapping"));
        for item_191 in var_190 {
            #[allow(unused_mut)]
            let mut entry_193 = list_192.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_193, item_191)?;
        }
        list_192.finish();
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("NetworkInterface");
    if let Some(var_195) = &input.network_interfaces {
        let mut list_197 =
            scope_194.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_196 in var_195 {
            #[allow(unused_mut)]
            let mut entry_198 = list_197.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_198, item_196)?;
        }
        list_197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("ImageId");
    if let Some(var_200) = &input.image_id {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("InstanceType");
    if let Some(var_202) = &input.instance_type {
        scope_201.string(var_202.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("KeyName");
    if let Some(var_204) = &input.key_name {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("Monitoring");
    if let Some(var_206) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_205, var_206,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("Placement");
    if let Some(var_208) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_207, var_208,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("RamDiskId");
    if let Some(var_210) = &input.ram_disk_id {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("DisableApiTermination");
    if let Some(var_212) = &input.disable_api_termination {
        scope_211.boolean(*var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_214) = &input.instance_initiated_shutdown_behavior {
        scope_213.string(var_214.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("UserData");
    if let Some(var_216) = &input.user_data {
        scope_215.string(var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("TagSpecification");
    if let Some(var_218) = &input.tag_specifications {
        let mut list_220 =
            scope_217.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_219 in var_218 {
            #[allow(unused_mut)]
            let mut entry_221 = list_220.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_221, item_219)?;
        }
        list_220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_223) = &input.elastic_gpu_specifications {
        let mut list_225 = scope_222.start_list(true, Some("ElasticGpuSpecification"));
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_226, item_224,
            )?;
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_228) = &input.elastic_inference_accelerators {
        let mut list_230 = scope_227.start_list(true, Some("item"));
        for item_229 in var_228 {
            #[allow(unused_mut)]
            let mut entry_231 = list_230.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_231, item_229)?;
        }
        list_230.finish();
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("SecurityGroupId");
    if let Some(var_233) = &input.security_group_ids {
        let mut list_235 = scope_232.start_list(true, Some("SecurityGroupId"));
        for item_234 in var_233 {
            #[allow(unused_mut)]
            let mut entry_236 = list_235.entry();
            entry_236.string(item_234);
        }
        list_235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("SecurityGroup");
    if let Some(var_238) = &input.security_groups {
        let mut list_240 = scope_237.start_list(true, Some("SecurityGroup"));
        for item_239 in var_238 {
            #[allow(unused_mut)]
            let mut entry_241 = list_240.entry();
            entry_241.string(item_239);
        }
        list_240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("InstanceMarketOptions");
    if let Some(var_243) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_242, var_243)?;
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("CreditSpecification");
    if let Some(var_245) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_244, var_245,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("CpuOptions");
    if let Some(var_247) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_246, var_247,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_249) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_248, var_249)?;
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("LicenseSpecification");
    if let Some(var_251) = &input.license_specifications {
        let mut list_253 = scope_250.start_list(true, Some("item"));
        for item_252 in var_251 {
            #[allow(unused_mut)]
            let mut entry_254 = list_253.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_254, item_252)?;
        }
        list_253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("HibernationOptions");
    if let Some(var_256) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_255, var_256)?;
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("MetadataOptions");
    if let Some(var_258) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_257, var_258)?;
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("EnclaveOptions");
    if let Some(var_260) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_259, var_260,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("InstanceRequirements");
    if let Some(var_262) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_261, var_262,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_264) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_263, var_264)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("Cidr");
    if let Some(var_266) = &input.cidr {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("Description");
    if let Some(var_268) = &input.description {
        scope_267.string(var_268);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Code");
    if let Some(var_270) = &input.code {
        scope_269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Type");
    if let Some(var_272) = &input.r#type {
        scope_271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_272).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("From");
    if let Some(var_274) = &input.from {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("To");
    if let Some(var_276) = &input.to {
        scope_275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AccessScopePathRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Source");
    if let Some(var_278) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_277, var_278,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("Destination");
    if let Some(var_280) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_279, var_280,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("ThroughResource");
    if let Some(var_282) = &input.through_resources {
        let mut list_284 = scope_281.start_list(true, Some("item"));
        for item_283 in var_282 {
            #[allow(unused_mut)]
            let mut entry_285 = list_284.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(
                entry_285, item_283,
            )?;
        }
        list_284.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("Ipv6Address");
    if let Some(var_287) = &input.ipv6_address {
        scope_286.string(var_287);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("Primary");
    if let Some(var_289) = &input.primary {
        scope_288.boolean(*var_289);
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("PrivateIpAddress");
    if let Some(var_291) = &input.private_ip_address {
        scope_290.string(var_291);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("Ipv4Prefix");
    if let Some(var_293) = &input.ipv4_prefix {
        scope_292.string(var_293);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Ipv6Prefix");
    if let Some(var_295) = &input.ipv6_prefix {
        scope_294.string(var_295);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("CurrencyCode");
    if let Some(var_297) = &input.currency_code {
        scope_296.string(var_297.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Price");
    if let Some(var_299) = &input.price {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Term");
    if let Some(var_301) = &input.term {
        scope_300.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_301).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("InstanceId");
    if let Some(var_303) = &input.instance_id {
        scope_302.string(var_303);
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("ExcludeBootVolume");
    if let Some(var_305) = &input.exclude_boot_volume {
        scope_304.boolean(*var_305);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Key");
    if let Some(var_307) = &input.key {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("Value");
    if let Some(var_309) = &input.value {
        scope_308.string(var_309);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("Key");
    if let Some(var_311) = &input.key {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Value");
    if let Some(var_313) = &input.value {
        scope_312.string(var_313);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("FromPort");
    if let Some(var_315) = &input.from_port {
        scope_314.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_315).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("ToPort");
    if let Some(var_317) = &input.to_port {
        scope_316.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_317).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("AmazonSideAsn");
    if let Some(var_319) = &input.amazon_side_asn {
        scope_318.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_319).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_321) = &input.auto_accept_shared_attachments {
        scope_320.string(var_321.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_323) = &input.default_route_table_association {
        scope_322.string(var_323.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_325) = &input.default_route_table_propagation {
        scope_324.string(var_325.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("VpnEcmpSupport");
    if let Some(var_327) = &input.vpn_ecmp_support {
        scope_326.string(var_327.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DnsSupport");
    if let Some(var_329) = &input.dns_support {
        scope_328.string(var_329.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("MulticastSupport");
    if let Some(var_331) = &input.multicast_support {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_333) = &input.transit_gateway_cidr_blocks {
        let mut list_335 = scope_332.start_list(true, Some("item"));
        for item_334 in var_333 {
            #[allow(unused_mut)]
            let mut entry_336 = list_335.entry();
            entry_336.string(item_334);
        }
        list_335.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("Protocol");
    if let Some(var_338) = &input.protocol {
        scope_337.string(var_338.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("PeerAsn");
    if let Some(var_340) = &input.peer_asn {
        scope_339.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_340).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("Igmpv2Support");
    if let Some(var_342) = &input.igmpv2_support {
        scope_341.string(var_342.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("StaticSourcesSupport");
    if let Some(var_344) = &input.static_sources_support {
        scope_343.string(var_344.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_346) = &input.auto_accept_shared_associations {
        scope_345.string(var_346.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("DnsSupport");
    if let Some(var_348) = &input.dns_support {
        scope_347.string(var_348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("Ipv6Support");
    if let Some(var_350) = &input.ipv6_support {
        scope_349.string(var_350.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("ApplianceModeSupport");
    if let Some(var_352) = &input.appliance_mode_support {
        scope_351.string(var_352.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("EnableAcceleration");
    if let Some(var_354) = &input.enable_acceleration {
        scope_353.boolean(*var_354);
    }
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("StaticRoutesOnly");
    if let Some(var_356) = &input.static_routes_only {
        scope_355.boolean(*var_356);
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_358) = &input.tunnel_inside_ip_version {
        scope_357.string(var_358.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("TunnelOptions");
    if let Some(var_360) = &input.tunnel_options {
        let mut list_362 = scope_359.start_list(true, None);
        for item_361 in var_360 {
            #[allow(unused_mut)]
            let mut entry_363 = list_362.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_363, item_361,
            )?;
        }
        list_362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_365) = &input.local_ipv4_network_cidr {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_367) = &input.remote_ipv4_network_cidr {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_369) = &input.local_ipv6_network_cidr {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_371) = &input.remote_ipv6_network_cidr {
        scope_370.string(var_371);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_373) = &input.include_all_tags_of_instance {
        scope_372.boolean(*var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("InstanceTagKey");
    if let Some(var_375) = &input.instance_tag_keys {
        let mut list_377 = scope_374.start_list(true, Some("item"));
        for item_376 in var_375 {
            #[allow(unused_mut)]
            let mut entry_378 = list_377.entry();
            entry_378.string(item_376);
        }
        list_377.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("Name");
    if let Some(var_380) = &input.name {
        scope_379.string(var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("Value");
    if let Some(var_382) = &input.values {
        let mut list_384 = scope_381.start_list(true, Some("item"));
        for item_383 in var_382 {
            #[allow(unused_mut)]
            let mut entry_385 = list_384.entry();
            entry_385.string(item_383);
        }
        list_384.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("EarliestTime");
    if let Some(var_387) = &input.earliest_time {
        scope_386.date_time(var_387, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("LatestTime");
    if let Some(var_389) = &input.latest_time {
        scope_388.date_time(var_389, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("Frequency");
    if let Some(var_391) = &input.frequency {
        scope_390.string(var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("Interval");
    if let Some(var_393) = &input.interval {
        scope_392.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("OccurrenceDay");
    if let Some(var_395) = &input.occurrence_days {
        let mut list_397 = scope_394.start_list(true, Some("OccurenceDay"));
        for item_396 in var_395 {
            #[allow(unused_mut)]
            let mut entry_398 = list_397.entry();
            entry_398.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_396).into()),
            );
        }
        list_397.finish();
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_400) = &input.occurrence_relative_to_end {
        scope_399.boolean(*var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("OccurrenceUnit");
    if let Some(var_402) = &input.occurrence_unit {
        scope_401.string(var_402);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("EarliestTime");
    if let Some(var_404) = &input.earliest_time {
        scope_403.date_time(var_404, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("LatestTime");
    if let Some(var_406) = &input.latest_time {
        scope_405.date_time(var_406, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("InstanceId");
    if let Some(var_408) = &input.instance_ids {
        let mut list_410 = scope_407.start_list(true, Some("item"));
        for item_409 in var_408 {
            #[allow(unused_mut)]
            let mut entry_411 = list_410.entry();
            entry_411.string(item_409);
        }
        list_410.finish();
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("InstanceTag");
    if let Some(var_413) = &input.instance_tags {
        let mut list_415 = scope_412.start_list(true, Some("item"));
        for item_414 in var_413 {
            #[allow(unused_mut)]
            let mut entry_416 = list_415.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_416, item_414)?;
        }
        list_415.finish();
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("DedicatedHostId");
    if let Some(var_418) = &input.dedicated_host_ids {
        let mut list_420 = scope_417.start_list(true, Some("item"));
        for item_419 in var_418 {
            #[allow(unused_mut)]
            let mut entry_421 = list_420.entry();
            entry_421.string(item_419);
        }
        list_420.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("S3Bucket");
    if let Some(var_423) = &input.s3_bucket {
        scope_422.string(var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("S3Prefix");
    if let Some(var_425) = &input.s3_prefix {
        scope_424.string(var_425);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("AthenaIntegration");
    if let Some(var_427) = &input.athena_integrations {
        let mut list_429 = scope_426.start_list(true, Some("item"));
        for item_428 in var_427 {
            #[allow(unused_mut)]
            let mut entry_430 = list_429.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_430, item_428,
            )?;
        }
        list_429.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("VCpuCount");
    if let Some(var_432) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_431, var_432,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("MemoryMiB");
    if let Some(var_434) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_433, var_434)?;
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("CpuManufacturer");
    if let Some(var_436) = &input.cpu_manufacturers {
        let mut list_438 = scope_435.start_list(true, Some("item"));
        for item_437 in var_436 {
            #[allow(unused_mut)]
            let mut entry_439 = list_438.entry();
            entry_439.string(item_437.as_str());
        }
        list_438.finish();
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_441) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_440, var_441,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("ExcludedInstanceType");
    if let Some(var_443) = &input.excluded_instance_types {
        let mut list_445 = scope_442.start_list(true, Some("item"));
        for item_444 in var_443 {
            #[allow(unused_mut)]
            let mut entry_446 = list_445.entry();
            entry_446.string(item_444);
        }
        list_445.finish();
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("InstanceGeneration");
    if let Some(var_448) = &input.instance_generations {
        let mut list_450 = scope_447.start_list(true, Some("item"));
        for item_449 in var_448 {
            #[allow(unused_mut)]
            let mut entry_451 = list_450.entry();
            entry_451.string(item_449.as_str());
        }
        list_450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_453) = &input.spot_max_price_percentage_over_lowest_price {
        scope_452.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_455) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_454.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("BareMetal");
    if let Some(var_457) = &input.bare_metal {
        scope_456.string(var_457.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("BurstablePerformance");
    if let Some(var_459) = &input.burstable_performance {
        scope_458.string(var_459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("RequireHibernateSupport");
    if let Some(var_461) = &input.require_hibernate_support {
        scope_460.boolean(*var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_463) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_462, var_463,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("LocalStorage");
    if let Some(var_465) = &input.local_storage {
        scope_464.string(var_465.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("LocalStorageType");
    if let Some(var_467) = &input.local_storage_types {
        let mut list_469 = scope_466.start_list(true, Some("item"));
        for item_468 in var_467 {
            #[allow(unused_mut)]
            let mut entry_470 = list_469.entry();
            entry_470.string(item_468.as_str());
        }
        list_469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_472) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_471, var_472,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_474) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_473, var_474,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("AcceleratorType");
    if let Some(var_476) = &input.accelerator_types {
        let mut list_478 = scope_475.start_list(true, Some("item"));
        for item_477 in var_476 {
            #[allow(unused_mut)]
            let mut entry_479 = list_478.entry();
            entry_479.string(item_477.as_str());
        }
        list_478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("AcceleratorCount");
    if let Some(var_481) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_480, var_481,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_483) = &input.accelerator_manufacturers {
        let mut list_485 = scope_482.start_list(true, Some("item"));
        for item_484 in var_483 {
            #[allow(unused_mut)]
            let mut entry_486 = list_485.entry();
            entry_486.string(item_484.as_str());
        }
        list_485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("AcceleratorName");
    if let Some(var_488) = &input.accelerator_names {
        let mut list_490 = scope_487.start_list(true, Some("item"));
        for item_489 in var_488 {
            #[allow(unused_mut)]
            let mut entry_491 = list_490.entry();
            entry_491.string(item_489.as_str());
        }
        list_490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_493) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_492, var_493,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("ArchitectureType");
    if let Some(var_495) = &input.architecture_types {
        let mut list_497 = scope_494.start_list(true, Some("item"));
        for item_496 in var_495 {
            #[allow(unused_mut)]
            let mut entry_498 = list_497.entry();
            entry_498.string(item_496.as_str());
        }
        list_497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("VirtualizationType");
    if let Some(var_500) = &input.virtualization_types {
        let mut list_502 = scope_499.start_list(true, Some("item"));
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            entry_503.string(item_501.as_str());
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("InstanceRequirements");
    if let Some(var_505) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_504, var_505,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("Comment");
    if let Some(var_507) = &input.comment {
        scope_506.string(var_507);
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("UploadEnd");
    if let Some(var_509) = &input.upload_end {
        scope_508.date_time(var_509, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("UploadSize");
    if let Some(var_511) = &input.upload_size {
        scope_510.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_511).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("UploadStart");
    if let Some(var_513) = &input.upload_start {
        scope_512.date_time(var_513, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("Description");
    if let Some(var_515) = &input.description {
        scope_514.string(var_515);
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("DeviceName");
    if let Some(var_517) = &input.device_name {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("Format");
    if let Some(var_519) = &input.format {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("SnapshotId");
    if let Some(var_521) = &input.snapshot_id {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("Url");
    if let Some(var_523) = &input.url {
        scope_522.string(var_523);
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("UserBucket");
    if let Some(var_525) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_524, var_525)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_527) = &input.license_configuration_arn {
        scope_526.string(var_527);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Description");
    if let Some(var_529) = &input.description {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Image");
    if let Some(var_531) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_530, var_531)?;
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("Volume");
    if let Some(var_533) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_532, var_533)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("AdditionalInfo");
    if let Some(var_535) = &input.additional_info {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Architecture");
    if let Some(var_537) = &input.architecture {
        scope_536.string(var_537.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("GroupId");
    if let Some(var_539) = &input.group_ids {
        let mut list_541 = scope_538.start_list(true, Some("SecurityGroupId"));
        for item_540 in var_539 {
            #[allow(unused_mut)]
            let mut entry_542 = list_541.entry();
            entry_542.string(item_540);
        }
        list_541.finish();
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("GroupName");
    if let Some(var_544) = &input.group_names {
        let mut list_546 = scope_543.start_list(true, Some("SecurityGroup"));
        for item_545 in var_544 {
            #[allow(unused_mut)]
            let mut entry_547 = list_546.entry();
            entry_547.string(item_545);
        }
        list_546.finish();
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_549) = &input.instance_initiated_shutdown_behavior {
        scope_548.string(var_549.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("InstanceType");
    if let Some(var_551) = &input.instance_type {
        scope_550.string(var_551.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("Monitoring");
    if let Some(var_553) = &input.monitoring {
        scope_552.boolean(*var_553);
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("Placement");
    if let Some(var_555) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_554, var_555)?;
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("PrivateIpAddress");
    if let Some(var_557) = &input.private_ip_address {
        scope_556.string(var_557);
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("SubnetId");
    if let Some(var_559) = &input.subnet_id {
        scope_558.string(var_559);
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("UserData");
    if let Some(var_561) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_560, var_561)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("Description");
    if let Some(var_563) = &input.description {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("Format");
    if let Some(var_565) = &input.format {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Url");
    if let Some(var_567) = &input.url {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("UserBucket");
    if let Some(var_569) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_568, var_569)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("Bytes");
    if let Some(var_571) = &input.bytes {
        scope_570.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_571).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("Format");
    if let Some(var_573) = &input.format {
        scope_572.string(var_573.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("ImportManifestUrl");
    if let Some(var_575) = &input.import_manifest_url {
        scope_574.string(var_575);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("Size");
    if let Some(var_577) = &input.size {
        scope_576.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_577).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("CustomDnsServers");
    if let Some(var_579) = &input.custom_dns_servers {
        let mut list_581 = scope_578.start_list(true, Some("item"));
        for item_580 in var_579 {
            #[allow(unused_mut)]
            let mut entry_582 = list_581.entry();
            entry_582.string(item_580);
        }
        list_581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("Enabled");
    if let Some(var_584) = &input.enabled {
        scope_583.boolean(*var_584);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("Add");
    if let Some(var_586) = &input.add {
        let mut list_588 = scope_585.start_list(true, Some("item"));
        for item_587 in var_586 {
            #[allow(unused_mut)]
            let mut entry_589 = list_588.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_589, item_587,
            )?;
        }
        list_588.finish();
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Remove");
    if let Some(var_591) = &input.remove {
        let mut list_593 = scope_590.start_list(true, Some("item"));
        for item_592 in var_591 {
            #[allow(unused_mut)]
            let mut entry_594 = list_593.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_594, item_592,
            )?;
        }
        list_593.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("Value");
    if let Some(var_596) = &input.value {
        scope_595.string(var_596);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("Add");
    if let Some(var_598) = &input.add {
        let mut list_600 = scope_597.start_list(true, Some("item"));
        for item_599 in var_598 {
            #[allow(unused_mut)]
            let mut entry_601 = list_600.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_601, item_599,
            )?;
        }
        list_600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("Remove");
    if let Some(var_603) = &input.remove {
        let mut list_605 = scope_602.start_list(true, Some("item"));
        for item_604 in var_603 {
            #[allow(unused_mut)]
            let mut entry_606 = list_605.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_606, item_604,
            )?;
        }
        list_605.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("Value");
    if let Some(var_608) = &input.value {
        scope_607.boolean(*var_608);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("DeviceName");
    if let Some(var_610) = &input.device_name {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Ebs");
    if let Some(var_612) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_611, var_612,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("NoDevice");
    if let Some(var_614) = &input.no_device {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("VirtualName");
    if let Some(var_616) = &input.virtual_name {
        scope_615.string(var_616);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("Value");
    if let Some(var_618) = &input.value {
        scope_617.string(&aws_smithy_types::base64::encode(var_618));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("CapacityReservationPreference");
    if let Some(var_620) = &input.capacity_reservation_preference {
        scope_619.string(var_620.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("CapacityReservationTarget");
    if let Some(var_622) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_621, var_622,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("InstanceId");
    if let Some(var_624) = &input.instance_id {
        scope_623.string(var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("CpuCredits");
    if let Some(var_626) = &input.cpu_credits {
        scope_625.string(var_626);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemoveIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("RegionName");
    if let Some(var_628) = &input.region_name {
        scope_627.string(var_628);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("Cidr");
    if let Some(var_630) = &input.cidr {
        scope_629.string(var_630);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("AttachmentId");
    if let Some(var_632) = &input.attachment_id {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("DeleteOnTermination");
    if let Some(var_634) = &input.delete_on_termination {
        scope_633.boolean(*var_634);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("AvailabilityZone");
    if let Some(var_636) = &input.availability_zone {
        scope_635.string(var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("InstanceCount");
    if let Some(var_638) = &input.instance_count {
        scope_637.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("InstanceType");
    if let Some(var_640) = &input.instance_type {
        scope_639.string(var_640.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("Platform");
    if let Some(var_642) = &input.platform {
        scope_641.string(var_642);
    }
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("Scope");
    if let Some(var_644) = &input.scope {
        scope_643.string(var_644.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_646) = &input.security_group_rule_id {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("SecurityGroupRule");
    if let Some(var_648) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_647, var_648,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("Add");
    if let Some(var_650) = &input.add {
        let mut list_652 = scope_649.start_list(true, Some("item"));
        for item_651 in var_650 {
            #[allow(unused_mut)]
            let mut entry_653 = list_652.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_653, item_651,
            )?;
        }
        list_652.finish();
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("Remove");
    if let Some(var_655) = &input.remove {
        let mut list_657 = scope_654.start_list(true, Some("item"));
        for item_656 in var_655 {
            #[allow(unused_mut)]
            let mut entry_658 = list_657.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_658, item_656,
            )?;
        }
        list_657.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_660) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_659, var_660,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("Overrides");
    if let Some(var_662) = &input.overrides {
        let mut list_664 = scope_661.start_list(true, Some("item"));
        for item_663 in var_662 {
            #[allow(unused_mut)]
            let mut entry_665 = list_664.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_665, item_663,
            )?;
        }
        list_664.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_667) = &input.add_transit_gateway_cidr_blocks {
        let mut list_669 = scope_666.start_list(true, Some("item"));
        for item_668 in var_667 {
            #[allow(unused_mut)]
            let mut entry_670 = list_669.entry();
            entry_670.string(item_668);
        }
        list_669.finish();
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_672) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_674 = scope_671.start_list(true, Some("item"));
        for item_673 in var_672 {
            #[allow(unused_mut)]
            let mut entry_675 = list_674.entry();
            entry_675.string(item_673);
        }
        list_674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("VpnEcmpSupport");
    if let Some(var_677) = &input.vpn_ecmp_support {
        scope_676.string(var_677.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("DnsSupport");
    if let Some(var_679) = &input.dns_support {
        scope_678.string(var_679.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_681) = &input.auto_accept_shared_attachments {
        scope_680.string(var_681.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_682 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_683) = &input.default_route_table_association {
        scope_682.string(var_683.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_685) = &input.association_default_route_table_id {
        scope_684.string(var_685);
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_687) = &input.default_route_table_propagation {
        scope_686.string(var_687.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_689) = &input.propagation_default_route_table_id {
        scope_688.string(var_689);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("DnsSupport");
    if let Some(var_691) = &input.dns_support {
        scope_690.string(var_691.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("Ipv6Support");
    if let Some(var_693) = &input.ipv6_support {
        scope_692.string(var_693.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("ApplianceModeSupport");
    if let Some(var_695) = &input.appliance_mode_support {
        scope_694.string(var_695.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_697) = &input.allow_dns_resolution_from_remote_vpc {
        scope_696.boolean(*var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_699) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_698.boolean(*var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_701) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_700.boolean(*var_701);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("TunnelInsideCidr");
    if let Some(var_703) = &input.tunnel_inside_cidr {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_705) = &input.tunnel_inside_ipv6_cidr {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("PreSharedKey");
    if let Some(var_707) = &input.pre_shared_key {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_709) = &input.phase1_lifetime_seconds {
        scope_708.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_709).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_711) = &input.phase2_lifetime_seconds {
        scope_710.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_711).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_713) = &input.rekey_margin_time_seconds {
        scope_712.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_713).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_715) = &input.rekey_fuzz_percentage {
        scope_714.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_715).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("ReplayWindowSize");
    if let Some(var_717) = &input.replay_window_size {
        scope_716.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_717).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_719) = &input.dpd_timeout_seconds {
        scope_718.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_719).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("DPDTimeoutAction");
    if let Some(var_721) = &input.dpd_timeout_action {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_723) = &input.phase1_encryption_algorithms {
        let mut list_725 = scope_722.start_list(true, Some("item"));
        for item_724 in var_723 {
            #[allow(unused_mut)]
            let mut entry_726 = list_725.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_726, item_724)?;
        }
        list_725.finish();
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_728) = &input.phase2_encryption_algorithms {
        let mut list_730 = scope_727.start_list(true, Some("item"));
        for item_729 in var_728 {
            #[allow(unused_mut)]
            let mut entry_731 = list_730.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_731, item_729)?;
        }
        list_730.finish();
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_733) = &input.phase1_integrity_algorithms {
        let mut list_735 = scope_732.start_list(true, Some("item"));
        for item_734 in var_733 {
            #[allow(unused_mut)]
            let mut entry_736 = list_735.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_736, item_734)?;
        }
        list_735.finish();
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_738) = &input.phase2_integrity_algorithms {
        let mut list_740 = scope_737.start_list(true, Some("item"));
        for item_739 in var_738 {
            #[allow(unused_mut)]
            let mut entry_741 = list_740.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_741, item_739)?;
        }
        list_740.finish();
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_743) = &input.phase1_dh_group_numbers {
        let mut list_745 = scope_742.start_list(true, Some("item"));
        for item_744 in var_743 {
            #[allow(unused_mut)]
            let mut entry_746 = list_745.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_746, item_744)?;
        }
        list_745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_748) = &input.phase2_dh_group_numbers {
        let mut list_750 = scope_747.start_list(true, Some("item"));
        for item_749 in var_748 {
            #[allow(unused_mut)]
            let mut entry_751 = list_750.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_751, item_749)?;
        }
        list_750.finish();
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("IKEVersion");
    if let Some(var_753) = &input.ike_versions {
        let mut list_755 = scope_752.start_list(true, Some("item"));
        for item_754 in var_753 {
            #[allow(unused_mut)]
            let mut entry_756 = list_755.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_756, item_754,
            )?;
        }
        list_755.finish();
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("StartupAction");
    if let Some(var_758) = &input.startup_action {
        scope_757.string(var_758);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("Message");
    if let Some(var_760) = &input.message {
        scope_759.string(var_760);
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("Signature");
    if let Some(var_762) = &input.signature {
        scope_761.string(var_762);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpamCidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("Message");
    if let Some(var_764) = &input.message {
        scope_763.string(var_764);
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("Signature");
    if let Some(var_766) = &input.signature {
        scope_765.string(var_766);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("Amount");
    if let Some(var_768) = &input.amount {
        scope_767.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_768).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("CurrencyCode");
    if let Some(var_770) = &input.currency_code {
        scope_769.string(var_770.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("InstanceCount");
    if let Some(var_772) = &input.instance_count {
        scope_771.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_772).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("PurchaseToken");
    if let Some(var_774) = &input.purchase_token {
        scope_773.string(var_774);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_776) = &input.include_all_tags_of_instance {
        scope_775.boolean(*var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("InstanceTagKey");
    if let Some(var_778) = &input.instance_tag_keys {
        let mut list_780 = scope_777.start_list(true, Some("item"));
        for item_779 in var_778 {
            #[allow(unused_mut)]
            let mut entry_781 = list_780.entry();
            entry_781.string(item_779);
        }
        list_780.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("AllocationStrategy");
    if let Some(var_783) = &input.allocation_strategy {
        scope_782.string(var_783.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_785) = &input.on_demand_allocation_strategy {
        scope_784.string(var_785.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_787) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_786, var_787,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("ClientToken");
    if let Some(var_789) = &input.client_token {
        scope_788.string(var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_791) = &input.excess_capacity_termination_policy {
        scope_790.string(var_791.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("FulfilledCapacity");
    if let Some(var_793) = &input.fulfilled_capacity {
        scope_792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_795) = &input.on_demand_fulfilled_capacity {
        scope_794.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_795).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("IamFleetRole");
    if let Some(var_797) = &input.iam_fleet_role {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("LaunchSpecifications");
    if let Some(var_799) = &input.launch_specifications {
        let mut list_801 = scope_798.start_list(true, Some("item"));
        for item_800 in var_799 {
            #[allow(unused_mut)]
            let mut entry_802 = list_801.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_802, item_800,
            )?;
        }
        list_801.finish();
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_804) = &input.launch_template_configs {
        let mut list_806 = scope_803.start_list(true, Some("item"));
        for item_805 in var_804 {
            #[allow(unused_mut)]
            let mut entry_807 = list_806.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_807, item_805,
            )?;
        }
        list_806.finish();
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("SpotPrice");
    if let Some(var_809) = &input.spot_price {
        scope_808.string(var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("TargetCapacity");
    if let Some(var_811) = &input.target_capacity {
        scope_810.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_811).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_813) = &input.on_demand_target_capacity {
        scope_812.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_813).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_815) = &input.on_demand_max_total_price {
        scope_814.string(var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_817) = &input.spot_max_total_price {
        scope_816.string(var_817);
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_819) = &input.terminate_instances_with_expiration {
        scope_818.boolean(*var_819);
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Type");
    if let Some(var_821) = &input.r#type {
        scope_820.string(var_821.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("ValidFrom");
    if let Some(var_823) = &input.valid_from {
        scope_822.date_time(var_823, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("ValidUntil");
    if let Some(var_825) = &input.valid_until {
        scope_824.date_time(var_825, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_827) = &input.replace_unhealthy_instances {
        scope_826.boolean(*var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_829) = &input.instance_interruption_behavior {
        scope_828.string(var_829.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("LoadBalancersConfig");
    if let Some(var_831) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_830, var_831,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_833) = &input.instance_pools_to_use_count {
        scope_832.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_833).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("Context");
    if let Some(var_835) = &input.context {
        scope_834.string(var_835);
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_837) = &input.target_capacity_unit_type {
        scope_836.string(var_837.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("TagSpecification");
    if let Some(var_839) = &input.tag_specifications {
        let mut list_841 = scope_838.start_list(true, Some("item"));
        for item_840 in var_839 {
            #[allow(unused_mut)]
            let mut entry_842 = list_841.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_842, item_840,
            )?;
        }
        list_841.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("SecurityGroupId");
    if let Some(var_844) = &input.security_group_ids {
        let mut list_846 = scope_843.start_list(true, Some("item"));
        for item_845 in var_844 {
            #[allow(unused_mut)]
            let mut entry_847 = list_846.entry();
            entry_847.string(item_845);
        }
        list_846.finish();
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("SecurityGroup");
    if let Some(var_849) = &input.security_groups {
        let mut list_851 = scope_848.start_list(true, Some("item"));
        for item_850 in var_849 {
            #[allow(unused_mut)]
            let mut entry_852 = list_851.entry();
            entry_852.string(item_850);
        }
        list_851.finish();
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("AddressingType");
    if let Some(var_854) = &input.addressing_type {
        scope_853.string(var_854);
    }
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("BlockDeviceMapping");
    if let Some(var_856) = &input.block_device_mappings {
        let mut list_858 = scope_855.start_list(true, Some("item"));
        for item_857 in var_856 {
            #[allow(unused_mut)]
            let mut entry_859 = list_858.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_859, item_857,
            )?;
        }
        list_858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("EbsOptimized");
    if let Some(var_861) = &input.ebs_optimized {
        scope_860.boolean(*var_861);
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("IamInstanceProfile");
    if let Some(var_863) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_862, var_863,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_864 = writer.prefix("ImageId");
    if let Some(var_865) = &input.image_id {
        scope_864.string(var_865);
    }
    #[allow(unused_mut)]
    let mut scope_866 = writer.prefix("InstanceType");
    if let Some(var_867) = &input.instance_type {
        scope_866.string(var_867.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_868 = writer.prefix("KernelId");
    if let Some(var_869) = &input.kernel_id {
        scope_868.string(var_869);
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("KeyName");
    if let Some(var_871) = &input.key_name {
        scope_870.string(var_871);
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("Monitoring");
    if let Some(var_873) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_872, var_873,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("NetworkInterface");
    if let Some(var_875) = &input.network_interfaces {
        let mut list_877 = scope_874.start_list(true, Some("item"));
        for item_876 in var_875 {
            #[allow(unused_mut)]
            let mut entry_878 = list_877.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_878, item_876)?;
        }
        list_877.finish();
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("Placement");
    if let Some(var_880) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_879, var_880)?;
    }
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("RamdiskId");
    if let Some(var_882) = &input.ramdisk_id {
        scope_881.string(var_882);
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("SubnetId");
    if let Some(var_884) = &input.subnet_id {
        scope_883.string(var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("UserData");
    if let Some(var_886) = &input.user_data {
        scope_885.string(var_886);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("Enabled");
    if let Some(var_888) = &input.enabled {
        scope_887.boolean(*var_888);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("AvailabilityZone");
    if let Some(var_890) = &input.availability_zone {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("Affinity");
    if let Some(var_892) = &input.affinity {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("GroupName");
    if let Some(var_894) = &input.group_name {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("PartitionNumber");
    if let Some(var_896) = &input.partition_number {
        scope_895.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_896).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("HostId");
    if let Some(var_898) = &input.host_id {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("Tenancy");
    if let Some(var_900) = &input.tenancy {
        scope_899.string(var_900.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("SpreadDomain");
    if let Some(var_902) = &input.spread_domain {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("HostResourceGroupArn");
    if let Some(var_904) = &input.host_resource_group_arn {
        scope_903.string(var_904);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_906) = &input.associate_public_ip_address {
        scope_905.boolean(*var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("DeleteOnTermination");
    if let Some(var_908) = &input.delete_on_termination {
        scope_907.boolean(*var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("Description");
    if let Some(var_910) = &input.description {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("DeviceIndex");
    if let Some(var_912) = &input.device_index {
        scope_911.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_912).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("SecurityGroupId");
    if let Some(var_914) = &input.groups {
        let mut list_916 = scope_913.start_list(true, Some("SecurityGroupId"));
        for item_915 in var_914 {
            #[allow(unused_mut)]
            let mut entry_917 = list_916.entry();
            entry_917.string(item_915);
        }
        list_916.finish();
    }
    #[allow(unused_mut)]
    let mut scope_918 = writer.prefix("Ipv6AddressCount");
    if let Some(var_919) = &input.ipv6_address_count {
        scope_918.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_919).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("Ipv6Addresses");
    if let Some(var_921) = &input.ipv6_addresses {
        let mut list_923 = scope_920.start_list(true, Some("item"));
        for item_922 in var_921 {
            #[allow(unused_mut)]
            let mut entry_924 = list_923.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_924, item_922,
            )?;
        }
        list_923.finish();
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("NetworkInterfaceId");
    if let Some(var_926) = &input.network_interface_id {
        scope_925.string(var_926);
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("PrivateIpAddress");
    if let Some(var_928) = &input.private_ip_address {
        scope_927.string(var_928);
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("PrivateIpAddresses");
    if let Some(var_930) = &input.private_ip_addresses {
        let mut list_932 = scope_929.start_list(true, Some("item"));
        for item_931 in var_930 {
            #[allow(unused_mut)]
            let mut entry_933 = list_932.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_933, item_931,
            )?;
        }
        list_932.finish();
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_935) = &input.secondary_private_ip_address_count {
        scope_934.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_935).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_936 = writer.prefix("SubnetId");
    if let Some(var_937) = &input.subnet_id {
        scope_936.string(var_937);
    }
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_939) = &input.associate_carrier_ip_address {
        scope_938.boolean(*var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("InterfaceType");
    if let Some(var_941) = &input.interface_type {
        scope_940.string(var_941);
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("NetworkCardIndex");
    if let Some(var_943) = &input.network_card_index {
        scope_942.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_943).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_944 = writer.prefix("Ipv4Prefix");
    if let Some(var_945) = &input.ipv4_prefixes {
        let mut list_947 = scope_944.start_list(true, Some("item"));
        for item_946 in var_945 {
            #[allow(unused_mut)]
            let mut entry_948 = list_947.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_948, item_946,
            )?;
        }
        list_947.finish();
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_950) = &input.ipv4_prefix_count {
        scope_949.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_950).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("Ipv6Prefix");
    if let Some(var_952) = &input.ipv6_prefixes {
        let mut list_954 = scope_951.start_list(true, Some("item"));
        for item_953 in var_952 {
            #[allow(unused_mut)]
            let mut entry_955 = list_954.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_955, item_953,
            )?;
        }
        list_954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_957) = &input.ipv6_prefix_count {
        scope_956.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_957).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("Type");
    if let Some(var_959) = &input.r#type {
        scope_958.string(var_959);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("Type");
    if let Some(var_961) = &input.r#type {
        scope_960.string(var_961);
    }
    #[allow(unused_mut)]
    let mut scope_962 = writer.prefix("Count");
    if let Some(var_963) = &input.count {
        scope_962.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_963).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_964 = writer.prefix("LaunchTemplateId");
    if let Some(var_965) = &input.launch_template_id {
        scope_964.string(var_965);
    }
    #[allow(unused_mut)]
    let mut scope_966 = writer.prefix("LaunchTemplateName");
    if let Some(var_967) = &input.launch_template_name {
        scope_966.string(var_967);
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Version");
    if let Some(var_969) = &input.version {
        scope_968.string(var_969);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("MarketType");
    if let Some(var_971) = &input.market_type {
        scope_970.string(var_971.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("SpotOptions");
    if let Some(var_973) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_972, var_973)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("CpuCredits");
    if let Some(var_975) = &input.cpu_credits {
        scope_974.string(var_975);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("CoreCount");
    if let Some(var_977) = &input.core_count {
        scope_976.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_977).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("ThreadsPerCore");
    if let Some(var_979) = &input.threads_per_core {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_979).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Configured");
    if let Some(var_981) = &input.configured {
        scope_980.boolean(*var_981);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_983) = &input.license_configuration_arn {
        scope_982.string(var_983);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("HttpTokens");
    if let Some(var_985) = &input.http_tokens {
        scope_984.string(var_985.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_987) = &input.http_put_response_hop_limit {
        scope_986.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_987).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("HttpEndpoint");
    if let Some(var_989) = &input.http_endpoint {
        scope_988.string(var_989.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_991) = &input.http_protocol_ipv6 {
        scope_990.string(var_991.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("Enabled");
    if let Some(var_993) = &input.enabled {
        scope_992.boolean(*var_993);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("HostnameType");
    if let Some(var_995) = &input.hostname_type {
        scope_994.string(var_995.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_997) = &input.enable_resource_name_dns_a_record {
        scope_996.boolean(*var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_999) = &input.enable_resource_name_dns_aaaa_record {
        scope_998.boolean(*var_999);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1001) = &input.block_device_mappings {
        let mut list_1003 = scope_1000.start_list(true, Some("BlockDeviceMapping"));
        for item_1002 in var_1001 {
            #[allow(unused_mut)]
            let mut entry_1004 = list_1003.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1004, item_1002)?;
        }
        list_1003.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("EbsOptimized");
    if let Some(var_1006) = &input.ebs_optimized {
        scope_1005.boolean(*var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("IamInstanceProfile");
    if let Some(var_1008) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_1007, var_1008,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("ImageId");
    if let Some(var_1010) = &input.image_id {
        scope_1009.string(var_1010);
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("InstanceType");
    if let Some(var_1012) = &input.instance_type {
        scope_1011.string(var_1012);
    }
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("KernelId");
    if let Some(var_1014) = &input.kernel_id {
        scope_1013.string(var_1014);
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("KeyName");
    if let Some(var_1016) = &input.key_name {
        scope_1015.string(var_1016);
    }
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("Monitoring");
    if let Some(var_1018) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_1017, var_1018,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("NetworkInterface");
    if let Some(var_1020) = &input.network_interfaces {
        let mut list_1022 = scope_1019.start_list(true, Some("NetworkInterface"));
        for item_1021 in var_1020 {
            #[allow(unused_mut)]
            let mut entry_1023 = list_1022.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1023, item_1021)?;
        }
        list_1022.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("Placement");
    if let Some(var_1025) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_1024, var_1025,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("RamdiskId");
    if let Some(var_1027) = &input.ramdisk_id {
        scope_1026.string(var_1027);
    }
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("SecurityGroupId");
    if let Some(var_1029) = &input.security_group_ids {
        let mut list_1031 = scope_1028.start_list(true, Some("SecurityGroupId"));
        for item_1030 in var_1029 {
            #[allow(unused_mut)]
            let mut entry_1032 = list_1031.entry();
            entry_1032.string(item_1030);
        }
        list_1031.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("SubnetId");
    if let Some(var_1034) = &input.subnet_id {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("UserData");
    if let Some(var_1036) = &input.user_data {
        scope_1035.string(var_1036);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1038) = &input.security_group_rule_id {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("Description");
    if let Some(var_1040) = &input.description {
        scope_1039.string(var_1040);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("CidrIp");
    if let Some(var_1042) = &input.cidr_ip {
        scope_1041.string(var_1042);
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("Description");
    if let Some(var_1044) = &input.description {
        scope_1043.string(var_1044);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("CidrIpv6");
    if let Some(var_1046) = &input.cidr_ipv6 {
        scope_1045.string(var_1046);
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("Description");
    if let Some(var_1048) = &input.description {
        scope_1047.string(var_1048);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("Description");
    if let Some(var_1050) = &input.description {
        scope_1049.string(var_1050);
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("PrefixListId");
    if let Some(var_1052) = &input.prefix_list_id {
        scope_1051.string(var_1052);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Description");
    if let Some(var_1054) = &input.description {
        scope_1053.string(var_1054);
    }
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("GroupId");
    if let Some(var_1056) = &input.group_id {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("GroupName");
    if let Some(var_1058) = &input.group_name {
        scope_1057.string(var_1058);
    }
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("PeeringStatus");
    if let Some(var_1060) = &input.peering_status {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("UserId");
    if let Some(var_1062) = &input.user_id {
        scope_1061.string(var_1062);
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("VpcId");
    if let Some(var_1064) = &input.vpc_id {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1066) = &input.vpc_peering_connection_id {
        scope_1065.string(var_1066);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1068) = &input.aws_access_key_id {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("Bucket");
    if let Some(var_1070) = &input.bucket {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("Prefix");
    if let Some(var_1072) = &input.prefix {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("UploadPolicy");
    if let Some(var_1074) = &input.upload_policy {
        scope_1073.string(&aws_smithy_types::base64::encode(var_1074));
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("UploadPolicySignature");
    if let Some(var_1076) = &input.upload_policy_signature {
        scope_1075.string(var_1076);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("DirectoryId");
    if let Some(var_1078) = &input.directory_id {
        scope_1077.string(var_1078);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1080) = &input.client_root_certificate_chain_arn {
        scope_1079.string(var_1080);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("SAMLProviderArn");
    if let Some(var_1082) = &input.saml_provider_arn {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1084) = &input.self_service_saml_provider_arn {
        scope_1083.string(var_1084);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("CapacityRebalance");
    if let Some(var_1086) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1085, var_1086,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("UsageStrategy");
    if let Some(var_1088) = &input.usage_strategy {
        scope_1087.string(var_1088.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("LaunchTemplateId");
    if let Some(var_1090) = &input.launch_template_id {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("LaunchTemplateName");
    if let Some(var_1092) = &input.launch_template_name {
        scope_1091.string(var_1092);
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("Version");
    if let Some(var_1094) = &input.version {
        scope_1093.string(var_1094);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("InstanceType");
    if let Some(var_1096) = &input.instance_type {
        scope_1095.string(var_1096.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("MaxPrice");
    if let Some(var_1098) = &input.max_price {
        scope_1097.string(var_1098);
    }
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("SubnetId");
    if let Some(var_1100) = &input.subnet_id {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("AvailabilityZone");
    if let Some(var_1102) = &input.availability_zone {
        scope_1101.string(var_1102);
    }
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("WeightedCapacity");
    if let Some(var_1104) = &input.weighted_capacity {
        scope_1103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("Priority");
    if let Some(var_1106) = &input.priority {
        scope_1105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("Placement");
    if let Some(var_1108) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1107, var_1108)?;
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("InstanceRequirements");
    if let Some(var_1110) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1109, var_1110,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("DeleteOnTermination");
    if let Some(var_1112) = &input.delete_on_termination {
        scope_1111.boolean(*var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("Iops");
    if let Some(var_1114) = &input.iops {
        scope_1113.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1114).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("SnapshotId");
    if let Some(var_1116) = &input.snapshot_id {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("VolumeSize");
    if let Some(var_1118) = &input.volume_size {
        scope_1117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("VolumeType");
    if let Some(var_1120) = &input.volume_type {
        scope_1119.string(var_1120.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("KmsKeyId");
    if let Some(var_1122) = &input.kms_key_id {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("Throughput");
    if let Some(var_1124) = &input.throughput {
        scope_1123.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("OutpostArn");
    if let Some(var_1126) = &input.outpost_arn {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("Encrypted");
    if let Some(var_1128) = &input.encrypted {
        scope_1127.boolean(*var_1128);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("Arn");
    if let Some(var_1130) = &input.arn {
        scope_1129.string(var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("Name");
    if let Some(var_1132) = &input.name {
        scope_1131.string(var_1132);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("DeviceName");
    if let Some(var_1134) = &input.device_name {
        scope_1133.string(var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("VirtualName");
    if let Some(var_1136) = &input.virtual_name {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("Ebs");
    if let Some(var_1138) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1137, var_1138,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("NoDevice");
    if let Some(var_1140) = &input.no_device {
        scope_1139.string(var_1140);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1142) = &input.associate_carrier_ip_address {
        scope_1141.boolean(*var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1144) = &input.associate_public_ip_address {
        scope_1143.boolean(*var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("DeleteOnTermination");
    if let Some(var_1146) = &input.delete_on_termination {
        scope_1145.boolean(*var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("Description");
    if let Some(var_1148) = &input.description {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("DeviceIndex");
    if let Some(var_1150) = &input.device_index {
        scope_1149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1150).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("SecurityGroupId");
    if let Some(var_1152) = &input.groups {
        let mut list_1154 = scope_1151.start_list(true, Some("SecurityGroupId"));
        for item_1153 in var_1152 {
            #[allow(unused_mut)]
            let mut entry_1155 = list_1154.entry();
            entry_1155.string(item_1153);
        }
        list_1154.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("InterfaceType");
    if let Some(var_1157) = &input.interface_type {
        scope_1156.string(var_1157);
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1159) = &input.ipv6_address_count {
        scope_1158.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1159).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1160 = writer.prefix("Ipv6Addresses");
    if let Some(var_1161) = &input.ipv6_addresses {
        let mut list_1163 = scope_1160.start_list(true, Some("InstanceIpv6Address"));
        for item_1162 in var_1161 {
            #[allow(unused_mut)]
            let mut entry_1164 = list_1163.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1164, item_1162,
            )?;
        }
        list_1163.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1166) = &input.network_interface_id {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("PrivateIpAddress");
    if let Some(var_1168) = &input.private_ip_address {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1170) = &input.private_ip_addresses {
        let mut list_1172 = scope_1169.start_list(true, Some("item"));
        for item_1171 in var_1170 {
            #[allow(unused_mut)]
            let mut entry_1173 = list_1172.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1173, item_1171,
            )?;
        }
        list_1172.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1175) = &input.secondary_private_ip_address_count {
        scope_1174.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1175).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("SubnetId");
    if let Some(var_1177) = &input.subnet_id {
        scope_1176.string(var_1177);
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("NetworkCardIndex");
    if let Some(var_1179) = &input.network_card_index {
        scope_1178.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1179).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("Ipv4Prefix");
    if let Some(var_1181) = &input.ipv4_prefixes {
        let mut list_1183 = scope_1180.start_list(true, Some("item"));
        for item_1182 in var_1181 {
            #[allow(unused_mut)]
            let mut entry_1184 = list_1183.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1184, item_1182,
            )?;
        }
        list_1183.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1186) = &input.ipv4_prefix_count {
        scope_1185.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1186).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("Ipv6Prefix");
    if let Some(var_1188) = &input.ipv6_prefixes {
        let mut list_1190 = scope_1187.start_list(true, Some("item"));
        for item_1189 in var_1188 {
            #[allow(unused_mut)]
            let mut entry_1191 = list_1190.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1191, item_1189,
            )?;
        }
        list_1190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1193) = &input.ipv6_prefix_count {
        scope_1192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1193).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("Enabled");
    if let Some(var_1195) = &input.enabled {
        scope_1194.boolean(*var_1195);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("AvailabilityZone");
    if let Some(var_1197) = &input.availability_zone {
        scope_1196.string(var_1197);
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("Affinity");
    if let Some(var_1199) = &input.affinity {
        scope_1198.string(var_1199);
    }
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("GroupName");
    if let Some(var_1201) = &input.group_name {
        scope_1200.string(var_1201);
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("HostId");
    if let Some(var_1203) = &input.host_id {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("Tenancy");
    if let Some(var_1205) = &input.tenancy {
        scope_1204.string(var_1205.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("SpreadDomain");
    if let Some(var_1207) = &input.spread_domain {
        scope_1206.string(var_1207);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1209) = &input.host_resource_group_arn {
        scope_1208.string(var_1209);
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("PartitionNumber");
    if let Some(var_1211) = &input.partition_number {
        scope_1210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1211).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("ResourceType");
    if let Some(var_1213) = &input.resource_type {
        scope_1212.string(var_1213.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("Tag");
    if let Some(var_1215) = &input.tags {
        let mut list_1217 = scope_1214.start_list(true, Some("item"));
        for item_1216 in var_1215 {
            #[allow(unused_mut)]
            let mut entry_1218 = list_1217.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1218, item_1216)?;
        }
        list_1217.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("Type");
    if let Some(var_1220) = &input.r#type {
        scope_1219.string(var_1220);
    }
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("Count");
    if let Some(var_1222) = &input.count {
        scope_1221.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1222).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("MarketType");
    if let Some(var_1224) = &input.market_type {
        scope_1223.string(var_1224.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("SpotOptions");
    if let Some(var_1226) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1225, var_1226)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("CoreCount");
    if let Some(var_1228) = &input.core_count {
        scope_1227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1228).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("ThreadsPerCore");
    if let Some(var_1230) = &input.threads_per_core {
        scope_1229.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1230).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1232) = &input.capacity_reservation_preference {
        scope_1231.string(var_1232.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1234) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1233, var_1234,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1236) = &input.license_configuration_arn {
        scope_1235.string(var_1236);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("Configured");
    if let Some(var_1238) = &input.configured {
        scope_1237.boolean(*var_1238);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("HttpTokens");
    if let Some(var_1240) = &input.http_tokens {
        scope_1239.string(var_1240.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1242) = &input.http_put_response_hop_limit {
        scope_1241.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1242).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("HttpEndpoint");
    if let Some(var_1244) = &input.http_endpoint {
        scope_1243.string(var_1244.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1246) = &input.http_protocol_ipv6 {
        scope_1245.string(var_1246.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("Enabled");
    if let Some(var_1248) = &input.enabled {
        scope_1247.boolean(*var_1248);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("HostnameType");
    if let Some(var_1250) = &input.hostname_type {
        scope_1249.string(var_1250.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1252) = &input.enable_resource_name_dns_a_record {
        scope_1251.boolean(*var_1252);
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1254) = &input.enable_resource_name_dns_aaaa_record {
        scope_1253.boolean(*var_1254);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PathStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1256) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(
            scope_1255, var_1256,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("ResourceStatement");
    if let Some(var_1258) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1257, var_1258,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ThroughResourcesStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("ResourceStatement");
    if let Some(var_1260) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1259, var_1260,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1262) = &input.tunnel_inside_cidr {
        scope_1261.string(var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1264) = &input.tunnel_inside_ipv6_cidr {
        scope_1263.string(var_1264);
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("PreSharedKey");
    if let Some(var_1266) = &input.pre_shared_key {
        scope_1265.string(var_1266);
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1268) = &input.phase1_lifetime_seconds {
        scope_1267.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1268).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1270) = &input.phase2_lifetime_seconds {
        scope_1269.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1272) = &input.rekey_margin_time_seconds {
        scope_1271.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1272).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1274) = &input.rekey_fuzz_percentage {
        scope_1273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("ReplayWindowSize");
    if let Some(var_1276) = &input.replay_window_size {
        scope_1275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1276).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1278) = &input.dpd_timeout_seconds {
        scope_1277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1280) = &input.dpd_timeout_action {
        scope_1279.string(var_1280);
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1282) = &input.phase1_encryption_algorithms {
        let mut list_1284 = scope_1281.start_list(true, Some("item"));
        for item_1283 in var_1282 {
            #[allow(unused_mut)]
            let mut entry_1285 = list_1284.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1285, item_1283)?;
        }
        list_1284.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1287) = &input.phase2_encryption_algorithms {
        let mut list_1289 = scope_1286.start_list(true, Some("item"));
        for item_1288 in var_1287 {
            #[allow(unused_mut)]
            let mut entry_1290 = list_1289.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1290, item_1288)?;
        }
        list_1289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1292) = &input.phase1_integrity_algorithms {
        let mut list_1294 = scope_1291.start_list(true, Some("item"));
        for item_1293 in var_1292 {
            #[allow(unused_mut)]
            let mut entry_1295 = list_1294.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1295, item_1293)?;
        }
        list_1294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1296 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1297) = &input.phase2_integrity_algorithms {
        let mut list_1299 = scope_1296.start_list(true, Some("item"));
        for item_1298 in var_1297 {
            #[allow(unused_mut)]
            let mut entry_1300 = list_1299.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1300, item_1298)?;
        }
        list_1299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1302) = &input.phase1_dh_group_numbers {
        let mut list_1304 = scope_1301.start_list(true, Some("item"));
        for item_1303 in var_1302 {
            #[allow(unused_mut)]
            let mut entry_1305 = list_1304.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1305, item_1303)?;
        }
        list_1304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1306 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1307) = &input.phase2_dh_group_numbers {
        let mut list_1309 = scope_1306.start_list(true, Some("item"));
        for item_1308 in var_1307 {
            #[allow(unused_mut)]
            let mut entry_1310 = list_1309.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1310, item_1308)?;
        }
        list_1309.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("IKEVersion");
    if let Some(var_1312) = &input.ike_versions {
        let mut list_1314 = scope_1311.start_list(true, Some("item"));
        for item_1313 in var_1312 {
            #[allow(unused_mut)]
            let mut entry_1315 = list_1314.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1315, item_1313,
            )?;
        }
        list_1314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1316 = writer.prefix("StartupAction");
    if let Some(var_1317) = &input.startup_action {
        scope_1316.string(var_1317);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1318 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1319) = &input.integration_result_s3_destination_arn {
        scope_1318.string(var_1319);
    }
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1321) = &input.partition_load_frequency {
        scope_1320.string(var_1321.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("PartitionStartDate");
    if let Some(var_1323) = &input.partition_start_date {
        scope_1322.date_time(var_1323, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1324 = writer.prefix("PartitionEndDate");
    if let Some(var_1325) = &input.partition_end_date {
        scope_1324.date_time(var_1325, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1326 = writer.prefix("Min");
    if let Some(var_1327) = &input.min {
        scope_1326.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1327).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("Max");
    if let Some(var_1329) = &input.max {
        scope_1328.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1329).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1330 = writer.prefix("Min");
    if let Some(var_1331) = &input.min {
        scope_1330.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1331).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("Max");
    if let Some(var_1333) = &input.max {
        scope_1332.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1333).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("Min");
    if let Some(var_1335) = &input.min {
        scope_1334.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1335).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("Max");
    if let Some(var_1337) = &input.max {
        scope_1336.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1337).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("Min");
    if let Some(var_1339) = &input.min {
        scope_1338.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1339).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("Max");
    if let Some(var_1341) = &input.max {
        scope_1340.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1341).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("Min");
    if let Some(var_1343) = &input.min {
        scope_1342.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Max");
    if let Some(var_1345) = &input.max {
        scope_1344.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1345).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Min");
    if let Some(var_1347) = &input.min {
        scope_1346.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Max");
    if let Some(var_1349) = &input.max {
        scope_1348.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1349).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Min");
    if let Some(var_1351) = &input.min {
        scope_1350.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1351).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Max");
    if let Some(var_1353) = &input.max {
        scope_1352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1353).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Min");
    if let Some(var_1355) = &input.min {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("Max");
    if let Some(var_1357) = &input.max {
        scope_1356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1357).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("S3Bucket");
    if let Some(var_1359) = &input.s3_bucket {
        scope_1358.string(var_1359);
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("S3Key");
    if let Some(var_1361) = &input.s3_key {
        scope_1360.string(var_1361);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Data");
    if let Some(var_1363) = &input.data {
        scope_1362.string(var_1363);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Group");
    if let Some(var_1365) = &input.group {
        scope_1364.string(var_1365.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("UserId");
    if let Some(var_1367) = &input.user_id {
        scope_1366.string(var_1367);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Group");
    if let Some(var_1369) = &input.group {
        scope_1368.string(var_1369.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("UserId");
    if let Some(var_1371) = &input.user_id {
        scope_1370.string(var_1371);
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("OrganizationArn");
    if let Some(var_1373) = &input.organization_arn {
        scope_1372.string(var_1373);
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1375) = &input.organizational_unit_arn {
        scope_1374.string(var_1375);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("DeleteOnTermination");
    if let Some(var_1377) = &input.delete_on_termination {
        scope_1376.boolean(*var_1377);
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("VolumeId");
    if let Some(var_1379) = &input.volume_id {
        scope_1378.string(var_1379);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("CapacityReservationId");
    if let Some(var_1381) = &input.capacity_reservation_id {
        scope_1380.string(var_1381);
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1383) = &input.capacity_reservation_resource_group_arn {
        scope_1382.string(var_1383);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("IpProtocol");
    if let Some(var_1385) = &input.ip_protocol {
        scope_1384.string(var_1385);
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("FromPort");
    if let Some(var_1387) = &input.from_port {
        scope_1386.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1387).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("ToPort");
    if let Some(var_1389) = &input.to_port {
        scope_1388.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1389).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("CidrIpv4");
    if let Some(var_1391) = &input.cidr_ipv4 {
        scope_1390.string(var_1391);
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("CidrIpv6");
    if let Some(var_1393) = &input.cidr_ipv6 {
        scope_1392.string(var_1393);
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("PrefixListId");
    if let Some(var_1395) = &input.prefix_list_id {
        scope_1394.string(var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("ReferencedGroupId");
    if let Some(var_1397) = &input.referenced_group_id {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("Description");
    if let Some(var_1399) = &input.description {
        scope_1398.string(var_1399);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("Group");
    if let Some(var_1401) = &input.group {
        scope_1400.string(var_1401.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("UserId");
    if let Some(var_1403) = &input.user_id {
        scope_1402.string(var_1403);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("LaunchTemplateId");
    if let Some(var_1405) = &input.launch_template_id {
        scope_1404.string(var_1405);
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("LaunchTemplateName");
    if let Some(var_1407) = &input.launch_template_name {
        scope_1406.string(var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("Version");
    if let Some(var_1409) = &input.version {
        scope_1408.string(var_1409);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("InstanceType");
    if let Some(var_1411) = &input.instance_type {
        scope_1410.string(var_1411.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("SpotPrice");
    if let Some(var_1413) = &input.spot_price {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("SubnetId");
    if let Some(var_1415) = &input.subnet_id {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("AvailabilityZone");
    if let Some(var_1417) = &input.availability_zone {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("WeightedCapacity");
    if let Some(var_1419) = &input.weighted_capacity {
        scope_1418.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1419).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("Priority");
    if let Some(var_1421) = &input.priority {
        scope_1420.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1421).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("InstanceRequirements");
    if let Some(var_1423) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1422, var_1423,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("Value");
    if let Some(var_1425) = &input.value {
        scope_1424.string(var_1425);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("Value");
    if let Some(var_1427) = &input.value {
        scope_1426.string(var_1427);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("Value");
    if let Some(var_1429) = &input.value {
        scope_1428.string(var_1429);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("Value");
    if let Some(var_1431) = &input.value {
        scope_1430.string(var_1431);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("Value");
    if let Some(var_1433) = &input.value {
        scope_1432.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1433).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("Value");
    if let Some(var_1435) = &input.value {
        scope_1434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1435).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("Value");
    if let Some(var_1437) = &input.value {
        scope_1436.string(var_1437);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("CapacityRebalance");
    if let Some(var_1439) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1438, var_1439,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("GroupSet");
    if let Some(var_1441) = &input.security_groups {
        let mut list_1443 = scope_1440.start_list(true, Some("item"));
        for item_1442 in var_1441 {
            #[allow(unused_mut)]
            let mut entry_1444 = list_1443.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1444, item_1442,
            )?;
        }
        list_1443.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1445 = writer.prefix("AddressingType");
    if let Some(var_1446) = &input.addressing_type {
        scope_1445.string(var_1446);
    }
    #[allow(unused_mut)]
    let mut scope_1447 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1448) = &input.block_device_mappings {
        let mut list_1450 = scope_1447.start_list(true, Some("item"));
        for item_1449 in var_1448 {
            #[allow(unused_mut)]
            let mut entry_1451 = list_1450.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1451, item_1449,
            )?;
        }
        list_1450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("EbsOptimized");
    if let Some(var_1453) = &input.ebs_optimized {
        scope_1452.boolean(*var_1453);
    }
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("IamInstanceProfile");
    if let Some(var_1455) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1454, var_1455,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("ImageId");
    if let Some(var_1457) = &input.image_id {
        scope_1456.string(var_1457);
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("InstanceType");
    if let Some(var_1459) = &input.instance_type {
        scope_1458.string(var_1459.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("KernelId");
    if let Some(var_1461) = &input.kernel_id {
        scope_1460.string(var_1461);
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("KeyName");
    if let Some(var_1463) = &input.key_name {
        scope_1462.string(var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("Monitoring");
    if let Some(var_1465) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1464, var_1465,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1467) = &input.network_interfaces {
        let mut list_1469 = scope_1466.start_list(true, Some("item"));
        for item_1468 in var_1467 {
            #[allow(unused_mut)]
            let mut entry_1470 = list_1469.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1470, item_1468)?;
        }
        list_1469.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("Placement");
    if let Some(var_1472) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1471, var_1472)?;
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("RamdiskId");
    if let Some(var_1474) = &input.ramdisk_id {
        scope_1473.string(var_1474);
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("SpotPrice");
    if let Some(var_1476) = &input.spot_price {
        scope_1475.string(var_1476);
    }
    #[allow(unused_mut)]
    let mut scope_1477 = writer.prefix("SubnetId");
    if let Some(var_1478) = &input.subnet_id {
        scope_1477.string(var_1478);
    }
    #[allow(unused_mut)]
    let mut scope_1479 = writer.prefix("UserData");
    if let Some(var_1480) = &input.user_data {
        scope_1479.string(var_1480);
    }
    #[allow(unused_mut)]
    let mut scope_1481 = writer.prefix("WeightedCapacity");
    if let Some(var_1482) = &input.weighted_capacity {
        scope_1481.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1482).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1483 = writer.prefix("TagSpecificationSet");
    if let Some(var_1484) = &input.tag_specifications {
        let mut list_1486 = scope_1483.start_list(true, Some("item"));
        for item_1485 in var_1484 {
            #[allow(unused_mut)]
            let mut entry_1487 = list_1486.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1487, item_1485,
            )?;
        }
        list_1486.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("InstanceRequirements");
    if let Some(var_1489) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1488, var_1489,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1491) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1490, var_1491,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1493) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1492, var_1493,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("AvailabilityZone");
    if let Some(var_1495) = &input.availability_zone {
        scope_1494.string(var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("GroupName");
    if let Some(var_1497) = &input.group_name {
        scope_1496.string(var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("Tenancy");
    if let Some(var_1499) = &input.tenancy {
        scope_1498.string(var_1499.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1500 = writer.prefix("MaxPrice");
    if let Some(var_1501) = &input.max_price {
        scope_1500.string(var_1501);
    }
    #[allow(unused_mut)]
    let mut scope_1502 = writer.prefix("SpotInstanceType");
    if let Some(var_1503) = &input.spot_instance_type {
        scope_1502.string(var_1503.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1505) = &input.block_duration_minutes {
        scope_1504.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1505).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("ValidUntil");
    if let Some(var_1507) = &input.valid_until {
        scope_1506.date_time(var_1507, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1509) = &input.instance_interruption_behavior {
        scope_1508.string(var_1509.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("DeviceName");
    if let Some(var_1511) = &input.device_name {
        scope_1510.string(var_1511);
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("Ebs");
    if let Some(var_1513) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1512, var_1513,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("NoDevice");
    if let Some(var_1515) = &input.no_device {
        scope_1514.string(var_1515);
    }
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("VirtualName");
    if let Some(var_1517) = &input.virtual_name {
        scope_1516.string(var_1517);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("Arn");
    if let Some(var_1519) = &input.arn {
        scope_1518.string(var_1519);
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("Name");
    if let Some(var_1521) = &input.name {
        scope_1520.string(var_1521);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("Enabled");
    if let Some(var_1523) = &input.enabled {
        scope_1522.boolean(*var_1523);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1525) = &input.associate_public_ip_address {
        scope_1524.boolean(*var_1525);
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("DeleteOnTermination");
    if let Some(var_1527) = &input.delete_on_termination {
        scope_1526.boolean(*var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("Description");
    if let Some(var_1529) = &input.description {
        scope_1528.string(var_1529);
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("DeviceIndex");
    if let Some(var_1531) = &input.device_index {
        scope_1530.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1531).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("Group");
    if let Some(var_1533) = &input.groups {
        let mut list_1535 = scope_1532.start_list(true, Some("SecurityGroupId"));
        for item_1534 in var_1533 {
            #[allow(unused_mut)]
            let mut entry_1536 = list_1535.entry();
            entry_1536.string(item_1534);
        }
        list_1535.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1537 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1538) = &input.ipv6_address_count {
        scope_1537.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1538).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1539 = writer.prefix("Ipv6Address");
    if let Some(var_1540) = &input.ipv6_addresses {
        let mut list_1542 = scope_1539.start_list(true, Some("Ipv6Address"));
        for item_1541 in var_1540 {
            #[allow(unused_mut)]
            let mut entry_1543 = list_1542.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1543, item_1541,
            )?;
        }
        list_1542.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1545) = &input.network_interface_id {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("PrivateIpAddress");
    if let Some(var_1547) = &input.private_ip_address {
        scope_1546.string(var_1547);
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1549) = &input.private_ip_address_configs {
        let mut list_1551 = scope_1548.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1550 in var_1549 {
            #[allow(unused_mut)]
            let mut entry_1552 = list_1551.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1552, item_1550)?;
        }
        list_1551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1554) = &input.secondary_private_ip_address_count {
        scope_1553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("SubnetId");
    if let Some(var_1556) = &input.subnet_id {
        scope_1555.string(var_1556);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("AvailabilityZone");
    if let Some(var_1558) = &input.availability_zone {
        scope_1557.string(var_1558);
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("GroupName");
    if let Some(var_1560) = &input.group_name {
        scope_1559.string(var_1560);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("ReplacementStrategy");
    if let Some(var_1562) = &input.replacement_strategy {
        scope_1561.string(var_1562.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("TerminationDelay");
    if let Some(var_1564) = &input.termination_delay {
        scope_1563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1564).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("Encrypted");
    if let Some(var_1566) = &input.encrypted {
        scope_1565.boolean(*var_1566);
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("DeleteOnTermination");
    if let Some(var_1568) = &input.delete_on_termination {
        scope_1567.boolean(*var_1568);
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("Iops");
    if let Some(var_1570) = &input.iops {
        scope_1569.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1570).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("KmsKeyId");
    if let Some(var_1572) = &input.kms_key_id {
        scope_1571.string(var_1572);
    }
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("SnapshotId");
    if let Some(var_1574) = &input.snapshot_id {
        scope_1573.string(var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("VolumeSize");
    if let Some(var_1576) = &input.volume_size {
        scope_1575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1576).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("VolumeType");
    if let Some(var_1578) = &input.volume_type {
        scope_1577.string(var_1578.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("Throughput");
    if let Some(var_1580) = &input.throughput {
        scope_1579.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1580).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("Ipv6Address");
    if let Some(var_1582) = &input.ipv6_address {
        scope_1581.string(var_1582);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("MaxPrice");
    if let Some(var_1584) = &input.max_price {
        scope_1583.string(var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("SpotInstanceType");
    if let Some(var_1586) = &input.spot_instance_type {
        scope_1585.string(var_1586.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1588) = &input.block_duration_minutes {
        scope_1587.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1588).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("ValidUntil");
    if let Some(var_1590) = &input.valid_until {
        scope_1589.date_time(var_1590, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1592) = &input.instance_interruption_behavior {
        scope_1591.string(var_1592.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PacketHeaderStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("SourceAddress");
    if let Some(var_1594) = &input.source_addresses {
        let mut list_1596 = scope_1593.start_list(true, Some("item"));
        for item_1595 in var_1594 {
            #[allow(unused_mut)]
            let mut entry_1597 = list_1596.entry();
            entry_1597.string(item_1595);
        }
        list_1596.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("DestinationAddress");
    if let Some(var_1599) = &input.destination_addresses {
        let mut list_1601 = scope_1598.start_list(true, Some("item"));
        for item_1600 in var_1599 {
            #[allow(unused_mut)]
            let mut entry_1602 = list_1601.entry();
            entry_1602.string(item_1600);
        }
        list_1601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("SourcePort");
    if let Some(var_1604) = &input.source_ports {
        let mut list_1606 = scope_1603.start_list(true, Some("item"));
        for item_1605 in var_1604 {
            #[allow(unused_mut)]
            let mut entry_1607 = list_1606.entry();
            entry_1607.string(item_1605);
        }
        list_1606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("DestinationPort");
    if let Some(var_1609) = &input.destination_ports {
        let mut list_1611 = scope_1608.start_list(true, Some("item"));
        for item_1610 in var_1609 {
            #[allow(unused_mut)]
            let mut entry_1612 = list_1611.entry();
            entry_1612.string(item_1610);
        }
        list_1611.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("SourcePrefixList");
    if let Some(var_1614) = &input.source_prefix_lists {
        let mut list_1616 = scope_1613.start_list(true, Some("item"));
        for item_1615 in var_1614 {
            #[allow(unused_mut)]
            let mut entry_1617 = list_1616.entry();
            entry_1617.string(item_1615);
        }
        list_1616.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1618 = writer.prefix("DestinationPrefixList");
    if let Some(var_1619) = &input.destination_prefix_lists {
        let mut list_1621 = scope_1618.start_list(true, Some("item"));
        for item_1620 in var_1619 {
            #[allow(unused_mut)]
            let mut entry_1622 = list_1621.entry();
            entry_1622.string(item_1620);
        }
        list_1621.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1623 = writer.prefix("Protocol");
    if let Some(var_1624) = &input.protocols {
        let mut list_1626 = scope_1623.start_list(true, Some("item"));
        for item_1625 in var_1624 {
            #[allow(unused_mut)]
            let mut entry_1627 = list_1626.entry();
            entry_1627.string(item_1625.as_str());
        }
        list_1626.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ResourceStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1628 = writer.prefix("Resource");
    if let Some(var_1629) = &input.resources {
        let mut list_1631 = scope_1628.start_list(true, Some("item"));
        for item_1630 in var_1629 {
            #[allow(unused_mut)]
            let mut entry_1632 = list_1631.entry();
            entry_1632.string(item_1630);
        }
        list_1631.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1633 = writer.prefix("ResourceType");
    if let Some(var_1634) = &input.resource_types {
        let mut list_1636 = scope_1633.start_list(true, Some("item"));
        for item_1635 in var_1634 {
            #[allow(unused_mut)]
            let mut entry_1637 = list_1636.entry();
            entry_1637.string(item_1635);
        }
        list_1636.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1638 = writer.prefix("VCpuCount");
    if let Some(var_1639) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1638, var_1639)?;
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("MemoryMiB");
    if let Some(var_1641) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1640, var_1641)?;
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1643) = &input.cpu_manufacturers {
        let mut list_1645 = scope_1642.start_list(true, Some("item"));
        for item_1644 in var_1643 {
            #[allow(unused_mut)]
            let mut entry_1646 = list_1645.entry();
            entry_1646.string(item_1644.as_str());
        }
        list_1645.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1647 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1648) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1647, var_1648,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1650) = &input.excluded_instance_types {
        let mut list_1652 = scope_1649.start_list(true, Some("item"));
        for item_1651 in var_1650 {
            #[allow(unused_mut)]
            let mut entry_1653 = list_1652.entry();
            entry_1653.string(item_1651);
        }
        list_1652.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1655) = &input.instance_generations {
        let mut list_1657 = scope_1654.start_list(true, Some("item"));
        for item_1656 in var_1655 {
            #[allow(unused_mut)]
            let mut entry_1658 = list_1657.entry();
            entry_1658.string(item_1656.as_str());
        }
        list_1657.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1660) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1659.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1660).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1662) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1661.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1662).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("BareMetal");
    if let Some(var_1664) = &input.bare_metal {
        scope_1663.string(var_1664.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("BurstablePerformance");
    if let Some(var_1666) = &input.burstable_performance {
        scope_1665.string(var_1666.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1668) = &input.require_hibernate_support {
        scope_1667.boolean(*var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1670) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1669, var_1670,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("LocalStorage");
    if let Some(var_1672) = &input.local_storage {
        scope_1671.string(var_1672.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1674) = &input.local_storage_types {
        let mut list_1676 = scope_1673.start_list(true, Some("item"));
        for item_1675 in var_1674 {
            #[allow(unused_mut)]
            let mut entry_1677 = list_1676.entry();
            entry_1677.string(item_1675.as_str());
        }
        list_1676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1679) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1678, var_1679,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1681) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1680, var_1681,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1683) = &input.accelerator_types {
        let mut list_1685 = scope_1682.start_list(true, Some("item"));
        for item_1684 in var_1683 {
            #[allow(unused_mut)]
            let mut entry_1686 = list_1685.entry();
            entry_1686.string(item_1684.as_str());
        }
        list_1685.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("AcceleratorCount");
    if let Some(var_1688) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1687, var_1688)?;
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1690) = &input.accelerator_manufacturers {
        let mut list_1692 = scope_1689.start_list(true, Some("item"));
        for item_1691 in var_1690 {
            #[allow(unused_mut)]
            let mut entry_1693 = list_1692.entry();
            entry_1693.string(item_1691.as_str());
        }
        list_1692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1695) = &input.accelerator_names {
        let mut list_1697 = scope_1694.start_list(true, Some("item"));
        for item_1696 in var_1695 {
            #[allow(unused_mut)]
            let mut entry_1698 = list_1697.entry();
            entry_1698.string(item_1696.as_str());
        }
        list_1697.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1699 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1700) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1699, var_1700,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("ReplacementStrategy");
    if let Some(var_1702) = &input.replacement_strategy {
        scope_1701.string(var_1702.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("TerminationDelay");
    if let Some(var_1704) = &input.termination_delay {
        scope_1703.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1704).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("GroupName");
    if let Some(var_1706) = &input.group_name {
        scope_1705.string(var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("GroupId");
    if let Some(var_1708) = &input.group_id {
        scope_1707.string(var_1708);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("Enabled");
    if let Some(var_1710) = &input.enabled {
        scope_1709.boolean(*var_1710);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("ResourceType");
    if let Some(var_1712) = &input.resource_type {
        scope_1711.string(var_1712.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1713 = writer.prefix("Tag");
    if let Some(var_1714) = &input.tags {
        let mut list_1716 = scope_1713.start_list(true, Some("item"));
        for item_1715 in var_1714 {
            #[allow(unused_mut)]
            let mut entry_1717 = list_1716.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1717, item_1715)?;
        }
        list_1716.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1719) = &input.classic_load_balancers {
        let mut list_1721 = scope_1718.start_list(true, Some("item"));
        for item_1720 in var_1719 {
            #[allow(unused_mut)]
            let mut entry_1722 = list_1721.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1722, item_1720,
            )?;
        }
        list_1721.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("TargetGroups");
    if let Some(var_1724) = &input.target_groups {
        let mut list_1726 = scope_1723.start_list(true, Some("item"));
        for item_1725 in var_1724 {
            #[allow(unused_mut)]
            let mut entry_1727 = list_1726.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1727, item_1725)?;
        }
        list_1726.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("DeleteOnTermination");
    if let Some(var_1729) = &input.delete_on_termination {
        scope_1728.boolean(*var_1729);
    }
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("Encrypted");
    if let Some(var_1731) = &input.encrypted {
        scope_1730.boolean(*var_1731);
    }
    #[allow(unused_mut)]
    let mut scope_1732 = writer.prefix("Iops");
    if let Some(var_1733) = &input.iops {
        scope_1732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1734 = writer.prefix("SnapshotId");
    if let Some(var_1735) = &input.snapshot_id {
        scope_1734.string(var_1735);
    }
    #[allow(unused_mut)]
    let mut scope_1736 = writer.prefix("VolumeSize");
    if let Some(var_1737) = &input.volume_size {
        scope_1736.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1737).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1738 = writer.prefix("VolumeType");
    if let Some(var_1739) = &input.volume_type {
        scope_1738.string(var_1739);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("Ipv6Address");
    if let Some(var_1741) = &input.ipv6_address {
        scope_1740.string(var_1741);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("Primary");
    if let Some(var_1743) = &input.primary {
        scope_1742.boolean(*var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("PrivateIpAddress");
    if let Some(var_1745) = &input.private_ip_address {
        scope_1744.string(var_1745);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("Min");
    if let Some(var_1747) = &input.min {
        scope_1746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("Max");
    if let Some(var_1749) = &input.max {
        scope_1748.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1749).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("Min");
    if let Some(var_1751) = &input.min {
        scope_1750.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1751).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("Max");
    if let Some(var_1753) = &input.max {
        scope_1752.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1753).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("Min");
    if let Some(var_1755) = &input.min {
        scope_1754.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1755).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("Max");
    if let Some(var_1757) = &input.max {
        scope_1756.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1757).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("Min");
    if let Some(var_1759) = &input.min {
        scope_1758.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1759).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("Max");
    if let Some(var_1761) = &input.max {
        scope_1760.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1761).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("Min");
    if let Some(var_1763) = &input.min {
        scope_1762.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1763).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("Max");
    if let Some(var_1765) = &input.max {
        scope_1764.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1765).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("Min");
    if let Some(var_1767) = &input.min {
        scope_1766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1767).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("Max");
    if let Some(var_1769) = &input.max {
        scope_1768.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1769).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("Min");
    if let Some(var_1771) = &input.min {
        scope_1770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1771).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("Max");
    if let Some(var_1773) = &input.max {
        scope_1772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1773).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("Min");
    if let Some(var_1775) = &input.min {
        scope_1774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("Max");
    if let Some(var_1777) = &input.max {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Name");
    if let Some(var_1779) = &input.name {
        scope_1778.string(var_1779);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("Arn");
    if let Some(var_1781) = &input.arn {
        scope_1780.string(var_1781);
    }
    Ok(())
}
