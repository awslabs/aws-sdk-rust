// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_login_banner_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientLoginBannerOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("BannerText");
    if let Some(var_94) = &input.banner_text {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Key");
    if let Some(var_96) = &input.key {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Value");
    if let Some(var_98) = &input.values {
        let mut list_100 = scope_97.start_list(true, Some("item"));
        for item_99 in var_98 {
            #[allow(unused_mut)]
            let mut entry_101 = list_100.entry();
            entry_101.string(item_99);
        }
        list_100.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("AllocationStrategy");
    if let Some(var_103) = &input.allocation_strategy {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("MaintenanceStrategies");
    if let Some(var_105) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_104, var_105)?;
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_107) = &input.instance_interruption_behavior {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_109) = &input.instance_pools_to_use_count {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SingleInstanceType");
    if let Some(var_111) = &input.single_instance_type {
        scope_110.boolean(*var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_113) = &input.single_availability_zone {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("MinTargetCapacity");
    if let Some(var_115) = &input.min_target_capacity {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("MaxTotalPrice");
    if let Some(var_117) = &input.max_total_price {
        scope_116.string(var_117);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("AllocationStrategy");
    if let Some(var_119) = &input.allocation_strategy {
        scope_118.string(var_119.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("CapacityReservationOptions");
    if let Some(var_121) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_120, var_121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("SingleInstanceType");
    if let Some(var_123) = &input.single_instance_type {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_125) = &input.single_availability_zone {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("MinTargetCapacity");
    if let Some(var_127) = &input.min_target_capacity {
        scope_126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("MaxTotalPrice");
    if let Some(var_129) = &input.max_total_price {
        scope_128.string(var_129);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_131) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_130, var_131)?;
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Overrides");
    if let Some(var_133) = &input.overrides {
        let mut list_135 = scope_132.start_list(true, Some("item"));
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_136, item_134)?;
        }
        list_135.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("TotalTargetCapacity");
    if let Some(var_138) = &input.total_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_140) = &input.on_demand_target_capacity {
        scope_139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("SpotTargetCapacity");
    if let Some(var_142) = &input.spot_target_capacity {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_144) = &input.default_target_capacity_type {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_146) = &input.target_capacity_unit_type {
        scope_145.string(var_146.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("FileFormat");
    if let Some(var_148) = &input.file_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_150) = &input.hive_compatible_partitions {
        scope_149.boolean(*var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("PerHourPartition");
    if let Some(var_152) = &input.per_hour_partition {
        scope_151.boolean(*var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Bucket");
    if let Some(var_154) = &input.bucket {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Key");
    if let Some(var_156) = &input.key {
        scope_155.string(var_156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DeviceName");
    if let Some(var_158) = &input.device_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("VirtualName");
    if let Some(var_160) = &input.virtual_name {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Ebs");
    if let Some(var_162) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_161, var_162)?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("NoDevice");
    if let Some(var_164) = &input.no_device {
        scope_163.string(var_164);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("StartWeekDay");
    if let Some(var_166) = &input.start_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StartHour");
    if let Some(var_168) = &input.start_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("EndWeekDay");
    if let Some(var_170) = &input.end_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("EndHour");
    if let Some(var_172) = &input.end_hour {
        scope_171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ContainerFormat");
    if let Some(var_174) = &input.container_format {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DiskImageFormat");
    if let Some(var_176) = &input.disk_image_format {
        scope_175.string(var_176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("S3Bucket");
    if let Some(var_178) = &input.s3_bucket {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("S3Prefix");
    if let Some(var_180) = &input.s3_prefix {
        scope_179.string(var_180);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RegionName");
    if let Some(var_182) = &input.region_name {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestIpamResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Key");
    if let Some(var_184) = &input.key {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("Value");
    if let Some(var_186) = &input.value {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("KernelId");
    if let Some(var_188) = &input.kernel_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("EbsOptimized");
    if let Some(var_190) = &input.ebs_optimized {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("IamInstanceProfile");
    if let Some(var_192) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_191, var_192)?;
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("BlockDeviceMapping");
    if let Some(var_194) = &input.block_device_mappings {
        let mut list_196 = scope_193.start_list(true, Some("BlockDeviceMapping"));
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_197, item_195)?;
        }
        list_196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("NetworkInterface");
    if let Some(var_199) = &input.network_interfaces {
        let mut list_201 =
            scope_198.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("ImageId");
    if let Some(var_204) = &input.image_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("InstanceType");
    if let Some(var_206) = &input.instance_type {
        scope_205.string(var_206.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("KeyName");
    if let Some(var_208) = &input.key_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("Monitoring");
    if let Some(var_210) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_209, var_210,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Placement");
    if let Some(var_212) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_211, var_212,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("RamDiskId");
    if let Some(var_214) = &input.ram_disk_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("DisableApiTermination");
    if let Some(var_216) = &input.disable_api_termination {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_218) = &input.instance_initiated_shutdown_behavior {
        scope_217.string(var_218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("UserData");
    if let Some(var_220) = &input.user_data {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("TagSpecification");
    if let Some(var_222) = &input.tag_specifications {
        let mut list_224 =
            scope_221.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_223 in var_222 {
            #[allow(unused_mut)]
            let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_227) = &input.elastic_gpu_specifications {
        let mut list_229 = scope_226.start_list(true, Some("ElasticGpuSpecification"));
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_230, item_228,
            )?;
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_232) = &input.elastic_inference_accelerators {
        let mut list_234 = scope_231.start_list(true, Some("item"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_235, item_233)?;
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("SecurityGroupId");
    if let Some(var_237) = &input.security_group_ids {
        let mut list_239 = scope_236.start_list(true, Some("SecurityGroupId"));
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("SecurityGroup");
    if let Some(var_242) = &input.security_groups {
        let mut list_244 = scope_241.start_list(true, Some("SecurityGroup"));
        for item_243 in var_242 {
            #[allow(unused_mut)]
            let mut entry_245 = list_244.entry();
            entry_245.string(item_243);
        }
        list_244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("InstanceMarketOptions");
    if let Some(var_247) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_246, var_247)?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("CreditSpecification");
    if let Some(var_249) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_248, var_249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("CpuOptions");
    if let Some(var_251) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_250, var_251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_253) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LicenseSpecification");
    if let Some(var_255) = &input.license_specifications {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_258, item_256)?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("HibernationOptions");
    if let Some(var_260) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_259, var_260)?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("MetadataOptions");
    if let Some(var_262) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_261, var_262)?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("EnclaveOptions");
    if let Some(var_264) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_263, var_264,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("InstanceRequirements");
    if let Some(var_266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_265, var_266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_268) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_267, var_268)?;
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("MaintenanceOptions");
    if let Some(var_270) = &input.maintenance_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_maintenance_options_request(scope_269, var_270)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Cidr");
    if let Some(var_272) = &input.cidr {
        scope_271.string(var_272);
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Description");
    if let Some(var_274) = &input.description {
        scope_273.string(var_274);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("Code");
    if let Some(var_276) = &input.code {
        scope_275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("Type");
    if let Some(var_278) = &input.r#type {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("From");
    if let Some(var_280) = &input.from {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("To");
    if let Some(var_282) = &input.to {
        scope_281.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_282).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AccessScopePathRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Source");
    if let Some(var_284) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_283, var_284,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("Destination");
    if let Some(var_286) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_285, var_286,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("ThroughResource");
    if let Some(var_288) = &input.through_resources {
        let mut list_290 = scope_287.start_list(true, Some("item"));
        for item_289 in var_288 {
            #[allow(unused_mut)]
            let mut entry_291 = list_290.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(
                entry_291, item_289,
            )?;
        }
        list_290.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("Ipv6Address");
    if let Some(var_293) = &input.ipv6_address {
        scope_292.string(var_293);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Primary");
    if let Some(var_295) = &input.primary {
        scope_294.boolean(*var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("PrivateIpAddress");
    if let Some(var_297) = &input.private_ip_address {
        scope_296.string(var_297);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Ipv4Prefix");
    if let Some(var_299) = &input.ipv4_prefix {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Ipv6Prefix");
    if let Some(var_301) = &input.ipv6_prefix {
        scope_300.string(var_301);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("CurrencyCode");
    if let Some(var_303) = &input.currency_code {
        scope_302.string(var_303.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("Price");
    if let Some(var_305) = &input.price {
        scope_304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_305).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Term");
    if let Some(var_307) = &input.term {
        scope_306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_307).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("InstanceId");
    if let Some(var_309) = &input.instance_id {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("ExcludeBootVolume");
    if let Some(var_311) = &input.exclude_boot_volume {
        scope_310.boolean(*var_311);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Key");
    if let Some(var_313) = &input.key {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Value");
    if let Some(var_315) = &input.value {
        scope_314.string(var_315);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Key");
    if let Some(var_317) = &input.key {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Value");
    if let Some(var_319) = &input.value {
        scope_318.string(var_319);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("FromPort");
    if let Some(var_321) = &input.from_port {
        scope_320.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("ToPort");
    if let Some(var_323) = &input.to_port {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("AmazonSideAsn");
    if let Some(var_325) = &input.amazon_side_asn {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_327) = &input.auto_accept_shared_attachments {
        scope_326.string(var_327.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_329) = &input.default_route_table_association {
        scope_328.string(var_329.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_331) = &input.default_route_table_propagation {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("VpnEcmpSupport");
    if let Some(var_333) = &input.vpn_ecmp_support {
        scope_332.string(var_333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("DnsSupport");
    if let Some(var_335) = &input.dns_support {
        scope_334.string(var_335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("MulticastSupport");
    if let Some(var_337) = &input.multicast_support {
        scope_336.string(var_337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_339) = &input.transit_gateway_cidr_blocks {
        let mut list_341 = scope_338.start_list(true, Some("item"));
        for item_340 in var_339 {
            #[allow(unused_mut)]
            let mut entry_342 = list_341.entry();
            entry_342.string(item_340);
        }
        list_341.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("Protocol");
    if let Some(var_344) = &input.protocol {
        scope_343.string(var_344.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("PeerAsn");
    if let Some(var_346) = &input.peer_asn {
        scope_345.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_346).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("Igmpv2Support");
    if let Some(var_348) = &input.igmpv2_support {
        scope_347.string(var_348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("StaticSourcesSupport");
    if let Some(var_350) = &input.static_sources_support {
        scope_349.string(var_350.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_352) = &input.auto_accept_shared_associations {
        scope_351.string(var_352.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("DnsSupport");
    if let Some(var_354) = &input.dns_support {
        scope_353.string(var_354.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("Ipv6Support");
    if let Some(var_356) = &input.ipv6_support {
        scope_355.string(var_356.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ApplianceModeSupport");
    if let Some(var_358) = &input.appliance_mode_support {
        scope_357.string(var_358.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("EnableAcceleration");
    if let Some(var_360) = &input.enable_acceleration {
        scope_359.boolean(*var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("StaticRoutesOnly");
    if let Some(var_362) = &input.static_routes_only {
        scope_361.boolean(*var_362);
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_364) = &input.tunnel_inside_ip_version {
        scope_363.string(var_364.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("TunnelOptions");
    if let Some(var_366) = &input.tunnel_options {
        let mut list_368 = scope_365.start_list(true, None);
        for item_367 in var_366 {
            #[allow(unused_mut)]
            let mut entry_369 = list_368.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_369, item_367,
            )?;
        }
        list_368.finish();
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_371) = &input.local_ipv4_network_cidr {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_373) = &input.remote_ipv4_network_cidr {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_375) = &input.local_ipv6_network_cidr {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_377) = &input.remote_ipv6_network_cidr {
        scope_376.string(var_377);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_379) = &input.include_all_tags_of_instance {
        scope_378.boolean(*var_379);
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("InstanceTagKey");
    if let Some(var_381) = &input.instance_tag_keys {
        let mut list_383 = scope_380.start_list(true, Some("item"));
        for item_382 in var_381 {
            #[allow(unused_mut)]
            let mut entry_384 = list_383.entry();
            entry_384.string(item_382);
        }
        list_383.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("Name");
    if let Some(var_386) = &input.name {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("Value");
    if let Some(var_388) = &input.values {
        let mut list_390 = scope_387.start_list(true, Some("item"));
        for item_389 in var_388 {
            #[allow(unused_mut)]
            let mut entry_391 = list_390.entry();
            entry_391.string(item_389);
        }
        list_390.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("EarliestTime");
    if let Some(var_393) = &input.earliest_time {
        scope_392.date_time(var_393, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("LatestTime");
    if let Some(var_395) = &input.latest_time {
        scope_394.date_time(var_395, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("Frequency");
    if let Some(var_397) = &input.frequency {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("Interval");
    if let Some(var_399) = &input.interval {
        scope_398.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_399).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("OccurrenceDay");
    if let Some(var_401) = &input.occurrence_days {
        let mut list_403 = scope_400.start_list(true, Some("OccurenceDay"));
        for item_402 in var_401 {
            #[allow(unused_mut)]
            let mut entry_404 = list_403.entry();
            entry_404.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_402).into()),
            );
        }
        list_403.finish();
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_406) = &input.occurrence_relative_to_end {
        scope_405.boolean(*var_406);
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("OccurrenceUnit");
    if let Some(var_408) = &input.occurrence_unit {
        scope_407.string(var_408);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("EarliestTime");
    if let Some(var_410) = &input.earliest_time {
        scope_409.date_time(var_410, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("LatestTime");
    if let Some(var_412) = &input.latest_time {
        scope_411.date_time(var_412, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("InstanceId");
    if let Some(var_414) = &input.instance_ids {
        let mut list_416 = scope_413.start_list(true, Some("item"));
        for item_415 in var_414 {
            #[allow(unused_mut)]
            let mut entry_417 = list_416.entry();
            entry_417.string(item_415);
        }
        list_416.finish();
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("InstanceTag");
    if let Some(var_419) = &input.instance_tags {
        let mut list_421 = scope_418.start_list(true, Some("item"));
        for item_420 in var_419 {
            #[allow(unused_mut)]
            let mut entry_422 = list_421.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_422, item_420)?;
        }
        list_421.finish();
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("DedicatedHostId");
    if let Some(var_424) = &input.dedicated_host_ids {
        let mut list_426 = scope_423.start_list(true, Some("item"));
        for item_425 in var_424 {
            #[allow(unused_mut)]
            let mut entry_427 = list_426.entry();
            entry_427.string(item_425);
        }
        list_426.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchSnapshotConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("TargetResourceCount");
    if let Some(var_429) = &input.target_resource_count {
        scope_428.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("LaunchTemplateId");
    if let Some(var_431) = &input.launch_template_id {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("LaunchTemplateName");
    if let Some(var_433) = &input.launch_template_name {
        scope_432.string(var_433);
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("Version");
    if let Some(var_435) = &input.version {
        scope_434.string(var_435);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("S3Bucket");
    if let Some(var_437) = &input.s3_bucket {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("S3Prefix");
    if let Some(var_439) = &input.s3_prefix {
        scope_438.string(var_439);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("AthenaIntegration");
    if let Some(var_441) = &input.athena_integrations {
        let mut list_443 = scope_440.start_list(true, Some("item"));
        for item_442 in var_441 {
            #[allow(unused_mut)]
            let mut entry_444 = list_443.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_444, item_442,
            )?;
        }
        list_443.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("VCpuCount");
    if let Some(var_446) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_445, var_446,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("MemoryMiB");
    if let Some(var_448) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_447, var_448)?;
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("CpuManufacturer");
    if let Some(var_450) = &input.cpu_manufacturers {
        let mut list_452 = scope_449.start_list(true, Some("item"));
        for item_451 in var_450 {
            #[allow(unused_mut)]
            let mut entry_453 = list_452.entry();
            entry_453.string(item_451.as_str());
        }
        list_452.finish();
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_455) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_454, var_455,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("ExcludedInstanceType");
    if let Some(var_457) = &input.excluded_instance_types {
        let mut list_459 = scope_456.start_list(true, Some("item"));
        for item_458 in var_457 {
            #[allow(unused_mut)]
            let mut entry_460 = list_459.entry();
            entry_460.string(item_458);
        }
        list_459.finish();
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("InstanceGeneration");
    if let Some(var_462) = &input.instance_generations {
        let mut list_464 = scope_461.start_list(true, Some("item"));
        for item_463 in var_462 {
            #[allow(unused_mut)]
            let mut entry_465 = list_464.entry();
            entry_465.string(item_463.as_str());
        }
        list_464.finish();
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_467) = &input.spot_max_price_percentage_over_lowest_price {
        scope_466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_469) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_468.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("BareMetal");
    if let Some(var_471) = &input.bare_metal {
        scope_470.string(var_471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("BurstablePerformance");
    if let Some(var_473) = &input.burstable_performance {
        scope_472.string(var_473.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("RequireHibernateSupport");
    if let Some(var_475) = &input.require_hibernate_support {
        scope_474.boolean(*var_475);
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_477) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_476, var_477,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("LocalStorage");
    if let Some(var_479) = &input.local_storage {
        scope_478.string(var_479.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("LocalStorageType");
    if let Some(var_481) = &input.local_storage_types {
        let mut list_483 = scope_480.start_list(true, Some("item"));
        for item_482 in var_481 {
            #[allow(unused_mut)]
            let mut entry_484 = list_483.entry();
            entry_484.string(item_482.as_str());
        }
        list_483.finish();
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_486) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_485, var_486,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_488) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_487, var_488,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("AcceleratorType");
    if let Some(var_490) = &input.accelerator_types {
        let mut list_492 = scope_489.start_list(true, Some("item"));
        for item_491 in var_490 {
            #[allow(unused_mut)]
            let mut entry_493 = list_492.entry();
            entry_493.string(item_491.as_str());
        }
        list_492.finish();
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("AcceleratorCount");
    if let Some(var_495) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_494, var_495,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_497) = &input.accelerator_manufacturers {
        let mut list_499 = scope_496.start_list(true, Some("item"));
        for item_498 in var_497 {
            #[allow(unused_mut)]
            let mut entry_500 = list_499.entry();
            entry_500.string(item_498.as_str());
        }
        list_499.finish();
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("AcceleratorName");
    if let Some(var_502) = &input.accelerator_names {
        let mut list_504 = scope_501.start_list(true, Some("item"));
        for item_503 in var_502 {
            #[allow(unused_mut)]
            let mut entry_505 = list_504.entry();
            entry_505.string(item_503.as_str());
        }
        list_504.finish();
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_507) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_506, var_507,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("ArchitectureType");
    if let Some(var_509) = &input.architecture_types {
        let mut list_511 = scope_508.start_list(true, Some("item"));
        for item_510 in var_509 {
            #[allow(unused_mut)]
            let mut entry_512 = list_511.entry();
            entry_512.string(item_510.as_str());
        }
        list_511.finish();
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("VirtualizationType");
    if let Some(var_514) = &input.virtualization_types {
        let mut list_516 = scope_513.start_list(true, Some("item"));
        for item_515 in var_514 {
            #[allow(unused_mut)]
            let mut entry_517 = list_516.entry();
            entry_517.string(item_515.as_str());
        }
        list_516.finish();
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("InstanceRequirements");
    if let Some(var_519) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_518, var_519,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("Comment");
    if let Some(var_521) = &input.comment {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("UploadEnd");
    if let Some(var_523) = &input.upload_end {
        scope_522.date_time(var_523, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("UploadSize");
    if let Some(var_525) = &input.upload_size {
        scope_524.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_525).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("UploadStart");
    if let Some(var_527) = &input.upload_start {
        scope_526.date_time(var_527, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Description");
    if let Some(var_529) = &input.description {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("DeviceName");
    if let Some(var_531) = &input.device_name {
        scope_530.string(var_531);
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("Format");
    if let Some(var_533) = &input.format {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("SnapshotId");
    if let Some(var_535) = &input.snapshot_id {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Url");
    if let Some(var_537) = &input.url {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("UserBucket");
    if let Some(var_539) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_538, var_539)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_541) = &input.license_configuration_arn {
        scope_540.string(var_541);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("Description");
    if let Some(var_543) = &input.description {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("Image");
    if let Some(var_545) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_544, var_545)?;
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("Volume");
    if let Some(var_547) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_546, var_547)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("AdditionalInfo");
    if let Some(var_549) = &input.additional_info {
        scope_548.string(var_549);
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("Architecture");
    if let Some(var_551) = &input.architecture {
        scope_550.string(var_551.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("GroupId");
    if let Some(var_553) = &input.group_ids {
        let mut list_555 = scope_552.start_list(true, Some("SecurityGroupId"));
        for item_554 in var_553 {
            #[allow(unused_mut)]
            let mut entry_556 = list_555.entry();
            entry_556.string(item_554);
        }
        list_555.finish();
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("GroupName");
    if let Some(var_558) = &input.group_names {
        let mut list_560 = scope_557.start_list(true, Some("SecurityGroup"));
        for item_559 in var_558 {
            #[allow(unused_mut)]
            let mut entry_561 = list_560.entry();
            entry_561.string(item_559);
        }
        list_560.finish();
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_563) = &input.instance_initiated_shutdown_behavior {
        scope_562.string(var_563.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("InstanceType");
    if let Some(var_565) = &input.instance_type {
        scope_564.string(var_565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Monitoring");
    if let Some(var_567) = &input.monitoring {
        scope_566.boolean(*var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("Placement");
    if let Some(var_569) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_568, var_569)?;
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("PrivateIpAddress");
    if let Some(var_571) = &input.private_ip_address {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("SubnetId");
    if let Some(var_573) = &input.subnet_id {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("UserData");
    if let Some(var_575) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_574, var_575)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("Description");
    if let Some(var_577) = &input.description {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Format");
    if let Some(var_579) = &input.format {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("Url");
    if let Some(var_581) = &input.url {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("UserBucket");
    if let Some(var_583) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_582, var_583)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("Bytes");
    if let Some(var_585) = &input.bytes {
        scope_584.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_585).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("Format");
    if let Some(var_587) = &input.format {
        scope_586.string(var_587.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("ImportManifestUrl");
    if let Some(var_589) = &input.import_manifest_url {
        scope_588.string(var_589);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Size");
    if let Some(var_591) = &input.size {
        scope_590.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_591).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("CustomDnsServers");
    if let Some(var_593) = &input.custom_dns_servers {
        let mut list_595 = scope_592.start_list(true, Some("item"));
        for item_594 in var_593 {
            #[allow(unused_mut)]
            let mut entry_596 = list_595.entry();
            entry_596.string(item_594);
        }
        list_595.finish();
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("Enabled");
    if let Some(var_598) = &input.enabled {
        scope_597.boolean(*var_598);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Add");
    if let Some(var_600) = &input.add {
        let mut list_602 = scope_599.start_list(true, Some("item"));
        for item_601 in var_600 {
            #[allow(unused_mut)]
            let mut entry_603 = list_602.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_603, item_601,
            )?;
        }
        list_602.finish();
    }
    #[allow(unused_mut)]
    let mut scope_604 = writer.prefix("Remove");
    if let Some(var_605) = &input.remove {
        let mut list_607 = scope_604.start_list(true, Some("item"));
        for item_606 in var_605 {
            #[allow(unused_mut)]
            let mut entry_608 = list_607.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_608, item_606,
            )?;
        }
        list_607.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("Value");
    if let Some(var_610) = &input.value {
        scope_609.string(var_610);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("Add");
    if let Some(var_612) = &input.add {
        let mut list_614 = scope_611.start_list(true, Some("item"));
        for item_613 in var_612 {
            #[allow(unused_mut)]
            let mut entry_615 = list_614.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_615, item_613,
            )?;
        }
        list_614.finish();
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("Remove");
    if let Some(var_617) = &input.remove {
        let mut list_619 = scope_616.start_list(true, Some("item"));
        for item_618 in var_617 {
            #[allow(unused_mut)]
            let mut entry_620 = list_619.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_620, item_618,
            )?;
        }
        list_619.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("Value");
    if let Some(var_622) = &input.value {
        scope_621.boolean(*var_622);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("DeviceName");
    if let Some(var_624) = &input.device_name {
        scope_623.string(var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("Ebs");
    if let Some(var_626) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_625, var_626,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("NoDevice");
    if let Some(var_628) = &input.no_device {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("VirtualName");
    if let Some(var_630) = &input.virtual_name {
        scope_629.string(var_630);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("Value");
    if let Some(var_632) = &input.value {
        scope_631.string(&aws_smithy_types::base64::encode(var_632));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("CapacityReservationPreference");
    if let Some(var_634) = &input.capacity_reservation_preference {
        scope_633.string(var_634.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("CapacityReservationTarget");
    if let Some(var_636) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_635, var_636,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("InstanceId");
    if let Some(var_638) = &input.instance_id {
        scope_637.string(var_638);
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("CpuCredits");
    if let Some(var_640) = &input.cpu_credits {
        scope_639.string(var_640);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemoveIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("RegionName");
    if let Some(var_642) = &input.region_name {
        scope_641.string(var_642);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("Cidr");
    if let Some(var_644) = &input.cidr {
        scope_643.string(var_644);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("AttachmentId");
    if let Some(var_646) = &input.attachment_id {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("DeleteOnTermination");
    if let Some(var_648) = &input.delete_on_termination {
        scope_647.boolean(*var_648);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("AvailabilityZone");
    if let Some(var_650) = &input.availability_zone {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("InstanceCount");
    if let Some(var_652) = &input.instance_count {
        scope_651.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_652).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("InstanceType");
    if let Some(var_654) = &input.instance_type {
        scope_653.string(var_654.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("Platform");
    if let Some(var_656) = &input.platform {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("Scope");
    if let Some(var_658) = &input.scope {
        scope_657.string(var_658.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_660) = &input.security_group_rule_id {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("SecurityGroupRule");
    if let Some(var_662) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_661, var_662,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("Add");
    if let Some(var_664) = &input.add {
        let mut list_666 = scope_663.start_list(true, Some("item"));
        for item_665 in var_664 {
            #[allow(unused_mut)]
            let mut entry_667 = list_666.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_667, item_665,
            )?;
        }
        list_666.finish();
    }
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("Remove");
    if let Some(var_669) = &input.remove {
        let mut list_671 = scope_668.start_list(true, Some("item"));
        for item_670 in var_669 {
            #[allow(unused_mut)]
            let mut entry_672 = list_671.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_672, item_670,
            )?;
        }
        list_671.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_674) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_673, var_674,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("Overrides");
    if let Some(var_676) = &input.overrides {
        let mut list_678 = scope_675.start_list(true, Some("item"));
        for item_677 in var_676 {
            #[allow(unused_mut)]
            let mut entry_679 = list_678.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_679, item_677,
            )?;
        }
        list_678.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_680 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_681) = &input.add_transit_gateway_cidr_blocks {
        let mut list_683 = scope_680.start_list(true, Some("item"));
        for item_682 in var_681 {
            #[allow(unused_mut)]
            let mut entry_684 = list_683.entry();
            entry_684.string(item_682);
        }
        list_683.finish();
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_686) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_688 = scope_685.start_list(true, Some("item"));
        for item_687 in var_686 {
            #[allow(unused_mut)]
            let mut entry_689 = list_688.entry();
            entry_689.string(item_687);
        }
        list_688.finish();
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("VpnEcmpSupport");
    if let Some(var_691) = &input.vpn_ecmp_support {
        scope_690.string(var_691.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("DnsSupport");
    if let Some(var_693) = &input.dns_support {
        scope_692.string(var_693.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_695) = &input.auto_accept_shared_attachments {
        scope_694.string(var_695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_697) = &input.default_route_table_association {
        scope_696.string(var_697.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_699) = &input.association_default_route_table_id {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_701) = &input.default_route_table_propagation {
        scope_700.string(var_701.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_703) = &input.propagation_default_route_table_id {
        scope_702.string(var_703);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("DnsSupport");
    if let Some(var_705) = &input.dns_support {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("Ipv6Support");
    if let Some(var_707) = &input.ipv6_support {
        scope_706.string(var_707.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("ApplianceModeSupport");
    if let Some(var_709) = &input.appliance_mode_support {
        scope_708.string(var_709.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_711) = &input.allow_dns_resolution_from_remote_vpc {
        scope_710.boolean(*var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_713) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_712.boolean(*var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_715) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_714.boolean(*var_715);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("TunnelInsideCidr");
    if let Some(var_717) = &input.tunnel_inside_cidr {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_719) = &input.tunnel_inside_ipv6_cidr {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("PreSharedKey");
    if let Some(var_721) = &input.pre_shared_key {
        scope_720.string(var_721);
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_723) = &input.phase1_lifetime_seconds {
        scope_722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_725) = &input.phase2_lifetime_seconds {
        scope_724.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_725).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_727) = &input.rekey_margin_time_seconds {
        scope_726.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_727).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_729) = &input.rekey_fuzz_percentage {
        scope_728.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("ReplayWindowSize");
    if let Some(var_731) = &input.replay_window_size {
        scope_730.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_733) = &input.dpd_timeout_seconds {
        scope_732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_733).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("DPDTimeoutAction");
    if let Some(var_735) = &input.dpd_timeout_action {
        scope_734.string(var_735);
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_737) = &input.phase1_encryption_algorithms {
        let mut list_739 = scope_736.start_list(true, Some("item"));
        for item_738 in var_737 {
            #[allow(unused_mut)]
            let mut entry_740 = list_739.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_740, item_738)?;
        }
        list_739.finish();
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_742) = &input.phase2_encryption_algorithms {
        let mut list_744 = scope_741.start_list(true, Some("item"));
        for item_743 in var_742 {
            #[allow(unused_mut)]
            let mut entry_745 = list_744.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_745, item_743)?;
        }
        list_744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_747) = &input.phase1_integrity_algorithms {
        let mut list_749 = scope_746.start_list(true, Some("item"));
        for item_748 in var_747 {
            #[allow(unused_mut)]
            let mut entry_750 = list_749.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_750, item_748)?;
        }
        list_749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_751 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_752) = &input.phase2_integrity_algorithms {
        let mut list_754 = scope_751.start_list(true, Some("item"));
        for item_753 in var_752 {
            #[allow(unused_mut)]
            let mut entry_755 = list_754.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_755, item_753)?;
        }
        list_754.finish();
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_757) = &input.phase1_dh_group_numbers {
        let mut list_759 = scope_756.start_list(true, Some("item"));
        for item_758 in var_757 {
            #[allow(unused_mut)]
            let mut entry_760 = list_759.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_760, item_758)?;
        }
        list_759.finish();
    }
    #[allow(unused_mut)]
    let mut scope_761 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_762) = &input.phase2_dh_group_numbers {
        let mut list_764 = scope_761.start_list(true, Some("item"));
        for item_763 in var_762 {
            #[allow(unused_mut)]
            let mut entry_765 = list_764.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_765, item_763)?;
        }
        list_764.finish();
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("IKEVersion");
    if let Some(var_767) = &input.ike_versions {
        let mut list_769 = scope_766.start_list(true, Some("item"));
        for item_768 in var_767 {
            #[allow(unused_mut)]
            let mut entry_770 = list_769.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_770, item_768,
            )?;
        }
        list_769.finish();
    }
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("StartupAction");
    if let Some(var_772) = &input.startup_action {
        scope_771.string(var_772);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("Message");
    if let Some(var_774) = &input.message {
        scope_773.string(var_774);
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("Signature");
    if let Some(var_776) = &input.signature {
        scope_775.string(var_776);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpamCidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("Message");
    if let Some(var_778) = &input.message {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Signature");
    if let Some(var_780) = &input.signature {
        scope_779.string(var_780);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("Amount");
    if let Some(var_782) = &input.amount {
        scope_781.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_782).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("CurrencyCode");
    if let Some(var_784) = &input.currency_code {
        scope_783.string(var_784.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("InstanceCount");
    if let Some(var_786) = &input.instance_count {
        scope_785.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_786).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("PurchaseToken");
    if let Some(var_788) = &input.purchase_token {
        scope_787.string(var_788);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_790) = &input.include_all_tags_of_instance {
        scope_789.boolean(*var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("InstanceTagKey");
    if let Some(var_792) = &input.instance_tag_keys {
        let mut list_794 = scope_791.start_list(true, Some("item"));
        for item_793 in var_792 {
            #[allow(unused_mut)]
            let mut entry_795 = list_794.entry();
            entry_795.string(item_793);
        }
        list_794.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("AllocationStrategy");
    if let Some(var_797) = &input.allocation_strategy {
        scope_796.string(var_797.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_799) = &input.on_demand_allocation_strategy {
        scope_798.string(var_799.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_801) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_800, var_801,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("ClientToken");
    if let Some(var_803) = &input.client_token {
        scope_802.string(var_803);
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_805) = &input.excess_capacity_termination_policy {
        scope_804.string(var_805.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("FulfilledCapacity");
    if let Some(var_807) = &input.fulfilled_capacity {
        scope_806.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_807).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_809) = &input.on_demand_fulfilled_capacity {
        scope_808.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_809).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("IamFleetRole");
    if let Some(var_811) = &input.iam_fleet_role {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("LaunchSpecifications");
    if let Some(var_813) = &input.launch_specifications {
        let mut list_815 = scope_812.start_list(true, Some("item"));
        for item_814 in var_813 {
            #[allow(unused_mut)]
            let mut entry_816 = list_815.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_816, item_814,
            )?;
        }
        list_815.finish();
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_818) = &input.launch_template_configs {
        let mut list_820 = scope_817.start_list(true, Some("item"));
        for item_819 in var_818 {
            #[allow(unused_mut)]
            let mut entry_821 = list_820.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_821, item_819,
            )?;
        }
        list_820.finish();
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("SpotPrice");
    if let Some(var_823) = &input.spot_price {
        scope_822.string(var_823);
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("TargetCapacity");
    if let Some(var_825) = &input.target_capacity {
        scope_824.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_825).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_827) = &input.on_demand_target_capacity {
        scope_826.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_827).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_829) = &input.on_demand_max_total_price {
        scope_828.string(var_829);
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_831) = &input.spot_max_total_price {
        scope_830.string(var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_833) = &input.terminate_instances_with_expiration {
        scope_832.boolean(*var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("Type");
    if let Some(var_835) = &input.r#type {
        scope_834.string(var_835.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("ValidFrom");
    if let Some(var_837) = &input.valid_from {
        scope_836.date_time(var_837, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("ValidUntil");
    if let Some(var_839) = &input.valid_until {
        scope_838.date_time(var_839, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_841) = &input.replace_unhealthy_instances {
        scope_840.boolean(*var_841);
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_843) = &input.instance_interruption_behavior {
        scope_842.string(var_843.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("LoadBalancersConfig");
    if let Some(var_845) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_844, var_845,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_847) = &input.instance_pools_to_use_count {
        scope_846.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_847).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Context");
    if let Some(var_849) = &input.context {
        scope_848.string(var_849);
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_851) = &input.target_capacity_unit_type {
        scope_850.string(var_851.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("TagSpecification");
    if let Some(var_853) = &input.tag_specifications {
        let mut list_855 = scope_852.start_list(true, Some("item"));
        for item_854 in var_853 {
            #[allow(unused_mut)]
            let mut entry_856 = list_855.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_856, item_854,
            )?;
        }
        list_855.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("SecurityGroupId");
    if let Some(var_858) = &input.security_group_ids {
        let mut list_860 = scope_857.start_list(true, Some("item"));
        for item_859 in var_858 {
            #[allow(unused_mut)]
            let mut entry_861 = list_860.entry();
            entry_861.string(item_859);
        }
        list_860.finish();
    }
    #[allow(unused_mut)]
    let mut scope_862 = writer.prefix("SecurityGroup");
    if let Some(var_863) = &input.security_groups {
        let mut list_865 = scope_862.start_list(true, Some("item"));
        for item_864 in var_863 {
            #[allow(unused_mut)]
            let mut entry_866 = list_865.entry();
            entry_866.string(item_864);
        }
        list_865.finish();
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("AddressingType");
    if let Some(var_868) = &input.addressing_type {
        scope_867.string(var_868);
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("BlockDeviceMapping");
    if let Some(var_870) = &input.block_device_mappings {
        let mut list_872 = scope_869.start_list(true, Some("item"));
        for item_871 in var_870 {
            #[allow(unused_mut)]
            let mut entry_873 = list_872.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_873, item_871,
            )?;
        }
        list_872.finish();
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("EbsOptimized");
    if let Some(var_875) = &input.ebs_optimized {
        scope_874.boolean(*var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("IamInstanceProfile");
    if let Some(var_877) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_876, var_877,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("ImageId");
    if let Some(var_879) = &input.image_id {
        scope_878.string(var_879);
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("InstanceType");
    if let Some(var_881) = &input.instance_type {
        scope_880.string(var_881.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("KernelId");
    if let Some(var_883) = &input.kernel_id {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("KeyName");
    if let Some(var_885) = &input.key_name {
        scope_884.string(var_885);
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("Monitoring");
    if let Some(var_887) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_886, var_887,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_888 = writer.prefix("NetworkInterface");
    if let Some(var_889) = &input.network_interfaces {
        let mut list_891 = scope_888.start_list(true, Some("item"));
        for item_890 in var_889 {
            #[allow(unused_mut)]
            let mut entry_892 = list_891.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_892, item_890)?;
        }
        list_891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("Placement");
    if let Some(var_894) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_893, var_894)?;
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("RamdiskId");
    if let Some(var_896) = &input.ramdisk_id {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("SubnetId");
    if let Some(var_898) = &input.subnet_id {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("UserData");
    if let Some(var_900) = &input.user_data {
        scope_899.string(var_900);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("Enabled");
    if let Some(var_902) = &input.enabled {
        scope_901.boolean(*var_902);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("AvailabilityZone");
    if let Some(var_904) = &input.availability_zone {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("Affinity");
    if let Some(var_906) = &input.affinity {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("GroupName");
    if let Some(var_908) = &input.group_name {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("PartitionNumber");
    if let Some(var_910) = &input.partition_number {
        scope_909.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_910).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("HostId");
    if let Some(var_912) = &input.host_id {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("Tenancy");
    if let Some(var_914) = &input.tenancy {
        scope_913.string(var_914.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("SpreadDomain");
    if let Some(var_916) = &input.spread_domain {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("HostResourceGroupArn");
    if let Some(var_918) = &input.host_resource_group_arn {
        scope_917.string(var_918);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_920) = &input.associate_public_ip_address {
        scope_919.boolean(*var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("DeleteOnTermination");
    if let Some(var_922) = &input.delete_on_termination {
        scope_921.boolean(*var_922);
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("Description");
    if let Some(var_924) = &input.description {
        scope_923.string(var_924);
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("DeviceIndex");
    if let Some(var_926) = &input.device_index {
        scope_925.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_926).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("SecurityGroupId");
    if let Some(var_928) = &input.groups {
        let mut list_930 = scope_927.start_list(true, Some("SecurityGroupId"));
        for item_929 in var_928 {
            #[allow(unused_mut)]
            let mut entry_931 = list_930.entry();
            entry_931.string(item_929);
        }
        list_930.finish();
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("Ipv6AddressCount");
    if let Some(var_933) = &input.ipv6_address_count {
        scope_932.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_933).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_934 = writer.prefix("Ipv6Addresses");
    if let Some(var_935) = &input.ipv6_addresses {
        let mut list_937 = scope_934.start_list(true, Some("item"));
        for item_936 in var_935 {
            #[allow(unused_mut)]
            let mut entry_938 = list_937.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_938, item_936,
            )?;
        }
        list_937.finish();
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("NetworkInterfaceId");
    if let Some(var_940) = &input.network_interface_id {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("PrivateIpAddress");
    if let Some(var_942) = &input.private_ip_address {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("PrivateIpAddresses");
    if let Some(var_944) = &input.private_ip_addresses {
        let mut list_946 = scope_943.start_list(true, Some("item"));
        for item_945 in var_944 {
            #[allow(unused_mut)]
            let mut entry_947 = list_946.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_947, item_945,
            )?;
        }
        list_946.finish();
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_949) = &input.secondary_private_ip_address_count {
        scope_948.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_949).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("SubnetId");
    if let Some(var_951) = &input.subnet_id {
        scope_950.string(var_951);
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_953) = &input.associate_carrier_ip_address {
        scope_952.boolean(*var_953);
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("InterfaceType");
    if let Some(var_955) = &input.interface_type {
        scope_954.string(var_955);
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("NetworkCardIndex");
    if let Some(var_957) = &input.network_card_index {
        scope_956.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_957).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("Ipv4Prefix");
    if let Some(var_959) = &input.ipv4_prefixes {
        let mut list_961 = scope_958.start_list(true, Some("item"));
        for item_960 in var_959 {
            #[allow(unused_mut)]
            let mut entry_962 = list_961.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_962, item_960,
            )?;
        }
        list_961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_964) = &input.ipv4_prefix_count {
        scope_963.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_964).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("Ipv6Prefix");
    if let Some(var_966) = &input.ipv6_prefixes {
        let mut list_968 = scope_965.start_list(true, Some("item"));
        for item_967 in var_966 {
            #[allow(unused_mut)]
            let mut entry_969 = list_968.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_969, item_967,
            )?;
        }
        list_968.finish();
    }
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_971) = &input.ipv6_prefix_count {
        scope_970.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_971).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Type");
    if let Some(var_973) = &input.r#type {
        scope_972.string(var_973);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Type");
    if let Some(var_975) = &input.r#type {
        scope_974.string(var_975);
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("Count");
    if let Some(var_977) = &input.count {
        scope_976.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_977).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("LaunchTemplateId");
    if let Some(var_979) = &input.launch_template_id {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("LaunchTemplateName");
    if let Some(var_981) = &input.launch_template_name {
        scope_980.string(var_981);
    }
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("Version");
    if let Some(var_983) = &input.version {
        scope_982.string(var_983);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("MarketType");
    if let Some(var_985) = &input.market_type {
        scope_984.string(var_985.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("SpotOptions");
    if let Some(var_987) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_986, var_987)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("CpuCredits");
    if let Some(var_989) = &input.cpu_credits {
        scope_988.string(var_989);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("CoreCount");
    if let Some(var_991) = &input.core_count {
        scope_990.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_991).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("ThreadsPerCore");
    if let Some(var_993) = &input.threads_per_core {
        scope_992.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_993).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("Configured");
    if let Some(var_995) = &input.configured {
        scope_994.boolean(*var_995);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_997) = &input.license_configuration_arn {
        scope_996.string(var_997);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("HttpTokens");
    if let Some(var_999) = &input.http_tokens {
        scope_998.string(var_999.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1001) = &input.http_put_response_hop_limit {
        scope_1000.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1001).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("HttpEndpoint");
    if let Some(var_1003) = &input.http_endpoint {
        scope_1002.string(var_1003.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1005) = &input.http_protocol_ipv6 {
        scope_1004.string(var_1005.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1007) = &input.instance_metadata_tags {
        scope_1006.string(var_1007.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("Enabled");
    if let Some(var_1009) = &input.enabled {
        scope_1008.boolean(*var_1009);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("HostnameType");
    if let Some(var_1011) = &input.hostname_type {
        scope_1010.string(var_1011.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1013) = &input.enable_resource_name_dns_a_record {
        scope_1012.boolean(*var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1015) = &input.enable_resource_name_dns_aaaa_record {
        scope_1014.boolean(*var_1015);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("AutoRecovery");
    if let Some(var_1017) = &input.auto_recovery {
        scope_1016.string(var_1017.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1019) = &input.block_device_mappings {
        let mut list_1021 = scope_1018.start_list(true, Some("BlockDeviceMapping"));
        for item_1020 in var_1019 {
            #[allow(unused_mut)]
            let mut entry_1022 = list_1021.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1022, item_1020)?;
        }
        list_1021.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("EbsOptimized");
    if let Some(var_1024) = &input.ebs_optimized {
        scope_1023.boolean(*var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("IamInstanceProfile");
    if let Some(var_1026) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_1025, var_1026,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("ImageId");
    if let Some(var_1028) = &input.image_id {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("InstanceType");
    if let Some(var_1030) = &input.instance_type {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("KernelId");
    if let Some(var_1032) = &input.kernel_id {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("KeyName");
    if let Some(var_1034) = &input.key_name {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("Monitoring");
    if let Some(var_1036) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_1035, var_1036,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("NetworkInterface");
    if let Some(var_1038) = &input.network_interfaces {
        let mut list_1040 = scope_1037.start_list(true, Some("NetworkInterface"));
        for item_1039 in var_1038 {
            #[allow(unused_mut)]
            let mut entry_1041 = list_1040.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1041, item_1039)?;
        }
        list_1040.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("Placement");
    if let Some(var_1043) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_1042, var_1043,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("RamdiskId");
    if let Some(var_1045) = &input.ramdisk_id {
        scope_1044.string(var_1045);
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("SecurityGroupId");
    if let Some(var_1047) = &input.security_group_ids {
        let mut list_1049 = scope_1046.start_list(true, Some("SecurityGroupId"));
        for item_1048 in var_1047 {
            #[allow(unused_mut)]
            let mut entry_1050 = list_1049.entry();
            entry_1050.string(item_1048);
        }
        list_1049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("SubnetId");
    if let Some(var_1052) = &input.subnet_id {
        scope_1051.string(var_1052);
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("UserData");
    if let Some(var_1054) = &input.user_data {
        scope_1053.string(var_1054);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1056) = &input.security_group_rule_id {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Description");
    if let Some(var_1058) = &input.description {
        scope_1057.string(var_1058);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("CidrIp");
    if let Some(var_1060) = &input.cidr_ip {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Description");
    if let Some(var_1062) = &input.description {
        scope_1061.string(var_1062);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("CidrIpv6");
    if let Some(var_1064) = &input.cidr_ipv6 {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("Description");
    if let Some(var_1066) = &input.description {
        scope_1065.string(var_1066);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("Description");
    if let Some(var_1068) = &input.description {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("PrefixListId");
    if let Some(var_1070) = &input.prefix_list_id {
        scope_1069.string(var_1070);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("Description");
    if let Some(var_1072) = &input.description {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("GroupId");
    if let Some(var_1074) = &input.group_id {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("GroupName");
    if let Some(var_1076) = &input.group_name {
        scope_1075.string(var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("PeeringStatus");
    if let Some(var_1078) = &input.peering_status {
        scope_1077.string(var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("UserId");
    if let Some(var_1080) = &input.user_id {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("VpcId");
    if let Some(var_1082) = &input.vpc_id {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1084) = &input.vpc_peering_connection_id {
        scope_1083.string(var_1084);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1086) = &input.aws_access_key_id {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("Bucket");
    if let Some(var_1088) = &input.bucket {
        scope_1087.string(var_1088);
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("Prefix");
    if let Some(var_1090) = &input.prefix {
        scope_1089.string(var_1090);
    }
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("UploadPolicy");
    if let Some(var_1092) = &input.upload_policy {
        scope_1091.string(&aws_smithy_types::base64::encode(var_1092));
    }
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("UploadPolicySignature");
    if let Some(var_1094) = &input.upload_policy_signature {
        scope_1093.string(var_1094);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("DirectoryId");
    if let Some(var_1096) = &input.directory_id {
        scope_1095.string(var_1096);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1098) = &input.client_root_certificate_chain_arn {
        scope_1097.string(var_1098);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("SAMLProviderArn");
    if let Some(var_1100) = &input.saml_provider_arn {
        scope_1099.string(var_1100);
    }
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1102) = &input.self_service_saml_provider_arn {
        scope_1101.string(var_1102);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("CapacityRebalance");
    if let Some(var_1104) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1103, var_1104,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("UsageStrategy");
    if let Some(var_1106) = &input.usage_strategy {
        scope_1105.string(var_1106.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("LaunchTemplateId");
    if let Some(var_1108) = &input.launch_template_id {
        scope_1107.string(var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("LaunchTemplateName");
    if let Some(var_1110) = &input.launch_template_name {
        scope_1109.string(var_1110);
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("Version");
    if let Some(var_1112) = &input.version {
        scope_1111.string(var_1112);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("InstanceType");
    if let Some(var_1114) = &input.instance_type {
        scope_1113.string(var_1114.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("MaxPrice");
    if let Some(var_1116) = &input.max_price {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("SubnetId");
    if let Some(var_1118) = &input.subnet_id {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("AvailabilityZone");
    if let Some(var_1120) = &input.availability_zone {
        scope_1119.string(var_1120);
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("WeightedCapacity");
    if let Some(var_1122) = &input.weighted_capacity {
        scope_1121.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1122).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("Priority");
    if let Some(var_1124) = &input.priority {
        scope_1123.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1124).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("Placement");
    if let Some(var_1126) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1125, var_1126)?;
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("InstanceRequirements");
    if let Some(var_1128) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1127, var_1128,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("DeleteOnTermination");
    if let Some(var_1130) = &input.delete_on_termination {
        scope_1129.boolean(*var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("Iops");
    if let Some(var_1132) = &input.iops {
        scope_1131.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1132).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("SnapshotId");
    if let Some(var_1134) = &input.snapshot_id {
        scope_1133.string(var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("VolumeSize");
    if let Some(var_1136) = &input.volume_size {
        scope_1135.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1136).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("VolumeType");
    if let Some(var_1138) = &input.volume_type {
        scope_1137.string(var_1138.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("KmsKeyId");
    if let Some(var_1140) = &input.kms_key_id {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("Throughput");
    if let Some(var_1142) = &input.throughput {
        scope_1141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("OutpostArn");
    if let Some(var_1144) = &input.outpost_arn {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("Encrypted");
    if let Some(var_1146) = &input.encrypted {
        scope_1145.boolean(*var_1146);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("Arn");
    if let Some(var_1148) = &input.arn {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("Name");
    if let Some(var_1150) = &input.name {
        scope_1149.string(var_1150);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("DeviceName");
    if let Some(var_1152) = &input.device_name {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("VirtualName");
    if let Some(var_1154) = &input.virtual_name {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("Ebs");
    if let Some(var_1156) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1155, var_1156,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("NoDevice");
    if let Some(var_1158) = &input.no_device {
        scope_1157.string(var_1158);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1160) = &input.associate_carrier_ip_address {
        scope_1159.boolean(*var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1162) = &input.associate_public_ip_address {
        scope_1161.boolean(*var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("DeleteOnTermination");
    if let Some(var_1164) = &input.delete_on_termination {
        scope_1163.boolean(*var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("Description");
    if let Some(var_1166) = &input.description {
        scope_1165.string(var_1166);
    }
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("DeviceIndex");
    if let Some(var_1168) = &input.device_index {
        scope_1167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("SecurityGroupId");
    if let Some(var_1170) = &input.groups {
        let mut list_1172 = scope_1169.start_list(true, Some("SecurityGroupId"));
        for item_1171 in var_1170 {
            #[allow(unused_mut)]
            let mut entry_1173 = list_1172.entry();
            entry_1173.string(item_1171);
        }
        list_1172.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("InterfaceType");
    if let Some(var_1175) = &input.interface_type {
        scope_1174.string(var_1175);
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1177) = &input.ipv6_address_count {
        scope_1176.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1177).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("Ipv6Addresses");
    if let Some(var_1179) = &input.ipv6_addresses {
        let mut list_1181 = scope_1178.start_list(true, Some("InstanceIpv6Address"));
        for item_1180 in var_1179 {
            #[allow(unused_mut)]
            let mut entry_1182 = list_1181.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1182, item_1180,
            )?;
        }
        list_1181.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1184) = &input.network_interface_id {
        scope_1183.string(var_1184);
    }
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("PrivateIpAddress");
    if let Some(var_1186) = &input.private_ip_address {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1188) = &input.private_ip_addresses {
        let mut list_1190 = scope_1187.start_list(true, Some("item"));
        for item_1189 in var_1188 {
            #[allow(unused_mut)]
            let mut entry_1191 = list_1190.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1191, item_1189,
            )?;
        }
        list_1190.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1193) = &input.secondary_private_ip_address_count {
        scope_1192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1193).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("SubnetId");
    if let Some(var_1195) = &input.subnet_id {
        scope_1194.string(var_1195);
    }
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("NetworkCardIndex");
    if let Some(var_1197) = &input.network_card_index {
        scope_1196.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1197).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("Ipv4Prefix");
    if let Some(var_1199) = &input.ipv4_prefixes {
        let mut list_1201 = scope_1198.start_list(true, Some("item"));
        for item_1200 in var_1199 {
            #[allow(unused_mut)]
            let mut entry_1202 = list_1201.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1202, item_1200,
            )?;
        }
        list_1201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1203 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1204) = &input.ipv4_prefix_count {
        scope_1203.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1204).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1205 = writer.prefix("Ipv6Prefix");
    if let Some(var_1206) = &input.ipv6_prefixes {
        let mut list_1208 = scope_1205.start_list(true, Some("item"));
        for item_1207 in var_1206 {
            #[allow(unused_mut)]
            let mut entry_1209 = list_1208.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1209, item_1207,
            )?;
        }
        list_1208.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1211) = &input.ipv6_prefix_count {
        scope_1210.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1211).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("Enabled");
    if let Some(var_1213) = &input.enabled {
        scope_1212.boolean(*var_1213);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("AvailabilityZone");
    if let Some(var_1215) = &input.availability_zone {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("Affinity");
    if let Some(var_1217) = &input.affinity {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("GroupName");
    if let Some(var_1219) = &input.group_name {
        scope_1218.string(var_1219);
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("HostId");
    if let Some(var_1221) = &input.host_id {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("Tenancy");
    if let Some(var_1223) = &input.tenancy {
        scope_1222.string(var_1223.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("SpreadDomain");
    if let Some(var_1225) = &input.spread_domain {
        scope_1224.string(var_1225);
    }
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1227) = &input.host_resource_group_arn {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("PartitionNumber");
    if let Some(var_1229) = &input.partition_number {
        scope_1228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1229).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("ResourceType");
    if let Some(var_1231) = &input.resource_type {
        scope_1230.string(var_1231.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("Tag");
    if let Some(var_1233) = &input.tags {
        let mut list_1235 = scope_1232.start_list(true, Some("item"));
        for item_1234 in var_1233 {
            #[allow(unused_mut)]
            let mut entry_1236 = list_1235.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1236, item_1234)?;
        }
        list_1235.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("Type");
    if let Some(var_1238) = &input.r#type {
        scope_1237.string(var_1238);
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("Count");
    if let Some(var_1240) = &input.count {
        scope_1239.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1240).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("MarketType");
    if let Some(var_1242) = &input.market_type {
        scope_1241.string(var_1242.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("SpotOptions");
    if let Some(var_1244) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1243, var_1244)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("CoreCount");
    if let Some(var_1246) = &input.core_count {
        scope_1245.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1246).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("ThreadsPerCore");
    if let Some(var_1248) = &input.threads_per_core {
        scope_1247.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1248).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1250) = &input.capacity_reservation_preference {
        scope_1249.string(var_1250.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1252) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1251, var_1252,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1254) = &input.license_configuration_arn {
        scope_1253.string(var_1254);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("Configured");
    if let Some(var_1256) = &input.configured {
        scope_1255.boolean(*var_1256);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("HttpTokens");
    if let Some(var_1258) = &input.http_tokens {
        scope_1257.string(var_1258.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1260) = &input.http_put_response_hop_limit {
        scope_1259.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1260).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("HttpEndpoint");
    if let Some(var_1262) = &input.http_endpoint {
        scope_1261.string(var_1262.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1264) = &input.http_protocol_ipv6 {
        scope_1263.string(var_1264.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1266) = &input.instance_metadata_tags {
        scope_1265.string(var_1266.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("Enabled");
    if let Some(var_1268) = &input.enabled {
        scope_1267.boolean(*var_1268);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("HostnameType");
    if let Some(var_1270) = &input.hostname_type {
        scope_1269.string(var_1270.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1272) = &input.enable_resource_name_dns_a_record {
        scope_1271.boolean(*var_1272);
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1274) = &input.enable_resource_name_dns_aaaa_record {
        scope_1273.boolean(*var_1274);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_maintenance_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMaintenanceOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("AutoRecovery");
    if let Some(var_1276) = &input.auto_recovery {
        scope_1275.string(var_1276.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PathStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1278) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(
            scope_1277, var_1278,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("ResourceStatement");
    if let Some(var_1280) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1279, var_1280,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ThroughResourcesStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("ResourceStatement");
    if let Some(var_1282) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1281, var_1282,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1284) = &input.tunnel_inside_cidr {
        scope_1283.string(var_1284);
    }
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1286) = &input.tunnel_inside_ipv6_cidr {
        scope_1285.string(var_1286);
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("PreSharedKey");
    if let Some(var_1288) = &input.pre_shared_key {
        scope_1287.string(var_1288);
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1290) = &input.phase1_lifetime_seconds {
        scope_1289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1292) = &input.phase2_lifetime_seconds {
        scope_1291.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1292).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1294) = &input.rekey_margin_time_seconds {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1296) = &input.rekey_fuzz_percentage {
        scope_1295.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("ReplayWindowSize");
    if let Some(var_1298) = &input.replay_window_size {
        scope_1297.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1298).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1300) = &input.dpd_timeout_seconds {
        scope_1299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1300).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1302) = &input.dpd_timeout_action {
        scope_1301.string(var_1302);
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1304) = &input.phase1_encryption_algorithms {
        let mut list_1306 = scope_1303.start_list(true, Some("item"));
        for item_1305 in var_1304 {
            #[allow(unused_mut)]
            let mut entry_1307 = list_1306.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1307, item_1305)?;
        }
        list_1306.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1308 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1309) = &input.phase2_encryption_algorithms {
        let mut list_1311 = scope_1308.start_list(true, Some("item"));
        for item_1310 in var_1309 {
            #[allow(unused_mut)]
            let mut entry_1312 = list_1311.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1312, item_1310)?;
        }
        list_1311.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1314) = &input.phase1_integrity_algorithms {
        let mut list_1316 = scope_1313.start_list(true, Some("item"));
        for item_1315 in var_1314 {
            #[allow(unused_mut)]
            let mut entry_1317 = list_1316.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1317, item_1315)?;
        }
        list_1316.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1318 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1319) = &input.phase2_integrity_algorithms {
        let mut list_1321 = scope_1318.start_list(true, Some("item"));
        for item_1320 in var_1319 {
            #[allow(unused_mut)]
            let mut entry_1322 = list_1321.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1322, item_1320)?;
        }
        list_1321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1323 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1324) = &input.phase1_dh_group_numbers {
        let mut list_1326 = scope_1323.start_list(true, Some("item"));
        for item_1325 in var_1324 {
            #[allow(unused_mut)]
            let mut entry_1327 = list_1326.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1327, item_1325)?;
        }
        list_1326.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1328 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1329) = &input.phase2_dh_group_numbers {
        let mut list_1331 = scope_1328.start_list(true, Some("item"));
        for item_1330 in var_1329 {
            #[allow(unused_mut)]
            let mut entry_1332 = list_1331.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1332, item_1330)?;
        }
        list_1331.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1333 = writer.prefix("IKEVersion");
    if let Some(var_1334) = &input.ike_versions {
        let mut list_1336 = scope_1333.start_list(true, Some("item"));
        for item_1335 in var_1334 {
            #[allow(unused_mut)]
            let mut entry_1337 = list_1336.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1337, item_1335,
            )?;
        }
        list_1336.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("StartupAction");
    if let Some(var_1339) = &input.startup_action {
        scope_1338.string(var_1339);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1341) = &input.integration_result_s3_destination_arn {
        scope_1340.string(var_1341);
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1343) = &input.partition_load_frequency {
        scope_1342.string(var_1343.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("PartitionStartDate");
    if let Some(var_1345) = &input.partition_start_date {
        scope_1344.date_time(var_1345, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("PartitionEndDate");
    if let Some(var_1347) = &input.partition_end_date {
        scope_1346.date_time(var_1347, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Min");
    if let Some(var_1349) = &input.min {
        scope_1348.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1349).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Max");
    if let Some(var_1351) = &input.max {
        scope_1350.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1351).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Min");
    if let Some(var_1353) = &input.min {
        scope_1352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Max");
    if let Some(var_1355) = &input.max {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("Min");
    if let Some(var_1357) = &input.min {
        scope_1356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1357).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("Max");
    if let Some(var_1359) = &input.max {
        scope_1358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1359).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("Min");
    if let Some(var_1361) = &input.min {
        scope_1360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1361).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Max");
    if let Some(var_1363) = &input.max {
        scope_1362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1363).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Min");
    if let Some(var_1365) = &input.min {
        scope_1364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("Max");
    if let Some(var_1367) = &input.max {
        scope_1366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1367).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Min");
    if let Some(var_1369) = &input.min {
        scope_1368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Max");
    if let Some(var_1371) = &input.max {
        scope_1370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1371).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("Min");
    if let Some(var_1373) = &input.min {
        scope_1372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1373).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("Max");
    if let Some(var_1375) = &input.max {
        scope_1374.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1375).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("Min");
    if let Some(var_1377) = &input.min {
        scope_1376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("Max");
    if let Some(var_1379) = &input.max {
        scope_1378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1379).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("S3Bucket");
    if let Some(var_1381) = &input.s3_bucket {
        scope_1380.string(var_1381);
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("S3Key");
    if let Some(var_1383) = &input.s3_key {
        scope_1382.string(var_1383);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("Data");
    if let Some(var_1385) = &input.data {
        scope_1384.string(var_1385);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("Group");
    if let Some(var_1387) = &input.group {
        scope_1386.string(var_1387.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("UserId");
    if let Some(var_1389) = &input.user_id {
        scope_1388.string(var_1389);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("Group");
    if let Some(var_1391) = &input.group {
        scope_1390.string(var_1391.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("UserId");
    if let Some(var_1393) = &input.user_id {
        scope_1392.string(var_1393);
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("OrganizationArn");
    if let Some(var_1395) = &input.organization_arn {
        scope_1394.string(var_1395);
    }
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1397) = &input.organizational_unit_arn {
        scope_1396.string(var_1397);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("DeleteOnTermination");
    if let Some(var_1399) = &input.delete_on_termination {
        scope_1398.boolean(*var_1399);
    }
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("VolumeId");
    if let Some(var_1401) = &input.volume_id {
        scope_1400.string(var_1401);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("CapacityReservationId");
    if let Some(var_1403) = &input.capacity_reservation_id {
        scope_1402.string(var_1403);
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1405) = &input.capacity_reservation_resource_group_arn {
        scope_1404.string(var_1405);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("IpProtocol");
    if let Some(var_1407) = &input.ip_protocol {
        scope_1406.string(var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("FromPort");
    if let Some(var_1409) = &input.from_port {
        scope_1408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("ToPort");
    if let Some(var_1411) = &input.to_port {
        scope_1410.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1411).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("CidrIpv4");
    if let Some(var_1413) = &input.cidr_ipv4 {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("CidrIpv6");
    if let Some(var_1415) = &input.cidr_ipv6 {
        scope_1414.string(var_1415);
    }
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("PrefixListId");
    if let Some(var_1417) = &input.prefix_list_id {
        scope_1416.string(var_1417);
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("ReferencedGroupId");
    if let Some(var_1419) = &input.referenced_group_id {
        scope_1418.string(var_1419);
    }
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("Description");
    if let Some(var_1421) = &input.description {
        scope_1420.string(var_1421);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("Group");
    if let Some(var_1423) = &input.group {
        scope_1422.string(var_1423.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("UserId");
    if let Some(var_1425) = &input.user_id {
        scope_1424.string(var_1425);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("LaunchTemplateId");
    if let Some(var_1427) = &input.launch_template_id {
        scope_1426.string(var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("LaunchTemplateName");
    if let Some(var_1429) = &input.launch_template_name {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("Version");
    if let Some(var_1431) = &input.version {
        scope_1430.string(var_1431);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("InstanceType");
    if let Some(var_1433) = &input.instance_type {
        scope_1432.string(var_1433.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("SpotPrice");
    if let Some(var_1435) = &input.spot_price {
        scope_1434.string(var_1435);
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("SubnetId");
    if let Some(var_1437) = &input.subnet_id {
        scope_1436.string(var_1437);
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("AvailabilityZone");
    if let Some(var_1439) = &input.availability_zone {
        scope_1438.string(var_1439);
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("WeightedCapacity");
    if let Some(var_1441) = &input.weighted_capacity {
        scope_1440.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1441).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("Priority");
    if let Some(var_1443) = &input.priority {
        scope_1442.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1443).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("InstanceRequirements");
    if let Some(var_1445) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1444, var_1445,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("Value");
    if let Some(var_1447) = &input.value {
        scope_1446.string(var_1447);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("Value");
    if let Some(var_1449) = &input.value {
        scope_1448.string(var_1449);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("Value");
    if let Some(var_1451) = &input.value {
        scope_1450.string(var_1451);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("Value");
    if let Some(var_1453) = &input.value {
        scope_1452.string(var_1453);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("Value");
    if let Some(var_1455) = &input.value {
        scope_1454.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1455).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("Value");
    if let Some(var_1457) = &input.value {
        scope_1456.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1457).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("Value");
    if let Some(var_1459) = &input.value {
        scope_1458.string(var_1459);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("CapacityRebalance");
    if let Some(var_1461) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1460, var_1461,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("GroupSet");
    if let Some(var_1463) = &input.security_groups {
        let mut list_1465 = scope_1462.start_list(true, Some("item"));
        for item_1464 in var_1463 {
            #[allow(unused_mut)]
            let mut entry_1466 = list_1465.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1466, item_1464,
            )?;
        }
        list_1465.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1467 = writer.prefix("AddressingType");
    if let Some(var_1468) = &input.addressing_type {
        scope_1467.string(var_1468);
    }
    #[allow(unused_mut)]
    let mut scope_1469 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1470) = &input.block_device_mappings {
        let mut list_1472 = scope_1469.start_list(true, Some("item"));
        for item_1471 in var_1470 {
            #[allow(unused_mut)]
            let mut entry_1473 = list_1472.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1473, item_1471,
            )?;
        }
        list_1472.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("EbsOptimized");
    if let Some(var_1475) = &input.ebs_optimized {
        scope_1474.boolean(*var_1475);
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("IamInstanceProfile");
    if let Some(var_1477) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1476, var_1477,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("ImageId");
    if let Some(var_1479) = &input.image_id {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("InstanceType");
    if let Some(var_1481) = &input.instance_type {
        scope_1480.string(var_1481.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("KernelId");
    if let Some(var_1483) = &input.kernel_id {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("KeyName");
    if let Some(var_1485) = &input.key_name {
        scope_1484.string(var_1485);
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("Monitoring");
    if let Some(var_1487) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1486, var_1487,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1489) = &input.network_interfaces {
        let mut list_1491 = scope_1488.start_list(true, Some("item"));
        for item_1490 in var_1489 {
            #[allow(unused_mut)]
            let mut entry_1492 = list_1491.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1492, item_1490)?;
        }
        list_1491.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1493 = writer.prefix("Placement");
    if let Some(var_1494) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1493, var_1494)?;
    }
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("RamdiskId");
    if let Some(var_1496) = &input.ramdisk_id {
        scope_1495.string(var_1496);
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("SpotPrice");
    if let Some(var_1498) = &input.spot_price {
        scope_1497.string(var_1498);
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("SubnetId");
    if let Some(var_1500) = &input.subnet_id {
        scope_1499.string(var_1500);
    }
    #[allow(unused_mut)]
    let mut scope_1501 = writer.prefix("UserData");
    if let Some(var_1502) = &input.user_data {
        scope_1501.string(var_1502);
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("WeightedCapacity");
    if let Some(var_1504) = &input.weighted_capacity {
        scope_1503.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1504).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1505 = writer.prefix("TagSpecificationSet");
    if let Some(var_1506) = &input.tag_specifications {
        let mut list_1508 = scope_1505.start_list(true, Some("item"));
        for item_1507 in var_1506 {
            #[allow(unused_mut)]
            let mut entry_1509 = list_1508.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1509, item_1507,
            )?;
        }
        list_1508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("InstanceRequirements");
    if let Some(var_1511) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1510, var_1511,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1513) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1512, var_1513,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1515) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1514, var_1515,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("AvailabilityZone");
    if let Some(var_1517) = &input.availability_zone {
        scope_1516.string(var_1517);
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("GroupName");
    if let Some(var_1519) = &input.group_name {
        scope_1518.string(var_1519);
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("Tenancy");
    if let Some(var_1521) = &input.tenancy {
        scope_1520.string(var_1521.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("MaxPrice");
    if let Some(var_1523) = &input.max_price {
        scope_1522.string(var_1523);
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("SpotInstanceType");
    if let Some(var_1525) = &input.spot_instance_type {
        scope_1524.string(var_1525.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1527) = &input.block_duration_minutes {
        scope_1526.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1527).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("ValidUntil");
    if let Some(var_1529) = &input.valid_until {
        scope_1528.date_time(var_1529, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1531) = &input.instance_interruption_behavior {
        scope_1530.string(var_1531.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("DeviceName");
    if let Some(var_1533) = &input.device_name {
        scope_1532.string(var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("Ebs");
    if let Some(var_1535) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1534, var_1535,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("NoDevice");
    if let Some(var_1537) = &input.no_device {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("VirtualName");
    if let Some(var_1539) = &input.virtual_name {
        scope_1538.string(var_1539);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("Arn");
    if let Some(var_1541) = &input.arn {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("Name");
    if let Some(var_1543) = &input.name {
        scope_1542.string(var_1543);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("Enabled");
    if let Some(var_1545) = &input.enabled {
        scope_1544.boolean(*var_1545);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1547) = &input.associate_public_ip_address {
        scope_1546.boolean(*var_1547);
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("DeleteOnTermination");
    if let Some(var_1549) = &input.delete_on_termination {
        scope_1548.boolean(*var_1549);
    }
    #[allow(unused_mut)]
    let mut scope_1550 = writer.prefix("Description");
    if let Some(var_1551) = &input.description {
        scope_1550.string(var_1551);
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("DeviceIndex");
    if let Some(var_1553) = &input.device_index {
        scope_1552.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1553).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1554 = writer.prefix("Group");
    if let Some(var_1555) = &input.groups {
        let mut list_1557 = scope_1554.start_list(true, Some("SecurityGroupId"));
        for item_1556 in var_1555 {
            #[allow(unused_mut)]
            let mut entry_1558 = list_1557.entry();
            entry_1558.string(item_1556);
        }
        list_1557.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1560) = &input.ipv6_address_count {
        scope_1559.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1560).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("Ipv6Address");
    if let Some(var_1562) = &input.ipv6_addresses {
        let mut list_1564 = scope_1561.start_list(true, Some("Ipv6Address"));
        for item_1563 in var_1562 {
            #[allow(unused_mut)]
            let mut entry_1565 = list_1564.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1565, item_1563,
            )?;
        }
        list_1564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1566 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1567) = &input.network_interface_id {
        scope_1566.string(var_1567);
    }
    #[allow(unused_mut)]
    let mut scope_1568 = writer.prefix("PrivateIpAddress");
    if let Some(var_1569) = &input.private_ip_address {
        scope_1568.string(var_1569);
    }
    #[allow(unused_mut)]
    let mut scope_1570 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1571) = &input.private_ip_address_configs {
        let mut list_1573 = scope_1570.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1572 in var_1571 {
            #[allow(unused_mut)]
            let mut entry_1574 = list_1573.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1574, item_1572)?;
        }
        list_1573.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1576) = &input.secondary_private_ip_address_count {
        scope_1575.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1576).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("SubnetId");
    if let Some(var_1578) = &input.subnet_id {
        scope_1577.string(var_1578);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("AvailabilityZone");
    if let Some(var_1580) = &input.availability_zone {
        scope_1579.string(var_1580);
    }
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("GroupName");
    if let Some(var_1582) = &input.group_name {
        scope_1581.string(var_1582);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("ReplacementStrategy");
    if let Some(var_1584) = &input.replacement_strategy {
        scope_1583.string(var_1584.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("TerminationDelay");
    if let Some(var_1586) = &input.termination_delay {
        scope_1585.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1586).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("Encrypted");
    if let Some(var_1588) = &input.encrypted {
        scope_1587.boolean(*var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("DeleteOnTermination");
    if let Some(var_1590) = &input.delete_on_termination {
        scope_1589.boolean(*var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("Iops");
    if let Some(var_1592) = &input.iops {
        scope_1591.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1592).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("KmsKeyId");
    if let Some(var_1594) = &input.kms_key_id {
        scope_1593.string(var_1594);
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("SnapshotId");
    if let Some(var_1596) = &input.snapshot_id {
        scope_1595.string(var_1596);
    }
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("VolumeSize");
    if let Some(var_1598) = &input.volume_size {
        scope_1597.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1598).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("VolumeType");
    if let Some(var_1600) = &input.volume_type {
        scope_1599.string(var_1600.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("Throughput");
    if let Some(var_1602) = &input.throughput {
        scope_1601.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1602).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("Ipv6Address");
    if let Some(var_1604) = &input.ipv6_address {
        scope_1603.string(var_1604);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("MaxPrice");
    if let Some(var_1606) = &input.max_price {
        scope_1605.string(var_1606);
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("SpotInstanceType");
    if let Some(var_1608) = &input.spot_instance_type {
        scope_1607.string(var_1608.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1610) = &input.block_duration_minutes {
        scope_1609.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1610).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1611 = writer.prefix("ValidUntil");
    if let Some(var_1612) = &input.valid_until {
        scope_1611.date_time(var_1612, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1613 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1614) = &input.instance_interruption_behavior {
        scope_1613.string(var_1614.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PacketHeaderStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1615 = writer.prefix("SourceAddress");
    if let Some(var_1616) = &input.source_addresses {
        let mut list_1618 = scope_1615.start_list(true, Some("item"));
        for item_1617 in var_1616 {
            #[allow(unused_mut)]
            let mut entry_1619 = list_1618.entry();
            entry_1619.string(item_1617);
        }
        list_1618.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1620 = writer.prefix("DestinationAddress");
    if let Some(var_1621) = &input.destination_addresses {
        let mut list_1623 = scope_1620.start_list(true, Some("item"));
        for item_1622 in var_1621 {
            #[allow(unused_mut)]
            let mut entry_1624 = list_1623.entry();
            entry_1624.string(item_1622);
        }
        list_1623.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1625 = writer.prefix("SourcePort");
    if let Some(var_1626) = &input.source_ports {
        let mut list_1628 = scope_1625.start_list(true, Some("item"));
        for item_1627 in var_1626 {
            #[allow(unused_mut)]
            let mut entry_1629 = list_1628.entry();
            entry_1629.string(item_1627);
        }
        list_1628.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("DestinationPort");
    if let Some(var_1631) = &input.destination_ports {
        let mut list_1633 = scope_1630.start_list(true, Some("item"));
        for item_1632 in var_1631 {
            #[allow(unused_mut)]
            let mut entry_1634 = list_1633.entry();
            entry_1634.string(item_1632);
        }
        list_1633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1635 = writer.prefix("SourcePrefixList");
    if let Some(var_1636) = &input.source_prefix_lists {
        let mut list_1638 = scope_1635.start_list(true, Some("item"));
        for item_1637 in var_1636 {
            #[allow(unused_mut)]
            let mut entry_1639 = list_1638.entry();
            entry_1639.string(item_1637);
        }
        list_1638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("DestinationPrefixList");
    if let Some(var_1641) = &input.destination_prefix_lists {
        let mut list_1643 = scope_1640.start_list(true, Some("item"));
        for item_1642 in var_1641 {
            #[allow(unused_mut)]
            let mut entry_1644 = list_1643.entry();
            entry_1644.string(item_1642);
        }
        list_1643.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1645 = writer.prefix("Protocol");
    if let Some(var_1646) = &input.protocols {
        let mut list_1648 = scope_1645.start_list(true, Some("item"));
        for item_1647 in var_1646 {
            #[allow(unused_mut)]
            let mut entry_1649 = list_1648.entry();
            entry_1649.string(item_1647.as_str());
        }
        list_1648.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ResourceStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("Resource");
    if let Some(var_1651) = &input.resources {
        let mut list_1653 = scope_1650.start_list(true, Some("item"));
        for item_1652 in var_1651 {
            #[allow(unused_mut)]
            let mut entry_1654 = list_1653.entry();
            entry_1654.string(item_1652);
        }
        list_1653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("ResourceType");
    if let Some(var_1656) = &input.resource_types {
        let mut list_1658 = scope_1655.start_list(true, Some("item"));
        for item_1657 in var_1656 {
            #[allow(unused_mut)]
            let mut entry_1659 = list_1658.entry();
            entry_1659.string(item_1657);
        }
        list_1658.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1660 = writer.prefix("VCpuCount");
    if let Some(var_1661) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1660, var_1661)?;
    }
    #[allow(unused_mut)]
    let mut scope_1662 = writer.prefix("MemoryMiB");
    if let Some(var_1663) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1662, var_1663)?;
    }
    #[allow(unused_mut)]
    let mut scope_1664 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1665) = &input.cpu_manufacturers {
        let mut list_1667 = scope_1664.start_list(true, Some("item"));
        for item_1666 in var_1665 {
            #[allow(unused_mut)]
            let mut entry_1668 = list_1667.entry();
            entry_1668.string(item_1666.as_str());
        }
        list_1667.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1670) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1669, var_1670,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1672) = &input.excluded_instance_types {
        let mut list_1674 = scope_1671.start_list(true, Some("item"));
        for item_1673 in var_1672 {
            #[allow(unused_mut)]
            let mut entry_1675 = list_1674.entry();
            entry_1675.string(item_1673);
        }
        list_1674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1676 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1677) = &input.instance_generations {
        let mut list_1679 = scope_1676.start_list(true, Some("item"));
        for item_1678 in var_1677 {
            #[allow(unused_mut)]
            let mut entry_1680 = list_1679.entry();
            entry_1680.string(item_1678.as_str());
        }
        list_1679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1682) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1681.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1682).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1684) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1683.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1684).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("BareMetal");
    if let Some(var_1686) = &input.bare_metal {
        scope_1685.string(var_1686.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("BurstablePerformance");
    if let Some(var_1688) = &input.burstable_performance {
        scope_1687.string(var_1688.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1690) = &input.require_hibernate_support {
        scope_1689.boolean(*var_1690);
    }
    #[allow(unused_mut)]
    let mut scope_1691 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1692) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1691, var_1692,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1693 = writer.prefix("LocalStorage");
    if let Some(var_1694) = &input.local_storage {
        scope_1693.string(var_1694.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1695 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1696) = &input.local_storage_types {
        let mut list_1698 = scope_1695.start_list(true, Some("item"));
        for item_1697 in var_1696 {
            #[allow(unused_mut)]
            let mut entry_1699 = list_1698.entry();
            entry_1699.string(item_1697.as_str());
        }
        list_1698.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1700 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1701) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1700, var_1701,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1702 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1703) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1702, var_1703,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1704 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1705) = &input.accelerator_types {
        let mut list_1707 = scope_1704.start_list(true, Some("item"));
        for item_1706 in var_1705 {
            #[allow(unused_mut)]
            let mut entry_1708 = list_1707.entry();
            entry_1708.string(item_1706.as_str());
        }
        list_1707.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("AcceleratorCount");
    if let Some(var_1710) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1709, var_1710)?;
    }
    #[allow(unused_mut)]
    let mut scope_1711 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1712) = &input.accelerator_manufacturers {
        let mut list_1714 = scope_1711.start_list(true, Some("item"));
        for item_1713 in var_1712 {
            #[allow(unused_mut)]
            let mut entry_1715 = list_1714.entry();
            entry_1715.string(item_1713.as_str());
        }
        list_1714.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1717) = &input.accelerator_names {
        let mut list_1719 = scope_1716.start_list(true, Some("item"));
        for item_1718 in var_1717 {
            #[allow(unused_mut)]
            let mut entry_1720 = list_1719.entry();
            entry_1720.string(item_1718.as_str());
        }
        list_1719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1722) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1721, var_1722,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("ReplacementStrategy");
    if let Some(var_1724) = &input.replacement_strategy {
        scope_1723.string(var_1724.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("TerminationDelay");
    if let Some(var_1726) = &input.termination_delay {
        scope_1725.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1726).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("GroupName");
    if let Some(var_1728) = &input.group_name {
        scope_1727.string(var_1728);
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("GroupId");
    if let Some(var_1730) = &input.group_id {
        scope_1729.string(var_1730);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1731 = writer.prefix("Enabled");
    if let Some(var_1732) = &input.enabled {
        scope_1731.boolean(*var_1732);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1733 = writer.prefix("ResourceType");
    if let Some(var_1734) = &input.resource_type {
        scope_1733.string(var_1734.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("Tag");
    if let Some(var_1736) = &input.tags {
        let mut list_1738 = scope_1735.start_list(true, Some("item"));
        for item_1737 in var_1736 {
            #[allow(unused_mut)]
            let mut entry_1739 = list_1738.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1739, item_1737)?;
        }
        list_1738.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1741) = &input.classic_load_balancers {
        let mut list_1743 = scope_1740.start_list(true, Some("item"));
        for item_1742 in var_1741 {
            #[allow(unused_mut)]
            let mut entry_1744 = list_1743.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1744, item_1742,
            )?;
        }
        list_1743.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1745 = writer.prefix("TargetGroups");
    if let Some(var_1746) = &input.target_groups {
        let mut list_1748 = scope_1745.start_list(true, Some("item"));
        for item_1747 in var_1746 {
            #[allow(unused_mut)]
            let mut entry_1749 = list_1748.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1749, item_1747)?;
        }
        list_1748.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("DeleteOnTermination");
    if let Some(var_1751) = &input.delete_on_termination {
        scope_1750.boolean(*var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("Encrypted");
    if let Some(var_1753) = &input.encrypted {
        scope_1752.boolean(*var_1753);
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("Iops");
    if let Some(var_1755) = &input.iops {
        scope_1754.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1755).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("SnapshotId");
    if let Some(var_1757) = &input.snapshot_id {
        scope_1756.string(var_1757);
    }
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("VolumeSize");
    if let Some(var_1759) = &input.volume_size {
        scope_1758.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1759).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("VolumeType");
    if let Some(var_1761) = &input.volume_type {
        scope_1760.string(var_1761);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("Ipv6Address");
    if let Some(var_1763) = &input.ipv6_address {
        scope_1762.string(var_1763);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("Primary");
    if let Some(var_1765) = &input.primary {
        scope_1764.boolean(*var_1765);
    }
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("PrivateIpAddress");
    if let Some(var_1767) = &input.private_ip_address {
        scope_1766.string(var_1767);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("Min");
    if let Some(var_1769) = &input.min {
        scope_1768.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1769).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("Max");
    if let Some(var_1771) = &input.max {
        scope_1770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1771).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("Min");
    if let Some(var_1773) = &input.min {
        scope_1772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1773).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("Max");
    if let Some(var_1775) = &input.max {
        scope_1774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("Min");
    if let Some(var_1777) = &input.min {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1777).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Max");
    if let Some(var_1779) = &input.max {
        scope_1778.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1779).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("Min");
    if let Some(var_1781) = &input.min {
        scope_1780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1781).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("Max");
    if let Some(var_1783) = &input.max {
        scope_1782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1783).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("Min");
    if let Some(var_1785) = &input.min {
        scope_1784.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1785).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("Max");
    if let Some(var_1787) = &input.max {
        scope_1786.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1787).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("Min");
    if let Some(var_1789) = &input.min {
        scope_1788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1789).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("Max");
    if let Some(var_1791) = &input.max {
        scope_1790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1791).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("Min");
    if let Some(var_1793) = &input.min {
        scope_1792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1793).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("Max");
    if let Some(var_1795) = &input.max {
        scope_1794.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1795).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Min");
    if let Some(var_1797) = &input.min {
        scope_1796.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1797).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("Max");
    if let Some(var_1799) = &input.max {
        scope_1798.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1799).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("Name");
    if let Some(var_1801) = &input.name {
        scope_1800.string(var_1801);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("Arn");
    if let Some(var_1803) = &input.arn {
        scope_1802.string(var_1803);
    }
    Ok(())
}
