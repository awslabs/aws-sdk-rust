// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_target_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_tag_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_tag(entry_11, item_9);
        }
        list_10.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_iam_instance_profile_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_ip_permission(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("FromPort");
    if let Some(var_17) = &input.from_port {
        scope_16.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("IpProtocol");
    if let Some(var_19) = &input.ip_protocol {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("IpRanges");
    if let Some(var_21) = &input.ip_ranges {
        let mut list_23 = scope_20.start_list(true, Some("item"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            crate::query_ser::serialize_structure_ip_range(entry_24, item_22);
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("Ipv6Ranges");
    if let Some(var_26) = &input.ipv6_ranges {
        let mut list_28 = scope_25.start_list(true, Some("item"));
        for item_27 in var_26 {
            #[allow(unused_mut)]
            let mut entry_29 = list_28.entry();
            crate::query_ser::serialize_structure_ipv6_range(entry_29, item_27);
        }
        list_28.finish();
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("PrefixListIds");
    if let Some(var_31) = &input.prefix_list_ids {
        let mut list_33 = scope_30.start_list(true, Some("item"));
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            crate::query_ser::serialize_structure_prefix_list_id(entry_34, item_32);
        }
        list_33.finish();
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("ToPort");
    if let Some(var_36) = &input.to_port {
        scope_35.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("Groups");
    if let Some(var_38) = &input.user_id_group_pairs {
        let mut list_40 = scope_37.start_list(true, Some("item"));
        for item_39 in var_38 {
            #[allow(unused_mut)]
            let mut entry_41 = list_40.entry();
            crate::query_ser::serialize_structure_user_id_group_pair(entry_41, item_39);
        }
        list_40.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_storage(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) {
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("S3");
    if let Some(var_43) = &input.s3 {
        crate::query_ser::serialize_structure_s3_storage(scope_42, var_43);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_client_vpn_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("Type");
    if let Some(var_45) = &input.r#type {
        scope_44.string(var_45.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("ActiveDirectory");
    if let Some(var_47) = &input.active_directory {
        crate::query_ser::serialize_structure_directory_service_authentication_request(
            scope_46, var_47,
        );
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("MutualAuthentication");
    if let Some(var_49) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_certificate_authentication_request(scope_48, var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("FederatedAuthentication");
    if let Some(var_51) = &input.federated_authentication {
        crate::query_ser::serialize_structure_federated_authentication_request(scope_50, var_51);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_connection_log_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) {
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Enabled");
    if let Some(var_53) = &input.enabled {
        scope_52.boolean(*var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_55) = &input.cloudwatch_log_group {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("CloudwatchLogStream");
    if let Some(var_57) = &input.cloudwatch_log_stream {
        scope_56.string(var_57);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_client_connect_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) {
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("Enabled");
    if let Some(var_59) = &input.enabled {
        scope_58.boolean(*var_59);
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("LambdaFunctionArn");
    if let Some(var_61) = &input.lambda_function_arn {
        scope_60.string(var_61);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_new_dhcp_configuration(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) {
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("Key");
    if let Some(var_63) = &input.key {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("Value");
    if let Some(var_65) = &input.values {
        let mut list_67 = scope_64.start_list(true, Some("item"));
        for item_66 in var_65 {
            #[allow(unused_mut)]
            let mut entry_68 = list_67.entry();
            entry_68.string(item_66);
        }
        list_67.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("AllocationStrategy");
    if let Some(var_70) = &input.allocation_strategy {
        scope_69.string(var_70.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("MaintenanceStrategies");
    if let Some(var_72) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_fleet_spot_maintenance_strategies_request(
            scope_71, var_72,
        );
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_74) = &input.instance_interruption_behavior {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_76) = &input.instance_pools_to_use_count {
        scope_75.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_76).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("SingleInstanceType");
    if let Some(var_78) = &input.single_instance_type {
        scope_77.boolean(*var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_80) = &input.single_availability_zone {
        scope_79.boolean(*var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("MinTargetCapacity");
    if let Some(var_82) = &input.min_target_capacity {
        scope_81.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_82).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("MaxTotalPrice");
    if let Some(var_84) = &input.max_total_price {
        scope_83.string(var_84);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_on_demand_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("AllocationStrategy");
    if let Some(var_86) = &input.allocation_strategy {
        scope_85.string(var_86.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("CapacityReservationOptions");
    if let Some(var_88) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_capacity_reservation_options_request(
            scope_87, var_88,
        );
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("SingleInstanceType");
    if let Some(var_90) = &input.single_instance_type {
        scope_89.boolean(*var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_92) = &input.single_availability_zone {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("MinTargetCapacity");
    if let Some(var_94) = &input.min_target_capacity {
        scope_93.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("MaxTotalPrice");
    if let Some(var_96) = &input.max_total_price {
        scope_95.string(var_96);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_fleet_launch_template_config_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) {
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_98) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_fleet_launch_template_specification_request(
            scope_97, var_98,
        );
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("Overrides");
    if let Some(var_100) = &input.overrides {
        let mut list_102 = scope_99.start_list(true, Some("item"));
        for item_101 in var_100 {
            #[allow(unused_mut)]
            let mut entry_103 = list_102.entry();
            crate::query_ser::serialize_structure_fleet_launch_template_overrides_request(
                entry_103, item_101,
            );
        }
        list_102.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_target_capacity_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("TotalTargetCapacity");
    if let Some(var_105) = &input.total_target_capacity {
        scope_104.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_105).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_107) = &input.on_demand_target_capacity {
        scope_106.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("SpotTargetCapacity");
    if let Some(var_109) = &input.spot_target_capacity {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_111) = &input.default_target_capacity_type {
        scope_110.string(var_111.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_storage_location(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) {
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Bucket");
    if let Some(var_113) = &input.bucket {
        scope_112.string(var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("Key");
    if let Some(var_115) = &input.key {
        scope_114.string(var_115);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_block_device_mapping(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) {
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("DeviceName");
    if let Some(var_117) = &input.device_name {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("VirtualName");
    if let Some(var_119) = &input.virtual_name {
        scope_118.string(var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("Ebs");
    if let Some(var_121) = &input.ebs {
        crate::query_ser::serialize_structure_ebs_block_device(scope_120, var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("NoDevice");
    if let Some(var_123) = &input.no_device {
        scope_122.string(var_123);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_export_to_s3_task_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("ContainerFormat");
    if let Some(var_125) = &input.container_format {
        scope_124.string(var_125.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("DiskImageFormat");
    if let Some(var_127) = &input.disk_image_format {
        scope_126.string(var_127.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("S3Bucket");
    if let Some(var_129) = &input.s3_bucket {
        scope_128.string(var_129);
    }
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("S3Prefix");
    if let Some(var_131) = &input.s3_prefix {
        scope_130.string(var_131);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_request_launch_template_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) {
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("KernelId");
    if let Some(var_133) = &input.kernel_id {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("EbsOptimized");
    if let Some(var_135) = &input.ebs_optimized {
        scope_134.boolean(*var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("IamInstanceProfile");
    if let Some(var_137) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_launch_template_iam_instance_profile_specification_request(scope_136, var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("BlockDeviceMapping");
    if let Some(var_139) = &input.block_device_mappings {
        let mut list_141 = scope_138.start_list(true, Some("BlockDeviceMapping"));
        for item_140 in var_139 {
            #[allow(unused_mut)]
            let mut entry_142 = list_141.entry();
            crate::query_ser::serialize_structure_launch_template_block_device_mapping_request(
                entry_142, item_140,
            );
        }
        list_141.finish();
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("NetworkInterface");
    if let Some(var_144) = &input.network_interfaces {
        let mut list_146 =
            scope_143.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_145 in var_144 {
            #[allow(unused_mut)]
            let mut entry_147 = list_146.entry();
            crate::query_ser::serialize_structure_launch_template_instance_network_interface_specification_request(entry_147, item_145);
        }
        list_146.finish();
    }
    #[allow(unused_mut)]
    let mut scope_148 = writer.prefix("ImageId");
    if let Some(var_149) = &input.image_id {
        scope_148.string(var_149);
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("InstanceType");
    if let Some(var_151) = &input.instance_type {
        scope_150.string(var_151.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("KeyName");
    if let Some(var_153) = &input.key_name {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("Monitoring");
    if let Some(var_155) = &input.monitoring {
        crate::query_ser::serialize_structure_launch_templates_monitoring_request(
            scope_154, var_155,
        );
    }
    #[allow(unused_mut)]
    let mut scope_156 = writer.prefix("Placement");
    if let Some(var_157) = &input.placement {
        crate::query_ser::serialize_structure_launch_template_placement_request(scope_156, var_157);
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("RamDiskId");
    if let Some(var_159) = &input.ram_disk_id {
        scope_158.string(var_159);
    }
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("DisableApiTermination");
    if let Some(var_161) = &input.disable_api_termination {
        scope_160.boolean(*var_161);
    }
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_163) = &input.instance_initiated_shutdown_behavior {
        scope_162.string(var_163.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("UserData");
    if let Some(var_165) = &input.user_data {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("TagSpecification");
    if let Some(var_167) = &input.tag_specifications {
        let mut list_169 =
            scope_166.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_168 in var_167 {
            #[allow(unused_mut)]
            let mut entry_170 = list_169.entry();
            crate::query_ser::serialize_structure_launch_template_tag_specification_request(
                entry_170, item_168,
            );
        }
        list_169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_172) = &input.elastic_gpu_specifications {
        let mut list_174 = scope_171.start_list(true, Some("ElasticGpuSpecification"));
        for item_173 in var_172 {
            #[allow(unused_mut)]
            let mut entry_175 = list_174.entry();
            crate::query_ser::serialize_structure_elastic_gpu_specification(entry_175, item_173);
        }
        list_174.finish();
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_177) = &input.elastic_inference_accelerators {
        let mut list_179 = scope_176.start_list(true, Some("item"));
        for item_178 in var_177 {
            #[allow(unused_mut)]
            let mut entry_180 = list_179.entry();
            crate::query_ser::serialize_structure_launch_template_elastic_inference_accelerator(
                entry_180, item_178,
            );
        }
        list_179.finish();
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("SecurityGroupId");
    if let Some(var_182) = &input.security_group_ids {
        let mut list_184 = scope_181.start_list(true, Some("SecurityGroupId"));
        for item_183 in var_182 {
            #[allow(unused_mut)]
            let mut entry_185 = list_184.entry();
            entry_185.string(item_183);
        }
        list_184.finish();
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("SecurityGroup");
    if let Some(var_187) = &input.security_groups {
        let mut list_189 = scope_186.start_list(true, Some("SecurityGroup"));
        for item_188 in var_187 {
            #[allow(unused_mut)]
            let mut entry_190 = list_189.entry();
            entry_190.string(item_188);
        }
        list_189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("InstanceMarketOptions");
    if let Some(var_192) = &input.instance_market_options {
        crate::query_ser::serialize_structure_launch_template_instance_market_options_request(
            scope_191, var_192,
        );
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("CreditSpecification");
    if let Some(var_194) = &input.credit_specification {
        crate::query_ser::serialize_structure_credit_specification_request(scope_193, var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("CpuOptions");
    if let Some(var_196) = &input.cpu_options {
        crate::query_ser::serialize_structure_launch_template_cpu_options_request(
            scope_195, var_196,
        );
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_198) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_launch_template_capacity_reservation_specification_request(scope_197, var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("LicenseSpecification");
    if let Some(var_200) = &input.license_specifications {
        let mut list_202 = scope_199.start_list(true, Some("item"));
        for item_201 in var_200 {
            #[allow(unused_mut)]
            let mut entry_203 = list_202.entry();
            crate::query_ser::serialize_structure_launch_template_license_configuration_request(
                entry_203, item_201,
            );
        }
        list_202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("HibernationOptions");
    if let Some(var_205) = &input.hibernation_options {
        crate::query_ser::serialize_structure_launch_template_hibernation_options_request(
            scope_204, var_205,
        );
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("MetadataOptions");
    if let Some(var_207) = &input.metadata_options {
        crate::query_ser::serialize_structure_launch_template_instance_metadata_options_request(
            scope_206, var_207,
        );
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("EnclaveOptions");
    if let Some(var_209) = &input.enclave_options {
        crate::query_ser::serialize_structure_launch_template_enclave_options_request(
            scope_208, var_209,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_add_prefix_list_entry(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) {
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("Cidr");
    if let Some(var_211) = &input.cidr {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("Description");
    if let Some(var_213) = &input.description {
        scope_212.string(var_213);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_icmp_type_code(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) {
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("Code");
    if let Some(var_215) = &input.code {
        scope_214.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("Type");
    if let Some(var_217) = &input.r#type {
        scope_216.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_217).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_port_range(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) {
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("From");
    if let Some(var_219) = &input.from {
        scope_218.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("To");
    if let Some(var_221) = &input.to {
        scope_220.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_221).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_ipv6_address(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) {
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("Ipv6Address");
    if let Some(var_223) = &input.ipv6_address {
        scope_222.string(var_223);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_private_ip_address_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("Primary");
    if let Some(var_225) = &input.primary {
        scope_224.boolean(*var_225);
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("PrivateIpAddress");
    if let Some(var_227) = &input.private_ip_address {
        scope_226.string(var_227);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_price_schedule_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("CurrencyCode");
    if let Some(var_229) = &input.currency_code {
        scope_228.string(var_229.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("Price");
    if let Some(var_231) = &input.price {
        scope_230.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_231).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("Term");
    if let Some(var_233) = &input.term {
        scope_232.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_233).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("InstanceId");
    if let Some(var_235) = &input.instance_id {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("ExcludeBootVolume");
    if let Some(var_237) = &input.exclude_boot_volume {
        scope_236.boolean(*var_237);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_s3_object_tag(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) {
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("Key");
    if let Some(var_239) = &input.key {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Value");
    if let Some(var_241) = &input.value {
        scope_240.string(var_241);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_tag(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) {
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Key");
    if let Some(var_243) = &input.key {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Value");
    if let Some(var_245) = &input.value {
        scope_244.string(var_245);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_traffic_mirror_port_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("FromPort");
    if let Some(var_247) = &input.from_port {
        scope_246.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("ToPort");
    if let Some(var_249) = &input.to_port {
        scope_248.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_249).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_transit_gateway_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("AmazonSideAsn");
    if let Some(var_251) = &input.amazon_side_asn {
        scope_250.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_253) = &input.auto_accept_shared_attachments {
        scope_252.string(var_253.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_255) = &input.default_route_table_association {
        scope_254.string(var_255.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_257) = &input.default_route_table_propagation {
        scope_256.string(var_257.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("VpnEcmpSupport");
    if let Some(var_259) = &input.vpn_ecmp_support {
        scope_258.string(var_259.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("DnsSupport");
    if let Some(var_261) = &input.dns_support {
        scope_260.string(var_261.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("MulticastSupport");
    if let Some(var_263) = &input.multicast_support {
        scope_262.string(var_263.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_265) = &input.transit_gateway_cidr_blocks {
        let mut list_267 = scope_264.start_list(true, Some("item"));
        for item_266 in var_265 {
            #[allow(unused_mut)]
            let mut entry_268 = list_267.entry();
            entry_268.string(item_266);
        }
        list_267.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_create_transit_gateway_connect_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Protocol");
    if let Some(var_270) = &input.protocol {
        scope_269.string(var_270.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_transit_gateway_connect_request_bgp_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) {
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("PeerAsn");
    if let Some(var_272) = &input.peer_asn {
        scope_271.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_272).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_create_transit_gateway_multicast_domain_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Igmpv2Support");
    if let Some(var_274) = &input.igmpv2_support {
        scope_273.string(var_274.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("StaticSourcesSupport");
    if let Some(var_276) = &input.static_sources_support {
        scope_275.string(var_276.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_278) = &input.auto_accept_shared_associations {
        scope_277.string(var_278.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_create_transit_gateway_vpc_attachment_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("DnsSupport");
    if let Some(var_280) = &input.dns_support {
        scope_279.string(var_280.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Ipv6Support");
    if let Some(var_282) = &input.ipv6_support {
        scope_281.string(var_282.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("ApplianceModeSupport");
    if let Some(var_284) = &input.appliance_mode_support {
        scope_283.string(var_284.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_vpn_connection_options_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("EnableAcceleration");
    if let Some(var_286) = &input.enable_acceleration {
        scope_285.boolean(*var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("StaticRoutesOnly");
    if let Some(var_288) = &input.static_routes_only {
        scope_287.boolean(*var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_290) = &input.tunnel_inside_ip_version {
        scope_289.string(var_290.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("TunnelOptions");
    if let Some(var_292) = &input.tunnel_options {
        let mut list_294 = scope_291.start_list(true, None);
        for item_293 in var_292 {
            #[allow(unused_mut)]
            let mut entry_295 = list_294.entry();
            crate::query_ser::serialize_structure_vpn_tunnel_options_specification(
                entry_295, item_293,
            );
        }
        list_294.finish();
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_297) = &input.local_ipv4_network_cidr {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_299) = &input.remote_ipv4_network_cidr {
        scope_298.string(var_299);
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_301) = &input.local_ipv6_network_cidr {
        scope_300.string(var_301);
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_303) = &input.remote_ipv6_network_cidr {
        scope_302.string(var_303);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_deregister_instance_tag_attribute_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_305) = &input.include_all_tags_of_instance {
        scope_304.boolean(*var_305);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("InstanceTagKey");
    if let Some(var_307) = &input.instance_tag_keys {
        let mut list_309 = scope_306.start_list(true, Some("item"));
        for item_308 in var_307 {
            #[allow(unused_mut)]
            let mut entry_310 = list_309.entry();
            entry_310.string(item_308);
        }
        list_309.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_filter(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) {
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("Name");
    if let Some(var_312) = &input.name {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("Value");
    if let Some(var_314) = &input.values {
        let mut list_316 = scope_313.start_list(true, Some("item"));
        for item_315 in var_314 {
            #[allow(unused_mut)]
            let mut entry_317 = list_316.entry();
            entry_317.string(item_315);
        }
        list_316.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_slot_date_time_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("EarliestTime");
    if let Some(var_319) = &input.earliest_time {
        scope_318.instant(var_319, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("LatestTime");
    if let Some(var_321) = &input.latest_time {
        scope_320.instant(var_321, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instance_recurrence_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) {
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("Frequency");
    if let Some(var_323) = &input.frequency {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("Interval");
    if let Some(var_325) = &input.interval {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("OccurrenceDay");
    if let Some(var_327) = &input.occurrence_days {
        let mut list_329 = scope_326.start_list(true, Some("OccurenceDay"));
        for item_328 in var_327 {
            #[allow(unused_mut)]
            let mut entry_330 = list_329.entry();
            entry_330.number(
                #[allow(clippy::useless_conversion)]
                smithy_types::Number::NegInt((*item_328).into()),
            );
        }
        list_329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_332) = &input.occurrence_relative_to_end {
        scope_331.boolean(*var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("OccurrenceUnit");
    if let Some(var_334) = &input.occurrence_unit {
        scope_333.string(var_334);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_slot_start_time_range_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("EarliestTime");
    if let Some(var_336) = &input.earliest_time {
        scope_335.instant(var_336, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("LatestTime");
    if let Some(var_338) = &input.latest_time {
        scope_337.instant(var_338, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_export_task_s3_location_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("S3Bucket");
    if let Some(var_340) = &input.s3_bucket {
        scope_339.string(var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("S3Prefix");
    if let Some(var_342) = &input.s3_prefix {
        scope_341.string(var_342);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_integrate_services(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) {
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("AthenaIntegration");
    if let Some(var_344) = &input.athena_integrations {
        let mut list_346 = scope_343.start_list(true, Some("item"));
        for item_345 in var_344 {
            #[allow(unused_mut)]
            let mut entry_347 = list_346.entry();
            crate::query_ser::serialize_structure_athena_integration(entry_347, item_345);
        }
        list_346.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_client_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) {
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("Comment");
    if let Some(var_349) = &input.comment {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("UploadEnd");
    if let Some(var_351) = &input.upload_end {
        scope_350.instant(var_351, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("UploadSize");
    if let Some(var_353) = &input.upload_size {
        scope_352.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_353).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("UploadStart");
    if let Some(var_355) = &input.upload_start {
        scope_354.instant(var_355, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_image_disk_container(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) {
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("Description");
    if let Some(var_357) = &input.description {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("DeviceName");
    if let Some(var_359) = &input.device_name {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("Format");
    if let Some(var_361) = &input.format {
        scope_360.string(var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("SnapshotId");
    if let Some(var_363) = &input.snapshot_id {
        scope_362.string(var_363);
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("Url");
    if let Some(var_365) = &input.url {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("UserBucket");
    if let Some(var_367) = &input.user_bucket {
        crate::query_ser::serialize_structure_user_bucket(scope_366, var_367);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_import_image_license_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_369) = &input.license_configuration_arn {
        scope_368.string(var_369);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_disk_image(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) {
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("Description");
    if let Some(var_371) = &input.description {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("Image");
    if let Some(var_373) = &input.image {
        crate::query_ser::serialize_structure_disk_image_detail(scope_372, var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("Volume");
    if let Some(var_375) = &input.volume {
        crate::query_ser::serialize_structure_volume_detail(scope_374, var_375);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_import_instance_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("AdditionalInfo");
    if let Some(var_377) = &input.additional_info {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Architecture");
    if let Some(var_379) = &input.architecture {
        scope_378.string(var_379.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("GroupId");
    if let Some(var_381) = &input.group_ids {
        let mut list_383 = scope_380.start_list(true, Some("SecurityGroupId"));
        for item_382 in var_381 {
            #[allow(unused_mut)]
            let mut entry_384 = list_383.entry();
            entry_384.string(item_382);
        }
        list_383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("GroupName");
    if let Some(var_386) = &input.group_names {
        let mut list_388 = scope_385.start_list(true, Some("SecurityGroup"));
        for item_387 in var_386 {
            #[allow(unused_mut)]
            let mut entry_389 = list_388.entry();
            entry_389.string(item_387);
        }
        list_388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_391) = &input.instance_initiated_shutdown_behavior {
        scope_390.string(var_391.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("InstanceType");
    if let Some(var_393) = &input.instance_type {
        scope_392.string(var_393.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("Monitoring");
    if let Some(var_395) = &input.monitoring {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("Placement");
    if let Some(var_397) = &input.placement {
        crate::query_ser::serialize_structure_placement(scope_396, var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("PrivateIpAddress");
    if let Some(var_399) = &input.private_ip_address {
        scope_398.string(var_399);
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("SubnetId");
    if let Some(var_401) = &input.subnet_id {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("UserData");
    if let Some(var_403) = &input.user_data {
        crate::query_ser::serialize_structure_user_data(scope_402, var_403);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_snapshot_disk_container(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) {
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("Description");
    if let Some(var_405) = &input.description {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("Format");
    if let Some(var_407) = &input.format {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("Url");
    if let Some(var_409) = &input.url {
        scope_408.string(var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("UserBucket");
    if let Some(var_411) = &input.user_bucket {
        crate::query_ser::serialize_structure_user_bucket(scope_410, var_411);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_disk_image_detail(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) {
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("Bytes");
    if let Some(var_413) = &input.bytes {
        scope_412.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("Format");
    if let Some(var_415) = &input.format {
        scope_414.string(var_415.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("ImportManifestUrl");
    if let Some(var_417) = &input.import_manifest_url {
        scope_416.string(var_417);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_volume_detail(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) {
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("Size");
    if let Some(var_419) = &input.size {
        scope_418.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_419).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_dns_servers_options_modify_structure(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) {
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("CustomDnsServers");
    if let Some(var_421) = &input.custom_dns_servers {
        let mut list_423 = scope_420.start_list(true, Some("item"));
        for item_422 in var_421 {
            #[allow(unused_mut)]
            let mut entry_424 = list_423.entry();
            entry_424.string(item_422);
        }
        list_423.finish();
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("Enabled");
    if let Some(var_426) = &input.enabled {
        scope_425.boolean(*var_426);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_load_permission_modifications(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) {
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("Add");
    if let Some(var_428) = &input.add {
        let mut list_430 = scope_427.start_list(true, Some("item"));
        for item_429 in var_428 {
            #[allow(unused_mut)]
            let mut entry_431 = list_430.entry();
            crate::query_ser::serialize_structure_load_permission_request(entry_431, item_429);
        }
        list_430.finish();
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("Remove");
    if let Some(var_433) = &input.remove {
        let mut list_435 = scope_432.start_list(true, Some("item"));
        for item_434 in var_433 {
            #[allow(unused_mut)]
            let mut entry_436 = list_435.entry();
            crate::query_ser::serialize_structure_load_permission_request(entry_436, item_434);
        }
        list_435.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_attribute_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) {
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("Value");
    if let Some(var_438) = &input.value {
        scope_437.string(var_438);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_permission_modifications(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) {
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Add");
    if let Some(var_440) = &input.add {
        let mut list_442 = scope_439.start_list(true, Some("item"));
        for item_441 in var_440 {
            #[allow(unused_mut)]
            let mut entry_443 = list_442.entry();
            crate::query_ser::serialize_structure_launch_permission(entry_443, item_441);
        }
        list_442.finish();
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("Remove");
    if let Some(var_445) = &input.remove {
        let mut list_447 = scope_444.start_list(true, Some("item"));
        for item_446 in var_445 {
            #[allow(unused_mut)]
            let mut entry_448 = list_447.entry();
            crate::query_ser::serialize_structure_launch_permission(entry_448, item_446);
        }
        list_447.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_attribute_boolean_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) {
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("Value");
    if let Some(var_450) = &input.value {
        scope_449.boolean(*var_450);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_block_device_mapping_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("DeviceName");
    if let Some(var_452) = &input.device_name {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("Ebs");
    if let Some(var_454) = &input.ebs {
        crate::query_ser::serialize_structure_ebs_instance_block_device_specification(
            scope_453, var_454,
        );
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("NoDevice");
    if let Some(var_456) = &input.no_device {
        scope_455.string(var_456);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("VirtualName");
    if let Some(var_458) = &input.virtual_name {
        scope_457.string(var_458);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_blob_attribute_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) {
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("Value");
    if let Some(var_460) = &input.value {
        scope_459.string(&smithy_types::base64::encode(var_460));
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_capacity_reservation_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("CapacityReservationPreference");
    if let Some(var_462) = &input.capacity_reservation_preference {
        scope_461.string(var_462.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("CapacityReservationTarget");
    if let Some(var_464) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_capacity_reservation_target(scope_463, var_464);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_credit_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("InstanceId");
    if let Some(var_466) = &input.instance_id {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("CpuCredits");
    if let Some(var_468) = &input.cpu_credits {
        scope_467.string(var_468);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_remove_prefix_list_entry(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) {
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("Cidr");
    if let Some(var_470) = &input.cidr {
        scope_469.string(var_470);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_network_interface_attachment_changes(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) {
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("AttachmentId");
    if let Some(var_472) = &input.attachment_id {
        scope_471.string(var_472);
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("DeleteOnTermination");
    if let Some(var_474) = &input.delete_on_termination {
        scope_473.boolean(*var_474);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_reserved_instances_configuration(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) {
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("AvailabilityZone");
    if let Some(var_476) = &input.availability_zone {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("InstanceCount");
    if let Some(var_478) = &input.instance_count {
        scope_477.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_478).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("InstanceType");
    if let Some(var_480) = &input.instance_type {
        scope_479.string(var_480.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("Platform");
    if let Some(var_482) = &input.platform {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("Scope");
    if let Some(var_484) = &input.scope {
        scope_483.string(var_484.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_create_volume_permission_modifications(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) {
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("Add");
    if let Some(var_486) = &input.add {
        let mut list_488 = scope_485.start_list(true, Some("item"));
        for item_487 in var_486 {
            #[allow(unused_mut)]
            let mut entry_489 = list_488.entry();
            crate::query_ser::serialize_structure_create_volume_permission(entry_489, item_487);
        }
        list_488.finish();
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("Remove");
    if let Some(var_491) = &input.remove {
        let mut list_493 = scope_490.start_list(true, Some("item"));
        for item_492 in var_491 {
            #[allow(unused_mut)]
            let mut entry_494 = list_493.entry();
            crate::query_ser::serialize_structure_create_volume_permission(entry_494, item_492);
        }
        list_493.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) {
    #[allow(unused_mut)]
    let mut scope_495 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_496) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_fleet_launch_template_specification(
            scope_495, var_496,
        );
    }
    #[allow(unused_mut)]
    let mut scope_497 = writer.prefix("Overrides");
    if let Some(var_498) = &input.overrides {
        let mut list_500 = scope_497.start_list(true, Some("item"));
        for item_499 in var_498 {
            #[allow(unused_mut)]
            let mut entry_501 = list_500.entry();
            crate::query_ser::serialize_structure_launch_template_overrides(entry_501, item_499);
        }
        list_500.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_modify_transit_gateway_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) {
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_503) = &input.add_transit_gateway_cidr_blocks {
        let mut list_505 = scope_502.start_list(true, Some("item"));
        for item_504 in var_503 {
            #[allow(unused_mut)]
            let mut entry_506 = list_505.entry();
            entry_506.string(item_504);
        }
        list_505.finish();
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_508) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_510 = scope_507.start_list(true, Some("item"));
        for item_509 in var_508 {
            #[allow(unused_mut)]
            let mut entry_511 = list_510.entry();
            entry_511.string(item_509);
        }
        list_510.finish();
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("VpnEcmpSupport");
    if let Some(var_513) = &input.vpn_ecmp_support {
        scope_512.string(var_513.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("DnsSupport");
    if let Some(var_515) = &input.dns_support {
        scope_514.string(var_515.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_517) = &input.auto_accept_shared_attachments {
        scope_516.string(var_517.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_519) = &input.default_route_table_association {
        scope_518.string(var_519.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_521) = &input.association_default_route_table_id {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_523) = &input.default_route_table_propagation {
        scope_522.string(var_523.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_525) = &input.propagation_default_route_table_id {
        scope_524.string(var_525);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) {
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("DnsSupport");
    if let Some(var_527) = &input.dns_support {
        scope_526.string(var_527.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Ipv6Support");
    if let Some(var_529) = &input.ipv6_support {
        scope_528.string(var_529.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("ApplianceModeSupport");
    if let Some(var_531) = &input.appliance_mode_support {
        scope_530.string(var_531.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_peering_connection_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_533) = &input.allow_dns_resolution_from_remote_vpc {
        scope_532.boolean(*var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_535) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_534.boolean(*var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_537) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_536.boolean(*var_537);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_modify_vpn_tunnel_options_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("TunnelInsideCidr");
    if let Some(var_539) = &input.tunnel_inside_cidr {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_541) = &input.tunnel_inside_ipv6_cidr {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("PreSharedKey");
    if let Some(var_543) = &input.pre_shared_key {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_545) = &input.phase1_lifetime_seconds {
        scope_544.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_545).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_547) = &input.phase2_lifetime_seconds {
        scope_546.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_549) = &input.rekey_margin_time_seconds {
        scope_548.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_551) = &input.rekey_fuzz_percentage {
        scope_550.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_551).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("ReplayWindowSize");
    if let Some(var_553) = &input.replay_window_size {
        scope_552.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_553).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_555) = &input.dpd_timeout_seconds {
        scope_554.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_555).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("DPDTimeoutAction");
    if let Some(var_557) = &input.dpd_timeout_action {
        scope_556.string(var_557);
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_559) = &input.phase1_encryption_algorithms {
        let mut list_561 = scope_558.start_list(true, Some("item"));
        for item_560 in var_559 {
            #[allow(unused_mut)]
            let mut entry_562 = list_561.entry();
            crate::query_ser::serialize_structure_phase1_encryption_algorithms_request_list_value(
                entry_562, item_560,
            );
        }
        list_561.finish();
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_564) = &input.phase2_encryption_algorithms {
        let mut list_566 = scope_563.start_list(true, Some("item"));
        for item_565 in var_564 {
            #[allow(unused_mut)]
            let mut entry_567 = list_566.entry();
            crate::query_ser::serialize_structure_phase2_encryption_algorithms_request_list_value(
                entry_567, item_565,
            );
        }
        list_566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_569) = &input.phase1_integrity_algorithms {
        let mut list_571 = scope_568.start_list(true, Some("item"));
        for item_570 in var_569 {
            #[allow(unused_mut)]
            let mut entry_572 = list_571.entry();
            crate::query_ser::serialize_structure_phase1_integrity_algorithms_request_list_value(
                entry_572, item_570,
            );
        }
        list_571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_574) = &input.phase2_integrity_algorithms {
        let mut list_576 = scope_573.start_list(true, Some("item"));
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            crate::query_ser::serialize_structure_phase2_integrity_algorithms_request_list_value(
                entry_577, item_575,
            );
        }
        list_576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_579) = &input.phase1_dh_group_numbers {
        let mut list_581 = scope_578.start_list(true, Some("item"));
        for item_580 in var_579 {
            #[allow(unused_mut)]
            let mut entry_582 = list_581.entry();
            crate::query_ser::serialize_structure_phase1_dh_group_numbers_request_list_value(
                entry_582, item_580,
            );
        }
        list_581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_584) = &input.phase2_dh_group_numbers {
        let mut list_586 = scope_583.start_list(true, Some("item"));
        for item_585 in var_584 {
            #[allow(unused_mut)]
            let mut entry_587 = list_586.entry();
            crate::query_ser::serialize_structure_phase2_dh_group_numbers_request_list_value(
                entry_587, item_585,
            );
        }
        list_586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("IKEVersion");
    if let Some(var_589) = &input.ike_versions {
        let mut list_591 = scope_588.start_list(true, Some("item"));
        for item_590 in var_589 {
            #[allow(unused_mut)]
            let mut entry_592 = list_591.entry();
            crate::query_ser::serialize_structure_ike_versions_request_list_value(
                entry_592, item_590,
            );
        }
        list_591.finish();
    }
    #[allow(unused_mut)]
    let mut scope_593 = writer.prefix("StartupAction");
    if let Some(var_594) = &input.startup_action {
        scope_593.string(var_594);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_cidr_authorization_context(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) {
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("Message");
    if let Some(var_596) = &input.message {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("Signature");
    if let Some(var_598) = &input.signature {
        scope_597.string(var_598);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_reserved_instance_limit_price(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) {
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Amount");
    if let Some(var_600) = &input.amount {
        scope_599.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_600).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("CurrencyCode");
    if let Some(var_602) = &input.currency_code {
        scope_601.string(var_602.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_purchase_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) {
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("InstanceCount");
    if let Some(var_604) = &input.instance_count {
        scope_603.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_604).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("PurchaseToken");
    if let Some(var_606) = &input.purchase_token {
        scope_605.string(var_606);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_register_instance_tag_attribute_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) {
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_608) = &input.include_all_tags_of_instance {
        scope_607.boolean(*var_608);
    }
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("InstanceTagKey");
    if let Some(var_610) = &input.instance_tag_keys {
        let mut list_612 = scope_609.start_list(true, Some("item"));
        for item_611 in var_610 {
            #[allow(unused_mut)]
            let mut entry_613 = list_612.entry();
            entry_613.string(item_611);
        }
        list_612.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_fleet_request_config_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) {
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("AllocationStrategy");
    if let Some(var_615) = &input.allocation_strategy {
        scope_614.string(var_615.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_617) = &input.on_demand_allocation_strategy {
        scope_616.string(var_617.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_619) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_spot_maintenance_strategies(scope_618, var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("ClientToken");
    if let Some(var_621) = &input.client_token {
        scope_620.string(var_621);
    }
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_623) = &input.excess_capacity_termination_policy {
        scope_622.string(var_623.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("FulfilledCapacity");
    if let Some(var_625) = &input.fulfilled_capacity {
        scope_624.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_625).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_627) = &input.on_demand_fulfilled_capacity {
        scope_626.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_627).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("IamFleetRole");
    if let Some(var_629) = &input.iam_fleet_role {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("LaunchSpecifications");
    if let Some(var_631) = &input.launch_specifications {
        let mut list_633 = scope_630.start_list(true, Some("item"));
        for item_632 in var_631 {
            #[allow(unused_mut)]
            let mut entry_634 = list_633.entry();
            crate::query_ser::serialize_structure_spot_fleet_launch_specification(
                entry_634, item_632,
            );
        }
        list_633.finish();
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_636) = &input.launch_template_configs {
        let mut list_638 = scope_635.start_list(true, Some("item"));
        for item_637 in var_636 {
            #[allow(unused_mut)]
            let mut entry_639 = list_638.entry();
            crate::query_ser::serialize_structure_launch_template_config(entry_639, item_637);
        }
        list_638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("SpotPrice");
    if let Some(var_641) = &input.spot_price {
        scope_640.string(var_641);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("TargetCapacity");
    if let Some(var_643) = &input.target_capacity {
        scope_642.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_643).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_645) = &input.on_demand_target_capacity {
        scope_644.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_645).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_647) = &input.on_demand_max_total_price {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_649) = &input.spot_max_total_price {
        scope_648.string(var_649);
    }
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_651) = &input.terminate_instances_with_expiration {
        scope_650.boolean(*var_651);
    }
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("Type");
    if let Some(var_653) = &input.r#type {
        scope_652.string(var_653.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("ValidFrom");
    if let Some(var_655) = &input.valid_from {
        scope_654.instant(var_655, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("ValidUntil");
    if let Some(var_657) = &input.valid_until {
        scope_656.instant(var_657, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_659) = &input.replace_unhealthy_instances {
        scope_658.boolean(*var_659);
    }
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_661) = &input.instance_interruption_behavior {
        scope_660.string(var_661.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("LoadBalancersConfig");
    if let Some(var_663) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_load_balancers_config(scope_662, var_663);
    }
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_665) = &input.instance_pools_to_use_count {
        scope_664.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_665).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("TagSpecification");
    if let Some(var_667) = &input.tag_specifications {
        let mut list_669 = scope_666.start_list(true, Some("item"));
        for item_668 in var_667 {
            #[allow(unused_mut)]
            let mut entry_670 = list_669.entry();
            crate::query_ser::serialize_structure_tag_specification(entry_670, item_668);
        }
        list_669.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_request_spot_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("SecurityGroupId");
    if let Some(var_672) = &input.security_group_ids {
        let mut list_674 = scope_671.start_list(true, Some("item"));
        for item_673 in var_672 {
            #[allow(unused_mut)]
            let mut entry_675 = list_674.entry();
            entry_675.string(item_673);
        }
        list_674.finish();
    }
    #[allow(unused_mut)]
    let mut scope_676 = writer.prefix("SecurityGroup");
    if let Some(var_677) = &input.security_groups {
        let mut list_679 = scope_676.start_list(true, Some("item"));
        for item_678 in var_677 {
            #[allow(unused_mut)]
            let mut entry_680 = list_679.entry();
            entry_680.string(item_678);
        }
        list_679.finish();
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("AddressingType");
    if let Some(var_682) = &input.addressing_type {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("BlockDeviceMapping");
    if let Some(var_684) = &input.block_device_mappings {
        let mut list_686 = scope_683.start_list(true, Some("item"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_687, item_685);
        }
        list_686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("EbsOptimized");
    if let Some(var_689) = &input.ebs_optimized {
        scope_688.boolean(*var_689);
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("IamInstanceProfile");
    if let Some(var_691) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_690, var_691,
        );
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("ImageId");
    if let Some(var_693) = &input.image_id {
        scope_692.string(var_693);
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("InstanceType");
    if let Some(var_695) = &input.instance_type {
        scope_694.string(var_695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("KernelId");
    if let Some(var_697) = &input.kernel_id {
        scope_696.string(var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("KeyName");
    if let Some(var_699) = &input.key_name {
        scope_698.string(var_699);
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("Monitoring");
    if let Some(var_701) = &input.monitoring {
        crate::query_ser::serialize_structure_run_instances_monitoring_enabled(scope_700, var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("NetworkInterface");
    if let Some(var_703) = &input.network_interfaces {
        let mut list_705 = scope_702.start_list(true, Some("item"));
        for item_704 in var_703 {
            #[allow(unused_mut)]
            let mut entry_706 = list_705.entry();
            crate::query_ser::serialize_structure_instance_network_interface_specification(
                entry_706, item_704,
            );
        }
        list_705.finish();
    }
    #[allow(unused_mut)]
    let mut scope_707 = writer.prefix("Placement");
    if let Some(var_708) = &input.placement {
        crate::query_ser::serialize_structure_spot_placement(scope_707, var_708);
    }
    #[allow(unused_mut)]
    let mut scope_709 = writer.prefix("RamdiskId");
    if let Some(var_710) = &input.ramdisk_id {
        scope_709.string(var_710);
    }
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("SubnetId");
    if let Some(var_712) = &input.subnet_id {
        scope_711.string(var_712);
    }
    #[allow(unused_mut)]
    let mut scope_713 = writer.prefix("UserData");
    if let Some(var_714) = &input.user_data {
        scope_713.string(var_714);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_run_instances_monitoring_enabled(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) {
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("Enabled");
    if let Some(var_716) = &input.enabled {
        scope_715.boolean(*var_716);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_placement(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) {
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("AvailabilityZone");
    if let Some(var_718) = &input.availability_zone {
        scope_717.string(var_718);
    }
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("Affinity");
    if let Some(var_720) = &input.affinity {
        scope_719.string(var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("GroupName");
    if let Some(var_722) = &input.group_name {
        scope_721.string(var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("PartitionNumber");
    if let Some(var_724) = &input.partition_number {
        scope_723.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_724).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("HostId");
    if let Some(var_726) = &input.host_id {
        scope_725.string(var_726);
    }
    #[allow(unused_mut)]
    let mut scope_727 = writer.prefix("Tenancy");
    if let Some(var_728) = &input.tenancy {
        scope_727.string(var_728.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_729 = writer.prefix("SpreadDomain");
    if let Some(var_730) = &input.spread_domain {
        scope_729.string(var_730);
    }
    #[allow(unused_mut)]
    let mut scope_731 = writer.prefix("HostResourceGroupArn");
    if let Some(var_732) = &input.host_resource_group_arn {
        scope_731.string(var_732);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_network_interface_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_734) = &input.associate_public_ip_address {
        scope_733.boolean(*var_734);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("DeleteOnTermination");
    if let Some(var_736) = &input.delete_on_termination {
        scope_735.boolean(*var_736);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("Description");
    if let Some(var_738) = &input.description {
        scope_737.string(var_738);
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("DeviceIndex");
    if let Some(var_740) = &input.device_index {
        scope_739.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_740).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("SecurityGroupId");
    if let Some(var_742) = &input.groups {
        let mut list_744 = scope_741.start_list(true, Some("SecurityGroupId"));
        for item_743 in var_742 {
            #[allow(unused_mut)]
            let mut entry_745 = list_744.entry();
            entry_745.string(item_743);
        }
        list_744.finish();
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("Ipv6AddressCount");
    if let Some(var_747) = &input.ipv6_address_count {
        scope_746.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("Ipv6Addresses");
    if let Some(var_749) = &input.ipv6_addresses {
        let mut list_751 = scope_748.start_list(true, Some("item"));
        for item_750 in var_749 {
            #[allow(unused_mut)]
            let mut entry_752 = list_751.entry();
            crate::query_ser::serialize_structure_instance_ipv6_address(entry_752, item_750);
        }
        list_751.finish();
    }
    #[allow(unused_mut)]
    let mut scope_753 = writer.prefix("NetworkInterfaceId");
    if let Some(var_754) = &input.network_interface_id {
        scope_753.string(var_754);
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("PrivateIpAddress");
    if let Some(var_756) = &input.private_ip_address {
        scope_755.string(var_756);
    }
    #[allow(unused_mut)]
    let mut scope_757 = writer.prefix("PrivateIpAddresses");
    if let Some(var_758) = &input.private_ip_addresses {
        let mut list_760 = scope_757.start_list(true, Some("item"));
        for item_759 in var_758 {
            #[allow(unused_mut)]
            let mut entry_761 = list_760.entry();
            crate::query_ser::serialize_structure_private_ip_address_specification(
                entry_761, item_759,
            );
        }
        list_760.finish();
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_763) = &input.secondary_private_ip_address_count {
        scope_762.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_763).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("SubnetId");
    if let Some(var_765) = &input.subnet_id {
        scope_764.string(var_765);
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_767) = &input.associate_carrier_ip_address {
        scope_766.boolean(*var_767);
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("InterfaceType");
    if let Some(var_769) = &input.interface_type {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("NetworkCardIndex");
    if let Some(var_771) = &input.network_card_index {
        scope_770.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_771).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_elastic_gpu_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("Type");
    if let Some(var_773) = &input.r#type {
        scope_772.string(var_773);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_elastic_inference_accelerator(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) {
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("Type");
    if let Some(var_775) = &input.r#type {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("Count");
    if let Some(var_777) = &input.count {
        scope_776.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_777).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_778 = writer.prefix("LaunchTemplateId");
    if let Some(var_779) = &input.launch_template_id {
        scope_778.string(var_779);
    }
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("LaunchTemplateName");
    if let Some(var_781) = &input.launch_template_name {
        scope_780.string(var_781);
    }
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("Version");
    if let Some(var_783) = &input.version {
        scope_782.string(var_783);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_market_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("MarketType");
    if let Some(var_785) = &input.market_type {
        scope_784.string(var_785.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("SpotOptions");
    if let Some(var_787) = &input.spot_options {
        crate::query_ser::serialize_structure_spot_market_options(scope_786, var_787);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_credit_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("CpuCredits");
    if let Some(var_789) = &input.cpu_credits {
        scope_788.string(var_789);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_cpu_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("CoreCount");
    if let Some(var_791) = &input.core_count {
        scope_790.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_791).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("ThreadsPerCore");
    if let Some(var_793) = &input.threads_per_core {
        scope_792.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_793).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_hibernation_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("Configured");
    if let Some(var_795) = &input.configured {
        scope_794.boolean(*var_795);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_license_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_797) = &input.license_configuration_arn {
        scope_796.string(var_797);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_metadata_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("HttpTokens");
    if let Some(var_799) = &input.http_tokens {
        scope_798.string(var_799.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_801) = &input.http_put_response_hop_limit {
        scope_800.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_801).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("HttpEndpoint");
    if let Some(var_803) = &input.http_endpoint {
        scope_802.string(var_803.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_enclave_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("Enabled");
    if let Some(var_805) = &input.enabled {
        scope_804.boolean(*var_805);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("BlockDeviceMapping");
    if let Some(var_807) = &input.block_device_mappings {
        let mut list_809 = scope_806.start_list(true, Some("BlockDeviceMapping"));
        for item_808 in var_807 {
            #[allow(unused_mut)]
            let mut entry_810 = list_809.entry();
            crate::query_ser::serialize_structure_scheduled_instances_block_device_mapping(
                entry_810, item_808,
            );
        }
        list_809.finish();
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("EbsOptimized");
    if let Some(var_812) = &input.ebs_optimized {
        scope_811.boolean(*var_812);
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("IamInstanceProfile");
    if let Some(var_814) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_scheduled_instances_iam_instance_profile(
            scope_813, var_814,
        );
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("ImageId");
    if let Some(var_816) = &input.image_id {
        scope_815.string(var_816);
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("InstanceType");
    if let Some(var_818) = &input.instance_type {
        scope_817.string(var_818);
    }
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("KernelId");
    if let Some(var_820) = &input.kernel_id {
        scope_819.string(var_820);
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("KeyName");
    if let Some(var_822) = &input.key_name {
        scope_821.string(var_822);
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("Monitoring");
    if let Some(var_824) = &input.monitoring {
        crate::query_ser::serialize_structure_scheduled_instances_monitoring(scope_823, var_824);
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("NetworkInterface");
    if let Some(var_826) = &input.network_interfaces {
        let mut list_828 = scope_825.start_list(true, Some("NetworkInterface"));
        for item_827 in var_826 {
            #[allow(unused_mut)]
            let mut entry_829 = list_828.entry();
            crate::query_ser::serialize_structure_scheduled_instances_network_interface(
                entry_829, item_827,
            );
        }
        list_828.finish();
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("Placement");
    if let Some(var_831) = &input.placement {
        crate::query_ser::serialize_structure_scheduled_instances_placement(scope_830, var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("RamdiskId");
    if let Some(var_833) = &input.ramdisk_id {
        scope_832.string(var_833);
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("SecurityGroupId");
    if let Some(var_835) = &input.security_group_ids {
        let mut list_837 = scope_834.start_list(true, Some("SecurityGroupId"));
        for item_836 in var_835 {
            #[allow(unused_mut)]
            let mut entry_838 = list_837.entry();
            entry_838.string(item_836);
        }
        list_837.finish();
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("SubnetId");
    if let Some(var_840) = &input.subnet_id {
        scope_839.string(var_840);
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("UserData");
    if let Some(var_842) = &input.user_data {
        scope_841.string(var_842);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_ip_range(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) {
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("CidrIp");
    if let Some(var_844) = &input.cidr_ip {
        scope_843.string(var_844);
    }
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("Description");
    if let Some(var_846) = &input.description {
        scope_845.string(var_846);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_ipv6_range(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) {
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("CidrIpv6");
    if let Some(var_848) = &input.cidr_ipv6 {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("Description");
    if let Some(var_850) = &input.description {
        scope_849.string(var_850);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_prefix_list_id(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) {
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("Description");
    if let Some(var_852) = &input.description {
        scope_851.string(var_852);
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("PrefixListId");
    if let Some(var_854) = &input.prefix_list_id {
        scope_853.string(var_854);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_user_id_group_pair(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) {
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("Description");
    if let Some(var_856) = &input.description {
        scope_855.string(var_856);
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("GroupId");
    if let Some(var_858) = &input.group_id {
        scope_857.string(var_858);
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("GroupName");
    if let Some(var_860) = &input.group_name {
        scope_859.string(var_860);
    }
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("PeeringStatus");
    if let Some(var_862) = &input.peering_status {
        scope_861.string(var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("UserId");
    if let Some(var_864) = &input.user_id {
        scope_863.string(var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("VpcId");
    if let Some(var_866) = &input.vpc_id {
        scope_865.string(var_866);
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_868) = &input.vpc_peering_connection_id {
        scope_867.string(var_868);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_s3_storage(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) {
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("AWSAccessKeyId");
    if let Some(var_870) = &input.aws_access_key_id {
        scope_869.string(var_870);
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("Bucket");
    if let Some(var_872) = &input.bucket {
        scope_871.string(var_872);
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("Prefix");
    if let Some(var_874) = &input.prefix {
        scope_873.string(var_874);
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("UploadPolicy");
    if let Some(var_876) = &input.upload_policy {
        scope_875.string(&smithy_types::base64::encode(var_876));
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("UploadPolicySignature");
    if let Some(var_878) = &input.upload_policy_signature {
        scope_877.string(var_878);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_directory_service_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("DirectoryId");
    if let Some(var_880) = &input.directory_id {
        scope_879.string(var_880);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_certificate_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_882) = &input.client_root_certificate_chain_arn {
        scope_881.string(var_882);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_federated_authentication_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("SAMLProviderArn");
    if let Some(var_884) = &input.saml_provider_arn {
        scope_883.string(var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_886) = &input.self_service_saml_provider_arn {
        scope_885.string(var_886);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_fleet_spot_maintenance_strategies_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) {
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("CapacityRebalance");
    if let Some(var_888) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_fleet_spot_capacity_rebalance_request(
            scope_887, var_888,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_capacity_reservation_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("UsageStrategy");
    if let Some(var_890) = &input.usage_strategy {
        scope_889.string(var_890.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_fleet_launch_template_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("LaunchTemplateId");
    if let Some(var_892) = &input.launch_template_id {
        scope_891.string(var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("LaunchTemplateName");
    if let Some(var_894) = &input.launch_template_name {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("Version");
    if let Some(var_896) = &input.version {
        scope_895.string(var_896);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_fleet_launch_template_overrides_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) {
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("InstanceType");
    if let Some(var_898) = &input.instance_type {
        scope_897.string(var_898.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("MaxPrice");
    if let Some(var_900) = &input.max_price {
        scope_899.string(var_900);
    }
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("SubnetId");
    if let Some(var_902) = &input.subnet_id {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("AvailabilityZone");
    if let Some(var_904) = &input.availability_zone {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("WeightedCapacity");
    if let Some(var_906) = &input.weighted_capacity {
        scope_905.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_906).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("Priority");
    if let Some(var_908) = &input.priority {
        scope_907.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_908).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("Placement");
    if let Some(var_910) = &input.placement {
        crate::query_ser::serialize_structure_placement(scope_909, var_910);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_ebs_block_device(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) {
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("DeleteOnTermination");
    if let Some(var_912) = &input.delete_on_termination {
        scope_911.boolean(*var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("Iops");
    if let Some(var_914) = &input.iops {
        scope_913.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_914).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("SnapshotId");
    if let Some(var_916) = &input.snapshot_id {
        scope_915.string(var_916);
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("VolumeSize");
    if let Some(var_918) = &input.volume_size {
        scope_917.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_918).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("VolumeType");
    if let Some(var_920) = &input.volume_type {
        scope_919.string(var_920.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("KmsKeyId");
    if let Some(var_922) = &input.kms_key_id {
        scope_921.string(var_922);
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("Throughput");
    if let Some(var_924) = &input.throughput {
        scope_923.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_924).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("OutpostArn");
    if let Some(var_926) = &input.outpost_arn {
        scope_925.string(var_926);
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("Encrypted");
    if let Some(var_928) = &input.encrypted {
        scope_927.boolean(*var_928);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_iam_instance_profile_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("Arn");
    if let Some(var_930) = &input.arn {
        scope_929.string(var_930);
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("Name");
    if let Some(var_932) = &input.name {
        scope_931.string(var_932);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_block_device_mapping_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) {
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("DeviceName");
    if let Some(var_934) = &input.device_name {
        scope_933.string(var_934);
    }
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("VirtualName");
    if let Some(var_936) = &input.virtual_name {
        scope_935.string(var_936);
    }
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("Ebs");
    if let Some(var_938) = &input.ebs {
        crate::query_ser::serialize_structure_launch_template_ebs_block_device_request(
            scope_937, var_938,
        );
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("NoDevice");
    if let Some(var_940) = &input.no_device {
        scope_939.string(var_940);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_instance_network_interface_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_942) = &input.associate_carrier_ip_address {
        scope_941.boolean(*var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_944) = &input.associate_public_ip_address {
        scope_943.boolean(*var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("DeleteOnTermination");
    if let Some(var_946) = &input.delete_on_termination {
        scope_945.boolean(*var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("Description");
    if let Some(var_948) = &input.description {
        scope_947.string(var_948);
    }
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("DeviceIndex");
    if let Some(var_950) = &input.device_index {
        scope_949.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_950).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("SecurityGroupId");
    if let Some(var_952) = &input.groups {
        let mut list_954 = scope_951.start_list(true, Some("SecurityGroupId"));
        for item_953 in var_952 {
            #[allow(unused_mut)]
            let mut entry_955 = list_954.entry();
            entry_955.string(item_953);
        }
        list_954.finish();
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("InterfaceType");
    if let Some(var_957) = &input.interface_type {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("Ipv6AddressCount");
    if let Some(var_959) = &input.ipv6_address_count {
        scope_958.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_959).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("Ipv6Addresses");
    if let Some(var_961) = &input.ipv6_addresses {
        let mut list_963 = scope_960.start_list(true, Some("InstanceIpv6Address"));
        for item_962 in var_961 {
            #[allow(unused_mut)]
            let mut entry_964 = list_963.entry();
            crate::query_ser::serialize_structure_instance_ipv6_address_request(
                entry_964, item_962,
            );
        }
        list_963.finish();
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("NetworkInterfaceId");
    if let Some(var_966) = &input.network_interface_id {
        scope_965.string(var_966);
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("PrivateIpAddress");
    if let Some(var_968) = &input.private_ip_address {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("PrivateIpAddresses");
    if let Some(var_970) = &input.private_ip_addresses {
        let mut list_972 = scope_969.start_list(true, Some("item"));
        for item_971 in var_970 {
            #[allow(unused_mut)]
            let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_private_ip_address_specification(
                entry_973, item_971,
            );
        }
        list_972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_975) = &input.secondary_private_ip_address_count {
        scope_974.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_975).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("SubnetId");
    if let Some(var_977) = &input.subnet_id {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("NetworkCardIndex");
    if let Some(var_979) = &input.network_card_index {
        scope_978.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_979).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_templates_monitoring_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) {
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Enabled");
    if let Some(var_981) = &input.enabled {
        scope_980.boolean(*var_981);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_placement_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) {
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("AvailabilityZone");
    if let Some(var_983) = &input.availability_zone {
        scope_982.string(var_983);
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("Affinity");
    if let Some(var_985) = &input.affinity {
        scope_984.string(var_985);
    }
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("GroupName");
    if let Some(var_987) = &input.group_name {
        scope_986.string(var_987);
    }
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("HostId");
    if let Some(var_989) = &input.host_id {
        scope_988.string(var_989);
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("Tenancy");
    if let Some(var_991) = &input.tenancy {
        scope_990.string(var_991.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("SpreadDomain");
    if let Some(var_993) = &input.spread_domain {
        scope_992.string(var_993);
    }
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("HostResourceGroupArn");
    if let Some(var_995) = &input.host_resource_group_arn {
        scope_994.string(var_995);
    }
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("PartitionNumber");
    if let Some(var_997) = &input.partition_number {
        scope_996.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_997).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_tag_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("ResourceType");
    if let Some(var_999) = &input.resource_type {
        scope_998.string(var_999.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("Tag");
    if let Some(var_1001) = &input.tags {
        let mut list_1003 = scope_1000.start_list(true, Some("item"));
        for item_1002 in var_1001 {
            #[allow(unused_mut)]
            let mut entry_1004 = list_1003.entry();
            crate::query_ser::serialize_structure_tag(entry_1004, item_1002);
        }
        list_1003.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_elastic_inference_accelerator(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) {
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("Type");
    if let Some(var_1006) = &input.r#type {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("Count");
    if let Some(var_1008) = &input.count {
        scope_1007.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1008).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_instance_market_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1009 = writer.prefix("MarketType");
    if let Some(var_1010) = &input.market_type {
        scope_1009.string(var_1010.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("SpotOptions");
    if let Some(var_1012) = &input.spot_options {
        crate::query_ser::serialize_structure_launch_template_spot_market_options_request(
            scope_1011, var_1012,
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_cpu_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1013 = writer.prefix("CoreCount");
    if let Some(var_1014) = &input.core_count {
        scope_1013.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1014).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1015 = writer.prefix("ThreadsPerCore");
    if let Some(var_1016) = &input.threads_per_core {
        scope_1015.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1016).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_capacity_reservation_specification_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1017 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1018) = &input.capacity_reservation_preference {
        scope_1017.string(var_1018.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1020) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_capacity_reservation_target(scope_1019, var_1020);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_license_configuration_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1022) = &input.license_configuration_arn {
        scope_1021.string(var_1022);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_hibernation_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("Configured");
    if let Some(var_1024) = &input.configured {
        scope_1023.boolean(*var_1024);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_instance_metadata_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("HttpTokens");
    if let Some(var_1026) = &input.http_tokens {
        scope_1025.string(var_1026.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1028) = &input.http_put_response_hop_limit {
        scope_1027.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1028).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("HttpEndpoint");
    if let Some(var_1030) = &input.http_endpoint {
        scope_1029.string(var_1030.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_enclave_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("Enabled");
    if let Some(var_1032) = &input.enabled {
        scope_1031.boolean(*var_1032);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_vpn_tunnel_options_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1034) = &input.tunnel_inside_cidr {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1036) = &input.tunnel_inside_ipv6_cidr {
        scope_1035.string(var_1036);
    }
    #[allow(unused_mut)]
    let mut scope_1037 = writer.prefix("PreSharedKey");
    if let Some(var_1038) = &input.pre_shared_key {
        scope_1037.string(var_1038);
    }
    #[allow(unused_mut)]
    let mut scope_1039 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1040) = &input.phase1_lifetime_seconds {
        scope_1039.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1040).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1041 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1042) = &input.phase2_lifetime_seconds {
        scope_1041.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1042).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1043 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1044) = &input.rekey_margin_time_seconds {
        scope_1043.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1044).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1045 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1046) = &input.rekey_fuzz_percentage {
        scope_1045.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1046).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("ReplayWindowSize");
    if let Some(var_1048) = &input.replay_window_size {
        scope_1047.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1048).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1050) = &input.dpd_timeout_seconds {
        scope_1049.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1050).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1052) = &input.dpd_timeout_action {
        scope_1051.string(var_1052);
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1054) = &input.phase1_encryption_algorithms {
        let mut list_1056 = scope_1053.start_list(true, Some("item"));
        for item_1055 in var_1054 {
            #[allow(unused_mut)]
            let mut entry_1057 = list_1056.entry();
            crate::query_ser::serialize_structure_phase1_encryption_algorithms_request_list_value(
                entry_1057, item_1055,
            );
        }
        list_1056.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1059) = &input.phase2_encryption_algorithms {
        let mut list_1061 = scope_1058.start_list(true, Some("item"));
        for item_1060 in var_1059 {
            #[allow(unused_mut)]
            let mut entry_1062 = list_1061.entry();
            crate::query_ser::serialize_structure_phase2_encryption_algorithms_request_list_value(
                entry_1062, item_1060,
            );
        }
        list_1061.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1064) = &input.phase1_integrity_algorithms {
        let mut list_1066 = scope_1063.start_list(true, Some("item"));
        for item_1065 in var_1064 {
            #[allow(unused_mut)]
            let mut entry_1067 = list_1066.entry();
            crate::query_ser::serialize_structure_phase1_integrity_algorithms_request_list_value(
                entry_1067, item_1065,
            );
        }
        list_1066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1069) = &input.phase2_integrity_algorithms {
        let mut list_1071 = scope_1068.start_list(true, Some("item"));
        for item_1070 in var_1069 {
            #[allow(unused_mut)]
            let mut entry_1072 = list_1071.entry();
            crate::query_ser::serialize_structure_phase2_integrity_algorithms_request_list_value(
                entry_1072, item_1070,
            );
        }
        list_1071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1074) = &input.phase1_dh_group_numbers {
        let mut list_1076 = scope_1073.start_list(true, Some("item"));
        for item_1075 in var_1074 {
            #[allow(unused_mut)]
            let mut entry_1077 = list_1076.entry();
            crate::query_ser::serialize_structure_phase1_dh_group_numbers_request_list_value(
                entry_1077, item_1075,
            );
        }
        list_1076.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1078 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1079) = &input.phase2_dh_group_numbers {
        let mut list_1081 = scope_1078.start_list(true, Some("item"));
        for item_1080 in var_1079 {
            #[allow(unused_mut)]
            let mut entry_1082 = list_1081.entry();
            crate::query_ser::serialize_structure_phase2_dh_group_numbers_request_list_value(
                entry_1082, item_1080,
            );
        }
        list_1081.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("IKEVersion");
    if let Some(var_1084) = &input.ike_versions {
        let mut list_1086 = scope_1083.start_list(true, Some("item"));
        for item_1085 in var_1084 {
            #[allow(unused_mut)]
            let mut entry_1087 = list_1086.entry();
            crate::query_ser::serialize_structure_ike_versions_request_list_value(
                entry_1087, item_1085,
            );
        }
        list_1086.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("StartupAction");
    if let Some(var_1089) = &input.startup_action {
        scope_1088.string(var_1089);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_athena_integration(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) {
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1091) = &input.integration_result_s3_destination_arn {
        scope_1090.string(var_1091);
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1093) = &input.partition_load_frequency {
        scope_1092.string(var_1093.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("PartitionStartDate");
    if let Some(var_1095) = &input.partition_start_date {
        scope_1094.instant(var_1095, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("PartitionEndDate");
    if let Some(var_1097) = &input.partition_end_date {
        scope_1096.instant(var_1097, smithy_types::instant::Format::DateTime);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_user_bucket(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) {
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("S3Bucket");
    if let Some(var_1099) = &input.s3_bucket {
        scope_1098.string(var_1099);
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("S3Key");
    if let Some(var_1101) = &input.s3_key {
        scope_1100.string(var_1101);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_user_data(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) {
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("Data");
    if let Some(var_1103) = &input.data {
        scope_1102.string(var_1103);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_load_permission_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("Group");
    if let Some(var_1105) = &input.group {
        scope_1104.string(var_1105.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("UserId");
    if let Some(var_1107) = &input.user_id {
        scope_1106.string(var_1107);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_permission(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) {
    #[allow(unused_mut)]
    let mut scope_1108 = writer.prefix("Group");
    if let Some(var_1109) = &input.group {
        scope_1108.string(var_1109.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1110 = writer.prefix("UserId");
    if let Some(var_1111) = &input.user_id {
        scope_1110.string(var_1111);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_ebs_instance_block_device_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1112 = writer.prefix("DeleteOnTermination");
    if let Some(var_1113) = &input.delete_on_termination {
        scope_1112.boolean(*var_1113);
    }
    #[allow(unused_mut)]
    let mut scope_1114 = writer.prefix("VolumeId");
    if let Some(var_1115) = &input.volume_id {
        scope_1114.string(var_1115);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_capacity_reservation_target(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) {
    #[allow(unused_mut)]
    let mut scope_1116 = writer.prefix("CapacityReservationId");
    if let Some(var_1117) = &input.capacity_reservation_id {
        scope_1116.string(var_1117);
    }
    #[allow(unused_mut)]
    let mut scope_1118 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1119) = &input.capacity_reservation_resource_group_arn {
        scope_1118.string(var_1119);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_create_volume_permission(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) {
    #[allow(unused_mut)]
    let mut scope_1120 = writer.prefix("Group");
    if let Some(var_1121) = &input.group {
        scope_1120.string(var_1121.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("UserId");
    if let Some(var_1123) = &input.user_id {
        scope_1122.string(var_1123);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_fleet_launch_template_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("LaunchTemplateId");
    if let Some(var_1125) = &input.launch_template_id {
        scope_1124.string(var_1125);
    }
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("LaunchTemplateName");
    if let Some(var_1127) = &input.launch_template_name {
        scope_1126.string(var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("Version");
    if let Some(var_1129) = &input.version {
        scope_1128.string(var_1129);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_overrides(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) {
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("InstanceType");
    if let Some(var_1131) = &input.instance_type {
        scope_1130.string(var_1131.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("SpotPrice");
    if let Some(var_1133) = &input.spot_price {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("SubnetId");
    if let Some(var_1135) = &input.subnet_id {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("AvailabilityZone");
    if let Some(var_1137) = &input.availability_zone {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("WeightedCapacity");
    if let Some(var_1139) = &input.weighted_capacity {
        scope_1138.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1139).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("Priority");
    if let Some(var_1141) = &input.priority {
        scope_1140.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1141).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_phase1_encryption_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("Value");
    if let Some(var_1143) = &input.value {
        scope_1142.string(var_1143);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_phase2_encryption_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1144 = writer.prefix("Value");
    if let Some(var_1145) = &input.value {
        scope_1144.string(var_1145);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_phase1_integrity_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1146 = writer.prefix("Value");
    if let Some(var_1147) = &input.value {
        scope_1146.string(var_1147);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_phase2_integrity_algorithms_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1148 = writer.prefix("Value");
    if let Some(var_1149) = &input.value {
        scope_1148.string(var_1149);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_phase1_dh_group_numbers_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DHGroupNumbersRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1150 = writer.prefix("Value");
    if let Some(var_1151) = &input.value {
        scope_1150.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1151).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_phase2_dh_group_numbers_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DHGroupNumbersRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1152 = writer.prefix("Value");
    if let Some(var_1153) = &input.value {
        scope_1152.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1153).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_ike_versions_request_list_value(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::IKEVersionsRequestListValue,
) {
    #[allow(unused_mut)]
    let mut scope_1154 = writer.prefix("Value");
    if let Some(var_1155) = &input.value {
        scope_1154.string(var_1155);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_maintenance_strategies(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) {
    #[allow(unused_mut)]
    let mut scope_1156 = writer.prefix("CapacityRebalance");
    if let Some(var_1157) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_spot_capacity_rebalance(scope_1156, var_1157);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_fleet_launch_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("GroupSet");
    if let Some(var_1159) = &input.security_groups {
        let mut list_1161 = scope_1158.start_list(true, Some("item"));
        for item_1160 in var_1159 {
            #[allow(unused_mut)]
            let mut entry_1162 = list_1161.entry();
            crate::query_ser::serialize_structure_group_identifier(entry_1162, item_1160);
        }
        list_1161.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("AddressingType");
    if let Some(var_1164) = &input.addressing_type {
        scope_1163.string(var_1164);
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1166) = &input.block_device_mappings {
        let mut list_1168 = scope_1165.start_list(true, Some("item"));
        for item_1167 in var_1166 {
            #[allow(unused_mut)]
            let mut entry_1169 = list_1168.entry();
            crate::query_ser::serialize_structure_block_device_mapping(entry_1169, item_1167);
        }
        list_1168.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("EbsOptimized");
    if let Some(var_1171) = &input.ebs_optimized {
        scope_1170.boolean(*var_1171);
    }
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("IamInstanceProfile");
    if let Some(var_1173) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_iam_instance_profile_specification(
            scope_1172, var_1173,
        );
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("ImageId");
    if let Some(var_1175) = &input.image_id {
        scope_1174.string(var_1175);
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("InstanceType");
    if let Some(var_1177) = &input.instance_type {
        scope_1176.string(var_1177.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("KernelId");
    if let Some(var_1179) = &input.kernel_id {
        scope_1178.string(var_1179);
    }
    #[allow(unused_mut)]
    let mut scope_1180 = writer.prefix("KeyName");
    if let Some(var_1181) = &input.key_name {
        scope_1180.string(var_1181);
    }
    #[allow(unused_mut)]
    let mut scope_1182 = writer.prefix("Monitoring");
    if let Some(var_1183) = &input.monitoring {
        crate::query_ser::serialize_structure_spot_fleet_monitoring(scope_1182, var_1183);
    }
    #[allow(unused_mut)]
    let mut scope_1184 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1185) = &input.network_interfaces {
        let mut list_1187 = scope_1184.start_list(true, Some("item"));
        for item_1186 in var_1185 {
            #[allow(unused_mut)]
            let mut entry_1188 = list_1187.entry();
            crate::query_ser::serialize_structure_instance_network_interface_specification(
                entry_1188, item_1186,
            );
        }
        list_1187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("Placement");
    if let Some(var_1190) = &input.placement {
        crate::query_ser::serialize_structure_spot_placement(scope_1189, var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("RamdiskId");
    if let Some(var_1192) = &input.ramdisk_id {
        scope_1191.string(var_1192);
    }
    #[allow(unused_mut)]
    let mut scope_1193 = writer.prefix("SpotPrice");
    if let Some(var_1194) = &input.spot_price {
        scope_1193.string(var_1194);
    }
    #[allow(unused_mut)]
    let mut scope_1195 = writer.prefix("SubnetId");
    if let Some(var_1196) = &input.subnet_id {
        scope_1195.string(var_1196);
    }
    #[allow(unused_mut)]
    let mut scope_1197 = writer.prefix("UserData");
    if let Some(var_1198) = &input.user_data {
        scope_1197.string(var_1198);
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("WeightedCapacity");
    if let Some(var_1200) = &input.weighted_capacity {
        scope_1199.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_1200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("TagSpecificationSet");
    if let Some(var_1202) = &input.tag_specifications {
        let mut list_1204 = scope_1201.start_list(true, Some("item"));
        for item_1203 in var_1202 {
            #[allow(unused_mut)]
            let mut entry_1205 = list_1204.entry();
            crate::query_ser::serialize_structure_spot_fleet_tag_specification(
                entry_1205, item_1203,
            );
        }
        list_1204.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_load_balancers_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1207) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_classic_load_balancers_config(scope_1206, var_1207);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1209) = &input.target_groups_config {
        crate::query_ser::serialize_structure_target_groups_config(scope_1208, var_1209);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_placement(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) {
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("AvailabilityZone");
    if let Some(var_1211) = &input.availability_zone {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("GroupName");
    if let Some(var_1213) = &input.group_name {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("Tenancy");
    if let Some(var_1215) = &input.tenancy {
        scope_1214.string(var_1215.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_market_options(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) {
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("MaxPrice");
    if let Some(var_1217) = &input.max_price {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("SpotInstanceType");
    if let Some(var_1219) = &input.spot_instance_type {
        scope_1218.string(var_1219.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1221) = &input.block_duration_minutes {
        scope_1220.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1221).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("ValidUntil");
    if let Some(var_1223) = &input.valid_until {
        scope_1222.instant(var_1223, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1225) = &input.instance_interruption_behavior {
        scope_1224.string(var_1225.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_block_device_mapping(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) {
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("DeviceName");
    if let Some(var_1227) = &input.device_name {
        scope_1226.string(var_1227);
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("Ebs");
    if let Some(var_1229) = &input.ebs {
        crate::query_ser::serialize_structure_scheduled_instances_ebs(scope_1228, var_1229);
    }
    #[allow(unused_mut)]
    let mut scope_1230 = writer.prefix("NoDevice");
    if let Some(var_1231) = &input.no_device {
        scope_1230.string(var_1231);
    }
    #[allow(unused_mut)]
    let mut scope_1232 = writer.prefix("VirtualName");
    if let Some(var_1233) = &input.virtual_name {
        scope_1232.string(var_1233);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_iam_instance_profile(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) {
    #[allow(unused_mut)]
    let mut scope_1234 = writer.prefix("Arn");
    if let Some(var_1235) = &input.arn {
        scope_1234.string(var_1235);
    }
    #[allow(unused_mut)]
    let mut scope_1236 = writer.prefix("Name");
    if let Some(var_1237) = &input.name {
        scope_1236.string(var_1237);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_monitoring(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) {
    #[allow(unused_mut)]
    let mut scope_1238 = writer.prefix("Enabled");
    if let Some(var_1239) = &input.enabled {
        scope_1238.boolean(*var_1239);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_network_interface(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) {
    #[allow(unused_mut)]
    let mut scope_1240 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1241) = &input.associate_public_ip_address {
        scope_1240.boolean(*var_1241);
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("DeleteOnTermination");
    if let Some(var_1243) = &input.delete_on_termination {
        scope_1242.boolean(*var_1243);
    }
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("Description");
    if let Some(var_1245) = &input.description {
        scope_1244.string(var_1245);
    }
    #[allow(unused_mut)]
    let mut scope_1246 = writer.prefix("DeviceIndex");
    if let Some(var_1247) = &input.device_index {
        scope_1246.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1247).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1248 = writer.prefix("Group");
    if let Some(var_1249) = &input.groups {
        let mut list_1251 = scope_1248.start_list(true, Some("SecurityGroupId"));
        for item_1250 in var_1249 {
            #[allow(unused_mut)]
            let mut entry_1252 = list_1251.entry();
            entry_1252.string(item_1250);
        }
        list_1251.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1254) = &input.ipv6_address_count {
        scope_1253.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1254).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("Ipv6Address");
    if let Some(var_1256) = &input.ipv6_addresses {
        let mut list_1258 = scope_1255.start_list(true, Some("Ipv6Address"));
        for item_1257 in var_1256 {
            #[allow(unused_mut)]
            let mut entry_1259 = list_1258.entry();
            crate::query_ser::serialize_structure_scheduled_instances_ipv6_address(
                entry_1259, item_1257,
            );
        }
        list_1258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1260 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1261) = &input.network_interface_id {
        scope_1260.string(var_1261);
    }
    #[allow(unused_mut)]
    let mut scope_1262 = writer.prefix("PrivateIpAddress");
    if let Some(var_1263) = &input.private_ip_address {
        scope_1262.string(var_1263);
    }
    #[allow(unused_mut)]
    let mut scope_1264 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1265) = &input.private_ip_address_configs {
        let mut list_1267 = scope_1264.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1266 in var_1265 {
            #[allow(unused_mut)]
            let mut entry_1268 = list_1267.entry();
            crate::query_ser::serialize_structure_scheduled_instances_private_ip_address_config(
                entry_1268, item_1266,
            );
        }
        list_1267.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1270) = &input.secondary_private_ip_address_count {
        scope_1269.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1270).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("SubnetId");
    if let Some(var_1272) = &input.subnet_id {
        scope_1271.string(var_1272);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_placement(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) {
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("AvailabilityZone");
    if let Some(var_1274) = &input.availability_zone {
        scope_1273.string(var_1274);
    }
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("GroupName");
    if let Some(var_1276) = &input.group_name {
        scope_1275.string(var_1276);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_fleet_spot_capacity_rebalance_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("ReplacementStrategy");
    if let Some(var_1278) = &input.replacement_strategy {
        scope_1277.string(var_1278.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_ebs_block_device_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("Encrypted");
    if let Some(var_1280) = &input.encrypted {
        scope_1279.boolean(*var_1280);
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("DeleteOnTermination");
    if let Some(var_1282) = &input.delete_on_termination {
        scope_1281.boolean(*var_1282);
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("Iops");
    if let Some(var_1284) = &input.iops {
        scope_1283.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1284).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("KmsKeyId");
    if let Some(var_1286) = &input.kms_key_id {
        scope_1285.string(var_1286);
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("SnapshotId");
    if let Some(var_1288) = &input.snapshot_id {
        scope_1287.string(var_1288);
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("VolumeSize");
    if let Some(var_1290) = &input.volume_size {
        scope_1289.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("VolumeType");
    if let Some(var_1292) = &input.volume_type {
        scope_1291.string(var_1292.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("Throughput");
    if let Some(var_1294) = &input.throughput {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_instance_ipv6_address_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("Ipv6Address");
    if let Some(var_1296) = &input.ipv6_address {
        scope_1295.string(var_1296);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_launch_template_spot_market_options_request(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) {
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("MaxPrice");
    if let Some(var_1298) = &input.max_price {
        scope_1297.string(var_1298);
    }
    #[allow(unused_mut)]
    let mut scope_1299 = writer.prefix("SpotInstanceType");
    if let Some(var_1300) = &input.spot_instance_type {
        scope_1299.string(var_1300.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1301 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1302) = &input.block_duration_minutes {
        scope_1301.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1303 = writer.prefix("ValidUntil");
    if let Some(var_1304) = &input.valid_until {
        scope_1303.instant(var_1304, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_1305 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1306) = &input.instance_interruption_behavior {
        scope_1305.string(var_1306.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_capacity_rebalance(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) {
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("ReplacementStrategy");
    if let Some(var_1308) = &input.replacement_strategy {
        scope_1307.string(var_1308.as_str());
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_group_identifier(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) {
    #[allow(unused_mut)]
    let mut scope_1309 = writer.prefix("GroupName");
    if let Some(var_1310) = &input.group_name {
        scope_1309.string(var_1310);
    }
    #[allow(unused_mut)]
    let mut scope_1311 = writer.prefix("GroupId");
    if let Some(var_1312) = &input.group_id {
        scope_1311.string(var_1312);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_fleet_monitoring(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) {
    #[allow(unused_mut)]
    let mut scope_1313 = writer.prefix("Enabled");
    if let Some(var_1314) = &input.enabled {
        scope_1313.boolean(*var_1314);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_spot_fleet_tag_specification(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) {
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("ResourceType");
    if let Some(var_1316) = &input.resource_type {
        scope_1315.string(var_1316.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("Tag");
    if let Some(var_1318) = &input.tags {
        let mut list_1320 = scope_1317.start_list(true, Some("item"));
        for item_1319 in var_1318 {
            #[allow(unused_mut)]
            let mut entry_1321 = list_1320.entry();
            crate::query_ser::serialize_structure_tag(entry_1321, item_1319);
        }
        list_1320.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_classic_load_balancers_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1323) = &input.classic_load_balancers {
        let mut list_1325 = scope_1322.start_list(true, Some("item"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            crate::query_ser::serialize_structure_classic_load_balancer(entry_1326, item_1324);
        }
        list_1325.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_target_groups_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("TargetGroups");
    if let Some(var_1328) = &input.target_groups {
        let mut list_1330 = scope_1327.start_list(true, Some("item"));
        for item_1329 in var_1328 {
            #[allow(unused_mut)]
            let mut entry_1331 = list_1330.entry();
            crate::query_ser::serialize_structure_target_group(entry_1331, item_1329);
        }
        list_1330.finish();
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_ebs(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) {
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("DeleteOnTermination");
    if let Some(var_1333) = &input.delete_on_termination {
        scope_1332.boolean(*var_1333);
    }
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("Encrypted");
    if let Some(var_1335) = &input.encrypted {
        scope_1334.boolean(*var_1335);
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("Iops");
    if let Some(var_1337) = &input.iops {
        scope_1336.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1337).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("SnapshotId");
    if let Some(var_1339) = &input.snapshot_id {
        scope_1338.string(var_1339);
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("VolumeSize");
    if let Some(var_1341) = &input.volume_size {
        scope_1340.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_1341).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("VolumeType");
    if let Some(var_1343) = &input.volume_type {
        scope_1342.string(var_1343);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_ipv6_address(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) {
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Ipv6Address");
    if let Some(var_1345) = &input.ipv6_address {
        scope_1344.string(var_1345);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_scheduled_instances_private_ip_address_config(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) {
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Primary");
    if let Some(var_1347) = &input.primary {
        scope_1346.boolean(*var_1347);
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("PrivateIpAddress");
    if let Some(var_1349) = &input.private_ip_address {
        scope_1348.string(var_1349);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_classic_load_balancer(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) {
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Name");
    if let Some(var_1351) = &input.name {
        scope_1350.string(var_1351);
    }
}

#[allow(unused_mut)]
pub fn serialize_structure_target_group(
    mut writer: smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) {
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Arn");
    if let Some(var_1353) = &input.arn {
        scope_1352.string(var_1353);
    }
}
