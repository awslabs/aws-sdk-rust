// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptReservedInstancesExchangeQuote {
    _private: (),
}
impl AcceptReservedInstancesExchangeQuote {
    /// Creates a new builder-style object to manufacture [`AcceptReservedInstancesExchangeQuoteInput`](crate::input::AcceptReservedInstancesExchangeQuoteInput)
    pub fn builder() -> crate::input::accept_reserved_instances_exchange_quote_input::Builder {
        crate::input::accept_reserved_instances_exchange_quote_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptReservedInstancesExchangeQuote {
    type Output = std::result::Result<
        crate::output::AcceptReservedInstancesExchangeQuoteOutput,
        crate::error::AcceptReservedInstancesExchangeQuoteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_reserved_instances_exchange_quote_error(response)
        } else {
            crate::operation_deser::parse_accept_reserved_instances_exchange_quote_response(
                response,
            )
        }
    }
}

/// <p>Accepts a request to associate subnets with a transit gateway multicast domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptTransitGatewayMulticastDomainAssociations {
    _private: (),
}
impl AcceptTransitGatewayMulticastDomainAssociations {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayMulticastDomainAssociationsInput`](crate::input::AcceptTransitGatewayMulticastDomainAssociationsInput)
    pub fn builder(
    ) -> crate::input::accept_transit_gateway_multicast_domain_associations_input::Builder {
        crate::input::accept_transit_gateway_multicast_domain_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for AcceptTransitGatewayMulticastDomainAssociations
{
    type Output = std::result::Result<
        crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput,
        crate::error::AcceptTransitGatewayMulticastDomainAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_transit_gateway_multicast_domain_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_accept_transit_gateway_multicast_domain_associations_response(response)
        }
    }
}

/// <p>Accepts a transit gateway peering attachment request. The peering attachment must be
/// in the <code>pendingAcceptance</code> state.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptTransitGatewayPeeringAttachment {
    _private: (),
}
impl AcceptTransitGatewayPeeringAttachment {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayPeeringAttachmentInput`](crate::input::AcceptTransitGatewayPeeringAttachmentInput)
    pub fn builder() -> crate::input::accept_transit_gateway_peering_attachment_input::Builder {
        crate::input::accept_transit_gateway_peering_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptTransitGatewayPeeringAttachment {
    type Output = std::result::Result<
        crate::output::AcceptTransitGatewayPeeringAttachmentOutput,
        crate::error::AcceptTransitGatewayPeeringAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_transit_gateway_peering_attachment_error(response)
        } else {
            crate::operation_deser::parse_accept_transit_gateway_peering_attachment_response(
                response,
            )
        }
    }
}

/// <p>Accepts a request to attach a VPC to a transit gateway.</p>
/// <p>The VPC attachment must be in the <code>pendingAcceptance</code> state.
/// Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests.
/// Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptTransitGatewayVpcAttachment {
    _private: (),
}
impl AcceptTransitGatewayVpcAttachment {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayVpcAttachmentInput`](crate::input::AcceptTransitGatewayVpcAttachmentInput)
    pub fn builder() -> crate::input::accept_transit_gateway_vpc_attachment_input::Builder {
        crate::input::accept_transit_gateway_vpc_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptTransitGatewayVpcAttachment {
    type Output = std::result::Result<
        crate::output::AcceptTransitGatewayVpcAttachmentOutput,
        crate::error::AcceptTransitGatewayVpcAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_transit_gateway_vpc_attachment_error(response)
        } else {
            crate::operation_deser::parse_accept_transit_gateway_vpc_attachment_response(response)
        }
    }
}

/// <p>Accepts one or more interface VPC endpoint connection requests to your VPC endpoint
/// service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptVpcEndpointConnections {
    _private: (),
}
impl AcceptVpcEndpointConnections {
    /// Creates a new builder-style object to manufacture [`AcceptVpcEndpointConnectionsInput`](crate::input::AcceptVpcEndpointConnectionsInput)
    pub fn builder() -> crate::input::accept_vpc_endpoint_connections_input::Builder {
        crate::input::accept_vpc_endpoint_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptVpcEndpointConnections {
    type Output = std::result::Result<
        crate::output::AcceptVpcEndpointConnectionsOutput,
        crate::error::AcceptVpcEndpointConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_vpc_endpoint_connections_error(response)
        } else {
            crate::operation_deser::parse_accept_vpc_endpoint_connections_response(response)
        }
    }
}

/// <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must
/// be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC.
/// Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC
/// peering connection requests.</p>
/// <p>For an inter-Region VPC peering connection request, you must accept the VPC peering
/// connection in the Region of the accepter VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptVpcPeeringConnection {
    _private: (),
}
impl AcceptVpcPeeringConnection {
    /// Creates a new builder-style object to manufacture [`AcceptVpcPeeringConnectionInput`](crate::input::AcceptVpcPeeringConnectionInput)
    pub fn builder() -> crate::input::accept_vpc_peering_connection_input::Builder {
        crate::input::accept_vpc_peering_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptVpcPeeringConnection {
    type Output = std::result::Result<
        crate::output::AcceptVpcPeeringConnectionOutput,
        crate::error::AcceptVpcPeeringConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_vpc_peering_connection_error(response)
        } else {
            crate::operation_deser::parse_accept_vpc_peering_connection_response(response)
        }
    }
}

/// <p>Advertises an IPv4 or IPv6 address range that is provisioned for use with your Amazon Web Services resources through
/// bring your own IP addresses (BYOIP).</p>
/// <p>You can perform this operation at most once every 10 seconds, even if you specify different
/// address ranges each time.</p>
/// <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise
/// it from Amazon Web Services. To minimize down time, you can configure your Amazon Web Services resources to use an address from a
/// BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current
/// location and start advertising it through Amazon Web Services.</p>
/// <p>It can take a few minutes before traffic to the specified addresses starts routing to Amazon Web Services
/// because of BGP propagation delays.</p>
/// <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AdvertiseByoipCidr {
    _private: (),
}
impl AdvertiseByoipCidr {
    /// Creates a new builder-style object to manufacture [`AdvertiseByoipCidrInput`](crate::input::AdvertiseByoipCidrInput)
    pub fn builder() -> crate::input::advertise_byoip_cidr_input::Builder {
        crate::input::advertise_byoip_cidr_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AdvertiseByoipCidr {
    type Output = std::result::Result<
        crate::output::AdvertiseByoipCidrOutput,
        crate::error::AdvertiseByoipCidrError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_advertise_byoip_cidr_error(response)
        } else {
            crate::operation_deser::parse_advertise_byoip_cidr_response(response)
        }
    }
}

/// <p>Allocates an Elastic IP address to your Amazon Web Services account. After you allocate the Elastic IP address you can associate  
/// it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address
/// pool and can be allocated to a different Amazon Web Services account.</p>
/// <p>You can allocate an Elastic IP address from an address pool owned by Amazon Web Services or from an address pool created
/// from a public IPv4 address range that you have brought to Amazon Web Services for use with your Amazon Web Services resources using bring your own
/// IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an
/// Elastic IP address that you released after it is allocated to another Amazon Web Services account. You cannot recover an Elastic IP
/// address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p>
/// <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate
/// 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>You can allocate a carrier IP address which is a public IP address from a telecommunication carrier, to a network interface which resides in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateAddress {
    _private: (),
}
impl AllocateAddress {
    /// Creates a new builder-style object to manufacture [`AllocateAddressInput`](crate::input::AllocateAddressInput)
    pub fn builder() -> crate::input::allocate_address_input::Builder {
        crate::input::allocate_address_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocateAddress {
    type Output = std::result::Result<
        crate::output::AllocateAddressOutput,
        crate::error::AllocateAddressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_address_error(response)
        } else {
            crate::operation_deser::parse_allocate_address_response(response)
        }
    }
}

/// <p>Allocates a Dedicated Host to your account. At a minimum, specify the supported instance
/// type or instance family, the Availability Zone in which to allocate the host, and the number of
/// hosts to allocate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateHosts {
    _private: (),
}
impl AllocateHosts {
    /// Creates a new builder-style object to manufacture [`AllocateHostsInput`](crate::input::AllocateHostsInput)
    pub fn builder() -> crate::input::allocate_hosts_input::Builder {
        crate::input::allocate_hosts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocateHosts {
    type Output =
        std::result::Result<crate::output::AllocateHostsOutput, crate::error::AllocateHostsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_hosts_error(response)
        } else {
            crate::operation_deser::parse_allocate_hosts_response(response)
        }
    }
}

/// <p>Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing
/// security groups with the specified security groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ApplySecurityGroupsToClientVpnTargetNetwork {
    _private: (),
}
impl ApplySecurityGroupsToClientVpnTargetNetwork {
    /// Creates a new builder-style object to manufacture [`ApplySecurityGroupsToClientVpnTargetNetworkInput`](crate::input::ApplySecurityGroupsToClientVpnTargetNetworkInput)
    pub fn builder(
    ) -> crate::input::apply_security_groups_to_client_vpn_target_network_input::Builder {
        crate::input::apply_security_groups_to_client_vpn_target_network_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ApplySecurityGroupsToClientVpnTargetNetwork {
    type Output = std::result::Result<
        crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput,
        crate::error::ApplySecurityGroupsToClientVpnTargetNetworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_apply_security_groups_to_client_vpn_target_network_error(
                response,
            )
        } else {
            crate::operation_deser::parse_apply_security_groups_to_client_vpn_target_network_response(response)
        }
    }
}

/// <p>Assigns one or more IPv6 addresses to the specified network interface. You can
/// specify one or more specific IPv6 addresses, or you can specify the number of IPv6
/// addresses to be automatically assigned from within the subnet's IPv6 CIDR block range.
/// You can assign as many IPv6 addresses to a network interface as you can assign private
/// IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>You must specify either the IPv6 addresses or the IPv6 address count in the request. </p>
/// <p>You can optionally use Prefix Delegation on the network interface. You must specify
/// either the IPV6 Prefix Delegation prefixes, or the IPv6 Prefix Delegation count. For
/// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
/// Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssignIpv6Addresses {
    _private: (),
}
impl AssignIpv6Addresses {
    /// Creates a new builder-style object to manufacture [`AssignIpv6AddressesInput`](crate::input::AssignIpv6AddressesInput)
    pub fn builder() -> crate::input::assign_ipv6_addresses_input::Builder {
        crate::input::assign_ipv6_addresses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssignIpv6Addresses {
    type Output = std::result::Result<
        crate::output::AssignIpv6AddressesOutput,
        crate::error::AssignIpv6AddressesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_assign_ipv6_addresses_error(response)
        } else {
            crate::operation_deser::parse_assign_ipv6_addresses_response(response)
        }
    }
}

/// <p>Assigns one or more secondary private IP addresses to the specified network interface.</p>
/// <p>You can specify one or more specific secondary IP addresses, or you can specify the number
/// of secondary IP addresses to be automatically assigned within the subnet's CIDR block range.
/// The number of secondary IP addresses that you can assign to an instance varies by instance type.
/// For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about
/// Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>When you move a secondary private IP address to another network interface, any Elastic IP address
/// that is associated with the IP address is also moved.</p>
/// <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network
/// interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance
/// metadata to confirm that the remapping is complete.</p>
/// <p>You must specify either the IP addresses or the IP address count in the request.</p>
/// <p>You can optionally use Prefix Delegation on the network interface. You must specify
/// either the IPv4 Prefix Delegation prefixes, or the IPv4 Prefix Delegation count. For
/// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html">
/// Assigning prefixes to Amazon EC2 network interfaces</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssignPrivateIpAddresses {
    _private: (),
}
impl AssignPrivateIpAddresses {
    /// Creates a new builder-style object to manufacture [`AssignPrivateIpAddressesInput`](crate::input::AssignPrivateIpAddressesInput)
    pub fn builder() -> crate::input::assign_private_ip_addresses_input::Builder {
        crate::input::assign_private_ip_addresses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssignPrivateIpAddresses {
    type Output = std::result::Result<
        crate::output::AssignPrivateIpAddressesOutput,
        crate::error::AssignPrivateIpAddressesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_assign_private_ip_addresses_error(response)
        } else {
            crate::operation_deser::parse_assign_private_ip_addresses_response(response)
        }
    }
}

/// <p>Associates an Elastic IP address, or carrier IP address (for instances that are in
/// subnets in Wavelength Zones) with an instance or a network interface. Before you can use an
/// Elastic IP address, you must allocate it to your account.</p>
/// <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC.
/// For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already
/// associated with a different instance, it is disassociated from that instance and associated
/// with the specified instance. If you associate an Elastic IP address with an instance that has
/// an existing Elastic IP address, the existing address is disassociated from the instance, but
/// remains allocated to your account.</p>
/// <p>[VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic
/// IP address is associated with the primary IP address. If the Elastic IP address is already
/// associated with a different instance or a network interface, you get an error unless you allow
/// reassociation. You cannot associate an Elastic IP address with an instance or network
/// interface that has an existing Elastic IP address.</p>
/// <p>[Subnets in Wavelength Zones] You can associate an IP address from the telecommunication
/// carrier to the instance or network interface. </p>
/// <p>You cannot associate an Elastic IP address with an interface in a different network border group.</p>
/// <important>
/// <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2
/// doesn't return an error, and you may be charged for each time the Elastic IP address is
/// remapped to the same instance. For more information, see the <i>Elastic IP
/// Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2
/// Pricing</a>.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateAddress {
    _private: (),
}
impl AssociateAddress {
    /// Creates a new builder-style object to manufacture [`AssociateAddressInput`](crate::input::AssociateAddressInput)
    pub fn builder() -> crate::input::associate_address_input::Builder {
        crate::input::associate_address_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateAddress {
    type Output = std::result::Result<
        crate::output::AssociateAddressOutput,
        crate::error::AssociateAddressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_address_error(response)
        } else {
            crate::operation_deser::parse_associate_address_response(response)
        }
    }
}

/// <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p>
/// <p>If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change the VPC that's associated with it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateClientVpnTargetNetwork {
    _private: (),
}
impl AssociateClientVpnTargetNetwork {
    /// Creates a new builder-style object to manufacture [`AssociateClientVpnTargetNetworkInput`](crate::input::AssociateClientVpnTargetNetworkInput)
    pub fn builder() -> crate::input::associate_client_vpn_target_network_input::Builder {
        crate::input::associate_client_vpn_target_network_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateClientVpnTargetNetwork {
    type Output = std::result::Result<
        crate::output::AssociateClientVpnTargetNetworkOutput,
        crate::error::AssociateClientVpnTargetNetworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_client_vpn_target_network_error(response)
        } else {
            crate::operation_deser::parse_associate_client_vpn_target_network_response(response)
        }
    }
}

/// <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p>
/// <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a>
/// in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateDhcpOptions {
    _private: (),
}
impl AssociateDhcpOptions {
    /// Creates a new builder-style object to manufacture [`AssociateDhcpOptionsInput`](crate::input::AssociateDhcpOptionsInput)
    pub fn builder() -> crate::input::associate_dhcp_options_input::Builder {
        crate::input::associate_dhcp_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateDhcpOptions {
    type Output = std::result::Result<
        crate::output::AssociateDhcpOptionsOutput,
        crate::error::AssociateDhcpOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_dhcp_options_error(response)
        } else {
            crate::operation_deser::parse_associate_dhcp_options_response(response)
        }
    }
}

/// <p>Associates an Identity and Access Management (IAM) role with an Certificate Manager (ACM) certificate.
/// This enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave. For more
/// information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html">Certificate Manager for Nitro Enclaves</a> in the <i>Amazon Web Services Nitro Enclaves
/// User Guide</i>.</p>
/// <p>When the IAM role is associated with the ACM certificate, the certificate, certificate chain, and encrypted
/// private key are placed in an Amazon S3 bucket that only the associated IAM role can access. The private key of the certificate
/// is encrypted with an Amazon Web Services managed key that has an attached attestation-based key policy.</p>
/// <p>To enable the IAM role to access the Amazon S3 object, you must grant it permission to call <code>s3:GetObject</code>
/// on the Amazon S3 bucket returned by the command. To enable the IAM role to access the KMS key,
/// you must grant it permission to call <code>kms:Decrypt</code> on the KMS key returned by the command.
/// For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html#add-policy">
/// Grant the role permission to access the certificate and encryption key</a> in the
/// <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateEnclaveCertificateIamRole {
    _private: (),
}
impl AssociateEnclaveCertificateIamRole {
    /// Creates a new builder-style object to manufacture [`AssociateEnclaveCertificateIamRoleInput`](crate::input::AssociateEnclaveCertificateIamRoleInput)
    pub fn builder() -> crate::input::associate_enclave_certificate_iam_role_input::Builder {
        crate::input::associate_enclave_certificate_iam_role_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateEnclaveCertificateIamRole {
    type Output = std::result::Result<
        crate::output::AssociateEnclaveCertificateIamRoleOutput,
        crate::error::AssociateEnclaveCertificateIamRoleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_enclave_certificate_iam_role_error(response)
        } else {
            crate::operation_deser::parse_associate_enclave_certificate_iam_role_response(response)
        }
    }
}

/// <p>Associates an IAM instance profile with a running or stopped instance. You cannot
/// associate more than one IAM instance profile with an instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateIamInstanceProfile {
    _private: (),
}
impl AssociateIamInstanceProfile {
    /// Creates a new builder-style object to manufacture [`AssociateIamInstanceProfileInput`](crate::input::AssociateIamInstanceProfileInput)
    pub fn builder() -> crate::input::associate_iam_instance_profile_input::Builder {
        crate::input::associate_iam_instance_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateIamInstanceProfile {
    type Output = std::result::Result<
        crate::output::AssociateIamInstanceProfileOutput,
        crate::error::AssociateIamInstanceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_iam_instance_profile_error(response)
        } else {
            crate::operation_deser::parse_associate_iam_instance_profile_response(response)
        }
    }
}

/// <p>Associates one or more targets with an event window. Only one type of target (instance IDs,
/// Dedicated Host IDs, or tags) can be specified with an event window.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
/// events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateInstanceEventWindow {
    _private: (),
}
impl AssociateInstanceEventWindow {
    /// Creates a new builder-style object to manufacture [`AssociateInstanceEventWindowInput`](crate::input::AssociateInstanceEventWindowInput)
    pub fn builder() -> crate::input::associate_instance_event_window_input::Builder {
        crate::input::associate_instance_event_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateInstanceEventWindow {
    type Output = std::result::Result<
        crate::output::AssociateInstanceEventWindowOutput,
        crate::error::AssociateInstanceEventWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_instance_event_window_error(response)
        } else {
            crate::operation_deser::parse_associate_instance_event_window_response(response)
        }
    }
}

/// <p>Associates a subnet in your VPC or an internet gateway or virtual private gateway
/// attached to your VPC with a route table in your VPC. This association causes traffic
/// from the subnet or gateway to be routed according to the routes in the route table. The
/// action returns an association ID, which you need in order to disassociate the route
/// table later. A route table can be associated with multiple subnets.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateRouteTable {
    _private: (),
}
impl AssociateRouteTable {
    /// Creates a new builder-style object to manufacture [`AssociateRouteTableInput`](crate::input::AssociateRouteTableInput)
    pub fn builder() -> crate::input::associate_route_table_input::Builder {
        crate::input::associate_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateRouteTable {
    type Output = std::result::Result<
        crate::output::AssociateRouteTableOutput,
        crate::error::AssociateRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_route_table_error(response)
        } else {
            crate::operation_deser::parse_associate_route_table_response(response)
        }
    }
}

/// <p>Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR
/// block with your subnet. An IPv6 CIDR block must have a prefix length of /64.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateSubnetCidrBlock {
    _private: (),
}
impl AssociateSubnetCidrBlock {
    /// Creates a new builder-style object to manufacture [`AssociateSubnetCidrBlockInput`](crate::input::AssociateSubnetCidrBlockInput)
    pub fn builder() -> crate::input::associate_subnet_cidr_block_input::Builder {
        crate::input::associate_subnet_cidr_block_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateSubnetCidrBlock {
    type Output = std::result::Result<
        crate::output::AssociateSubnetCidrBlockOutput,
        crate::error::AssociateSubnetCidrBlockError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_subnet_cidr_block_error(response)
        } else {
            crate::operation_deser::parse_associate_subnet_cidr_block_response(response)
        }
    }
}

/// <p>Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.</p>
/// <p>The transit gateway attachment must be in the available state before you can add a resource. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a>
/// to see the state of the attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateTransitGatewayMulticastDomain {
    _private: (),
}
impl AssociateTransitGatewayMulticastDomain {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayMulticastDomainInput`](crate::input::AssociateTransitGatewayMulticastDomainInput)
    pub fn builder() -> crate::input::associate_transit_gateway_multicast_domain_input::Builder {
        crate::input::associate_transit_gateway_multicast_domain_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateTransitGatewayMulticastDomain {
    type Output = std::result::Result<
        crate::output::AssociateTransitGatewayMulticastDomainOutput,
        crate::error::AssociateTransitGatewayMulticastDomainError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_transit_gateway_multicast_domain_error(response)
        } else {
            crate::operation_deser::parse_associate_transit_gateway_multicast_domain_response(
                response,
            )
        }
    }
}

/// <p>Associates the specified attachment with the specified transit gateway route table. You can
/// associate only one route table with an attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateTransitGatewayRouteTable {
    _private: (),
}
impl AssociateTransitGatewayRouteTable {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayRouteTableInput`](crate::input::AssociateTransitGatewayRouteTableInput)
    pub fn builder() -> crate::input::associate_transit_gateway_route_table_input::Builder {
        crate::input::associate_transit_gateway_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateTransitGatewayRouteTable {
    type Output = std::result::Result<
        crate::output::AssociateTransitGatewayRouteTableOutput,
        crate::error::AssociateTransitGatewayRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_transit_gateway_route_table_error(response)
        } else {
            crate::operation_deser::parse_associate_transit_gateway_route_table_response(response)
        }
    }
}

/// <note>
/// <p>This API action is currently in <b>limited preview only</b>.
/// If you are interested in using this feature, contact your account manager.</p>
/// </note>
/// <p>Associates a branch network interface with a trunk network interface.</p>
/// <p>Before you create the association, run the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">create-network-interface</a> command and set
/// <code>--interface-type</code> to <code>trunk</code>. You must also create a network interface for each branch network interface that you want to associate with the trunk network interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateTrunkInterface {
    _private: (),
}
impl AssociateTrunkInterface {
    /// Creates a new builder-style object to manufacture [`AssociateTrunkInterfaceInput`](crate::input::AssociateTrunkInterfaceInput)
    pub fn builder() -> crate::input::associate_trunk_interface_input::Builder {
        crate::input::associate_trunk_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateTrunkInterface {
    type Output = std::result::Result<
        crate::output::AssociateTrunkInterfaceOutput,
        crate::error::AssociateTrunkInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_trunk_interface_error(response)
        } else {
            crate::operation_deser::parse_associate_trunk_interface_response(response)
        }
    }
}

/// <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block,
/// an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that
/// you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>). The IPv6 CIDR block size is fixed
/// at /56.</p>
/// <p>You must specify one of the following in the request: an IPv4 CIDR block, an IPv6
/// pool, or an Amazon-provided IPv6 CIDR block.</p>
/// <p>For more information about associating CIDR blocks with your VPC and applicable
/// restrictions, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing">VPC and subnet sizing</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateVpcCidrBlock {
    _private: (),
}
impl AssociateVpcCidrBlock {
    /// Creates a new builder-style object to manufacture [`AssociateVpcCidrBlockInput`](crate::input::AssociateVpcCidrBlockInput)
    pub fn builder() -> crate::input::associate_vpc_cidr_block_input::Builder {
        crate::input::associate_vpc_cidr_block_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateVpcCidrBlock {
    type Output = std::result::Result<
        crate::output::AssociateVpcCidrBlockOutput,
        crate::error::AssociateVpcCidrBlockError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_vpc_cidr_block_error(response)
        } else {
            crate::operation_deser::parse_associate_vpc_cidr_block_response(response)
        }
    }
}

/// <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's
/// security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You
/// can only link an instance that's in the <code>running</code> state. An instance is
/// automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when
/// you restart it.</p>
/// <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p>
/// <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachClassicLinkVpc {
    _private: (),
}
impl AttachClassicLinkVpc {
    /// Creates a new builder-style object to manufacture [`AttachClassicLinkVpcInput`](crate::input::AttachClassicLinkVpcInput)
    pub fn builder() -> crate::input::attach_classic_link_vpc_input::Builder {
        crate::input::attach_classic_link_vpc_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachClassicLinkVpc {
    type Output = std::result::Result<
        crate::output::AttachClassicLinkVpcOutput,
        crate::error::AttachClassicLinkVpcError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_classic_link_vpc_error(response)
        } else {
            crate::operation_deser::parse_attach_classic_link_vpc_response(response)
        }
    }
}

/// <p>Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and
/// the VPC. For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachInternetGateway {
    _private: (),
}
impl AttachInternetGateway {
    /// Creates a new builder-style object to manufacture [`AttachInternetGatewayInput`](crate::input::AttachInternetGatewayInput)
    pub fn builder() -> crate::input::attach_internet_gateway_input::Builder {
        crate::input::attach_internet_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachInternetGateway {
    type Output = std::result::Result<
        crate::output::AttachInternetGatewayOutput,
        crate::error::AttachInternetGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_internet_gateway_error(response)
        } else {
            crate::operation_deser::parse_attach_internet_gateway_response(response)
        }
    }
}

/// <p>Attaches a network interface to an instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachNetworkInterface {
    _private: (),
}
impl AttachNetworkInterface {
    /// Creates a new builder-style object to manufacture [`AttachNetworkInterfaceInput`](crate::input::AttachNetworkInterfaceInput)
    pub fn builder() -> crate::input::attach_network_interface_input::Builder {
        crate::input::attach_network_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachNetworkInterface {
    type Output = std::result::Result<
        crate::output::AttachNetworkInterfaceOutput,
        crate::error::AttachNetworkInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_network_interface_error(response)
        } else {
            crate::operation_deser::parse_attach_network_interface_response(response)
        }
    }
}

/// <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance
/// with the specified device name.</p>
/// <p>Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For
/// more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>After you attach an EBS volume, you must make it available. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Make an EBS volume available for use</a>.</p>
/// <p>If a volume has an Amazon Web Services Marketplace product code:</p>
/// <ul>
/// <li>
/// <p>The volume can be attached only to a stopped instance.</p>
/// </li>
/// <li>
/// <p>Amazon Web Services Marketplace product codes are copied from the volume to the instance.</p>
/// </li>
/// <li>
/// <p>You must be subscribed to the product.</p>
/// </li>
/// <li>
/// <p>The instance type and operating system of the instance must support the product. For
/// example, you can't detach a volume from a Windows instance and attach it to a Linux
/// instance.</p>
/// </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attach an Amazon EBS volume to an instance</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachVolume {
    _private: (),
}
impl AttachVolume {
    /// Creates a new builder-style object to manufacture [`AttachVolumeInput`](crate::input::AttachVolumeInput)
    pub fn builder() -> crate::input::attach_volume_input::Builder {
        crate::input::attach_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachVolume {
    type Output =
        std::result::Result<crate::output::AttachVolumeOutput, crate::error::AttachVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_volume_error(response)
        } else {
            crate::operation_deser::parse_attach_volume_response(response)
        }
    }
}

/// <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private
/// gateway to one VPC at a time.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AttachVpnGateway {
    _private: (),
}
impl AttachVpnGateway {
    /// Creates a new builder-style object to manufacture [`AttachVpnGatewayInput`](crate::input::AttachVpnGatewayInput)
    pub fn builder() -> crate::input::attach_vpn_gateway_input::Builder {
        crate::input::attach_vpn_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AttachVpnGateway {
    type Output = std::result::Result<
        crate::output::AttachVpnGatewayOutput,
        crate::error::AttachVpnGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_attach_vpn_gateway_error(response)
        } else {
            crate::operation_deser::parse_attach_vpn_gateway_response(response)
        }
    }
}

/// <p>Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as
/// firewall rules that grant access to networks. You must configure ingress authorization rules to
/// enable clients to access resources in AWS or on-premises networks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AuthorizeClientVpnIngress {
    _private: (),
}
impl AuthorizeClientVpnIngress {
    /// Creates a new builder-style object to manufacture [`AuthorizeClientVpnIngressInput`](crate::input::AuthorizeClientVpnIngressInput)
    pub fn builder() -> crate::input::authorize_client_vpn_ingress_input::Builder {
        crate::input::authorize_client_vpn_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AuthorizeClientVpnIngress {
    type Output = std::result::Result<
        crate::output::AuthorizeClientVpnIngressOutput,
        crate::error::AuthorizeClientVpnIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_authorize_client_vpn_ingress_error(response)
        } else {
            crate::operation_deser::parse_authorize_client_vpn_ingress_response(response)
        }
    }
}

/// <p>[VPC only] Adds the specified outbound (egress) rules to a security group for use with a VPC.</p>
/// <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address
/// ranges, or to the instances that are associated with the specified destination security groups.</p>
/// <p>You specify a protocol for each rule (for example, TCP).
/// For the TCP and UDP protocols, you must also specify the destination port or port range.
/// For the ICMP protocol, you must also specify the ICMP type and code.
/// You can use -1 for the type or code to mean all types or all codes.</p>
/// <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p>
/// <p>For information about VPC security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AuthorizeSecurityGroupEgress {
    _private: (),
}
impl AuthorizeSecurityGroupEgress {
    /// Creates a new builder-style object to manufacture [`AuthorizeSecurityGroupEgressInput`](crate::input::AuthorizeSecurityGroupEgressInput)
    pub fn builder() -> crate::input::authorize_security_group_egress_input::Builder {
        crate::input::authorize_security_group_egress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AuthorizeSecurityGroupEgress {
    type Output = std::result::Result<
        crate::output::AuthorizeSecurityGroupEgressOutput,
        crate::error::AuthorizeSecurityGroupEgressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_authorize_security_group_egress_error(response)
        } else {
            crate::operation_deser::parse_authorize_security_group_egress_response(response)
        }
    }
}

/// <p>Adds the specified inbound (ingress) rules to a security group.</p>
/// <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR
/// address range, or from the instances that are associated with the specified destination security
/// groups.</p>
/// <p>You specify a protocol for each rule (for example, TCP).
/// For TCP and UDP, you must also specify the destination port or port range.
/// For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code.
/// You can use -1 to mean all types or all codes.</p>
/// <p>Rule changes are propagated to instances within the security group as quickly as possible.
/// However, a small delay might occur.</p>
/// <p>For more information about VPC security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AuthorizeSecurityGroupIngress {
    _private: (),
}
impl AuthorizeSecurityGroupIngress {
    /// Creates a new builder-style object to manufacture [`AuthorizeSecurityGroupIngressInput`](crate::input::AuthorizeSecurityGroupIngressInput)
    pub fn builder() -> crate::input::authorize_security_group_ingress_input::Builder {
        crate::input::authorize_security_group_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AuthorizeSecurityGroupIngress {
    type Output = std::result::Result<
        crate::output::AuthorizeSecurityGroupIngressOutput,
        crate::error::AuthorizeSecurityGroupIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_authorize_security_group_ingress_error(response)
        } else {
            crate::operation_deser::parse_authorize_security_group_ingress_response(response)
        }
    }
}

/// <p>Bundles an Amazon instance store-backed Windows instance.</p>
/// <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p>
/// <note>
/// <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BundleInstance {
    _private: (),
}
impl BundleInstance {
    /// Creates a new builder-style object to manufacture [`BundleInstanceInput`](crate::input::BundleInstanceInput)
    pub fn builder() -> crate::input::bundle_instance_input::Builder {
        crate::input::bundle_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BundleInstance {
    type Output =
        std::result::Result<crate::output::BundleInstanceOutput, crate::error::BundleInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_bundle_instance_error(response)
        } else {
            crate::operation_deser::parse_bundle_instance_response(response)
        }
    }
}

/// <p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelBundleTask {
    _private: (),
}
impl CancelBundleTask {
    /// Creates a new builder-style object to manufacture [`CancelBundleTaskInput`](crate::input::CancelBundleTaskInput)
    pub fn builder() -> crate::input::cancel_bundle_task_input::Builder {
        crate::input::cancel_bundle_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelBundleTask {
    type Output = std::result::Result<
        crate::output::CancelBundleTaskOutput,
        crate::error::CancelBundleTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_bundle_task_error(response)
        } else {
            crate::operation_deser::parse_cancel_bundle_task_response(response)
        }
    }
}

/// <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to
/// <code>cancelled</code>.</p>
/// <p>Instances running in the reserved capacity continue running until you stop them. Stopped
/// instances that target the Capacity Reservation can no longer launch. Modify these instances to either
/// target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation
/// that has matching attributes and sufficient capacity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelCapacityReservation {
    _private: (),
}
impl CancelCapacityReservation {
    /// Creates a new builder-style object to manufacture [`CancelCapacityReservationInput`](crate::input::CancelCapacityReservationInput)
    pub fn builder() -> crate::input::cancel_capacity_reservation_input::Builder {
        crate::input::cancel_capacity_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelCapacityReservation {
    type Output = std::result::Result<
        crate::output::CancelCapacityReservationOutput,
        crate::error::CancelCapacityReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_capacity_reservation_error(response)
        } else {
            crate::operation_deser::parse_cancel_capacity_reservation_response(response)
        }
    }
}

/// <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all
/// artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is
/// in the process of transferring the final disk image, the command fails and returns an exception.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon
/// EC2 CLI</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelConversionTask {
    _private: (),
}
impl CancelConversionTask {
    /// Creates a new builder-style object to manufacture [`CancelConversionTaskInput`](crate::input::CancelConversionTaskInput)
    pub fn builder() -> crate::input::cancel_conversion_task_input::Builder {
        crate::input::cancel_conversion_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelConversionTask {
    type Output = std::result::Result<
        crate::output::CancelConversionTaskOutput,
        crate::error::CancelConversionTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_conversion_task_error(response)
        } else {
            crate::operation_deser::parse_cancel_conversion_task_response(response)
        }
    }
}

/// <p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created
/// Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the
/// command fails and returns an error.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelExportTask {
    _private: (),
}
impl CancelExportTask {
    /// Creates a new builder-style object to manufacture [`CancelExportTaskInput`](crate::input::CancelExportTaskInput)
    pub fn builder() -> crate::input::cancel_export_task_input::Builder {
        crate::input::cancel_export_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelExportTask {
    type Output = std::result::Result<
        crate::output::CancelExportTaskOutput,
        crate::error::CancelExportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_export_task_error(response)
        } else {
            crate::operation_deser::parse_cancel_export_task_response(response)
        }
    }
}

/// <p>Cancels an in-process import virtual machine or import snapshot task.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelImportTask {
    _private: (),
}
impl CancelImportTask {
    /// Creates a new builder-style object to manufacture [`CancelImportTaskInput`](crate::input::CancelImportTaskInput)
    pub fn builder() -> crate::input::cancel_import_task_input::Builder {
        crate::input::cancel_import_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelImportTask {
    type Output = std::result::Result<
        crate::output::CancelImportTaskOutput,
        crate::error::CancelImportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_import_task_error(response)
        } else {
            crate::operation_deser::parse_cancel_import_task_response(response)
        }
    }
}

/// <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p>
/// <p>For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelReservedInstancesListing {
    _private: (),
}
impl CancelReservedInstancesListing {
    /// Creates a new builder-style object to manufacture [`CancelReservedInstancesListingInput`](crate::input::CancelReservedInstancesListingInput)
    pub fn builder() -> crate::input::cancel_reserved_instances_listing_input::Builder {
        crate::input::cancel_reserved_instances_listing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelReservedInstancesListing {
    type Output = std::result::Result<
        crate::output::CancelReservedInstancesListingOutput,
        crate::error::CancelReservedInstancesListingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_reserved_instances_listing_error(response)
        } else {
            crate::operation_deser::parse_cancel_reserved_instances_listing_response(response)
        }
    }
}

/// <p>Cancels the specified Spot Fleet requests.</p>
/// <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances.
/// You must specify whether the Spot Fleet should also terminate its Spot Instances. If you
/// terminate the instances, the Spot Fleet request enters the
/// <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters
/// the <code>cancelled_running</code> state and the instances continue to run until they
/// are interrupted or you terminate them manually.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelSpotFleetRequests {
    _private: (),
}
impl CancelSpotFleetRequests {
    /// Creates a new builder-style object to manufacture [`CancelSpotFleetRequestsInput`](crate::input::CancelSpotFleetRequestsInput)
    pub fn builder() -> crate::input::cancel_spot_fleet_requests_input::Builder {
        crate::input::cancel_spot_fleet_requests_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelSpotFleetRequests {
    type Output = std::result::Result<
        crate::output::CancelSpotFleetRequestsOutput,
        crate::error::CancelSpotFleetRequestsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_spot_fleet_requests_error(response)
        } else {
            crate::operation_deser::parse_cancel_spot_fleet_requests_response(response)
        }
    }
}

/// <p>Cancels one or more Spot Instance requests.</p>
/// <important>
/// <p>Canceling a Spot Instance request does not terminate running Spot Instances
/// associated with the request.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelSpotInstanceRequests {
    _private: (),
}
impl CancelSpotInstanceRequests {
    /// Creates a new builder-style object to manufacture [`CancelSpotInstanceRequestsInput`](crate::input::CancelSpotInstanceRequestsInput)
    pub fn builder() -> crate::input::cancel_spot_instance_requests_input::Builder {
        crate::input::cancel_spot_instance_requests_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelSpotInstanceRequests {
    type Output = std::result::Result<
        crate::output::CancelSpotInstanceRequestsOutput,
        crate::error::CancelSpotInstanceRequestsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_spot_instance_requests_error(response)
        } else {
            crate::operation_deser::parse_cancel_spot_instance_requests_response(response)
        }
    }
}

/// <p>Determines whether a product code is associated with an instance. This action can only
/// be used by the owner of the product code. It is useful when a product code owner must
/// verify whether another user's instance is eligible for support.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmProductInstance {
    _private: (),
}
impl ConfirmProductInstance {
    /// Creates a new builder-style object to manufacture [`ConfirmProductInstanceInput`](crate::input::ConfirmProductInstanceInput)
    pub fn builder() -> crate::input::confirm_product_instance_input::Builder {
        crate::input::confirm_product_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConfirmProductInstance {
    type Output = std::result::Result<
        crate::output::ConfirmProductInstanceOutput,
        crate::error::ConfirmProductInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_product_instance_error(response)
        } else {
            crate::operation_deser::parse_confirm_product_instance_response(response)
        }
    }
}

/// <p>Copies the specified Amazon FPGA Image (AFI) to the current Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyFpgaImage {
    _private: (),
}
impl CopyFpgaImage {
    /// Creates a new builder-style object to manufacture [`CopyFpgaImageInput`](crate::input::CopyFpgaImageInput)
    pub fn builder() -> crate::input::copy_fpga_image_input::Builder {
        crate::input::copy_fpga_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyFpgaImage {
    type Output =
        std::result::Result<crate::output::CopyFpgaImageOutput, crate::error::CopyFpgaImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_fpga_image_error(response)
        } else {
            crate::operation_deser::parse_copy_fpga_image_response(response)
        }
    }
}

/// <p>Initiates the copy of an AMI. You can copy an AMI from one Region to another, or from a
/// Region to an Outpost. You can't copy an AMI from an Outpost to a Region, from one Outpost
/// to another, or within the same Outpost. To copy an AMI to another partition, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p>
/// <p>To copy an AMI from one Region to another, specify the source Region using the  
/// <b>SourceRegion</b> parameter, and specify the
/// destination Region using its endpoint. Copies of encrypted backing snapshots for
/// the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted,
/// unless you set <code>Encrypted</code> during the copy operation. You cannot
/// create an unencrypted copy of an encrypted backing snapshot.</p>
/// <p>To copy an AMI from a Region to an Outpost, specify the source Region using the  
/// <b>SourceRegion</b> parameter, and specify the
/// ARN of the destination Outpost using <b>DestinationOutpostArn</b>.
/// Backing snapshots copied to an Outpost are encrypted by default using the default
/// encryption key for the Region, or a different key that you specify in the request using
/// <b>KmsKeyId</b>. Outposts do not support unencrypted
/// snapshots. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
/// Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying an AMI</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopyImage {
    _private: (),
}
impl CopyImage {
    /// Creates a new builder-style object to manufacture [`CopyImageInput`](crate::input::CopyImageInput)
    pub fn builder() -> crate::input::copy_image_input::Builder {
        crate::input::copy_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopyImage {
    type Output = std::result::Result<crate::output::CopyImageOutput, crate::error::CopyImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_image_error(response)
        } else {
            crate::operation_deser::parse_copy_image_response(response)
        }
    }
}

/// <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy a
/// snapshot within the same Region, from one Region to another, or from a Region to an Outpost.
/// You can't copy a snapshot from an Outpost to a Region, from one Outpost to another, or within
/// the same Outpost.</p>
/// <p>You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).</p>
/// <p>When copying snapshots to a Region, copies of encrypted EBS snapshots remain encrypted.
/// Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the
/// snapshot copy operation. By default, encrypted snapshot copies use the default Key Management Service (KMS)
/// KMS key; however, you can specify a different KMS key. To copy an encrypted
/// snapshot that has been shared from another account, you must have permissions for the KMS key
/// used to encrypt the snapshot.</p>
/// <p>Snapshots copied to an Outpost are encrypted by default using the default
/// encryption key for the Region, or a different key that you specify in the request using
/// <b>KmsKeyId</b>. Outposts do not support unencrypted
/// snapshots. For more information, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami">
/// Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not
/// be used for any purpose.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copy an Amazon EBS snapshot</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CopySnapshot {
    _private: (),
}
impl CopySnapshot {
    /// Creates a new builder-style object to manufacture [`CopySnapshotInput`](crate::input::CopySnapshotInput)
    pub fn builder() -> crate::input::copy_snapshot_input::Builder {
        crate::input::copy_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CopySnapshot {
    type Output =
        std::result::Result<crate::output::CopySnapshotOutput, crate::error::CopySnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_copy_snapshot_error(response)
        } else {
            crate::operation_deser::parse_copy_snapshot_response(response)
        }
    }
}

/// <p>Creates a new Capacity Reservation with the specified attributes.</p>
/// <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This
/// gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage.
/// By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it.
/// For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to
/// fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try
/// again at a later time, try in a different Availability Zone, or request a smaller
/// capacity reservation. If your application is flexible across instance types and sizes,
/// try to create a Capacity Reservation with different instance attributes.</p>
/// <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance
/// limit for the selected instance type. If your request fails due to limit constraints,
/// increase your On-Demand Instance limit for the required instance type and try again. For
/// more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service
/// Quotas</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCapacityReservation {
    _private: (),
}
impl CreateCapacityReservation {
    /// Creates a new builder-style object to manufacture [`CreateCapacityReservationInput`](crate::input::CreateCapacityReservationInput)
    pub fn builder() -> crate::input::create_capacity_reservation_input::Builder {
        crate::input::create_capacity_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCapacityReservation {
    type Output = std::result::Result<
        crate::output::CreateCapacityReservationOutput,
        crate::error::CreateCapacityReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_capacity_reservation_error(response)
        } else {
            crate::operation_deser::parse_create_capacity_reservation_response(response)
        }
    }
}

/// <p>Creates a carrier gateway.   For more information about carrier gateways, see <a href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#wavelength-carrier-gateway">Carrier gateways</a> in the <i>Amazon Web Services Wavelength Developer Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCarrierGateway {
    _private: (),
}
impl CreateCarrierGateway {
    /// Creates a new builder-style object to manufacture [`CreateCarrierGatewayInput`](crate::input::CreateCarrierGatewayInput)
    pub fn builder() -> crate::input::create_carrier_gateway_input::Builder {
        crate::input::create_carrier_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCarrierGateway {
    type Output = std::result::Result<
        crate::output::CreateCarrierGatewayOutput,
        crate::error::CreateCarrierGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_carrier_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_carrier_gateway_response(response)
        }
    }
}

/// <p>Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to
/// enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions
/// are terminated.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateClientVpnEndpoint {
    _private: (),
}
impl CreateClientVpnEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateClientVpnEndpointInput`](crate::input::CreateClientVpnEndpointInput)
    pub fn builder() -> crate::input::create_client_vpn_endpoint_input::Builder {
        crate::input::create_client_vpn_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateClientVpnEndpoint {
    type Output = std::result::Result<
        crate::output::CreateClientVpnEndpointOutput,
        crate::error::CreateClientVpnEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_client_vpn_endpoint_error(response)
        } else {
            crate::operation_deser::parse_create_client_vpn_endpoint_response(response)
        }
    }
}

/// <p>Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the
/// available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateClientVpnRoute {
    _private: (),
}
impl CreateClientVpnRoute {
    /// Creates a new builder-style object to manufacture [`CreateClientVpnRouteInput`](crate::input::CreateClientVpnRouteInput)
    pub fn builder() -> crate::input::create_client_vpn_route_input::Builder {
        crate::input::create_client_vpn_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateClientVpnRoute {
    type Output = std::result::Result<
        crate::output::CreateClientVpnRouteOutput,
        crate::error::CreateClientVpnRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_client_vpn_route_error(response)
        } else {
            crate::operation_deser::parse_create_client_vpn_route_response(response)
        }
    }
}

/// <p>Provides information to AWS about your VPN customer gateway device. The customer
/// gateway is the appliance at your end of the VPN connection. (The device on the AWS side
/// of the VPN connection is the virtual private gateway.) You must provide the
/// internet-routable IP address of the customer gateway's external interface. The IP
/// address must be static and can be behind a device performing network address translation
/// (NAT).</p>
/// <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's
/// BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your
/// network. If you don't have an ASN already, you can use a private ASN (in the 64512 -
/// 65534 range).</p>
/// <note>
/// <p>Amazon EC2 supports all 4-byte ASN numbers in the range of 1 - 2147483647, with the
/// exception of the following:</p>
/// <ul>
/// <li>
/// <p>7224 - reserved in the <code>us-east-1</code> Region</p>
/// </li>
/// <li>
/// <p>9059 - reserved in the <code>eu-west-1</code> Region</p>
/// </li>
/// <li>
/// <p>17943 - reserved in the <code>ap-southeast-1</code> Region</p>
/// </li>
/// <li>
/// <p>10124 - reserved in the <code>ap-northeast-1</code> Region</p>
/// </li>
/// </ul>
/// </note>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN
/// User Guide</i>.</p>
/// <important>
/// <p>To create more than one customer gateway with the same VPN type, IP address, and
/// BGP ASN, specify a unique device name for each customer gateway. Identical requests
/// return information about the existing customer gateway and do not create new
/// customer gateways.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCustomerGateway {
    _private: (),
}
impl CreateCustomerGateway {
    /// Creates a new builder-style object to manufacture [`CreateCustomerGatewayInput`](crate::input::CreateCustomerGatewayInput)
    pub fn builder() -> crate::input::create_customer_gateway_input::Builder {
        crate::input::create_customer_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateCustomerGateway {
    type Output = std::result::Result<
        crate::output::CreateCustomerGatewayOutput,
        crate::error::CreateCustomerGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_customer_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_customer_gateway_response(response)
        }
    }
}

/// <p>Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the
/// specified Availability Zone in your default VPC. You can have only one default subnet
/// per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Creating a default
/// subnet</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDefaultSubnet {
    _private: (),
}
impl CreateDefaultSubnet {
    /// Creates a new builder-style object to manufacture [`CreateDefaultSubnetInput`](crate::input::CreateDefaultSubnetInput)
    pub fn builder() -> crate::input::create_default_subnet_input::Builder {
        crate::input::create_default_subnet_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDefaultSubnet {
    type Output = std::result::Result<
        crate::output::CreateDefaultSubnetOutput,
        crate::error::CreateDefaultSubnetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_default_subnet_error(response)
        } else {
            crate::operation_deser::parse_create_default_subnet_response(response)
        }
    }
}

/// <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet
/// in each Availability Zone. For more information about the components of a default VPC,
/// see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default VPC and
/// default subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. You cannot
/// specify the components of the default VPC yourself.</p>
/// <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have
/// more than one default VPC per Region.</p>
/// <p>If your account supports EC2-Classic, you cannot use this action to create a default VPC
/// in a Region that supports EC2-Classic. If you want a default VPC in a Region that
/// supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is
/// that possible?" in the <a href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs
/// FAQ</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDefaultVpc {
    _private: (),
}
impl CreateDefaultVpc {
    /// Creates a new builder-style object to manufacture [`CreateDefaultVpcInput`](crate::input::CreateDefaultVpcInput)
    pub fn builder() -> crate::input::create_default_vpc_input::Builder {
        crate::input::create_default_vpc_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDefaultVpc {
    type Output = std::result::Result<
        crate::output::CreateDefaultVpcOutput,
        crate::error::CreateDefaultVpcError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_default_vpc_error(response)
        } else {
            crate::operation_deser::parse_create_default_vpc_response(response)
        }
    }
}

/// <p>Creates a set of DHCP options for your VPC. After creating the set, you must
/// associate it with the VPC, causing all existing and new instances that you launch in
/// the VPC to use this set of DHCP options. The following are the individual DHCP
/// options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p>
/// <ul>
/// <li>
/// <p>
/// <code>domain-name-servers</code> - The IP addresses of up to four domain name
/// servers, or AmazonProvidedDNS. The default DHCP option set specifies
/// AmazonProvidedDNS. If specifying more than one domain name server, specify the
/// IP addresses in a single parameter, separated by commas. To have your instance
/// receive a custom DNS hostname as specified in <code>domain-name</code>, you must
/// set <code>domain-name-servers</code> to a custom DNS server.</p>
/// </li>
/// <li>
/// <p>
/// <code>domain-name</code> - If you're using AmazonProvidedDNS in
/// <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using
/// AmazonProvidedDNS in another Region, specify
/// <code>region.compute.internal</code> (for example,
/// <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain
/// name (for example, <code>ExampleCompany.com</code>). This value is used to complete
/// unqualified DNS hostnames. <b>Important</b>: Some
/// Linux operating systems accept multiple domain names separated by spaces.
/// However, Windows and other Linux operating systems treat the value as a single
/// domain, which results in unexpected behavior. If your DHCP options set is
/// associated with a VPC that has instances with multiple operating systems,
/// specify only one domain name.</p>
/// </li>
/// <li>
/// <p>
/// <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP)
/// servers.</p>
/// </li>
/// <li>
/// <p>
/// <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name
/// servers.</p>
/// </li>
/// <li>
/// <p>
/// <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that
/// you specify 2 (broadcast and multicast are not currently supported). For more information
/// about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p>
/// </li>
/// </ul>
/// <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS
/// server that we provide (AmazonProvidedDNS). If you create a set of options, and if your
/// VPC has an internet gateway, make sure to set the <code>domain-name-servers</code>
/// option either to <code>AmazonProvidedDNS</code> or to a domain name server of your
/// choice. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDhcpOptions {
    _private: (),
}
impl CreateDhcpOptions {
    /// Creates a new builder-style object to manufacture [`CreateDhcpOptionsInput`](crate::input::CreateDhcpOptionsInput)
    pub fn builder() -> crate::input::create_dhcp_options_input::Builder {
        crate::input::create_dhcp_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDhcpOptions {
    type Output = std::result::Result<
        crate::output::CreateDhcpOptionsOutput,
        crate::error::CreateDhcpOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_dhcp_options_error(response)
        } else {
            crate::operation_deser::parse_create_dhcp_options_response(response)
        }
    }
}

/// <p>[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only
/// internet gateway is used to enable outbound communication over IPv6 from instances in
/// your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6
/// connection with your instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateEgressOnlyInternetGateway {
    _private: (),
}
impl CreateEgressOnlyInternetGateway {
    /// Creates a new builder-style object to manufacture [`CreateEgressOnlyInternetGatewayInput`](crate::input::CreateEgressOnlyInternetGatewayInput)
    pub fn builder() -> crate::input::create_egress_only_internet_gateway_input::Builder {
        crate::input::create_egress_only_internet_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateEgressOnlyInternetGateway {
    type Output = std::result::Result<
        crate::output::CreateEgressOnlyInternetGatewayOutput,
        crate::error::CreateEgressOnlyInternetGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_egress_only_internet_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_egress_only_internet_gateway_response(response)
        }
    }
}

/// <p>Launches an EC2 Fleet.</p>
/// <p>You can create a single EC2 Fleet that includes multiple launch specifications that vary by
/// instance type, AMI, Availability Zone, or subnet.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching an EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFleet {
    _private: (),
}
impl CreateFleet {
    /// Creates a new builder-style object to manufacture [`CreateFleetInput`](crate::input::CreateFleetInput)
    pub fn builder() -> crate::input::create_fleet_input::Builder {
        crate::input::create_fleet_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFleet {
    type Output =
        std::result::Result<crate::output::CreateFleetOutput, crate::error::CreateFleetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_fleet_error(response)
        } else {
            crate::operation_deser::parse_create_fleet_response(response)
        }
    }
}

/// <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface,
/// subnet, or VPC. </p>
/// <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events
/// consisting of fields that describe the traffic flow. For more information, see
/// <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow log records</a>
/// in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network
/// interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all
/// of the monitored network interfaces are published to a single log file object that is stored in the specified
/// bucket.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFlowLogs {
    _private: (),
}
impl CreateFlowLogs {
    /// Creates a new builder-style object to manufacture [`CreateFlowLogsInput`](crate::input::CreateFlowLogsInput)
    pub fn builder() -> crate::input::create_flow_logs_input::Builder {
        crate::input::create_flow_logs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFlowLogs {
    type Output =
        std::result::Result<crate::output::CreateFlowLogsOutput, crate::error::CreateFlowLogsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_flow_logs_error(response)
        } else {
            crate::operation_deser::parse_create_flow_logs_response(response)
        }
    }
}

/// <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p>
/// <p>The create operation is asynchronous. To verify that the AFI is ready for use,
/// check the output logs.</p>
/// <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA.
/// You can securely deploy an AFI on multiple FPGA-accelerated instances.
/// For more information, see the <a href="https://github.com/aws/aws-fpga/">AWS FPGA Hardware Development Kit</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateFpgaImage {
    _private: (),
}
impl CreateFpgaImage {
    /// Creates a new builder-style object to manufacture [`CreateFpgaImageInput`](crate::input::CreateFpgaImageInput)
    pub fn builder() -> crate::input::create_fpga_image_input::Builder {
        crate::input::create_fpga_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateFpgaImage {
    type Output = std::result::Result<
        crate::output::CreateFpgaImageOutput,
        crate::error::CreateFpgaImageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_fpga_image_error(response)
        } else {
            crate::operation_deser::parse_create_fpga_image_response(response)
        }
    }
}

/// <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance
/// that is either running or stopped.</p>
/// <p>If you customized your instance with instance store volumes or Amazon EBS volumes in addition to the root device volume, the
/// new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI,
/// the instance automatically launches with those additional volumes.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateImage {
    _private: (),
}
impl CreateImage {
    /// Creates a new builder-style object to manufacture [`CreateImageInput`](crate::input::CreateImageInput)
    pub fn builder() -> crate::input::create_image_input::Builder {
        crate::input::create_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateImage {
    type Output =
        std::result::Result<crate::output::CreateImageOutput, crate::error::CreateImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_image_error(response)
        } else {
            crate::operation_deser::parse_create_image_response(response)
        }
    }
}

/// <p>Creates an event window in which scheduled events for the associated Amazon EC2 instances can
/// run.</p>
/// <p>You can define either a set of time ranges or a cron expression when creating the event
/// window, but not both. All event window times are in UTC.</p>
/// <p>You can create up to 200 event windows per Amazon Web Services Region.</p>
/// <p>When you create the event window, targets (instance IDs, Dedicated Host IDs, or tags)
/// are not yet associated with it. To ensure that the event window can be used, you must
/// associate one or more targets with it by using the <a>AssociateInstanceEventWindow</a> API.</p>
/// <important>
/// <p>Event windows are applicable only for scheduled events that stop, reboot, or
/// terminate instances.</p>
/// <p>Event windows are <i>not</i> applicable for:</p>
/// <ul>
/// <li>
/// <p>Expedited scheduled events and network maintenance events. </p>
/// </li>
/// <li>
/// <p>Unscheduled maintenance such as AutoRecovery and unplanned reboots.</p>
/// </li>
/// </ul>
/// </important>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
/// events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInstanceEventWindow {
    _private: (),
}
impl CreateInstanceEventWindow {
    /// Creates a new builder-style object to manufacture [`CreateInstanceEventWindowInput`](crate::input::CreateInstanceEventWindowInput)
    pub fn builder() -> crate::input::create_instance_event_window_input::Builder {
        crate::input::create_instance_event_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInstanceEventWindow {
    type Output = std::result::Result<
        crate::output::CreateInstanceEventWindowOutput,
        crate::error::CreateInstanceEventWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_instance_event_window_error(response)
        } else {
            crate::operation_deser::parse_create_instance_event_window_response(response)
        }
    }
}

/// <p>Exports a running or stopped instance to an Amazon S3 bucket.</p>
/// <p>For information about the supported operating systems, image formats, and known limitations
/// for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an instance as a VM Using VM Import/Export</a>
/// in the <i>VM Import/Export User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInstanceExportTask {
    _private: (),
}
impl CreateInstanceExportTask {
    /// Creates a new builder-style object to manufacture [`CreateInstanceExportTaskInput`](crate::input::CreateInstanceExportTaskInput)
    pub fn builder() -> crate::input::create_instance_export_task_input::Builder {
        crate::input::create_instance_export_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInstanceExportTask {
    type Output = std::result::Result<
        crate::output::CreateInstanceExportTaskOutput,
        crate::error::CreateInstanceExportTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_instance_export_task_error(response)
        } else {
            crate::operation_deser::parse_create_instance_export_task_response(response)
        }
    }
}

/// <p>Creates an internet gateway for use with a VPC. After creating the internet gateway,
/// you attach it to a VPC using <a>AttachInternetGateway</a>.</p>
/// <p>For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInternetGateway {
    _private: (),
}
impl CreateInternetGateway {
    /// Creates a new builder-style object to manufacture [`CreateInternetGatewayInput`](crate::input::CreateInternetGatewayInput)
    pub fn builder() -> crate::input::create_internet_gateway_input::Builder {
        crate::input::create_internet_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInternetGateway {
    type Output = std::result::Result<
        crate::output::CreateInternetGatewayOutput,
        crate::error::CreateInternetGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_internet_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_internet_gateway_response(response)
        }
    }
}

/// <p>Creates an ED25519 or 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public
/// key and displays the private key for you to save to a file. The private key is returned
/// as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name
/// already exists, Amazon EC2 returns an error.</p>
/// <p>The key pair returned to you is available only in the Amazon Web Services Region in which you create it.
/// If you prefer, you can create your own key pair using a third-party tool and upload it
/// to any Region using <a>ImportKeyPair</a>.</p>
/// <p>You can have up to 5,000 key pairs per Amazon Web Services Region.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateKeyPair {
    _private: (),
}
impl CreateKeyPair {
    /// Creates a new builder-style object to manufacture [`CreateKeyPairInput`](crate::input::CreateKeyPairInput)
    pub fn builder() -> crate::input::create_key_pair_input::Builder {
        crate::input::create_key_pair_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateKeyPair {
    type Output =
        std::result::Result<crate::output::CreateKeyPairOutput, crate::error::CreateKeyPairError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_key_pair_error(response)
        } else {
            crate::operation_deser::parse_create_key_pair_response(response)
        }
    }
}

/// <p>Creates a launch template. A launch template contains the parameters to launch an
/// instance. When you launch an instance using <a>RunInstances</a>, you can
/// specify a launch template instead of providing the launch parameters in the request. For
/// more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a
/// launch template</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLaunchTemplate {
    _private: (),
}
impl CreateLaunchTemplate {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateInput`](crate::input::CreateLaunchTemplateInput)
    pub fn builder() -> crate::input::create_launch_template_input::Builder {
        crate::input::create_launch_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLaunchTemplate {
    type Output = std::result::Result<
        crate::output::CreateLaunchTemplateOutput,
        crate::error::CreateLaunchTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_launch_template_error(response)
        } else {
            crate::operation_deser::parse_create_launch_template_response(response)
        }
    }
}

/// <p>Creates a new version for a launch template. You can specify an existing version of
/// launch template from which to base the new version.</p>
/// <p>Launch template versions are numbered in the order in which they are created. You
/// cannot specify, change, or replace the numbering of launch template versions.</p>
/// <p>For
/// more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#manage-launch-template-versions">Managing launch template versions</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLaunchTemplateVersion {
    _private: (),
}
impl CreateLaunchTemplateVersion {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateVersionInput`](crate::input::CreateLaunchTemplateVersionInput)
    pub fn builder() -> crate::input::create_launch_template_version_input::Builder {
        crate::input::create_launch_template_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLaunchTemplateVersion {
    type Output = std::result::Result<
        crate::output::CreateLaunchTemplateVersionOutput,
        crate::error::CreateLaunchTemplateVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_launch_template_version_error(response)
        } else {
            crate::operation_deser::parse_create_launch_template_version_response(response)
        }
    }
}

/// <p>Creates a static route for the specified local gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLocalGatewayRoute {
    _private: (),
}
impl CreateLocalGatewayRoute {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteInput`](crate::input::CreateLocalGatewayRouteInput)
    pub fn builder() -> crate::input::create_local_gateway_route_input::Builder {
        crate::input::create_local_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLocalGatewayRoute {
    type Output = std::result::Result<
        crate::output::CreateLocalGatewayRouteOutput,
        crate::error::CreateLocalGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_local_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_create_local_gateway_route_response(response)
        }
    }
}

/// <p>Associates the specified VPC with the specified local gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLocalGatewayRouteTableVpcAssociation {
    _private: (),
}
impl CreateLocalGatewayRouteTableVpcAssociation {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteTableVpcAssociationInput`](crate::input::CreateLocalGatewayRouteTableVpcAssociationInput)
    pub fn builder() -> crate::input::create_local_gateway_route_table_vpc_association_input::Builder
    {
        crate::input::create_local_gateway_route_table_vpc_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLocalGatewayRouteTableVpcAssociation {
    type Output = std::result::Result<
        crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput,
        crate::error::CreateLocalGatewayRouteTableVpcAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_local_gateway_route_table_vpc_association_error(
                response,
            )
        } else {
            crate::operation_deser::parse_create_local_gateway_route_table_vpc_association_response(
                response,
            )
        }
    }
}

/// <p>Creates a managed prefix list. You can specify one or more entries for the prefix list.
/// Each entry consists of a CIDR block and an optional description.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateManagedPrefixList {
    _private: (),
}
impl CreateManagedPrefixList {
    /// Creates a new builder-style object to manufacture [`CreateManagedPrefixListInput`](crate::input::CreateManagedPrefixListInput)
    pub fn builder() -> crate::input::create_managed_prefix_list_input::Builder {
        crate::input::create_managed_prefix_list_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateManagedPrefixList {
    type Output = std::result::Result<
        crate::output::CreateManagedPrefixListOutput,
        crate::error::CreateManagedPrefixListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_managed_prefix_list_error(response)
        } else {
            crate::operation_deser::parse_create_managed_prefix_list_response(response)
        }
    }
}

/// <p>Creates a NAT gateway in the specified subnet. This action creates a network interface
/// in the specified subnet with a private IP address from the IP address range of the
/// subnet. You can create either a public NAT gateway or a private NAT gateway.</p>
/// <p>With a public NAT gateway, internet-bound traffic from a private subnet can be routed
/// to the NAT gateway, so that instances in a private subnet can connect to the internet.</p>
/// <p>With a private NAT gateway, private communication is routed across VPCs and on-premises
/// networks through a transit gateway or virtual private gateway. Common use cases include
/// running large workloads behind a small pool of allowlisted IPv4 addresses, preserving
/// private IPv4 addresses, and communicating between overlapping networks.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNatGateway {
    _private: (),
}
impl CreateNatGateway {
    /// Creates a new builder-style object to manufacture [`CreateNatGatewayInput`](crate::input::CreateNatGatewayInput)
    pub fn builder() -> crate::input::create_nat_gateway_input::Builder {
        crate::input::create_nat_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNatGateway {
    type Output = std::result::Result<
        crate::output::CreateNatGatewayOutput,
        crate::error::CreateNatGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_nat_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_nat_gateway_response(response)
        }
    }
}

/// <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetworkAcl {
    _private: (),
}
impl CreateNetworkAcl {
    /// Creates a new builder-style object to manufacture [`CreateNetworkAclInput`](crate::input::CreateNetworkAclInput)
    pub fn builder() -> crate::input::create_network_acl_input::Builder {
        crate::input::create_network_acl_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNetworkAcl {
    type Output = std::result::Result<
        crate::output::CreateNetworkAclOutput,
        crate::error::CreateNetworkAclError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_network_acl_error(response)
        } else {
            crate::operation_deser::parse_create_network_acl_response(response)
        }
    }
}

/// <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules
/// and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated
/// with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of
/// ingress rules and a separate set of egress rules.</p>
/// <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the
/// other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p>
/// <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p>
/// <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetworkAclEntry {
    _private: (),
}
impl CreateNetworkAclEntry {
    /// Creates a new builder-style object to manufacture [`CreateNetworkAclEntryInput`](crate::input::CreateNetworkAclEntryInput)
    pub fn builder() -> crate::input::create_network_acl_entry_input::Builder {
        crate::input::create_network_acl_entry_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNetworkAclEntry {
    type Output = std::result::Result<
        crate::output::CreateNetworkAclEntryOutput,
        crate::error::CreateNetworkAclEntryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_network_acl_entry_error(response)
        } else {
            crate::operation_deser::parse_create_network_acl_entry_response(response)
        }
    }
}

/// <p>Creates a path to analyze for reachability.</p>
/// <p>Reachability Analyzer enables you to analyze and debug network reachability between
/// two resources in your virtual private cloud (VPC). For more information, see
/// <a href="https://docs.aws.amazon.com/vpc/latest/reachability/">What is Reachability Analyzer</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetworkInsightsPath {
    _private: (),
}
impl CreateNetworkInsightsPath {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInsightsPathInput`](crate::input::CreateNetworkInsightsPathInput)
    pub fn builder() -> crate::input::create_network_insights_path_input::Builder {
        crate::input::create_network_insights_path_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNetworkInsightsPath {
    type Output = std::result::Result<
        crate::output::CreateNetworkInsightsPathOutput,
        crate::error::CreateNetworkInsightsPathError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_network_insights_path_error(response)
        } else {
            crate::operation_deser::parse_create_network_insights_path_response(response)
        }
    }
}

/// <p>Creates a network interface in the specified subnet.</p>
/// <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a>
/// in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetworkInterface {
    _private: (),
}
impl CreateNetworkInterface {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfaceInput`](crate::input::CreateNetworkInterfaceInput)
    pub fn builder() -> crate::input::create_network_interface_input::Builder {
        crate::input::create_network_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNetworkInterface {
    type Output = std::result::Result<
        crate::output::CreateNetworkInterfaceOutput,
        crate::error::CreateNetworkInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_network_interface_error(response)
        } else {
            crate::operation_deser::parse_create_network_interface_response(response)
        }
    }
}

/// <p>Grants an Amazon Web Services-authorized account permission to attach the specified network interface to
/// an instance in their account.</p>
/// <p>You can grant permission to a single Amazon Web Services account only, and only one account at a time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetworkInterfacePermission {
    _private: (),
}
impl CreateNetworkInterfacePermission {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfacePermissionInput`](crate::input::CreateNetworkInterfacePermissionInput)
    pub fn builder() -> crate::input::create_network_interface_permission_input::Builder {
        crate::input::create_network_interface_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateNetworkInterfacePermission {
    type Output = std::result::Result<
        crate::output::CreateNetworkInterfacePermissionOutput,
        crate::error::CreateNetworkInterfacePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_network_interface_permission_error(response)
        } else {
            crate::operation_deser::parse_create_network_interface_permission_response(response)
        }
    }
}

/// <p>Creates a placement group in which to launch instances. The strategy of the placement
/// group determines how the instances are organized within the group. </p>
/// <p>A <code>cluster</code> placement group is a logical grouping of instances within a
/// single Availability Zone that benefit from low network latency, high network throughput.
/// A <code>spread</code> placement group places instances on distinct hardware. A
/// <code>partition</code> placement group places groups of instances in different
/// partitions, where instances in one partition do not share the same hardware with
/// instances in another partition.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the
/// <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePlacementGroup {
    _private: (),
}
impl CreatePlacementGroup {
    /// Creates a new builder-style object to manufacture [`CreatePlacementGroupInput`](crate::input::CreatePlacementGroupInput)
    pub fn builder() -> crate::input::create_placement_group_input::Builder {
        crate::input::create_placement_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePlacementGroup {
    type Output = std::result::Result<
        crate::output::CreatePlacementGroupOutput,
        crate::error::CreatePlacementGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_placement_group_error(response)
        } else {
            crate::operation_deser::parse_create_placement_group_response(response)
        }
    }
}

/// <p>Creates a root volume replacement task for an Amazon EC2 instance. The root volume
/// can either be restored to its initial launch state, or it can be restored using a
/// specific snapshot.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-restoring-volume.html#replace-root">Replace a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplaceRootVolumeTask {
    _private: (),
}
impl CreateReplaceRootVolumeTask {
    /// Creates a new builder-style object to manufacture [`CreateReplaceRootVolumeTaskInput`](crate::input::CreateReplaceRootVolumeTaskInput)
    pub fn builder() -> crate::input::create_replace_root_volume_task_input::Builder {
        crate::input::create_replace_root_volume_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReplaceRootVolumeTask {
    type Output = std::result::Result<
        crate::output::CreateReplaceRootVolumeTaskOutput,
        crate::error::CreateReplaceRootVolumeTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_replace_root_volume_task_error(response)
        } else {
            crate::operation_deser::parse_create_replace_root_volume_task_response(response)
        }
    }
}

/// <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance
/// Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your
/// Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p>
/// <note>
/// <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace.
/// Convertible Reserved Instances cannot be sold.</p>
/// </note>
/// <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p>
/// <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance
/// Marketplace. After completing the registration process, you can create a Reserved Instance
/// Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price
/// to receive for them. Your Standard Reserved Instance listings then become available for purchase. To
/// view the details of your Standard Reserved Instance listing, you can use the
/// <a>DescribeReservedInstancesListings</a> operation.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the
/// <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReservedInstancesListing {
    _private: (),
}
impl CreateReservedInstancesListing {
    /// Creates a new builder-style object to manufacture [`CreateReservedInstancesListingInput`](crate::input::CreateReservedInstancesListingInput)
    pub fn builder() -> crate::input::create_reserved_instances_listing_input::Builder {
        crate::input::create_reserved_instances_listing_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReservedInstancesListing {
    type Output = std::result::Result<
        crate::output::CreateReservedInstancesListingOutput,
        crate::error::CreateReservedInstancesListingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_reserved_instances_listing_error(response)
        } else {
            crate::operation_deser::parse_create_reserved_instances_listing_response(response)
        }
    }
}

/// <p>Starts a task that restores an AMI from an Amazon S3 object that was previously created by using
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p>
/// <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
/// Amazon S3</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRestoreImageTask {
    _private: (),
}
impl CreateRestoreImageTask {
    /// Creates a new builder-style object to manufacture [`CreateRestoreImageTaskInput`](crate::input::CreateRestoreImageTaskInput)
    pub fn builder() -> crate::input::create_restore_image_task_input::Builder {
        crate::input::create_restore_image_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRestoreImageTask {
    type Output = std::result::Result<
        crate::output::CreateRestoreImageTaskOutput,
        crate::error::CreateRestoreImageTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_restore_image_task_error(response)
        } else {
            crate::operation_deser::parse_create_restore_image_task_response(response)
        }
    }
}

/// <p>Creates a route in a route table within a VPC.</p>
/// <p>You must specify one of the following targets: internet gateway or virtual private
/// gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.</p>
/// <p>When determining how to route traffic, we use the route with the most specific match.
/// For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the
/// route table includes the following two IPv4 routes:</p>
/// <ul>
/// <li>
/// <p>
/// <code>192.0.2.0/24</code> (goes to some target A)</p>
/// </li>
/// <li>
/// <p>
/// <code>192.0.2.0/28</code> (goes to some target B)</p>
/// </li>
/// </ul>
/// <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route
/// in the list covers a smaller number of IP addresses and is therefore more specific,
/// so we use that route to determine where to target the traffic.</p>
/// <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRoute {
    _private: (),
}
impl CreateRoute {
    /// Creates a new builder-style object to manufacture [`CreateRouteInput`](crate::input::CreateRouteInput)
    pub fn builder() -> crate::input::create_route_input::Builder {
        crate::input::create_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRoute {
    type Output =
        std::result::Result<crate::output::CreateRouteOutput, crate::error::CreateRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_route_error(response)
        } else {
            crate::operation_deser::parse_create_route_response(response)
        }
    }
}

/// <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRouteTable {
    _private: (),
}
impl CreateRouteTable {
    /// Creates a new builder-style object to manufacture [`CreateRouteTableInput`](crate::input::CreateRouteTableInput)
    pub fn builder() -> crate::input::create_route_table_input::Builder {
        crate::input::create_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRouteTable {
    type Output = std::result::Result<
        crate::output::CreateRouteTableOutput,
        crate::error::CreateRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_route_table_error(response)
        } else {
            crate::operation_deser::parse_create_route_table_response(response)
        }
    }
}

/// <p>Creates a security group.</p>
/// <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic.
/// For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 security groups</a> in
/// the <i>Amazon Elastic Compute Cloud User Guide</i> and
/// <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security groups for your VPC</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p>
/// <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p>
/// <p>You can add or remove rules from your security groups using
/// <a>AuthorizeSecurityGroupIngress</a>,
/// <a>AuthorizeSecurityGroupEgress</a>,
/// <a>RevokeSecurityGroupIngress</a>, and
/// <a>RevokeSecurityGroupEgress</a>.</p>
/// <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSecurityGroup {
    _private: (),
}
impl CreateSecurityGroup {
    /// Creates a new builder-style object to manufacture [`CreateSecurityGroupInput`](crate::input::CreateSecurityGroupInput)
    pub fn builder() -> crate::input::create_security_group_input::Builder {
        crate::input::create_security_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSecurityGroup {
    type Output = std::result::Result<
        crate::output::CreateSecurityGroupOutput,
        crate::error::CreateSecurityGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_security_group_error(response)
        } else {
            crate::operation_deser::parse_create_security_group_response(response)
        }
    }
}

/// <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for
/// backups, to make copies of EBS volumes, and to save data before shutting down an
/// instance.</p>
/// <p>You can create snapshots of volumes in a Region and volumes on an Outpost. If you
/// create a snapshot of a volume in a Region, the snapshot must be stored in the same
/// Region as the volume. If you create a snapshot of a volume on an Outpost, the snapshot
/// can be stored on the same Outpost as the volume, or in the Region for that Outpost.</p>
/// <p>When a snapshot is created, any Amazon Web Services Marketplace product codes that are associated with the
/// source volume are propagated to the snapshot.</p>
/// <p>You can take a snapshot of an attached volume that is in use. However, snapshots only
/// capture data that has been written to your Amazon EBS volume at the time the snapshot command is
/// issued; this might exclude any data that has been cached by any applications or the operating
/// system. If you can pause any file systems on the volume long enough to take a snapshot, your
/// snapshot should be complete. However, if you cannot pause all file writes to the volume, you
/// should unmount the volume from within the instance, issue the snapshot command, and then
/// remount the volume to ensure a consistent and complete snapshot. You may remount and use your
/// volume while the snapshot status is <code>pending</code>.</p>
/// <p>To create a snapshot for Amazon EBS volumes that serve as root devices, you should stop the
/// instance before taking the snapshot.</p>
/// <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that
/// are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes
/// and any associated snapshots always remain protected.</p>
/// <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2
/// resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSnapshot {
    _private: (),
}
impl CreateSnapshot {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotInput`](crate::input::CreateSnapshotInput)
    pub fn builder() -> crate::input::create_snapshot_input::Builder {
        crate::input::create_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSnapshot {
    type Output =
        std::result::Result<crate::output::CreateSnapshotOutput, crate::error::CreateSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_snapshot_error(response)
        } else {
            crate::operation_deser::parse_create_snapshot_response(response)
        }
    }
}

/// <p>Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3.
/// Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot
/// each that is crash-consistent across the instance. Boot volumes can be excluded by changing the
/// parameters. </p>
/// <p>You can create multi-volume snapshots of instances in a Region and instances on an
/// Outpost. If you create snapshots from an instance in a Region, the snapshots must be stored
/// in the same Region as the instance. If you create snapshots from an instance on an Outpost,
/// the snapshots can be stored on the same Outpost as the instance, or in the Region for that
/// Outpost.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSnapshots {
    _private: (),
}
impl CreateSnapshots {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotsInput`](crate::input::CreateSnapshotsInput)
    pub fn builder() -> crate::input::create_snapshots_input::Builder {
        crate::input::create_snapshots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSnapshots {
    type Output = std::result::Result<
        crate::output::CreateSnapshotsOutput,
        crate::error::CreateSnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_snapshots_error(response)
        } else {
            crate::operation_deser::parse_create_snapshots_response(response)
        }
    }
}

/// <p>Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs.
/// You can create one data feed per Amazon Web Services account. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance data feed</a>
/// in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSpotDatafeedSubscription {
    _private: (),
}
impl CreateSpotDatafeedSubscription {
    /// Creates a new builder-style object to manufacture [`CreateSpotDatafeedSubscriptionInput`](crate::input::CreateSpotDatafeedSubscriptionInput)
    pub fn builder() -> crate::input::create_spot_datafeed_subscription_input::Builder {
        crate::input::create_spot_datafeed_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSpotDatafeedSubscription {
    type Output = std::result::Result<
        crate::output::CreateSpotDatafeedSubscriptionOutput,
        crate::error::CreateSpotDatafeedSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_spot_datafeed_subscription_error(response)
        } else {
            crate::operation_deser::parse_create_spot_datafeed_subscription_response(response)
        }
    }
}

/// <p>Stores an AMI as a single object in an Amazon S3 bucket.</p>
/// <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
/// Amazon S3</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateStoreImageTask {
    _private: (),
}
impl CreateStoreImageTask {
    /// Creates a new builder-style object to manufacture [`CreateStoreImageTaskInput`](crate::input::CreateStoreImageTaskInput)
    pub fn builder() -> crate::input::create_store_image_task_input::Builder {
        crate::input::create_store_image_task_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateStoreImageTask {
    type Output = std::result::Result<
        crate::output::CreateStoreImageTaskOutput,
        crate::error::CreateStoreImageTaskError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_store_image_task_error(response)
        } else {
            crate::operation_deser::parse_create_store_image_task_response(response)
        }
    }
}

/// <p>Creates a subnet in a specified VPC.</p>
/// <p>You must specify an IPv4 CIDR block for the subnet. After you create a subnet, you
/// can't change its CIDR block. The allowed block size is between a /16 netmask (65,536 IP
/// addresses) and /28 netmask (16 IP addresses). The CIDR block must not overlap with the
/// CIDR block of an existing subnet in the VPC.</p>
/// <p>If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an
/// IPv6 CIDR block that uses a /64 prefix length. </p>
/// <important>
/// <p>Amazon Web Services reserves both the first four and the last IPv4 address in each subnet's CIDR
/// block. They're not available for use.</p>
/// </important>
/// <p>If you add more than one subnet to a VPC, they're set up in a star topology with a
/// logical router in the middle.</p>
/// <p>When you stop an instance in a subnet, it retains its private IPv4 address. It's
/// therefore possible to have a subnet with no running instances (they're all stopped), but
/// no remaining IP addresses available.</p>
/// <p>For more information about subnets, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and subnets</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSubnet {
    _private: (),
}
impl CreateSubnet {
    /// Creates a new builder-style object to manufacture [`CreateSubnetInput`](crate::input::CreateSubnetInput)
    pub fn builder() -> crate::input::create_subnet_input::Builder {
        crate::input::create_subnet_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSubnet {
    type Output =
        std::result::Result<crate::output::CreateSubnetOutput, crate::error::CreateSubnetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_subnet_error(response)
        } else {
            crate::operation_deser::parse_create_subnet_response(response)
        }
    }
}

/// <p>Creates a subnet CIDR reservation. For information about subnet CIDR reservations, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/subnet-cidr-reservation.html">Subnet CIDR reservations</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSubnetCidrReservation {
    _private: (),
}
impl CreateSubnetCidrReservation {
    /// Creates a new builder-style object to manufacture [`CreateSubnetCidrReservationInput`](crate::input::CreateSubnetCidrReservationInput)
    pub fn builder() -> crate::input::create_subnet_cidr_reservation_input::Builder {
        crate::input::create_subnet_cidr_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSubnetCidrReservation {
    type Output = std::result::Result<
        crate::output::CreateSubnetCidrReservationOutput,
        crate::error::CreateSubnetCidrReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_subnet_cidr_reservation_error(response)
        } else {
            crate::operation_deser::parse_create_subnet_cidr_reservation_response(response)
        }
    }
}

/// <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or
/// resources. When you specify an existing tag key, the value is overwritten with
/// the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and
/// optional value. Tag keys must be unique per resource.</p>
/// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about
/// creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported
/// Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon
/// Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTags {
    _private: (),
}
impl CreateTags {
    /// Creates a new builder-style object to manufacture [`CreateTagsInput`](crate::input::CreateTagsInput)
    pub fn builder() -> crate::input::create_tags_input::Builder {
        crate::input::create_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTags {
    type Output =
        std::result::Result<crate::output::CreateTagsOutput, crate::error::CreateTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_tags_error(response)
        } else {
            crate::operation_deser::parse_create_tags_response(response)
        }
    }
}

/// <p>Creates a Traffic Mirror filter.</p>
/// <p>A Traffic Mirror filter is a set of rules that defines the traffic to mirror.</p>
/// <p>By default, no traffic is mirrored. To mirror traffic, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a> to add Traffic Mirror rules to the filter. The rules you
/// add define what traffic gets mirrored. You can also use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a> to mirror supported network services.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrafficMirrorFilter {
    _private: (),
}
impl CreateTrafficMirrorFilter {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorFilterInput`](crate::input::CreateTrafficMirrorFilterInput)
    pub fn builder() -> crate::input::create_traffic_mirror_filter_input::Builder {
        crate::input::create_traffic_mirror_filter_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrafficMirrorFilter {
    type Output = std::result::Result<
        crate::output::CreateTrafficMirrorFilterOutput,
        crate::error::CreateTrafficMirrorFilterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_traffic_mirror_filter_error(response)
        } else {
            crate::operation_deser::parse_create_traffic_mirror_filter_response(response)
        }
    }
}

/// <p>Creates a Traffic Mirror filter rule. </p>
/// <p>A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.</p>
/// <p>You need the Traffic Mirror filter ID when you create the rule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrafficMirrorFilterRule {
    _private: (),
}
impl CreateTrafficMirrorFilterRule {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorFilterRuleInput`](crate::input::CreateTrafficMirrorFilterRuleInput)
    pub fn builder() -> crate::input::create_traffic_mirror_filter_rule_input::Builder {
        crate::input::create_traffic_mirror_filter_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrafficMirrorFilterRule {
    type Output = std::result::Result<
        crate::output::CreateTrafficMirrorFilterRuleOutput,
        crate::error::CreateTrafficMirrorFilterRuleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_traffic_mirror_filter_rule_error(response)
        } else {
            crate::operation_deser::parse_create_traffic_mirror_filter_rule_response(response)
        }
    }
}

/// <p>Creates a Traffic Mirror session.</p>
/// <p>A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it
/// to the session to define a subset of the traffic to mirror, for example all TCP
/// traffic.</p>
/// <p>The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. </p>
/// <p>By default, no traffic is mirrored. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a> to
/// create filter rules that specify the traffic to mirror.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrafficMirrorSession {
    _private: (),
}
impl CreateTrafficMirrorSession {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorSessionInput`](crate::input::CreateTrafficMirrorSessionInput)
    pub fn builder() -> crate::input::create_traffic_mirror_session_input::Builder {
        crate::input::create_traffic_mirror_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrafficMirrorSession {
    type Output = std::result::Result<
        crate::output::CreateTrafficMirrorSessionOutput,
        crate::error::CreateTrafficMirrorSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_traffic_mirror_session_error(response)
        } else {
            crate::operation_deser::parse_create_traffic_mirror_session_response(response)
        }
    }
}

/// <p>Creates a target for your Traffic Mirror session.</p>
/// <p>A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and
/// the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in
/// different VPCs connected via VPC peering or a transit gateway.</p>
/// <p>A Traffic Mirror target can be a network interface, or a Network Load Balancer.</p>
/// <p>To use the target in a Traffic Mirror session, use  <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrafficMirrorTarget {
    _private: (),
}
impl CreateTrafficMirrorTarget {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorTargetInput`](crate::input::CreateTrafficMirrorTargetInput)
    pub fn builder() -> crate::input::create_traffic_mirror_target_input::Builder {
        crate::input::create_traffic_mirror_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrafficMirrorTarget {
    type Output = std::result::Result<
        crate::output::CreateTrafficMirrorTargetOutput,
        crate::error::CreateTrafficMirrorTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_traffic_mirror_target_error(response)
        } else {
            crate::operation_deser::parse_create_traffic_mirror_target_response(response)
        }
    }
}

/// <p>Creates a transit gateway.</p>
/// <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks.
/// After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN
/// connections to the transit gateway.</p>
/// <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p>
/// <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer
/// gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to
/// <a>CreateVpnConnection</a>.</p>
/// <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table
/// and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create
/// additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table.
/// You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource
/// attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGateway {
    _private: (),
}
impl CreateTransitGateway {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayInput`](crate::input::CreateTransitGatewayInput)
    pub fn builder() -> crate::input::create_transit_gateway_input::Builder {
        crate::input::create_transit_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGateway {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayOutput,
        crate::error::CreateTransitGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_response(response)
        }
    }
}

/// <p>Creates a Connect attachment from a specified transit gateway attachment. A Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a transit gateway and an appliance.</p>
/// <p>A Connect attachment uses an existing VPC or Amazon Web Services Direct Connect attachment as the underlying transport mechanism.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayConnect {
    _private: (),
}
impl CreateTransitGatewayConnect {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayConnectInput`](crate::input::CreateTransitGatewayConnectInput)
    pub fn builder() -> crate::input::create_transit_gateway_connect_input::Builder {
        crate::input::create_transit_gateway_connect_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayConnect {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayConnectOutput,
        crate::error::CreateTransitGatewayConnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_connect_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_connect_response(response)
        }
    }
}

/// <p>Creates a Connect peer for a specified transit gateway Connect attachment between a
/// transit gateway and an appliance.</p>
/// <p>The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html#tgw-connect-peer">Connect peers</a> in the <i>Transit Gateways Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayConnectPeer {
    _private: (),
}
impl CreateTransitGatewayConnectPeer {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayConnectPeerInput`](crate::input::CreateTransitGatewayConnectPeerInput)
    pub fn builder() -> crate::input::create_transit_gateway_connect_peer_input::Builder {
        crate::input::create_transit_gateway_connect_peer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayConnectPeer {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayConnectPeerOutput,
        crate::error::CreateTransitGatewayConnectPeerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_connect_peer_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_connect_peer_response(response)
        }
    }
}

/// <p>Creates a multicast domain using the specified transit gateway.</p>
/// <p>The transit gateway  must be in the available state before you create a domain. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a> to see the state of transit gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayMulticastDomain {
    _private: (),
}
impl CreateTransitGatewayMulticastDomain {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayMulticastDomainInput`](crate::input::CreateTransitGatewayMulticastDomainInput)
    pub fn builder() -> crate::input::create_transit_gateway_multicast_domain_input::Builder {
        crate::input::create_transit_gateway_multicast_domain_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayMulticastDomain {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayMulticastDomainOutput,
        crate::error::CreateTransitGatewayMulticastDomainError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_multicast_domain_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_multicast_domain_response(response)
        }
    }
}

/// <p>Requests a transit gateway peering attachment between the specified transit gateway
/// (requester) and a peer transit gateway (accepter). The transit gateways must be in
/// different Regions. The peer transit gateway can be in your account or a different
/// Amazon Web Services account.</p>
/// <p>After you create the peering attachment, the owner of the accepter transit gateway
/// must accept the attachment request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayPeeringAttachment {
    _private: (),
}
impl CreateTransitGatewayPeeringAttachment {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPeeringAttachmentInput`](crate::input::CreateTransitGatewayPeeringAttachmentInput)
    pub fn builder() -> crate::input::create_transit_gateway_peering_attachment_input::Builder {
        crate::input::create_transit_gateway_peering_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayPeeringAttachment {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayPeeringAttachmentOutput,
        crate::error::CreateTransitGatewayPeeringAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_peering_attachment_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_peering_attachment_response(
                response,
            )
        }
    }
}

/// <p>Creates a reference (route) to a prefix list in a specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayPrefixListReference {
    _private: (),
}
impl CreateTransitGatewayPrefixListReference {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPrefixListReferenceInput`](crate::input::CreateTransitGatewayPrefixListReferenceInput)
    pub fn builder() -> crate::input::create_transit_gateway_prefix_list_reference_input::Builder {
        crate::input::create_transit_gateway_prefix_list_reference_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayPrefixListReference {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayPrefixListReferenceOutput,
        crate::error::CreateTransitGatewayPrefixListReferenceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_prefix_list_reference_error(
                response,
            )
        } else {
            crate::operation_deser::parse_create_transit_gateway_prefix_list_reference_response(
                response,
            )
        }
    }
}

/// <p>Creates a static route for the specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayRoute {
    _private: (),
}
impl CreateTransitGatewayRoute {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteInput`](crate::input::CreateTransitGatewayRouteInput)
    pub fn builder() -> crate::input::create_transit_gateway_route_input::Builder {
        crate::input::create_transit_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayRoute {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayRouteOutput,
        crate::error::CreateTransitGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_route_response(response)
        }
    }
}

/// <p>Creates a route table for the specified transit gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayRouteTable {
    _private: (),
}
impl CreateTransitGatewayRouteTable {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteTableInput`](crate::input::CreateTransitGatewayRouteTableInput)
    pub fn builder() -> crate::input::create_transit_gateway_route_table_input::Builder {
        crate::input::create_transit_gateway_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayRouteTable {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayRouteTableOutput,
        crate::error::CreateTransitGatewayRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_route_table_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_route_table_response(response)
        }
    }
}

/// <p>Attaches the specified VPC to the specified transit gateway.</p>
/// <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached,
/// the new VPC CIDR range is not propagated to the default propagation route table.</p>
/// <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitGatewayVpcAttachment {
    _private: (),
}
impl CreateTransitGatewayVpcAttachment {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayVpcAttachmentInput`](crate::input::CreateTransitGatewayVpcAttachmentInput)
    pub fn builder() -> crate::input::create_transit_gateway_vpc_attachment_input::Builder {
        crate::input::create_transit_gateway_vpc_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitGatewayVpcAttachment {
    type Output = std::result::Result<
        crate::output::CreateTransitGatewayVpcAttachmentOutput,
        crate::error::CreateTransitGatewayVpcAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_gateway_vpc_attachment_error(response)
        } else {
            crate::operation_deser::parse_create_transit_gateway_vpc_attachment_response(response)
        }
    }
}

/// <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone.</p>
/// <p>You can create a new empty volume or restore a volume from an EBS snapshot.
/// Any Amazon Web Services Marketplace product codes from the snapshot are propagated to the volume.</p>
/// <p>You can create encrypted volumes. Encrypted volumes must be attached to instances that
/// support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically
/// encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2
/// resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Create an Amazon EBS volume</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVolume {
    _private: (),
}
impl CreateVolume {
    /// Creates a new builder-style object to manufacture [`CreateVolumeInput`](crate::input::CreateVolumeInput)
    pub fn builder() -> crate::input::create_volume_input::Builder {
        crate::input::create_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVolume {
    type Output =
        std::result::Result<crate::output::CreateVolumeOutput, crate::error::CreateVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_volume_error(response)
        } else {
            crate::operation_deser::parse_create_volume_response(response)
        }
    }
}

/// <p>Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create
/// uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4
/// addresses). For more information about how large to make your VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and
/// subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided
/// IPv6 CIDR block from Amazon's pool of IPv6 addresses, or an IPv6 CIDR block from an IPv6 address
/// pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p>
/// <p>By default, each instance you launch in the VPC has the default DHCP options, which
/// include only a default DNS server that we provide (AmazonProvidedDNS). For more
/// information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>You can specify the instance tenancy value for the VPC when you create it. You can't change
/// this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpc {
    _private: (),
}
impl CreateVpc {
    /// Creates a new builder-style object to manufacture [`CreateVpcInput`](crate::input::CreateVpcInput)
    pub fn builder() -> crate::input::create_vpc_input::Builder {
        crate::input::create_vpc_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpc {
    type Output = std::result::Result<crate::output::CreateVpcOutput, crate::error::CreateVpcError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpc_error(response)
        } else {
            crate::operation_deser::parse_create_vpc_response(response)
        }
    }
}

/// <p>Creates a VPC endpoint for a specified service. An endpoint enables you to create a
/// private connection between your VPC and the service. The service may be provided by AWS,
/// an AWS Marketplace Partner, or another AWS account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC Endpoints</a> in
/// the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>A <code>gateway</code> endpoint serves as a target for a route in your route table for
/// traffic destined for the AWS service. You can specify an endpoint policy to attach to
/// the endpoint, which will control access to the service from your VPC. You can also
/// specify the VPC route tables that use the endpoint.</p>
/// <p>An <code>interface</code> endpoint is a network interface in your subnet that
/// serves as an endpoint for communicating with the specified service. You can specify the
/// subnets in which to create an endpoint, and the security groups to associate with the
/// endpoint network interface.</p>
/// <p>A <code>GatewayLoadBalancer</code> endpoint is a network interface in your subnet that serves an endpoint for communicating with a Gateway Load Balancer that you've configured as a VPC endpoint service.</p>
/// <p>Use <a>DescribeVpcEndpointServices</a> to get a list of supported
/// services.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpcEndpoint {
    _private: (),
}
impl CreateVpcEndpoint {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointInput`](crate::input::CreateVpcEndpointInput)
    pub fn builder() -> crate::input::create_vpc_endpoint_input::Builder {
        crate::input::create_vpc_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpcEndpoint {
    type Output = std::result::Result<
        crate::output::CreateVpcEndpointOutput,
        crate::error::CreateVpcEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpc_endpoint_error(response)
        } else {
            crate::operation_deser::parse_create_vpc_endpoint_response(response)
        }
    }
}

/// <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint
/// service. A connection notification notifies you of specific endpoint events. You must
/// create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in
/// the <i>Amazon Simple Notification Service Developer Guide</i>.</p>
/// <p>You can create a connection notification for interface endpoints only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpcEndpointConnectionNotification {
    _private: (),
}
impl CreateVpcEndpointConnectionNotification {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointConnectionNotificationInput`](crate::input::CreateVpcEndpointConnectionNotificationInput)
    pub fn builder() -> crate::input::create_vpc_endpoint_connection_notification_input::Builder {
        crate::input::create_vpc_endpoint_connection_notification_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpcEndpointConnectionNotification {
    type Output = std::result::Result<
        crate::output::CreateVpcEndpointConnectionNotificationOutput,
        crate::error::CreateVpcEndpointConnectionNotificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpc_endpoint_connection_notification_error(
                response,
            )
        } else {
            crate::operation_deser::parse_create_vpc_endpoint_connection_notification_response(
                response,
            )
        }
    }
}

/// <p>Creates a VPC endpoint service configuration to which service consumers (AWS accounts,
/// IAM users, and IAM roles) can connect.</p>
/// <p>To create an endpoint service configuration, you must first create one of the
/// following for your service:</p>
/// <ul>
/// <li>
/// <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html">Network Load Balancer</a>. Service consumers connect to your service using an
/// interface endpoint.</p>
/// </li>
/// <li>
/// <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/introduction.html">Gateway Load Balancer</a>. Service consumers connect to your service using a
/// Gateway Load Balancer endpoint.</p>
/// </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC Endpoint Services</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>. </p>
/// <p>If you set the private DNS name, you must prove that you own the private DNS domain
/// name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service
/// Private DNS Name Verification</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpcEndpointServiceConfiguration {
    _private: (),
}
impl CreateVpcEndpointServiceConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointServiceConfigurationInput`](crate::input::CreateVpcEndpointServiceConfigurationInput)
    pub fn builder() -> crate::input::create_vpc_endpoint_service_configuration_input::Builder {
        crate::input::create_vpc_endpoint_service_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpcEndpointServiceConfiguration {
    type Output = std::result::Result<
        crate::output::CreateVpcEndpointServiceConfigurationOutput,
        crate::error::CreateVpcEndpointServiceConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpc_endpoint_service_configuration_error(response)
        } else {
            crate::operation_deser::parse_create_vpc_endpoint_service_configuration_response(
                response,
            )
        }
    }
}

/// <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and
/// an accepter VPC with which to create the connection. The accepter VPC can belong to
/// another Amazon Web Services account and can be in a different Region to the requester VPC.
/// The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p>
/// <note>
/// <p>Limitations and rules apply to a VPC peering connection. For more information, see
/// the <a href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p>
/// </note>
/// <p>The owner of the accepter VPC must accept the peering request to activate the peering
/// connection. The VPC peering connection request expires after 7 days, after which it
/// cannot be accepted or rejected.</p>
/// <p>If you create a VPC peering connection request between VPCs with overlapping CIDR
/// blocks, the VPC peering connection has a status of <code>failed</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpcPeeringConnection {
    _private: (),
}
impl CreateVpcPeeringConnection {
    /// Creates a new builder-style object to manufacture [`CreateVpcPeeringConnectionInput`](crate::input::CreateVpcPeeringConnectionInput)
    pub fn builder() -> crate::input::create_vpc_peering_connection_input::Builder {
        crate::input::create_vpc_peering_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpcPeeringConnection {
    type Output = std::result::Result<
        crate::output::CreateVpcPeeringConnectionOutput,
        crate::error::CreateVpcPeeringConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpc_peering_connection_error(response)
        } else {
            crate::operation_deser::parse_create_vpc_peering_connection_response(response)
        }
    }
}

/// <p>Creates a VPN connection between an existing virtual private gateway or transit gateway and a
/// customer gateway. The supported connection type is <code>ipsec.1</code>.</p>
/// <p>The response includes information that you need to give to your network administrator
/// to configure your customer gateway.</p>
/// <important>
/// <p>We strongly recommend that you use HTTPS when calling this operation because the
/// response contains sensitive cryptographic information for configuring your customer
/// gateway device.</p>
/// </important>
/// <p>If you decide to shut down your VPN connection for any reason and later create a new
/// VPN connection, you must reconfigure your customer gateway with the new information
/// returned from this call.</p>
/// <p>This is an idempotent operation. If you perform the operation more than once, Amazon
/// EC2 doesn't return an error.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN
/// User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpnConnection {
    _private: (),
}
impl CreateVpnConnection {
    /// Creates a new builder-style object to manufacture [`CreateVpnConnectionInput`](crate::input::CreateVpnConnectionInput)
    pub fn builder() -> crate::input::create_vpn_connection_input::Builder {
        crate::input::create_vpn_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpnConnection {
    type Output = std::result::Result<
        crate::output::CreateVpnConnectionOutput,
        crate::error::CreateVpnConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpn_connection_error(response)
        } else {
            crate::operation_deser::parse_create_vpn_connection_response(response)
        }
    }
}

/// <p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpnConnectionRoute {
    _private: (),
}
impl CreateVpnConnectionRoute {
    /// Creates a new builder-style object to manufacture [`CreateVpnConnectionRouteInput`](crate::input::CreateVpnConnectionRouteInput)
    pub fn builder() -> crate::input::create_vpn_connection_route_input::Builder {
        crate::input::create_vpn_connection_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpnConnectionRoute {
    type Output = std::result::Result<
        crate::output::CreateVpnConnectionRouteOutput,
        crate::error::CreateVpnConnectionRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpn_connection_route_error(response)
        } else {
            crate::operation_deser::parse_create_vpn_connection_route_response(response)
        }
    }
}

/// <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVpnGateway {
    _private: (),
}
impl CreateVpnGateway {
    /// Creates a new builder-style object to manufacture [`CreateVpnGatewayInput`](crate::input::CreateVpnGatewayInput)
    pub fn builder() -> crate::input::create_vpn_gateway_input::Builder {
        crate::input::create_vpn_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVpnGateway {
    type Output = std::result::Result<
        crate::output::CreateVpnGatewayOutput,
        crate::error::CreateVpnGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vpn_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_vpn_gateway_response(response)
        }
    }
}

/// <p>Deletes a carrier gateway.</p>
/// <important>
/// <p>If you do not delete the route that contains the carrier gateway as the
/// Target, the route is a blackhole route. For information about how to delete a route, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteRoute.html">DeleteRoute</a>.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCarrierGateway {
    _private: (),
}
impl DeleteCarrierGateway {
    /// Creates a new builder-style object to manufacture [`DeleteCarrierGatewayInput`](crate::input::DeleteCarrierGatewayInput)
    pub fn builder() -> crate::input::delete_carrier_gateway_input::Builder {
        crate::input::delete_carrier_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCarrierGateway {
    type Output = std::result::Result<
        crate::output::DeleteCarrierGatewayOutput,
        crate::error::DeleteCarrierGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_carrier_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_carrier_gateway_response(response)
        }
    }
}

/// <p>Deletes the specified Client VPN endpoint. You must disassociate all target networks before you
/// can delete a Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteClientVpnEndpoint {
    _private: (),
}
impl DeleteClientVpnEndpoint {
    /// Creates a new builder-style object to manufacture [`DeleteClientVpnEndpointInput`](crate::input::DeleteClientVpnEndpointInput)
    pub fn builder() -> crate::input::delete_client_vpn_endpoint_input::Builder {
        crate::input::delete_client_vpn_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteClientVpnEndpoint {
    type Output = std::result::Result<
        crate::output::DeleteClientVpnEndpointOutput,
        crate::error::DeleteClientVpnEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_client_vpn_endpoint_error(response)
        } else {
            crate::operation_deser::parse_delete_client_vpn_endpoint_response(response)
        }
    }
}

/// <p>Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using
/// the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were
/// automatically added when associating a subnet. To remove routes that have been automatically added,
/// disassociate the target subnet from the Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteClientVpnRoute {
    _private: (),
}
impl DeleteClientVpnRoute {
    /// Creates a new builder-style object to manufacture [`DeleteClientVpnRouteInput`](crate::input::DeleteClientVpnRouteInput)
    pub fn builder() -> crate::input::delete_client_vpn_route_input::Builder {
        crate::input::delete_client_vpn_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteClientVpnRoute {
    type Output = std::result::Result<
        crate::output::DeleteClientVpnRouteOutput,
        crate::error::DeleteClientVpnRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_client_vpn_route_error(response)
        } else {
            crate::operation_deser::parse_delete_client_vpn_route_response(response)
        }
    }
}

/// <p>Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteCustomerGateway {
    _private: (),
}
impl DeleteCustomerGateway {
    /// Creates a new builder-style object to manufacture [`DeleteCustomerGatewayInput`](crate::input::DeleteCustomerGatewayInput)
    pub fn builder() -> crate::input::delete_customer_gateway_input::Builder {
        crate::input::delete_customer_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteCustomerGateway {
    type Output = std::result::Result<
        crate::output::DeleteCustomerGatewayOutput,
        crate::error::DeleteCustomerGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_customer_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_customer_gateway_response(response)
        }
    }
}

/// <p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDhcpOptions {
    _private: (),
}
impl DeleteDhcpOptions {
    /// Creates a new builder-style object to manufacture [`DeleteDhcpOptionsInput`](crate::input::DeleteDhcpOptionsInput)
    pub fn builder() -> crate::input::delete_dhcp_options_input::Builder {
        crate::input::delete_dhcp_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDhcpOptions {
    type Output = std::result::Result<
        crate::output::DeleteDhcpOptionsOutput,
        crate::error::DeleteDhcpOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_dhcp_options_error(response)
        } else {
            crate::operation_deser::parse_delete_dhcp_options_response(response)
        }
    }
}

/// <p>Deletes an egress-only internet gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteEgressOnlyInternetGateway {
    _private: (),
}
impl DeleteEgressOnlyInternetGateway {
    /// Creates a new builder-style object to manufacture [`DeleteEgressOnlyInternetGatewayInput`](crate::input::DeleteEgressOnlyInternetGatewayInput)
    pub fn builder() -> crate::input::delete_egress_only_internet_gateway_input::Builder {
        crate::input::delete_egress_only_internet_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteEgressOnlyInternetGateway {
    type Output = std::result::Result<
        crate::output::DeleteEgressOnlyInternetGatewayOutput,
        crate::error::DeleteEgressOnlyInternetGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_egress_only_internet_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_egress_only_internet_gateway_response(response)
        }
    }
}

/// <p>Deletes the specified EC2 Fleet.</p>
/// <p>After you delete an EC2 Fleet, it launches no new instances.</p>
/// <p>You must specify whether a deleted EC2 Fleet should also terminate its instances. If you
/// choose to terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code>
/// state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances
/// continue to run until they are interrupted or you terminate them manually.</p>
/// <p>For <code>instant</code> fleets, EC2 Fleet must terminate the instances when the fleet is
/// deleted. A deleted <code>instant</code> fleet with running instances is not
/// supported.</p>
/// <p class="title">
/// <b>Restrictions</b>
/// </p>
/// <ul>
/// <li>
/// <p>You can delete up to 25 <code>instant</code> fleets in a single request. If you exceed this
/// number, no <code>instant</code> fleets are deleted and an error is returned. There is no
/// restriction on the number of fleets of type <code>maintain</code> or <code>request</code> that can be deleted
/// in a single request.</p>
/// </li>
/// <li>
/// <p>Up to 1000 instances can be terminated in a single request to delete
/// <code>instant</code> fleets.</p>
/// </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#delete-fleet">Deleting an EC2
/// Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFleets {
    _private: (),
}
impl DeleteFleets {
    /// Creates a new builder-style object to manufacture [`DeleteFleetsInput`](crate::input::DeleteFleetsInput)
    pub fn builder() -> crate::input::delete_fleets_input::Builder {
        crate::input::delete_fleets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFleets {
    type Output =
        std::result::Result<crate::output::DeleteFleetsOutput, crate::error::DeleteFleetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_fleets_error(response)
        } else {
            crate::operation_deser::parse_delete_fleets_response(response)
        }
    }
}

/// <p>Deletes one or more flow logs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFlowLogs {
    _private: (),
}
impl DeleteFlowLogs {
    /// Creates a new builder-style object to manufacture [`DeleteFlowLogsInput`](crate::input::DeleteFlowLogsInput)
    pub fn builder() -> crate::input::delete_flow_logs_input::Builder {
        crate::input::delete_flow_logs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFlowLogs {
    type Output =
        std::result::Result<crate::output::DeleteFlowLogsOutput, crate::error::DeleteFlowLogsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_flow_logs_error(response)
        } else {
            crate::operation_deser::parse_delete_flow_logs_response(response)
        }
    }
}

/// <p>Deletes the specified Amazon FPGA Image (AFI).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFpgaImage {
    _private: (),
}
impl DeleteFpgaImage {
    /// Creates a new builder-style object to manufacture [`DeleteFpgaImageInput`](crate::input::DeleteFpgaImageInput)
    pub fn builder() -> crate::input::delete_fpga_image_input::Builder {
        crate::input::delete_fpga_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteFpgaImage {
    type Output = std::result::Result<
        crate::output::DeleteFpgaImageOutput,
        crate::error::DeleteFpgaImageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_fpga_image_error(response)
        } else {
            crate::operation_deser::parse_delete_fpga_image_response(response)
        }
    }
}

/// <p>Deletes the specified event window.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
/// events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInstanceEventWindow {
    _private: (),
}
impl DeleteInstanceEventWindow {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceEventWindowInput`](crate::input::DeleteInstanceEventWindowInput)
    pub fn builder() -> crate::input::delete_instance_event_window_input::Builder {
        crate::input::delete_instance_event_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInstanceEventWindow {
    type Output = std::result::Result<
        crate::output::DeleteInstanceEventWindowOutput,
        crate::error::DeleteInstanceEventWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_instance_event_window_error(response)
        } else {
            crate::operation_deser::parse_delete_instance_event_window_response(response)
        }
    }
}

/// <p>Deletes the specified internet gateway. You must detach the internet gateway from the
/// VPC before you can delete it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInternetGateway {
    _private: (),
}
impl DeleteInternetGateway {
    /// Creates a new builder-style object to manufacture [`DeleteInternetGatewayInput`](crate::input::DeleteInternetGatewayInput)
    pub fn builder() -> crate::input::delete_internet_gateway_input::Builder {
        crate::input::delete_internet_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInternetGateway {
    type Output = std::result::Result<
        crate::output::DeleteInternetGatewayOutput,
        crate::error::DeleteInternetGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_internet_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_internet_gateway_response(response)
        }
    }
}

/// <p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteKeyPair {
    _private: (),
}
impl DeleteKeyPair {
    /// Creates a new builder-style object to manufacture [`DeleteKeyPairInput`](crate::input::DeleteKeyPairInput)
    pub fn builder() -> crate::input::delete_key_pair_input::Builder {
        crate::input::delete_key_pair_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteKeyPair {
    type Output =
        std::result::Result<crate::output::DeleteKeyPairOutput, crate::error::DeleteKeyPairError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_key_pair_error(response)
        } else {
            crate::operation_deser::parse_delete_key_pair_response(response)
        }
    }
}

/// <p>Deletes a launch template. Deleting a launch template deletes all of its versions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLaunchTemplate {
    _private: (),
}
impl DeleteLaunchTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchTemplateInput`](crate::input::DeleteLaunchTemplateInput)
    pub fn builder() -> crate::input::delete_launch_template_input::Builder {
        crate::input::delete_launch_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLaunchTemplate {
    type Output = std::result::Result<
        crate::output::DeleteLaunchTemplateOutput,
        crate::error::DeleteLaunchTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_launch_template_error(response)
        } else {
            crate::operation_deser::parse_delete_launch_template_response(response)
        }
    }
}

/// <p>Deletes one or more versions of a launch template. You cannot delete the default
/// version of a launch template; you must first assign a different version as the default.
/// If the default version is the only version for the launch template, you must delete the
/// entire launch template using <a>DeleteLaunchTemplate</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLaunchTemplateVersions {
    _private: (),
}
impl DeleteLaunchTemplateVersions {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchTemplateVersionsInput`](crate::input::DeleteLaunchTemplateVersionsInput)
    pub fn builder() -> crate::input::delete_launch_template_versions_input::Builder {
        crate::input::delete_launch_template_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLaunchTemplateVersions {
    type Output = std::result::Result<
        crate::output::DeleteLaunchTemplateVersionsOutput,
        crate::error::DeleteLaunchTemplateVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_launch_template_versions_error(response)
        } else {
            crate::operation_deser::parse_delete_launch_template_versions_response(response)
        }
    }
}

/// <p>Deletes the specified route from the specified local gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLocalGatewayRoute {
    _private: (),
}
impl DeleteLocalGatewayRoute {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteInput`](crate::input::DeleteLocalGatewayRouteInput)
    pub fn builder() -> crate::input::delete_local_gateway_route_input::Builder {
        crate::input::delete_local_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLocalGatewayRoute {
    type Output = std::result::Result<
        crate::output::DeleteLocalGatewayRouteOutput,
        crate::error::DeleteLocalGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_local_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_delete_local_gateway_route_response(response)
        }
    }
}

/// <p>Deletes the specified association between a VPC and local gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLocalGatewayRouteTableVpcAssociation {
    _private: (),
}
impl DeleteLocalGatewayRouteTableVpcAssociation {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteTableVpcAssociationInput`](crate::input::DeleteLocalGatewayRouteTableVpcAssociationInput)
    pub fn builder() -> crate::input::delete_local_gateway_route_table_vpc_association_input::Builder
    {
        crate::input::delete_local_gateway_route_table_vpc_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLocalGatewayRouteTableVpcAssociation {
    type Output = std::result::Result<
        crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput,
        crate::error::DeleteLocalGatewayRouteTableVpcAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_local_gateway_route_table_vpc_association_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_local_gateway_route_table_vpc_association_response(
                response,
            )
        }
    }
}

/// <p>Deletes the specified managed prefix list. You must first remove all references to the prefix list in your resources.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteManagedPrefixList {
    _private: (),
}
impl DeleteManagedPrefixList {
    /// Creates a new builder-style object to manufacture [`DeleteManagedPrefixListInput`](crate::input::DeleteManagedPrefixListInput)
    pub fn builder() -> crate::input::delete_managed_prefix_list_input::Builder {
        crate::input::delete_managed_prefix_list_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteManagedPrefixList {
    type Output = std::result::Result<
        crate::output::DeleteManagedPrefixListOutput,
        crate::error::DeleteManagedPrefixListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_managed_prefix_list_error(response)
        } else {
            crate::operation_deser::parse_delete_managed_prefix_list_response(response)
        }
    }
}

/// <p>Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates its Elastic IP address,
/// but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway
/// routes in your route tables.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNatGateway {
    _private: (),
}
impl DeleteNatGateway {
    /// Creates a new builder-style object to manufacture [`DeleteNatGatewayInput`](crate::input::DeleteNatGatewayInput)
    pub fn builder() -> crate::input::delete_nat_gateway_input::Builder {
        crate::input::delete_nat_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNatGateway {
    type Output = std::result::Result<
        crate::output::DeleteNatGatewayOutput,
        crate::error::DeleteNatGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_nat_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_nat_gateway_response(response)
        }
    }
}

/// <p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNetworkAcl {
    _private: (),
}
impl DeleteNetworkAcl {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclInput`](crate::input::DeleteNetworkAclInput)
    pub fn builder() -> crate::input::delete_network_acl_input::Builder {
        crate::input::delete_network_acl_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNetworkAcl {
    type Output = std::result::Result<
        crate::output::DeleteNetworkAclOutput,
        crate::error::DeleteNetworkAclError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_network_acl_error(response)
        } else {
            crate::operation_deser::parse_delete_network_acl_response(response)
        }
    }
}

/// <p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNetworkAclEntry {
    _private: (),
}
impl DeleteNetworkAclEntry {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclEntryInput`](crate::input::DeleteNetworkAclEntryInput)
    pub fn builder() -> crate::input::delete_network_acl_entry_input::Builder {
        crate::input::delete_network_acl_entry_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNetworkAclEntry {
    type Output = std::result::Result<
        crate::output::DeleteNetworkAclEntryOutput,
        crate::error::DeleteNetworkAclEntryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_network_acl_entry_error(response)
        } else {
            crate::operation_deser::parse_delete_network_acl_entry_response(response)
        }
    }
}

/// <p>Deletes the specified network insights analysis.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNetworkInsightsAnalysis {
    _private: (),
}
impl DeleteNetworkInsightsAnalysis {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsAnalysisInput`](crate::input::DeleteNetworkInsightsAnalysisInput)
    pub fn builder() -> crate::input::delete_network_insights_analysis_input::Builder {
        crate::input::delete_network_insights_analysis_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNetworkInsightsAnalysis {
    type Output = std::result::Result<
        crate::output::DeleteNetworkInsightsAnalysisOutput,
        crate::error::DeleteNetworkInsightsAnalysisError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_network_insights_analysis_error(response)
        } else {
            crate::operation_deser::parse_delete_network_insights_analysis_response(response)
        }
    }
}

/// <p>Deletes the specified path.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNetworkInsightsPath {
    _private: (),
}
impl DeleteNetworkInsightsPath {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsPathInput`](crate::input::DeleteNetworkInsightsPathInput)
    pub fn builder() -> crate::input::delete_network_insights_path_input::Builder {
        crate::input::delete_network_insights_path_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNetworkInsightsPath {
    type Output = std::result::Result<
        crate::output::DeleteNetworkInsightsPathOutput,
        crate::error::DeleteNetworkInsightsPathError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_network_insights_path_error(response)
        } else {
            crate::operation_deser::parse_delete_network_insights_path_response(response)
        }
    }
}

/// <p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNetworkInterface {
    _private: (),
}
impl DeleteNetworkInterface {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInterfaceInput`](crate::input::DeleteNetworkInterfaceInput)
    pub fn builder() -> crate::input::delete_network_interface_input::Builder {
        crate::input::delete_network_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNetworkInterface {
    type Output = std::result::Result<
        crate::output::DeleteNetworkInterfaceOutput,
        crate::error::DeleteNetworkInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_network_interface_error(response)
        } else {
            crate::operation_deser::parse_delete_network_interface_response(response)
        }
    }
}

/// <p>Deletes a permission for a network interface. By default, you cannot delete the
/// permission if the account for which you're removing the permission has attached the
/// network interface to an instance. However, you can force delete the permission,
/// regardless of any attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNetworkInterfacePermission {
    _private: (),
}
impl DeleteNetworkInterfacePermission {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInterfacePermissionInput`](crate::input::DeleteNetworkInterfacePermissionInput)
    pub fn builder() -> crate::input::delete_network_interface_permission_input::Builder {
        crate::input::delete_network_interface_permission_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteNetworkInterfacePermission {
    type Output = std::result::Result<
        crate::output::DeleteNetworkInterfacePermissionOutput,
        crate::error::DeleteNetworkInterfacePermissionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_network_interface_permission_error(response)
        } else {
            crate::operation_deser::parse_delete_network_interface_permission_response(response)
        }
    }
}

/// <p>Deletes the specified placement group. You must terminate all instances in the
/// placement group before you can delete the placement group. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePlacementGroup {
    _private: (),
}
impl DeletePlacementGroup {
    /// Creates a new builder-style object to manufacture [`DeletePlacementGroupInput`](crate::input::DeletePlacementGroupInput)
    pub fn builder() -> crate::input::delete_placement_group_input::Builder {
        crate::input::delete_placement_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeletePlacementGroup {
    type Output = std::result::Result<
        crate::output::DeletePlacementGroupOutput,
        crate::error::DeletePlacementGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_placement_group_error(response)
        } else {
            crate::operation_deser::parse_delete_placement_group_response(response)
        }
    }
}

/// <p>Deletes the queued purchases for the specified Reserved Instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteQueuedReservedInstances {
    _private: (),
}
impl DeleteQueuedReservedInstances {
    /// Creates a new builder-style object to manufacture [`DeleteQueuedReservedInstancesInput`](crate::input::DeleteQueuedReservedInstancesInput)
    pub fn builder() -> crate::input::delete_queued_reserved_instances_input::Builder {
        crate::input::delete_queued_reserved_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteQueuedReservedInstances {
    type Output = std::result::Result<
        crate::output::DeleteQueuedReservedInstancesOutput,
        crate::error::DeleteQueuedReservedInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_queued_reserved_instances_error(response)
        } else {
            crate::operation_deser::parse_delete_queued_reserved_instances_response(response)
        }
    }
}

/// <p>Deletes the specified route from the specified route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRoute {
    _private: (),
}
impl DeleteRoute {
    /// Creates a new builder-style object to manufacture [`DeleteRouteInput`](crate::input::DeleteRouteInput)
    pub fn builder() -> crate::input::delete_route_input::Builder {
        crate::input::delete_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRoute {
    type Output =
        std::result::Result<crate::output::DeleteRouteOutput, crate::error::DeleteRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_route_error(response)
        } else {
            crate::operation_deser::parse_delete_route_response(response)
        }
    }
}

/// <p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRouteTable {
    _private: (),
}
impl DeleteRouteTable {
    /// Creates a new builder-style object to manufacture [`DeleteRouteTableInput`](crate::input::DeleteRouteTableInput)
    pub fn builder() -> crate::input::delete_route_table_input::Builder {
        crate::input::delete_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRouteTable {
    type Output = std::result::Result<
        crate::output::DeleteRouteTableOutput,
        crate::error::DeleteRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_route_table_error(response)
        } else {
            crate::operation_deser::parse_delete_route_table_response(response)
        }
    }
}

/// <p>Deletes a security group.</p>
/// <p>If you attempt to delete a security group that is associated with an instance, or is
/// referenced by another security group, the operation fails with
/// <code>InvalidGroup.InUse</code> in EC2-Classic or
/// <code>DependencyViolation</code> in EC2-VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSecurityGroup {
    _private: (),
}
impl DeleteSecurityGroup {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityGroupInput`](crate::input::DeleteSecurityGroupInput)
    pub fn builder() -> crate::input::delete_security_group_input::Builder {
        crate::input::delete_security_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSecurityGroup {
    type Output = std::result::Result<
        crate::output::DeleteSecurityGroupOutput,
        crate::error::DeleteSecurityGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_security_group_error(response)
        } else {
            crate::operation_deser::parse_delete_security_group_response(response)
        }
    }
}

/// <p>Deletes the specified snapshot.</p>
/// <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the
/// blocks on the device that have changed since your last snapshot are saved in the new snapshot.
/// When you delete a snapshot, only the data not needed for any other snapshot is removed. So
/// regardless of which prior snapshots have been deleted, all active snapshots will have access
/// to all the information needed to restore the volume.</p>
/// <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI.
/// You must first de-register the AMI before you can delete the snapshot.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Delete an Amazon EBS snapshot</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSnapshot {
    _private: (),
}
impl DeleteSnapshot {
    /// Creates a new builder-style object to manufacture [`DeleteSnapshotInput`](crate::input::DeleteSnapshotInput)
    pub fn builder() -> crate::input::delete_snapshot_input::Builder {
        crate::input::delete_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSnapshot {
    type Output =
        std::result::Result<crate::output::DeleteSnapshotOutput, crate::error::DeleteSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_snapshot_error(response)
        } else {
            crate::operation_deser::parse_delete_snapshot_response(response)
        }
    }
}

/// <p>Deletes the data feed for Spot Instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSpotDatafeedSubscription {
    _private: (),
}
impl DeleteSpotDatafeedSubscription {
    /// Creates a new builder-style object to manufacture [`DeleteSpotDatafeedSubscriptionInput`](crate::input::DeleteSpotDatafeedSubscriptionInput)
    pub fn builder() -> crate::input::delete_spot_datafeed_subscription_input::Builder {
        crate::input::delete_spot_datafeed_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSpotDatafeedSubscription {
    type Output = std::result::Result<
        crate::output::DeleteSpotDatafeedSubscriptionOutput,
        crate::error::DeleteSpotDatafeedSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_spot_datafeed_subscription_error(response)
        } else {
            crate::operation_deser::parse_delete_spot_datafeed_subscription_response(response)
        }
    }
}

/// <p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSubnet {
    _private: (),
}
impl DeleteSubnet {
    /// Creates a new builder-style object to manufacture [`DeleteSubnetInput`](crate::input::DeleteSubnetInput)
    pub fn builder() -> crate::input::delete_subnet_input::Builder {
        crate::input::delete_subnet_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSubnet {
    type Output =
        std::result::Result<crate::output::DeleteSubnetOutput, crate::error::DeleteSubnetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_subnet_error(response)
        } else {
            crate::operation_deser::parse_delete_subnet_response(response)
        }
    }
}

/// <p>Deletes a subnet CIDR reservation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSubnetCidrReservation {
    _private: (),
}
impl DeleteSubnetCidrReservation {
    /// Creates a new builder-style object to manufacture [`DeleteSubnetCidrReservationInput`](crate::input::DeleteSubnetCidrReservationInput)
    pub fn builder() -> crate::input::delete_subnet_cidr_reservation_input::Builder {
        crate::input::delete_subnet_cidr_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSubnetCidrReservation {
    type Output = std::result::Result<
        crate::output::DeleteSubnetCidrReservationOutput,
        crate::error::DeleteSubnetCidrReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_subnet_cidr_reservation_error(response)
        } else {
            crate::operation_deser::parse_delete_subnet_cidr_reservation_response(response)
        }
    }
}

/// <p>Deletes the specified set of tags from the specified set of resources.</p>
/// <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTags {
    _private: (),
}
impl DeleteTags {
    /// Creates a new builder-style object to manufacture [`DeleteTagsInput`](crate::input::DeleteTagsInput)
    pub fn builder() -> crate::input::delete_tags_input::Builder {
        crate::input::delete_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTags {
    type Output =
        std::result::Result<crate::output::DeleteTagsOutput, crate::error::DeleteTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_tags_error(response)
        } else {
            crate::operation_deser::parse_delete_tags_response(response)
        }
    }
}

/// <p>Deletes the specified Traffic Mirror filter.</p>
/// <p>You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrafficMirrorFilter {
    _private: (),
}
impl DeleteTrafficMirrorFilter {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorFilterInput`](crate::input::DeleteTrafficMirrorFilterInput)
    pub fn builder() -> crate::input::delete_traffic_mirror_filter_input::Builder {
        crate::input::delete_traffic_mirror_filter_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrafficMirrorFilter {
    type Output = std::result::Result<
        crate::output::DeleteTrafficMirrorFilterOutput,
        crate::error::DeleteTrafficMirrorFilterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_traffic_mirror_filter_error(response)
        } else {
            crate::operation_deser::parse_delete_traffic_mirror_filter_response(response)
        }
    }
}

/// <p>Deletes the specified Traffic Mirror rule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrafficMirrorFilterRule {
    _private: (),
}
impl DeleteTrafficMirrorFilterRule {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorFilterRuleInput`](crate::input::DeleteTrafficMirrorFilterRuleInput)
    pub fn builder() -> crate::input::delete_traffic_mirror_filter_rule_input::Builder {
        crate::input::delete_traffic_mirror_filter_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrafficMirrorFilterRule {
    type Output = std::result::Result<
        crate::output::DeleteTrafficMirrorFilterRuleOutput,
        crate::error::DeleteTrafficMirrorFilterRuleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_traffic_mirror_filter_rule_error(response)
        } else {
            crate::operation_deser::parse_delete_traffic_mirror_filter_rule_response(response)
        }
    }
}

/// <p>Deletes the specified Traffic Mirror session.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrafficMirrorSession {
    _private: (),
}
impl DeleteTrafficMirrorSession {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorSessionInput`](crate::input::DeleteTrafficMirrorSessionInput)
    pub fn builder() -> crate::input::delete_traffic_mirror_session_input::Builder {
        crate::input::delete_traffic_mirror_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrafficMirrorSession {
    type Output = std::result::Result<
        crate::output::DeleteTrafficMirrorSessionOutput,
        crate::error::DeleteTrafficMirrorSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_traffic_mirror_session_error(response)
        } else {
            crate::operation_deser::parse_delete_traffic_mirror_session_response(response)
        }
    }
}

/// <p>Deletes the specified Traffic Mirror target.</p>
/// <p>You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrafficMirrorTarget {
    _private: (),
}
impl DeleteTrafficMirrorTarget {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorTargetInput`](crate::input::DeleteTrafficMirrorTargetInput)
    pub fn builder() -> crate::input::delete_traffic_mirror_target_input::Builder {
        crate::input::delete_traffic_mirror_target_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrafficMirrorTarget {
    type Output = std::result::Result<
        crate::output::DeleteTrafficMirrorTargetOutput,
        crate::error::DeleteTrafficMirrorTargetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_traffic_mirror_target_error(response)
        } else {
            crate::operation_deser::parse_delete_traffic_mirror_target_response(response)
        }
    }
}

/// <p>Deletes the specified transit gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGateway {
    _private: (),
}
impl DeleteTransitGateway {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayInput`](crate::input::DeleteTransitGatewayInput)
    pub fn builder() -> crate::input::delete_transit_gateway_input::Builder {
        crate::input::delete_transit_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGateway {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayOutput,
        crate::error::DeleteTransitGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_response(response)
        }
    }
}

/// <p>Deletes the specified Connect attachment. You must first delete any Connect peers for
/// the attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayConnect {
    _private: (),
}
impl DeleteTransitGatewayConnect {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayConnectInput`](crate::input::DeleteTransitGatewayConnectInput)
    pub fn builder() -> crate::input::delete_transit_gateway_connect_input::Builder {
        crate::input::delete_transit_gateway_connect_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayConnect {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayConnectOutput,
        crate::error::DeleteTransitGatewayConnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_connect_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_connect_response(response)
        }
    }
}

/// <p>Deletes the specified Connect peer.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayConnectPeer {
    _private: (),
}
impl DeleteTransitGatewayConnectPeer {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayConnectPeerInput`](crate::input::DeleteTransitGatewayConnectPeerInput)
    pub fn builder() -> crate::input::delete_transit_gateway_connect_peer_input::Builder {
        crate::input::delete_transit_gateway_connect_peer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayConnectPeer {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayConnectPeerOutput,
        crate::error::DeleteTransitGatewayConnectPeerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_connect_peer_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_connect_peer_response(response)
        }
    }
}

/// <p>Deletes the specified transit gateway multicast domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayMulticastDomain {
    _private: (),
}
impl DeleteTransitGatewayMulticastDomain {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayMulticastDomainInput`](crate::input::DeleteTransitGatewayMulticastDomainInput)
    pub fn builder() -> crate::input::delete_transit_gateway_multicast_domain_input::Builder {
        crate::input::delete_transit_gateway_multicast_domain_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayMulticastDomain {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayMulticastDomainOutput,
        crate::error::DeleteTransitGatewayMulticastDomainError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_multicast_domain_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_multicast_domain_response(response)
        }
    }
}

/// <p>Deletes a transit gateway peering attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayPeeringAttachment {
    _private: (),
}
impl DeleteTransitGatewayPeeringAttachment {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPeeringAttachmentInput`](crate::input::DeleteTransitGatewayPeeringAttachmentInput)
    pub fn builder() -> crate::input::delete_transit_gateway_peering_attachment_input::Builder {
        crate::input::delete_transit_gateway_peering_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayPeeringAttachment {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayPeeringAttachmentOutput,
        crate::error::DeleteTransitGatewayPeeringAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_peering_attachment_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_peering_attachment_response(
                response,
            )
        }
    }
}

/// <p>Deletes a reference (route) to a prefix list in a specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayPrefixListReference {
    _private: (),
}
impl DeleteTransitGatewayPrefixListReference {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPrefixListReferenceInput`](crate::input::DeleteTransitGatewayPrefixListReferenceInput)
    pub fn builder() -> crate::input::delete_transit_gateway_prefix_list_reference_input::Builder {
        crate::input::delete_transit_gateway_prefix_list_reference_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayPrefixListReference {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayPrefixListReferenceOutput,
        crate::error::DeleteTransitGatewayPrefixListReferenceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_prefix_list_reference_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_transit_gateway_prefix_list_reference_response(
                response,
            )
        }
    }
}

/// <p>Deletes the specified route from the specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayRoute {
    _private: (),
}
impl DeleteTransitGatewayRoute {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteInput`](crate::input::DeleteTransitGatewayRouteInput)
    pub fn builder() -> crate::input::delete_transit_gateway_route_input::Builder {
        crate::input::delete_transit_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayRoute {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayRouteOutput,
        crate::error::DeleteTransitGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_route_response(response)
        }
    }
}

/// <p>Deletes the specified transit gateway route table. You must disassociate the route table from any
/// transit gateway route tables before you can delete it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayRouteTable {
    _private: (),
}
impl DeleteTransitGatewayRouteTable {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteTableInput`](crate::input::DeleteTransitGatewayRouteTableInput)
    pub fn builder() -> crate::input::delete_transit_gateway_route_table_input::Builder {
        crate::input::delete_transit_gateway_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayRouteTable {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayRouteTableOutput,
        crate::error::DeleteTransitGatewayRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_route_table_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_route_table_response(response)
        }
    }
}

/// <p>Deletes the specified VPC attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTransitGatewayVpcAttachment {
    _private: (),
}
impl DeleteTransitGatewayVpcAttachment {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayVpcAttachmentInput`](crate::input::DeleteTransitGatewayVpcAttachmentInput)
    pub fn builder() -> crate::input::delete_transit_gateway_vpc_attachment_input::Builder {
        crate::input::delete_transit_gateway_vpc_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTransitGatewayVpcAttachment {
    type Output = std::result::Result<
        crate::output::DeleteTransitGatewayVpcAttachmentOutput,
        crate::error::DeleteTransitGatewayVpcAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_transit_gateway_vpc_attachment_error(response)
        } else {
            crate::operation_deser::parse_delete_transit_gateway_vpc_attachment_response(response)
        }
    }
}

/// <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state
/// (not attached to an instance).</p>
/// <p>The volume can remain in the <code>deleting</code> state for several minutes.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Delete an Amazon EBS volume</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVolume {
    _private: (),
}
impl DeleteVolume {
    /// Creates a new builder-style object to manufacture [`DeleteVolumeInput`](crate::input::DeleteVolumeInput)
    pub fn builder() -> crate::input::delete_volume_input::Builder {
        crate::input::delete_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVolume {
    type Output =
        std::result::Result<crate::output::DeleteVolumeOutput, crate::error::DeleteVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_volume_error(response)
        } else {
            crate::operation_deser::parse_delete_volume_response(response)
        }
    }
}

/// <p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpc {
    _private: (),
}
impl DeleteVpc {
    /// Creates a new builder-style object to manufacture [`DeleteVpcInput`](crate::input::DeleteVpcInput)
    pub fn builder() -> crate::input::delete_vpc_input::Builder {
        crate::input::delete_vpc_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpc {
    type Output = std::result::Result<crate::output::DeleteVpcOutput, crate::error::DeleteVpcError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpc_error(response)
        } else {
            crate::operation_deser::parse_delete_vpc_response(response)
        }
    }
}

/// <p>Deletes one or more VPC endpoint connection notifications.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpcEndpointConnectionNotifications {
    _private: (),
}
impl DeleteVpcEndpointConnectionNotifications {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointConnectionNotificationsInput`](crate::input::DeleteVpcEndpointConnectionNotificationsInput)
    pub fn builder() -> crate::input::delete_vpc_endpoint_connection_notifications_input::Builder {
        crate::input::delete_vpc_endpoint_connection_notifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpcEndpointConnectionNotifications {
    type Output = std::result::Result<
        crate::output::DeleteVpcEndpointConnectionNotificationsOutput,
        crate::error::DeleteVpcEndpointConnectionNotificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpc_endpoint_connection_notifications_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_vpc_endpoint_connection_notifications_response(
                response,
            )
        }
    }
}

/// <p>Deletes one or more specified VPC endpoints. You can delete any of the following types of VPC endpoints.  </p>
/// <ul>
/// <li>
/// <p>Gateway endpoint,</p>
/// </li>
/// <li>
/// <p>Gateway Load Balancer endpoint,</p>
/// </li>
/// <li>
/// <p>Interface endpoint</p>
/// </li>
/// </ul>
/// <p>The following rules apply when you delete a VPC endpoint:</p>
/// <ul>
/// <li>
/// <p>When you delete a gateway endpoint, we delete the endpoint routes in the route tables that are associated with the endpoint.</p>
/// </li>
/// <li>
/// <p>When you delete a Gateway Load Balancer endpoint, we delete the endpoint network interfaces. </p>
/// <p>You can only delete Gateway Load Balancer endpoints when the routes that are associated with the endpoint are deleted.</p>
/// </li>
/// <li>
/// <p>When you delete an interface endpoint, we delete the  endpoint network interfaces.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpcEndpoints {
    _private: (),
}
impl DeleteVpcEndpoints {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointsInput`](crate::input::DeleteVpcEndpointsInput)
    pub fn builder() -> crate::input::delete_vpc_endpoints_input::Builder {
        crate::input::delete_vpc_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpcEndpoints {
    type Output = std::result::Result<
        crate::output::DeleteVpcEndpointsOutput,
        crate::error::DeleteVpcEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpc_endpoints_error(response)
        } else {
            crate::operation_deser::parse_delete_vpc_endpoints_response(response)
        }
    }
}

/// <p>Deletes one or more VPC endpoint service configurations in your account. Before you
/// delete the endpoint service configuration, you must reject any <code>Available</code> or
/// <code>PendingAcceptance</code> interface endpoint connections that are attached to
/// the service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpcEndpointServiceConfigurations {
    _private: (),
}
impl DeleteVpcEndpointServiceConfigurations {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointServiceConfigurationsInput`](crate::input::DeleteVpcEndpointServiceConfigurationsInput)
    pub fn builder() -> crate::input::delete_vpc_endpoint_service_configurations_input::Builder {
        crate::input::delete_vpc_endpoint_service_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpcEndpointServiceConfigurations {
    type Output = std::result::Result<
        crate::output::DeleteVpcEndpointServiceConfigurationsOutput,
        crate::error::DeleteVpcEndpointServiceConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpc_endpoint_service_configurations_error(response)
        } else {
            crate::operation_deser::parse_delete_vpc_endpoint_service_configurations_response(
                response,
            )
        }
    }
}

/// <p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner
/// of the accepter VPC can delete the VPC peering connection if it's in the
/// <code>active</code> state. The owner of the requester VPC can delete a VPC peering
/// connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering
/// connection that's in the <code>failed</code> state.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpcPeeringConnection {
    _private: (),
}
impl DeleteVpcPeeringConnection {
    /// Creates a new builder-style object to manufacture [`DeleteVpcPeeringConnectionInput`](crate::input::DeleteVpcPeeringConnectionInput)
    pub fn builder() -> crate::input::delete_vpc_peering_connection_input::Builder {
        crate::input::delete_vpc_peering_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpcPeeringConnection {
    type Output = std::result::Result<
        crate::output::DeleteVpcPeeringConnectionOutput,
        crate::error::DeleteVpcPeeringConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpc_peering_connection_error(response)
        } else {
            crate::operation_deser::parse_delete_vpc_peering_connection_response(response)
        }
    }
}

/// <p>Deletes the specified VPN connection.</p>
/// <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway device using the new configuration information returned with the new VPN connection ID.</p>
/// <p>For certificate-based authentication, delete all AWS Certificate Manager (ACM) private certificates used for the AWS-side tunnel endpoints for the VPN connection before deleting the VPN connection.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpnConnection {
    _private: (),
}
impl DeleteVpnConnection {
    /// Creates a new builder-style object to manufacture [`DeleteVpnConnectionInput`](crate::input::DeleteVpnConnectionInput)
    pub fn builder() -> crate::input::delete_vpn_connection_input::Builder {
        crate::input::delete_vpn_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpnConnection {
    type Output = std::result::Result<
        crate::output::DeleteVpnConnectionOutput,
        crate::error::DeleteVpnConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpn_connection_error(response)
        } else {
            crate::operation_deser::parse_delete_vpn_connection_response(response)
        }
    }
}

/// <p>Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpnConnectionRoute {
    _private: (),
}
impl DeleteVpnConnectionRoute {
    /// Creates a new builder-style object to manufacture [`DeleteVpnConnectionRouteInput`](crate::input::DeleteVpnConnectionRouteInput)
    pub fn builder() -> crate::input::delete_vpn_connection_route_input::Builder {
        crate::input::delete_vpn_connection_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpnConnectionRoute {
    type Output = std::result::Result<
        crate::output::DeleteVpnConnectionRouteOutput,
        crate::error::DeleteVpnConnectionRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpn_connection_route_error(response)
        } else {
            crate::operation_deser::parse_delete_vpn_connection_route_response(response)
        }
    }
}

/// <p>Deletes the specified virtual private gateway. You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVpnGateway {
    _private: (),
}
impl DeleteVpnGateway {
    /// Creates a new builder-style object to manufacture [`DeleteVpnGatewayInput`](crate::input::DeleteVpnGatewayInput)
    pub fn builder() -> crate::input::delete_vpn_gateway_input::Builder {
        crate::input::delete_vpn_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVpnGateway {
    type Output = std::result::Result<
        crate::output::DeleteVpnGatewayOutput,
        crate::error::DeleteVpnGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vpn_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_vpn_gateway_response(response)
        }
    }
}

/// <p>Releases the specified address range that you provisioned for use with your Amazon Web Services resources
/// through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p>
/// <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its
/// address range.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeprovisionByoipCidr {
    _private: (),
}
impl DeprovisionByoipCidr {
    /// Creates a new builder-style object to manufacture [`DeprovisionByoipCidrInput`](crate::input::DeprovisionByoipCidrInput)
    pub fn builder() -> crate::input::deprovision_byoip_cidr_input::Builder {
        crate::input::deprovision_byoip_cidr_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeprovisionByoipCidr {
    type Output = std::result::Result<
        crate::output::DeprovisionByoipCidrOutput,
        crate::error::DeprovisionByoipCidrError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deprovision_byoip_cidr_error(response)
        } else {
            crate::operation_deser::parse_deprovision_byoip_cidr_response(response)
        }
    }
}

/// <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch
/// new instances; however, it doesn't affect any instances that you've already launched
/// from the AMI. You'll continue to incur usage costs for those instances until you
/// terminate them.</p>
/// <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was
/// created for the root volume of the instance during the AMI creation process. When you
/// deregister an instance store-backed AMI, it doesn't affect the files that you uploaded
/// to Amazon S3 when you created the AMI.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterImage {
    _private: (),
}
impl DeregisterImage {
    /// Creates a new builder-style object to manufacture [`DeregisterImageInput`](crate::input::DeregisterImageInput)
    pub fn builder() -> crate::input::deregister_image_input::Builder {
        crate::input::deregister_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterImage {
    type Output = std::result::Result<
        crate::output::DeregisterImageOutput,
        crate::error::DeregisterImageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_image_error(response)
        } else {
            crate::operation_deser::parse_deregister_image_response(response)
        }
    }
}

/// <p>c</p>
/// <p>Deregisters tag keys to prevent tags that have the specified tag keys from being included
/// in scheduled event notifications for resources in the Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterInstanceEventNotificationAttributes {
    _private: (),
}
impl DeregisterInstanceEventNotificationAttributes {
    /// Creates a new builder-style object to manufacture [`DeregisterInstanceEventNotificationAttributesInput`](crate::input::DeregisterInstanceEventNotificationAttributesInput)
    pub fn builder(
    ) -> crate::input::deregister_instance_event_notification_attributes_input::Builder {
        crate::input::deregister_instance_event_notification_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterInstanceEventNotificationAttributes {
    type Output = std::result::Result<
        crate::output::DeregisterInstanceEventNotificationAttributesOutput,
        crate::error::DeregisterInstanceEventNotificationAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_instance_event_notification_attributes_error(
                response,
            )
        } else {
            crate::operation_deser::parse_deregister_instance_event_notification_attributes_response(
                response,
            )
        }
    }
}

/// <p>Deregisters the specified members (network interfaces) from the  transit gateway multicast group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterTransitGatewayMulticastGroupMembers {
    _private: (),
}
impl DeregisterTransitGatewayMulticastGroupMembers {
    /// Creates a new builder-style object to manufacture [`DeregisterTransitGatewayMulticastGroupMembersInput`](crate::input::DeregisterTransitGatewayMulticastGroupMembersInput)
    pub fn builder(
    ) -> crate::input::deregister_transit_gateway_multicast_group_members_input::Builder {
        crate::input::deregister_transit_gateway_multicast_group_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterTransitGatewayMulticastGroupMembers {
    type Output = std::result::Result<
        crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput,
        crate::error::DeregisterTransitGatewayMulticastGroupMembersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_transit_gateway_multicast_group_members_error(
                response,
            )
        } else {
            crate::operation_deser::parse_deregister_transit_gateway_multicast_group_members_response(response)
        }
    }
}

/// <p>Deregisters the specified sources (network interfaces) from the  transit gateway multicast group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterTransitGatewayMulticastGroupSources {
    _private: (),
}
impl DeregisterTransitGatewayMulticastGroupSources {
    /// Creates a new builder-style object to manufacture [`DeregisterTransitGatewayMulticastGroupSourcesInput`](crate::input::DeregisterTransitGatewayMulticastGroupSourcesInput)
    pub fn builder(
    ) -> crate::input::deregister_transit_gateway_multicast_group_sources_input::Builder {
        crate::input::deregister_transit_gateway_multicast_group_sources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterTransitGatewayMulticastGroupSources {
    type Output = std::result::Result<
        crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput,
        crate::error::DeregisterTransitGatewayMulticastGroupSourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_transit_gateway_multicast_group_sources_error(
                response,
            )
        } else {
            crate::operation_deser::parse_deregister_transit_gateway_multicast_group_sources_response(response)
        }
    }
}

/// <p>Describes attributes of your AWS account. The following are the supported account attributes:</p>
/// <ul>
/// <li>
/// <p>
/// <code>supported-platforms</code>: Indicates whether your account can launch instances
/// into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p>
/// </li>
/// <li>
/// <p>
/// <code>default-vpc</code>: The ID of the default VPC for your account, or
/// <code>none</code>.</p>
/// </li>
/// <li>
/// <p>
/// <code>max-instances</code>: This attribute is no longer supported. The returned
/// value does not reflect your actual vCPU limit for running On-Demand Instances.
/// For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand Instance Limits</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// </li>
/// <li>
/// <p>
/// <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups
/// that you can assign to a network interface.</p>
/// </li>
/// <li>
/// <p>
/// <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can
/// allocate for use with EC2-Classic. </p>
/// </li>
/// <li>
/// <p>
/// <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can
/// allocate for use with EC2-VPC.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAccountAttributes {
    _private: (),
}
impl DescribeAccountAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
    pub fn builder() -> crate::input::describe_account_attributes_input::Builder {
        crate::input::describe_account_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAccountAttributes {
    type Output = std::result::Result<
        crate::output::DescribeAccountAttributesOutput,
        crate::error::DescribeAccountAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_account_attributes_error(response)
        } else {
            crate::operation_deser::parse_describe_account_attributes_response(response)
        }
    }
}

/// <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p>
/// <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC.
/// For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAddresses {
    _private: (),
}
impl DescribeAddresses {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesInput`](crate::input::DescribeAddressesInput)
    pub fn builder() -> crate::input::describe_addresses_input::Builder {
        crate::input::describe_addresses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAddresses {
    type Output = std::result::Result<
        crate::output::DescribeAddressesOutput,
        crate::error::DescribeAddressesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_addresses_error(response)
        } else {
            crate::operation_deser::parse_describe_addresses_response(response)
        }
    }
}

/// <p>Describes the attributes of the specified Elastic IP addresses. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAddressesAttribute {
    _private: (),
}
impl DescribeAddressesAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesAttributeInput`](crate::input::DescribeAddressesAttributeInput)
    pub fn builder() -> crate::input::describe_addresses_attribute_input::Builder {
        crate::input::describe_addresses_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAddressesAttribute {
    type Output = std::result::Result<
        crate::output::DescribeAddressesAttributeOutput,
        crate::error::DescribeAddressesAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_addresses_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_addresses_attribute_response(response)
        }
    }
}

/// <p>Describes the longer ID format settings for all resource types in a specific
/// Region. This request is useful for performing a quick audit to determine whether a
/// specific Region is fully opted in for longer IDs (17-character IDs).</p>
/// <p>This request only returns information about resource types that support longer IDs.</p>
/// <p>The following resource types support longer IDs: <code>bundle</code> |
/// <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
/// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
/// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
/// <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
/// <code>network-acl</code> | <code>network-acl-association</code> |
/// <code>network-interface</code> | <code>network-interface-attachment</code> |
/// <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
/// <code>route-table-association</code> | <code>security-group</code> |
/// <code>snapshot</code> | <code>subnet</code> |
/// <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> |
/// <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
/// <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAggregateIdFormat {
    _private: (),
}
impl DescribeAggregateIdFormat {
    /// Creates a new builder-style object to manufacture [`DescribeAggregateIdFormatInput`](crate::input::DescribeAggregateIdFormatInput)
    pub fn builder() -> crate::input::describe_aggregate_id_format_input::Builder {
        crate::input::describe_aggregate_id_format_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAggregateIdFormat {
    type Output = std::result::Result<
        crate::output::DescribeAggregateIdFormatOutput,
        crate::error::DescribeAggregateIdFormatError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_aggregate_id_format_error(response)
        } else {
            crate::operation_deser::parse_describe_aggregate_id_format_response(response)
        }
    }
}

/// <p>Describes the Availability Zones, Local Zones, and Wavelength Zones that are available to
/// you. If there is an event impacting a zone, you can use this request to view the state and any
/// provided messages for that zone.</p>
/// <p>For more information about Availability Zones, Local Zones, and Wavelength Zones, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions, Zones and
/// Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAvailabilityZones {
    _private: (),
}
impl DescribeAvailabilityZones {
    /// Creates a new builder-style object to manufacture [`DescribeAvailabilityZonesInput`](crate::input::DescribeAvailabilityZonesInput)
    pub fn builder() -> crate::input::describe_availability_zones_input::Builder {
        crate::input::describe_availability_zones_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAvailabilityZones {
    type Output = std::result::Result<
        crate::output::DescribeAvailabilityZonesOutput,
        crate::error::DescribeAvailabilityZonesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_availability_zones_error(response)
        } else {
            crate::operation_deser::parse_describe_availability_zones_response(response)
        }
    }
}

/// <p>Describes the specified bundle tasks or all of your bundle tasks.</p>
/// <note>
/// <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBundleTasks {
    _private: (),
}
impl DescribeBundleTasks {
    /// Creates a new builder-style object to manufacture [`DescribeBundleTasksInput`](crate::input::DescribeBundleTasksInput)
    pub fn builder() -> crate::input::describe_bundle_tasks_input::Builder {
        crate::input::describe_bundle_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeBundleTasks {
    type Output = std::result::Result<
        crate::output::DescribeBundleTasksOutput,
        crate::error::DescribeBundleTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_bundle_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_bundle_tasks_response(response)
        }
    }
}

/// <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p>
/// <p>To describe the address pools that were created when you provisioned the address
/// ranges, use <a>DescribePublicIpv4Pools</a> or <a>DescribeIpv6Pools</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeByoipCidrs {
    _private: (),
}
impl DescribeByoipCidrs {
    /// Creates a new builder-style object to manufacture [`DescribeByoipCidrsInput`](crate::input::DescribeByoipCidrsInput)
    pub fn builder() -> crate::input::describe_byoip_cidrs_input::Builder {
        crate::input::describe_byoip_cidrs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeByoipCidrs {
    type Output = std::result::Result<
        crate::output::DescribeByoipCidrsOutput,
        crate::error::DescribeByoipCidrsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_byoip_cidrs_error(response)
        } else {
            crate::operation_deser::parse_describe_byoip_cidrs_response(response)
        }
    }
}

/// <p>Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the
/// Amazon Web Services Region that you're currently using.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCapacityReservations {
    _private: (),
}
impl DescribeCapacityReservations {
    /// Creates a new builder-style object to manufacture [`DescribeCapacityReservationsInput`](crate::input::DescribeCapacityReservationsInput)
    pub fn builder() -> crate::input::describe_capacity_reservations_input::Builder {
        crate::input::describe_capacity_reservations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCapacityReservations {
    type Output = std::result::Result<
        crate::output::DescribeCapacityReservationsOutput,
        crate::error::DescribeCapacityReservationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_capacity_reservations_error(response)
        } else {
            crate::operation_deser::parse_describe_capacity_reservations_response(response)
        }
    }
}

/// <p>Describes one or more of your carrier gateways.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCarrierGateways {
    _private: (),
}
impl DescribeCarrierGateways {
    /// Creates a new builder-style object to manufacture [`DescribeCarrierGatewaysInput`](crate::input::DescribeCarrierGatewaysInput)
    pub fn builder() -> crate::input::describe_carrier_gateways_input::Builder {
        crate::input::describe_carrier_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCarrierGateways {
    type Output = std::result::Result<
        crate::output::DescribeCarrierGatewaysOutput,
        crate::error::DescribeCarrierGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_carrier_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_carrier_gateways_response(response)
        }
    }
}

/// <p>Describes one or more of your linked EC2-Classic instances. This request only returns
/// information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot
/// use this request to return information about other instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClassicLinkInstances {
    _private: (),
}
impl DescribeClassicLinkInstances {
    /// Creates a new builder-style object to manufacture [`DescribeClassicLinkInstancesInput`](crate::input::DescribeClassicLinkInstancesInput)
    pub fn builder() -> crate::input::describe_classic_link_instances_input::Builder {
        crate::input::describe_classic_link_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClassicLinkInstances {
    type Output = std::result::Result<
        crate::output::DescribeClassicLinkInstancesOutput,
        crate::error::DescribeClassicLinkInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_classic_link_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_classic_link_instances_response(response)
        }
    }
}

/// <p>Describes the authorization rules for a specified Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClientVpnAuthorizationRules {
    _private: (),
}
impl DescribeClientVpnAuthorizationRules {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnAuthorizationRulesInput`](crate::input::DescribeClientVpnAuthorizationRulesInput)
    pub fn builder() -> crate::input::describe_client_vpn_authorization_rules_input::Builder {
        crate::input::describe_client_vpn_authorization_rules_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClientVpnAuthorizationRules {
    type Output = std::result::Result<
        crate::output::DescribeClientVpnAuthorizationRulesOutput,
        crate::error::DescribeClientVpnAuthorizationRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_client_vpn_authorization_rules_error(response)
        } else {
            crate::operation_deser::parse_describe_client_vpn_authorization_rules_response(response)
        }
    }
}

/// <p>Describes active client connections and connections that have been terminated within the last 60
/// minutes for the specified Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClientVpnConnections {
    _private: (),
}
impl DescribeClientVpnConnections {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnConnectionsInput`](crate::input::DescribeClientVpnConnectionsInput)
    pub fn builder() -> crate::input::describe_client_vpn_connections_input::Builder {
        crate::input::describe_client_vpn_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClientVpnConnections {
    type Output = std::result::Result<
        crate::output::DescribeClientVpnConnectionsOutput,
        crate::error::DescribeClientVpnConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_client_vpn_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_client_vpn_connections_response(response)
        }
    }
}

/// <p>Describes one or more Client VPN endpoints in the account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClientVpnEndpoints {
    _private: (),
}
impl DescribeClientVpnEndpoints {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnEndpointsInput`](crate::input::DescribeClientVpnEndpointsInput)
    pub fn builder() -> crate::input::describe_client_vpn_endpoints_input::Builder {
        crate::input::describe_client_vpn_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClientVpnEndpoints {
    type Output = std::result::Result<
        crate::output::DescribeClientVpnEndpointsOutput,
        crate::error::DescribeClientVpnEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_client_vpn_endpoints_error(response)
        } else {
            crate::operation_deser::parse_describe_client_vpn_endpoints_response(response)
        }
    }
}

/// <p>Describes the routes for the specified Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClientVpnRoutes {
    _private: (),
}
impl DescribeClientVpnRoutes {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnRoutesInput`](crate::input::DescribeClientVpnRoutesInput)
    pub fn builder() -> crate::input::describe_client_vpn_routes_input::Builder {
        crate::input::describe_client_vpn_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClientVpnRoutes {
    type Output = std::result::Result<
        crate::output::DescribeClientVpnRoutesOutput,
        crate::error::DescribeClientVpnRoutesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_client_vpn_routes_error(response)
        } else {
            crate::operation_deser::parse_describe_client_vpn_routes_response(response)
        }
    }
}

/// <p>Describes the target networks associated with the specified Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClientVpnTargetNetworks {
    _private: (),
}
impl DescribeClientVpnTargetNetworks {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnTargetNetworksInput`](crate::input::DescribeClientVpnTargetNetworksInput)
    pub fn builder() -> crate::input::describe_client_vpn_target_networks_input::Builder {
        crate::input::describe_client_vpn_target_networks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClientVpnTargetNetworks {
    type Output = std::result::Result<
        crate::output::DescribeClientVpnTargetNetworksOutput,
        crate::error::DescribeClientVpnTargetNetworksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_client_vpn_target_networks_error(response)
        } else {
            crate::operation_deser::parse_describe_client_vpn_target_networks_response(response)
        }
    }
}

/// <p>Describes the specified customer-owned address pools or all of your customer-owned address pools.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCoipPools {
    _private: (),
}
impl DescribeCoipPools {
    /// Creates a new builder-style object to manufacture [`DescribeCoipPoolsInput`](crate::input::DescribeCoipPoolsInput)
    pub fn builder() -> crate::input::describe_coip_pools_input::Builder {
        crate::input::describe_coip_pools_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCoipPools {
    type Output = std::result::Result<
        crate::output::DescribeCoipPoolsOutput,
        crate::error::DescribeCoipPoolsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_coip_pools_error(response)
        } else {
            crate::operation_deser::parse_describe_coip_pools_response(response)
        }
    }
}

/// <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the
/// <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p>
/// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConversionTasks {
    _private: (),
}
impl DescribeConversionTasks {
    /// Creates a new builder-style object to manufacture [`DescribeConversionTasksInput`](crate::input::DescribeConversionTasksInput)
    pub fn builder() -> crate::input::describe_conversion_tasks_input::Builder {
        crate::input::describe_conversion_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConversionTasks {
    type Output = std::result::Result<
        crate::output::DescribeConversionTasksOutput,
        crate::error::DescribeConversionTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_conversion_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_conversion_tasks_response(response)
        }
    }
}

/// <p>Describes one or more of your VPN customer gateways.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCustomerGateways {
    _private: (),
}
impl DescribeCustomerGateways {
    /// Creates a new builder-style object to manufacture [`DescribeCustomerGatewaysInput`](crate::input::DescribeCustomerGatewaysInput)
    pub fn builder() -> crate::input::describe_customer_gateways_input::Builder {
        crate::input::describe_customer_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCustomerGateways {
    type Output = std::result::Result<
        crate::output::DescribeCustomerGatewaysOutput,
        crate::error::DescribeCustomerGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_customer_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_customer_gateways_response(response)
        }
    }
}

/// <p>Describes one or more of your DHCP options sets.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP options sets</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDhcpOptions {
    _private: (),
}
impl DescribeDhcpOptions {
    /// Creates a new builder-style object to manufacture [`DescribeDhcpOptionsInput`](crate::input::DescribeDhcpOptionsInput)
    pub fn builder() -> crate::input::describe_dhcp_options_input::Builder {
        crate::input::describe_dhcp_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDhcpOptions {
    type Output = std::result::Result<
        crate::output::DescribeDhcpOptionsOutput,
        crate::error::DescribeDhcpOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_dhcp_options_error(response)
        } else {
            crate::operation_deser::parse_describe_dhcp_options_response(response)
        }
    }
}

/// <p>Describes one or more of your egress-only internet gateways.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEgressOnlyInternetGateways {
    _private: (),
}
impl DescribeEgressOnlyInternetGateways {
    /// Creates a new builder-style object to manufacture [`DescribeEgressOnlyInternetGatewaysInput`](crate::input::DescribeEgressOnlyInternetGatewaysInput)
    pub fn builder() -> crate::input::describe_egress_only_internet_gateways_input::Builder {
        crate::input::describe_egress_only_internet_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEgressOnlyInternetGateways {
    type Output = std::result::Result<
        crate::output::DescribeEgressOnlyInternetGatewaysOutput,
        crate::error::DescribeEgressOnlyInternetGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_egress_only_internet_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_egress_only_internet_gateways_response(response)
        }
    }
}

/// <p>Describes the Elastic Graphics accelerator associated with your instances. For more information
/// about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeElasticGpus {
    _private: (),
}
impl DescribeElasticGpus {
    /// Creates a new builder-style object to manufacture [`DescribeElasticGpusInput`](crate::input::DescribeElasticGpusInput)
    pub fn builder() -> crate::input::describe_elastic_gpus_input::Builder {
        crate::input::describe_elastic_gpus_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeElasticGpus {
    type Output = std::result::Result<
        crate::output::DescribeElasticGpusOutput,
        crate::error::DescribeElasticGpusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_elastic_gpus_error(response)
        } else {
            crate::operation_deser::parse_describe_elastic_gpus_response(response)
        }
    }
}

/// <p>Describes the specified export image tasks or all of your export image tasks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExportImageTasks {
    _private: (),
}
impl DescribeExportImageTasks {
    /// Creates a new builder-style object to manufacture [`DescribeExportImageTasksInput`](crate::input::DescribeExportImageTasksInput)
    pub fn builder() -> crate::input::describe_export_image_tasks_input::Builder {
        crate::input::describe_export_image_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExportImageTasks {
    type Output = std::result::Result<
        crate::output::DescribeExportImageTasksOutput,
        crate::error::DescribeExportImageTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_export_image_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_export_image_tasks_response(response)
        }
    }
}

/// <p>Describes the specified export instance tasks or all of your export instance tasks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeExportTasks {
    _private: (),
}
impl DescribeExportTasks {
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
    pub fn builder() -> crate::input::describe_export_tasks_input::Builder {
        crate::input::describe_export_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeExportTasks {
    type Output = std::result::Result<
        crate::output::DescribeExportTasksOutput,
        crate::error::DescribeExportTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_export_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_export_tasks_response(response)
        }
    }
}

/// <p>Describes the state of fast snapshot restores for your snapshots.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFastSnapshotRestores {
    _private: (),
}
impl DescribeFastSnapshotRestores {
    /// Creates a new builder-style object to manufacture [`DescribeFastSnapshotRestoresInput`](crate::input::DescribeFastSnapshotRestoresInput)
    pub fn builder() -> crate::input::describe_fast_snapshot_restores_input::Builder {
        crate::input::describe_fast_snapshot_restores_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFastSnapshotRestores {
    type Output = std::result::Result<
        crate::output::DescribeFastSnapshotRestoresOutput,
        crate::error::DescribeFastSnapshotRestoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_fast_snapshot_restores_error(response)
        } else {
            crate::operation_deser::parse_describe_fast_snapshot_restores_response(response)
        }
    }
}

/// <p>Describes the events for the specified EC2 Fleet during the specified time.</p>
/// <p>EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures
/// that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events
/// are available for 48 hours.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html#monitor-ec2-fleet">Monitoring your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFleetHistory {
    _private: (),
}
impl DescribeFleetHistory {
    /// Creates a new builder-style object to manufacture [`DescribeFleetHistoryInput`](crate::input::DescribeFleetHistoryInput)
    pub fn builder() -> crate::input::describe_fleet_history_input::Builder {
        crate::input::describe_fleet_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFleetHistory {
    type Output = std::result::Result<
        crate::output::DescribeFleetHistoryOutput,
        crate::error::DescribeFleetHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_fleet_history_error(response)
        } else {
            crate::operation_deser::parse_describe_fleet_history_response(response)
        }
    }
}

/// <p>Describes the running instances for the specified EC2 Fleet.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html#monitor-ec2-fleet">Monitoring your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFleetInstances {
    _private: (),
}
impl DescribeFleetInstances {
    /// Creates a new builder-style object to manufacture [`DescribeFleetInstancesInput`](crate::input::DescribeFleetInstancesInput)
    pub fn builder() -> crate::input::describe_fleet_instances_input::Builder {
        crate::input::describe_fleet_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFleetInstances {
    type Output = std::result::Result<
        crate::output::DescribeFleetInstancesOutput,
        crate::error::DescribeFleetInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_fleet_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_fleet_instances_response(response)
        }
    }
}

/// <p>Describes the specified EC2 Fleets or all of your EC2 Fleets.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html#monitor-ec2-fleet">Monitoring your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFleets {
    _private: (),
}
impl DescribeFleets {
    /// Creates a new builder-style object to manufacture [`DescribeFleetsInput`](crate::input::DescribeFleetsInput)
    pub fn builder() -> crate::input::describe_fleets_input::Builder {
        crate::input::describe_fleets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFleets {
    type Output =
        std::result::Result<crate::output::DescribeFleetsOutput, crate::error::DescribeFleetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_fleets_error(response)
        } else {
            crate::operation_deser::parse_describe_fleets_response(response)
        }
    }
}

/// <p>Describes one or more flow logs. To view the information in your flow logs (the log
/// streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs
/// API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFlowLogs {
    _private: (),
}
impl DescribeFlowLogs {
    /// Creates a new builder-style object to manufacture [`DescribeFlowLogsInput`](crate::input::DescribeFlowLogsInput)
    pub fn builder() -> crate::input::describe_flow_logs_input::Builder {
        crate::input::describe_flow_logs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFlowLogs {
    type Output = std::result::Result<
        crate::output::DescribeFlowLogsOutput,
        crate::error::DescribeFlowLogsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_flow_logs_error(response)
        } else {
            crate::operation_deser::parse_describe_flow_logs_response(response)
        }
    }
}

/// <p>Describes the specified attribute of the specified Amazon FPGA Image (AFI).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFpgaImageAttribute {
    _private: (),
}
impl DescribeFpgaImageAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeFpgaImageAttributeInput`](crate::input::DescribeFpgaImageAttributeInput)
    pub fn builder() -> crate::input::describe_fpga_image_attribute_input::Builder {
        crate::input::describe_fpga_image_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFpgaImageAttribute {
    type Output = std::result::Result<
        crate::output::DescribeFpgaImageAttributeOutput,
        crate::error::DescribeFpgaImageAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_fpga_image_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_fpga_image_attribute_response(response)
        }
    }
}

/// <p>Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs,
/// private AFIs that you own, and AFIs owned by other AWS accounts for which you have load
/// permissions.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFpgaImages {
    _private: (),
}
impl DescribeFpgaImages {
    /// Creates a new builder-style object to manufacture [`DescribeFpgaImagesInput`](crate::input::DescribeFpgaImagesInput)
    pub fn builder() -> crate::input::describe_fpga_images_input::Builder {
        crate::input::describe_fpga_images_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeFpgaImages {
    type Output = std::result::Result<
        crate::output::DescribeFpgaImagesOutput,
        crate::error::DescribeFpgaImagesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_fpga_images_error(response)
        } else {
            crate::operation_deser::parse_describe_fpga_images_response(response)
        }
    }
}

/// <p>Describes the Dedicated Host reservations that are available to purchase.</p>
/// <p>The results describe all of the Dedicated Host reservation offerings, including
/// offerings that might not match the instance family and Region of your Dedicated Hosts.
/// When purchasing an offering, ensure that the instance family and Region of the offering
/// matches that of the Dedicated Hosts with which it is to be associated. For more
/// information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts</a>
/// in the <i>Amazon EC2 User Guide</i>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHostReservationOfferings {
    _private: (),
}
impl DescribeHostReservationOfferings {
    /// Creates a new builder-style object to manufacture [`DescribeHostReservationOfferingsInput`](crate::input::DescribeHostReservationOfferingsInput)
    pub fn builder() -> crate::input::describe_host_reservation_offerings_input::Builder {
        crate::input::describe_host_reservation_offerings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHostReservationOfferings {
    type Output = std::result::Result<
        crate::output::DescribeHostReservationOfferingsOutput,
        crate::error::DescribeHostReservationOfferingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_host_reservation_offerings_error(response)
        } else {
            crate::operation_deser::parse_describe_host_reservation_offerings_response(response)
        }
    }
}

/// <p>Describes reservations that are associated with Dedicated Hosts in your
/// account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHostReservations {
    _private: (),
}
impl DescribeHostReservations {
    /// Creates a new builder-style object to manufacture [`DescribeHostReservationsInput`](crate::input::DescribeHostReservationsInput)
    pub fn builder() -> crate::input::describe_host_reservations_input::Builder {
        crate::input::describe_host_reservations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHostReservations {
    type Output = std::result::Result<
        crate::output::DescribeHostReservationsOutput,
        crate::error::DescribeHostReservationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_host_reservations_error(response)
        } else {
            crate::operation_deser::parse_describe_host_reservations_response(response)
        }
    }
}

/// <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p>
/// <p>The results describe only the Dedicated Hosts in the Region you're currently using.
/// All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have
/// recently been released are listed with the state <code>released</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHosts {
    _private: (),
}
impl DescribeHosts {
    /// Creates a new builder-style object to manufacture [`DescribeHostsInput`](crate::input::DescribeHostsInput)
    pub fn builder() -> crate::input::describe_hosts_input::Builder {
        crate::input::describe_hosts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHosts {
    type Output =
        std::result::Result<crate::output::DescribeHostsOutput, crate::error::DescribeHostsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_hosts_error(response)
        } else {
            crate::operation_deser::parse_describe_hosts_response(response)
        }
    }
}

/// <p>Describes your IAM instance profile associations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIamInstanceProfileAssociations {
    _private: (),
}
impl DescribeIamInstanceProfileAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeIamInstanceProfileAssociationsInput`](crate::input::DescribeIamInstanceProfileAssociationsInput)
    pub fn builder() -> crate::input::describe_iam_instance_profile_associations_input::Builder {
        crate::input::describe_iam_instance_profile_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIamInstanceProfileAssociations {
    type Output = std::result::Result<
        crate::output::DescribeIamInstanceProfileAssociationsOutput,
        crate::error::DescribeIamInstanceProfileAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_iam_instance_profile_associations_error(response)
        } else {
            crate::operation_deser::parse_describe_iam_instance_profile_associations_response(
                response,
            )
        }
    }
}

/// <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root
/// user. For example, you can view the resource types that are enabled for longer IDs. This request only
/// returns information about resource types whose ID formats can be modified; it does not return
/// information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
/// <p>The following resource types support longer IDs: <code>bundle</code> |
/// <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
/// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
/// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
/// <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
/// <code>network-acl</code> | <code>network-acl-association</code> |
/// <code>network-interface</code> | <code>network-interface-attachment</code> |
/// <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
/// <code>route-table-association</code> | <code>security-group</code> |
/// <code>snapshot</code> | <code>subnet</code> |
/// <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
/// | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
/// <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
/// <p>These settings apply to the principal specified in the request. They do not apply to the
/// principal that makes the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIdentityIdFormat {
    _private: (),
}
impl DescribeIdentityIdFormat {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityIdFormatInput`](crate::input::DescribeIdentityIdFormatInput)
    pub fn builder() -> crate::input::describe_identity_id_format_input::Builder {
        crate::input::describe_identity_id_format_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIdentityIdFormat {
    type Output = std::result::Result<
        crate::output::DescribeIdentityIdFormatOutput,
        crate::error::DescribeIdentityIdFormatError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_identity_id_format_error(response)
        } else {
            crate::operation_deser::parse_describe_identity_id_format_response(response)
        }
    }
}

/// <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p>
/// <p>The following resource types support longer IDs: <code>bundle</code> |
/// <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
/// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
/// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
/// <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
/// <code>network-acl</code> | <code>network-acl-association</code> |
/// <code>network-interface</code> | <code>network-interface-attachment</code> |
/// <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
/// <code>route-table-association</code> | <code>security-group</code> |
/// <code>snapshot</code> | <code>subnet</code> |
/// <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
/// | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
/// <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
/// <p>These settings apply to the IAM user who makes the request; they do not apply to the entire
/// AWS account. By default, an IAM user defaults to the same settings as the root user, unless
/// they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources
/// created with longer IDs are visible to all IAM users, regardless of these settings and
/// provided that they have permission to use the relevant <code>Describe</code> command for the
/// resource type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIdFormat {
    _private: (),
}
impl DescribeIdFormat {
    /// Creates a new builder-style object to manufacture [`DescribeIdFormatInput`](crate::input::DescribeIdFormatInput)
    pub fn builder() -> crate::input::describe_id_format_input::Builder {
        crate::input::describe_id_format_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIdFormat {
    type Output = std::result::Result<
        crate::output::DescribeIdFormatOutput,
        crate::error::DescribeIdFormatError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_id_format_error(response)
        } else {
            crate::operation_deser::parse_describe_id_format_response(response)
        }
    }
}

/// <p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImageAttribute {
    _private: (),
}
impl DescribeImageAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeImageAttributeInput`](crate::input::DescribeImageAttributeInput)
    pub fn builder() -> crate::input::describe_image_attribute_input::Builder {
        crate::input::describe_image_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImageAttribute {
    type Output = std::result::Result<
        crate::output::DescribeImageAttributeOutput,
        crate::error::DescribeImageAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_image_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_image_attribute_response(response)
        }
    }
}

/// <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p>
/// <p>The images available to you include public images, private images that you own, and private images owned by other
/// Amazon Web Services accounts for which you have explicit launch permissions.</p>
/// <p>Recently deregistered images appear in the returned results for a short interval and then
/// return empty results. After all instances that reference a deregistered AMI are terminated,
/// specifying the ID of the image will eventually return an error indicating that the AMI ID
/// cannot be found.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImages {
    _private: (),
}
impl DescribeImages {
    /// Creates a new builder-style object to manufacture [`DescribeImagesInput`](crate::input::DescribeImagesInput)
    pub fn builder() -> crate::input::describe_images_input::Builder {
        crate::input::describe_images_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImages {
    type Output =
        std::result::Result<crate::output::DescribeImagesOutput, crate::error::DescribeImagesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_images_error(response)
        } else {
            crate::operation_deser::parse_describe_images_response(response)
        }
    }
}

/// <p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImportImageTasks {
    _private: (),
}
impl DescribeImportImageTasks {
    /// Creates a new builder-style object to manufacture [`DescribeImportImageTasksInput`](crate::input::DescribeImportImageTasksInput)
    pub fn builder() -> crate::input::describe_import_image_tasks_input::Builder {
        crate::input::describe_import_image_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImportImageTasks {
    type Output = std::result::Result<
        crate::output::DescribeImportImageTasksOutput,
        crate::error::DescribeImportImageTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_import_image_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_import_image_tasks_response(response)
        }
    }
}

/// <p>Describes your import snapshot tasks.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeImportSnapshotTasks {
    _private: (),
}
impl DescribeImportSnapshotTasks {
    /// Creates a new builder-style object to manufacture [`DescribeImportSnapshotTasksInput`](crate::input::DescribeImportSnapshotTasksInput)
    pub fn builder() -> crate::input::describe_import_snapshot_tasks_input::Builder {
        crate::input::describe_import_snapshot_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeImportSnapshotTasks {
    type Output = std::result::Result<
        crate::output::DescribeImportSnapshotTasksOutput,
        crate::error::DescribeImportSnapshotTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_import_snapshot_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_import_snapshot_tasks_response(response)
        }
    }
}

/// <p>Describes the specified attribute of the specified instance. You can specify only one
/// attribute at a time. Valid attribute values are: <code>instanceType</code> |
/// <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> |
/// <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code>
/// | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> |
/// <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> |
/// <code>ebsOptimized</code> | <code>sriovNetSupport</code>
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceAttribute {
    _private: (),
}
impl DescribeInstanceAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAttributeInput`](crate::input::DescribeInstanceAttributeInput)
    pub fn builder() -> crate::input::describe_instance_attribute_input::Builder {
        crate::input::describe_instance_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceAttribute {
    type Output = std::result::Result<
        crate::output::DescribeInstanceAttributeOutput,
        crate::error::DescribeInstanceAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_attribute_response(response)
        }
    }
}

/// <p>Describes the credit option for CPU usage of the specified burstable performance
/// instances. The credit options are <code>standard</code> and
/// <code>unlimited</code>.</p>
/// <p>If you do not specify an instance ID, Amazon EC2 returns burstable performance
/// instances with the <code>unlimited</code> credit option, as well as instances that were
/// previously configured as T2, T3, and T3a with the <code>unlimited</code> credit option.
/// For example, if you resize a T2 instance, while it is configured as
/// <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4
/// instance.</p>
/// <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option
/// (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify
/// an instance ID that is not valid, such as an instance that is not a burstable
/// performance instance, an error is returned.</p>
/// <p>Recently terminated instances might appear in the returned results. This interval is
/// usually less than one hour.</p>
/// <p>If an Availability Zone is experiencing a service disruption and you specify instance
/// IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If
/// you specify only instance IDs in an unaffected zone, the call works normally.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
/// performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceCreditSpecifications {
    _private: (),
}
impl DescribeInstanceCreditSpecifications {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceCreditSpecificationsInput`](crate::input::DescribeInstanceCreditSpecificationsInput)
    pub fn builder() -> crate::input::describe_instance_credit_specifications_input::Builder {
        crate::input::describe_instance_credit_specifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceCreditSpecifications {
    type Output = std::result::Result<
        crate::output::DescribeInstanceCreditSpecificationsOutput,
        crate::error::DescribeInstanceCreditSpecificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_credit_specifications_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_credit_specifications_response(response)
        }
    }
}

/// <p>Describes the tag keys that are registered to appear in scheduled event notifications for
/// resources in the current Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceEventNotificationAttributes {
    _private: (),
}
impl DescribeInstanceEventNotificationAttributes {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceEventNotificationAttributesInput`](crate::input::DescribeInstanceEventNotificationAttributesInput)
    pub fn builder() -> crate::input::describe_instance_event_notification_attributes_input::Builder
    {
        crate::input::describe_instance_event_notification_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceEventNotificationAttributes {
    type Output = std::result::Result<
        crate::output::DescribeInstanceEventNotificationAttributesOutput,
        crate::error::DescribeInstanceEventNotificationAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_event_notification_attributes_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_instance_event_notification_attributes_response(
                response,
            )
        }
    }
}

/// <p>Describes the specified event windows or all event windows.</p>
/// <p>If you specify event window IDs, the output includes information for only the specified
/// event windows. If you specify filters, the output includes information for only those event
/// windows that meet the filter criteria. If you do not specify event windows IDs or filters,
/// the output includes information for all event windows, which can affect performance. We
/// recommend that you use pagination to ensure that the operation returns quickly and
/// successfully. </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
/// events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceEventWindows {
    _private: (),
}
impl DescribeInstanceEventWindows {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceEventWindowsInput`](crate::input::DescribeInstanceEventWindowsInput)
    pub fn builder() -> crate::input::describe_instance_event_windows_input::Builder {
        crate::input::describe_instance_event_windows_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceEventWindows {
    type Output = std::result::Result<
        crate::output::DescribeInstanceEventWindowsOutput,
        crate::error::DescribeInstanceEventWindowsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_event_windows_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_event_windows_response(response)
        }
    }
}

/// <p>Describes the specified instances or all instances.</p>
/// <p>If you specify instance IDs, the output includes information for only the specified instances.
/// If you specify filters, the output includes information for only those instances that meet the filter criteria.
/// If you do not specify instance IDs or filters, the output includes information for all instances,
/// which can affect performance. We recommend that you use pagination to ensure that the operation
/// returns quickly and successfully.</p>
/// <p>If you specify an instance ID that is not valid, an error is returned. If you
/// specify an instance that you do not own, it is not included in the output.</p>
/// <p>Recently terminated instances might appear in the returned results. This interval is
/// usually less than one hour.</p>
/// <p>If you describe instances in the rare case where an Availability Zone is experiencing
/// a service disruption and you specify instance IDs that are in the affected zone, or do
/// not specify any instance IDs at all, the call fails. If you describe instances and
/// specify only instance IDs that are in an unaffected zone, the call works
/// normally.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstances {
    _private: (),
}
impl DescribeInstances {
    /// Creates a new builder-style object to manufacture [`DescribeInstancesInput`](crate::input::DescribeInstancesInput)
    pub fn builder() -> crate::input::describe_instances_input::Builder {
        crate::input::describe_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstances {
    type Output = std::result::Result<
        crate::output::DescribeInstancesOutput,
        crate::error::DescribeInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_instances_response(response)
        }
    }
}

/// <p>Describes the status of the specified instances or all of your instances. By default,
/// only running instances are described, unless you specifically indicate to return the
/// status of all instances.</p>
/// <p>Instance status includes the following components:</p>
/// <ul>
/// <li>
/// <p>
/// <b>Status checks</b> - Amazon EC2 performs status
/// checks on running EC2 instances to identify hardware and software issues. For
/// more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status checks for your instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting
/// instances with failed status checks</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// </li>
/// <li>
/// <p>
/// <b>Scheduled events</b> - Amazon EC2 can schedule
/// events (such as reboot, stop, or terminate) for your instances related to
/// hardware issues, software updates, or system maintenance. For more information,
/// see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled events for your instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// </li>
/// <li>
/// <p>
/// <b>Instance state</b> - You can manage your instances
/// from the moment you launch them through their termination. For more information,
/// see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance
/// lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceStatus {
    _private: (),
}
impl DescribeInstanceStatus {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceStatusInput`](crate::input::DescribeInstanceStatusInput)
    pub fn builder() -> crate::input::describe_instance_status_input::Builder {
        crate::input::describe_instance_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceStatus {
    type Output = std::result::Result<
        crate::output::DescribeInstanceStatusOutput,
        crate::error::DescribeInstanceStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_status_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_status_response(response)
        }
    }
}

/// <p>Returns a list of all instance types offered. The results can be filtered by location (Region or Availability
/// Zone). If no location is specified, the instance types offered in the current Region are returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceTypeOfferings {
    _private: (),
}
impl DescribeInstanceTypeOfferings {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypeOfferingsInput`](crate::input::DescribeInstanceTypeOfferingsInput)
    pub fn builder() -> crate::input::describe_instance_type_offerings_input::Builder {
        crate::input::describe_instance_type_offerings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceTypeOfferings {
    type Output = std::result::Result<
        crate::output::DescribeInstanceTypeOfferingsOutput,
        crate::error::DescribeInstanceTypeOfferingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_type_offerings_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_type_offerings_response(response)
        }
    }
}

/// <p>Describes the details of the instance types that are offered in a location. The results can be filtered by the
/// attributes of the instance types.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInstanceTypes {
    _private: (),
}
impl DescribeInstanceTypes {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypesInput`](crate::input::DescribeInstanceTypesInput)
    pub fn builder() -> crate::input::describe_instance_types_input::Builder {
        crate::input::describe_instance_types_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInstanceTypes {
    type Output = std::result::Result<
        crate::output::DescribeInstanceTypesOutput,
        crate::error::DescribeInstanceTypesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_instance_types_error(response)
        } else {
            crate::operation_deser::parse_describe_instance_types_response(response)
        }
    }
}

/// <p>Describes one or more of your internet gateways.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInternetGateways {
    _private: (),
}
impl DescribeInternetGateways {
    /// Creates a new builder-style object to manufacture [`DescribeInternetGatewaysInput`](crate::input::DescribeInternetGatewaysInput)
    pub fn builder() -> crate::input::describe_internet_gateways_input::Builder {
        crate::input::describe_internet_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInternetGateways {
    type Output = std::result::Result<
        crate::output::DescribeInternetGatewaysOutput,
        crate::error::DescribeInternetGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_internet_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_internet_gateways_response(response)
        }
    }
}

/// <p>Describes your IPv6 address pools.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIpv6Pools {
    _private: (),
}
impl DescribeIpv6Pools {
    /// Creates a new builder-style object to manufacture [`DescribeIpv6PoolsInput`](crate::input::DescribeIpv6PoolsInput)
    pub fn builder() -> crate::input::describe_ipv6_pools_input::Builder {
        crate::input::describe_ipv6_pools_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeIpv6Pools {
    type Output = std::result::Result<
        crate::output::DescribeIpv6PoolsOutput,
        crate::error::DescribeIpv6PoolsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_ipv6_pools_error(response)
        } else {
            crate::operation_deser::parse_describe_ipv6_pools_response(response)
        }
    }
}

/// <p>Describes the specified key pairs or all of your key pairs.</p>
/// <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeKeyPairs {
    _private: (),
}
impl DescribeKeyPairs {
    /// Creates a new builder-style object to manufacture [`DescribeKeyPairsInput`](crate::input::DescribeKeyPairsInput)
    pub fn builder() -> crate::input::describe_key_pairs_input::Builder {
        crate::input::describe_key_pairs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeKeyPairs {
    type Output = std::result::Result<
        crate::output::DescribeKeyPairsOutput,
        crate::error::DescribeKeyPairsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_key_pairs_error(response)
        } else {
            crate::operation_deser::parse_describe_key_pairs_response(response)
        }
    }
}

/// <p>Describes one or more launch templates.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLaunchTemplates {
    _private: (),
}
impl DescribeLaunchTemplates {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplatesInput`](crate::input::DescribeLaunchTemplatesInput)
    pub fn builder() -> crate::input::describe_launch_templates_input::Builder {
        crate::input::describe_launch_templates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLaunchTemplates {
    type Output = std::result::Result<
        crate::output::DescribeLaunchTemplatesOutput,
        crate::error::DescribeLaunchTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_launch_templates_error(response)
        } else {
            crate::operation_deser::parse_describe_launch_templates_response(response)
        }
    }
}

/// <p>Describes one or more versions of a specified launch template. You can describe all
/// versions, individual versions, or a range of versions. You can also describe all the
/// latest versions or all the default versions of all the launch templates in your
/// account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLaunchTemplateVersions {
    _private: (),
}
impl DescribeLaunchTemplateVersions {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplateVersionsInput`](crate::input::DescribeLaunchTemplateVersionsInput)
    pub fn builder() -> crate::input::describe_launch_template_versions_input::Builder {
        crate::input::describe_launch_template_versions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLaunchTemplateVersions {
    type Output = std::result::Result<
        crate::output::DescribeLaunchTemplateVersionsOutput,
        crate::error::DescribeLaunchTemplateVersionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_launch_template_versions_error(response)
        } else {
            crate::operation_deser::parse_describe_launch_template_versions_response(response)
        }
    }
}

/// <p>Describes one or more local gateway route tables. By default, all local gateway route tables are described.
/// Alternatively, you can filter the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocalGatewayRouteTables {
    _private: (),
}
impl DescribeLocalGatewayRouteTables {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTablesInput`](crate::input::DescribeLocalGatewayRouteTablesInput)
    pub fn builder() -> crate::input::describe_local_gateway_route_tables_input::Builder {
        crate::input::describe_local_gateway_route_tables_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLocalGatewayRouteTables {
    type Output = std::result::Result<
        crate::output::DescribeLocalGatewayRouteTablesOutput,
        crate::error::DescribeLocalGatewayRouteTablesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_local_gateway_route_tables_error(response)
        } else {
            crate::operation_deser::parse_describe_local_gateway_route_tables_response(response)
        }
    }
}

/// <p>Describes the associations between virtual interface groups and local gateway route tables.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations {
    _private: (),
}
impl DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput`](crate::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput)
    pub fn builder() -> crate::input::describe_local_gateway_route_table_virtual_interface_group_associations_input::Builder{
        crate::input::describe_local_gateway_route_table_virtual_interface_group_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
{
    type Output = std::result::Result<
        crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput,
        crate::error::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_local_gateway_route_table_virtual_interface_group_associations_error(response)
        } else {
            crate::operation_deser::parse_describe_local_gateway_route_table_virtual_interface_group_associations_response(response)
        }
    }
}

/// <p>Describes the specified associations between VPCs and local gateway route tables.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocalGatewayRouteTableVpcAssociations {
    _private: (),
}
impl DescribeLocalGatewayRouteTableVpcAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTableVpcAssociationsInput`](crate::input::DescribeLocalGatewayRouteTableVpcAssociationsInput)
    pub fn builder(
    ) -> crate::input::describe_local_gateway_route_table_vpc_associations_input::Builder {
        crate::input::describe_local_gateway_route_table_vpc_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLocalGatewayRouteTableVpcAssociations {
    type Output = std::result::Result<
        crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput,
        crate::error::DescribeLocalGatewayRouteTableVpcAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_local_gateway_route_table_vpc_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_local_gateway_route_table_vpc_associations_response(response)
        }
    }
}

/// <p>Describes one or more local gateways. By default, all local gateways are described.
/// Alternatively, you can filter the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocalGateways {
    _private: (),
}
impl DescribeLocalGateways {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewaysInput`](crate::input::DescribeLocalGatewaysInput)
    pub fn builder() -> crate::input::describe_local_gateways_input::Builder {
        crate::input::describe_local_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLocalGateways {
    type Output = std::result::Result<
        crate::output::DescribeLocalGatewaysOutput,
        crate::error::DescribeLocalGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_local_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_local_gateways_response(response)
        }
    }
}

/// <p>Describes the specified local gateway virtual interface groups.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocalGatewayVirtualInterfaceGroups {
    _private: (),
}
impl DescribeLocalGatewayVirtualInterfaceGroups {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayVirtualInterfaceGroupsInput`](crate::input::DescribeLocalGatewayVirtualInterfaceGroupsInput)
    pub fn builder() -> crate::input::describe_local_gateway_virtual_interface_groups_input::Builder
    {
        crate::input::describe_local_gateway_virtual_interface_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLocalGatewayVirtualInterfaceGroups {
    type Output = std::result::Result<
        crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput,
        crate::error::DescribeLocalGatewayVirtualInterfaceGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_local_gateway_virtual_interface_groups_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_local_gateway_virtual_interface_groups_response(
                response,
            )
        }
    }
}

/// <p>Describes the specified local gateway virtual interfaces.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocalGatewayVirtualInterfaces {
    _private: (),
}
impl DescribeLocalGatewayVirtualInterfaces {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayVirtualInterfacesInput`](crate::input::DescribeLocalGatewayVirtualInterfacesInput)
    pub fn builder() -> crate::input::describe_local_gateway_virtual_interfaces_input::Builder {
        crate::input::describe_local_gateway_virtual_interfaces_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLocalGatewayVirtualInterfaces {
    type Output = std::result::Result<
        crate::output::DescribeLocalGatewayVirtualInterfacesOutput,
        crate::error::DescribeLocalGatewayVirtualInterfacesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_local_gateway_virtual_interfaces_error(response)
        } else {
            crate::operation_deser::parse_describe_local_gateway_virtual_interfaces_response(
                response,
            )
        }
    }
}

/// <p>Describes your managed prefix lists and any Amazon Web Services-managed prefix lists.</p>
/// <p>To view the entries for your prefix list, use <a>GetManagedPrefixListEntries</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeManagedPrefixLists {
    _private: (),
}
impl DescribeManagedPrefixLists {
    /// Creates a new builder-style object to manufacture [`DescribeManagedPrefixListsInput`](crate::input::DescribeManagedPrefixListsInput)
    pub fn builder() -> crate::input::describe_managed_prefix_lists_input::Builder {
        crate::input::describe_managed_prefix_lists_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeManagedPrefixLists {
    type Output = std::result::Result<
        crate::output::DescribeManagedPrefixListsOutput,
        crate::error::DescribeManagedPrefixListsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_managed_prefix_lists_error(response)
        } else {
            crate::operation_deser::parse_describe_managed_prefix_lists_response(response)
        }
    }
}

/// <p>Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMovingAddresses {
    _private: (),
}
impl DescribeMovingAddresses {
    /// Creates a new builder-style object to manufacture [`DescribeMovingAddressesInput`](crate::input::DescribeMovingAddressesInput)
    pub fn builder() -> crate::input::describe_moving_addresses_input::Builder {
        crate::input::describe_moving_addresses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMovingAddresses {
    type Output = std::result::Result<
        crate::output::DescribeMovingAddressesOutput,
        crate::error::DescribeMovingAddressesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_moving_addresses_error(response)
        } else {
            crate::operation_deser::parse_describe_moving_addresses_response(response)
        }
    }
}

/// <p>Describes one or more of your NAT gateways.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNatGateways {
    _private: (),
}
impl DescribeNatGateways {
    /// Creates a new builder-style object to manufacture [`DescribeNatGatewaysInput`](crate::input::DescribeNatGatewaysInput)
    pub fn builder() -> crate::input::describe_nat_gateways_input::Builder {
        crate::input::describe_nat_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNatGateways {
    type Output = std::result::Result<
        crate::output::DescribeNatGatewaysOutput,
        crate::error::DescribeNatGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_nat_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_nat_gateways_response(response)
        }
    }
}

/// <p>Describes one or more of your network ACLs.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNetworkAcls {
    _private: (),
}
impl DescribeNetworkAcls {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkAclsInput`](crate::input::DescribeNetworkAclsInput)
    pub fn builder() -> crate::input::describe_network_acls_input::Builder {
        crate::input::describe_network_acls_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNetworkAcls {
    type Output = std::result::Result<
        crate::output::DescribeNetworkAclsOutput,
        crate::error::DescribeNetworkAclsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_network_acls_error(response)
        } else {
            crate::operation_deser::parse_describe_network_acls_response(response)
        }
    }
}

/// <p>Describes one or more of your network insights analyses.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNetworkInsightsAnalyses {
    _private: (),
}
impl DescribeNetworkInsightsAnalyses {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsAnalysesInput`](crate::input::DescribeNetworkInsightsAnalysesInput)
    pub fn builder() -> crate::input::describe_network_insights_analyses_input::Builder {
        crate::input::describe_network_insights_analyses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNetworkInsightsAnalyses {
    type Output = std::result::Result<
        crate::output::DescribeNetworkInsightsAnalysesOutput,
        crate::error::DescribeNetworkInsightsAnalysesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_network_insights_analyses_error(response)
        } else {
            crate::operation_deser::parse_describe_network_insights_analyses_response(response)
        }
    }
}

/// <p>Describes one or more of your paths.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNetworkInsightsPaths {
    _private: (),
}
impl DescribeNetworkInsightsPaths {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsPathsInput`](crate::input::DescribeNetworkInsightsPathsInput)
    pub fn builder() -> crate::input::describe_network_insights_paths_input::Builder {
        crate::input::describe_network_insights_paths_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNetworkInsightsPaths {
    type Output = std::result::Result<
        crate::output::DescribeNetworkInsightsPathsOutput,
        crate::error::DescribeNetworkInsightsPathsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_network_insights_paths_error(response)
        } else {
            crate::operation_deser::parse_describe_network_insights_paths_response(response)
        }
    }
}

/// <p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNetworkInterfaceAttribute {
    _private: (),
}
impl DescribeNetworkInterfaceAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfaceAttributeInput`](crate::input::DescribeNetworkInterfaceAttributeInput)
    pub fn builder() -> crate::input::describe_network_interface_attribute_input::Builder {
        crate::input::describe_network_interface_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNetworkInterfaceAttribute {
    type Output = std::result::Result<
        crate::output::DescribeNetworkInterfaceAttributeOutput,
        crate::error::DescribeNetworkInterfaceAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_network_interface_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_network_interface_attribute_response(response)
        }
    }
}

/// <p>Describes the permissions for your network interfaces. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNetworkInterfacePermissions {
    _private: (),
}
impl DescribeNetworkInterfacePermissions {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfacePermissionsInput`](crate::input::DescribeNetworkInterfacePermissionsInput)
    pub fn builder() -> crate::input::describe_network_interface_permissions_input::Builder {
        crate::input::describe_network_interface_permissions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNetworkInterfacePermissions {
    type Output = std::result::Result<
        crate::output::DescribeNetworkInterfacePermissionsOutput,
        crate::error::DescribeNetworkInterfacePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_network_interface_permissions_error(response)
        } else {
            crate::operation_deser::parse_describe_network_interface_permissions_response(response)
        }
    }
}

/// <p>Describes one or more of your network interfaces.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNetworkInterfaces {
    _private: (),
}
impl DescribeNetworkInterfaces {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfacesInput`](crate::input::DescribeNetworkInterfacesInput)
    pub fn builder() -> crate::input::describe_network_interfaces_input::Builder {
        crate::input::describe_network_interfaces_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeNetworkInterfaces {
    type Output = std::result::Result<
        crate::output::DescribeNetworkInterfacesOutput,
        crate::error::DescribeNetworkInterfacesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_network_interfaces_error(response)
        } else {
            crate::operation_deser::parse_describe_network_interfaces_response(response)
        }
    }
}

/// <p>Describes the specified placement groups or all of your placement groups. For more
/// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the
/// <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePlacementGroups {
    _private: (),
}
impl DescribePlacementGroups {
    /// Creates a new builder-style object to manufacture [`DescribePlacementGroupsInput`](crate::input::DescribePlacementGroupsInput)
    pub fn builder() -> crate::input::describe_placement_groups_input::Builder {
        crate::input::describe_placement_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePlacementGroups {
    type Output = std::result::Result<
        crate::output::DescribePlacementGroupsOutput,
        crate::error::DescribePlacementGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_placement_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_placement_groups_response(response)
        }
    }
}

/// <p>Describes available Amazon Web Services services in a prefix list format, which includes the prefix list
/// name and prefix list ID of the service and the IP address range for the service.</p>
/// <p>We recommend that you use <a>DescribeManagedPrefixLists</a> instead.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePrefixLists {
    _private: (),
}
impl DescribePrefixLists {
    /// Creates a new builder-style object to manufacture [`DescribePrefixListsInput`](crate::input::DescribePrefixListsInput)
    pub fn builder() -> crate::input::describe_prefix_lists_input::Builder {
        crate::input::describe_prefix_lists_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePrefixLists {
    type Output = std::result::Result<
        crate::output::DescribePrefixListsOutput,
        crate::error::DescribePrefixListsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_prefix_lists_error(response)
        } else {
            crate::operation_deser::parse_describe_prefix_lists_response(response)
        }
    }
}

/// <p>Describes the ID format settings for the root user and all IAM roles and IAM users
/// that have explicitly specified a longer ID (17-character ID) preference. </p>
/// <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they
/// explicitly override the settings. This request is useful for identifying those IAM users and IAM roles
/// that have overridden the default ID settings.</p>
/// <p>The following resource types support longer IDs: <code>bundle</code> |
/// <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
/// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
/// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
/// <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> |
/// <code>network-acl</code> | <code>network-acl-association</code> |
/// <code>network-interface</code> | <code>network-interface-attachment</code> |
/// <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> |
/// <code>route-table-association</code> | <code>security-group</code> |
/// <code>snapshot</code> | <code>subnet</code> |
/// <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code>
/// | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> |
/// <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePrincipalIdFormat {
    _private: (),
}
impl DescribePrincipalIdFormat {
    /// Creates a new builder-style object to manufacture [`DescribePrincipalIdFormatInput`](crate::input::DescribePrincipalIdFormatInput)
    pub fn builder() -> crate::input::describe_principal_id_format_input::Builder {
        crate::input::describe_principal_id_format_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePrincipalIdFormat {
    type Output = std::result::Result<
        crate::output::DescribePrincipalIdFormatOutput,
        crate::error::DescribePrincipalIdFormatError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_principal_id_format_error(response)
        } else {
            crate::operation_deser::parse_describe_principal_id_format_response(response)
        }
    }
}

/// <p>Describes the specified IPv4 address pools.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribePublicIpv4Pools {
    _private: (),
}
impl DescribePublicIpv4Pools {
    /// Creates a new builder-style object to manufacture [`DescribePublicIpv4PoolsInput`](crate::input::DescribePublicIpv4PoolsInput)
    pub fn builder() -> crate::input::describe_public_ipv4_pools_input::Builder {
        crate::input::describe_public_ipv4_pools_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribePublicIpv4Pools {
    type Output = std::result::Result<
        crate::output::DescribePublicIpv4PoolsOutput,
        crate::error::DescribePublicIpv4PoolsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_public_ipv4_pools_error(response)
        } else {
            crate::operation_deser::parse_describe_public_ipv4_pools_response(response)
        }
    }
}

/// <p>Describes the Regions that are enabled for your account, or all Regions.</p>
/// <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region">
/// Regions and Endpoints</a>.</p>
/// <p>For information about enabling and disabling Regions for your account, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing AWS Regions</a> in the <i>AWS General Reference</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRegions {
    _private: (),
}
impl DescribeRegions {
    /// Creates a new builder-style object to manufacture [`DescribeRegionsInput`](crate::input::DescribeRegionsInput)
    pub fn builder() -> crate::input::describe_regions_input::Builder {
        crate::input::describe_regions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRegions {
    type Output = std::result::Result<
        crate::output::DescribeRegionsOutput,
        crate::error::DescribeRegionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_regions_error(response)
        } else {
            crate::operation_deser::parse_describe_regions_response(response)
        }
    }
}

/// <p>Describes a root volume replacement task. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-restoring-volume.html#replace-root">Replace a root volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReplaceRootVolumeTasks {
    _private: (),
}
impl DescribeReplaceRootVolumeTasks {
    /// Creates a new builder-style object to manufacture [`DescribeReplaceRootVolumeTasksInput`](crate::input::DescribeReplaceRootVolumeTasksInput)
    pub fn builder() -> crate::input::describe_replace_root_volume_tasks_input::Builder {
        crate::input::describe_replace_root_volume_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReplaceRootVolumeTasks {
    type Output = std::result::Result<
        crate::output::DescribeReplaceRootVolumeTasksOutput,
        crate::error::DescribeReplaceRootVolumeTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_replace_root_volume_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_replace_root_volume_tasks_response(response)
        }
    }
}

/// <p>Describes one or more of the Reserved Instances that you purchased.</p>
/// <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved
/// Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedInstances {
    _private: (),
}
impl DescribeReservedInstances {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesInput`](crate::input::DescribeReservedInstancesInput)
    pub fn builder() -> crate::input::describe_reserved_instances_input::Builder {
        crate::input::describe_reserved_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReservedInstances {
    type Output = std::result::Result<
        crate::output::DescribeReservedInstancesOutput,
        crate::error::DescribeReservedInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_reserved_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_reserved_instances_response(response)
        }
    }
}

/// <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p>
/// <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p>
/// <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p>
/// <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedInstancesListings {
    _private: (),
}
impl DescribeReservedInstancesListings {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesListingsInput`](crate::input::DescribeReservedInstancesListingsInput)
    pub fn builder() -> crate::input::describe_reserved_instances_listings_input::Builder {
        crate::input::describe_reserved_instances_listings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReservedInstancesListings {
    type Output = std::result::Result<
        crate::output::DescribeReservedInstancesListingsOutput,
        crate::error::DescribeReservedInstancesListingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_reserved_instances_listings_error(response)
        } else {
            crate::operation_deser::parse_describe_reserved_instances_listings_response(response)
        }
    }
}

/// <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedInstancesModifications {
    _private: (),
}
impl DescribeReservedInstancesModifications {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesModificationsInput`](crate::input::DescribeReservedInstancesModificationsInput)
    pub fn builder() -> crate::input::describe_reserved_instances_modifications_input::Builder {
        crate::input::describe_reserved_instances_modifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReservedInstancesModifications {
    type Output = std::result::Result<
        crate::output::DescribeReservedInstancesModificationsOutput,
        crate::error::DescribeReservedInstancesModificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_reserved_instances_modifications_error(response)
        } else {
            crate::operation_deser::parse_describe_reserved_instances_modifications_response(
                response,
            )
        }
    }
}

/// <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p>
/// <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedInstancesOfferings {
    _private: (),
}
impl DescribeReservedInstancesOfferings {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesOfferingsInput`](crate::input::DescribeReservedInstancesOfferingsInput)
    pub fn builder() -> crate::input::describe_reserved_instances_offerings_input::Builder {
        crate::input::describe_reserved_instances_offerings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReservedInstancesOfferings {
    type Output = std::result::Result<
        crate::output::DescribeReservedInstancesOfferingsOutput,
        crate::error::DescribeReservedInstancesOfferingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_reserved_instances_offerings_error(response)
        } else {
            crate::operation_deser::parse_describe_reserved_instances_offerings_response(response)
        }
    }
}

/// <p>Describes one or more of your route tables.</p>
/// <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRouteTables {
    _private: (),
}
impl DescribeRouteTables {
    /// Creates a new builder-style object to manufacture [`DescribeRouteTablesInput`](crate::input::DescribeRouteTablesInput)
    pub fn builder() -> crate::input::describe_route_tables_input::Builder {
        crate::input::describe_route_tables_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRouteTables {
    type Output = std::result::Result<
        crate::output::DescribeRouteTablesOutput,
        crate::error::DescribeRouteTablesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_route_tables_error(response)
        } else {
            crate::operation_deser::parse_describe_route_tables_response(response)
        }
    }
}

/// <p>Finds available schedules that meet the specified criteria.</p>
/// <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
/// <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a>
/// to purchase Scheduled Instances with that schedule.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScheduledInstanceAvailability {
    _private: (),
}
impl DescribeScheduledInstanceAvailability {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledInstanceAvailabilityInput`](crate::input::DescribeScheduledInstanceAvailabilityInput)
    pub fn builder() -> crate::input::describe_scheduled_instance_availability_input::Builder {
        crate::input::describe_scheduled_instance_availability_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeScheduledInstanceAvailability {
    type Output = std::result::Result<
        crate::output::DescribeScheduledInstanceAvailabilityOutput,
        crate::error::DescribeScheduledInstanceAvailabilityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_scheduled_instance_availability_error(response)
        } else {
            crate::operation_deser::parse_describe_scheduled_instance_availability_response(
                response,
            )
        }
    }
}

/// <p>Describes the specified Scheduled Instances or all your Scheduled Instances.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScheduledInstances {
    _private: (),
}
impl DescribeScheduledInstances {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledInstancesInput`](crate::input::DescribeScheduledInstancesInput)
    pub fn builder() -> crate::input::describe_scheduled_instances_input::Builder {
        crate::input::describe_scheduled_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeScheduledInstances {
    type Output = std::result::Result<
        crate::output::DescribeScheduledInstancesOutput,
        crate::error::DescribeScheduledInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_scheduled_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_scheduled_instances_response(response)
        }
    }
}

/// <p>[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSecurityGroupReferences {
    _private: (),
}
impl DescribeSecurityGroupReferences {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupReferencesInput`](crate::input::DescribeSecurityGroupReferencesInput)
    pub fn builder() -> crate::input::describe_security_group_references_input::Builder {
        crate::input::describe_security_group_references_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSecurityGroupReferences {
    type Output = std::result::Result<
        crate::output::DescribeSecurityGroupReferencesOutput,
        crate::error::DescribeSecurityGroupReferencesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_security_group_references_error(response)
        } else {
            crate::operation_deser::parse_describe_security_group_references_response(response)
        }
    }
}

/// <p>Describes one or more of your security group rules.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSecurityGroupRules {
    _private: (),
}
impl DescribeSecurityGroupRules {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupRulesInput`](crate::input::DescribeSecurityGroupRulesInput)
    pub fn builder() -> crate::input::describe_security_group_rules_input::Builder {
        crate::input::describe_security_group_rules_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSecurityGroupRules {
    type Output = std::result::Result<
        crate::output::DescribeSecurityGroupRulesOutput,
        crate::error::DescribeSecurityGroupRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_security_group_rules_error(response)
        } else {
            crate::operation_deser::parse_describe_security_group_rules_response(response)
        }
    }
}

/// <p>Describes the specified security groups or all of your security groups.</p>
/// <p>A security group is for use with instances either in the EC2-Classic platform  
/// or in a specific VPC. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 security groups</a> in
/// the <i>Amazon Elastic Compute Cloud User Guide</i> and
/// <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security groups for your VPC</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSecurityGroups {
    _private: (),
}
impl DescribeSecurityGroups {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupsInput`](crate::input::DescribeSecurityGroupsInput)
    pub fn builder() -> crate::input::describe_security_groups_input::Builder {
        crate::input::describe_security_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSecurityGroups {
    type Output = std::result::Result<
        crate::output::DescribeSecurityGroupsOutput,
        crate::error::DescribeSecurityGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_security_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_security_groups_response(response)
        }
    }
}

/// <p>Describes the specified attribute of the specified snapshot. You can specify only one
/// attribute at a time.</p>
/// <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSnapshotAttribute {
    _private: (),
}
impl DescribeSnapshotAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotAttributeInput`](crate::input::DescribeSnapshotAttributeInput)
    pub fn builder() -> crate::input::describe_snapshot_attribute_input::Builder {
        crate::input::describe_snapshot_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSnapshotAttribute {
    type Output = std::result::Result<
        crate::output::DescribeSnapshotAttributeOutput,
        crate::error::DescribeSnapshotAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_snapshot_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_snapshot_attribute_response(response)
        }
    }
}

/// <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots
/// available to you.</p>
/// <p>The snapshots available to you include public snapshots, private snapshots that you own,
/// and private snapshots owned by other Amazon Web Services accounts for which you have explicit create volume
/// permissions.</p>
/// <p>The create volume permissions fall into the following categories:</p>
/// <ul>
/// <li>
/// <p>
/// <i>public</i>: The owner of the snapshot granted create volume
/// permissions for the snapshot to the <code>all</code> group. All Amazon Web Services accounts have create
/// volume permissions for these snapshots.</p>
/// </li>
/// <li>
/// <p>
/// <i>explicit</i>: The owner of the snapshot granted create volume
/// permissions to a specific Amazon Web Services account.</p>
/// </li>
/// <li>
/// <p>
/// <i>implicit</i>: An Amazon Web Services account has implicit create volume permissions
/// for all snapshots it owns.</p>
/// </li>
/// </ul>
/// <p>The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot
/// owners, or Amazon Web Services accounts with create volume permissions. If no options are specified,
/// Amazon EC2 returns all snapshots for which you have create volume permissions.</p>
/// <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are
/// returned. If you specify an invalid snapshot ID, an error is returned. If you specify a
/// snapshot ID for which you do not have access, it is not included in the returned
/// results.</p>
/// <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only
/// snapshots from the specified owners and for which you have access are returned. The results
/// can include the Amazon Web Services account IDs of the specified owners, <code>amazon</code> for snapshots
/// owned by Amazon, or <code>self</code> for snapshots that you own.</p>
/// <p>If you specify a list of restorable users, only snapshots with create snapshot permissions
/// for those users are returned. You can specify Amazon Web Services account IDs (if you own the snapshots),
/// <code>self</code> for snapshots for which you own or have explicit permissions, or
/// <code>all</code> for public snapshots.</p>
/// <p>If you are describing a long list of snapshots, we recommend that you paginate the output to make the
/// list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results
/// returned in a single page. If the list of results exceeds your <code>MaxResults</code> value,
/// then that number of results is returned along with a <code>NextToken</code> value that can be
/// passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining
/// results.</p>
/// <p>To get the state of fast snapshot restores for a snapshot, use <a>DescribeFastSnapshotRestores</a>.</p>
/// <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSnapshots {
    _private: (),
}
impl DescribeSnapshots {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotsInput`](crate::input::DescribeSnapshotsInput)
    pub fn builder() -> crate::input::describe_snapshots_input::Builder {
        crate::input::describe_snapshots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSnapshots {
    type Output = std::result::Result<
        crate::output::DescribeSnapshotsOutput,
        crate::error::DescribeSnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_snapshots_error(response)
        } else {
            crate::operation_deser::parse_describe_snapshots_response(response)
        }
    }
}

/// <p>Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot
/// Instance data feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpotDatafeedSubscription {
    _private: (),
}
impl DescribeSpotDatafeedSubscription {
    /// Creates a new builder-style object to manufacture [`DescribeSpotDatafeedSubscriptionInput`](crate::input::DescribeSpotDatafeedSubscriptionInput)
    pub fn builder() -> crate::input::describe_spot_datafeed_subscription_input::Builder {
        crate::input::describe_spot_datafeed_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSpotDatafeedSubscription {
    type Output = std::result::Result<
        crate::output::DescribeSpotDatafeedSubscriptionOutput,
        crate::error::DescribeSpotDatafeedSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_spot_datafeed_subscription_error(response)
        } else {
            crate::operation_deser::parse_describe_spot_datafeed_subscription_response(response)
        }
    }
}

/// <p>Describes the running instances for the specified Spot Fleet.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpotFleetInstances {
    _private: (),
}
impl DescribeSpotFleetInstances {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetInstancesInput`](crate::input::DescribeSpotFleetInstancesInput)
    pub fn builder() -> crate::input::describe_spot_fleet_instances_input::Builder {
        crate::input::describe_spot_fleet_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSpotFleetInstances {
    type Output = std::result::Result<
        crate::output::DescribeSpotFleetInstancesOutput,
        crate::error::DescribeSpotFleetInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_spot_fleet_instances_error(response)
        } else {
            crate::operation_deser::parse_describe_spot_fleet_instances_response(response)
        }
    }
}

/// <p>Describes the events for the specified Spot Fleet request during the specified
/// time.</p>
/// <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This
/// ensures that you can query by the last evaluated time and not miss a recorded event.
/// Spot Fleet events are available for 48 hours.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpotFleetRequestHistory {
    _private: (),
}
impl DescribeSpotFleetRequestHistory {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetRequestHistoryInput`](crate::input::DescribeSpotFleetRequestHistoryInput)
    pub fn builder() -> crate::input::describe_spot_fleet_request_history_input::Builder {
        crate::input::describe_spot_fleet_request_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSpotFleetRequestHistory {
    type Output = std::result::Result<
        crate::output::DescribeSpotFleetRequestHistoryOutput,
        crate::error::DescribeSpotFleetRequestHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_spot_fleet_request_history_error(response)
        } else {
            crate::operation_deser::parse_describe_spot_fleet_request_history_response(response)
        }
    }
}

/// <p>Describes your Spot Fleet requests.</p>
/// <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances
/// are terminated.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpotFleetRequests {
    _private: (),
}
impl DescribeSpotFleetRequests {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetRequestsInput`](crate::input::DescribeSpotFleetRequestsInput)
    pub fn builder() -> crate::input::describe_spot_fleet_requests_input::Builder {
        crate::input::describe_spot_fleet_requests_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSpotFleetRequests {
    type Output = std::result::Result<
        crate::output::DescribeSpotFleetRequestsOutput,
        crate::error::DescribeSpotFleetRequestsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_spot_fleet_requests_error(response)
        } else {
            crate::operation_deser::parse_describe_spot_fleet_requests_response(response)
        }
    }
}

/// <p>Describes the specified Spot Instance requests.</p>
/// <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by
/// examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the
/// instance ID appears in the response and contains the identifier of the instance.
/// Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a>
/// with a filter to look for instances where the instance lifecycle is
/// <code>spot</code>.</p>
/// <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to
/// limit the number of results returned. This paginates the output, which makes the list
/// more manageable and returns the results faster. If the list of results exceeds your
/// <code>MaxResults</code> value, then that number of results is returned along with a
/// <code>NextToken</code> value that can be passed to a subsequent
/// <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining
/// results.</p>
/// <p>Spot Instance requests are deleted four hours after they are canceled and their instances are
/// terminated.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpotInstanceRequests {
    _private: (),
}
impl DescribeSpotInstanceRequests {
    /// Creates a new builder-style object to manufacture [`DescribeSpotInstanceRequestsInput`](crate::input::DescribeSpotInstanceRequestsInput)
    pub fn builder() -> crate::input::describe_spot_instance_requests_input::Builder {
        crate::input::describe_spot_instance_requests_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSpotInstanceRequests {
    type Output = std::result::Result<
        crate::output::DescribeSpotInstanceRequestsOutput,
        crate::error::DescribeSpotInstanceRequestsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_spot_instance_requests_error(response)
        } else {
            crate::operation_deser::parse_describe_spot_instance_requests_response(response)
        }
    }
}

/// <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance pricing history</a> in the
/// <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
/// <p>When you specify a start and end time, the operation returns the prices of the
/// instance types within that time range. It also returns the last price change before the
/// start time, which is the effective price as of the start time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSpotPriceHistory {
    _private: (),
}
impl DescribeSpotPriceHistory {
    /// Creates a new builder-style object to manufacture [`DescribeSpotPriceHistoryInput`](crate::input::DescribeSpotPriceHistoryInput)
    pub fn builder() -> crate::input::describe_spot_price_history_input::Builder {
        crate::input::describe_spot_price_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSpotPriceHistory {
    type Output = std::result::Result<
        crate::output::DescribeSpotPriceHistoryOutput,
        crate::error::DescribeSpotPriceHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_spot_price_history_error(response)
        } else {
            crate::operation_deser::parse_describe_spot_price_history_response(response)
        }
    }
}

/// <p>[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStaleSecurityGroups {
    _private: (),
}
impl DescribeStaleSecurityGroups {
    /// Creates a new builder-style object to manufacture [`DescribeStaleSecurityGroupsInput`](crate::input::DescribeStaleSecurityGroupsInput)
    pub fn builder() -> crate::input::describe_stale_security_groups_input::Builder {
        crate::input::describe_stale_security_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStaleSecurityGroups {
    type Output = std::result::Result<
        crate::output::DescribeStaleSecurityGroupsOutput,
        crate::error::DescribeStaleSecurityGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_stale_security_groups_error(response)
        } else {
            crate::operation_deser::parse_describe_stale_security_groups_response(response)
        }
    }
}

/// <p>Describes the progress of the AMI store tasks. You can describe the store tasks for
/// specified AMIs. If you don't specify the AMIs, you get a paginated list of store tasks from
/// the last 31 days.</p>
/// <p>For each AMI task, the response indicates if the task is <code>InProgress</code>,
/// <code>Completed</code>, or <code>Failed</code>. For tasks <code>InProgress</code>, the
/// response shows the estimated progress as a percentage.</p>
/// <p>Tasks are listed in reverse chronological order. Currently, only tasks from the past 31
/// days can be viewed.</p>
/// <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using Amazon S3</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using
/// Amazon S3</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStoreImageTasks {
    _private: (),
}
impl DescribeStoreImageTasks {
    /// Creates a new builder-style object to manufacture [`DescribeStoreImageTasksInput`](crate::input::DescribeStoreImageTasksInput)
    pub fn builder() -> crate::input::describe_store_image_tasks_input::Builder {
        crate::input::describe_store_image_tasks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeStoreImageTasks {
    type Output = std::result::Result<
        crate::output::DescribeStoreImageTasksOutput,
        crate::error::DescribeStoreImageTasksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_store_image_tasks_error(response)
        } else {
            crate::operation_deser::parse_describe_store_image_tasks_response(response)
        }
    }
}

/// <p>Describes one or more of your subnets.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and subnets</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSubnets {
    _private: (),
}
impl DescribeSubnets {
    /// Creates a new builder-style object to manufacture [`DescribeSubnetsInput`](crate::input::DescribeSubnetsInput)
    pub fn builder() -> crate::input::describe_subnets_input::Builder {
        crate::input::describe_subnets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSubnets {
    type Output = std::result::Result<
        crate::output::DescribeSubnetsOutput,
        crate::error::DescribeSubnetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_subnets_error(response)
        } else {
            crate::operation_deser::parse_describe_subnets_response(response)
        }
    }
}

/// <p>Describes the specified tags for your EC2 resources.</p>
/// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTags {
    _private: (),
}
impl DescribeTags {
    /// Creates a new builder-style object to manufacture [`DescribeTagsInput`](crate::input::DescribeTagsInput)
    pub fn builder() -> crate::input::describe_tags_input::Builder {
        crate::input::describe_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTags {
    type Output =
        std::result::Result<crate::output::DescribeTagsOutput, crate::error::DescribeTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_tags_error(response)
        } else {
            crate::operation_deser::parse_describe_tags_response(response)
        }
    }
}

/// <p>Describes one or more Traffic Mirror filters.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrafficMirrorFilters {
    _private: (),
}
impl DescribeTrafficMirrorFilters {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorFiltersInput`](crate::input::DescribeTrafficMirrorFiltersInput)
    pub fn builder() -> crate::input::describe_traffic_mirror_filters_input::Builder {
        crate::input::describe_traffic_mirror_filters_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrafficMirrorFilters {
    type Output = std::result::Result<
        crate::output::DescribeTrafficMirrorFiltersOutput,
        crate::error::DescribeTrafficMirrorFiltersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_traffic_mirror_filters_error(response)
        } else {
            crate::operation_deser::parse_describe_traffic_mirror_filters_response(response)
        }
    }
}

/// <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrafficMirrorSessions {
    _private: (),
}
impl DescribeTrafficMirrorSessions {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorSessionsInput`](crate::input::DescribeTrafficMirrorSessionsInput)
    pub fn builder() -> crate::input::describe_traffic_mirror_sessions_input::Builder {
        crate::input::describe_traffic_mirror_sessions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrafficMirrorSessions {
    type Output = std::result::Result<
        crate::output::DescribeTrafficMirrorSessionsOutput,
        crate::error::DescribeTrafficMirrorSessionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_traffic_mirror_sessions_error(response)
        } else {
            crate::operation_deser::parse_describe_traffic_mirror_sessions_response(response)
        }
    }
}

/// <p>Information about one or more Traffic Mirror targets.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrafficMirrorTargets {
    _private: (),
}
impl DescribeTrafficMirrorTargets {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorTargetsInput`](crate::input::DescribeTrafficMirrorTargetsInput)
    pub fn builder() -> crate::input::describe_traffic_mirror_targets_input::Builder {
        crate::input::describe_traffic_mirror_targets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrafficMirrorTargets {
    type Output = std::result::Result<
        crate::output::DescribeTrafficMirrorTargetsOutput,
        crate::error::DescribeTrafficMirrorTargetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_traffic_mirror_targets_error(response)
        } else {
            crate::operation_deser::parse_describe_traffic_mirror_targets_response(response)
        }
    }
}

/// <p>Describes one or more attachments between resources and transit gateways. By default, all attachments are described.
/// Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayAttachments {
    _private: (),
}
impl DescribeTransitGatewayAttachments {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayAttachmentsInput`](crate::input::DescribeTransitGatewayAttachmentsInput)
    pub fn builder() -> crate::input::describe_transit_gateway_attachments_input::Builder {
        crate::input::describe_transit_gateway_attachments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayAttachments {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayAttachmentsOutput,
        crate::error::DescribeTransitGatewayAttachmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_attachments_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateway_attachments_response(response)
        }
    }
}

/// <p>Describes one or more Connect peers.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayConnectPeers {
    _private: (),
}
impl DescribeTransitGatewayConnectPeers {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayConnectPeersInput`](crate::input::DescribeTransitGatewayConnectPeersInput)
    pub fn builder() -> crate::input::describe_transit_gateway_connect_peers_input::Builder {
        crate::input::describe_transit_gateway_connect_peers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayConnectPeers {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayConnectPeersOutput,
        crate::error::DescribeTransitGatewayConnectPeersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_connect_peers_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateway_connect_peers_response(response)
        }
    }
}

/// <p>Describes one or more Connect attachments.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayConnects {
    _private: (),
}
impl DescribeTransitGatewayConnects {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayConnectsInput`](crate::input::DescribeTransitGatewayConnectsInput)
    pub fn builder() -> crate::input::describe_transit_gateway_connects_input::Builder {
        crate::input::describe_transit_gateway_connects_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayConnects {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayConnectsOutput,
        crate::error::DescribeTransitGatewayConnectsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_connects_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateway_connects_response(response)
        }
    }
}

/// <p>Describes one or more transit gateway multicast domains.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayMulticastDomains {
    _private: (),
}
impl DescribeTransitGatewayMulticastDomains {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayMulticastDomainsInput`](crate::input::DescribeTransitGatewayMulticastDomainsInput)
    pub fn builder() -> crate::input::describe_transit_gateway_multicast_domains_input::Builder {
        crate::input::describe_transit_gateway_multicast_domains_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayMulticastDomains {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayMulticastDomainsOutput,
        crate::error::DescribeTransitGatewayMulticastDomainsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_multicast_domains_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateway_multicast_domains_response(
                response,
            )
        }
    }
}

/// <p>Describes your transit gateway peering attachments.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayPeeringAttachments {
    _private: (),
}
impl DescribeTransitGatewayPeeringAttachments {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayPeeringAttachmentsInput`](crate::input::DescribeTransitGatewayPeeringAttachmentsInput)
    pub fn builder() -> crate::input::describe_transit_gateway_peering_attachments_input::Builder {
        crate::input::describe_transit_gateway_peering_attachments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayPeeringAttachments {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayPeeringAttachmentsOutput,
        crate::error::DescribeTransitGatewayPeeringAttachmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_peering_attachments_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_transit_gateway_peering_attachments_response(
                response,
            )
        }
    }
}

/// <p>Describes one or more transit gateway route tables. By default, all transit gateway route tables are described.
/// Alternatively, you can filter the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayRouteTables {
    _private: (),
}
impl DescribeTransitGatewayRouteTables {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayRouteTablesInput`](crate::input::DescribeTransitGatewayRouteTablesInput)
    pub fn builder() -> crate::input::describe_transit_gateway_route_tables_input::Builder {
        crate::input::describe_transit_gateway_route_tables_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayRouteTables {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayRouteTablesOutput,
        crate::error::DescribeTransitGatewayRouteTablesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_route_tables_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateway_route_tables_response(response)
        }
    }
}

/// <p>Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can
/// filter the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGateways {
    _private: (),
}
impl DescribeTransitGateways {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewaysInput`](crate::input::DescribeTransitGatewaysInput)
    pub fn builder() -> crate::input::describe_transit_gateways_input::Builder {
        crate::input::describe_transit_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGateways {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewaysOutput,
        crate::error::DescribeTransitGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateways_response(response)
        }
    }
}

/// <p>Describes one or more VPC attachments. By default, all VPC attachments are described.
/// Alternatively, you can filter the results.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTransitGatewayVpcAttachments {
    _private: (),
}
impl DescribeTransitGatewayVpcAttachments {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayVpcAttachmentsInput`](crate::input::DescribeTransitGatewayVpcAttachmentsInput)
    pub fn builder() -> crate::input::describe_transit_gateway_vpc_attachments_input::Builder {
        crate::input::describe_transit_gateway_vpc_attachments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTransitGatewayVpcAttachments {
    type Output = std::result::Result<
        crate::output::DescribeTransitGatewayVpcAttachmentsOutput,
        crate::error::DescribeTransitGatewayVpcAttachmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_transit_gateway_vpc_attachments_error(response)
        } else {
            crate::operation_deser::parse_describe_transit_gateway_vpc_attachments_response(
                response,
            )
        }
    }
}

/// <note>
/// <p>This API action is currently in <b>limited preview only</b>.
/// If you are interested in using this feature, contact your account manager.</p>
/// </note>
/// <p>Describes one or more network interface trunk associations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrunkInterfaceAssociations {
    _private: (),
}
impl DescribeTrunkInterfaceAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeTrunkInterfaceAssociationsInput`](crate::input::DescribeTrunkInterfaceAssociationsInput)
    pub fn builder() -> crate::input::describe_trunk_interface_associations_input::Builder {
        crate::input::describe_trunk_interface_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrunkInterfaceAssociations {
    type Output = std::result::Result<
        crate::output::DescribeTrunkInterfaceAssociationsOutput,
        crate::error::DescribeTrunkInterfaceAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_trunk_interface_associations_error(response)
        } else {
            crate::operation_deser::parse_describe_trunk_interface_associations_response(response)
        }
    }
}

/// <p>Describes the specified attribute of the specified volume. You can specify only one
/// attribute at a time.</p>
/// <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVolumeAttribute {
    _private: (),
}
impl DescribeVolumeAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeVolumeAttributeInput`](crate::input::DescribeVolumeAttributeInput)
    pub fn builder() -> crate::input::describe_volume_attribute_input::Builder {
        crate::input::describe_volume_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVolumeAttribute {
    type Output = std::result::Result<
        crate::output::DescribeVolumeAttributeOutput,
        crate::error::DescribeVolumeAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_volume_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_volume_attribute_response(response)
        }
    }
}

/// <p>Describes the specified EBS volumes or all of your EBS volumes.</p>
/// <p>If you are describing a long list of volumes, we recommend that you paginate the output to make the list
/// more manageable. The <code>MaxResults</code> parameter sets the maximum number of results
/// returned in a single page. If the list of results exceeds your <code>MaxResults</code> value,
/// then that number of results is returned along with a <code>NextToken</code> value that can be
/// passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining
/// results.</p>
/// <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVolumes {
    _private: (),
}
impl DescribeVolumes {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesInput`](crate::input::DescribeVolumesInput)
    pub fn builder() -> crate::input::describe_volumes_input::Builder {
        crate::input::describe_volumes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVolumes {
    type Output = std::result::Result<
        crate::output::DescribeVolumesOutput,
        crate::error::DescribeVolumesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_volumes_error(response)
        } else {
            crate::operation_deser::parse_describe_volumes_response(response)
        }
    }
}

/// <p>Describes the most recent volume modification request for the specified EBS volumes.</p>
/// <p>If a volume has never been modified, some information in the output will be null.
/// If a volume has been modified more than once, the output includes only the most
/// recent modification request.</p>
/// <p>You can also use CloudWatch Events to check the status of a modification to an EBS
/// volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVolumesModifications {
    _private: (),
}
impl DescribeVolumesModifications {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesModificationsInput`](crate::input::DescribeVolumesModificationsInput)
    pub fn builder() -> crate::input::describe_volumes_modifications_input::Builder {
        crate::input::describe_volumes_modifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVolumesModifications {
    type Output = std::result::Result<
        crate::output::DescribeVolumesModificationsOutput,
        crate::error::DescribeVolumesModificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_volumes_modifications_error(response)
        } else {
            crate::operation_deser::parse_describe_volumes_modifications_response(response)
        }
    }
}

/// <p>Describes the status of the specified volumes. Volume status provides the result of the
/// checks performed on your volumes to determine events that can impair the performance of your
/// volumes. The performance of a volume can be affected if an issue occurs on the volume's
/// underlying host. If the volume's underlying host experiences a power outage or system issue,
/// after the system is restored, there could be data inconsistencies on the volume. Volume events
/// notify you if this occurs. Volume actions notify you if any action needs to be taken in
/// response to the event.</p>
/// <p>The <code>DescribeVolumeStatus</code> operation provides the following information about
/// the specified volumes:</p>
/// <p>
/// <i>Status</i>: Reflects the current status of the volume. The possible
/// values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or
/// <code>insufficient-data</code>. If all checks pass, the overall status of the volume is
/// <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the
/// status is <code>insufficient-data</code>, then the checks might still be taking place on your
/// volume at the time. We recommend that you retry the request. For more information about volume
/// status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitor the status of your volumes</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>
/// <i>Events</i>: Reflect the cause of a volume status and might require you to
/// take action. For example, if your volume returns an <code>impaired</code> status, then the
/// volume event might be <code>potential-data-inconsistency</code>. This means that your volume
/// has been affected by an issue with the underlying host, has all I/O operations disabled, and
/// might have inconsistent data.</p>
/// <p>
/// <i>Actions</i>: Reflect the actions you might have to take in response to an
/// event. For example, if the status of the volume is <code>impaired</code> and the volume event
/// shows <code>potential-data-inconsistency</code>, then the action shows
/// <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for
/// the volume by calling the <a>EnableVolumeIO</a> action and then check the volume
/// for data consistency.</p>
/// <p>Volume status is based on the volume status checks, and does not reflect the volume state.
/// Therefore, volume status does not indicate volumes in the <code>error</code> state (for
/// example, when a volume is incapable of accepting I/O.)</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVolumeStatus {
    _private: (),
}
impl DescribeVolumeStatus {
    /// Creates a new builder-style object to manufacture [`DescribeVolumeStatusInput`](crate::input::DescribeVolumeStatusInput)
    pub fn builder() -> crate::input::describe_volume_status_input::Builder {
        crate::input::describe_volume_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVolumeStatus {
    type Output = std::result::Result<
        crate::output::DescribeVolumeStatusOutput,
        crate::error::DescribeVolumeStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_volume_status_error(response)
        } else {
            crate::operation_deser::parse_describe_volume_status_response(response)
        }
    }
}

/// <p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcAttribute {
    _private: (),
}
impl DescribeVpcAttribute {
    /// Creates a new builder-style object to manufacture [`DescribeVpcAttributeInput`](crate::input::DescribeVpcAttributeInput)
    pub fn builder() -> crate::input::describe_vpc_attribute_input::Builder {
        crate::input::describe_vpc_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcAttribute {
    type Output = std::result::Result<
        crate::output::DescribeVpcAttributeOutput,
        crate::error::DescribeVpcAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_attribute_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_attribute_response(response)
        }
    }
}

/// <p>Describes the ClassicLink status of one or more VPCs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcClassicLink {
    _private: (),
}
impl DescribeVpcClassicLink {
    /// Creates a new builder-style object to manufacture [`DescribeVpcClassicLinkInput`](crate::input::DescribeVpcClassicLinkInput)
    pub fn builder() -> crate::input::describe_vpc_classic_link_input::Builder {
        crate::input::describe_vpc_classic_link_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcClassicLink {
    type Output = std::result::Result<
        crate::output::DescribeVpcClassicLinkOutput,
        crate::error::DescribeVpcClassicLinkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_classic_link_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_classic_link_response(response)
        }
    }
}

/// <p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS
/// hostname of a linked EC2-Classic instance resolves to its private IP address when
/// addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
/// of an instance in a VPC resolves to its private IP address when addressed from a linked
/// EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcClassicLinkDnsSupport {
    _private: (),
}
impl DescribeVpcClassicLinkDnsSupport {
    /// Creates a new builder-style object to manufacture [`DescribeVpcClassicLinkDnsSupportInput`](crate::input::DescribeVpcClassicLinkDnsSupportInput)
    pub fn builder() -> crate::input::describe_vpc_classic_link_dns_support_input::Builder {
        crate::input::describe_vpc_classic_link_dns_support_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcClassicLinkDnsSupport {
    type Output = std::result::Result<
        crate::output::DescribeVpcClassicLinkDnsSupportOutput,
        crate::error::DescribeVpcClassicLinkDnsSupportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_classic_link_dns_support_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_classic_link_dns_support_response(response)
        }
    }
}

/// <p>Describes the connection notifications for VPC endpoints and VPC endpoint
/// services.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcEndpointConnectionNotifications {
    _private: (),
}
impl DescribeVpcEndpointConnectionNotifications {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointConnectionNotificationsInput`](crate::input::DescribeVpcEndpointConnectionNotificationsInput)
    pub fn builder() -> crate::input::describe_vpc_endpoint_connection_notifications_input::Builder
    {
        crate::input::describe_vpc_endpoint_connection_notifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcEndpointConnectionNotifications {
    type Output = std::result::Result<
        crate::output::DescribeVpcEndpointConnectionNotificationsOutput,
        crate::error::DescribeVpcEndpointConnectionNotificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_endpoint_connection_notifications_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_vpc_endpoint_connection_notifications_response(
                response,
            )
        }
    }
}

/// <p>Describes the VPC endpoint connections to your VPC endpoint services, including any
/// endpoints that are pending your acceptance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcEndpointConnections {
    _private: (),
}
impl DescribeVpcEndpointConnections {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointConnectionsInput`](crate::input::DescribeVpcEndpointConnectionsInput)
    pub fn builder() -> crate::input::describe_vpc_endpoint_connections_input::Builder {
        crate::input::describe_vpc_endpoint_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcEndpointConnections {
    type Output = std::result::Result<
        crate::output::DescribeVpcEndpointConnectionsOutput,
        crate::error::DescribeVpcEndpointConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_endpoint_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_endpoint_connections_response(response)
        }
    }
}

/// <p>Describes one or more of your VPC endpoints.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcEndpoints {
    _private: (),
}
impl DescribeVpcEndpoints {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointsInput`](crate::input::DescribeVpcEndpointsInput)
    pub fn builder() -> crate::input::describe_vpc_endpoints_input::Builder {
        crate::input::describe_vpc_endpoints_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcEndpoints {
    type Output = std::result::Result<
        crate::output::DescribeVpcEndpointsOutput,
        crate::error::DescribeVpcEndpointsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_endpoints_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_endpoints_response(response)
        }
    }
}

/// <p>Describes the VPC endpoint service configurations in your account (your services).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcEndpointServiceConfigurations {
    _private: (),
}
impl DescribeVpcEndpointServiceConfigurations {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServiceConfigurationsInput`](crate::input::DescribeVpcEndpointServiceConfigurationsInput)
    pub fn builder() -> crate::input::describe_vpc_endpoint_service_configurations_input::Builder {
        crate::input::describe_vpc_endpoint_service_configurations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcEndpointServiceConfigurations {
    type Output = std::result::Result<
        crate::output::DescribeVpcEndpointServiceConfigurationsOutput,
        crate::error::DescribeVpcEndpointServiceConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_endpoint_service_configurations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_vpc_endpoint_service_configurations_response(
                response,
            )
        }
    }
}

/// <p>Describes the principals (service consumers) that are permitted to discover your VPC
/// endpoint service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcEndpointServicePermissions {
    _private: (),
}
impl DescribeVpcEndpointServicePermissions {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServicePermissionsInput`](crate::input::DescribeVpcEndpointServicePermissionsInput)
    pub fn builder() -> crate::input::describe_vpc_endpoint_service_permissions_input::Builder {
        crate::input::describe_vpc_endpoint_service_permissions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcEndpointServicePermissions {
    type Output = std::result::Result<
        crate::output::DescribeVpcEndpointServicePermissionsOutput,
        crate::error::DescribeVpcEndpointServicePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_endpoint_service_permissions_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_endpoint_service_permissions_response(
                response,
            )
        }
    }
}

/// <p>Describes available services to which you can create a VPC endpoint.</p>
/// <p>When the service provider and the consumer have different accounts in multiple
/// Availability Zones, and the consumer views the VPC endpoint service information, the
/// response only includes the common Availability Zones. For example, when the service
/// provider account uses <code>us-east-1a</code> and <code>us-east-1c</code> and the
/// consumer uses <code>us-east-1a</code> and <code>us-east-1b</code>, the response includes
/// the VPC endpoint services in the common Availability Zone,
/// <code>us-east-1a</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcEndpointServices {
    _private: (),
}
impl DescribeVpcEndpointServices {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServicesInput`](crate::input::DescribeVpcEndpointServicesInput)
    pub fn builder() -> crate::input::describe_vpc_endpoint_services_input::Builder {
        crate::input::describe_vpc_endpoint_services_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcEndpointServices {
    type Output = std::result::Result<
        crate::output::DescribeVpcEndpointServicesOutput,
        crate::error::DescribeVpcEndpointServicesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_endpoint_services_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_endpoint_services_response(response)
        }
    }
}

/// <p>Describes one or more of your VPC peering connections.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcPeeringConnections {
    _private: (),
}
impl DescribeVpcPeeringConnections {
    /// Creates a new builder-style object to manufacture [`DescribeVpcPeeringConnectionsInput`](crate::input::DescribeVpcPeeringConnectionsInput)
    pub fn builder() -> crate::input::describe_vpc_peering_connections_input::Builder {
        crate::input::describe_vpc_peering_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcPeeringConnections {
    type Output = std::result::Result<
        crate::output::DescribeVpcPeeringConnectionsOutput,
        crate::error::DescribeVpcPeeringConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpc_peering_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_vpc_peering_connections_response(response)
        }
    }
}

/// <p>Describes one or more of your VPCs.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpcs {
    _private: (),
}
impl DescribeVpcs {
    /// Creates a new builder-style object to manufacture [`DescribeVpcsInput`](crate::input::DescribeVpcsInput)
    pub fn builder() -> crate::input::describe_vpcs_input::Builder {
        crate::input::describe_vpcs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpcs {
    type Output =
        std::result::Result<crate::output::DescribeVpcsOutput, crate::error::DescribeVpcsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpcs_error(response)
        } else {
            crate::operation_deser::parse_describe_vpcs_response(response)
        }
    }
}

/// <p>Describes one or more of your VPN connections.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpnConnections {
    _private: (),
}
impl DescribeVpnConnections {
    /// Creates a new builder-style object to manufacture [`DescribeVpnConnectionsInput`](crate::input::DescribeVpnConnectionsInput)
    pub fn builder() -> crate::input::describe_vpn_connections_input::Builder {
        crate::input::describe_vpn_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpnConnections {
    type Output = std::result::Result<
        crate::output::DescribeVpnConnectionsOutput,
        crate::error::DescribeVpnConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpn_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_vpn_connections_response(response)
        }
    }
}

/// <p>Describes one or more of your virtual private gateways.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVpnGateways {
    _private: (),
}
impl DescribeVpnGateways {
    /// Creates a new builder-style object to manufacture [`DescribeVpnGatewaysInput`](crate::input::DescribeVpnGatewaysInput)
    pub fn builder() -> crate::input::describe_vpn_gateways_input::Builder {
        crate::input::describe_vpn_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVpnGateways {
    type Output = std::result::Result<
        crate::output::DescribeVpnGatewaysOutput,
        crate::error::DescribeVpnGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vpn_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_vpn_gateways_response(response)
        }
    }
}

/// <p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachClassicLinkVpc {
    _private: (),
}
impl DetachClassicLinkVpc {
    /// Creates a new builder-style object to manufacture [`DetachClassicLinkVpcInput`](crate::input::DetachClassicLinkVpcInput)
    pub fn builder() -> crate::input::detach_classic_link_vpc_input::Builder {
        crate::input::detach_classic_link_vpc_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachClassicLinkVpc {
    type Output = std::result::Result<
        crate::output::DetachClassicLinkVpcOutput,
        crate::error::DetachClassicLinkVpcError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_classic_link_vpc_error(response)
        } else {
            crate::operation_deser::parse_detach_classic_link_vpc_response(response)
        }
    }
}

/// <p>Detaches an internet gateway from a VPC, disabling connectivity between the internet
/// and the VPC. The VPC must not contain any running instances with Elastic IP addresses or
/// public IPv4 addresses.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachInternetGateway {
    _private: (),
}
impl DetachInternetGateway {
    /// Creates a new builder-style object to manufacture [`DetachInternetGatewayInput`](crate::input::DetachInternetGatewayInput)
    pub fn builder() -> crate::input::detach_internet_gateway_input::Builder {
        crate::input::detach_internet_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachInternetGateway {
    type Output = std::result::Result<
        crate::output::DetachInternetGatewayOutput,
        crate::error::DetachInternetGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_internet_gateway_error(response)
        } else {
            crate::operation_deser::parse_detach_internet_gateway_response(response)
        }
    }
}

/// <p>Detaches a network interface from an instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachNetworkInterface {
    _private: (),
}
impl DetachNetworkInterface {
    /// Creates a new builder-style object to manufacture [`DetachNetworkInterfaceInput`](crate::input::DetachNetworkInterfaceInput)
    pub fn builder() -> crate::input::detach_network_interface_input::Builder {
        crate::input::detach_network_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachNetworkInterface {
    type Output = std::result::Result<
        crate::output::DetachNetworkInterfaceOutput,
        crate::error::DetachNetworkInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_network_interface_error(response)
        } else {
            crate::operation_deser::parse_detach_network_interface_response(response)
        }
    }
}

/// <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the
/// device within your operating system before detaching the volume. Failure to do so can result
/// in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens,
/// detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot
/// the instance, or all three. If an EBS volume is the root device of an instance, it can't be
/// detached while the instance is running. To detach the root volume, stop the instance
/// first.</p>
/// <p>When a volume with an Amazon Web Services Marketplace product code is detached from an instance, the
/// product code is no longer associated with the instance.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detach an Amazon EBS volume</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachVolume {
    _private: (),
}
impl DetachVolume {
    /// Creates a new builder-style object to manufacture [`DetachVolumeInput`](crate::input::DetachVolumeInput)
    pub fn builder() -> crate::input::detach_volume_input::Builder {
        crate::input::detach_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachVolume {
    type Output =
        std::result::Result<crate::output::DetachVolumeOutput, crate::error::DetachVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_volume_error(response)
        } else {
            crate::operation_deser::parse_detach_volume_response(response)
        }
    }
}

/// <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p>
/// <p>You must wait for the attachment's state to switch to <code>detached</code> before
/// you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetachVpnGateway {
    _private: (),
}
impl DetachVpnGateway {
    /// Creates a new builder-style object to manufacture [`DetachVpnGatewayInput`](crate::input::DetachVpnGatewayInput)
    pub fn builder() -> crate::input::detach_vpn_gateway_input::Builder {
        crate::input::detach_vpn_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetachVpnGateway {
    type Output = std::result::Result<
        crate::output::DetachVpnGatewayOutput,
        crate::error::DetachVpnGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detach_vpn_gateway_error(response)
        } else {
            crate::operation_deser::parse_detach_vpn_gateway_response(response)
        }
    }
}

/// <p>Disables EBS encryption by default for your account in the current Region.</p>
/// <p>After you disable encryption by default, you can still create encrypted volumes by
/// enabling encryption when you create each volume.</p>
/// <p>Disabling encryption by default does not change the encryption status of your
/// existing volumes.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableEbsEncryptionByDefault {
    _private: (),
}
impl DisableEbsEncryptionByDefault {
    /// Creates a new builder-style object to manufacture [`DisableEbsEncryptionByDefaultInput`](crate::input::DisableEbsEncryptionByDefaultInput)
    pub fn builder() -> crate::input::disable_ebs_encryption_by_default_input::Builder {
        crate::input::disable_ebs_encryption_by_default_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableEbsEncryptionByDefault {
    type Output = std::result::Result<
        crate::output::DisableEbsEncryptionByDefaultOutput,
        crate::error::DisableEbsEncryptionByDefaultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_ebs_encryption_by_default_error(response)
        } else {
            crate::operation_deser::parse_disable_ebs_encryption_by_default_response(response)
        }
    }
}

/// <p>Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableFastSnapshotRestores {
    _private: (),
}
impl DisableFastSnapshotRestores {
    /// Creates a new builder-style object to manufacture [`DisableFastSnapshotRestoresInput`](crate::input::DisableFastSnapshotRestoresInput)
    pub fn builder() -> crate::input::disable_fast_snapshot_restores_input::Builder {
        crate::input::disable_fast_snapshot_restores_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableFastSnapshotRestores {
    type Output = std::result::Result<
        crate::output::DisableFastSnapshotRestoresOutput,
        crate::error::DisableFastSnapshotRestoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_fast_snapshot_restores_error(response)
        } else {
            crate::operation_deser::parse_disable_fast_snapshot_restores_response(response)
        }
    }
}

/// <p>Cancels the deprecation of the specified AMI.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableImageDeprecation {
    _private: (),
}
impl DisableImageDeprecation {
    /// Creates a new builder-style object to manufacture [`DisableImageDeprecationInput`](crate::input::DisableImageDeprecationInput)
    pub fn builder() -> crate::input::disable_image_deprecation_input::Builder {
        crate::input::disable_image_deprecation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableImageDeprecation {
    type Output = std::result::Result<
        crate::output::DisableImageDeprecationOutput,
        crate::error::DisableImageDeprecationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_image_deprecation_error(response)
        } else {
            crate::operation_deser::parse_disable_image_deprecation_response(response)
        }
    }
}

/// <p>Disables access to the EC2 serial console of all instances for your account. By default,
/// access to the EC2 serial console is disabled for your account. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2
/// User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableSerialConsoleAccess {
    _private: (),
}
impl DisableSerialConsoleAccess {
    /// Creates a new builder-style object to manufacture [`DisableSerialConsoleAccessInput`](crate::input::DisableSerialConsoleAccessInput)
    pub fn builder() -> crate::input::disable_serial_console_access_input::Builder {
        crate::input::disable_serial_console_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableSerialConsoleAccess {
    type Output = std::result::Result<
        crate::output::DisableSerialConsoleAccessOutput,
        crate::error::DisableSerialConsoleAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_serial_console_access_error(response)
        } else {
            crate::operation_deser::parse_disable_serial_console_access_response(response)
        }
    }
}

/// <p>Disables the specified resource attachment from propagating routes to the specified
/// propagation route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableTransitGatewayRouteTablePropagation {
    _private: (),
}
impl DisableTransitGatewayRouteTablePropagation {
    /// Creates a new builder-style object to manufacture [`DisableTransitGatewayRouteTablePropagationInput`](crate::input::DisableTransitGatewayRouteTablePropagationInput)
    pub fn builder() -> crate::input::disable_transit_gateway_route_table_propagation_input::Builder
    {
        crate::input::disable_transit_gateway_route_table_propagation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableTransitGatewayRouteTablePropagation {
    type Output = std::result::Result<
        crate::output::DisableTransitGatewayRouteTablePropagationOutput,
        crate::error::DisableTransitGatewayRouteTablePropagationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_transit_gateway_route_table_propagation_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disable_transit_gateway_route_table_propagation_response(
                response,
            )
        }
    }
}

/// <p>Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableVgwRoutePropagation {
    _private: (),
}
impl DisableVgwRoutePropagation {
    /// Creates a new builder-style object to manufacture [`DisableVgwRoutePropagationInput`](crate::input::DisableVgwRoutePropagationInput)
    pub fn builder() -> crate::input::disable_vgw_route_propagation_input::Builder {
        crate::input::disable_vgw_route_propagation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableVgwRoutePropagation {
    type Output = std::result::Result<
        crate::output::DisableVgwRoutePropagationOutput,
        crate::error::DisableVgwRoutePropagationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_vgw_route_propagation_error(response)
        } else {
            crate::operation_deser::parse_disable_vgw_route_propagation_response(response)
        }
    }
}

/// <p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableVpcClassicLink {
    _private: (),
}
impl DisableVpcClassicLink {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkInput`](crate::input::DisableVpcClassicLinkInput)
    pub fn builder() -> crate::input::disable_vpc_classic_link_input::Builder {
        crate::input::disable_vpc_classic_link_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableVpcClassicLink {
    type Output = std::result::Result<
        crate::output::DisableVpcClassicLinkOutput,
        crate::error::DisableVpcClassicLinkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_vpc_classic_link_error(response)
        } else {
            crate::operation_deser::parse_disable_vpc_classic_link_response(response)
        }
    }
}

/// <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to
/// public IP addresses when addressed between a linked EC2-Classic instance and instances
/// in the VPC to which it's linked. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>You must specify a VPC ID in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableVpcClassicLinkDnsSupport {
    _private: (),
}
impl DisableVpcClassicLinkDnsSupport {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkDnsSupportInput`](crate::input::DisableVpcClassicLinkDnsSupportInput)
    pub fn builder() -> crate::input::disable_vpc_classic_link_dns_support_input::Builder {
        crate::input::disable_vpc_classic_link_dns_support_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableVpcClassicLinkDnsSupport {
    type Output = std::result::Result<
        crate::output::DisableVpcClassicLinkDnsSupportOutput,
        crate::error::DisableVpcClassicLinkDnsSupportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_vpc_classic_link_dns_support_error(response)
        } else {
            crate::operation_deser::parse_disable_vpc_classic_link_dns_support_response(response)
        }
    }
}

/// <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p>
/// <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more
/// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP
/// Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateAddress {
    _private: (),
}
impl DisassociateAddress {
    /// Creates a new builder-style object to manufacture [`DisassociateAddressInput`](crate::input::DisassociateAddressInput)
    pub fn builder() -> crate::input::disassociate_address_input::Builder {
        crate::input::disassociate_address_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateAddress {
    type Output = std::result::Result<
        crate::output::DisassociateAddressOutput,
        crate::error::DisassociateAddressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_address_error(response)
        } else {
            crate::operation_deser::parse_disassociate_address_response(response)
        }
    }
}

/// <p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the
/// last target network from a Client VPN, the following happens:</p>
/// <ul>
/// <li>
/// <p>The route that was automatically added for the VPC is deleted</p>
/// </li>
/// <li>
/// <p>All active client connections are terminated</p>
/// </li>
/// <li>
/// <p>New client connections are disallowed</p>
/// </li>
/// <li>
/// <p>The Client VPN endpoint's status changes to <code>pending-associate</code>
/// </p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateClientVpnTargetNetwork {
    _private: (),
}
impl DisassociateClientVpnTargetNetwork {
    /// Creates a new builder-style object to manufacture [`DisassociateClientVpnTargetNetworkInput`](crate::input::DisassociateClientVpnTargetNetworkInput)
    pub fn builder() -> crate::input::disassociate_client_vpn_target_network_input::Builder {
        crate::input::disassociate_client_vpn_target_network_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateClientVpnTargetNetwork {
    type Output = std::result::Result<
        crate::output::DisassociateClientVpnTargetNetworkOutput,
        crate::error::DisassociateClientVpnTargetNetworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_client_vpn_target_network_error(response)
        } else {
            crate::operation_deser::parse_disassociate_client_vpn_target_network_response(response)
        }
    }
}

/// <p>Disassociates an IAM role from an Certificate Manager (ACM) certificate. Disassociating an IAM role
/// from an ACM certificate removes the Amazon S3 object that contains the certificate, certificate chain, and
/// encrypted private key from the Amazon S3 bucket. It also revokes the IAM role's permission to use the
/// KMS key used to encrypt the private key. This effectively revokes the role's permission
/// to use the certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateEnclaveCertificateIamRole {
    _private: (),
}
impl DisassociateEnclaveCertificateIamRole {
    /// Creates a new builder-style object to manufacture [`DisassociateEnclaveCertificateIamRoleInput`](crate::input::DisassociateEnclaveCertificateIamRoleInput)
    pub fn builder() -> crate::input::disassociate_enclave_certificate_iam_role_input::Builder {
        crate::input::disassociate_enclave_certificate_iam_role_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateEnclaveCertificateIamRole {
    type Output = std::result::Result<
        crate::output::DisassociateEnclaveCertificateIamRoleOutput,
        crate::error::DisassociateEnclaveCertificateIamRoleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_enclave_certificate_iam_role_error(response)
        } else {
            crate::operation_deser::parse_disassociate_enclave_certificate_iam_role_response(
                response,
            )
        }
    }
}

/// <p>Disassociates an IAM instance profile from a running or stopped instance.</p>
/// <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
/// ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateIamInstanceProfile {
    _private: (),
}
impl DisassociateIamInstanceProfile {
    /// Creates a new builder-style object to manufacture [`DisassociateIamInstanceProfileInput`](crate::input::DisassociateIamInstanceProfileInput)
    pub fn builder() -> crate::input::disassociate_iam_instance_profile_input::Builder {
        crate::input::disassociate_iam_instance_profile_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateIamInstanceProfile {
    type Output = std::result::Result<
        crate::output::DisassociateIamInstanceProfileOutput,
        crate::error::DisassociateIamInstanceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_iam_instance_profile_error(response)
        } else {
            crate::operation_deser::parse_disassociate_iam_instance_profile_response(response)
        }
    }
}

/// <p>Disassociates one or more targets from an event window.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
/// events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateInstanceEventWindow {
    _private: (),
}
impl DisassociateInstanceEventWindow {
    /// Creates a new builder-style object to manufacture [`DisassociateInstanceEventWindowInput`](crate::input::DisassociateInstanceEventWindowInput)
    pub fn builder() -> crate::input::disassociate_instance_event_window_input::Builder {
        crate::input::disassociate_instance_event_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateInstanceEventWindow {
    type Output = std::result::Result<
        crate::output::DisassociateInstanceEventWindowOutput,
        crate::error::DisassociateInstanceEventWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_instance_event_window_error(response)
        } else {
            crate::operation_deser::parse_disassociate_instance_event_window_response(response)
        }
    }
}

/// <p>Disassociates a subnet or gateway from a route table.</p>
/// <p>After you perform this action, the subnet no longer uses the routes in the route table.
/// Instead, it uses the routes in the VPC's main route table. For more information
/// about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
/// tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateRouteTable {
    _private: (),
}
impl DisassociateRouteTable {
    /// Creates a new builder-style object to manufacture [`DisassociateRouteTableInput`](crate::input::DisassociateRouteTableInput)
    pub fn builder() -> crate::input::disassociate_route_table_input::Builder {
        crate::input::disassociate_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateRouteTable {
    type Output = std::result::Result<
        crate::output::DisassociateRouteTableOutput,
        crate::error::DisassociateRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_route_table_error(response)
        } else {
            crate::operation_deser::parse_disassociate_route_table_response(response)
        }
    }
}

/// <p>Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateSubnetCidrBlock {
    _private: (),
}
impl DisassociateSubnetCidrBlock {
    /// Creates a new builder-style object to manufacture [`DisassociateSubnetCidrBlockInput`](crate::input::DisassociateSubnetCidrBlockInput)
    pub fn builder() -> crate::input::disassociate_subnet_cidr_block_input::Builder {
        crate::input::disassociate_subnet_cidr_block_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateSubnetCidrBlock {
    type Output = std::result::Result<
        crate::output::DisassociateSubnetCidrBlockOutput,
        crate::error::DisassociateSubnetCidrBlockError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_subnet_cidr_block_error(response)
        } else {
            crate::operation_deser::parse_disassociate_subnet_cidr_block_response(response)
        }
    }
}

/// <p>Disassociates the specified subnets from the transit gateway multicast domain. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTransitGatewayMulticastDomain {
    _private: (),
}
impl DisassociateTransitGatewayMulticastDomain {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayMulticastDomainInput`](crate::input::DisassociateTransitGatewayMulticastDomainInput)
    pub fn builder() -> crate::input::disassociate_transit_gateway_multicast_domain_input::Builder {
        crate::input::disassociate_transit_gateway_multicast_domain_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateTransitGatewayMulticastDomain {
    type Output = std::result::Result<
        crate::output::DisassociateTransitGatewayMulticastDomainOutput,
        crate::error::DisassociateTransitGatewayMulticastDomainError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_transit_gateway_multicast_domain_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_transit_gateway_multicast_domain_response(
                response,
            )
        }
    }
}

/// <p>Disassociates a resource attachment from a transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTransitGatewayRouteTable {
    _private: (),
}
impl DisassociateTransitGatewayRouteTable {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayRouteTableInput`](crate::input::DisassociateTransitGatewayRouteTableInput)
    pub fn builder() -> crate::input::disassociate_transit_gateway_route_table_input::Builder {
        crate::input::disassociate_transit_gateway_route_table_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateTransitGatewayRouteTable {
    type Output = std::result::Result<
        crate::output::DisassociateTransitGatewayRouteTableOutput,
        crate::error::DisassociateTransitGatewayRouteTableError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_transit_gateway_route_table_error(response)
        } else {
            crate::operation_deser::parse_disassociate_transit_gateway_route_table_response(
                response,
            )
        }
    }
}

/// <note>
/// <p>This API action is currently in <b>limited preview only</b>.
/// If you are interested in using this feature, contact your account manager.</p>
/// </note>
/// <p>Removes an association between a branch network interface with a trunk network interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateTrunkInterface {
    _private: (),
}
impl DisassociateTrunkInterface {
    /// Creates a new builder-style object to manufacture [`DisassociateTrunkInterfaceInput`](crate::input::DisassociateTrunkInterfaceInput)
    pub fn builder() -> crate::input::disassociate_trunk_interface_input::Builder {
        crate::input::disassociate_trunk_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateTrunkInterface {
    type Output = std::result::Result<
        crate::output::DisassociateTrunkInterfaceOutput,
        crate::error::DisassociateTrunkInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_trunk_interface_error(response)
        } else {
            crate::operation_deser::parse_disassociate_trunk_interface_response(response)
        }
    }
}

/// <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must
/// specify its association ID. You can get the association ID by using
/// <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that
/// are associated with the CIDR block before you can disassociate it. </p>
/// <p>You cannot disassociate the CIDR block with which you originally created the VPC (the
/// primary CIDR block).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateVpcCidrBlock {
    _private: (),
}
impl DisassociateVpcCidrBlock {
    /// Creates a new builder-style object to manufacture [`DisassociateVpcCidrBlockInput`](crate::input::DisassociateVpcCidrBlockInput)
    pub fn builder() -> crate::input::disassociate_vpc_cidr_block_input::Builder {
        crate::input::disassociate_vpc_cidr_block_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateVpcCidrBlock {
    type Output = std::result::Result<
        crate::output::DisassociateVpcCidrBlockOutput,
        crate::error::DisassociateVpcCidrBlockError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_vpc_cidr_block_error(response)
        } else {
            crate::operation_deser::parse_disassociate_vpc_cidr_block_response(response)
        }
    }
}

/// <p>Enables EBS encryption by default for your account in the current Region.</p>
/// <p>After you enable encryption by default, the EBS volumes that you create are
/// always encrypted, either using the default KMS key or the KMS key that you specified
/// when you created each volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>You can specify the default KMS key for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a>
/// or <a>ResetEbsDefaultKmsKeyId</a>.</p>
/// <p>Enabling encryption by default has no effect on the encryption status of your
/// existing volumes.</p>
/// <p>After you enable encryption by default, you can no longer launch instances
/// using instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported
/// instance types</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableEbsEncryptionByDefault {
    _private: (),
}
impl EnableEbsEncryptionByDefault {
    /// Creates a new builder-style object to manufacture [`EnableEbsEncryptionByDefaultInput`](crate::input::EnableEbsEncryptionByDefaultInput)
    pub fn builder() -> crate::input::enable_ebs_encryption_by_default_input::Builder {
        crate::input::enable_ebs_encryption_by_default_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableEbsEncryptionByDefault {
    type Output = std::result::Result<
        crate::output::EnableEbsEncryptionByDefaultOutput,
        crate::error::EnableEbsEncryptionByDefaultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_ebs_encryption_by_default_error(response)
        } else {
            crate::operation_deser::parse_enable_ebs_encryption_by_default_response(response)
        }
    }
}

/// <p>Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
/// <p>You get the full benefit of fast snapshot restores after they enter the <code>enabled</code> state.
/// To get the current state of fast snapshot restores, use <a>DescribeFastSnapshotRestores</a>.
/// To disable fast snapshot restores, use <a>DisableFastSnapshotRestores</a>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-fast-snapshot-restore.html">Amazon EBS fast snapshot
/// restore</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableFastSnapshotRestores {
    _private: (),
}
impl EnableFastSnapshotRestores {
    /// Creates a new builder-style object to manufacture [`EnableFastSnapshotRestoresInput`](crate::input::EnableFastSnapshotRestoresInput)
    pub fn builder() -> crate::input::enable_fast_snapshot_restores_input::Builder {
        crate::input::enable_fast_snapshot_restores_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableFastSnapshotRestores {
    type Output = std::result::Result<
        crate::output::EnableFastSnapshotRestoresOutput,
        crate::error::EnableFastSnapshotRestoresError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_fast_snapshot_restores_error(response)
        } else {
            crate::operation_deser::parse_enable_fast_snapshot_restores_response(response)
        }
    }
}

/// <p>Enables deprecation of the specified AMI at the specified date and time.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableImageDeprecation {
    _private: (),
}
impl EnableImageDeprecation {
    /// Creates a new builder-style object to manufacture [`EnableImageDeprecationInput`](crate::input::EnableImageDeprecationInput)
    pub fn builder() -> crate::input::enable_image_deprecation_input::Builder {
        crate::input::enable_image_deprecation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableImageDeprecation {
    type Output = std::result::Result<
        crate::output::EnableImageDeprecationOutput,
        crate::error::EnableImageDeprecationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_image_deprecation_error(response)
        } else {
            crate::operation_deser::parse_enable_image_deprecation_response(response)
        }
    }
}

/// <p>Enables access to the EC2 serial console of all instances for your account. By default,
/// access to the EC2 serial console is disabled for your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableSerialConsoleAccess {
    _private: (),
}
impl EnableSerialConsoleAccess {
    /// Creates a new builder-style object to manufacture [`EnableSerialConsoleAccessInput`](crate::input::EnableSerialConsoleAccessInput)
    pub fn builder() -> crate::input::enable_serial_console_access_input::Builder {
        crate::input::enable_serial_console_access_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableSerialConsoleAccess {
    type Output = std::result::Result<
        crate::output::EnableSerialConsoleAccessOutput,
        crate::error::EnableSerialConsoleAccessError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_serial_console_access_error(response)
        } else {
            crate::operation_deser::parse_enable_serial_console_access_response(response)
        }
    }
}

/// <p>Enables the specified attachment to propagate routes to the specified
/// propagation route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableTransitGatewayRouteTablePropagation {
    _private: (),
}
impl EnableTransitGatewayRouteTablePropagation {
    /// Creates a new builder-style object to manufacture [`EnableTransitGatewayRouteTablePropagationInput`](crate::input::EnableTransitGatewayRouteTablePropagationInput)
    pub fn builder() -> crate::input::enable_transit_gateway_route_table_propagation_input::Builder
    {
        crate::input::enable_transit_gateway_route_table_propagation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableTransitGatewayRouteTablePropagation {
    type Output = std::result::Result<
        crate::output::EnableTransitGatewayRouteTablePropagationOutput,
        crate::error::EnableTransitGatewayRouteTablePropagationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_transit_gateway_route_table_propagation_error(
                response,
            )
        } else {
            crate::operation_deser::parse_enable_transit_gateway_route_table_propagation_response(
                response,
            )
        }
    }
}

/// <p>Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableVgwRoutePropagation {
    _private: (),
}
impl EnableVgwRoutePropagation {
    /// Creates a new builder-style object to manufacture [`EnableVgwRoutePropagationInput`](crate::input::EnableVgwRoutePropagationInput)
    pub fn builder() -> crate::input::enable_vgw_route_propagation_input::Builder {
        crate::input::enable_vgw_route_propagation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableVgwRoutePropagation {
    type Output = std::result::Result<
        crate::output::EnableVgwRoutePropagationOutput,
        crate::error::EnableVgwRoutePropagationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_vgw_route_propagation_error(response)
        } else {
            crate::operation_deser::parse_enable_vgw_route_propagation_response(response)
        }
    }
}

/// <p>Enables I/O operations for a volume that had I/O operations disabled because the data on
/// the volume was potentially inconsistent.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableVolumeIO {
    _private: (),
}
impl EnableVolumeIO {
    /// Creates a new builder-style object to manufacture [`EnableVolumeIoInput`](crate::input::EnableVolumeIoInput)
    pub fn builder() -> crate::input::enable_volume_io_input::Builder {
        crate::input::enable_volume_io_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableVolumeIO {
    type Output =
        std::result::Result<crate::output::EnableVolumeIoOutput, crate::error::EnableVolumeIOError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_volume_io_error(response)
        } else {
            crate::operation_deser::parse_enable_volume_io_response(response)
        }
    }
}

/// <p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your
/// ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot
/// enable your VPC for ClassicLink if any of your VPC route tables have existing routes for
/// address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local
/// routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address
/// ranges. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableVpcClassicLink {
    _private: (),
}
impl EnableVpcClassicLink {
    /// Creates a new builder-style object to manufacture [`EnableVpcClassicLinkInput`](crate::input::EnableVpcClassicLinkInput)
    pub fn builder() -> crate::input::enable_vpc_classic_link_input::Builder {
        crate::input::enable_vpc_classic_link_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableVpcClassicLink {
    type Output = std::result::Result<
        crate::output::EnableVpcClassicLinkOutput,
        crate::error::EnableVpcClassicLinkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_vpc_classic_link_error(response)
        } else {
            crate::operation_deser::parse_enable_vpc_classic_link_response(response)
        }
    }
}

/// <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS
/// hostname of a linked EC2-Classic instance resolves to its private IP address when
/// addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
/// of an instance in a VPC resolves to its private IP address when addressed from a linked
/// EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>You must specify a VPC ID in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableVpcClassicLinkDnsSupport {
    _private: (),
}
impl EnableVpcClassicLinkDnsSupport {
    /// Creates a new builder-style object to manufacture [`EnableVpcClassicLinkDnsSupportInput`](crate::input::EnableVpcClassicLinkDnsSupportInput)
    pub fn builder() -> crate::input::enable_vpc_classic_link_dns_support_input::Builder {
        crate::input::enable_vpc_classic_link_dns_support_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableVpcClassicLinkDnsSupport {
    type Output = std::result::Result<
        crate::output::EnableVpcClassicLinkDnsSupportOutput,
        crate::error::EnableVpcClassicLinkDnsSupportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_vpc_classic_link_dns_support_error(response)
        } else {
            crate::operation_deser::parse_enable_vpc_classic_link_dns_support_response(response)
        }
    }
}

/// <p>Downloads the client certificate revocation list for the specified Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportClientVpnClientCertificateRevocationList {
    _private: (),
}
impl ExportClientVpnClientCertificateRevocationList {
    /// Creates a new builder-style object to manufacture [`ExportClientVpnClientCertificateRevocationListInput`](crate::input::ExportClientVpnClientCertificateRevocationListInput)
    pub fn builder(
    ) -> crate::input::export_client_vpn_client_certificate_revocation_list_input::Builder {
        crate::input::export_client_vpn_client_certificate_revocation_list_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportClientVpnClientCertificateRevocationList {
    type Output = std::result::Result<
        crate::output::ExportClientVpnClientCertificateRevocationListOutput,
        crate::error::ExportClientVpnClientCertificateRevocationListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_client_vpn_client_certificate_revocation_list_error(
                response,
            )
        } else {
            crate::operation_deser::parse_export_client_vpn_client_certificate_revocation_list_response(response)
        }
    }
}

/// <p>Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration
/// file includes the Client VPN endpoint and certificate information clients need to establish a connection
/// with the Client VPN endpoint.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportClientVpnClientConfiguration {
    _private: (),
}
impl ExportClientVpnClientConfiguration {
    /// Creates a new builder-style object to manufacture [`ExportClientVpnClientConfigurationInput`](crate::input::ExportClientVpnClientConfigurationInput)
    pub fn builder() -> crate::input::export_client_vpn_client_configuration_input::Builder {
        crate::input::export_client_vpn_client_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportClientVpnClientConfiguration {
    type Output = std::result::Result<
        crate::output::ExportClientVpnClientConfigurationOutput,
        crate::error::ExportClientVpnClientConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_client_vpn_client_configuration_error(response)
        } else {
            crate::operation_deser::parse_export_client_vpn_client_configuration_response(response)
        }
    }
}

/// <p>Exports an Amazon Machine Image (AMI) to a VM file. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting a VM
/// directly from an Amazon Machine Image (AMI)</a> in the
/// <i>VM Import/Export User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportImage {
    _private: (),
}
impl ExportImage {
    /// Creates a new builder-style object to manufacture [`ExportImageInput`](crate::input::ExportImageInput)
    pub fn builder() -> crate::input::export_image_input::Builder {
        crate::input::export_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportImage {
    type Output =
        std::result::Result<crate::output::ExportImageOutput, crate::error::ExportImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_image_error(response)
        } else {
            crate::operation_deser::parse_export_image_response(response)
        }
    }
}

/// <p>Exports routes from the specified transit gateway route table to the specified S3 bucket.
/// By default, all routes are exported. Alternatively, you can filter by CIDR range.</p>
/// <p>The routes are saved to the specified bucket in a JSON file. For more information, see
/// <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export Route Tables
/// to Amazon S3</a> in <i>Transit Gateways</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportTransitGatewayRoutes {
    _private: (),
}
impl ExportTransitGatewayRoutes {
    /// Creates a new builder-style object to manufacture [`ExportTransitGatewayRoutesInput`](crate::input::ExportTransitGatewayRoutesInput)
    pub fn builder() -> crate::input::export_transit_gateway_routes_input::Builder {
        crate::input::export_transit_gateway_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ExportTransitGatewayRoutes {
    type Output = std::result::Result<
        crate::output::ExportTransitGatewayRoutesOutput,
        crate::error::ExportTransitGatewayRoutesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_transit_gateway_routes_error(response)
        } else {
            crate::operation_deser::parse_export_transit_gateway_routes_response(response)
        }
    }
}

/// <p>Returns the IAM roles that are associated with the specified ACM (ACM) certificate.
/// It also returns the name of the Amazon S3 bucket and the Amazon S3 object key where the certificate,
/// certificate chain, and encrypted private key bundle are stored, and the ARN of the KMS key
/// that's used to encrypt the private key.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssociatedEnclaveCertificateIamRoles {
    _private: (),
}
impl GetAssociatedEnclaveCertificateIamRoles {
    /// Creates a new builder-style object to manufacture [`GetAssociatedEnclaveCertificateIamRolesInput`](crate::input::GetAssociatedEnclaveCertificateIamRolesInput)
    pub fn builder() -> crate::input::get_associated_enclave_certificate_iam_roles_input::Builder {
        crate::input::get_associated_enclave_certificate_iam_roles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssociatedEnclaveCertificateIamRoles {
    type Output = std::result::Result<
        crate::output::GetAssociatedEnclaveCertificateIamRolesOutput,
        crate::error::GetAssociatedEnclaveCertificateIamRolesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_associated_enclave_certificate_iam_roles_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_associated_enclave_certificate_iam_roles_response(
                response,
            )
        }
    }
}

/// <p>Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssociatedIpv6PoolCidrs {
    _private: (),
}
impl GetAssociatedIpv6PoolCidrs {
    /// Creates a new builder-style object to manufacture [`GetAssociatedIpv6PoolCidrsInput`](crate::input::GetAssociatedIpv6PoolCidrsInput)
    pub fn builder() -> crate::input::get_associated_ipv6_pool_cidrs_input::Builder {
        crate::input::get_associated_ipv6_pool_cidrs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssociatedIpv6PoolCidrs {
    type Output = std::result::Result<
        crate::output::GetAssociatedIpv6PoolCidrsOutput,
        crate::error::GetAssociatedIpv6PoolCidrsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_associated_ipv6_pool_cidrs_error(response)
        } else {
            crate::operation_deser::parse_get_associated_ipv6_pool_cidrs_response(response)
        }
    }
}

/// <p>Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner
/// and each Amazon Web Services account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only
/// the Capacity Reservation owner's usage.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCapacityReservationUsage {
    _private: (),
}
impl GetCapacityReservationUsage {
    /// Creates a new builder-style object to manufacture [`GetCapacityReservationUsageInput`](crate::input::GetCapacityReservationUsageInput)
    pub fn builder() -> crate::input::get_capacity_reservation_usage_input::Builder {
        crate::input::get_capacity_reservation_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCapacityReservationUsage {
    type Output = std::result::Result<
        crate::output::GetCapacityReservationUsageOutput,
        crate::error::GetCapacityReservationUsageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_capacity_reservation_usage_error(response)
        } else {
            crate::operation_deser::parse_get_capacity_reservation_usage_response(response)
        }
    }
}

/// <p>Describes the allocations from the specified customer-owned address pool.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetCoipPoolUsage {
    _private: (),
}
impl GetCoipPoolUsage {
    /// Creates a new builder-style object to manufacture [`GetCoipPoolUsageInput`](crate::input::GetCoipPoolUsageInput)
    pub fn builder() -> crate::input::get_coip_pool_usage_input::Builder {
        crate::input::get_coip_pool_usage_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetCoipPoolUsage {
    type Output = std::result::Result<
        crate::output::GetCoipPoolUsageOutput,
        crate::error::GetCoipPoolUsageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_coip_pool_usage_error(response)
        } else {
            crate::operation_deser::parse_get_coip_pool_usage_response(response)
        }
    }
}

/// <p>Gets the console output for the specified instance. For Linux instances, the instance
/// console output displays the exact console output that would normally be displayed on a
/// physical monitor attached to a computer. For Windows instances, the instance console
/// output includes the last three system event log errors.</p>
/// <p>By default, the console output returns buffered information that was posted shortly
/// after an instance transition state (start, stop, reboot, or terminate). This information
/// is available for at least one hour after the most recent post. Only the most recent 64
/// KB of console output is available.</p>
/// <p>You can optionally retrieve the latest serial console output at any time during the
/// instance lifecycle. This option is supported on instance types that use the Nitro
/// hypervisor.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance
/// console output</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConsoleOutput {
    _private: (),
}
impl GetConsoleOutput {
    /// Creates a new builder-style object to manufacture [`GetConsoleOutputInput`](crate::input::GetConsoleOutputInput)
    pub fn builder() -> crate::input::get_console_output_input::Builder {
        crate::input::get_console_output_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConsoleOutput {
    type Output = std::result::Result<
        crate::output::GetConsoleOutputOutput,
        crate::error::GetConsoleOutputError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_console_output_error(response)
        } else {
            crate::operation_deser::parse_get_console_output_response(response)
        }
    }
}

/// <p>Retrieve a JPG-format screenshot of a running instance to help with
/// troubleshooting.</p>
/// <p>The returned content is Base64-encoded.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetConsoleScreenshot {
    _private: (),
}
impl GetConsoleScreenshot {
    /// Creates a new builder-style object to manufacture [`GetConsoleScreenshotInput`](crate::input::GetConsoleScreenshotInput)
    pub fn builder() -> crate::input::get_console_screenshot_input::Builder {
        crate::input::get_console_screenshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetConsoleScreenshot {
    type Output = std::result::Result<
        crate::output::GetConsoleScreenshotOutput,
        crate::error::GetConsoleScreenshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_console_screenshot_error(response)
        } else {
            crate::operation_deser::parse_get_console_screenshot_response(response)
        }
    }
}

/// <p>Describes the default credit option for CPU usage of a burstable performance instance family.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
/// performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDefaultCreditSpecification {
    _private: (),
}
impl GetDefaultCreditSpecification {
    /// Creates a new builder-style object to manufacture [`GetDefaultCreditSpecificationInput`](crate::input::GetDefaultCreditSpecificationInput)
    pub fn builder() -> crate::input::get_default_credit_specification_input::Builder {
        crate::input::get_default_credit_specification_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDefaultCreditSpecification {
    type Output = std::result::Result<
        crate::output::GetDefaultCreditSpecificationOutput,
        crate::error::GetDefaultCreditSpecificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_default_credit_specification_error(response)
        } else {
            crate::operation_deser::parse_get_default_credit_specification_response(response)
        }
    }
}

/// <p>Describes the default KMS key for EBS encryption by default for your account in this Region.
/// You can change the default KMS key for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or
/// <a>ResetEbsDefaultKmsKeyId</a>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEbsDefaultKmsKeyId {
    _private: (),
}
impl GetEbsDefaultKmsKeyId {
    /// Creates a new builder-style object to manufacture [`GetEbsDefaultKmsKeyIdInput`](crate::input::GetEbsDefaultKmsKeyIdInput)
    pub fn builder() -> crate::input::get_ebs_default_kms_key_id_input::Builder {
        crate::input::get_ebs_default_kms_key_id_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEbsDefaultKmsKeyId {
    type Output = std::result::Result<
        crate::output::GetEbsDefaultKmsKeyIdOutput,
        crate::error::GetEbsDefaultKmsKeyIdError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ebs_default_kms_key_id_error(response)
        } else {
            crate::operation_deser::parse_get_ebs_default_kms_key_id_response(response)
        }
    }
}

/// <p>Describes whether EBS encryption by default is enabled for your account in the current
/// Region.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEbsEncryptionByDefault {
    _private: (),
}
impl GetEbsEncryptionByDefault {
    /// Creates a new builder-style object to manufacture [`GetEbsEncryptionByDefaultInput`](crate::input::GetEbsEncryptionByDefaultInput)
    pub fn builder() -> crate::input::get_ebs_encryption_by_default_input::Builder {
        crate::input::get_ebs_encryption_by_default_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEbsEncryptionByDefault {
    type Output = std::result::Result<
        crate::output::GetEbsEncryptionByDefaultOutput,
        crate::error::GetEbsEncryptionByDefaultError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ebs_encryption_by_default_error(response)
        } else {
            crate::operation_deser::parse_get_ebs_encryption_by_default_response(response)
        }
    }
}

/// <p>Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs
/// with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data.
/// Based on the information that you provide, we configure resources in the template to do the following:</p>
/// <ul>
/// <li>
/// <p>Create a table in Athena that maps fields to a custom log format</p>
/// </li>
/// <li>
/// <p>Create a Lambda function that updates the table with new partitions on a daily, weekly, or
/// monthly basis</p>
/// </li>
/// <li>
/// <p>Create a table partitioned between two timestamps in the past</p>
/// </li>
/// <li>
/// <p>Create a set of named queries in Athena that you can use to get started quickly</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetFlowLogsIntegrationTemplate {
    _private: (),
}
impl GetFlowLogsIntegrationTemplate {
    /// Creates a new builder-style object to manufacture [`GetFlowLogsIntegrationTemplateInput`](crate::input::GetFlowLogsIntegrationTemplateInput)
    pub fn builder() -> crate::input::get_flow_logs_integration_template_input::Builder {
        crate::input::get_flow_logs_integration_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetFlowLogsIntegrationTemplate {
    type Output = std::result::Result<
        crate::output::GetFlowLogsIntegrationTemplateOutput,
        crate::error::GetFlowLogsIntegrationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_flow_logs_integration_template_error(response)
        } else {
            crate::operation_deser::parse_get_flow_logs_integration_template_response(response)
        }
    }
}

/// <p>Lists the resource groups to which a Capacity Reservation has been added.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupsForCapacityReservation {
    _private: (),
}
impl GetGroupsForCapacityReservation {
    /// Creates a new builder-style object to manufacture [`GetGroupsForCapacityReservationInput`](crate::input::GetGroupsForCapacityReservationInput)
    pub fn builder() -> crate::input::get_groups_for_capacity_reservation_input::Builder {
        crate::input::get_groups_for_capacity_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetGroupsForCapacityReservation {
    type Output = std::result::Result<
        crate::output::GetGroupsForCapacityReservationOutput,
        crate::error::GetGroupsForCapacityReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_groups_for_capacity_reservation_error(response)
        } else {
            crate::operation_deser::parse_get_groups_for_capacity_reservation_response(response)
        }
    }
}

/// <p>Preview a reservation purchase with configurations that match those of your
/// Dedicated Host. You must have active Dedicated Hosts in your account before you purchase
/// a reservation.</p>
/// <p>This is a preview of the <a>PurchaseHostReservation</a> action and does
/// not result in the offering being purchased.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetHostReservationPurchasePreview {
    _private: (),
}
impl GetHostReservationPurchasePreview {
    /// Creates a new builder-style object to manufacture [`GetHostReservationPurchasePreviewInput`](crate::input::GetHostReservationPurchasePreviewInput)
    pub fn builder() -> crate::input::get_host_reservation_purchase_preview_input::Builder {
        crate::input::get_host_reservation_purchase_preview_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetHostReservationPurchasePreview {
    type Output = std::result::Result<
        crate::output::GetHostReservationPurchasePreviewOutput,
        crate::error::GetHostReservationPurchasePreviewError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_host_reservation_purchase_preview_error(response)
        } else {
            crate::operation_deser::parse_get_host_reservation_purchase_preview_response(response)
        }
    }
}

/// <p>Retrieves the configuration data of the specified instance. You can use this data
/// to create a launch template. </p>
/// <p>This action calls on other describe actions to get instance information. Depending on your instance configuration, you may need to allow the following
/// actions in your IAM policy: DescribeSpotInstanceRequests, DescribeInstanceCreditSpecifications, DescribeVolumes, DescribeInstanceAttribute, and DescribeElasticGpus. Or, you can allow
/// <code>describe*</code> depending on your instance requirements.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetLaunchTemplateData {
    _private: (),
}
impl GetLaunchTemplateData {
    /// Creates a new builder-style object to manufacture [`GetLaunchTemplateDataInput`](crate::input::GetLaunchTemplateDataInput)
    pub fn builder() -> crate::input::get_launch_template_data_input::Builder {
        crate::input::get_launch_template_data_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetLaunchTemplateData {
    type Output = std::result::Result<
        crate::output::GetLaunchTemplateDataOutput,
        crate::error::GetLaunchTemplateDataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_launch_template_data_error(response)
        } else {
            crate::operation_deser::parse_get_launch_template_data_response(response)
        }
    }
}

/// <p>Gets information about the resources that are associated with the specified managed prefix list.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetManagedPrefixListAssociations {
    _private: (),
}
impl GetManagedPrefixListAssociations {
    /// Creates a new builder-style object to manufacture [`GetManagedPrefixListAssociationsInput`](crate::input::GetManagedPrefixListAssociationsInput)
    pub fn builder() -> crate::input::get_managed_prefix_list_associations_input::Builder {
        crate::input::get_managed_prefix_list_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetManagedPrefixListAssociations {
    type Output = std::result::Result<
        crate::output::GetManagedPrefixListAssociationsOutput,
        crate::error::GetManagedPrefixListAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_managed_prefix_list_associations_error(response)
        } else {
            crate::operation_deser::parse_get_managed_prefix_list_associations_response(response)
        }
    }
}

/// <p>Gets information about the entries for a specified managed prefix list.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetManagedPrefixListEntries {
    _private: (),
}
impl GetManagedPrefixListEntries {
    /// Creates a new builder-style object to manufacture [`GetManagedPrefixListEntriesInput`](crate::input::GetManagedPrefixListEntriesInput)
    pub fn builder() -> crate::input::get_managed_prefix_list_entries_input::Builder {
        crate::input::get_managed_prefix_list_entries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetManagedPrefixListEntries {
    type Output = std::result::Result<
        crate::output::GetManagedPrefixListEntriesOutput,
        crate::error::GetManagedPrefixListEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_managed_prefix_list_entries_error(response)
        } else {
            crate::operation_deser::parse_get_managed_prefix_list_entries_response(response)
        }
    }
}

/// <p>Retrieves the encrypted administrator password for a running Windows instance.</p>
/// <p>The Windows password is generated at boot by the <code>EC2Config</code> service or
/// <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only
/// happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the
/// <i>Amazon EC2 User Guide</i>.</p>
/// <p>For the <code>EC2Config</code> service, the password is not generated for rebundled
/// AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p>
/// <p>The password is encrypted using the key pair that you specified when you launched the
/// instance. You must provide the corresponding key pair file.</p>
/// <p>When you launch an instance, password generation and encryption may take a few
/// minutes. If you try to retrieve the password before it's available, the output returns
/// an empty string. We recommend that you wait up to 15 minutes after launching an instance
/// before trying to retrieve the generated password.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPasswordData {
    _private: (),
}
impl GetPasswordData {
    /// Creates a new builder-style object to manufacture [`GetPasswordDataInput`](crate::input::GetPasswordDataInput)
    pub fn builder() -> crate::input::get_password_data_input::Builder {
        crate::input::get_password_data_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetPasswordData {
    type Output = std::result::Result<
        crate::output::GetPasswordDataOutput,
        crate::error::GetPasswordDataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_password_data_error(response)
        } else {
            crate::operation_deser::parse_get_password_data_response(response)
        }
    }
}

/// <p>Returns a quote and exchange information for exchanging one or more specified
/// Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange
/// cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetReservedInstancesExchangeQuote {
    _private: (),
}
impl GetReservedInstancesExchangeQuote {
    /// Creates a new builder-style object to manufacture [`GetReservedInstancesExchangeQuoteInput`](crate::input::GetReservedInstancesExchangeQuoteInput)
    pub fn builder() -> crate::input::get_reserved_instances_exchange_quote_input::Builder {
        crate::input::get_reserved_instances_exchange_quote_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetReservedInstancesExchangeQuote {
    type Output = std::result::Result<
        crate::output::GetReservedInstancesExchangeQuoteOutput,
        crate::error::GetReservedInstancesExchangeQuoteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_reserved_instances_exchange_quote_error(response)
        } else {
            crate::operation_deser::parse_get_reserved_instances_exchange_quote_response(response)
        }
    }
}

/// <p>Retrieves the access status of your account to the EC2 serial console of all instances. By
/// default, access to the EC2 serial console is disabled for your account. For more
/// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2
/// User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSerialConsoleAccessStatus {
    _private: (),
}
impl GetSerialConsoleAccessStatus {
    /// Creates a new builder-style object to manufacture [`GetSerialConsoleAccessStatusInput`](crate::input::GetSerialConsoleAccessStatusInput)
    pub fn builder() -> crate::input::get_serial_console_access_status_input::Builder {
        crate::input::get_serial_console_access_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSerialConsoleAccessStatus {
    type Output = std::result::Result<
        crate::output::GetSerialConsoleAccessStatusOutput,
        crate::error::GetSerialConsoleAccessStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_serial_console_access_status_error(response)
        } else {
            crate::operation_deser::parse_get_serial_console_access_status_response(response)
        }
    }
}

/// <p>Gets information about the subnet CIDR reservations.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSubnetCidrReservations {
    _private: (),
}
impl GetSubnetCidrReservations {
    /// Creates a new builder-style object to manufacture [`GetSubnetCidrReservationsInput`](crate::input::GetSubnetCidrReservationsInput)
    pub fn builder() -> crate::input::get_subnet_cidr_reservations_input::Builder {
        crate::input::get_subnet_cidr_reservations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSubnetCidrReservations {
    type Output = std::result::Result<
        crate::output::GetSubnetCidrReservationsOutput,
        crate::error::GetSubnetCidrReservationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_subnet_cidr_reservations_error(response)
        } else {
            crate::operation_deser::parse_get_subnet_cidr_reservations_response(response)
        }
    }
}

/// <p>Lists the route tables to which the specified resource attachment propagates routes.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTransitGatewayAttachmentPropagations {
    _private: (),
}
impl GetTransitGatewayAttachmentPropagations {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayAttachmentPropagationsInput`](crate::input::GetTransitGatewayAttachmentPropagationsInput)
    pub fn builder() -> crate::input::get_transit_gateway_attachment_propagations_input::Builder {
        crate::input::get_transit_gateway_attachment_propagations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTransitGatewayAttachmentPropagations {
    type Output = std::result::Result<
        crate::output::GetTransitGatewayAttachmentPropagationsOutput,
        crate::error::GetTransitGatewayAttachmentPropagationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_transit_gateway_attachment_propagations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_transit_gateway_attachment_propagations_response(
                response,
            )
        }
    }
}

/// <p>Gets information about the associations for the transit gateway multicast domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTransitGatewayMulticastDomainAssociations {
    _private: (),
}
impl GetTransitGatewayMulticastDomainAssociations {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayMulticastDomainAssociationsInput`](crate::input::GetTransitGatewayMulticastDomainAssociationsInput)
    pub fn builder(
    ) -> crate::input::get_transit_gateway_multicast_domain_associations_input::Builder {
        crate::input::get_transit_gateway_multicast_domain_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTransitGatewayMulticastDomainAssociations {
    type Output = std::result::Result<
        crate::output::GetTransitGatewayMulticastDomainAssociationsOutput,
        crate::error::GetTransitGatewayMulticastDomainAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_transit_gateway_multicast_domain_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_transit_gateway_multicast_domain_associations_response(
                response,
            )
        }
    }
}

/// <p>Gets information about the prefix list references in a specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTransitGatewayPrefixListReferences {
    _private: (),
}
impl GetTransitGatewayPrefixListReferences {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayPrefixListReferencesInput`](crate::input::GetTransitGatewayPrefixListReferencesInput)
    pub fn builder() -> crate::input::get_transit_gateway_prefix_list_references_input::Builder {
        crate::input::get_transit_gateway_prefix_list_references_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTransitGatewayPrefixListReferences {
    type Output = std::result::Result<
        crate::output::GetTransitGatewayPrefixListReferencesOutput,
        crate::error::GetTransitGatewayPrefixListReferencesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_transit_gateway_prefix_list_references_error(response)
        } else {
            crate::operation_deser::parse_get_transit_gateway_prefix_list_references_response(
                response,
            )
        }
    }
}

/// <p>Gets information about the associations for the specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTransitGatewayRouteTableAssociations {
    _private: (),
}
impl GetTransitGatewayRouteTableAssociations {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayRouteTableAssociationsInput`](crate::input::GetTransitGatewayRouteTableAssociationsInput)
    pub fn builder() -> crate::input::get_transit_gateway_route_table_associations_input::Builder {
        crate::input::get_transit_gateway_route_table_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTransitGatewayRouteTableAssociations {
    type Output = std::result::Result<
        crate::output::GetTransitGatewayRouteTableAssociationsOutput,
        crate::error::GetTransitGatewayRouteTableAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_transit_gateway_route_table_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_transit_gateway_route_table_associations_response(
                response,
            )
        }
    }
}

/// <p>Gets information about the route table propagations for the specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTransitGatewayRouteTablePropagations {
    _private: (),
}
impl GetTransitGatewayRouteTablePropagations {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayRouteTablePropagationsInput`](crate::input::GetTransitGatewayRouteTablePropagationsInput)
    pub fn builder() -> crate::input::get_transit_gateway_route_table_propagations_input::Builder {
        crate::input::get_transit_gateway_route_table_propagations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTransitGatewayRouteTablePropagations {
    type Output = std::result::Result<
        crate::output::GetTransitGatewayRouteTablePropagationsOutput,
        crate::error::GetTransitGatewayRouteTablePropagationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_transit_gateway_route_table_propagations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_get_transit_gateway_route_table_propagations_response(
                response,
            )
        }
    }
}

/// <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p>
/// <p>Uploading a client certificate revocation list resets existing client connections.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportClientVpnClientCertificateRevocationList {
    _private: (),
}
impl ImportClientVpnClientCertificateRevocationList {
    /// Creates a new builder-style object to manufacture [`ImportClientVpnClientCertificateRevocationListInput`](crate::input::ImportClientVpnClientCertificateRevocationListInput)
    pub fn builder(
    ) -> crate::input::import_client_vpn_client_certificate_revocation_list_input::Builder {
        crate::input::import_client_vpn_client_certificate_revocation_list_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportClientVpnClientCertificateRevocationList {
    type Output = std::result::Result<
        crate::output::ImportClientVpnClientCertificateRevocationListOutput,
        crate::error::ImportClientVpnClientCertificateRevocationListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_client_vpn_client_certificate_revocation_list_error(
                response,
            )
        } else {
            crate::operation_deser::parse_import_client_vpn_client_certificate_revocation_list_response(response)
        }
    }
}

/// <p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI).</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a
/// VM as an image using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportImage {
    _private: (),
}
impl ImportImage {
    /// Creates a new builder-style object to manufacture [`ImportImageInput`](crate::input::ImportImageInput)
    pub fn builder() -> crate::input::import_image_input::Builder {
        crate::input::import_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportImage {
    type Output =
        std::result::Result<crate::output::ImportImageOutput, crate::error::ImportImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_image_error(response)
        } else {
            crate::operation_deser::parse_import_image_response(response)
        }
    }
}

/// <p>Creates an import instance task using metadata from the specified disk image.</p>
/// <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>
/// instead.</p>
/// <p>This API action is not supported by the Command Line Interface (CLI). For
/// information about using the Amazon EC2 CLI, which is deprecated, see
/// <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2">Importing a VM to Amazon EC2</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p>
/// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportInstance {
    _private: (),
}
impl ImportInstance {
    /// Creates a new builder-style object to manufacture [`ImportInstanceInput`](crate::input::ImportInstanceInput)
    pub fn builder() -> crate::input::import_instance_input::Builder {
        crate::input::import_instance_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportInstance {
    type Output =
        std::result::Result<crate::output::ImportInstanceOutput, crate::error::ImportInstanceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_instance_error(response)
        } else {
            crate::operation_deser::parse_import_instance_response(response)
        }
    }
}

/// <p>Imports the public key from an RSA or ED25519 key pair that you created with a third-party tool.
/// Compare this with <a>CreateKeyPair</a>, in which Amazon Web Services creates the key pair and gives the keys to you
/// (Amazon Web Services keeps a copy of the public key). With ImportKeyPair, you create the key pair and give Amazon Web Services just the public key.
/// The private key is never transferred between you and Amazon Web Services.</p>
/// <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportKeyPair {
    _private: (),
}
impl ImportKeyPair {
    /// Creates a new builder-style object to manufacture [`ImportKeyPairInput`](crate::input::ImportKeyPairInput)
    pub fn builder() -> crate::input::import_key_pair_input::Builder {
        crate::input::import_key_pair_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportKeyPair {
    type Output =
        std::result::Result<crate::output::ImportKeyPairOutput, crate::error::ImportKeyPairError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_key_pair_error(response)
        } else {
            crate::operation_deser::parse_import_key_pair_response(response)
        }
    }
}

/// <p>Imports a disk into an EBS snapshot.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-import-snapshot.html">Importing a disk as a snapshot using VM Import/Export</a> in the
/// <i>VM Import/Export User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportSnapshot {
    _private: (),
}
impl ImportSnapshot {
    /// Creates a new builder-style object to manufacture [`ImportSnapshotInput`](crate::input::ImportSnapshotInput)
    pub fn builder() -> crate::input::import_snapshot_input::Builder {
        crate::input::import_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportSnapshot {
    type Output =
        std::result::Result<crate::output::ImportSnapshotOutput, crate::error::ImportSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_snapshot_error(response)
        } else {
            crate::operation_deser::parse_import_snapshot_response(response)
        }
    }
}

/// <p>Creates an import volume task using metadata from the specified disk image.</p>
/// <p>This API action supports only single-volume VMs. To import multi-volume VMs, use
/// <a>ImportImage</a> instead. To import a disk to a snapshot, use
/// <a>ImportSnapshot</a> instead.</p>
/// <p>This API action is not supported by the Command Line Interface (CLI). For
/// information about using the Amazon EC2 CLI, which is deprecated, see <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#importing-your-volumes-into-amazon-ebs">Importing Disks to Amazon EBS</a> in the <i>Amazon EC2 CLI Reference</i> PDF file.</p>
/// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ImportVolume {
    _private: (),
}
impl ImportVolume {
    /// Creates a new builder-style object to manufacture [`ImportVolumeInput`](crate::input::ImportVolumeInput)
    pub fn builder() -> crate::input::import_volume_input::Builder {
        crate::input::import_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ImportVolume {
    type Output =
        std::result::Result<crate::output::ImportVolumeOutput, crate::error::ImportVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_import_volume_error(response)
        } else {
            crate::operation_deser::parse_import_volume_response(response)
        }
    }
}

/// <p>Modifies an attribute of the specified Elastic IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyAddressAttribute {
    _private: (),
}
impl ModifyAddressAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyAddressAttributeInput`](crate::input::ModifyAddressAttributeInput)
    pub fn builder() -> crate::input::modify_address_attribute_input::Builder {
        crate::input::modify_address_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyAddressAttribute {
    type Output = std::result::Result<
        crate::output::ModifyAddressAttributeOutput,
        crate::error::ModifyAddressAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_address_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_address_attribute_response(response)
        }
    }
}

/// <p>Changes the opt-in status of the Local Zone and Wavelength Zone group for your
/// account.</p>
/// <p>Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">
/// DescribeAvailabilityZones</a> to view the value for <code>GroupName</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyAvailabilityZoneGroup {
    _private: (),
}
impl ModifyAvailabilityZoneGroup {
    /// Creates a new builder-style object to manufacture [`ModifyAvailabilityZoneGroupInput`](crate::input::ModifyAvailabilityZoneGroupInput)
    pub fn builder() -> crate::input::modify_availability_zone_group_input::Builder {
        crate::input::modify_availability_zone_group_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyAvailabilityZoneGroup {
    type Output = std::result::Result<
        crate::output::ModifyAvailabilityZoneGroupOutput,
        crate::error::ModifyAvailabilityZoneGroupError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_availability_zone_group_error(response)
        } else {
            crate::operation_deser::parse_modify_availability_zone_group_response(response)
        }
    }
}

/// <p>Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You
/// cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings,
/// platform, Availability Zone, or instance eligibility. If you need to modify any of these
/// attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with
/// the required attributes.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyCapacityReservation {
    _private: (),
}
impl ModifyCapacityReservation {
    /// Creates a new builder-style object to manufacture [`ModifyCapacityReservationInput`](crate::input::ModifyCapacityReservationInput)
    pub fn builder() -> crate::input::modify_capacity_reservation_input::Builder {
        crate::input::modify_capacity_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyCapacityReservation {
    type Output = std::result::Result<
        crate::output::ModifyCapacityReservationOutput,
        crate::error::ModifyCapacityReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_capacity_reservation_error(response)
        } else {
            crate::operation_deser::parse_modify_capacity_reservation_response(response)
        }
    }
}

/// <p>Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyClientVpnEndpoint {
    _private: (),
}
impl ModifyClientVpnEndpoint {
    /// Creates a new builder-style object to manufacture [`ModifyClientVpnEndpointInput`](crate::input::ModifyClientVpnEndpointInput)
    pub fn builder() -> crate::input::modify_client_vpn_endpoint_input::Builder {
        crate::input::modify_client_vpn_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyClientVpnEndpoint {
    type Output = std::result::Result<
        crate::output::ModifyClientVpnEndpointOutput,
        crate::error::ModifyClientVpnEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_client_vpn_endpoint_error(response)
        } else {
            crate::operation_deser::parse_modify_client_vpn_endpoint_response(response)
        }
    }
}

/// <p>Modifies the default credit option for CPU usage of burstable performance instances.
/// The default credit option is set at the account level per Amazon Web Services Region, and is specified
/// per instance family. All new burstable performance instances in the account launch using
/// the default credit option.</p>
/// <p>
/// <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which works at an Amazon Web Services Region
/// level and modifies the credit option for each Availability Zone. All zones in a
/// Region are updated within five minutes. But if instances are launched during this
/// operation, they might not get the new credit option until the zone is updated. To verify
/// whether the update has occurred, you can call <code>GetDefaultCreditSpecification</code> and check
/// <code>DefaultCreditSpecification</code> for updates.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
/// performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDefaultCreditSpecification {
    _private: (),
}
impl ModifyDefaultCreditSpecification {
    /// Creates a new builder-style object to manufacture [`ModifyDefaultCreditSpecificationInput`](crate::input::ModifyDefaultCreditSpecificationInput)
    pub fn builder() -> crate::input::modify_default_credit_specification_input::Builder {
        crate::input::modify_default_credit_specification_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyDefaultCreditSpecification {
    type Output = std::result::Result<
        crate::output::ModifyDefaultCreditSpecificationOutput,
        crate::error::ModifyDefaultCreditSpecificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_default_credit_specification_error(response)
        } else {
            crate::operation_deser::parse_modify_default_credit_specification_response(response)
        }
    }
}

/// <p>Changes the default KMS key for EBS encryption by default for your account in this Region.</p>
/// <p>Amazon Web Services creates a unique Amazon Web Services managed KMS key in each Region for use with encryption by default. If
/// you change the default KMS key to a symmetric customer managed KMS key, it is used instead of the Amazon Web Services
/// managed KMS key. To reset the default KMS key to the Amazon Web Services managed KMS key for EBS, use <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric KMS keys.</p>
/// <p>If you delete or disable the customer managed KMS key that you specified for use with
/// encryption by default, your instances will fail to launch.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyEbsDefaultKmsKeyId {
    _private: (),
}
impl ModifyEbsDefaultKmsKeyId {
    /// Creates a new builder-style object to manufacture [`ModifyEbsDefaultKmsKeyIdInput`](crate::input::ModifyEbsDefaultKmsKeyIdInput)
    pub fn builder() -> crate::input::modify_ebs_default_kms_key_id_input::Builder {
        crate::input::modify_ebs_default_kms_key_id_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyEbsDefaultKmsKeyId {
    type Output = std::result::Result<
        crate::output::ModifyEbsDefaultKmsKeyIdOutput,
        crate::error::ModifyEbsDefaultKmsKeyIdError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_ebs_default_kms_key_id_error(response)
        } else {
            crate::operation_deser::parse_modify_ebs_default_kms_key_id_response(response)
        }
    }
}

/// <p>Modifies the specified EC2 Fleet.</p>
/// <p>You can only modify an EC2 Fleet request of type <code>maintain</code>.</p>
/// <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p>
/// <p>To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional
/// Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation
/// strategy is <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot Instance
/// pool with the lowest price. If the allocation strategy is <code>diversified</code>, the
/// EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy
/// is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal
/// capacity for the number of instances that are launching.</p>
/// <p>To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open
/// requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot
/// Instances until the size of the fleet no longer exceeds the new target capacity. If the
/// allocation strategy is <code>lowest-price</code>, the EC2 Fleet terminates the instances with
/// the highest price per unit. If the allocation strategy is <code>capacity-optimized</code>,
/// the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available
/// Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the EC2 Fleet terminates
/// instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep
/// the fleet at its current size, but not replace any Spot Instances that are interrupted or
/// that you terminate manually.</p>
/// <p>If you are finished with your EC2 Fleet for now, but will use it again later, you can set the
/// target capacity to 0.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyFleet {
    _private: (),
}
impl ModifyFleet {
    /// Creates a new builder-style object to manufacture [`ModifyFleetInput`](crate::input::ModifyFleetInput)
    pub fn builder() -> crate::input::modify_fleet_input::Builder {
        crate::input::modify_fleet_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyFleet {
    type Output =
        std::result::Result<crate::output::ModifyFleetOutput, crate::error::ModifyFleetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_fleet_error(response)
        } else {
            crate::operation_deser::parse_modify_fleet_response(response)
        }
    }
}

/// <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyFpgaImageAttribute {
    _private: (),
}
impl ModifyFpgaImageAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyFpgaImageAttributeInput`](crate::input::ModifyFpgaImageAttributeInput)
    pub fn builder() -> crate::input::modify_fpga_image_attribute_input::Builder {
        crate::input::modify_fpga_image_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyFpgaImageAttribute {
    type Output = std::result::Result<
        crate::output::ModifyFpgaImageAttributeOutput,
        crate::error::ModifyFpgaImageAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_fpga_image_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_fpga_image_attribute_response(response)
        }
    }
}

/// <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled,
/// any instances that you launch with a tenancy of <code>host</code> but without a specific host
/// ID are placed onto any available Dedicated Host in your account that has auto-placement enabled.
/// When auto-placement is disabled, you need to provide a host ID to have the instance launch onto
/// a specific host. If no host ID is provided, the instance is launched onto a suitable host with
/// auto-placement enabled.</p>
/// <p>You can also use this API action to modify a Dedicated Host to support either multiple
/// instance types in an instance family, or to support a specific instance type only.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyHosts {
    _private: (),
}
impl ModifyHosts {
    /// Creates a new builder-style object to manufacture [`ModifyHostsInput`](crate::input::ModifyHostsInput)
    pub fn builder() -> crate::input::modify_hosts_input::Builder {
        crate::input::modify_hosts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyHosts {
    type Output =
        std::result::Result<crate::output::ModifyHostsOutput, crate::error::ModifyHostsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_hosts_error(response)
        } else {
            crate::operation_deser::parse_modify_hosts_response(response)
        }
    }
}

/// <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root
/// user for an account; or all IAM users, IAM roles, and the root user for an account. You can
/// specify that resources should receive longer IDs (17-character IDs) when they are created. </p>
/// <p>This request can only be used to modify longer ID settings for resource types that are
/// within the opt-in period. Resources currently in their opt-in period include:
/// <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
/// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
/// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
/// <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
/// | <code>network-acl-association</code> | <code>network-interface</code> |
/// <code>network-interface-attachment</code> | <code>prefix-list</code> |
/// <code>route-table</code> | <code>route-table-association</code> |
/// <code>security-group</code> | <code>subnet</code> |
/// <code>subnet-cidr-block-association</code> | <code>vpc</code> |
/// <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
/// <p>This setting applies to the principal specified in the request; it does not apply to the
/// principal that makes the request. </p>
/// <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these
/// settings and provided that they have permission to use the relevant <code>Describe</code>
/// command for the resource type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyIdentityIdFormat {
    _private: (),
}
impl ModifyIdentityIdFormat {
    /// Creates a new builder-style object to manufacture [`ModifyIdentityIdFormatInput`](crate::input::ModifyIdentityIdFormatInput)
    pub fn builder() -> crate::input::modify_identity_id_format_input::Builder {
        crate::input::modify_identity_id_format_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyIdentityIdFormat {
    type Output = std::result::Result<
        crate::output::ModifyIdentityIdFormatOutput,
        crate::error::ModifyIdentityIdFormatError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_identity_id_format_error(response)
        } else {
            crate::operation_deser::parse_modify_identity_id_format_response(response)
        }
    }
}

/// <p>Modifies the ID format for the specified resource on a per-Region basis. You can
/// specify that resources should receive longer IDs (17-character IDs) when they are
/// created.</p>
/// <p>This request can only be used to modify longer ID settings for resource types that
/// are within the opt-in period. Resources currently in their opt-in period include:
/// <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> |
/// <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> |
/// <code>export-task</code> | <code>flow-log</code> | <code>image</code> |
/// <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code>
/// | <code>network-acl-association</code> | <code>network-interface</code> |
/// <code>network-interface-attachment</code> | <code>prefix-list</code> |
/// <code>route-table</code> | <code>route-table-association</code> |
/// <code>security-group</code> | <code>subnet</code> |
/// <code>subnet-cidr-block-association</code> | <code>vpc</code> |
/// <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
/// <p>This setting applies to the IAM user who makes the request; it does not apply to the
/// entire AWS account. By default, an IAM user defaults to the same settings as the root user. If
/// you're using this action as the root user, then these settings apply to the entire account,
/// unless an IAM user explicitly overrides these settings for themselves. For more information,
/// see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>Resources created with longer IDs are visible to all IAM roles and users, regardless
/// of these settings and provided that they have permission to use the relevant
/// <code>Describe</code> command for the resource type.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyIdFormat {
    _private: (),
}
impl ModifyIdFormat {
    /// Creates a new builder-style object to manufacture [`ModifyIdFormatInput`](crate::input::ModifyIdFormatInput)
    pub fn builder() -> crate::input::modify_id_format_input::Builder {
        crate::input::modify_id_format_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyIdFormat {
    type Output =
        std::result::Result<crate::output::ModifyIdFormatOutput, crate::error::ModifyIdFormatError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_id_format_error(response)
        } else {
            crate::operation_deser::parse_modify_id_format_response(response)
        }
    }
}

/// <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time.
/// You can use the <code>Attribute</code> parameter to specify the attribute or one of the following parameters:
/// <code>Description</code> or <code>LaunchPermission</code>.</p>
/// <p>Images with an Amazon Web Services Marketplace product code cannot be made public.</p>
/// <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance
/// and create an AMI from the instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyImageAttribute {
    _private: (),
}
impl ModifyImageAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyImageAttributeInput`](crate::input::ModifyImageAttributeInput)
    pub fn builder() -> crate::input::modify_image_attribute_input::Builder {
        crate::input::modify_image_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyImageAttribute {
    type Output = std::result::Result<
        crate::output::ModifyImageAttributeOutput,
        crate::error::ModifyImageAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_image_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_image_attribute_response(response)
        }
    }
}

/// <p>Modifies the specified attribute of the specified instance. You can specify only one
/// attribute at a time.</p>
/// <p>
/// <b>Note: </b>Using this action to change the security groups
/// associated with an elastic network interface (ENI) attached to an instance in a VPC can
/// result in an error if the instance has more than one ENI. To change the security groups
/// associated with an ENI attached to an instance that has multiple ENIs, we recommend that
/// you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p>
/// <p>To modify some attributes, the instance must be stopped. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying attributes of a stopped instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceAttribute {
    _private: (),
}
impl ModifyInstanceAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceAttributeInput`](crate::input::ModifyInstanceAttributeInput)
    pub fn builder() -> crate::input::modify_instance_attribute_input::Builder {
        crate::input::modify_instance_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstanceAttribute {
    type Output = std::result::Result<
        crate::output::ModifyInstanceAttributeOutput,
        crate::error::ModifyInstanceAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_instance_attribute_response(response)
        }
    }
}

/// <p>Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an
/// instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching
/// attributes, or run On-Demand Instance capacity.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceCapacityReservationAttributes {
    _private: (),
}
impl ModifyInstanceCapacityReservationAttributes {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCapacityReservationAttributesInput`](crate::input::ModifyInstanceCapacityReservationAttributesInput)
    pub fn builder() -> crate::input::modify_instance_capacity_reservation_attributes_input::Builder
    {
        crate::input::modify_instance_capacity_reservation_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstanceCapacityReservationAttributes {
    type Output = std::result::Result<
        crate::output::ModifyInstanceCapacityReservationAttributesOutput,
        crate::error::ModifyInstanceCapacityReservationAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_capacity_reservation_attributes_error(
                response,
            )
        } else {
            crate::operation_deser::parse_modify_instance_capacity_reservation_attributes_response(
                response,
            )
        }
    }
}

/// <p>Modifies the credit option for CPU usage on a running or stopped burstable performance
/// instance. The credit options are <code>standard</code> and
/// <code>unlimited</code>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable
/// performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceCreditSpecification {
    _private: (),
}
impl ModifyInstanceCreditSpecification {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCreditSpecificationInput`](crate::input::ModifyInstanceCreditSpecificationInput)
    pub fn builder() -> crate::input::modify_instance_credit_specification_input::Builder {
        crate::input::modify_instance_credit_specification_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstanceCreditSpecification {
    type Output = std::result::Result<
        crate::output::ModifyInstanceCreditSpecificationOutput,
        crate::error::ModifyInstanceCreditSpecificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_credit_specification_error(response)
        } else {
            crate::operation_deser::parse_modify_instance_credit_specification_response(response)
        }
    }
}

/// <p>Modifies the start time for a scheduled Amazon EC2 instance event.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceEventStartTime {
    _private: (),
}
impl ModifyInstanceEventStartTime {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceEventStartTimeInput`](crate::input::ModifyInstanceEventStartTimeInput)
    pub fn builder() -> crate::input::modify_instance_event_start_time_input::Builder {
        crate::input::modify_instance_event_start_time_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstanceEventStartTime {
    type Output = std::result::Result<
        crate::output::ModifyInstanceEventStartTimeOutput,
        crate::error::ModifyInstanceEventStartTimeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_event_start_time_error(response)
        } else {
            crate::operation_deser::parse_modify_instance_event_start_time_response(response)
        }
    }
}

/// <p>Modifies the specified event window.</p>
/// <p>You can define either a set of time ranges or a cron expression when modifying the event
/// window, but not both.</p>
/// <p>To modify the targets associated with the event window, use the <a>AssociateInstanceEventWindow</a> and <a>DisassociateInstanceEventWindow</a> API.</p>
/// <p>If Amazon Web Services has already scheduled an event, modifying an event window won't change the time
/// of the scheduled event.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled
/// events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceEventWindow {
    _private: (),
}
impl ModifyInstanceEventWindow {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceEventWindowInput`](crate::input::ModifyInstanceEventWindowInput)
    pub fn builder() -> crate::input::modify_instance_event_window_input::Builder {
        crate::input::modify_instance_event_window_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstanceEventWindow {
    type Output = std::result::Result<
        crate::output::ModifyInstanceEventWindowOutput,
        crate::error::ModifyInstanceEventWindowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_event_window_error(response)
        } else {
            crate::operation_deser::parse_modify_instance_event_window_response(response)
        }
    }
}

/// <p>Modify the instance metadata parameters on a running or stopped instance. When you
/// modify the parameters on a stopped instance, they are applied when the instance is
/// started. When you modify the parameters on a running instance, the API responds with a
/// state of “pending”. After the parameter modifications are successfully applied to the
/// instance, the state of the modifications changes from “pending” to “applied” in
/// subsequent describe-instances API calls. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceMetadataOptions {
    _private: (),
}
impl ModifyInstanceMetadataOptions {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceMetadataOptionsInput`](crate::input::ModifyInstanceMetadataOptionsInput)
    pub fn builder() -> crate::input::modify_instance_metadata_options_input::Builder {
        crate::input::modify_instance_metadata_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstanceMetadataOptions {
    type Output = std::result::Result<
        crate::output::ModifyInstanceMetadataOptionsOutput,
        crate::error::ModifyInstanceMetadataOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_metadata_options_error(response)
        } else {
            crate::operation_deser::parse_modify_instance_metadata_options_response(response)
        }
    }
}

/// <p>Modifies the placement attributes for a specified instance. You can do the
/// following:</p>
/// <ul>
/// <li>
/// <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
/// Host</a>. When affinity is set to <code>host</code> and the instance is
/// not associated with a specific Dedicated Host, the next time the instance is
/// launched, it is automatically associated with the host on which it lands. If the
/// instance is restarted or rebooted, this relationship persists.</p>
/// </li>
/// <li>
/// <p>Change the Dedicated Host with which an instance is associated.</p>
/// </li>
/// <li>
/// <p>Change the instance tenancy of an instance from <code>host</code> to
/// <code>dedicated</code>, or from <code>dedicated</code> to
/// <code>host</code>.</p>
/// </li>
/// <li>
/// <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement
/// group</a>.</p>
/// </li>
/// </ul>
/// <p>At least one attribute for affinity, host ID, tenancy, or placement group name must
/// be specified in the request. Affinity and tenancy can be modified in the same
/// request.</p>
/// <p>To modify the host ID, tenancy, placement group, or partition for an instance, the
/// instance must be in the <code>stopped</code> state.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstancePlacement {
    _private: (),
}
impl ModifyInstancePlacement {
    /// Creates a new builder-style object to manufacture [`ModifyInstancePlacementInput`](crate::input::ModifyInstancePlacementInput)
    pub fn builder() -> crate::input::modify_instance_placement_input::Builder {
        crate::input::modify_instance_placement_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyInstancePlacement {
    type Output = std::result::Result<
        crate::output::ModifyInstancePlacementOutput,
        crate::error::ModifyInstancePlacementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_instance_placement_error(response)
        } else {
            crate::operation_deser::parse_modify_instance_placement_response(response)
        }
    }
}

/// <p>Modifies a launch template. You can specify which version of the launch template to
/// set as the default version. When launching an instance, the default version applies when
/// a launch template version is not specified.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyLaunchTemplate {
    _private: (),
}
impl ModifyLaunchTemplate {
    /// Creates a new builder-style object to manufacture [`ModifyLaunchTemplateInput`](crate::input::ModifyLaunchTemplateInput)
    pub fn builder() -> crate::input::modify_launch_template_input::Builder {
        crate::input::modify_launch_template_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyLaunchTemplate {
    type Output = std::result::Result<
        crate::output::ModifyLaunchTemplateOutput,
        crate::error::ModifyLaunchTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_launch_template_error(response)
        } else {
            crate::operation_deser::parse_modify_launch_template_response(response)
        }
    }
}

/// <p>Modifies the specified managed prefix list.</p>
/// <p>Adding or removing entries in a prefix list creates a new version of the prefix list.
/// Changing the name of the prefix list does not affect the version.</p>
/// <p>If you specify a current version number that does not match the true current version
/// number, the request fails.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyManagedPrefixList {
    _private: (),
}
impl ModifyManagedPrefixList {
    /// Creates a new builder-style object to manufacture [`ModifyManagedPrefixListInput`](crate::input::ModifyManagedPrefixListInput)
    pub fn builder() -> crate::input::modify_managed_prefix_list_input::Builder {
        crate::input::modify_managed_prefix_list_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyManagedPrefixList {
    type Output = std::result::Result<
        crate::output::ModifyManagedPrefixListOutput,
        crate::error::ModifyManagedPrefixListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_managed_prefix_list_error(response)
        } else {
            crate::operation_deser::parse_modify_managed_prefix_list_response(response)
        }
    }
}

/// <p>Modifies the specified network interface attribute. You can specify only one
/// attribute at a time. You can use this action to attach and detach security groups from
/// an existing EC2 instance.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyNetworkInterfaceAttribute {
    _private: (),
}
impl ModifyNetworkInterfaceAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyNetworkInterfaceAttributeInput`](crate::input::ModifyNetworkInterfaceAttributeInput)
    pub fn builder() -> crate::input::modify_network_interface_attribute_input::Builder {
        crate::input::modify_network_interface_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyNetworkInterfaceAttribute {
    type Output = std::result::Result<
        crate::output::ModifyNetworkInterfaceAttributeOutput,
        crate::error::ModifyNetworkInterfaceAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_network_interface_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_network_interface_attribute_response(response)
        }
    }
}

/// <p>Modifies the Availability Zone, instance count, instance type, or network platform
/// (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be
/// modified must be identical, except for Availability Zone, network platform, and instance
/// type.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved
/// Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyReservedInstances {
    _private: (),
}
impl ModifyReservedInstances {
    /// Creates a new builder-style object to manufacture [`ModifyReservedInstancesInput`](crate::input::ModifyReservedInstancesInput)
    pub fn builder() -> crate::input::modify_reserved_instances_input::Builder {
        crate::input::modify_reserved_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyReservedInstances {
    type Output = std::result::Result<
        crate::output::ModifyReservedInstancesOutput,
        crate::error::ModifyReservedInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_reserved_instances_error(response)
        } else {
            crate::operation_deser::parse_modify_reserved_instances_response(response)
        }
    }
}

/// <p>Modifies the rules of a security group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifySecurityGroupRules {
    _private: (),
}
impl ModifySecurityGroupRules {
    /// Creates a new builder-style object to manufacture [`ModifySecurityGroupRulesInput`](crate::input::ModifySecurityGroupRulesInput)
    pub fn builder() -> crate::input::modify_security_group_rules_input::Builder {
        crate::input::modify_security_group_rules_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifySecurityGroupRules {
    type Output = std::result::Result<
        crate::output::ModifySecurityGroupRulesOutput,
        crate::error::ModifySecurityGroupRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_security_group_rules_error(response)
        } else {
            crate::operation_deser::parse_modify_security_group_rules_response(response)
        }
    }
}

/// <p>Adds or removes permission settings for the specified snapshot. You may add or remove
/// specified Amazon Web Services account IDs from a snapshot's list of create volume permissions, but you cannot
/// do both in a single operation. If you need to both add and remove account IDs for a snapshot,
/// you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.</p>
/// <p>Encrypted snapshots and snapshots with Amazon Web Services Marketplace product codes cannot be made
/// public. Snapshots encrypted with your default KMS key cannot be shared with other accounts.</p>
/// <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifySnapshotAttribute {
    _private: (),
}
impl ModifySnapshotAttribute {
    /// Creates a new builder-style object to manufacture [`ModifySnapshotAttributeInput`](crate::input::ModifySnapshotAttributeInput)
    pub fn builder() -> crate::input::modify_snapshot_attribute_input::Builder {
        crate::input::modify_snapshot_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifySnapshotAttribute {
    type Output = std::result::Result<
        crate::output::ModifySnapshotAttributeOutput,
        crate::error::ModifySnapshotAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_snapshot_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_snapshot_attribute_response(response)
        }
    }
}

/// <p>Modifies the specified Spot Fleet request.</p>
/// <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p>
/// <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code>
/// state.</p>
/// <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the
/// additional Spot Instances according to the allocation strategy for the Spot Fleet
/// request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches
/// instances using the Spot Instance pool with the lowest price. If the allocation strategy
/// is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot
/// Instance pools. If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet
/// launches instances from Spot Instance pools with optimal capacity for the number of instances
/// that are launching.</p>
/// <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet
/// cancels any open requests that exceed the new target capacity. You can request that the
/// Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the
/// new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot
/// Fleet terminates the instances with the highest price per unit. If the allocation
/// strategy is <code>capacityOptimized</code>, the Spot Fleet terminates the instances in
/// the Spot Instance pools that have the least available Spot Instance capacity. If the allocation
/// strategy is <code>diversified</code>, the Spot Fleet terminates instances across the
/// Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet
/// at its current size, but not replace any Spot Instances that are interrupted or that you
/// terminate manually.</p>
/// <p>If you are finished with your Spot Fleet for now, but will use it again later, you can
/// set the target capacity to 0.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifySpotFleetRequest {
    _private: (),
}
impl ModifySpotFleetRequest {
    /// Creates a new builder-style object to manufacture [`ModifySpotFleetRequestInput`](crate::input::ModifySpotFleetRequestInput)
    pub fn builder() -> crate::input::modify_spot_fleet_request_input::Builder {
        crate::input::modify_spot_fleet_request_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifySpotFleetRequest {
    type Output = std::result::Result<
        crate::output::ModifySpotFleetRequestOutput,
        crate::error::ModifySpotFleetRequestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_spot_fleet_request_error(response)
        } else {
            crate::operation_deser::parse_modify_spot_fleet_request_response(response)
        }
    }
}

/// <p>Modifies a subnet attribute. You can only modify one attribute at a time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifySubnetAttribute {
    _private: (),
}
impl ModifySubnetAttribute {
    /// Creates a new builder-style object to manufacture [`ModifySubnetAttributeInput`](crate::input::ModifySubnetAttributeInput)
    pub fn builder() -> crate::input::modify_subnet_attribute_input::Builder {
        crate::input::modify_subnet_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifySubnetAttribute {
    type Output = std::result::Result<
        crate::output::ModifySubnetAttributeOutput,
        crate::error::ModifySubnetAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_subnet_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_subnet_attribute_response(response)
        }
    }
}

/// <p>Allows or restricts mirroring network services.</p>
/// <p> By default, Amazon DNS network services are not eligible for Traffic Mirror. Use <code>AddNetworkServices</code> to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored.
/// When you no longer want to mirror network services, use <code>RemoveNetworkServices</code> to remove the network services from the Traffic Mirror filter.
/// </p>
/// <p>For information about filter rule properties, see
/// <a href="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html">Network Services</a> in the <i>Traffic Mirroring User Guide </i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTrafficMirrorFilterNetworkServices {
    _private: (),
}
impl ModifyTrafficMirrorFilterNetworkServices {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorFilterNetworkServicesInput`](crate::input::ModifyTrafficMirrorFilterNetworkServicesInput)
    pub fn builder() -> crate::input::modify_traffic_mirror_filter_network_services_input::Builder {
        crate::input::modify_traffic_mirror_filter_network_services_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyTrafficMirrorFilterNetworkServices {
    type Output = std::result::Result<
        crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput,
        crate::error::ModifyTrafficMirrorFilterNetworkServicesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_traffic_mirror_filter_network_services_error(
                response,
            )
        } else {
            crate::operation_deser::parse_modify_traffic_mirror_filter_network_services_response(
                response,
            )
        }
    }
}

/// <p>Modifies the specified Traffic Mirror rule.</p>
/// <p>
/// <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must both be an IPv4
/// range or an IPv6 range.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTrafficMirrorFilterRule {
    _private: (),
}
impl ModifyTrafficMirrorFilterRule {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorFilterRuleInput`](crate::input::ModifyTrafficMirrorFilterRuleInput)
    pub fn builder() -> crate::input::modify_traffic_mirror_filter_rule_input::Builder {
        crate::input::modify_traffic_mirror_filter_rule_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyTrafficMirrorFilterRule {
    type Output = std::result::Result<
        crate::output::ModifyTrafficMirrorFilterRuleOutput,
        crate::error::ModifyTrafficMirrorFilterRuleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_traffic_mirror_filter_rule_error(response)
        } else {
            crate::operation_deser::parse_modify_traffic_mirror_filter_rule_response(response)
        }
    }
}

/// <p>Modifies a Traffic Mirror session.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTrafficMirrorSession {
    _private: (),
}
impl ModifyTrafficMirrorSession {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorSessionInput`](crate::input::ModifyTrafficMirrorSessionInput)
    pub fn builder() -> crate::input::modify_traffic_mirror_session_input::Builder {
        crate::input::modify_traffic_mirror_session_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyTrafficMirrorSession {
    type Output = std::result::Result<
        crate::output::ModifyTrafficMirrorSessionOutput,
        crate::error::ModifyTrafficMirrorSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_traffic_mirror_session_error(response)
        } else {
            crate::operation_deser::parse_modify_traffic_mirror_session_response(response)
        }
    }
}

/// <p>Modifies the specified transit gateway. When you modify a transit gateway, the modified options are applied to new transit gateway attachments only. Your existing transit gateway attachments are not modified.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTransitGateway {
    _private: (),
}
impl ModifyTransitGateway {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayInput`](crate::input::ModifyTransitGatewayInput)
    pub fn builder() -> crate::input::modify_transit_gateway_input::Builder {
        crate::input::modify_transit_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyTransitGateway {
    type Output = std::result::Result<
        crate::output::ModifyTransitGatewayOutput,
        crate::error::ModifyTransitGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_transit_gateway_error(response)
        } else {
            crate::operation_deser::parse_modify_transit_gateway_response(response)
        }
    }
}

/// <p>Modifies a reference (route) to a prefix list in a specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTransitGatewayPrefixListReference {
    _private: (),
}
impl ModifyTransitGatewayPrefixListReference {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayPrefixListReferenceInput`](crate::input::ModifyTransitGatewayPrefixListReferenceInput)
    pub fn builder() -> crate::input::modify_transit_gateway_prefix_list_reference_input::Builder {
        crate::input::modify_transit_gateway_prefix_list_reference_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyTransitGatewayPrefixListReference {
    type Output = std::result::Result<
        crate::output::ModifyTransitGatewayPrefixListReferenceOutput,
        crate::error::ModifyTransitGatewayPrefixListReferenceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_transit_gateway_prefix_list_reference_error(
                response,
            )
        } else {
            crate::operation_deser::parse_modify_transit_gateway_prefix_list_reference_response(
                response,
            )
        }
    }
}

/// <p>Modifies the specified VPC attachment.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyTransitGatewayVpcAttachment {
    _private: (),
}
impl ModifyTransitGatewayVpcAttachment {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayVpcAttachmentInput`](crate::input::ModifyTransitGatewayVpcAttachmentInput)
    pub fn builder() -> crate::input::modify_transit_gateway_vpc_attachment_input::Builder {
        crate::input::modify_transit_gateway_vpc_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyTransitGatewayVpcAttachment {
    type Output = std::result::Result<
        crate::output::ModifyTransitGatewayVpcAttachmentOutput,
        crate::error::ModifyTransitGatewayVpcAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_transit_gateway_vpc_attachment_error(response)
        } else {
            crate::operation_deser::parse_modify_transit_gateway_vpc_attachment_response(response)
        }
    }
}

/// <p>You can modify several parameters of an existing EBS volume, including volume size, volume
/// type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance
/// type, you might be able to apply these changes without stopping the instance or detaching the
/// volume from it. For more information about modifying EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> (Linux instances)
/// or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> (Windows instances).</p>
/// <p>When you complete a resize operation on your volume, you need to extend the volume's
/// file-system size to take advantage of the new storage capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extend a Linux file system</a> or
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extend a Windows file system</a>.</p>
/// <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For
/// information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a
/// modification using <a>DescribeVolumesModifications</a>. For information
/// about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a>.</p>
/// <p>With previous-generation instance types, resizing an EBS volume might require detaching and
/// reattaching the volume or stopping and restarting the instance.</p>
/// <p>If you reach the maximum volume modification rate per volume limit, you must wait
/// at least six hours before applying further modifications to the affected EBS volume.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVolume {
    _private: (),
}
impl ModifyVolume {
    /// Creates a new builder-style object to manufacture [`ModifyVolumeInput`](crate::input::ModifyVolumeInput)
    pub fn builder() -> crate::input::modify_volume_input::Builder {
        crate::input::modify_volume_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVolume {
    type Output =
        std::result::Result<crate::output::ModifyVolumeOutput, crate::error::ModifyVolumeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_volume_error(response)
        } else {
            crate::operation_deser::parse_modify_volume_response(response)
        }
    }
}

/// <p>Modifies a volume attribute.</p>
/// <p>By default, all I/O operations for the volume are suspended when the data on the volume is
/// determined to be potentially inconsistent, to prevent undetectable, latent data corruption.
/// The I/O access to the volume can be resumed by first enabling I/O access and then checking the
/// data consistency on your volume.</p>
/// <p>You can change the default behavior to resume I/O operations. We recommend that you change
/// this only for boot volumes or for volumes that are stateless or disposable.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVolumeAttribute {
    _private: (),
}
impl ModifyVolumeAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyVolumeAttributeInput`](crate::input::ModifyVolumeAttributeInput)
    pub fn builder() -> crate::input::modify_volume_attribute_input::Builder {
        crate::input::modify_volume_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVolumeAttribute {
    type Output = std::result::Result<
        crate::output::ModifyVolumeAttributeOutput,
        crate::error::ModifyVolumeAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_volume_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_volume_attribute_response(response)
        }
    }
}

/// <p>Modifies the specified attribute of the specified VPC.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcAttribute {
    _private: (),
}
impl ModifyVpcAttribute {
    /// Creates a new builder-style object to manufacture [`ModifyVpcAttributeInput`](crate::input::ModifyVpcAttributeInput)
    pub fn builder() -> crate::input::modify_vpc_attribute_input::Builder {
        crate::input::modify_vpc_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcAttribute {
    type Output = std::result::Result<
        crate::output::ModifyVpcAttributeOutput,
        crate::error::ModifyVpcAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_attribute_error(response)
        } else {
            crate::operation_deser::parse_modify_vpc_attribute_response(response)
        }
    }
}

/// <p>Modifies attributes of a specified VPC endpoint. The attributes that you can modify
/// depend on the type of VPC endpoint (interface, gateway, or Gateway Load Balancer). For more information, see
/// <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC
/// Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcEndpoint {
    _private: (),
}
impl ModifyVpcEndpoint {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointInput`](crate::input::ModifyVpcEndpointInput)
    pub fn builder() -> crate::input::modify_vpc_endpoint_input::Builder {
        crate::input::modify_vpc_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcEndpoint {
    type Output = std::result::Result<
        crate::output::ModifyVpcEndpointOutput,
        crate::error::ModifyVpcEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_endpoint_error(response)
        } else {
            crate::operation_deser::parse_modify_vpc_endpoint_response(response)
        }
    }
}

/// <p>Modifies a connection notification for VPC endpoint or VPC endpoint service. You
/// can change the SNS topic for the notification, or the events for which to be notified. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcEndpointConnectionNotification {
    _private: (),
}
impl ModifyVpcEndpointConnectionNotification {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointConnectionNotificationInput`](crate::input::ModifyVpcEndpointConnectionNotificationInput)
    pub fn builder() -> crate::input::modify_vpc_endpoint_connection_notification_input::Builder {
        crate::input::modify_vpc_endpoint_connection_notification_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcEndpointConnectionNotification {
    type Output = std::result::Result<
        crate::output::ModifyVpcEndpointConnectionNotificationOutput,
        crate::error::ModifyVpcEndpointConnectionNotificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_endpoint_connection_notification_error(
                response,
            )
        } else {
            crate::operation_deser::parse_modify_vpc_endpoint_connection_notification_response(
                response,
            )
        }
    }
}

/// <p>Modifies the attributes of your VPC endpoint service configuration. You can change the
/// Network Load Balancers or Gateway Load Balancers for your service, and you can specify whether acceptance is
/// required for requests to connect to your endpoint service through an interface VPC
/// endpoint.</p>
/// <p>If you set or modify the private DNS name, you must prove that you own the private DNS
/// domain name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service
/// Private DNS Name Verification</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcEndpointServiceConfiguration {
    _private: (),
}
impl ModifyVpcEndpointServiceConfiguration {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServiceConfigurationInput`](crate::input::ModifyVpcEndpointServiceConfigurationInput)
    pub fn builder() -> crate::input::modify_vpc_endpoint_service_configuration_input::Builder {
        crate::input::modify_vpc_endpoint_service_configuration_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcEndpointServiceConfiguration {
    type Output = std::result::Result<
        crate::output::ModifyVpcEndpointServiceConfigurationOutput,
        crate::error::ModifyVpcEndpointServiceConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_endpoint_service_configuration_error(response)
        } else {
            crate::operation_deser::parse_modify_vpc_endpoint_service_configuration_response(
                response,
            )
        }
    }
}

/// <p>Modifies the permissions for your <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC endpoint service</a>. You can add or remove permissions for service consumers (IAM users,
/// IAM roles, and AWS accounts) to connect to your endpoint service.</p>
/// <p>If you grant permissions to all principals, the service is public. Any users who know the name of a
/// public service can send a request to attach an endpoint. If the service does not require manual approval,
/// attachments are automatically approved.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcEndpointServicePermissions {
    _private: (),
}
impl ModifyVpcEndpointServicePermissions {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServicePermissionsInput`](crate::input::ModifyVpcEndpointServicePermissionsInput)
    pub fn builder() -> crate::input::modify_vpc_endpoint_service_permissions_input::Builder {
        crate::input::modify_vpc_endpoint_service_permissions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcEndpointServicePermissions {
    type Output = std::result::Result<
        crate::output::ModifyVpcEndpointServicePermissionsOutput,
        crate::error::ModifyVpcEndpointServicePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_endpoint_service_permissions_error(response)
        } else {
            crate::operation_deser::parse_modify_vpc_endpoint_service_permissions_response(response)
        }
    }
}

/// <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p>
/// <ul>
/// <li>
/// <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p>
/// </li>
/// <li>
/// <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p>
/// </li>
/// <li>
/// <p>Enable/disable the ability to resolve public DNS hostnames to private IP
/// addresses when queried from instances in the peer VPC.</p>
/// </li>
/// </ul>
/// <p>If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution
/// for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP
/// addresses in the peer VPC. This option is not available if the peered VPCs are in different
/// different Amazon Web Services accounts or different Regions. For peered VPCs in different
/// Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request
/// to modify the peering connection options. For inter-region peering connections, you must use the
/// Region for the requester VPC to modify the requester VPC peering options and the Region for the
/// accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and
/// the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcPeeringConnectionOptions {
    _private: (),
}
impl ModifyVpcPeeringConnectionOptions {
    /// Creates a new builder-style object to manufacture [`ModifyVpcPeeringConnectionOptionsInput`](crate::input::ModifyVpcPeeringConnectionOptionsInput)
    pub fn builder() -> crate::input::modify_vpc_peering_connection_options_input::Builder {
        crate::input::modify_vpc_peering_connection_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcPeeringConnectionOptions {
    type Output = std::result::Result<
        crate::output::ModifyVpcPeeringConnectionOptionsOutput,
        crate::error::ModifyVpcPeeringConnectionOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_peering_connection_options_error(response)
        } else {
            crate::operation_deser::parse_modify_vpc_peering_connection_options_response(response)
        }
    }
}

/// <p>Modifies the instance tenancy attribute of the specified VPC. You can change the
/// instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the
/// instance tenancy attribute to <code>dedicated</code>.</p>
/// <p>After you modify the tenancy of the VPC, any new instances that you launch into the
/// VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch.
/// The tenancy of any existing instances in the VPC is not affected.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcTenancy {
    _private: (),
}
impl ModifyVpcTenancy {
    /// Creates a new builder-style object to manufacture [`ModifyVpcTenancyInput`](crate::input::ModifyVpcTenancyInput)
    pub fn builder() -> crate::input::modify_vpc_tenancy_input::Builder {
        crate::input::modify_vpc_tenancy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpcTenancy {
    type Output = std::result::Result<
        crate::output::ModifyVpcTenancyOutput,
        crate::error::ModifyVpcTenancyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpc_tenancy_error(response)
        } else {
            crate::operation_deser::parse_modify_vpc_tenancy_response(response)
        }
    }
}

/// <p>Modifies the customer gateway or the target gateway of an AWS Site-to-Site VPN connection. To modify the target gateway, the following migration
/// options are available:</p>
/// <ul>
/// <li>
/// <p>An existing virtual private gateway to a new virtual private gateway</p>
/// </li>
/// <li>
/// <p>An existing virtual private gateway to a transit gateway</p>
/// </li>
/// <li>
/// <p>An existing transit gateway to a new transit gateway</p>
/// </li>
/// <li>
/// <p>An existing transit gateway to a virtual private gateway</p>
/// </li>
/// </ul>
/// <p>Before you perform the migration to the new gateway, you must configure the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or <a>CreateTransitGateway</a> to create a transit gateway.</p>
/// <p>This step is required when you migrate from a virtual private gateway with static routes to
/// a transit gateway. </p>
/// <p>You must delete the static routes before you migrate to the new gateway.</p>
/// <p>Keep a copy of the static route before you delete it. You will need to add back these
/// routes to the transit gateway after the VPN connection migration is complete.</p>
/// <p>After you migrate to the new gateway, you might need to modify your VPC route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">VPN Gateway Target Modification Required VPC Route Table Updates</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
/// <p>
/// When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the  AWS Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.</p>
/// <p> If you deleted VPN static routes, you must add the static routes to the transit gateway
/// route table.</p>
/// <p>After you perform this operation, the AWS VPN endpoint's IP addresses on the AWS side and
/// the tunnel options remain intact. Your AWS Site-to-Site VPN connection will be temporarily unavailable
/// for a brief period while we provision the new endpoints.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpnConnection {
    _private: (),
}
impl ModifyVpnConnection {
    /// Creates a new builder-style object to manufacture [`ModifyVpnConnectionInput`](crate::input::ModifyVpnConnectionInput)
    pub fn builder() -> crate::input::modify_vpn_connection_input::Builder {
        crate::input::modify_vpn_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpnConnection {
    type Output = std::result::Result<
        crate::output::ModifyVpnConnectionOutput,
        crate::error::ModifyVpnConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpn_connection_error(response)
        } else {
            crate::operation_deser::parse_modify_vpn_connection_response(response)
        }
    }
}

/// <p>Modifies the connection options for your Site-to-Site VPN connection.</p>
/// <p>When you modify the VPN connection options, the VPN endpoint IP addresses on the AWS side do not change, and the tunnel options do not change. Your VPN connection will be temporarily unavailable for a brief period while the VPN connection is updated.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpnConnectionOptions {
    _private: (),
}
impl ModifyVpnConnectionOptions {
    /// Creates a new builder-style object to manufacture [`ModifyVpnConnectionOptionsInput`](crate::input::ModifyVpnConnectionOptionsInput)
    pub fn builder() -> crate::input::modify_vpn_connection_options_input::Builder {
        crate::input::modify_vpn_connection_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpnConnectionOptions {
    type Output = std::result::Result<
        crate::output::ModifyVpnConnectionOptionsOutput,
        crate::error::ModifyVpnConnectionOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpn_connection_options_error(response)
        } else {
            crate::operation_deser::parse_modify_vpn_connection_options_response(response)
        }
    }
}

/// <p>Modifies the VPN tunnel endpoint certificate.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpnTunnelCertificate {
    _private: (),
}
impl ModifyVpnTunnelCertificate {
    /// Creates a new builder-style object to manufacture [`ModifyVpnTunnelCertificateInput`](crate::input::ModifyVpnTunnelCertificateInput)
    pub fn builder() -> crate::input::modify_vpn_tunnel_certificate_input::Builder {
        crate::input::modify_vpn_tunnel_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpnTunnelCertificate {
    type Output = std::result::Result<
        crate::output::ModifyVpnTunnelCertificateOutput,
        crate::error::ModifyVpnTunnelCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpn_tunnel_certificate_error(response)
        } else {
            crate::operation_deser::parse_modify_vpn_tunnel_certificate_response(response)
        }
    }
}

/// <p>Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify
/// multiple options for a tunnel in a single request, but you can only modify one tunnel at
/// a time. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN
/// Connection</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpnTunnelOptions {
    _private: (),
}
impl ModifyVpnTunnelOptions {
    /// Creates a new builder-style object to manufacture [`ModifyVpnTunnelOptionsInput`](crate::input::ModifyVpnTunnelOptionsInput)
    pub fn builder() -> crate::input::modify_vpn_tunnel_options_input::Builder {
        crate::input::modify_vpn_tunnel_options_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyVpnTunnelOptions {
    type Output = std::result::Result<
        crate::output::ModifyVpnTunnelOptionsOutput,
        crate::error::ModifyVpnTunnelOptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_vpn_tunnel_options_error(response)
        } else {
            crate::operation_deser::parse_modify_vpn_tunnel_options_response(response)
        }
    }
}

/// <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is
/// enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring your instances and
/// volumes</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// <p>To disable detailed monitoring, see .</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MonitorInstances {
    _private: (),
}
impl MonitorInstances {
    /// Creates a new builder-style object to manufacture [`MonitorInstancesInput`](crate::input::MonitorInstancesInput)
    pub fn builder() -> crate::input::monitor_instances_input::Builder {
        crate::input::monitor_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for MonitorInstances {
    type Output = std::result::Result<
        crate::output::MonitorInstancesOutput,
        crate::error::MonitorInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_monitor_instances_error(response)
        } else {
            crate::operation_deser::parse_monitor_instances_response(response)
        }
    }
}

/// <p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The
/// Elastic IP address must be allocated to your account for more than 24 hours, and it must not
/// be associated with an instance. After the Elastic IP address is moved, it is no longer
/// available for use in the EC2-Classic platform, unless you move it back using the
/// <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was
/// originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MoveAddressToVpc {
    _private: (),
}
impl MoveAddressToVpc {
    /// Creates a new builder-style object to manufacture [`MoveAddressToVpcInput`](crate::input::MoveAddressToVpcInput)
    pub fn builder() -> crate::input::move_address_to_vpc_input::Builder {
        crate::input::move_address_to_vpc_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for MoveAddressToVpc {
    type Output = std::result::Result<
        crate::output::MoveAddressToVpcOutput,
        crate::error::MoveAddressToVpcError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_move_address_to_vpc_error(response)
        } else {
            crate::operation_deser::parse_move_address_to_vpc_response(response)
        }
    }
}

/// <p>Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services resources through bring your own IP
/// addresses (BYOIP) and creates a corresponding address pool. After the address range is
/// provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p>
/// <p>Amazon Web Services verifies that you own the address range and are authorized to advertise it.
/// You must ensure that the address range is registered to you and that you created an
/// RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range.
/// For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring your own IP addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>Provisioning an address range is an asynchronous operation, so the call returns immediately,
/// but the address range is not ready to use until its status changes from <code>pending-provision</code>
/// to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>.
/// To allocate an Elastic IP address from your IPv4 address pool, use <a>AllocateAddress</a>
/// with either the specific address from the address pool or the ID of the address pool.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ProvisionByoipCidr {
    _private: (),
}
impl ProvisionByoipCidr {
    /// Creates a new builder-style object to manufacture [`ProvisionByoipCidrInput`](crate::input::ProvisionByoipCidrInput)
    pub fn builder() -> crate::input::provision_byoip_cidr_input::Builder {
        crate::input::provision_byoip_cidr_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ProvisionByoipCidr {
    type Output = std::result::Result<
        crate::output::ProvisionByoipCidrOutput,
        crate::error::ProvisionByoipCidrError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_provision_byoip_cidr_error(response)
        } else {
            crate::operation_deser::parse_provision_byoip_cidr_response(response)
        }
    }
}

/// <p>Purchase a reservation with configurations that match those of your Dedicated Host.
/// You must have active Dedicated Hosts in your account before you purchase a reservation.
/// This action results in the specified reservation being purchased and charged to your
/// account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseHostReservation {
    _private: (),
}
impl PurchaseHostReservation {
    /// Creates a new builder-style object to manufacture [`PurchaseHostReservationInput`](crate::input::PurchaseHostReservationInput)
    pub fn builder() -> crate::input::purchase_host_reservation_input::Builder {
        crate::input::purchase_host_reservation_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PurchaseHostReservation {
    type Output = std::result::Result<
        crate::output::PurchaseHostReservationOutput,
        crate::error::PurchaseHostReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_purchase_host_reservation_error(response)
        } else {
            crate::operation_deser::parse_purchase_host_reservation_response(response)
        }
    }
}

/// <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower
/// hourly rate compared to On-Demand instance pricing.</p>
/// <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings
/// that match your specifications. After you've purchased a Reserved Instance, you can check for your
/// new Reserved Instance with <a>DescribeReservedInstances</a>.</p>
/// <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a
/// purchase time, the default is the current time.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseReservedInstancesOffering {
    _private: (),
}
impl PurchaseReservedInstancesOffering {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedInstancesOfferingInput`](crate::input::PurchaseReservedInstancesOfferingInput)
    pub fn builder() -> crate::input::purchase_reserved_instances_offering_input::Builder {
        crate::input::purchase_reserved_instances_offering_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PurchaseReservedInstancesOffering {
    type Output = std::result::Result<
        crate::output::PurchaseReservedInstancesOfferingOutput,
        crate::error::PurchaseReservedInstancesOfferingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_purchase_reserved_instances_offering_error(response)
        } else {
            crate::operation_deser::parse_purchase_reserved_instances_offering_response(response)
        }
    }
}

/// <p>Purchases the Scheduled Instances with the specified schedule.</p>
/// <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term.
/// Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a>
/// to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance,
/// you must call <a>RunScheduledInstances</a> during each scheduled time period.</p>
/// <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseScheduledInstances {
    _private: (),
}
impl PurchaseScheduledInstances {
    /// Creates a new builder-style object to manufacture [`PurchaseScheduledInstancesInput`](crate::input::PurchaseScheduledInstancesInput)
    pub fn builder() -> crate::input::purchase_scheduled_instances_input::Builder {
        crate::input::purchase_scheduled_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PurchaseScheduledInstances {
    type Output = std::result::Result<
        crate::output::PurchaseScheduledInstancesOutput,
        crate::error::PurchaseScheduledInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_purchase_scheduled_instances_error(response)
        } else {
            crate::operation_deser::parse_purchase_scheduled_instances_response(response)
        }
    }
}

/// <p>Requests a reboot of the specified instances. This operation is asynchronous; it only
/// queues a request to reboot the specified instances. The operation succeeds if the
/// instances are valid and belong to you. Requests to reboot terminated instances are
/// ignored.</p>
/// <p>If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a
/// hard reboot.</p>
/// <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting console output and
/// rebooting instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RebootInstances {
    _private: (),
}
impl RebootInstances {
    /// Creates a new builder-style object to manufacture [`RebootInstancesInput`](crate::input::RebootInstancesInput)
    pub fn builder() -> crate::input::reboot_instances_input::Builder {
        crate::input::reboot_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RebootInstances {
    type Output = std::result::Result<
        crate::output::RebootInstancesOutput,
        crate::error::RebootInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reboot_instances_error(response)
        } else {
            crate::operation_deser::parse_reboot_instances_response(response)
        }
    }
}

/// <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete
/// before you can launch an instance from the AMI. For more information about creating AMIs, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating your
/// own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <note>
/// <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers
/// the AMI in a single request, so you don't have to register the AMI yourself.</p>
/// </note>
/// <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration.
/// If you make changes to an image, deregister the previous image and register the new image.</p>
/// <p>
/// <b>Register a snapshot of a root device volume</b>
/// </p>
/// <p>You can use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from
/// a snapshot of a root device volume. You specify the snapshot using a block device mapping.
/// You can't set the encryption state of the volume using the block device mapping. If the
/// snapshot is encrypted, or encryption by default is enabled, the root volume of an instance
/// launched from the AMI is encrypted.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot">Create a Linux AMI from a snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Use encryption with Amazon EBS-backed AMIs</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// <p>
/// <b>Amazon Web Services Marketplace product codes</b>
/// </p>
/// <p>If any snapshots have Amazon Web Services Marketplace product codes, they are copied to the new
/// AMI.</p>
/// <p>Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE
/// Linux Enterprise Server (SLES), use the Amazon EC2 billing product code associated with an AMI to
/// verify the subscription status for package updates. To create a new AMI for operating systems
/// that require a billing product code, instead of registering the AMI, do the following to
/// preserve the billing product code association:</p>
/// <ol>
/// <li>
/// <p>Launch an instance from an existing AMI with that billing product code.</p>
/// </li>
/// <li>
/// <p>Customize the instance.</p>
/// </li>
/// <li>
/// <p>Create an AMI from the instance using <a>CreateImage</a>.</p>
/// </li>
/// </ol>
/// <p>If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched
/// from an AMI with a billing product code, make sure that the Reserved Instance has the matching
/// billing product code. If you purchase a Reserved Instance without the matching billing product
/// code, the Reserved Instance will not be applied to the On-Demand Instance. For information
/// about how to obtain the platform details and billing information of an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understanding AMI
/// billing</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterImage {
    _private: (),
}
impl RegisterImage {
    /// Creates a new builder-style object to manufacture [`RegisterImageInput`](crate::input::RegisterImageInput)
    pub fn builder() -> crate::input::register_image_input::Builder {
        crate::input::register_image_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterImage {
    type Output =
        std::result::Result<crate::output::RegisterImageOutput, crate::error::RegisterImageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_image_error(response)
        } else {
            crate::operation_deser::parse_register_image_response(response)
        }
    }
}

/// <p>Registers a set of tag keys to include in scheduled event notifications for your resources.
/// </p>
/// <p>To remove tags, use .</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterInstanceEventNotificationAttributes {
    _private: (),
}
impl RegisterInstanceEventNotificationAttributes {
    /// Creates a new builder-style object to manufacture [`RegisterInstanceEventNotificationAttributesInput`](crate::input::RegisterInstanceEventNotificationAttributesInput)
    pub fn builder() -> crate::input::register_instance_event_notification_attributes_input::Builder
    {
        crate::input::register_instance_event_notification_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterInstanceEventNotificationAttributes {
    type Output = std::result::Result<
        crate::output::RegisterInstanceEventNotificationAttributesOutput,
        crate::error::RegisterInstanceEventNotificationAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_instance_event_notification_attributes_error(
                response,
            )
        } else {
            crate::operation_deser::parse_register_instance_event_notification_attributes_response(
                response,
            )
        }
    }
}

/// <p>Registers members (network interfaces) with the  transit gateway multicast group. A member is a network interface associated
/// with a supported EC2 instance that receives multicast traffic. For information about
/// supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
/// Consideration</a> in <i>Amazon VPC Transit Gateways</i>.</p>
/// <p>After you add the members, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the members were added
/// to the  transit gateway multicast group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterTransitGatewayMulticastGroupMembers {
    _private: (),
}
impl RegisterTransitGatewayMulticastGroupMembers {
    /// Creates a new builder-style object to manufacture [`RegisterTransitGatewayMulticastGroupMembersInput`](crate::input::RegisterTransitGatewayMulticastGroupMembersInput)
    pub fn builder() -> crate::input::register_transit_gateway_multicast_group_members_input::Builder
    {
        crate::input::register_transit_gateway_multicast_group_members_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterTransitGatewayMulticastGroupMembers {
    type Output = std::result::Result<
        crate::output::RegisterTransitGatewayMulticastGroupMembersOutput,
        crate::error::RegisterTransitGatewayMulticastGroupMembersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_transit_gateway_multicast_group_members_error(
                response,
            )
        } else {
            crate::operation_deser::parse_register_transit_gateway_multicast_group_members_response(
                response,
            )
        }
    }
}

/// <p>Registers sources (network interfaces) with the specified  transit gateway multicast group.</p>
/// <p>A multicast source is a network interface attached to a supported instance that sends
/// multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast
/// Considerations</a> in <i>Amazon VPC Transit Gateways</i>.</p>
/// <p>After you add the source, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the source was added to the multicast
/// group.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterTransitGatewayMulticastGroupSources {
    _private: (),
}
impl RegisterTransitGatewayMulticastGroupSources {
    /// Creates a new builder-style object to manufacture [`RegisterTransitGatewayMulticastGroupSourcesInput`](crate::input::RegisterTransitGatewayMulticastGroupSourcesInput)
    pub fn builder() -> crate::input::register_transit_gateway_multicast_group_sources_input::Builder
    {
        crate::input::register_transit_gateway_multicast_group_sources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterTransitGatewayMulticastGroupSources {
    type Output = std::result::Result<
        crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput,
        crate::error::RegisterTransitGatewayMulticastGroupSourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_transit_gateway_multicast_group_sources_error(
                response,
            )
        } else {
            crate::operation_deser::parse_register_transit_gateway_multicast_group_sources_response(
                response,
            )
        }
    }
}

/// <p>Rejects a request to associate cross-account subnets with a transit gateway multicast domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectTransitGatewayMulticastDomainAssociations {
    _private: (),
}
impl RejectTransitGatewayMulticastDomainAssociations {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayMulticastDomainAssociationsInput`](crate::input::RejectTransitGatewayMulticastDomainAssociationsInput)
    pub fn builder(
    ) -> crate::input::reject_transit_gateway_multicast_domain_associations_input::Builder {
        crate::input::reject_transit_gateway_multicast_domain_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for RejectTransitGatewayMulticastDomainAssociations
{
    type Output = std::result::Result<
        crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput,
        crate::error::RejectTransitGatewayMulticastDomainAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_transit_gateway_multicast_domain_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_reject_transit_gateway_multicast_domain_associations_response(response)
        }
    }
}

/// <p>Rejects a transit gateway peering attachment request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectTransitGatewayPeeringAttachment {
    _private: (),
}
impl RejectTransitGatewayPeeringAttachment {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayPeeringAttachmentInput`](crate::input::RejectTransitGatewayPeeringAttachmentInput)
    pub fn builder() -> crate::input::reject_transit_gateway_peering_attachment_input::Builder {
        crate::input::reject_transit_gateway_peering_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectTransitGatewayPeeringAttachment {
    type Output = std::result::Result<
        crate::output::RejectTransitGatewayPeeringAttachmentOutput,
        crate::error::RejectTransitGatewayPeeringAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_transit_gateway_peering_attachment_error(response)
        } else {
            crate::operation_deser::parse_reject_transit_gateway_peering_attachment_response(
                response,
            )
        }
    }
}

/// <p>Rejects a request to attach a VPC to a transit gateway.</p>
/// <p>The VPC attachment must be in the <code>pendingAcceptance</code> state.
/// Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests.
/// Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectTransitGatewayVpcAttachment {
    _private: (),
}
impl RejectTransitGatewayVpcAttachment {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayVpcAttachmentInput`](crate::input::RejectTransitGatewayVpcAttachmentInput)
    pub fn builder() -> crate::input::reject_transit_gateway_vpc_attachment_input::Builder {
        crate::input::reject_transit_gateway_vpc_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectTransitGatewayVpcAttachment {
    type Output = std::result::Result<
        crate::output::RejectTransitGatewayVpcAttachmentOutput,
        crate::error::RejectTransitGatewayVpcAttachmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_transit_gateway_vpc_attachment_error(response)
        } else {
            crate::operation_deser::parse_reject_transit_gateway_vpc_attachment_response(response)
        }
    }
}

/// <p>Rejects one or more VPC endpoint connection requests to your VPC endpoint
/// service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectVpcEndpointConnections {
    _private: (),
}
impl RejectVpcEndpointConnections {
    /// Creates a new builder-style object to manufacture [`RejectVpcEndpointConnectionsInput`](crate::input::RejectVpcEndpointConnectionsInput)
    pub fn builder() -> crate::input::reject_vpc_endpoint_connections_input::Builder {
        crate::input::reject_vpc_endpoint_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectVpcEndpointConnections {
    type Output = std::result::Result<
        crate::output::RejectVpcEndpointConnectionsOutput,
        crate::error::RejectVpcEndpointConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_vpc_endpoint_connections_error(response)
        } else {
            crate::operation_deser::parse_reject_vpc_endpoint_connections_response(response)
        }
    }
}

/// <p>Rejects a VPC peering connection request. The VPC peering connection must be in the
/// <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request
/// to view your outstanding VPC peering connection requests. To delete an active VPC peering
/// connection, or to delete a VPC peering connection request that you initiated, use  <a>DeleteVpcPeeringConnection</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectVpcPeeringConnection {
    _private: (),
}
impl RejectVpcPeeringConnection {
    /// Creates a new builder-style object to manufacture [`RejectVpcPeeringConnectionInput`](crate::input::RejectVpcPeeringConnectionInput)
    pub fn builder() -> crate::input::reject_vpc_peering_connection_input::Builder {
        crate::input::reject_vpc_peering_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectVpcPeeringConnection {
    type Output = std::result::Result<
        crate::output::RejectVpcPeeringConnectionOutput,
        crate::error::RejectVpcPeeringConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_vpc_peering_connection_error(response)
        } else {
            crate::operation_deser::parse_reject_vpc_peering_connection_response(response)
        }
    }
}

/// <p>Releases the specified Elastic IP address.</p>
/// <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it
/// from any instance that it's associated with. To disassociate an Elastic IP address without
/// releasing it, use <a>DisassociateAddress</a>.</p>
/// <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address
/// before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p>
/// <p>After releasing an Elastic IP address, it is released to the IP address pool.
/// Be sure to update your DNS records and any servers or devices that communicate with the address.
/// If you attempt to release an Elastic IP address that you already released, you'll get an
/// <code>AuthFailure</code> error if the address is already allocated to another Amazon Web Services account.</p>
/// <p>[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it.
/// For more information, see <a>AllocateAddress</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReleaseAddress {
    _private: (),
}
impl ReleaseAddress {
    /// Creates a new builder-style object to manufacture [`ReleaseAddressInput`](crate::input::ReleaseAddressInput)
    pub fn builder() -> crate::input::release_address_input::Builder {
        crate::input::release_address_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReleaseAddress {
    type Output =
        std::result::Result<crate::output::ReleaseAddressOutput, crate::error::ReleaseAddressError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_release_address_error(response)
        } else {
            crate::operation_deser::parse_release_address_response(response)
        }
    }
}

/// <p>When you no longer want to use an On-Demand Dedicated Host it can be released.
/// On-Demand billing is stopped and the host goes into <code>released</code> state. The
/// host ID of Dedicated Hosts that have been released can no longer be specified in another
/// request, for example, to modify the host. You must stop or terminate all instances on a
/// host before it can be released.</p>
/// <p>When Dedicated Hosts are released, it may take some time for them to stop counting
/// toward your limit and you may receive capacity errors when trying to allocate new
/// Dedicated Hosts. Wait a few minutes and then try again.</p>
/// <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReleaseHosts {
    _private: (),
}
impl ReleaseHosts {
    /// Creates a new builder-style object to manufacture [`ReleaseHostsInput`](crate::input::ReleaseHostsInput)
    pub fn builder() -> crate::input::release_hosts_input::Builder {
        crate::input::release_hosts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReleaseHosts {
    type Output =
        std::result::Result<crate::output::ReleaseHostsOutput, crate::error::ReleaseHostsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_release_hosts_error(response)
        } else {
            crate::operation_deser::parse_release_hosts_response(response)
        }
    }
}

/// <p>Replaces an IAM instance profile for the specified running instance. You can use
/// this action to change the IAM instance profile that's associated with an instance
/// without having to disassociate the existing IAM instance profile first.</p>
/// <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association
/// ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReplaceIamInstanceProfileAssociation {
    _private: (),
}
impl ReplaceIamInstanceProfileAssociation {
    /// Creates a new builder-style object to manufacture [`ReplaceIamInstanceProfileAssociationInput`](crate::input::ReplaceIamInstanceProfileAssociationInput)
    pub fn builder() -> crate::input::replace_iam_instance_profile_association_input::Builder {
        crate::input::replace_iam_instance_profile_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReplaceIamInstanceProfileAssociation {
    type Output = std::result::Result<
        crate::output::ReplaceIamInstanceProfileAssociationOutput,
        crate::error::ReplaceIamInstanceProfileAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_replace_iam_instance_profile_association_error(response)
        } else {
            crate::operation_deser::parse_replace_iam_instance_profile_association_response(
                response,
            )
        }
    }
}

/// <p>Changes which network ACL a subnet is associated with. By default when you create a
/// subnet, it's automatically associated with the default network ACL. For more
/// information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network
/// ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>This is an idempotent operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReplaceNetworkAclAssociation {
    _private: (),
}
impl ReplaceNetworkAclAssociation {
    /// Creates a new builder-style object to manufacture [`ReplaceNetworkAclAssociationInput`](crate::input::ReplaceNetworkAclAssociationInput)
    pub fn builder() -> crate::input::replace_network_acl_association_input::Builder {
        crate::input::replace_network_acl_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReplaceNetworkAclAssociation {
    type Output = std::result::Result<
        crate::output::ReplaceNetworkAclAssociationOutput,
        crate::error::ReplaceNetworkAclAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_replace_network_acl_association_error(response)
        } else {
            crate::operation_deser::parse_replace_network_acl_association_response(response)
        }
    }
}

/// <p>Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReplaceNetworkAclEntry {
    _private: (),
}
impl ReplaceNetworkAclEntry {
    /// Creates a new builder-style object to manufacture [`ReplaceNetworkAclEntryInput`](crate::input::ReplaceNetworkAclEntryInput)
    pub fn builder() -> crate::input::replace_network_acl_entry_input::Builder {
        crate::input::replace_network_acl_entry_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReplaceNetworkAclEntry {
    type Output = std::result::Result<
        crate::output::ReplaceNetworkAclEntryOutput,
        crate::error::ReplaceNetworkAclEntryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_replace_network_acl_entry_error(response)
        } else {
            crate::operation_deser::parse_replace_network_acl_entry_response(response)
        }
    }
}

/// <p>Replaces an existing route within a route table in a VPC. You must provide only one of
/// the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC
/// peering connection, network interface, egress-only internet gateway, or transit
/// gateway.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the
/// <i>Amazon Virtual Private Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReplaceRoute {
    _private: (),
}
impl ReplaceRoute {
    /// Creates a new builder-style object to manufacture [`ReplaceRouteInput`](crate::input::ReplaceRouteInput)
    pub fn builder() -> crate::input::replace_route_input::Builder {
        crate::input::replace_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReplaceRoute {
    type Output =
        std::result::Result<crate::output::ReplaceRouteOutput, crate::error::ReplaceRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_replace_route_error(response)
        } else {
            crate::operation_deser::parse_replace_route_response(response)
        }
    }
}

/// <p>Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation
/// completes, the subnet or gateway uses the routes in the new route table. For more
/// information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route
/// tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
/// <p>You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReplaceRouteTableAssociation {
    _private: (),
}
impl ReplaceRouteTableAssociation {
    /// Creates a new builder-style object to manufacture [`ReplaceRouteTableAssociationInput`](crate::input::ReplaceRouteTableAssociationInput)
    pub fn builder() -> crate::input::replace_route_table_association_input::Builder {
        crate::input::replace_route_table_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReplaceRouteTableAssociation {
    type Output = std::result::Result<
        crate::output::ReplaceRouteTableAssociationOutput,
        crate::error::ReplaceRouteTableAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_replace_route_table_association_error(response)
        } else {
            crate::operation_deser::parse_replace_route_table_association_response(response)
        }
    }
}

/// <p>Replaces the specified route in the specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReplaceTransitGatewayRoute {
    _private: (),
}
impl ReplaceTransitGatewayRoute {
    /// Creates a new builder-style object to manufacture [`ReplaceTransitGatewayRouteInput`](crate::input::ReplaceTransitGatewayRouteInput)
    pub fn builder() -> crate::input::replace_transit_gateway_route_input::Builder {
        crate::input::replace_transit_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReplaceTransitGatewayRoute {
    type Output = std::result::Result<
        crate::output::ReplaceTransitGatewayRouteOutput,
        crate::error::ReplaceTransitGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_replace_transit_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_replace_transit_gateway_route_response(response)
        }
    }
}

/// <p>Submits feedback about the status of an instance. The instance must be in the
/// <code>running</code> state. If your experience with the instance differs from the
/// instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon
/// EC2 collects this information to improve the accuracy of status checks.</p>
/// <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReportInstanceStatus {
    _private: (),
}
impl ReportInstanceStatus {
    /// Creates a new builder-style object to manufacture [`ReportInstanceStatusInput`](crate::input::ReportInstanceStatusInput)
    pub fn builder() -> crate::input::report_instance_status_input::Builder {
        crate::input::report_instance_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ReportInstanceStatus {
    type Output = std::result::Result<
        crate::output::ReportInstanceStatusOutput,
        crate::error::ReportInstanceStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_report_instance_status_error(response)
        } else {
            crate::operation_deser::parse_report_instance_status_response(response)
        }
    }
}

/// <p>Creates a Spot Fleet request.</p>
/// <p>The Spot Fleet request specifies the total target capacity and the On-Demand target
/// capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand
/// capacity, and launches the difference as Spot capacity.</p>
/// <p>You can submit a single request that includes multiple launch specifications that vary
/// by instance type, AMI, Availability Zone, or subnet.</p>
/// <p>By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the
/// price per unit is the lowest. Each launch specification can include its own instance
/// weighting that reflects the value of the instance type to your application
/// workload.</p>
/// <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity
/// across the Spot pools included in its launch specifications. By ensuring that the Spot
/// Instances in your Spot Fleet are in different Spot pools, you can improve the
/// availability of your fleet.</p>
/// <p>You can specify tags for the Spot Fleet request and instances launched by the fleet.
/// You cannot tag other resource types in a Spot Fleet request because only the
/// <code>spot-fleet-request</code> and <code>instance</code> resource types are
/// supported.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet requests</a>
/// in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RequestSpotFleet {
    _private: (),
}
impl RequestSpotFleet {
    /// Creates a new builder-style object to manufacture [`RequestSpotFleetInput`](crate::input::RequestSpotFleetInput)
    pub fn builder() -> crate::input::request_spot_fleet_input::Builder {
        crate::input::request_spot_fleet_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RequestSpotFleet {
    type Output = std::result::Result<
        crate::output::RequestSpotFleetOutput,
        crate::error::RequestSpotFleetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_request_spot_fleet_error(response)
        } else {
            crate::operation_deser::parse_request_spot_fleet_response(response)
        }
    }
}

/// <p>Creates a Spot Instance request.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance requests</a> in
/// the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RequestSpotInstances {
    _private: (),
}
impl RequestSpotInstances {
    /// Creates a new builder-style object to manufacture [`RequestSpotInstancesInput`](crate::input::RequestSpotInstancesInput)
    pub fn builder() -> crate::input::request_spot_instances_input::Builder {
        crate::input::request_spot_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RequestSpotInstances {
    type Output = std::result::Result<
        crate::output::RequestSpotInstancesOutput,
        crate::error::RequestSpotInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_request_spot_instances_error(response)
        } else {
            crate::operation_deser::parse_request_spot_instances_response(response)
        }
    }
}

/// <p>Resets the attribute of the specified IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetAddressAttribute {
    _private: (),
}
impl ResetAddressAttribute {
    /// Creates a new builder-style object to manufacture [`ResetAddressAttributeInput`](crate::input::ResetAddressAttributeInput)
    pub fn builder() -> crate::input::reset_address_attribute_input::Builder {
        crate::input::reset_address_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetAddressAttribute {
    type Output = std::result::Result<
        crate::output::ResetAddressAttributeOutput,
        crate::error::ResetAddressAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_address_attribute_error(response)
        } else {
            crate::operation_deser::parse_reset_address_attribute_response(response)
        }
    }
}

/// <p>Resets the default KMS key for EBS encryption for your account in this Region
/// to the Amazon Web Services managed KMS key for EBS.</p>
/// <p>After resetting the default KMS key to the Amazon Web Services managed KMS key, you can continue to encrypt by a
/// customer managed KMS key by specifying it when you create the volume. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS encryption</a>
/// in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetEbsDefaultKmsKeyId {
    _private: (),
}
impl ResetEbsDefaultKmsKeyId {
    /// Creates a new builder-style object to manufacture [`ResetEbsDefaultKmsKeyIdInput`](crate::input::ResetEbsDefaultKmsKeyIdInput)
    pub fn builder() -> crate::input::reset_ebs_default_kms_key_id_input::Builder {
        crate::input::reset_ebs_default_kms_key_id_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetEbsDefaultKmsKeyId {
    type Output = std::result::Result<
        crate::output::ResetEbsDefaultKmsKeyIdOutput,
        crate::error::ResetEbsDefaultKmsKeyIdError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_ebs_default_kms_key_id_error(response)
        } else {
            crate::operation_deser::parse_reset_ebs_default_kms_key_id_response(response)
        }
    }
}

/// <p>Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value.
/// You can only reset the load permission attribute.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetFpgaImageAttribute {
    _private: (),
}
impl ResetFpgaImageAttribute {
    /// Creates a new builder-style object to manufacture [`ResetFpgaImageAttributeInput`](crate::input::ResetFpgaImageAttributeInput)
    pub fn builder() -> crate::input::reset_fpga_image_attribute_input::Builder {
        crate::input::reset_fpga_image_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetFpgaImageAttribute {
    type Output = std::result::Result<
        crate::output::ResetFpgaImageAttributeOutput,
        crate::error::ResetFpgaImageAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_fpga_image_attribute_error(response)
        } else {
            crate::operation_deser::parse_reset_fpga_image_attribute_response(response)
        }
    }
}

/// <p>Resets an attribute of an AMI to its default value.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetImageAttribute {
    _private: (),
}
impl ResetImageAttribute {
    /// Creates a new builder-style object to manufacture [`ResetImageAttributeInput`](crate::input::ResetImageAttributeInput)
    pub fn builder() -> crate::input::reset_image_attribute_input::Builder {
        crate::input::reset_image_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetImageAttribute {
    type Output = std::result::Result<
        crate::output::ResetImageAttributeOutput,
        crate::error::ResetImageAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_image_attribute_error(response)
        } else {
            crate::operation_deser::parse_reset_image_attribute_response(response)
        }
    }
}

/// <p>Resets an attribute of an instance to its default value. To reset the
/// <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped
/// state. To reset the <code>sourceDestCheck</code>, the instance can be either running or
/// stopped.</p>
/// <p>The <code>sourceDestCheck</code> attribute controls whether source/destination
/// checking is enabled. The default value is <code>true</code>, which means checking is
/// enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For
/// more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the
/// <i>Amazon VPC User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetInstanceAttribute {
    _private: (),
}
impl ResetInstanceAttribute {
    /// Creates a new builder-style object to manufacture [`ResetInstanceAttributeInput`](crate::input::ResetInstanceAttributeInput)
    pub fn builder() -> crate::input::reset_instance_attribute_input::Builder {
        crate::input::reset_instance_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetInstanceAttribute {
    type Output = std::result::Result<
        crate::output::ResetInstanceAttributeOutput,
        crate::error::ResetInstanceAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_instance_attribute_error(response)
        } else {
            crate::operation_deser::parse_reset_instance_attribute_response(response)
        }
    }
}

/// <p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetNetworkInterfaceAttribute {
    _private: (),
}
impl ResetNetworkInterfaceAttribute {
    /// Creates a new builder-style object to manufacture [`ResetNetworkInterfaceAttributeInput`](crate::input::ResetNetworkInterfaceAttributeInput)
    pub fn builder() -> crate::input::reset_network_interface_attribute_input::Builder {
        crate::input::reset_network_interface_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetNetworkInterfaceAttribute {
    type Output = std::result::Result<
        crate::output::ResetNetworkInterfaceAttributeOutput,
        crate::error::ResetNetworkInterfaceAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_network_interface_attribute_error(response)
        } else {
            crate::operation_deser::parse_reset_network_interface_attribute_response(response)
        }
    }
}

/// <p>Resets permission settings for the specified snapshot.</p>
/// <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the
/// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetSnapshotAttribute {
    _private: (),
}
impl ResetSnapshotAttribute {
    /// Creates a new builder-style object to manufacture [`ResetSnapshotAttributeInput`](crate::input::ResetSnapshotAttributeInput)
    pub fn builder() -> crate::input::reset_snapshot_attribute_input::Builder {
        crate::input::reset_snapshot_attribute_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetSnapshotAttribute {
    type Output = std::result::Result<
        crate::output::ResetSnapshotAttributeOutput,
        crate::error::ResetSnapshotAttributeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_snapshot_attribute_error(response)
        } else {
            crate::operation_deser::parse_reset_snapshot_attribute_response(response)
        }
    }
}

/// <p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreAddressToClassic {
    _private: (),
}
impl RestoreAddressToClassic {
    /// Creates a new builder-style object to manufacture [`RestoreAddressToClassicInput`](crate::input::RestoreAddressToClassicInput)
    pub fn builder() -> crate::input::restore_address_to_classic_input::Builder {
        crate::input::restore_address_to_classic_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreAddressToClassic {
    type Output = std::result::Result<
        crate::output::RestoreAddressToClassicOutput,
        crate::error::RestoreAddressToClassicError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_address_to_classic_error(response)
        } else {
            crate::operation_deser::parse_restore_address_to_classic_response(response)
        }
    }
}

/// <p>Restores the entries from a previous version of a managed prefix list to a new version of the prefix list.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreManagedPrefixListVersion {
    _private: (),
}
impl RestoreManagedPrefixListVersion {
    /// Creates a new builder-style object to manufacture [`RestoreManagedPrefixListVersionInput`](crate::input::RestoreManagedPrefixListVersionInput)
    pub fn builder() -> crate::input::restore_managed_prefix_list_version_input::Builder {
        crate::input::restore_managed_prefix_list_version_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreManagedPrefixListVersion {
    type Output = std::result::Result<
        crate::output::RestoreManagedPrefixListVersionOutput,
        crate::error::RestoreManagedPrefixListVersionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_managed_prefix_list_version_error(response)
        } else {
            crate::operation_deser::parse_restore_managed_prefix_list_version_response(response)
        }
    }
}

/// <p>Removes an ingress authorization rule from a Client VPN endpoint. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokeClientVpnIngress {
    _private: (),
}
impl RevokeClientVpnIngress {
    /// Creates a new builder-style object to manufacture [`RevokeClientVpnIngressInput`](crate::input::RevokeClientVpnIngressInput)
    pub fn builder() -> crate::input::revoke_client_vpn_ingress_input::Builder {
        crate::input::revoke_client_vpn_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RevokeClientVpnIngress {
    type Output = std::result::Result<
        crate::output::RevokeClientVpnIngressOutput,
        crate::error::RevokeClientVpnIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_revoke_client_vpn_ingress_error(response)
        } else {
            crate::operation_deser::parse_revoke_client_vpn_ingress_response(response)
        }
    }
}

/// <p>[VPC only] Removes the specified outbound (egress) rules from a security group for EC2-VPC.
/// This action does not apply to security groups for use in EC2-Classic.</p>
/// <p>You can specify rules using either rule IDs or security group rule properties. If you use
/// rule properties, the values that you specify (for example, ports) must match the existing rule's
/// values exactly. Each rule has a protocol, from and to ports, and destination (CIDR range,
/// security group, or prefix list). For the TCP and UDP protocols, you must also specify the
/// destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type
/// and code. If the security group rule has a description, you do not need to specify the description
/// to revoke the rule.</p>
/// <p>[Default VPC] If the values you specify do not match the existing rule's values, no error is
/// returned, and the output describes the security group rules that were not revoked.</p>
/// <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p>
/// <p>Rule changes are propagated to instances within the security group as quickly as possible. However,
/// a small delay might occur.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokeSecurityGroupEgress {
    _private: (),
}
impl RevokeSecurityGroupEgress {
    /// Creates a new builder-style object to manufacture [`RevokeSecurityGroupEgressInput`](crate::input::RevokeSecurityGroupEgressInput)
    pub fn builder() -> crate::input::revoke_security_group_egress_input::Builder {
        crate::input::revoke_security_group_egress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RevokeSecurityGroupEgress {
    type Output = std::result::Result<
        crate::output::RevokeSecurityGroupEgressOutput,
        crate::error::RevokeSecurityGroupEgressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_revoke_security_group_egress_error(response)
        } else {
            crate::operation_deser::parse_revoke_security_group_egress_response(response)
        }
    }
}

/// <p>Removes the specified inbound (ingress) rules from a security group.</p>
/// <p>You can specify rules using either rule IDs or security group rule properties. If you use
/// rule properties, the values that you specify (for example, ports) must match the existing rule's
/// values exactly. Each rule has a protocol, from and to ports, and source (CIDR range,
/// security group, or prefix list). For the TCP and UDP protocols, you must also specify the
/// destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type
/// and code. If the security group rule has a description, you do not need to specify the description
/// to revoke the rule.</p>
/// <p>[EC2-Classic, default VPC] If the values you specify do not match the existing rule's values, no error is
/// returned, and the output describes the security group rules that were not revoked.</p>
/// <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p>
/// <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokeSecurityGroupIngress {
    _private: (),
}
impl RevokeSecurityGroupIngress {
    /// Creates a new builder-style object to manufacture [`RevokeSecurityGroupIngressInput`](crate::input::RevokeSecurityGroupIngressInput)
    pub fn builder() -> crate::input::revoke_security_group_ingress_input::Builder {
        crate::input::revoke_security_group_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RevokeSecurityGroupIngress {
    type Output = std::result::Result<
        crate::output::RevokeSecurityGroupIngressOutput,
        crate::error::RevokeSecurityGroupIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_revoke_security_group_ingress_error(response)
        } else {
            crate::operation_deser::parse_revoke_security_group_ingress_response(response)
        }
    }
}

/// <p>Launches the specified number of instances using an AMI for which you have
/// permissions.</p>
/// <p>You can specify a number of options, or leave the default options. The following rules
/// apply:</p>
/// <ul>
/// <li>
/// <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from
/// your default VPC for you. If you don't have a default VPC, you must specify a
/// subnet ID in the request.</p>
/// </li>
/// <li>
/// <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for
/// you.</p>
/// </li>
/// <li>
/// <p>Some instance types must be launched into a VPC. If you do not have a default
/// VPC, or if you do not specify a subnet ID, the request fails. For more
/// information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance types available only in a VPC</a>.</p>
/// </li>
/// <li>
/// <p>[EC2-VPC] All instances have a network interface with a primary private IPv4
/// address. If you don't specify this address, we choose one from the IPv4 range of
/// your subnet.</p>
/// </li>
/// <li>
/// <p>Not all instance types support IPv6 addresses. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance
/// types</a>.</p>
/// </li>
/// <li>
/// <p>If you don't specify a security group ID, we use the default security group.
/// For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security
/// groups</a>.</p>
/// </li>
/// <li>
/// <p>If any of the AMIs have a product code attached for which the user has not
/// subscribed, the request fails.</p>
/// </li>
/// </ul>
/// <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>,
/// which is a resource that contains the parameters to launch an instance. When you launch
/// an instance using <a>RunInstances</a>, you can specify the launch template
/// instead of specifying the launch parameters.</p>
/// <p>To ensure faster instance launches, break up large requests into smaller batches. For
/// example, create five separate launch requests for 100 instances each instead of one
/// launch request for 500 instances.</p>
/// <p>An instance is ready for you to use when it's in the <code>running</code> state. You
/// can check the state of your instance using <a>DescribeInstances</a>. You can
/// tag instances and EBS volumes during launch, after launch, or both. For more
/// information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2
/// resources</a>.</p>
/// <p>Linux instances have access to the public key of the key pair at boot. You can use
/// this key to provide secure access to the instance. Amazon EC2 public images use this
/// feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key
/// pairs</a>.</p>
/// <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What to do if
/// an instance immediately terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting connecting to your instance</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RunInstances {
    _private: (),
}
impl RunInstances {
    /// Creates a new builder-style object to manufacture [`RunInstancesInput`](crate::input::RunInstancesInput)
    pub fn builder() -> crate::input::run_instances_input::Builder {
        crate::input::run_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RunInstances {
    type Output =
        std::result::Result<crate::output::RunInstancesOutput, crate::error::RunInstancesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_run_instances_error(response)
        } else {
            crate::operation_deser::parse_run_instances_response(response)
        }
    }
}

/// <p>Launches the specified Scheduled Instances.</p>
/// <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p>
/// <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance,
/// but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends,
/// you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RunScheduledInstances {
    _private: (),
}
impl RunScheduledInstances {
    /// Creates a new builder-style object to manufacture [`RunScheduledInstancesInput`](crate::input::RunScheduledInstancesInput)
    pub fn builder() -> crate::input::run_scheduled_instances_input::Builder {
        crate::input::run_scheduled_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RunScheduledInstances {
    type Output = std::result::Result<
        crate::output::RunScheduledInstancesOutput,
        crate::error::RunScheduledInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_run_scheduled_instances_error(response)
        } else {
            crate::operation_deser::parse_run_scheduled_instances_response(response)
        }
    }
}

/// <p>Searches for routes in the specified local gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchLocalGatewayRoutes {
    _private: (),
}
impl SearchLocalGatewayRoutes {
    /// Creates a new builder-style object to manufacture [`SearchLocalGatewayRoutesInput`](crate::input::SearchLocalGatewayRoutesInput)
    pub fn builder() -> crate::input::search_local_gateway_routes_input::Builder {
        crate::input::search_local_gateway_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchLocalGatewayRoutes {
    type Output = std::result::Result<
        crate::output::SearchLocalGatewayRoutesOutput,
        crate::error::SearchLocalGatewayRoutesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_local_gateway_routes_error(response)
        } else {
            crate::operation_deser::parse_search_local_gateway_routes_response(response)
        }
    }
}

/// <p>Searches one or more  transit gateway multicast groups and returns the group membership information.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchTransitGatewayMulticastGroups {
    _private: (),
}
impl SearchTransitGatewayMulticastGroups {
    /// Creates a new builder-style object to manufacture [`SearchTransitGatewayMulticastGroupsInput`](crate::input::SearchTransitGatewayMulticastGroupsInput)
    pub fn builder() -> crate::input::search_transit_gateway_multicast_groups_input::Builder {
        crate::input::search_transit_gateway_multicast_groups_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchTransitGatewayMulticastGroups {
    type Output = std::result::Result<
        crate::output::SearchTransitGatewayMulticastGroupsOutput,
        crate::error::SearchTransitGatewayMulticastGroupsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_transit_gateway_multicast_groups_error(response)
        } else {
            crate::operation_deser::parse_search_transit_gateway_multicast_groups_response(response)
        }
    }
}

/// <p>Searches for routes in the specified transit gateway route table.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchTransitGatewayRoutes {
    _private: (),
}
impl SearchTransitGatewayRoutes {
    /// Creates a new builder-style object to manufacture [`SearchTransitGatewayRoutesInput`](crate::input::SearchTransitGatewayRoutesInput)
    pub fn builder() -> crate::input::search_transit_gateway_routes_input::Builder {
        crate::input::search_transit_gateway_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SearchTransitGatewayRoutes {
    type Output = std::result::Result<
        crate::output::SearchTransitGatewayRoutesOutput,
        crate::error::SearchTransitGatewayRoutesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_transit_gateway_routes_error(response)
        } else {
            crate::operation_deser::parse_search_transit_gateway_routes_response(response)
        }
    }
}

/// <p>Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a
/// <i>kernel panic</i> (on Linux instances), or a
/// <i>blue screen</i>/<i>stop error</i> (on Windows
/// instances). For instances based on Intel and AMD processors, the interrupt is
/// received as a <i>non-maskable interrupt</i> (NMI).</p>
/// <p>In general, the operating system crashes and reboots when a kernel panic or stop
/// error is triggered. The operating system can also be configured to perform diagnostic
/// tasks, such as generating a memory dump file, loading a secondary kernel, or
/// obtaining a call trace.</p>
/// <p>Before sending a diagnostic interrupt to your instance, ensure that its operating
/// system is configured to perform the required diagnostic tasks.</p>
/// <p>For more information about configuring your operating system to generate a crash dump
/// when a kernel panic or stop error occurs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send a diagnostic interrupt</a> (Linux instances) or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send a Diagnostic Interrupt</a> (Windows instances).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendDiagnosticInterrupt {
    _private: (),
}
impl SendDiagnosticInterrupt {
    /// Creates a new builder-style object to manufacture [`SendDiagnosticInterruptInput`](crate::input::SendDiagnosticInterruptInput)
    pub fn builder() -> crate::input::send_diagnostic_interrupt_input::Builder {
        crate::input::send_diagnostic_interrupt_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendDiagnosticInterrupt {
    type Output = std::result::Result<
        crate::output::SendDiagnosticInterruptOutput,
        crate::error::SendDiagnosticInterruptError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_diagnostic_interrupt_error(response)
        } else {
            crate::operation_deser::parse_send_diagnostic_interrupt_response(response)
        }
    }
}

/// <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p>
/// <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and
/// started. When an instance is stopped, the compute resources are released and you are not
/// billed for instance usage. However, your root partition Amazon EBS volume remains and
/// continues to persist your data, and you are charged for Amazon EBS volume usage. You can
/// restart your instance at any time. Every time you start your instance, Amazon EC2
/// charges a one-minute minimum for instance usage, and thereafter charges per second for
/// instance usage.</p>
/// <p>Before stopping an instance, make sure it is in a state from which it can be
/// restarted. Stopping an instance does not preserve data stored in RAM.</p>
/// <p>Performing this operation on an instance that uses an instance store as its root
/// device returns an error.</p>
/// <p>If you attempt to start a T3 instance with <code>host</code> tenancy and the <code>unlimted</code>
/// CPU credit option, the request fails. The <code>unlimited</code> CPU credit option is not
/// supported on Dedicated Hosts. Before you start the instance, either change its CPU credit
/// option to <code>standard</code>, or change its tenancy to <code>default</code> or <code>dedicated</code>.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping instances</a> in the
/// <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartInstances {
    _private: (),
}
impl StartInstances {
    /// Creates a new builder-style object to manufacture [`StartInstancesInput`](crate::input::StartInstancesInput)
    pub fn builder() -> crate::input::start_instances_input::Builder {
        crate::input::start_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartInstances {
    type Output =
        std::result::Result<crate::output::StartInstancesOutput, crate::error::StartInstancesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_instances_error(response)
        } else {
            crate::operation_deser::parse_start_instances_response(response)
        }
    }
}

/// <p>Starts analyzing the specified path. If the path is reachable, the
/// operation returns the shortest feasible path.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartNetworkInsightsAnalysis {
    _private: (),
}
impl StartNetworkInsightsAnalysis {
    /// Creates a new builder-style object to manufacture [`StartNetworkInsightsAnalysisInput`](crate::input::StartNetworkInsightsAnalysisInput)
    pub fn builder() -> crate::input::start_network_insights_analysis_input::Builder {
        crate::input::start_network_insights_analysis_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartNetworkInsightsAnalysis {
    type Output = std::result::Result<
        crate::output::StartNetworkInsightsAnalysisOutput,
        crate::error::StartNetworkInsightsAnalysisError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_network_insights_analysis_error(response)
        } else {
            crate::operation_deser::parse_start_network_insights_analysis_response(response)
        }
    }
}

/// <p>Initiates the verification process to prove that the service provider owns the private
/// DNS name domain for the endpoint service.</p>
/// <p>The service provider must successfully perform the verification before the consumer can use the name to access the service.</p>
/// <p>Before the service provider runs this command, they must add a record to the DNS server. For more information, see  <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html#add-dns-txt-record">Adding a TXT Record to Your Domain's DNS Server </a> in the <i>Amazon VPC User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartVpcEndpointServicePrivateDnsVerification {
    _private: (),
}
impl StartVpcEndpointServicePrivateDnsVerification {
    /// Creates a new builder-style object to manufacture [`StartVpcEndpointServicePrivateDnsVerificationInput`](crate::input::StartVpcEndpointServicePrivateDnsVerificationInput)
    pub fn builder(
    ) -> crate::input::start_vpc_endpoint_service_private_dns_verification_input::Builder {
        crate::input::start_vpc_endpoint_service_private_dns_verification_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartVpcEndpointServicePrivateDnsVerification {
    type Output = std::result::Result<
        crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput,
        crate::error::StartVpcEndpointServicePrivateDnsVerificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_vpc_endpoint_service_private_dns_verification_error(
                response,
            )
        } else {
            crate::operation_deser::parse_start_vpc_endpoint_service_private_dns_verification_response(response)
        }
    }
}

/// <p>Stops an Amazon EBS-backed instance.</p>
/// <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for
/// hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation
/// prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the
/// <i>Amazon EC2 User Guide</i>.</p>
/// <p>We don't charge usage for a stopped instance, or data transfer fees; however, your
/// root partition Amazon EBS volume remains and continues to persist your data, and you are
/// charged for Amazon EBS volume usage. Every time you start your instance, Amazon EC2
/// charges a one-minute minimum for instance usage, and thereafter charges per second for
/// instance usage.</p>
/// <p>You can't stop or hibernate instance store-backed instances. You can't use the Stop
/// action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate
/// Spot Instances when they are interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating interrupted Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// <p>When you stop or hibernate an instance, we shut it down. You can restart your instance
/// at any time. Before stopping or hibernating an instance, make sure it is in a state from
/// which it can be restarted. Stopping an instance does not preserve data stored in RAM,
/// but hibernating an instance does preserve data stored in RAM. If an instance cannot
/// hibernate successfully, a normal shutdown occurs.</p>
/// <p>Stopping and hibernating an instance is different to rebooting or terminating it. For
/// example, when you stop or hibernate an instance, the root device and any other devices
/// attached to the instance persist. When you terminate an instance, the root device and
/// any other devices attached during the instance launch are automatically deleted. For
/// more information about the differences between rebooting, stopping, hibernating, and
/// terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
/// <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If
/// your instance appears stuck in the stopping state after a period of time, there may be
/// an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting
/// stopping your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopInstances {
    _private: (),
}
impl StopInstances {
    /// Creates a new builder-style object to manufacture [`StopInstancesInput`](crate::input::StopInstancesInput)
    pub fn builder() -> crate::input::stop_instances_input::Builder {
        crate::input::stop_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopInstances {
    type Output =
        std::result::Result<crate::output::StopInstancesOutput, crate::error::StopInstancesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_instances_error(response)
        } else {
            crate::operation_deser::parse_stop_instances_response(response)
        }
    }
}

/// <p>Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TerminateClientVpnConnections {
    _private: (),
}
impl TerminateClientVpnConnections {
    /// Creates a new builder-style object to manufacture [`TerminateClientVpnConnectionsInput`](crate::input::TerminateClientVpnConnectionsInput)
    pub fn builder() -> crate::input::terminate_client_vpn_connections_input::Builder {
        crate::input::terminate_client_vpn_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TerminateClientVpnConnections {
    type Output = std::result::Result<
        crate::output::TerminateClientVpnConnectionsOutput,
        crate::error::TerminateClientVpnConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_terminate_client_vpn_connections_error(response)
        } else {
            crate::operation_deser::parse_terminate_client_vpn_connections_response(response)
        }
    }
}

/// <p>Shuts down the specified instances. This operation is idempotent; if you terminate an
/// instance more than once, each call succeeds. </p>
/// <p>If you specify multiple instances and the request fails (for example, because of a
/// single incorrect instance ID), none of the instances are terminated.</p>
/// <p>If you terminate multiple instances across multiple Availability Zones, and one or more
/// of the specified instances are enabled for termination protection, the request fails with
/// the following results:</p>
/// <ul>
/// <li>
/// <p>The specified instances that are in the same Availability Zone as the protected
/// instance are not terminated.</p>
/// </li>
/// <li>
/// <p>The specified instances that are in different Availability Zones, where no other
/// specified instances are protected, are successfully terminated.</p>
/// </li>
/// </ul>
/// <p>For example, say you have the following instances:</p>
/// <ul>
/// <li>
/// <p>Instance A: <code>us-east-1a</code>; Not protected</p>
/// </li>
/// <li>
/// <p>Instance B: <code>us-east-1a</code>; Not protected</p>
/// </li>
/// <li>
/// <p>Instance C: <code>us-east-1b</code>; Protected</p>
/// </li>
/// <li>
/// <p>Instance D: <code>us-east-1b</code>; not protected</p>
/// </li>
/// </ul>
/// <p>If you attempt to terminate all of these instances in the same request, the request reports
/// failure with the following results:</p>
/// <ul>
/// <li>
/// <p>Instance A and Instance B are successfully terminated because none of the specified
/// instances in <code>us-east-1a</code> are enabled for termination protection.</p>
/// </li>
/// <li>
/// <p>Instance C and Instance D fail to terminate because at least one of the specified
/// instances in <code>us-east-1b</code> (Instance C) is enabled for termination protection.</p>
/// </li>
/// </ul>
/// <p>Terminated instances remain visible after termination (for approximately one
/// hour).</p>
/// <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance
/// launched. Volumes attached after instance launch continue running.</p>
/// <p>You can stop, start, and terminate EBS-backed instances. You can only terminate
/// instance store-backed instances. What happens to an instance differs if you stop it or
/// terminate it. For example, when you stop an instance, the root device and any other
/// devices attached to the instance persist. When you terminate an instance, any attached
/// EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set
/// to <code>true</code> are automatically deleted. For more information about the
/// differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a>
/// in the <i>Amazon EC2 User Guide</i>.</p>
/// <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting terminating your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TerminateInstances {
    _private: (),
}
impl TerminateInstances {
    /// Creates a new builder-style object to manufacture [`TerminateInstancesInput`](crate::input::TerminateInstancesInput)
    pub fn builder() -> crate::input::terminate_instances_input::Builder {
        crate::input::terminate_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TerminateInstances {
    type Output = std::result::Result<
        crate::output::TerminateInstancesOutput,
        crate::error::TerminateInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_terminate_instances_error(response)
        } else {
            crate::operation_deser::parse_terminate_instances_response(response)
        }
    }
}

/// <p>Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from a network interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnassignIpv6Addresses {
    _private: (),
}
impl UnassignIpv6Addresses {
    /// Creates a new builder-style object to manufacture [`UnassignIpv6AddressesInput`](crate::input::UnassignIpv6AddressesInput)
    pub fn builder() -> crate::input::unassign_ipv6_addresses_input::Builder {
        crate::input::unassign_ipv6_addresses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnassignIpv6Addresses {
    type Output = std::result::Result<
        crate::output::UnassignIpv6AddressesOutput,
        crate::error::UnassignIpv6AddressesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unassign_ipv6_addresses_error(response)
        } else {
            crate::operation_deser::parse_unassign_ipv6_addresses_response(response)
        }
    }
}

/// <p>Unassigns one or more secondary private IP addresses, or IPv4 Prefix Delegation prefixes from a network interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnassignPrivateIpAddresses {
    _private: (),
}
impl UnassignPrivateIpAddresses {
    /// Creates a new builder-style object to manufacture [`UnassignPrivateIpAddressesInput`](crate::input::UnassignPrivateIpAddressesInput)
    pub fn builder() -> crate::input::unassign_private_ip_addresses_input::Builder {
        crate::input::unassign_private_ip_addresses_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnassignPrivateIpAddresses {
    type Output = std::result::Result<
        crate::output::UnassignPrivateIpAddressesOutput,
        crate::error::UnassignPrivateIpAddressesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unassign_private_ip_addresses_error(response)
        } else {
            crate::operation_deser::parse_unassign_private_ip_addresses_response(response)
        }
    }
}

/// <p>Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring
/// your instances and volumes</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnmonitorInstances {
    _private: (),
}
impl UnmonitorInstances {
    /// Creates a new builder-style object to manufacture [`UnmonitorInstancesInput`](crate::input::UnmonitorInstancesInput)
    pub fn builder() -> crate::input::unmonitor_instances_input::Builder {
        crate::input::unmonitor_instances_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnmonitorInstances {
    type Output = std::result::Result<
        crate::output::UnmonitorInstancesOutput,
        crate::error::UnmonitorInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unmonitor_instances_error(response)
        } else {
            crate::operation_deser::parse_unmonitor_instances_response(response)
        }
    }
}

/// <p>[VPC only] Updates the description of an egress (outbound) security group rule. You
/// can replace an existing description, or add a description to a rule that did not have one
/// previously. You can remove a description for a security group rule by omitting the
/// description parameter in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSecurityGroupRuleDescriptionsEgress {
    _private: (),
}
impl UpdateSecurityGroupRuleDescriptionsEgress {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsEgressInput`](crate::input::UpdateSecurityGroupRuleDescriptionsEgressInput)
    pub fn builder() -> crate::input::update_security_group_rule_descriptions_egress_input::Builder
    {
        crate::input::update_security_group_rule_descriptions_egress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSecurityGroupRuleDescriptionsEgress {
    type Output = std::result::Result<
        crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput,
        crate::error::UpdateSecurityGroupRuleDescriptionsEgressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_security_group_rule_descriptions_egress_error(
                response,
            )
        } else {
            crate::operation_deser::parse_update_security_group_rule_descriptions_egress_response(
                response,
            )
        }
    }
}

/// <p>Updates the description of an ingress (inbound) security group rule. You can replace an
/// existing description, or add a description to a rule that did not have one previously.
/// You can remove a description for a security group rule by omitting the description
/// parameter in the request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSecurityGroupRuleDescriptionsIngress {
    _private: (),
}
impl UpdateSecurityGroupRuleDescriptionsIngress {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsIngressInput`](crate::input::UpdateSecurityGroupRuleDescriptionsIngressInput)
    pub fn builder() -> crate::input::update_security_group_rule_descriptions_ingress_input::Builder
    {
        crate::input::update_security_group_rule_descriptions_ingress_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSecurityGroupRuleDescriptionsIngress {
    type Output = std::result::Result<
        crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput,
        crate::error::UpdateSecurityGroupRuleDescriptionsIngressError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_security_group_rule_descriptions_ingress_error(
                response,
            )
        } else {
            crate::operation_deser::parse_update_security_group_rule_descriptions_ingress_response(
                response,
            )
        }
    }
}

/// <p>Stops advertising an address range that is provisioned as an address pool.</p>
/// <p>You can perform this operation at most once every 10 seconds, even if you specify different
/// address ranges each time.</p>
/// <p>It can take a few minutes before traffic to the specified addresses stops routing to Amazon Web Services
/// because of BGP propagation delays.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct WithdrawByoipCidr {
    _private: (),
}
impl WithdrawByoipCidr {
    /// Creates a new builder-style object to manufacture [`WithdrawByoipCidrInput`](crate::input::WithdrawByoipCidrInput)
    pub fn builder() -> crate::input::withdraw_byoip_cidr_input::Builder {
        crate::input::withdraw_byoip_cidr_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for WithdrawByoipCidr {
    type Output = std::result::Result<
        crate::output::WithdrawByoipCidrOutput,
        crate::error::WithdrawByoipCidrError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_withdraw_byoip_cidr_error(response)
        } else {
            crate::operation_deser::parse_withdraw_byoip_cidr_response(response)
        }
    }
}
