// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AcceptReservedInstancesExchangeQuoteError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AcceptReservedInstancesExchangeQuoteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AcceptReservedInstancesExchangeQuoteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::AcceptTransitGatewayMulticastDomainAssociationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::AcceptTransitGatewayMulticastDomainAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AcceptTransitGatewayMulticastDomainAssociationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AcceptTransitGatewayPeeringAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::AcceptTransitGatewayPeeringAttachmentError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AcceptTransitGatewayPeeringAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AcceptTransitGatewayVpcAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AcceptTransitGatewayVpcAttachmentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AcceptTransitGatewayVpcAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AcceptVpcEndpointConnectionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AcceptVpcEndpointConnectionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AcceptVpcEndpointConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AcceptVpcPeeringConnectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AcceptVpcPeeringConnectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AcceptVpcPeeringConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdvertiseByoipCidrError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdvertiseByoipCidrError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdvertiseByoipCidrErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AllocateAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AllocateAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AllocateAddressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AllocateHostsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AllocateHostsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AllocateHostsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::ApplySecurityGroupsToClientVpnTargetNetworkError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ApplySecurityGroupsToClientVpnTargetNetworkError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ApplySecurityGroupsToClientVpnTargetNetworkErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssignIpv6AddressesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssignIpv6AddressesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssignIpv6AddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssignPrivateIpAddressesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssignPrivateIpAddressesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssignPrivateIpAddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateAddressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateClientVpnTargetNetworkError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateClientVpnTargetNetworkError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateClientVpnTargetNetworkErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateDhcpOptionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateDhcpOptionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateDhcpOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateEnclaveCertificateIamRoleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateEnclaveCertificateIamRoleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateEnclaveCertificateIamRoleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateIamInstanceProfileError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateIamInstanceProfileError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateIamInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateRouteTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateRouteTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateSubnetCidrBlockError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateSubnetCidrBlockError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateSubnetCidrBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateTransitGatewayMulticastDomainError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::AssociateTransitGatewayMulticastDomainError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateTransitGatewayMulticastDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateTransitGatewayRouteTableError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateTransitGatewayRouteTableError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateTransitGatewayRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateTrunkInterfaceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AssociateTrunkInterfaceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateTrunkInterfaceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateVpcCidrBlockError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateVpcCidrBlockError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AssociateVpcCidrBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachClassicLinkVpcError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachClassicLinkVpcError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachClassicLinkVpcErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachInternetGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachInternetGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachInternetGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachNetworkInterfaceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachNetworkInterfaceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachNetworkInterfaceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachVolumeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachVolumeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachVolumeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachVpnGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachVpnGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachVpnGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AuthorizeClientVpnIngressError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AuthorizeClientVpnIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AuthorizeClientVpnIngressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AuthorizeSecurityGroupEgressError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AuthorizeSecurityGroupEgressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AuthorizeSecurityGroupEgressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AuthorizeSecurityGroupIngressError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AuthorizeSecurityGroupIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AuthorizeSecurityGroupIngressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BundleInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::BundleInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BundleInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelBundleTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelBundleTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelBundleTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelCapacityReservationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelCapacityReservationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelCapacityReservationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelConversionTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelConversionTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelConversionTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelExportTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelExportTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelExportTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelImportTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelImportTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelImportTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelReservedInstancesListingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelReservedInstancesListingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelReservedInstancesListingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelSpotFleetRequestsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelSpotFleetRequestsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelSpotFleetRequestsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelSpotInstanceRequestsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelSpotInstanceRequestsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelSpotInstanceRequestsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ConfirmProductInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ConfirmProductInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ConfirmProductInstanceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyFpgaImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyFpgaImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyFpgaImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopyImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopyImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopyImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CopySnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CopySnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CopySnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCapacityReservationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateCapacityReservationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCapacityReservationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCarrierGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCarrierGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCarrierGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateClientVpnEndpointError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateClientVpnEndpointError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateClientVpnEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateClientVpnRouteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateClientVpnRouteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateClientVpnRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCustomerGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateCustomerGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateCustomerGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDefaultSubnetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDefaultSubnetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDefaultSubnetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDefaultVpcError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDefaultVpcError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDefaultVpcErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateDhcpOptionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateDhcpOptionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateDhcpOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateEgressOnlyInternetGatewayError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateEgressOnlyInternetGatewayError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateEgressOnlyInternetGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFleetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFlowLogsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFlowLogsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFlowLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateFpgaImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateFpgaImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateFpgaImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateInstanceExportTaskError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateInstanceExportTaskError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateInstanceExportTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateInternetGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateInternetGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateInternetGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateKeyPairError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateKeyPairError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateKeyPairErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLaunchTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLaunchTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLaunchTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLaunchTemplateVersionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateLaunchTemplateVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLaunchTemplateVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLocalGatewayRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateLocalGatewayRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLocalGatewayRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::CreateLocalGatewayRouteTableVpcAssociationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateLocalGatewayRouteTableVpcAssociationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLocalGatewayRouteTableVpcAssociationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateManagedPrefixListError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateManagedPrefixListError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateManagedPrefixListErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNatGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateNatGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNatGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNetworkAclError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateNetworkAclError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNetworkAclErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNetworkAclEntryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateNetworkAclEntryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNetworkAclEntryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNetworkInsightsPathError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateNetworkInsightsPathError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNetworkInsightsPathErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNetworkInterfaceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateNetworkInterfaceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNetworkInterfaceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateNetworkInterfacePermissionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateNetworkInterfacePermissionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateNetworkInterfacePermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreatePlacementGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreatePlacementGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreatePlacementGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReplaceRootVolumeTaskError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateReplaceRootVolumeTaskError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateReplaceRootVolumeTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReservedInstancesListingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateReservedInstancesListingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateReservedInstancesListingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRestoreImageTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRestoreImageTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRestoreImageTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRouteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRouteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRouteErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateRouteTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateRouteTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSecurityGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSecurityGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSecurityGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSnapshotsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSnapshotsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSnapshotsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSpotDatafeedSubscriptionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateSpotDatafeedSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSpotDatafeedSubscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateStoreImageTaskError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateStoreImageTaskError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateStoreImageTaskErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateSubnetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateSubnetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateSubnetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficMirrorFilterError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTrafficMirrorFilterError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrafficMirrorFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficMirrorFilterRuleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTrafficMirrorFilterRuleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrafficMirrorFilterRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficMirrorSessionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTrafficMirrorSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrafficMirrorSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrafficMirrorTargetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTrafficMirrorTargetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTrafficMirrorTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayConnectError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayConnectError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayConnectErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayConnectPeerError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayConnectPeerError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayConnectPeerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayMulticastDomainError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayMulticastDomainError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayMulticastDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayPeeringAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateTransitGatewayPeeringAttachmentError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayPeeringAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayPrefixListReferenceError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateTransitGatewayPrefixListReferenceError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayPrefixListReferenceErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayRouteTableError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayRouteTableError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTransitGatewayVpcAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateTransitGatewayVpcAttachmentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTransitGatewayVpcAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVolumeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVolumeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVolumeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpcError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVpcError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpcErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpcEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVpcEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpcEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpcEndpointConnectionNotificationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateVpcEndpointConnectionNotificationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpcEndpointConnectionNotificationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpcEndpointServiceConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateVpcEndpointServiceConfigurationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpcEndpointServiceConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpcPeeringConnectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateVpcPeeringConnectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpcPeeringConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpnConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVpnConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpnConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpnConnectionRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateVpnConnectionRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpnConnectionRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateVpnGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateVpnGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateVpnGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCarrierGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCarrierGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCarrierGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteClientVpnEndpointError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteClientVpnEndpointError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteClientVpnEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteClientVpnRouteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteClientVpnRouteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteClientVpnRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCustomerGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteCustomerGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCustomerGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteDhcpOptionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteDhcpOptionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteDhcpOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteEgressOnlyInternetGatewayError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteEgressOnlyInternetGatewayError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteEgressOnlyInternetGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFleetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFleetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFleetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFlowLogsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFlowLogsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFlowLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteFpgaImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteFpgaImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteFpgaImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteInternetGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteInternetGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteInternetGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteKeyPairError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteKeyPairError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteKeyPairErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLaunchTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLaunchTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLaunchTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLaunchTemplateVersionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteLaunchTemplateVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLaunchTemplateVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLocalGatewayRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteLocalGatewayRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLocalGatewayRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DeleteLocalGatewayRouteTableVpcAssociationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteLocalGatewayRouteTableVpcAssociationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLocalGatewayRouteTableVpcAssociationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteManagedPrefixListError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteManagedPrefixListError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteManagedPrefixListErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNatGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteNatGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNatGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkAclError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteNetworkAclError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkAclErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkAclEntryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteNetworkAclEntryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkAclEntryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkInsightsAnalysisError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteNetworkInsightsAnalysisError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkInsightsAnalysisErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkInsightsPathError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteNetworkInsightsPathError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkInsightsPathErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkInterfaceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteNetworkInterfaceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkInterfaceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNetworkInterfacePermissionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteNetworkInterfacePermissionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNetworkInterfacePermissionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePlacementGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePlacementGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePlacementGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteQueuedReservedInstancesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteQueuedReservedInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteQueuedReservedInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRouteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRouteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRouteErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteRouteTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteRouteTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSecurityGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSecurityGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSecurityGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSpotDatafeedSubscriptionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteSpotDatafeedSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSpotDatafeedSubscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteSubnetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteSubnetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteSubnetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorFilterError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorFilterError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrafficMirrorFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorFilterRuleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorFilterRuleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrafficMirrorFilterRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorSessionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrafficMirrorSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorTargetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTrafficMirrorTargetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTrafficMirrorTargetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayConnectError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayConnectError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayConnectErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayConnectPeerError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayConnectPeerError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayConnectPeerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayMulticastDomainError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayMulticastDomainError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayMulticastDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayPeeringAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteTransitGatewayPeeringAttachmentError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayPeeringAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayPrefixListReferenceError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteTransitGatewayPrefixListReferenceError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayPrefixListReferenceErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayRouteTableError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayRouteTableError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTransitGatewayVpcAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteTransitGatewayVpcAttachmentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTransitGatewayVpcAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVolumeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVolumeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVolumeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpcError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVpcError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpcErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DeleteVpcEndpointConnectionNotificationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteVpcEndpointConnectionNotificationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpcEndpointConnectionNotificationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpcEndpointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVpcEndpointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpcEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpcEndpointServiceConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteVpcEndpointServiceConfigurationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpcEndpointServiceConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpcPeeringConnectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteVpcPeeringConnectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpcPeeringConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpnConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVpnConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpnConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpnConnectionRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteVpnConnectionRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpnConnectionRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVpnGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteVpnGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVpnGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeprovisionByoipCidrError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeprovisionByoipCidrError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeprovisionByoipCidrErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeregisterImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeregisterImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DeregisterInstanceEventNotificationAttributesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeregisterInstanceEventNotificationAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterInstanceEventNotificationAttributesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DeregisterTransitGatewayMulticastGroupMembersError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeregisterTransitGatewayMulticastGroupMembersError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterTransitGatewayMulticastGroupMembersErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DeregisterTransitGatewayMulticastGroupSourcesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeregisterTransitGatewayMulticastGroupSourcesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeregisterTransitGatewayMulticastGroupSourcesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAddressesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAddressesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAddressesAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAddressesAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAddressesAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAggregateIdFormatError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAggregateIdFormatError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAggregateIdFormatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAvailabilityZonesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAvailabilityZonesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAvailabilityZonesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeBundleTasksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeBundleTasksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeBundleTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeByoipCidrsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeByoipCidrsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeByoipCidrsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCapacityReservationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCapacityReservationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCapacityReservationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCarrierGatewaysError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCarrierGatewaysError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCarrierGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClassicLinkInstancesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeClassicLinkInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClassicLinkInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClientVpnAuthorizationRulesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeClientVpnAuthorizationRulesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClientVpnAuthorizationRulesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClientVpnConnectionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeClientVpnConnectionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClientVpnConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClientVpnEndpointsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeClientVpnEndpointsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClientVpnEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClientVpnRoutesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeClientVpnRoutesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClientVpnRoutesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClientVpnTargetNetworksError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeClientVpnTargetNetworksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClientVpnTargetNetworksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCoipPoolsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeCoipPoolsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCoipPoolsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeConversionTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeConversionTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeConversionTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeCustomerGatewaysError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeCustomerGatewaysError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeCustomerGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeDhcpOptionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeDhcpOptionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeDhcpOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeEgressOnlyInternetGatewaysError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeEgressOnlyInternetGatewaysError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeEgressOnlyInternetGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeElasticGpusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeElasticGpusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeElasticGpusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExportImageTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeExportImageTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExportImageTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeExportTasksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeExportTasksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeExportTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFastSnapshotRestoresError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeFastSnapshotRestoresError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFastSnapshotRestoresErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFleetHistoryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFleetHistoryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFleetHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFleetInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFleetInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFleetInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFleetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFleetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFleetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFlowLogsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFlowLogsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFlowLogsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFpgaImageAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeFpgaImageAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFpgaImageAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeFpgaImagesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeFpgaImagesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeFpgaImagesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHostReservationOfferingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeHostReservationOfferingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHostReservationOfferingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHostReservationsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeHostReservationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHostReservationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeHostsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeHostsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeHostsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeIamInstanceProfileAssociationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeIamInstanceProfileAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeIamInstanceProfileAssociationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeIdentityIdFormatError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeIdentityIdFormatError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeIdentityIdFormatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeIdFormatError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeIdFormatError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeIdFormatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeImageAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeImageAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeImageAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeImagesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeImagesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeImagesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeImportImageTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeImportImageTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeImportImageTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeImportSnapshotTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeImportSnapshotTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeImportSnapshotTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstanceAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceCreditSpecificationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstanceCreditSpecificationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceCreditSpecificationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeInstanceEventNotificationAttributesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeInstanceEventNotificationAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceEventNotificationAttributesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeInstanceStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceTypeOfferingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstanceTypeOfferingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceTypeOfferingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceTypesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeInstanceTypesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInternetGatewaysError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInternetGatewaysError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInternetGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeIpv6PoolsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeIpv6PoolsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeIpv6PoolsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeKeyPairsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeKeyPairsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeKeyPairsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLaunchTemplatesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLaunchTemplatesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLaunchTemplatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLaunchTemplateVersionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLaunchTemplateVersionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLaunchTemplateVersionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLocalGatewayRouteTablesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLocalGatewayRouteTablesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLocalGatewayRouteTablesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayRouteTableVpcAssociationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayRouteTableVpcAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLocalGatewayRouteTableVpcAssociationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLocalGatewaysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLocalGatewaysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLocalGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayVirtualInterfaceGroupsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayVirtualInterfaceGroupsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLocalGatewayVirtualInterfaceGroupsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLocalGatewayVirtualInterfacesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeLocalGatewayVirtualInterfacesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLocalGatewayVirtualInterfacesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeManagedPrefixListsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeManagedPrefixListsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeManagedPrefixListsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMovingAddressesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMovingAddressesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMovingAddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNatGatewaysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeNatGatewaysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNatGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNetworkAclsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeNetworkAclsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNetworkAclsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNetworkInsightsAnalysesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNetworkInsightsAnalysesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNetworkInsightsAnalysesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNetworkInsightsPathsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNetworkInsightsPathsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNetworkInsightsPathsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNetworkInterfaceAttributeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNetworkInterfaceAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNetworkInterfaceAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNetworkInterfacePermissionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNetworkInterfacePermissionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNetworkInterfacePermissionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNetworkInterfacesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNetworkInterfacesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeNetworkInterfacesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePlacementGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePlacementGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePlacementGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePrefixListsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePrefixListsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePrefixListsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePrincipalIdFormatError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePrincipalIdFormatError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePrincipalIdFormatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePublicIpv4PoolsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribePublicIpv4PoolsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePublicIpv4PoolsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeRegionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeRegionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeRegionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReplaceRootVolumeTasksError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReplaceRootVolumeTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReplaceRootVolumeTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReservedInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedInstancesListingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedInstancesListingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReservedInstancesListingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedInstancesModificationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeReservedInstancesModificationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReservedInstancesModificationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReservedInstancesOfferingsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReservedInstancesOfferingsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReservedInstancesOfferingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeRouteTablesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeRouteTablesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeRouteTablesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeScheduledInstanceAvailabilityError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeScheduledInstanceAvailabilityError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeScheduledInstanceAvailabilityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeScheduledInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeScheduledInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeScheduledInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSecurityGroupReferencesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSecurityGroupReferencesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSecurityGroupReferencesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSecurityGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSecurityGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSecurityGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSnapshotAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSnapshotAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSnapshotAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSnapshotsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSnapshotsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSnapshotsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSpotDatafeedSubscriptionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSpotDatafeedSubscriptionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSpotDatafeedSubscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSpotFleetInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSpotFleetInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSpotFleetInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSpotFleetRequestHistoryError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSpotFleetRequestHistoryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSpotFleetRequestHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSpotFleetRequestsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSpotFleetRequestsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSpotFleetRequestsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSpotInstanceRequestsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSpotInstanceRequestsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSpotInstanceRequestsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSpotPriceHistoryError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeSpotPriceHistoryError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSpotPriceHistoryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStaleSecurityGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStaleSecurityGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStaleSecurityGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeStoreImageTasksError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeStoreImageTasksError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeStoreImageTasksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeSubnetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeSubnetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeSubnetsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrafficMirrorFiltersError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTrafficMirrorFiltersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrafficMirrorFiltersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrafficMirrorSessionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTrafficMirrorSessionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrafficMirrorSessionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrafficMirrorTargetsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTrafficMirrorTargetsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrafficMirrorTargetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayAttachmentsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTransitGatewayAttachmentsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayAttachmentsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayConnectPeersError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTransitGatewayConnectPeersError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayConnectPeersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayConnectsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTransitGatewayConnectsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayConnectsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayMulticastDomainsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeTransitGatewayMulticastDomainsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayMulticastDomainsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayPeeringAttachmentsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeTransitGatewayPeeringAttachmentsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayPeeringAttachmentsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayRouteTablesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTransitGatewayRouteTablesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayRouteTablesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewaysError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTransitGatewaysError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTransitGatewayVpcAttachmentsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTransitGatewayVpcAttachmentsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTransitGatewayVpcAttachmentsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrunkInterfaceAssociationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTrunkInterfaceAssociationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrunkInterfaceAssociationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVolumeAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeVolumeAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVolumeAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVolumesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVolumesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVolumesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVolumesModificationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeVolumesModificationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVolumesModificationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVolumeStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVolumeStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVolumeStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVpcAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcClassicLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVpcClassicLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcClassicLinkErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcClassicLinkDnsSupportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeVpcClassicLinkDnsSupportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcClassicLinkDnsSupportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DescribeVpcEndpointConnectionNotificationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeVpcEndpointConnectionNotificationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcEndpointConnectionNotificationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcEndpointConnectionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeVpcEndpointConnectionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcEndpointConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcEndpointsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVpcEndpointsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcEndpointsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::DescribeVpcEndpointServiceConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeVpcEndpointServiceConfigurationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcEndpointServiceConfigurationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcEndpointServicePermissionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DescribeVpcEndpointServicePermissionsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcEndpointServicePermissionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcEndpointServicesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeVpcEndpointServicesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcEndpointServicesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcPeeringConnectionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeVpcPeeringConnectionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcPeeringConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpcsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVpcsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpcsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpnConnectionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVpnConnectionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpnConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeVpnGatewaysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeVpnGatewaysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeVpnGatewaysErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachClassicLinkVpcError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachClassicLinkVpcError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachClassicLinkVpcErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachInternetGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachInternetGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachInternetGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachNetworkInterfaceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachNetworkInterfaceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachNetworkInterfaceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachVolumeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachVolumeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachVolumeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachVpnGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachVpnGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachVpnGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableEbsEncryptionByDefaultError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableEbsEncryptionByDefaultError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableEbsEncryptionByDefaultErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableFastSnapshotRestoresError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableFastSnapshotRestoresError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableFastSnapshotRestoresErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableImageDeprecationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableImageDeprecationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableImageDeprecationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableSerialConsoleAccessError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableSerialConsoleAccessError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableSerialConsoleAccessErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::DisableTransitGatewayRouteTablePropagationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DisableTransitGatewayRouteTablePropagationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableTransitGatewayRouteTablePropagationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableVgwRoutePropagationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableVgwRoutePropagationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableVgwRoutePropagationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableVpcClassicLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisableVpcClassicLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableVpcClassicLinkErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableVpcClassicLinkDnsSupportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableVpcClassicLinkDnsSupportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableVpcClassicLinkDnsSupportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisassociateAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateAddressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateClientVpnTargetNetworkError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateClientVpnTargetNetworkError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateClientVpnTargetNetworkErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateEnclaveCertificateIamRoleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DisassociateEnclaveCertificateIamRoleError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateEnclaveCertificateIamRoleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateIamInstanceProfileError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateIamInstanceProfileError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateIamInstanceProfileErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateRouteTableError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DisassociateRouteTableError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateSubnetCidrBlockError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateSubnetCidrBlockError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateSubnetCidrBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::DisassociateTransitGatewayMulticastDomainError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DisassociateTransitGatewayMulticastDomainError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateTransitGatewayMulticastDomainErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateTransitGatewayRouteTableError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateTransitGatewayRouteTableError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateTransitGatewayRouteTableErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateTrunkInterfaceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateTrunkInterfaceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateTrunkInterfaceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisassociateVpcCidrBlockError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisassociateVpcCidrBlockError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisassociateVpcCidrBlockErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableEbsEncryptionByDefaultError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableEbsEncryptionByDefaultError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableEbsEncryptionByDefaultErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableFastSnapshotRestoresError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableFastSnapshotRestoresError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableFastSnapshotRestoresErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableImageDeprecationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableImageDeprecationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableImageDeprecationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableSerialConsoleAccessError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableSerialConsoleAccessError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableSerialConsoleAccessErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::EnableTransitGatewayRouteTablePropagationError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::EnableTransitGatewayRouteTablePropagationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableTransitGatewayRouteTablePropagationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableVgwRoutePropagationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableVgwRoutePropagationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableVgwRoutePropagationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableVolumeIOError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableVolumeIOError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableVolumeIOErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableVpcClassicLinkError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnableVpcClassicLinkError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableVpcClassicLinkErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableVpcClassicLinkDnsSupportError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableVpcClassicLinkDnsSupportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableVpcClassicLinkDnsSupportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::ExportClientVpnClientCertificateRevocationListError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ExportClientVpnClientCertificateRevocationListError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ExportClientVpnClientCertificateRevocationListErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExportClientVpnClientConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ExportClientVpnClientConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExportClientVpnClientConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExportImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExportImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExportImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExportTransitGatewayRoutesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ExportTransitGatewayRoutesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExportTransitGatewayRoutesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAssociatedEnclaveCertificateIamRolesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetAssociatedEnclaveCertificateIamRolesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAssociatedEnclaveCertificateIamRolesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAssociatedIpv6PoolCidrsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetAssociatedIpv6PoolCidrsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAssociatedIpv6PoolCidrsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCapacityReservationUsageError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetCapacityReservationUsageError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCapacityReservationUsageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCoipPoolUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCoipPoolUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCoipPoolUsageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetConsoleOutputError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetConsoleOutputError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetConsoleOutputErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetConsoleScreenshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetConsoleScreenshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetConsoleScreenshotErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDefaultCreditSpecificationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetDefaultCreditSpecificationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDefaultCreditSpecificationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEbsDefaultKmsKeyIdError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetEbsDefaultKmsKeyIdError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEbsDefaultKmsKeyIdErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEbsEncryptionByDefaultError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetEbsEncryptionByDefaultError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEbsEncryptionByDefaultErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetFlowLogsIntegrationTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetFlowLogsIntegrationTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetFlowLogsIntegrationTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGroupsForCapacityReservationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetGroupsForCapacityReservationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGroupsForCapacityReservationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetHostReservationPurchasePreviewError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetHostReservationPurchasePreviewError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetHostReservationPurchasePreviewErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetLaunchTemplateDataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetLaunchTemplateDataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetLaunchTemplateDataErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetManagedPrefixListAssociationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetManagedPrefixListAssociationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetManagedPrefixListAssociationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetManagedPrefixListEntriesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetManagedPrefixListEntriesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetManagedPrefixListEntriesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPasswordDataError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetPasswordDataError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPasswordDataErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetReservedInstancesExchangeQuoteError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetReservedInstancesExchangeQuoteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetReservedInstancesExchangeQuoteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSerialConsoleAccessStatusError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetSerialConsoleAccessStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSerialConsoleAccessStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTransitGatewayAttachmentPropagationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetTransitGatewayAttachmentPropagationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTransitGatewayAttachmentPropagationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::GetTransitGatewayMulticastDomainAssociationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetTransitGatewayMulticastDomainAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTransitGatewayMulticastDomainAssociationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTransitGatewayPrefixListReferencesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetTransitGatewayPrefixListReferencesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTransitGatewayPrefixListReferencesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTransitGatewayRouteTableAssociationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetTransitGatewayRouteTableAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTransitGatewayRouteTableAssociationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTransitGatewayRouteTablePropagationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::GetTransitGatewayRouteTablePropagationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTransitGatewayRouteTablePropagationsErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::ImportClientVpnClientCertificateRevocationListError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ImportClientVpnClientCertificateRevocationListError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ImportClientVpnClientCertificateRevocationListErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportInstanceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportInstanceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportInstanceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportKeyPairError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportKeyPairError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportKeyPairErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportSnapshotError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportSnapshotError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportSnapshotErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ImportVolumeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ImportVolumeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ImportVolumeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyAddressAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyAddressAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyAddressAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyAvailabilityZoneGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyAvailabilityZoneGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyAvailabilityZoneGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyCapacityReservationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyCapacityReservationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyCapacityReservationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyClientVpnEndpointError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyClientVpnEndpointError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyClientVpnEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyDefaultCreditSpecificationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyDefaultCreditSpecificationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyDefaultCreditSpecificationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyEbsDefaultKmsKeyIdError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyEbsDefaultKmsKeyIdError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyEbsDefaultKmsKeyIdErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyFleetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyFpgaImageAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyFpgaImageAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyFpgaImageAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyHostsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyHostsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyHostsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyIdentityIdFormatError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyIdentityIdFormatError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyIdentityIdFormatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyIdFormatError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyIdFormatError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyIdFormatErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyImageAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyImageAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyImageAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyInstanceAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyInstanceAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyInstanceAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::ModifyInstanceCapacityReservationAttributesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ModifyInstanceCapacityReservationAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyInstanceCapacityReservationAttributesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyInstanceCreditSpecificationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyInstanceCreditSpecificationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyInstanceCreditSpecificationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyInstanceEventStartTimeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyInstanceEventStartTimeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyInstanceEventStartTimeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyInstanceMetadataOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyInstanceMetadataOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyInstanceMetadataOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyInstancePlacementError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyInstancePlacementError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyInstancePlacementErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyLaunchTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyLaunchTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyLaunchTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyManagedPrefixListError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyManagedPrefixListError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyManagedPrefixListErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyNetworkInterfaceAttributeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyNetworkInterfaceAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyNetworkInterfaceAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyReservedInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyReservedInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyReservedInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifySnapshotAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifySnapshotAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifySnapshotAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifySpotFleetRequestError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifySpotFleetRequestError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifySpotFleetRequestErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifySubnetAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifySubnetAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifySubnetAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::ModifyTrafficMirrorFilterNetworkServicesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ModifyTrafficMirrorFilterNetworkServicesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyTrafficMirrorFilterNetworkServicesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyTrafficMirrorFilterRuleError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyTrafficMirrorFilterRuleError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyTrafficMirrorFilterRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyTrafficMirrorSessionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyTrafficMirrorSessionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyTrafficMirrorSessionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyTransitGatewayError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyTransitGatewayError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyTransitGatewayErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyTransitGatewayPrefixListReferenceError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ModifyTransitGatewayPrefixListReferenceError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyTransitGatewayPrefixListReferenceErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyTransitGatewayVpcAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyTransitGatewayVpcAttachmentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyTransitGatewayVpcAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVolumeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVolumeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVolumeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVolumeAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVolumeAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVolumeAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVpcAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcEndpointError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVpcEndpointError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcEndpointErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcEndpointConnectionNotificationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ModifyVpcEndpointConnectionNotificationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcEndpointConnectionNotificationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcEndpointServiceConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::ModifyVpcEndpointServiceConfigurationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcEndpointServiceConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcEndpointServicePermissionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyVpcEndpointServicePermissionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcEndpointServicePermissionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcPeeringConnectionOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyVpcPeeringConnectionOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcPeeringConnectionOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpcTenancyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVpcTenancyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpcTenancyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpnConnectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVpnConnectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpnConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpnConnectionOptionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyVpnConnectionOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpnConnectionOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpnTunnelCertificateError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ModifyVpnTunnelCertificateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpnTunnelCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ModifyVpnTunnelOptionsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ModifyVpnTunnelOptionsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ModifyVpnTunnelOptionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::MonitorInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::MonitorInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::MonitorInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::MoveAddressToVpcError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::MoveAddressToVpcError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::MoveAddressToVpcErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ProvisionByoipCidrError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ProvisionByoipCidrError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ProvisionByoipCidrErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PurchaseHostReservationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PurchaseHostReservationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PurchaseHostReservationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PurchaseReservedInstancesOfferingError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PurchaseReservedInstancesOfferingError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PurchaseReservedInstancesOfferingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PurchaseScheduledInstancesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::PurchaseScheduledInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PurchaseScheduledInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RebootInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RebootInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RebootInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterImageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterImageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterImageErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::RegisterInstanceEventNotificationAttributesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RegisterInstanceEventNotificationAttributesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterInstanceEventNotificationAttributesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::RegisterTransitGatewayMulticastGroupMembersError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RegisterTransitGatewayMulticastGroupMembersError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterTransitGatewayMulticastGroupMembersErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::RegisterTransitGatewayMulticastGroupSourcesError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RegisterTransitGatewayMulticastGroupSourcesError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterTransitGatewayMulticastGroupSourcesErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::RejectTransitGatewayMulticastDomainAssociationsError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RejectTransitGatewayMulticastDomainAssociationsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RejectTransitGatewayMulticastDomainAssociationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RejectTransitGatewayPeeringAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::RejectTransitGatewayPeeringAttachmentError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RejectTransitGatewayPeeringAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RejectTransitGatewayVpcAttachmentError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RejectTransitGatewayVpcAttachmentError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RejectTransitGatewayVpcAttachmentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RejectVpcEndpointConnectionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RejectVpcEndpointConnectionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RejectVpcEndpointConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RejectVpcPeeringConnectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RejectVpcPeeringConnectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RejectVpcPeeringConnectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReleaseAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReleaseAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReleaseAddressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReleaseHostsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReleaseHostsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReleaseHostsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplaceIamInstanceProfileAssociationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ReplaceIamInstanceProfileAssociationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplaceIamInstanceProfileAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplaceNetworkAclAssociationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ReplaceNetworkAclAssociationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplaceNetworkAclAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplaceNetworkAclEntryError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReplaceNetworkAclEntryError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplaceNetworkAclEntryErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplaceRouteError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReplaceRouteError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplaceRouteErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplaceRouteTableAssociationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ReplaceRouteTableAssociationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplaceRouteTableAssociationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReplaceTransitGatewayRouteError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ReplaceTransitGatewayRouteError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReplaceTransitGatewayRouteErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReportInstanceStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReportInstanceStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReportInstanceStatusErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RequestSpotFleetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RequestSpotFleetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RequestSpotFleetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RequestSpotInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RequestSpotInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RequestSpotInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetAddressAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResetAddressAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetAddressAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetEbsDefaultKmsKeyIdError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResetEbsDefaultKmsKeyIdError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetEbsDefaultKmsKeyIdErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetFpgaImageAttributeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResetFpgaImageAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetFpgaImageAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetImageAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResetImageAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetImageAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetInstanceAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResetInstanceAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetInstanceAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetNetworkInterfaceAttributeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ResetNetworkInterfaceAttributeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetNetworkInterfaceAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResetSnapshotAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResetSnapshotAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResetSnapshotAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreAddressToClassicError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreAddressToClassicError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestoreAddressToClassicErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RestoreManagedPrefixListVersionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RestoreManagedPrefixListVersionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RestoreManagedPrefixListVersionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeClientVpnIngressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RevokeClientVpnIngressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RevokeClientVpnIngressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeSecurityGroupEgressError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RevokeSecurityGroupEgressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RevokeSecurityGroupEgressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeSecurityGroupIngressError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::RevokeSecurityGroupIngressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RevokeSecurityGroupIngressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RunInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RunInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RunInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RunScheduledInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RunScheduledInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RunScheduledInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SearchLocalGatewayRoutesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SearchLocalGatewayRoutesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SearchLocalGatewayRoutesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SearchTransitGatewayMulticastGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SearchTransitGatewayMulticastGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SearchTransitGatewayMulticastGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SearchTransitGatewayRoutesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SearchTransitGatewayRoutesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SearchTransitGatewayRoutesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendDiagnosticInterruptError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SendDiagnosticInterruptError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendDiagnosticInterruptErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartNetworkInsightsAnalysisError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartNetworkInsightsAnalysisError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartNetworkInsightsAnalysisErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::StartVpcEndpointServicePrivateDnsVerificationError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::StartVpcEndpointServicePrivateDnsVerificationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartVpcEndpointServicePrivateDnsVerificationErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TerminateClientVpnConnectionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::TerminateClientVpnConnectionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TerminateClientVpnConnectionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TerminateInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TerminateInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TerminateInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UnassignIpv6AddressesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UnassignIpv6AddressesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UnassignIpv6AddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UnassignPrivateIpAddressesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UnassignPrivateIpAddressesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UnassignPrivateIpAddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UnmonitorInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UnmonitorInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UnmonitorInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<crate::error::UpdateSecurityGroupRuleDescriptionsEgressError>,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateSecurityGroupRuleDescriptionsEgressError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSecurityGroupRuleDescriptionsEgressErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::UpdateSecurityGroupRuleDescriptionsIngressError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateSecurityGroupRuleDescriptionsIngressError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateSecurityGroupRuleDescriptionsIngressErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::WithdrawByoipCidrError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::WithdrawByoipCidrError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::WithdrawByoipCidrErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
