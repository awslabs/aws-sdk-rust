// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WithdrawByoipCidrOutput {
    /// <p>Information about the address pool.</p>
    #[doc(hidden)]
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    _request_id: Option<String>,
}
impl WithdrawByoipCidrOutput {
    /// <p>Information about the address pool.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for WithdrawByoipCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput).
pub mod withdraw_byoip_cidr_output {

    /// A builder for [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the address pool.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address pool.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput).
        pub fn build(self) -> crate::output::WithdrawByoipCidrOutput {
            crate::output::WithdrawByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl WithdrawByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput).
    pub fn builder() -> crate::output::withdraw_byoip_cidr_output::Builder {
        crate::output::withdraw_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSecurityGroupRuleDescriptionsIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl UpdateSecurityGroupRuleDescriptionsIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for UpdateSecurityGroupRuleDescriptionsIngressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput).
pub mod update_security_group_rule_descriptions_ingress_output {

    /// A builder for [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput).
        pub fn build(self) -> crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput {
            crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateSecurityGroupRuleDescriptionsIngressOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput).
    pub fn builder(
    ) -> crate::output::update_security_group_rule_descriptions_ingress_output::Builder {
        crate::output::update_security_group_rule_descriptions_ingress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSecurityGroupRuleDescriptionsEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl UpdateSecurityGroupRuleDescriptionsEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for UpdateSecurityGroupRuleDescriptionsEgressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput).
pub mod update_security_group_rule_descriptions_egress_output {

    /// A builder for [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput).
        pub fn build(self) -> crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput {
            crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateSecurityGroupRuleDescriptionsEgressOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput).
    pub fn builder() -> crate::output::update_security_group_rule_descriptions_egress_output::Builder
    {
        crate::output::update_security_group_rule_descriptions_egress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnmonitorInstancesOutput {
    /// <p>The monitoring information.</p>
    #[doc(hidden)]
    pub instance_monitorings: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
    _request_id: Option<String>,
}
impl UnmonitorInstancesOutput {
    /// <p>The monitoring information.</p>
    pub fn instance_monitorings(&self) -> std::option::Option<&[crate::model::InstanceMonitoring]> {
        self.instance_monitorings.as_deref()
    }
}
impl aws_http::request_id::RequestId for UnmonitorInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput).
pub mod unmonitor_instances_output {

    /// A builder for [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_monitorings:
            std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_monitorings`.
        ///
        /// To override the contents of this collection use [`set_instance_monitorings`](Self::set_instance_monitorings).
        ///
        /// <p>The monitoring information.</p>
        pub fn instance_monitorings(mut self, input: crate::model::InstanceMonitoring) -> Self {
            let mut v = self.instance_monitorings.unwrap_or_default();
            v.push(input);
            self.instance_monitorings = Some(v);
            self
        }
        /// <p>The monitoring information.</p>
        pub fn set_instance_monitorings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
        ) -> Self {
            self.instance_monitorings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput).
        pub fn build(self) -> crate::output::UnmonitorInstancesOutput {
            crate::output::UnmonitorInstancesOutput {
                instance_monitorings: self.instance_monitorings,
                _request_id: self._request_id,
            }
        }
    }
}
impl UnmonitorInstancesOutput {
    /// Creates a new builder-style object to manufacture [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput).
    pub fn builder() -> crate::output::unmonitor_instances_output::Builder {
        crate::output::unmonitor_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnassignPrivateIpAddressesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UnassignPrivateIpAddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput).
pub mod unassign_private_ip_addresses_output {

    /// A builder for [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput).
        pub fn build(self) -> crate::output::UnassignPrivateIpAddressesOutput {
            crate::output::UnassignPrivateIpAddressesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UnassignPrivateIpAddressesOutput {
    /// Creates a new builder-style object to manufacture [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput).
    pub fn builder() -> crate::output::unassign_private_ip_addresses_output::Builder {
        crate::output::unassign_private_ip_addresses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnassignIpv6AddressesOutput {
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    #[doc(hidden)]
    pub unassigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
    #[doc(hidden)]
    pub unassigned_ipv6_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl UnassignIpv6AddressesOutput {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    pub fn unassigned_ipv6_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.unassigned_ipv6_addresses.as_deref()
    }
    /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
    pub fn unassigned_ipv6_prefixes(&self) -> std::option::Option<&[std::string::String]> {
        self.unassigned_ipv6_prefixes.as_deref()
    }
}
impl aws_http::request_id::RequestId for UnassignIpv6AddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput).
pub mod unassign_ipv6_addresses_output {

    /// A builder for [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        pub(crate) unassigned_ipv6_addresses:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unassigned_ipv6_prefixes:
            std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(input.into());
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn set_network_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = input;
            self
        }
        /// Appends an item to `unassigned_ipv6_addresses`.
        ///
        /// To override the contents of this collection use [`set_unassigned_ipv6_addresses`](Self::set_unassigned_ipv6_addresses).
        ///
        /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
        pub fn unassigned_ipv6_addresses(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.unassigned_ipv6_addresses.unwrap_or_default();
            v.push(input.into());
            self.unassigned_ipv6_addresses = Some(v);
            self
        }
        /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
        pub fn set_unassigned_ipv6_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.unassigned_ipv6_addresses = input;
            self
        }
        /// Appends an item to `unassigned_ipv6_prefixes`.
        ///
        /// To override the contents of this collection use [`set_unassigned_ipv6_prefixes`](Self::set_unassigned_ipv6_prefixes).
        ///
        /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
        pub fn unassigned_ipv6_prefixes(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.unassigned_ipv6_prefixes.unwrap_or_default();
            v.push(input.into());
            self.unassigned_ipv6_prefixes = Some(v);
            self
        }
        /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
        pub fn set_unassigned_ipv6_prefixes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.unassigned_ipv6_prefixes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput).
        pub fn build(self) -> crate::output::UnassignIpv6AddressesOutput {
            crate::output::UnassignIpv6AddressesOutput {
                network_interface_id: self.network_interface_id,
                unassigned_ipv6_addresses: self.unassigned_ipv6_addresses,
                unassigned_ipv6_prefixes: self.unassigned_ipv6_prefixes,
                _request_id: self._request_id,
            }
        }
    }
}
impl UnassignIpv6AddressesOutput {
    /// Creates a new builder-style object to manufacture [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput).
    pub fn builder() -> crate::output::unassign_ipv6_addresses_output::Builder {
        crate::output::unassign_ipv6_addresses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TerminateInstancesOutput {
    /// <p>Information about the terminated instances.</p>
    #[doc(hidden)]
    pub terminating_instances:
        std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
    _request_id: Option<String>,
}
impl TerminateInstancesOutput {
    /// <p>Information about the terminated instances.</p>
    pub fn terminating_instances(
        &self,
    ) -> std::option::Option<&[crate::model::InstanceStateChange]> {
        self.terminating_instances.as_deref()
    }
}
impl aws_http::request_id::RequestId for TerminateInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput).
pub mod terminate_instances_output {

    /// A builder for [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) terminating_instances:
            std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `terminating_instances`.
        ///
        /// To override the contents of this collection use [`set_terminating_instances`](Self::set_terminating_instances).
        ///
        /// <p>Information about the terminated instances.</p>
        pub fn terminating_instances(mut self, input: crate::model::InstanceStateChange) -> Self {
            let mut v = self.terminating_instances.unwrap_or_default();
            v.push(input);
            self.terminating_instances = Some(v);
            self
        }
        /// <p>Information about the terminated instances.</p>
        pub fn set_terminating_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        ) -> Self {
            self.terminating_instances = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput).
        pub fn build(self) -> crate::output::TerminateInstancesOutput {
            crate::output::TerminateInstancesOutput {
                terminating_instances: self.terminating_instances,
                _request_id: self._request_id,
            }
        }
    }
}
impl TerminateInstancesOutput {
    /// Creates a new builder-style object to manufacture [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput).
    pub fn builder() -> crate::output::terminate_instances_output::Builder {
        crate::output::terminate_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TerminateClientVpnConnectionsOutput {
    /// <p>The ID of the Client VPN endpoint.</p>
    #[doc(hidden)]
    pub client_vpn_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The user who established the terminated client connections.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The current state of the client connections.</p>
    #[doc(hidden)]
    pub connection_statuses:
        std::option::Option<std::vec::Vec<crate::model::TerminateConnectionStatus>>,
    _request_id: Option<String>,
}
impl TerminateClientVpnConnectionsOutput {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn client_vpn_endpoint_id(&self) -> std::option::Option<&str> {
        self.client_vpn_endpoint_id.as_deref()
    }
    /// <p>The user who established the terminated client connections.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The current state of the client connections.</p>
    pub fn connection_statuses(
        &self,
    ) -> std::option::Option<&[crate::model::TerminateConnectionStatus]> {
        self.connection_statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for TerminateClientVpnConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput).
pub mod terminate_client_vpn_connections_output {

    /// A builder for [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_endpoint_id: std::option::Option<std::string::String>,
        pub(crate) username: std::option::Option<std::string::String>,
        pub(crate) connection_statuses:
            std::option::Option<std::vec::Vec<crate::model::TerminateConnectionStatus>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Client VPN endpoint.</p>
        pub fn client_vpn_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_vpn_endpoint_id = Some(input.into());
            self
        }
        /// <p>The ID of the Client VPN endpoint.</p>
        pub fn set_client_vpn_endpoint_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.client_vpn_endpoint_id = input;
            self
        }
        /// <p>The user who established the terminated client connections.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.username = Some(input.into());
            self
        }
        /// <p>The user who established the terminated client connections.</p>
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.username = input;
            self
        }
        /// Appends an item to `connection_statuses`.
        ///
        /// To override the contents of this collection use [`set_connection_statuses`](Self::set_connection_statuses).
        ///
        /// <p>The current state of the client connections.</p>
        pub fn connection_statuses(
            mut self,
            input: crate::model::TerminateConnectionStatus,
        ) -> Self {
            let mut v = self.connection_statuses.unwrap_or_default();
            v.push(input);
            self.connection_statuses = Some(v);
            self
        }
        /// <p>The current state of the client connections.</p>
        pub fn set_connection_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TerminateConnectionStatus>>,
        ) -> Self {
            self.connection_statuses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput).
        pub fn build(self) -> crate::output::TerminateClientVpnConnectionsOutput {
            crate::output::TerminateClientVpnConnectionsOutput {
                client_vpn_endpoint_id: self.client_vpn_endpoint_id,
                username: self.username,
                connection_statuses: self.connection_statuses,
                _request_id: self._request_id,
            }
        }
    }
}
impl TerminateClientVpnConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput).
    pub fn builder() -> crate::output::terminate_client_vpn_connections_output::Builder {
        crate::output::terminate_client_vpn_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopInstancesOutput {
    /// <p>Information about the stopped instances.</p>
    #[doc(hidden)]
    pub stopping_instances: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
    _request_id: Option<String>,
}
impl StopInstancesOutput {
    /// <p>Information about the stopped instances.</p>
    pub fn stopping_instances(&self) -> std::option::Option<&[crate::model::InstanceStateChange]> {
        self.stopping_instances.as_deref()
    }
}
impl aws_http::request_id::RequestId for StopInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StopInstancesOutput`](crate::output::StopInstancesOutput).
pub mod stop_instances_output {

    /// A builder for [`StopInstancesOutput`](crate::output::StopInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stopping_instances:
            std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `stopping_instances`.
        ///
        /// To override the contents of this collection use [`set_stopping_instances`](Self::set_stopping_instances).
        ///
        /// <p>Information about the stopped instances.</p>
        pub fn stopping_instances(mut self, input: crate::model::InstanceStateChange) -> Self {
            let mut v = self.stopping_instances.unwrap_or_default();
            v.push(input);
            self.stopping_instances = Some(v);
            self
        }
        /// <p>Information about the stopped instances.</p>
        pub fn set_stopping_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        ) -> Self {
            self.stopping_instances = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopInstancesOutput`](crate::output::StopInstancesOutput).
        pub fn build(self) -> crate::output::StopInstancesOutput {
            crate::output::StopInstancesOutput {
                stopping_instances: self.stopping_instances,
                _request_id: self._request_id,
            }
        }
    }
}
impl StopInstancesOutput {
    /// Creates a new builder-style object to manufacture [`StopInstancesOutput`](crate::output::StopInstancesOutput).
    pub fn builder() -> crate::output::stop_instances_output::Builder {
        crate::output::stop_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartVpcEndpointServicePrivateDnsVerificationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl StartVpcEndpointServicePrivateDnsVerificationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for StartVpcEndpointServicePrivateDnsVerificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput).
pub mod start_vpc_endpoint_service_private_dns_verification_output {

    /// A builder for [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput).
        pub fn build(self) -> crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput {
            crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput {
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartVpcEndpointServicePrivateDnsVerificationOutput {
    /// Creates a new builder-style object to manufacture [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput).
    pub fn builder(
    ) -> crate::output::start_vpc_endpoint_service_private_dns_verification_output::Builder {
        crate::output::start_vpc_endpoint_service_private_dns_verification_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartNetworkInsightsAnalysisOutput {
    /// <p>Information about the network insights analysis.</p>
    #[doc(hidden)]
    pub network_insights_analysis: std::option::Option<crate::model::NetworkInsightsAnalysis>,
    _request_id: Option<String>,
}
impl StartNetworkInsightsAnalysisOutput {
    /// <p>Information about the network insights analysis.</p>
    pub fn network_insights_analysis(
        &self,
    ) -> std::option::Option<&crate::model::NetworkInsightsAnalysis> {
        self.network_insights_analysis.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartNetworkInsightsAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput).
pub mod start_network_insights_analysis_output {

    /// A builder for [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_analysis:
            std::option::Option<crate::model::NetworkInsightsAnalysis>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the network insights analysis.</p>
        pub fn network_insights_analysis(
            mut self,
            input: crate::model::NetworkInsightsAnalysis,
        ) -> Self {
            self.network_insights_analysis = Some(input);
            self
        }
        /// <p>Information about the network insights analysis.</p>
        pub fn set_network_insights_analysis(
            mut self,
            input: std::option::Option<crate::model::NetworkInsightsAnalysis>,
        ) -> Self {
            self.network_insights_analysis = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput).
        pub fn build(self) -> crate::output::StartNetworkInsightsAnalysisOutput {
            crate::output::StartNetworkInsightsAnalysisOutput {
                network_insights_analysis: self.network_insights_analysis,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartNetworkInsightsAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput).
    pub fn builder() -> crate::output::start_network_insights_analysis_output::Builder {
        crate::output::start_network_insights_analysis_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartNetworkInsightsAccessScopeAnalysisOutput {
    /// <p>The Network Access Scope analysis.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_analysis:
        std::option::Option<crate::model::NetworkInsightsAccessScopeAnalysis>,
    _request_id: Option<String>,
}
impl StartNetworkInsightsAccessScopeAnalysisOutput {
    /// <p>The Network Access Scope analysis.</p>
    pub fn network_insights_access_scope_analysis(
        &self,
    ) -> std::option::Option<&crate::model::NetworkInsightsAccessScopeAnalysis> {
        self.network_insights_access_scope_analysis.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartNetworkInsightsAccessScopeAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartNetworkInsightsAccessScopeAnalysisOutput`](crate::output::StartNetworkInsightsAccessScopeAnalysisOutput).
pub mod start_network_insights_access_scope_analysis_output {

    /// A builder for [`StartNetworkInsightsAccessScopeAnalysisOutput`](crate::output::StartNetworkInsightsAccessScopeAnalysisOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope_analysis:
            std::option::Option<crate::model::NetworkInsightsAccessScopeAnalysis>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Network Access Scope analysis.</p>
        pub fn network_insights_access_scope_analysis(
            mut self,
            input: crate::model::NetworkInsightsAccessScopeAnalysis,
        ) -> Self {
            self.network_insights_access_scope_analysis = Some(input);
            self
        }
        /// <p>The Network Access Scope analysis.</p>
        pub fn set_network_insights_access_scope_analysis(
            mut self,
            input: std::option::Option<crate::model::NetworkInsightsAccessScopeAnalysis>,
        ) -> Self {
            self.network_insights_access_scope_analysis = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartNetworkInsightsAccessScopeAnalysisOutput`](crate::output::StartNetworkInsightsAccessScopeAnalysisOutput).
        pub fn build(self) -> crate::output::StartNetworkInsightsAccessScopeAnalysisOutput {
            crate::output::StartNetworkInsightsAccessScopeAnalysisOutput {
                network_insights_access_scope_analysis: self.network_insights_access_scope_analysis,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartNetworkInsightsAccessScopeAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`StartNetworkInsightsAccessScopeAnalysisOutput`](crate::output::StartNetworkInsightsAccessScopeAnalysisOutput).
    pub fn builder() -> crate::output::start_network_insights_access_scope_analysis_output::Builder
    {
        crate::output::start_network_insights_access_scope_analysis_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartInstancesOutput {
    /// <p>Information about the started instances.</p>
    #[doc(hidden)]
    pub starting_instances: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
    _request_id: Option<String>,
}
impl StartInstancesOutput {
    /// <p>Information about the started instances.</p>
    pub fn starting_instances(&self) -> std::option::Option<&[crate::model::InstanceStateChange]> {
        self.starting_instances.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartInstancesOutput`](crate::output::StartInstancesOutput).
pub mod start_instances_output {

    /// A builder for [`StartInstancesOutput`](crate::output::StartInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) starting_instances:
            std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `starting_instances`.
        ///
        /// To override the contents of this collection use [`set_starting_instances`](Self::set_starting_instances).
        ///
        /// <p>Information about the started instances.</p>
        pub fn starting_instances(mut self, input: crate::model::InstanceStateChange) -> Self {
            let mut v = self.starting_instances.unwrap_or_default();
            v.push(input);
            self.starting_instances = Some(v);
            self
        }
        /// <p>Information about the started instances.</p>
        pub fn set_starting_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        ) -> Self {
            self.starting_instances = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartInstancesOutput`](crate::output::StartInstancesOutput).
        pub fn build(self) -> crate::output::StartInstancesOutput {
            crate::output::StartInstancesOutput {
                starting_instances: self.starting_instances,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartInstancesOutput {
    /// Creates a new builder-style object to manufacture [`StartInstancesOutput`](crate::output::StartInstancesOutput).
    pub fn builder() -> crate::output::start_instances_output::Builder {
        crate::output::start_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendDiagnosticInterruptOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SendDiagnosticInterruptOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput).
pub mod send_diagnostic_interrupt_output {

    /// A builder for [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput).
        pub fn build(self) -> crate::output::SendDiagnosticInterruptOutput {
            crate::output::SendDiagnosticInterruptOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl SendDiagnosticInterruptOutput {
    /// Creates a new builder-style object to manufacture [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput).
    pub fn builder() -> crate::output::send_diagnostic_interrupt_output::Builder {
        crate::output::send_diagnostic_interrupt_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchTransitGatewayRoutesOutput {
    /// <p>Information about the routes.</p>
    #[doc(hidden)]
    pub routes: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRoute>>,
    /// <p>Indicates whether there are additional routes available.</p>
    #[doc(hidden)]
    pub additional_routes_available: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl SearchTransitGatewayRoutesOutput {
    /// <p>Information about the routes.</p>
    pub fn routes(&self) -> std::option::Option<&[crate::model::TransitGatewayRoute]> {
        self.routes.as_deref()
    }
    /// <p>Indicates whether there are additional routes available.</p>
    pub fn additional_routes_available(&self) -> std::option::Option<bool> {
        self.additional_routes_available
    }
}
impl aws_http::request_id::RequestId for SearchTransitGatewayRoutesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput).
pub mod search_transit_gateway_routes_output {

    /// A builder for [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRoute>>,
        pub(crate) additional_routes_available: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `routes`.
        ///
        /// To override the contents of this collection use [`set_routes`](Self::set_routes).
        ///
        /// <p>Information about the routes.</p>
        pub fn routes(mut self, input: crate::model::TransitGatewayRoute) -> Self {
            let mut v = self.routes.unwrap_or_default();
            v.push(input);
            self.routes = Some(v);
            self
        }
        /// <p>Information about the routes.</p>
        pub fn set_routes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRoute>>,
        ) -> Self {
            self.routes = input;
            self
        }
        /// <p>Indicates whether there are additional routes available.</p>
        pub fn additional_routes_available(mut self, input: bool) -> Self {
            self.additional_routes_available = Some(input);
            self
        }
        /// <p>Indicates whether there are additional routes available.</p>
        pub fn set_additional_routes_available(mut self, input: std::option::Option<bool>) -> Self {
            self.additional_routes_available = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput).
        pub fn build(self) -> crate::output::SearchTransitGatewayRoutesOutput {
            crate::output::SearchTransitGatewayRoutesOutput {
                routes: self.routes,
                additional_routes_available: self.additional_routes_available,
                _request_id: self._request_id,
            }
        }
    }
}
impl SearchTransitGatewayRoutesOutput {
    /// Creates a new builder-style object to manufacture [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput).
    pub fn builder() -> crate::output::search_transit_gateway_routes_output::Builder {
        crate::output::search_transit_gateway_routes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchTransitGatewayMulticastGroupsOutput {
    /// <p>Information about the transit gateway multicast group.</p>
    #[doc(hidden)]
    pub multicast_groups:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchTransitGatewayMulticastGroupsOutput {
    /// <p>Information about the transit gateway multicast group.</p>
    pub fn multicast_groups(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayMulticastGroup]> {
        self.multicast_groups.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchTransitGatewayMulticastGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput).
pub mod search_transit_gateway_multicast_groups_output {

    /// A builder for [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) multicast_groups:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `multicast_groups`.
        ///
        /// To override the contents of this collection use [`set_multicast_groups`](Self::set_multicast_groups).
        ///
        /// <p>Information about the transit gateway multicast group.</p>
        pub fn multicast_groups(
            mut self,
            input: crate::model::TransitGatewayMulticastGroup,
        ) -> Self {
            let mut v = self.multicast_groups.unwrap_or_default();
            v.push(input);
            self.multicast_groups = Some(v);
            self
        }
        /// <p>Information about the transit gateway multicast group.</p>
        pub fn set_multicast_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastGroup>>,
        ) -> Self {
            self.multicast_groups = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput).
        pub fn build(self) -> crate::output::SearchTransitGatewayMulticastGroupsOutput {
            crate::output::SearchTransitGatewayMulticastGroupsOutput {
                multicast_groups: self.multicast_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl SearchTransitGatewayMulticastGroupsOutput {
    /// Creates a new builder-style object to manufacture [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput).
    pub fn builder() -> crate::output::search_transit_gateway_multicast_groups_output::Builder {
        crate::output::search_transit_gateway_multicast_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchLocalGatewayRoutesOutput {
    /// <p>Information about the routes.</p>
    #[doc(hidden)]
    pub routes: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRoute>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchLocalGatewayRoutesOutput {
    /// <p>Information about the routes.</p>
    pub fn routes(&self) -> std::option::Option<&[crate::model::LocalGatewayRoute]> {
        self.routes.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchLocalGatewayRoutesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput).
pub mod search_local_gateway_routes_output {

    /// A builder for [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRoute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `routes`.
        ///
        /// To override the contents of this collection use [`set_routes`](Self::set_routes).
        ///
        /// <p>Information about the routes.</p>
        pub fn routes(mut self, input: crate::model::LocalGatewayRoute) -> Self {
            let mut v = self.routes.unwrap_or_default();
            v.push(input);
            self.routes = Some(v);
            self
        }
        /// <p>Information about the routes.</p>
        pub fn set_routes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRoute>>,
        ) -> Self {
            self.routes = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput).
        pub fn build(self) -> crate::output::SearchLocalGatewayRoutesOutput {
            crate::output::SearchLocalGatewayRoutesOutput {
                routes: self.routes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl SearchLocalGatewayRoutesOutput {
    /// Creates a new builder-style object to manufacture [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput).
    pub fn builder() -> crate::output::search_local_gateway_routes_output::Builder {
        crate::output::search_local_gateway_routes_output::Builder::default()
    }
}

/// <p>Contains the output of RunScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RunScheduledInstancesOutput {
    /// <p>The IDs of the newly launched instances.</p>
    #[doc(hidden)]
    pub instance_id_set: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl RunScheduledInstancesOutput {
    /// <p>The IDs of the newly launched instances.</p>
    pub fn instance_id_set(&self) -> std::option::Option<&[std::string::String]> {
        self.instance_id_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for RunScheduledInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput).
pub mod run_scheduled_instances_output {

    /// A builder for [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id_set: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_id_set`.
        ///
        /// To override the contents of this collection use [`set_instance_id_set`](Self::set_instance_id_set).
        ///
        /// <p>The IDs of the newly launched instances.</p>
        pub fn instance_id_set(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.instance_id_set.unwrap_or_default();
            v.push(input.into());
            self.instance_id_set = Some(v);
            self
        }
        /// <p>The IDs of the newly launched instances.</p>
        pub fn set_instance_id_set(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.instance_id_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput).
        pub fn build(self) -> crate::output::RunScheduledInstancesOutput {
            crate::output::RunScheduledInstancesOutput {
                instance_id_set: self.instance_id_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl RunScheduledInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput).
    pub fn builder() -> crate::output::run_scheduled_instances_output::Builder {
        crate::output::run_scheduled_instances_output::Builder::default()
    }
}

/// <p>Describes a launch request for one or more instances, and includes owner, requester, and security group information that applies to all instances in the launch request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RunInstancesOutput {
    /// <p>[EC2-Classic only] The security groups.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
    /// <p>The instances.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    /// <p>The ID of the Amazon Web Services account that owns the reservation.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The ID of the requester that launched the instances on your behalf (for example, Amazon Web Services Management Console or Auto Scaling).</p>
    #[doc(hidden)]
    pub requester_id: std::option::Option<std::string::String>,
    /// <p>The ID of the reservation.</p>
    #[doc(hidden)]
    pub reservation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RunInstancesOutput {
    /// <p>[EC2-Classic only] The security groups.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::model::GroupIdentifier]> {
        self.groups.as_deref()
    }
    /// <p>The instances.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::Instance]> {
        self.instances.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the reservation.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The ID of the requester that launched the instances on your behalf (for example, Amazon Web Services Management Console or Auto Scaling).</p>
    pub fn requester_id(&self) -> std::option::Option<&str> {
        self.requester_id.as_deref()
    }
    /// <p>The ID of the reservation.</p>
    pub fn reservation_id(&self) -> std::option::Option<&str> {
        self.reservation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for RunInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RunInstancesOutput`](crate::output::RunInstancesOutput).
pub mod run_instances_output {

    /// A builder for [`RunInstancesOutput`](crate::output::RunInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) requester_id: std::option::Option<std::string::String>,
        pub(crate) reservation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `groups`.
        ///
        /// To override the contents of this collection use [`set_groups`](Self::set_groups).
        ///
        /// <p>[EC2-Classic only] The security groups.</p>
        pub fn groups(mut self, input: crate::model::GroupIdentifier) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(input);
            self.groups = Some(v);
            self
        }
        /// <p>[EC2-Classic only] The security groups.</p>
        pub fn set_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        ) -> Self {
            self.groups = input;
            self
        }
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>The instances.</p>
        pub fn instances(mut self, input: crate::model::Instance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>The instances.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the reservation.</p>
        pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the reservation.</p>
        pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_id = input;
            self
        }
        /// <p>The ID of the requester that launched the instances on your behalf (for example, Amazon Web Services Management Console or Auto Scaling).</p>
        pub fn requester_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.requester_id = Some(input.into());
            self
        }
        /// <p>The ID of the requester that launched the instances on your behalf (for example, Amazon Web Services Management Console or Auto Scaling).</p>
        pub fn set_requester_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.requester_id = input;
            self
        }
        /// <p>The ID of the reservation.</p>
        pub fn reservation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reservation_id = Some(input.into());
            self
        }
        /// <p>The ID of the reservation.</p>
        pub fn set_reservation_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reservation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RunInstancesOutput`](crate::output::RunInstancesOutput).
        pub fn build(self) -> crate::output::RunInstancesOutput {
            crate::output::RunInstancesOutput {
                groups: self.groups,
                instances: self.instances,
                owner_id: self.owner_id,
                requester_id: self.requester_id,
                reservation_id: self.reservation_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl RunInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RunInstancesOutput`](crate::output::RunInstancesOutput).
    pub fn builder() -> crate::output::run_instances_output::Builder {
        crate::output::run_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RevokeSecurityGroupIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    /// <p>The inbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
    #[doc(hidden)]
    pub unknown_ip_permissions: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
    _request_id: Option<String>,
}
impl RevokeSecurityGroupIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
    /// <p>The inbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
    pub fn unknown_ip_permissions(&self) -> std::option::Option<&[crate::model::IpPermission]> {
        self.unknown_ip_permissions.as_deref()
    }
}
impl aws_http::request_id::RequestId for RevokeSecurityGroupIngressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput).
pub mod revoke_security_group_ingress_output {

    /// A builder for [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) unknown_ip_permissions:
            std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        /// Appends an item to `unknown_ip_permissions`.
        ///
        /// To override the contents of this collection use [`set_unknown_ip_permissions`](Self::set_unknown_ip_permissions).
        ///
        /// <p>The inbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
        pub fn unknown_ip_permissions(mut self, input: crate::model::IpPermission) -> Self {
            let mut v = self.unknown_ip_permissions.unwrap_or_default();
            v.push(input);
            self.unknown_ip_permissions = Some(v);
            self
        }
        /// <p>The inbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
        pub fn set_unknown_ip_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
        ) -> Self {
            self.unknown_ip_permissions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput).
        pub fn build(self) -> crate::output::RevokeSecurityGroupIngressOutput {
            crate::output::RevokeSecurityGroupIngressOutput {
                r#return: self.r#return,
                unknown_ip_permissions: self.unknown_ip_permissions,
                _request_id: self._request_id,
            }
        }
    }
}
impl RevokeSecurityGroupIngressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput).
    pub fn builder() -> crate::output::revoke_security_group_ingress_output::Builder {
        crate::output::revoke_security_group_ingress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RevokeSecurityGroupEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    /// <p>The outbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
    #[doc(hidden)]
    pub unknown_ip_permissions: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
    _request_id: Option<String>,
}
impl RevokeSecurityGroupEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
    /// <p>The outbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
    pub fn unknown_ip_permissions(&self) -> std::option::Option<&[crate::model::IpPermission]> {
        self.unknown_ip_permissions.as_deref()
    }
}
impl aws_http::request_id::RequestId for RevokeSecurityGroupEgressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput).
pub mod revoke_security_group_egress_output {

    /// A builder for [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) unknown_ip_permissions:
            std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        /// Appends an item to `unknown_ip_permissions`.
        ///
        /// To override the contents of this collection use [`set_unknown_ip_permissions`](Self::set_unknown_ip_permissions).
        ///
        /// <p>The outbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
        pub fn unknown_ip_permissions(mut self, input: crate::model::IpPermission) -> Self {
            let mut v = self.unknown_ip_permissions.unwrap_or_default();
            v.push(input);
            self.unknown_ip_permissions = Some(v);
            self
        }
        /// <p>The outbound rules that were unknown to the service. In some cases, <code>unknownIpPermissionSet</code> might be in a different format from the request parameter. </p>
        pub fn set_unknown_ip_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
        ) -> Self {
            self.unknown_ip_permissions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput).
        pub fn build(self) -> crate::output::RevokeSecurityGroupEgressOutput {
            crate::output::RevokeSecurityGroupEgressOutput {
                r#return: self.r#return,
                unknown_ip_permissions: self.unknown_ip_permissions,
                _request_id: self._request_id,
            }
        }
    }
}
impl RevokeSecurityGroupEgressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput).
    pub fn builder() -> crate::output::revoke_security_group_egress_output::Builder {
        crate::output::revoke_security_group_egress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RevokeClientVpnIngressOutput {
    /// <p>The current state of the authorization rule.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
    _request_id: Option<String>,
}
impl RevokeClientVpnIngressOutput {
    /// <p>The current state of the authorization rule.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ClientVpnAuthorizationRuleStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for RevokeClientVpnIngressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput).
pub mod revoke_client_vpn_ingress_output {

    /// A builder for [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the authorization rule.</p>
        pub fn status(mut self, input: crate::model::ClientVpnAuthorizationRuleStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the authorization rule.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput).
        pub fn build(self) -> crate::output::RevokeClientVpnIngressOutput {
            crate::output::RevokeClientVpnIngressOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl RevokeClientVpnIngressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput).
    pub fn builder() -> crate::output::revoke_client_vpn_ingress_output::Builder {
        crate::output::revoke_client_vpn_ingress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreSnapshotTierOutput {
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the snapshot restore process started.</p>
    #[doc(hidden)]
    pub restore_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
    #[doc(hidden)]
    pub restore_duration: std::option::Option<i32>,
    /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
    #[doc(hidden)]
    pub is_permanent_restore: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl RestoreSnapshotTierOutput {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The date and time when the snapshot restore process started.</p>
    pub fn restore_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.restore_start_time.as_ref()
    }
    /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
    pub fn restore_duration(&self) -> std::option::Option<i32> {
        self.restore_duration
    }
    /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
    pub fn is_permanent_restore(&self) -> std::option::Option<bool> {
        self.is_permanent_restore
    }
}
impl aws_http::request_id::RequestId for RestoreSnapshotTierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RestoreSnapshotTierOutput`](crate::output::RestoreSnapshotTierOutput).
pub mod restore_snapshot_tier_output {

    /// A builder for [`RestoreSnapshotTierOutput`](crate::output::RestoreSnapshotTierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) restore_start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) restore_duration: std::option::Option<i32>,
        pub(crate) is_permanent_restore: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the snapshot.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The ID of the snapshot.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        /// <p>The date and time when the snapshot restore process started.</p>
        pub fn restore_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.restore_start_time = Some(input);
            self
        }
        /// <p>The date and time when the snapshot restore process started.</p>
        pub fn set_restore_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.restore_start_time = input;
            self
        }
        /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
        pub fn restore_duration(mut self, input: i32) -> Self {
            self.restore_duration = Some(input);
            self
        }
        /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
        pub fn set_restore_duration(mut self, input: std::option::Option<i32>) -> Self {
            self.restore_duration = input;
            self
        }
        /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
        pub fn is_permanent_restore(mut self, input: bool) -> Self {
            self.is_permanent_restore = Some(input);
            self
        }
        /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
        pub fn set_is_permanent_restore(mut self, input: std::option::Option<bool>) -> Self {
            self.is_permanent_restore = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestoreSnapshotTierOutput`](crate::output::RestoreSnapshotTierOutput).
        pub fn build(self) -> crate::output::RestoreSnapshotTierOutput {
            crate::output::RestoreSnapshotTierOutput {
                snapshot_id: self.snapshot_id,
                restore_start_time: self.restore_start_time,
                restore_duration: self.restore_duration,
                is_permanent_restore: self.is_permanent_restore,
                _request_id: self._request_id,
            }
        }
    }
}
impl RestoreSnapshotTierOutput {
    /// Creates a new builder-style object to manufacture [`RestoreSnapshotTierOutput`](crate::output::RestoreSnapshotTierOutput).
    pub fn builder() -> crate::output::restore_snapshot_tier_output::Builder {
        crate::output::restore_snapshot_tier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreSnapshotFromRecycleBinOutput {
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>The description for the snapshot.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates whether the snapshot is encrypted.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The progress of the snapshot, as a percentage.</p>
    #[doc(hidden)]
    pub progress: std::option::Option<std::string::String>,
    /// <p>The time stamp when the snapshot was initiated.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The state of the snapshot.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::SnapshotState>,
    /// <p>The ID of the volume that was used to create the snapshot.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    #[doc(hidden)]
    pub volume_size: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl RestoreSnapshotFromRecycleBinOutput {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>The description for the snapshot.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The progress of the snapshot, as a percentage.</p>
    pub fn progress(&self) -> std::option::Option<&str> {
        self.progress.as_deref()
    }
    /// <p>The time stamp when the snapshot was initiated.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The state of the snapshot.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::SnapshotState> {
        self.state.as_ref()
    }
    /// <p>The ID of the volume that was used to create the snapshot.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn volume_size(&self) -> std::option::Option<i32> {
        self.volume_size
    }
}
impl aws_http::request_id::RequestId for RestoreSnapshotFromRecycleBinOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RestoreSnapshotFromRecycleBinOutput`](crate::output::RestoreSnapshotFromRecycleBinOutput).
pub mod restore_snapshot_from_recycle_bin_output {

    /// A builder for [`RestoreSnapshotFromRecycleBinOutput`](crate::output::RestoreSnapshotFromRecycleBinOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::SnapshotState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) volume_size: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the snapshot.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The ID of the snapshot.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = input;
            self
        }
        /// <p>The description for the snapshot.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description for the snapshot.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Indicates whether the snapshot is encrypted.</p>
        pub fn encrypted(mut self, input: bool) -> Self {
            self.encrypted = Some(input);
            self
        }
        /// <p>Indicates whether the snapshot is encrypted.</p>
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.encrypted = input;
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
        pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
        pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_id = input;
            self
        }
        /// <p>The progress of the snapshot, as a percentage.</p>
        pub fn progress(mut self, input: impl Into<std::string::String>) -> Self {
            self.progress = Some(input.into());
            self
        }
        /// <p>The progress of the snapshot, as a percentage.</p>
        pub fn set_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.progress = input;
            self
        }
        /// <p>The time stamp when the snapshot was initiated.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The time stamp when the snapshot was initiated.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>The state of the snapshot.</p>
        pub fn state(mut self, input: crate::model::SnapshotState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the snapshot.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::SnapshotState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The ID of the volume that was used to create the snapshot.</p>
        pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(input.into());
            self
        }
        /// <p>The ID of the volume that was used to create the snapshot.</p>
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.volume_id = input;
            self
        }
        /// <p>The size of the volume, in GiB.</p>
        pub fn volume_size(mut self, input: i32) -> Self {
            self.volume_size = Some(input);
            self
        }
        /// <p>The size of the volume, in GiB.</p>
        pub fn set_volume_size(mut self, input: std::option::Option<i32>) -> Self {
            self.volume_size = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestoreSnapshotFromRecycleBinOutput`](crate::output::RestoreSnapshotFromRecycleBinOutput).
        pub fn build(self) -> crate::output::RestoreSnapshotFromRecycleBinOutput {
            crate::output::RestoreSnapshotFromRecycleBinOutput {
                snapshot_id: self.snapshot_id,
                outpost_arn: self.outpost_arn,
                description: self.description,
                encrypted: self.encrypted,
                owner_id: self.owner_id,
                progress: self.progress,
                start_time: self.start_time,
                state: self.state,
                volume_id: self.volume_id,
                volume_size: self.volume_size,
                _request_id: self._request_id,
            }
        }
    }
}
impl RestoreSnapshotFromRecycleBinOutput {
    /// Creates a new builder-style object to manufacture [`RestoreSnapshotFromRecycleBinOutput`](crate::output::RestoreSnapshotFromRecycleBinOutput).
    pub fn builder() -> crate::output::restore_snapshot_from_recycle_bin_output::Builder {
        crate::output::restore_snapshot_from_recycle_bin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreManagedPrefixListVersionOutput {
    /// <p>Information about the prefix list.</p>
    #[doc(hidden)]
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    _request_id: Option<String>,
}
impl RestoreManagedPrefixListVersionOutput {
    /// <p>Information about the prefix list.</p>
    pub fn prefix_list(&self) -> std::option::Option<&crate::model::ManagedPrefixList> {
        self.prefix_list.as_ref()
    }
}
impl aws_http::request_id::RequestId for RestoreManagedPrefixListVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput).
pub mod restore_managed_prefix_list_version_output {

    /// A builder for [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, input: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(input);
            self
        }
        /// <p>Information about the prefix list.</p>
        pub fn set_prefix_list(
            mut self,
            input: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput).
        pub fn build(self) -> crate::output::RestoreManagedPrefixListVersionOutput {
            crate::output::RestoreManagedPrefixListVersionOutput {
                prefix_list: self.prefix_list,
                _request_id: self._request_id,
            }
        }
    }
}
impl RestoreManagedPrefixListVersionOutput {
    /// Creates a new builder-style object to manufacture [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput).
    pub fn builder() -> crate::output::restore_managed_prefix_list_version_output::Builder {
        crate::output::restore_managed_prefix_list_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreImageFromRecycleBinOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl RestoreImageFromRecycleBinOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for RestoreImageFromRecycleBinOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RestoreImageFromRecycleBinOutput`](crate::output::RestoreImageFromRecycleBinOutput).
pub mod restore_image_from_recycle_bin_output {

    /// A builder for [`RestoreImageFromRecycleBinOutput`](crate::output::RestoreImageFromRecycleBinOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestoreImageFromRecycleBinOutput`](crate::output::RestoreImageFromRecycleBinOutput).
        pub fn build(self) -> crate::output::RestoreImageFromRecycleBinOutput {
            crate::output::RestoreImageFromRecycleBinOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl RestoreImageFromRecycleBinOutput {
    /// Creates a new builder-style object to manufacture [`RestoreImageFromRecycleBinOutput`](crate::output::RestoreImageFromRecycleBinOutput).
    pub fn builder() -> crate::output::restore_image_from_recycle_bin_output::Builder {
        crate::output::restore_image_from_recycle_bin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreAddressToClassicOutput {
    /// <p>The Elastic IP address.</p>
    #[doc(hidden)]
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>The move status for the IP address.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::Status>,
    _request_id: Option<String>,
}
impl RestoreAddressToClassicOutput {
    /// <p>The Elastic IP address.</p>
    pub fn public_ip(&self) -> std::option::Option<&str> {
        self.public_ip.as_deref()
    }
    /// <p>The move status for the IP address.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::Status> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for RestoreAddressToClassicOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput).
pub mod restore_address_to_classic_output {

    /// A builder for [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) public_ip: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::Status>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Elastic IP address.</p>
        pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
            self.public_ip = Some(input.into());
            self
        }
        /// <p>The Elastic IP address.</p>
        pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.public_ip = input;
            self
        }
        /// <p>The move status for the IP address.</p>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The move status for the IP address.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput).
        pub fn build(self) -> crate::output::RestoreAddressToClassicOutput {
            crate::output::RestoreAddressToClassicOutput {
                public_ip: self.public_ip,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl RestoreAddressToClassicOutput {
    /// Creates a new builder-style object to manufacture [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput).
    pub fn builder() -> crate::output::restore_address_to_classic_output::Builder {
        crate::output::restore_address_to_classic_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetSnapshotAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ResetSnapshotAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput).
pub mod reset_snapshot_attribute_output {

    /// A builder for [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput).
        pub fn build(self) -> crate::output::ResetSnapshotAttributeOutput {
            crate::output::ResetSnapshotAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetSnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput).
    pub fn builder() -> crate::output::reset_snapshot_attribute_output::Builder {
        crate::output::reset_snapshot_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetNetworkInterfaceAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ResetNetworkInterfaceAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput).
pub mod reset_network_interface_attribute_output {

    /// A builder for [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput).
        pub fn build(self) -> crate::output::ResetNetworkInterfaceAttributeOutput {
            crate::output::ResetNetworkInterfaceAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetNetworkInterfaceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput).
    pub fn builder() -> crate::output::reset_network_interface_attribute_output::Builder {
        crate::output::reset_network_interface_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetInstanceAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ResetInstanceAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput).
pub mod reset_instance_attribute_output {

    /// A builder for [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput).
        pub fn build(self) -> crate::output::ResetInstanceAttributeOutput {
            crate::output::ResetInstanceAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput).
    pub fn builder() -> crate::output::reset_instance_attribute_output::Builder {
        crate::output::reset_instance_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetImageAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ResetImageAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput).
pub mod reset_image_attribute_output {

    /// A builder for [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput).
        pub fn build(self) -> crate::output::ResetImageAttributeOutput {
            crate::output::ResetImageAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput).
    pub fn builder() -> crate::output::reset_image_attribute_output::Builder {
        crate::output::reset_image_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetFpgaImageAttributeOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ResetFpgaImageAttributeOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ResetFpgaImageAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput).
pub mod reset_fpga_image_attribute_output {

    /// A builder for [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput).
        pub fn build(self) -> crate::output::ResetFpgaImageAttributeOutput {
            crate::output::ResetFpgaImageAttributeOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetFpgaImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput).
    pub fn builder() -> crate::output::reset_fpga_image_attribute_output::Builder {
        crate::output::reset_fpga_image_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by default.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ResetEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by default.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ResetEbsDefaultKmsKeyIdOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput).
pub mod reset_ebs_default_kms_key_id_output {

    /// A builder for [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by default.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by default.</p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput).
        pub fn build(self) -> crate::output::ResetEbsDefaultKmsKeyIdOutput {
            crate::output::ResetEbsDefaultKmsKeyIdOutput {
                kms_key_id: self.kms_key_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetEbsDefaultKmsKeyIdOutput {
    /// Creates a new builder-style object to manufacture [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput).
    pub fn builder() -> crate::output::reset_ebs_default_kms_key_id_output::Builder {
        crate::output::reset_ebs_default_kms_key_id_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetAddressAttributeOutput {
    /// <p>Information about the IP address.</p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::model::AddressAttribute>,
    _request_id: Option<String>,
}
impl ResetAddressAttributeOutput {
    /// <p>Information about the IP address.</p>
    pub fn address(&self) -> std::option::Option<&crate::model::AddressAttribute> {
        self.address.as_ref()
    }
}
impl aws_http::request_id::RequestId for ResetAddressAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput).
pub mod reset_address_attribute_output {

    /// A builder for [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address: std::option::Option<crate::model::AddressAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IP address.</p>
        pub fn address(mut self, input: crate::model::AddressAttribute) -> Self {
            self.address = Some(input);
            self
        }
        /// <p>Information about the IP address.</p>
        pub fn set_address(
            mut self,
            input: std::option::Option<crate::model::AddressAttribute>,
        ) -> Self {
            self.address = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput).
        pub fn build(self) -> crate::output::ResetAddressAttributeOutput {
            crate::output::ResetAddressAttributeOutput {
                address: self.address,
                _request_id: self._request_id,
            }
        }
    }
}
impl ResetAddressAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput).
    pub fn builder() -> crate::output::reset_address_attribute_output::Builder {
        crate::output::reset_address_attribute_output::Builder::default()
    }
}

/// <p>Contains the output of RequestSpotInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RequestSpotInstancesOutput {
    /// <p>One or more Spot Instance requests.</p>
    #[doc(hidden)]
    pub spot_instance_requests:
        std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
    _request_id: Option<String>,
}
impl RequestSpotInstancesOutput {
    /// <p>One or more Spot Instance requests.</p>
    pub fn spot_instance_requests(
        &self,
    ) -> std::option::Option<&[crate::model::SpotInstanceRequest]> {
        self.spot_instance_requests.as_deref()
    }
}
impl aws_http::request_id::RequestId for RequestSpotInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput).
pub mod request_spot_instances_output {

    /// A builder for [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_instance_requests:
            std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `spot_instance_requests`.
        ///
        /// To override the contents of this collection use [`set_spot_instance_requests`](Self::set_spot_instance_requests).
        ///
        /// <p>One or more Spot Instance requests.</p>
        pub fn spot_instance_requests(mut self, input: crate::model::SpotInstanceRequest) -> Self {
            let mut v = self.spot_instance_requests.unwrap_or_default();
            v.push(input);
            self.spot_instance_requests = Some(v);
            self
        }
        /// <p>One or more Spot Instance requests.</p>
        pub fn set_spot_instance_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        ) -> Self {
            self.spot_instance_requests = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput).
        pub fn build(self) -> crate::output::RequestSpotInstancesOutput {
            crate::output::RequestSpotInstancesOutput {
                spot_instance_requests: self.spot_instance_requests,
                _request_id: self._request_id,
            }
        }
    }
}
impl RequestSpotInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput).
    pub fn builder() -> crate::output::request_spot_instances_output::Builder {
        crate::output::request_spot_instances_output::Builder::default()
    }
}

/// <p>Contains the output of RequestSpotFleet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RequestSpotFleetOutput {
    /// <p>The ID of the Spot Fleet request.</p>
    #[doc(hidden)]
    pub spot_fleet_request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RequestSpotFleetOutput {
    /// <p>The ID of the Spot Fleet request.</p>
    pub fn spot_fleet_request_id(&self) -> std::option::Option<&str> {
        self.spot_fleet_request_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for RequestSpotFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput).
pub mod request_spot_fleet_output {

    /// A builder for [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_fleet_request_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn spot_fleet_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.spot_fleet_request_id = Some(input.into());
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn set_spot_fleet_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.spot_fleet_request_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput).
        pub fn build(self) -> crate::output::RequestSpotFleetOutput {
            crate::output::RequestSpotFleetOutput {
                spot_fleet_request_id: self.spot_fleet_request_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl RequestSpotFleetOutput {
    /// Creates a new builder-style object to manufacture [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput).
    pub fn builder() -> crate::output::request_spot_fleet_output::Builder {
        crate::output::request_spot_fleet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportInstanceStatusOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ReportInstanceStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput).
pub mod report_instance_status_output {

    /// A builder for [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput).
        pub fn build(self) -> crate::output::ReportInstanceStatusOutput {
            crate::output::ReportInstanceStatusOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ReportInstanceStatusOutput {
    /// Creates a new builder-style object to manufacture [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput).
    pub fn builder() -> crate::output::report_instance_status_output::Builder {
        crate::output::report_instance_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceTransitGatewayRouteOutput {
    /// <p>Information about the modified route.</p>
    #[doc(hidden)]
    pub route: std::option::Option<crate::model::TransitGatewayRoute>,
    _request_id: Option<String>,
}
impl ReplaceTransitGatewayRouteOutput {
    /// <p>Information about the modified route.</p>
    pub fn route(&self) -> std::option::Option<&crate::model::TransitGatewayRoute> {
        self.route.as_ref()
    }
}
impl aws_http::request_id::RequestId for ReplaceTransitGatewayRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput).
pub mod replace_transit_gateway_route_output {

    /// A builder for [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::TransitGatewayRoute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the modified route.</p>
        pub fn route(mut self, input: crate::model::TransitGatewayRoute) -> Self {
            self.route = Some(input);
            self
        }
        /// <p>Information about the modified route.</p>
        pub fn set_route(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRoute>,
        ) -> Self {
            self.route = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput).
        pub fn build(self) -> crate::output::ReplaceTransitGatewayRouteOutput {
            crate::output::ReplaceTransitGatewayRouteOutput {
                route: self.route,
                _request_id: self._request_id,
            }
        }
    }
}
impl ReplaceTransitGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput).
    pub fn builder() -> crate::output::replace_transit_gateway_route_output::Builder {
        crate::output::replace_transit_gateway_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceRouteTableAssociationOutput {
    /// <p>The ID of the new association.</p>
    #[doc(hidden)]
    pub new_association_id: std::option::Option<std::string::String>,
    /// <p>The state of the association.</p>
    #[doc(hidden)]
    pub association_state: std::option::Option<crate::model::RouteTableAssociationState>,
    _request_id: Option<String>,
}
impl ReplaceRouteTableAssociationOutput {
    /// <p>The ID of the new association.</p>
    pub fn new_association_id(&self) -> std::option::Option<&str> {
        self.new_association_id.as_deref()
    }
    /// <p>The state of the association.</p>
    pub fn association_state(
        &self,
    ) -> std::option::Option<&crate::model::RouteTableAssociationState> {
        self.association_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for ReplaceRouteTableAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput).
pub mod replace_route_table_association_output {

    /// A builder for [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) new_association_id: std::option::Option<std::string::String>,
        pub(crate) association_state: std::option::Option<crate::model::RouteTableAssociationState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the new association.</p>
        pub fn new_association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_association_id = Some(input.into());
            self
        }
        /// <p>The ID of the new association.</p>
        pub fn set_new_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_association_id = input;
            self
        }
        /// <p>The state of the association.</p>
        pub fn association_state(
            mut self,
            input: crate::model::RouteTableAssociationState,
        ) -> Self {
            self.association_state = Some(input);
            self
        }
        /// <p>The state of the association.</p>
        pub fn set_association_state(
            mut self,
            input: std::option::Option<crate::model::RouteTableAssociationState>,
        ) -> Self {
            self.association_state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput).
        pub fn build(self) -> crate::output::ReplaceRouteTableAssociationOutput {
            crate::output::ReplaceRouteTableAssociationOutput {
                new_association_id: self.new_association_id,
                association_state: self.association_state,
                _request_id: self._request_id,
            }
        }
    }
}
impl ReplaceRouteTableAssociationOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput).
    pub fn builder() -> crate::output::replace_route_table_association_output::Builder {
        crate::output::replace_route_table_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceRouteOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ReplaceRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput).
pub mod replace_route_output {

    /// A builder for [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput).
        pub fn build(self) -> crate::output::ReplaceRouteOutput {
            crate::output::ReplaceRouteOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ReplaceRouteOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput).
    pub fn builder() -> crate::output::replace_route_output::Builder {
        crate::output::replace_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceNetworkAclEntryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ReplaceNetworkAclEntryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput).
pub mod replace_network_acl_entry_output {

    /// A builder for [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput).
        pub fn build(self) -> crate::output::ReplaceNetworkAclEntryOutput {
            crate::output::ReplaceNetworkAclEntryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ReplaceNetworkAclEntryOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput).
    pub fn builder() -> crate::output::replace_network_acl_entry_output::Builder {
        crate::output::replace_network_acl_entry_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceNetworkAclAssociationOutput {
    /// <p>The ID of the new association.</p>
    #[doc(hidden)]
    pub new_association_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ReplaceNetworkAclAssociationOutput {
    /// <p>The ID of the new association.</p>
    pub fn new_association_id(&self) -> std::option::Option<&str> {
        self.new_association_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ReplaceNetworkAclAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput).
pub mod replace_network_acl_association_output {

    /// A builder for [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) new_association_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the new association.</p>
        pub fn new_association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_association_id = Some(input.into());
            self
        }
        /// <p>The ID of the new association.</p>
        pub fn set_new_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_association_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput).
        pub fn build(self) -> crate::output::ReplaceNetworkAclAssociationOutput {
            crate::output::ReplaceNetworkAclAssociationOutput {
                new_association_id: self.new_association_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl ReplaceNetworkAclAssociationOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput).
    pub fn builder() -> crate::output::replace_network_acl_association_output::Builder {
        crate::output::replace_network_acl_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplaceIamInstanceProfileAssociationOutput {
    /// <p>Information about the IAM instance profile association.</p>
    #[doc(hidden)]
    pub iam_instance_profile_association:
        std::option::Option<crate::model::IamInstanceProfileAssociation>,
    _request_id: Option<String>,
}
impl ReplaceIamInstanceProfileAssociationOutput {
    /// <p>Information about the IAM instance profile association.</p>
    pub fn iam_instance_profile_association(
        &self,
    ) -> std::option::Option<&crate::model::IamInstanceProfileAssociation> {
        self.iam_instance_profile_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for ReplaceIamInstanceProfileAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput).
pub mod replace_iam_instance_profile_association_output {

    /// A builder for [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_association:
            std::option::Option<crate::model::IamInstanceProfileAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IAM instance profile association.</p>
        pub fn iam_instance_profile_association(
            mut self,
            input: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            self.iam_instance_profile_association = Some(input);
            self
        }
        /// <p>Information about the IAM instance profile association.</p>
        pub fn set_iam_instance_profile_association(
            mut self,
            input: std::option::Option<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            self.iam_instance_profile_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput).
        pub fn build(self) -> crate::output::ReplaceIamInstanceProfileAssociationOutput {
            crate::output::ReplaceIamInstanceProfileAssociationOutput {
                iam_instance_profile_association: self.iam_instance_profile_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl ReplaceIamInstanceProfileAssociationOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput).
    pub fn builder() -> crate::output::replace_iam_instance_profile_association_output::Builder {
        crate::output::replace_iam_instance_profile_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReleaseIpamPoolAllocationOutput {
    /// <p>Indicates if the release was successful.</p>
    #[doc(hidden)]
    pub success: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ReleaseIpamPoolAllocationOutput {
    /// <p>Indicates if the release was successful.</p>
    pub fn success(&self) -> std::option::Option<bool> {
        self.success
    }
}
impl aws_http::request_id::RequestId for ReleaseIpamPoolAllocationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReleaseIpamPoolAllocationOutput`](crate::output::ReleaseIpamPoolAllocationOutput).
pub mod release_ipam_pool_allocation_output {

    /// A builder for [`ReleaseIpamPoolAllocationOutput`](crate::output::ReleaseIpamPoolAllocationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) success: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates if the release was successful.</p>
        pub fn success(mut self, input: bool) -> Self {
            self.success = Some(input);
            self
        }
        /// <p>Indicates if the release was successful.</p>
        pub fn set_success(mut self, input: std::option::Option<bool>) -> Self {
            self.success = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReleaseIpamPoolAllocationOutput`](crate::output::ReleaseIpamPoolAllocationOutput).
        pub fn build(self) -> crate::output::ReleaseIpamPoolAllocationOutput {
            crate::output::ReleaseIpamPoolAllocationOutput {
                success: self.success,
                _request_id: self._request_id,
            }
        }
    }
}
impl ReleaseIpamPoolAllocationOutput {
    /// Creates a new builder-style object to manufacture [`ReleaseIpamPoolAllocationOutput`](crate::output::ReleaseIpamPoolAllocationOutput).
    pub fn builder() -> crate::output::release_ipam_pool_allocation_output::Builder {
        crate::output::release_ipam_pool_allocation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReleaseHostsOutput {
    /// <p>The IDs of the Dedicated Hosts that were successfully released.</p>
    #[doc(hidden)]
    pub successful: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl ReleaseHostsOutput {
    /// <p>The IDs of the Dedicated Hosts that were successfully released.</p>
    pub fn successful(&self) -> std::option::Option<&[std::string::String]> {
        self.successful.as_deref()
    }
    /// <p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for ReleaseHostsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput).
pub mod release_hosts_output {

    /// A builder for [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful`.
        ///
        /// To override the contents of this collection use [`set_successful`](Self::set_successful).
        ///
        /// <p>The IDs of the Dedicated Hosts that were successfully released.</p>
        pub fn successful(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(input.into());
            self.successful = Some(v);
            self
        }
        /// <p>The IDs of the Dedicated Hosts that were successfully released.</p>
        pub fn set_successful(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.successful = input;
            self
        }
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput).
        pub fn build(self) -> crate::output::ReleaseHostsOutput {
            crate::output::ReleaseHostsOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl ReleaseHostsOutput {
    /// Creates a new builder-style object to manufacture [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput).
    pub fn builder() -> crate::output::release_hosts_output::Builder {
        crate::output::release_hosts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReleaseAddressOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ReleaseAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput).
pub mod release_address_output {

    /// A builder for [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput).
        pub fn build(self) -> crate::output::ReleaseAddressOutput {
            crate::output::ReleaseAddressOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ReleaseAddressOutput {
    /// Creates a new builder-style object to manufacture [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput).
    pub fn builder() -> crate::output::release_address_output::Builder {
        crate::output::release_address_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RejectVpcPeeringConnectionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl RejectVpcPeeringConnectionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for RejectVpcPeeringConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput).
pub mod reject_vpc_peering_connection_output {

    /// A builder for [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput).
        pub fn build(self) -> crate::output::RejectVpcPeeringConnectionOutput {
            crate::output::RejectVpcPeeringConnectionOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl RejectVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput).
    pub fn builder() -> crate::output::reject_vpc_peering_connection_output::Builder {
        crate::output::reject_vpc_peering_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RejectVpcEndpointConnectionsOutput {
    /// <p>Information about the endpoints that were not rejected, if applicable.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl RejectVpcEndpointConnectionsOutput {
    /// <p>Information about the endpoints that were not rejected, if applicable.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for RejectVpcEndpointConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput).
pub mod reject_vpc_endpoint_connections_output {

    /// A builder for [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the endpoints that were not rejected, if applicable.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the endpoints that were not rejected, if applicable.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput).
        pub fn build(self) -> crate::output::RejectVpcEndpointConnectionsOutput {
            crate::output::RejectVpcEndpointConnectionsOutput {
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl RejectVpcEndpointConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput).
    pub fn builder() -> crate::output::reject_vpc_endpoint_connections_output::Builder {
        crate::output::reject_vpc_endpoint_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RejectTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    _request_id: Option<String>,
}
impl RejectTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the attachment.</p>
    pub fn transit_gateway_vpc_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayVpcAttachment> {
        self.transit_gateway_vpc_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for RejectTransitGatewayVpcAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput).
pub mod reject_transit_gateway_vpc_attachment_output {

    /// A builder for [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            input: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(input);
            self
        }
        /// <p>Information about the attachment.</p>
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput).
        pub fn build(self) -> crate::output::RejectTransitGatewayVpcAttachmentOutput {
            crate::output::RejectTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl RejectTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput).
    pub fn builder() -> crate::output::reject_transit_gateway_vpc_attachment_output::Builder {
        crate::output::reject_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RejectTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    _request_id: Option<String>,
}
impl RejectTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub fn transit_gateway_peering_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPeeringAttachment> {
        self.transit_gateway_peering_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for RejectTransitGatewayPeeringAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput).
pub mod reject_transit_gateway_peering_attachment_output {

    /// A builder for [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            input: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(input);
            self
        }
        /// <p>The transit gateway peering attachment.</p>
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput).
        pub fn build(self) -> crate::output::RejectTransitGatewayPeeringAttachmentOutput {
            crate::output::RejectTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl RejectTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput).
    pub fn builder() -> crate::output::reject_transit_gateway_peering_attachment_output::Builder {
        crate::output::reject_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RejectTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    #[doc(hidden)]
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    _request_id: Option<String>,
}
impl RejectTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    pub fn associations(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDomainAssociations> {
        self.associations.as_ref()
    }
}
impl aws_http::request_id::RequestId for RejectTransitGatewayMulticastDomainAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput).
pub mod reject_transit_gateway_multicast_domain_associations_output {

    /// A builder for [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the multicast domain associations.</p>
        pub fn associations(
            mut self,
            input: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(input);
            self
        }
        /// <p>Information about the multicast domain associations.</p>
        pub fn set_associations(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput).
        pub fn build(self) -> crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput {
            crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput {
                associations: self.associations,
                _request_id: self._request_id,
            }
        }
    }
}
impl RejectTransitGatewayMulticastDomainAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput).
    pub fn builder(
    ) -> crate::output::reject_transit_gateway_multicast_domain_associations_output::Builder {
        crate::output::reject_transit_gateway_multicast_domain_associations_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterTransitGatewayMulticastGroupSourcesOutput {
    /// <p>Information about the transit gateway multicast group sources.</p>
    #[doc(hidden)]
    pub registered_multicast_group_sources:
        std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupSources>,
    _request_id: Option<String>,
}
impl RegisterTransitGatewayMulticastGroupSourcesOutput {
    /// <p>Information about the transit gateway multicast group sources.</p>
    pub fn registered_multicast_group_sources(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastRegisteredGroupSources> {
        self.registered_multicast_group_sources.as_ref()
    }
}
impl aws_http::request_id::RequestId for RegisterTransitGatewayMulticastGroupSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput).
pub mod register_transit_gateway_multicast_group_sources_output {

    /// A builder for [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) registered_multicast_group_sources:
            std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupSources>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the transit gateway multicast group sources.</p>
        pub fn registered_multicast_group_sources(
            mut self,
            input: crate::model::TransitGatewayMulticastRegisteredGroupSources,
        ) -> Self {
            self.registered_multicast_group_sources = Some(input);
            self
        }
        /// <p>Information about the transit gateway multicast group sources.</p>
        pub fn set_registered_multicast_group_sources(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupSources>,
        ) -> Self {
            self.registered_multicast_group_sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput).
        pub fn build(self) -> crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput {
            crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput {
                registered_multicast_group_sources: self.registered_multicast_group_sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl RegisterTransitGatewayMulticastGroupSourcesOutput {
    /// Creates a new builder-style object to manufacture [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput).
    pub fn builder(
    ) -> crate::output::register_transit_gateway_multicast_group_sources_output::Builder {
        crate::output::register_transit_gateway_multicast_group_sources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterTransitGatewayMulticastGroupMembersOutput {
    /// <p>Information about the registered transit gateway multicast group members.</p>
    #[doc(hidden)]
    pub registered_multicast_group_members:
        std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupMembers>,
    _request_id: Option<String>,
}
impl RegisterTransitGatewayMulticastGroupMembersOutput {
    /// <p>Information about the registered transit gateway multicast group members.</p>
    pub fn registered_multicast_group_members(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastRegisteredGroupMembers> {
        self.registered_multicast_group_members.as_ref()
    }
}
impl aws_http::request_id::RequestId for RegisterTransitGatewayMulticastGroupMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput).
pub mod register_transit_gateway_multicast_group_members_output {

    /// A builder for [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) registered_multicast_group_members:
            std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupMembers>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the registered transit gateway multicast group members.</p>
        pub fn registered_multicast_group_members(
            mut self,
            input: crate::model::TransitGatewayMulticastRegisteredGroupMembers,
        ) -> Self {
            self.registered_multicast_group_members = Some(input);
            self
        }
        /// <p>Information about the registered transit gateway multicast group members.</p>
        pub fn set_registered_multicast_group_members(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupMembers>,
        ) -> Self {
            self.registered_multicast_group_members = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput).
        pub fn build(self) -> crate::output::RegisterTransitGatewayMulticastGroupMembersOutput {
            crate::output::RegisterTransitGatewayMulticastGroupMembersOutput {
                registered_multicast_group_members: self.registered_multicast_group_members,
                _request_id: self._request_id,
            }
        }
    }
}
impl RegisterTransitGatewayMulticastGroupMembersOutput {
    /// Creates a new builder-style object to manufacture [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput).
    pub fn builder(
    ) -> crate::output::register_transit_gateway_multicast_group_members_output::Builder {
        crate::output::register_transit_gateway_multicast_group_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterInstanceEventNotificationAttributesOutput {
    /// <p>The resulting set of tag keys.</p>
    #[doc(hidden)]
    pub instance_tag_attribute: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
    _request_id: Option<String>,
}
impl RegisterInstanceEventNotificationAttributesOutput {
    /// <p>The resulting set of tag keys.</p>
    pub fn instance_tag_attribute(
        &self,
    ) -> std::option::Option<&crate::model::InstanceTagNotificationAttribute> {
        self.instance_tag_attribute.as_ref()
    }
}
impl aws_http::request_id::RequestId for RegisterInstanceEventNotificationAttributesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput).
pub mod register_instance_event_notification_attributes_output {

    /// A builder for [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_tag_attribute:
            std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The resulting set of tag keys.</p>
        pub fn instance_tag_attribute(
            mut self,
            input: crate::model::InstanceTagNotificationAttribute,
        ) -> Self {
            self.instance_tag_attribute = Some(input);
            self
        }
        /// <p>The resulting set of tag keys.</p>
        pub fn set_instance_tag_attribute(
            mut self,
            input: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        ) -> Self {
            self.instance_tag_attribute = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput).
        pub fn build(self) -> crate::output::RegisterInstanceEventNotificationAttributesOutput {
            crate::output::RegisterInstanceEventNotificationAttributesOutput {
                instance_tag_attribute: self.instance_tag_attribute,
                _request_id: self._request_id,
            }
        }
    }
}
impl RegisterInstanceEventNotificationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput).
    pub fn builder(
    ) -> crate::output::register_instance_event_notification_attributes_output::Builder {
        crate::output::register_instance_event_notification_attributes_output::Builder::default()
    }
}

/// <p>Contains the output of RegisterImage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterImageOutput {
    /// <p>The ID of the newly registered AMI.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterImageOutput {
    /// <p>The ID of the newly registered AMI.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for RegisterImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RegisterImageOutput`](crate::output::RegisterImageOutput).
pub mod register_image_output {

    /// A builder for [`RegisterImageOutput`](crate::output::RegisterImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the newly registered AMI.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the newly registered AMI.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RegisterImageOutput`](crate::output::RegisterImageOutput).
        pub fn build(self) -> crate::output::RegisterImageOutput {
            crate::output::RegisterImageOutput {
                image_id: self.image_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl RegisterImageOutput {
    /// Creates a new builder-style object to manufacture [`RegisterImageOutput`](crate::output::RegisterImageOutput).
    pub fn builder() -> crate::output::register_image_output::Builder {
        crate::output::register_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RebootInstancesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for RebootInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RebootInstancesOutput`](crate::output::RebootInstancesOutput).
pub mod reboot_instances_output {

    /// A builder for [`RebootInstancesOutput`](crate::output::RebootInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RebootInstancesOutput`](crate::output::RebootInstancesOutput).
        pub fn build(self) -> crate::output::RebootInstancesOutput {
            crate::output::RebootInstancesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl RebootInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RebootInstancesOutput`](crate::output::RebootInstancesOutput).
    pub fn builder() -> crate::output::reboot_instances_output::Builder {
        crate::output::reboot_instances_output::Builder::default()
    }
}

/// <p>Contains the output of PurchaseScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PurchaseScheduledInstancesOutput {
    /// <p>Information about the Scheduled Instances.</p>
    #[doc(hidden)]
    pub scheduled_instance_set: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
    _request_id: Option<String>,
}
impl PurchaseScheduledInstancesOutput {
    /// <p>Information about the Scheduled Instances.</p>
    pub fn scheduled_instance_set(
        &self,
    ) -> std::option::Option<&[crate::model::ScheduledInstance]> {
        self.scheduled_instance_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for PurchaseScheduledInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput).
pub mod purchase_scheduled_instances_output {

    /// A builder for [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scheduled_instance_set:
            std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `scheduled_instance_set`.
        ///
        /// To override the contents of this collection use [`set_scheduled_instance_set`](Self::set_scheduled_instance_set).
        ///
        /// <p>Information about the Scheduled Instances.</p>
        pub fn scheduled_instance_set(mut self, input: crate::model::ScheduledInstance) -> Self {
            let mut v = self.scheduled_instance_set.unwrap_or_default();
            v.push(input);
            self.scheduled_instance_set = Some(v);
            self
        }
        /// <p>Information about the Scheduled Instances.</p>
        pub fn set_scheduled_instance_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
        ) -> Self {
            self.scheduled_instance_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput).
        pub fn build(self) -> crate::output::PurchaseScheduledInstancesOutput {
            crate::output::PurchaseScheduledInstancesOutput {
                scheduled_instance_set: self.scheduled_instance_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl PurchaseScheduledInstancesOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput).
    pub fn builder() -> crate::output::purchase_scheduled_instances_output::Builder {
        crate::output::purchase_scheduled_instances_output::Builder::default()
    }
}

/// <p>Contains the output of PurchaseReservedInstancesOffering.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PurchaseReservedInstancesOfferingOutput {
    /// <p>The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted pricing tier, the final Reserved Instances IDs might change. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers">Crossing pricing tiers</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #[doc(hidden)]
    pub reserved_instances_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl PurchaseReservedInstancesOfferingOutput {
    /// <p>The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted pricing tier, the final Reserved Instances IDs might change. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers">Crossing pricing tiers</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn reserved_instances_id(&self) -> std::option::Option<&str> {
        self.reserved_instances_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for PurchaseReservedInstancesOfferingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput).
pub mod purchase_reserved_instances_offering_output {

    /// A builder for [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted pricing tier, the final Reserved Instances IDs might change. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers">Crossing pricing tiers</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn reserved_instances_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reserved_instances_id = Some(input.into());
            self
        }
        /// <p>The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted pricing tier, the final Reserved Instances IDs might change. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers">Crossing pricing tiers</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn set_reserved_instances_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_instances_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput).
        pub fn build(self) -> crate::output::PurchaseReservedInstancesOfferingOutput {
            crate::output::PurchaseReservedInstancesOfferingOutput {
                reserved_instances_id: self.reserved_instances_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl PurchaseReservedInstancesOfferingOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput).
    pub fn builder() -> crate::output::purchase_reserved_instances_offering_output::Builder {
        crate::output::purchase_reserved_instances_offering_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PurchaseHostReservationOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
    /// <p>Describes the details of the purchase.</p>
    #[doc(hidden)]
    pub purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
    /// <p>The total hourly price of the reservation calculated per hour.</p>
    #[doc(hidden)]
    pub total_hourly_price: std::option::Option<std::string::String>,
    /// <p>The total amount charged to your account when you purchase the reservation.</p>
    #[doc(hidden)]
    pub total_upfront_price: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl PurchaseHostReservationOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub fn currency_code(&self) -> std::option::Option<&crate::model::CurrencyCodeValues> {
        self.currency_code.as_ref()
    }
    /// <p>Describes the details of the purchase.</p>
    pub fn purchase(&self) -> std::option::Option<&[crate::model::Purchase]> {
        self.purchase.as_deref()
    }
    /// <p>The total hourly price of the reservation calculated per hour.</p>
    pub fn total_hourly_price(&self) -> std::option::Option<&str> {
        self.total_hourly_price.as_deref()
    }
    /// <p>The total amount charged to your account when you purchase the reservation.</p>
    pub fn total_upfront_price(&self) -> std::option::Option<&str> {
        self.total_upfront_price.as_deref()
    }
}
impl aws_http::request_id::RequestId for PurchaseHostReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput).
pub mod purchase_host_reservation_output {

    /// A builder for [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
        pub(crate) purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        pub(crate) total_hourly_price: std::option::Option<std::string::String>,
        pub(crate) total_upfront_price: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
        pub fn currency_code(mut self, input: crate::model::CurrencyCodeValues) -> Self {
            self.currency_code = Some(input);
            self
        }
        /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
        pub fn set_currency_code(
            mut self,
            input: std::option::Option<crate::model::CurrencyCodeValues>,
        ) -> Self {
            self.currency_code = input;
            self
        }
        /// Appends an item to `purchase`.
        ///
        /// To override the contents of this collection use [`set_purchase`](Self::set_purchase).
        ///
        /// <p>Describes the details of the purchase.</p>
        pub fn purchase(mut self, input: crate::model::Purchase) -> Self {
            let mut v = self.purchase.unwrap_or_default();
            v.push(input);
            self.purchase = Some(v);
            self
        }
        /// <p>Describes the details of the purchase.</p>
        pub fn set_purchase(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        ) -> Self {
            self.purchase = input;
            self
        }
        /// <p>The total hourly price of the reservation calculated per hour.</p>
        pub fn total_hourly_price(mut self, input: impl Into<std::string::String>) -> Self {
            self.total_hourly_price = Some(input.into());
            self
        }
        /// <p>The total hourly price of the reservation calculated per hour.</p>
        pub fn set_total_hourly_price(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_hourly_price = input;
            self
        }
        /// <p>The total amount charged to your account when you purchase the reservation.</p>
        pub fn total_upfront_price(mut self, input: impl Into<std::string::String>) -> Self {
            self.total_upfront_price = Some(input.into());
            self
        }
        /// <p>The total amount charged to your account when you purchase the reservation.</p>
        pub fn set_total_upfront_price(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_upfront_price = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput).
        pub fn build(self) -> crate::output::PurchaseHostReservationOutput {
            crate::output::PurchaseHostReservationOutput {
                client_token: self.client_token,
                currency_code: self.currency_code,
                purchase: self.purchase,
                total_hourly_price: self.total_hourly_price,
                total_upfront_price: self.total_upfront_price,
                _request_id: self._request_id,
            }
        }
    }
}
impl PurchaseHostReservationOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput).
    pub fn builder() -> crate::output::purchase_host_reservation_output::Builder {
        crate::output::purchase_host_reservation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvisionPublicIpv4PoolCidrOutput {
    /// <p>The ID of the pool that you want to provision the CIDR to.</p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    /// <p>Information about the address range of the public IPv4 pool.</p>
    #[doc(hidden)]
    pub pool_address_range: std::option::Option<crate::model::PublicIpv4PoolRange>,
    _request_id: Option<String>,
}
impl ProvisionPublicIpv4PoolCidrOutput {
    /// <p>The ID of the pool that you want to provision the CIDR to.</p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>Information about the address range of the public IPv4 pool.</p>
    pub fn pool_address_range(&self) -> std::option::Option<&crate::model::PublicIpv4PoolRange> {
        self.pool_address_range.as_ref()
    }
}
impl aws_http::request_id::RequestId for ProvisionPublicIpv4PoolCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ProvisionPublicIpv4PoolCidrOutput`](crate::output::ProvisionPublicIpv4PoolCidrOutput).
pub mod provision_public_ipv4_pool_cidr_output {

    /// A builder for [`ProvisionPublicIpv4PoolCidrOutput`](crate::output::ProvisionPublicIpv4PoolCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pool_id: std::option::Option<std::string::String>,
        pub(crate) pool_address_range: std::option::Option<crate::model::PublicIpv4PoolRange>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the pool that you want to provision the CIDR to.</p>
        pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.pool_id = Some(input.into());
            self
        }
        /// <p>The ID of the pool that you want to provision the CIDR to.</p>
        pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.pool_id = input;
            self
        }
        /// <p>Information about the address range of the public IPv4 pool.</p>
        pub fn pool_address_range(mut self, input: crate::model::PublicIpv4PoolRange) -> Self {
            self.pool_address_range = Some(input);
            self
        }
        /// <p>Information about the address range of the public IPv4 pool.</p>
        pub fn set_pool_address_range(
            mut self,
            input: std::option::Option<crate::model::PublicIpv4PoolRange>,
        ) -> Self {
            self.pool_address_range = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionPublicIpv4PoolCidrOutput`](crate::output::ProvisionPublicIpv4PoolCidrOutput).
        pub fn build(self) -> crate::output::ProvisionPublicIpv4PoolCidrOutput {
            crate::output::ProvisionPublicIpv4PoolCidrOutput {
                pool_id: self.pool_id,
                pool_address_range: self.pool_address_range,
                _request_id: self._request_id,
            }
        }
    }
}
impl ProvisionPublicIpv4PoolCidrOutput {
    /// Creates a new builder-style object to manufacture [`ProvisionPublicIpv4PoolCidrOutput`](crate::output::ProvisionPublicIpv4PoolCidrOutput).
    pub fn builder() -> crate::output::provision_public_ipv4_pool_cidr_output::Builder {
        crate::output::provision_public_ipv4_pool_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvisionIpamPoolCidrOutput {
    /// <p>Information about the provisioned CIDR.</p>
    #[doc(hidden)]
    pub ipam_pool_cidr: std::option::Option<crate::model::IpamPoolCidr>,
    _request_id: Option<String>,
}
impl ProvisionIpamPoolCidrOutput {
    /// <p>Information about the provisioned CIDR.</p>
    pub fn ipam_pool_cidr(&self) -> std::option::Option<&crate::model::IpamPoolCidr> {
        self.ipam_pool_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for ProvisionIpamPoolCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ProvisionIpamPoolCidrOutput`](crate::output::ProvisionIpamPoolCidrOutput).
pub mod provision_ipam_pool_cidr_output {

    /// A builder for [`ProvisionIpamPoolCidrOutput`](crate::output::ProvisionIpamPoolCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool_cidr: std::option::Option<crate::model::IpamPoolCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the provisioned CIDR.</p>
        pub fn ipam_pool_cidr(mut self, input: crate::model::IpamPoolCidr) -> Self {
            self.ipam_pool_cidr = Some(input);
            self
        }
        /// <p>Information about the provisioned CIDR.</p>
        pub fn set_ipam_pool_cidr(
            mut self,
            input: std::option::Option<crate::model::IpamPoolCidr>,
        ) -> Self {
            self.ipam_pool_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionIpamPoolCidrOutput`](crate::output::ProvisionIpamPoolCidrOutput).
        pub fn build(self) -> crate::output::ProvisionIpamPoolCidrOutput {
            crate::output::ProvisionIpamPoolCidrOutput {
                ipam_pool_cidr: self.ipam_pool_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl ProvisionIpamPoolCidrOutput {
    /// Creates a new builder-style object to manufacture [`ProvisionIpamPoolCidrOutput`](crate::output::ProvisionIpamPoolCidrOutput).
    pub fn builder() -> crate::output::provision_ipam_pool_cidr_output::Builder {
        crate::output::provision_ipam_pool_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    #[doc(hidden)]
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    _request_id: Option<String>,
}
impl ProvisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for ProvisionByoipCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput).
pub mod provision_byoip_cidr_output {

    /// A builder for [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address range.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput).
        pub fn build(self) -> crate::output::ProvisionByoipCidrOutput {
            crate::output::ProvisionByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl ProvisionByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput).
    pub fn builder() -> crate::output::provision_byoip_cidr_output::Builder {
        crate::output::provision_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MoveByoipCidrToIpamOutput {
    /// <p>The BYOIP CIDR.</p>
    #[doc(hidden)]
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    _request_id: Option<String>,
}
impl MoveByoipCidrToIpamOutput {
    /// <p>The BYOIP CIDR.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for MoveByoipCidrToIpamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`MoveByoipCidrToIpamOutput`](crate::output::MoveByoipCidrToIpamOutput).
pub mod move_byoip_cidr_to_ipam_output {

    /// A builder for [`MoveByoipCidrToIpamOutput`](crate::output::MoveByoipCidrToIpamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The BYOIP CIDR.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>The BYOIP CIDR.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`MoveByoipCidrToIpamOutput`](crate::output::MoveByoipCidrToIpamOutput).
        pub fn build(self) -> crate::output::MoveByoipCidrToIpamOutput {
            crate::output::MoveByoipCidrToIpamOutput {
                byoip_cidr: self.byoip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl MoveByoipCidrToIpamOutput {
    /// Creates a new builder-style object to manufacture [`MoveByoipCidrToIpamOutput`](crate::output::MoveByoipCidrToIpamOutput).
    pub fn builder() -> crate::output::move_byoip_cidr_to_ipam_output::Builder {
        crate::output::move_byoip_cidr_to_ipam_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MoveAddressToVpcOutput {
    /// <p>The allocation ID for the Elastic IP address.</p>
    #[doc(hidden)]
    pub allocation_id: std::option::Option<std::string::String>,
    /// <p>The status of the move of the IP address.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::Status>,
    _request_id: Option<String>,
}
impl MoveAddressToVpcOutput {
    /// <p>The allocation ID for the Elastic IP address.</p>
    pub fn allocation_id(&self) -> std::option::Option<&str> {
        self.allocation_id.as_deref()
    }
    /// <p>The status of the move of the IP address.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::Status> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for MoveAddressToVpcOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput).
pub mod move_address_to_vpc_output {

    /// A builder for [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) allocation_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::Status>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The allocation ID for the Elastic IP address.</p>
        pub fn allocation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.allocation_id = Some(input.into());
            self
        }
        /// <p>The allocation ID for the Elastic IP address.</p>
        pub fn set_allocation_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.allocation_id = input;
            self
        }
        /// <p>The status of the move of the IP address.</p>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the move of the IP address.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput).
        pub fn build(self) -> crate::output::MoveAddressToVpcOutput {
            crate::output::MoveAddressToVpcOutput {
                allocation_id: self.allocation_id,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl MoveAddressToVpcOutput {
    /// Creates a new builder-style object to manufacture [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput).
    pub fn builder() -> crate::output::move_address_to_vpc_output::Builder {
        crate::output::move_address_to_vpc_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitorInstancesOutput {
    /// <p>The monitoring information.</p>
    #[doc(hidden)]
    pub instance_monitorings: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
    _request_id: Option<String>,
}
impl MonitorInstancesOutput {
    /// <p>The monitoring information.</p>
    pub fn instance_monitorings(&self) -> std::option::Option<&[crate::model::InstanceMonitoring]> {
        self.instance_monitorings.as_deref()
    }
}
impl aws_http::request_id::RequestId for MonitorInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput).
pub mod monitor_instances_output {

    /// A builder for [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_monitorings:
            std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_monitorings`.
        ///
        /// To override the contents of this collection use [`set_instance_monitorings`](Self::set_instance_monitorings).
        ///
        /// <p>The monitoring information.</p>
        pub fn instance_monitorings(mut self, input: crate::model::InstanceMonitoring) -> Self {
            let mut v = self.instance_monitorings.unwrap_or_default();
            v.push(input);
            self.instance_monitorings = Some(v);
            self
        }
        /// <p>The monitoring information.</p>
        pub fn set_instance_monitorings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
        ) -> Self {
            self.instance_monitorings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput).
        pub fn build(self) -> crate::output::MonitorInstancesOutput {
            crate::output::MonitorInstancesOutput {
                instance_monitorings: self.instance_monitorings,
                _request_id: self._request_id,
            }
        }
    }
}
impl MonitorInstancesOutput {
    /// Creates a new builder-style object to manufacture [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput).
    pub fn builder() -> crate::output::monitor_instances_output::Builder {
        crate::output::monitor_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpnTunnelOptionsOutput {
    /// <p>Information about the VPN connection.</p>
    #[doc(hidden)]
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
    _request_id: Option<String>,
}
impl ModifyVpnTunnelOptionsOutput {
    /// <p>Information about the VPN connection.</p>
    pub fn vpn_connection(&self) -> std::option::Option<&crate::model::VpnConnection> {
        self.vpn_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVpnTunnelOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput).
pub mod modify_vpn_tunnel_options_output {

    /// A builder for [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPN connection.</p>
        pub fn vpn_connection(mut self, input: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(input);
            self
        }
        /// <p>Information about the VPN connection.</p>
        pub fn set_vpn_connection(
            mut self,
            input: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput).
        pub fn build(self) -> crate::output::ModifyVpnTunnelOptionsOutput {
            crate::output::ModifyVpnTunnelOptionsOutput {
                vpn_connection: self.vpn_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpnTunnelOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput).
    pub fn builder() -> crate::output::modify_vpn_tunnel_options_output::Builder {
        crate::output::modify_vpn_tunnel_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpnTunnelCertificateOutput {
    /// <p>Information about the VPN connection.</p>
    #[doc(hidden)]
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
    _request_id: Option<String>,
}
impl ModifyVpnTunnelCertificateOutput {
    /// <p>Information about the VPN connection.</p>
    pub fn vpn_connection(&self) -> std::option::Option<&crate::model::VpnConnection> {
        self.vpn_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVpnTunnelCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput).
pub mod modify_vpn_tunnel_certificate_output {

    /// A builder for [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPN connection.</p>
        pub fn vpn_connection(mut self, input: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(input);
            self
        }
        /// <p>Information about the VPN connection.</p>
        pub fn set_vpn_connection(
            mut self,
            input: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput).
        pub fn build(self) -> crate::output::ModifyVpnTunnelCertificateOutput {
            crate::output::ModifyVpnTunnelCertificateOutput {
                vpn_connection: self.vpn_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpnTunnelCertificateOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput).
    pub fn builder() -> crate::output::modify_vpn_tunnel_certificate_output::Builder {
        crate::output::modify_vpn_tunnel_certificate_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpnConnectionOptionsOutput {
    /// <p>Information about the VPN connection.</p>
    #[doc(hidden)]
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
    _request_id: Option<String>,
}
impl ModifyVpnConnectionOptionsOutput {
    /// <p>Information about the VPN connection.</p>
    pub fn vpn_connection(&self) -> std::option::Option<&crate::model::VpnConnection> {
        self.vpn_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVpnConnectionOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput).
pub mod modify_vpn_connection_options_output {

    /// A builder for [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPN connection.</p>
        pub fn vpn_connection(mut self, input: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(input);
            self
        }
        /// <p>Information about the VPN connection.</p>
        pub fn set_vpn_connection(
            mut self,
            input: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput).
        pub fn build(self) -> crate::output::ModifyVpnConnectionOptionsOutput {
            crate::output::ModifyVpnConnectionOptionsOutput {
                vpn_connection: self.vpn_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpnConnectionOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput).
    pub fn builder() -> crate::output::modify_vpn_connection_options_output::Builder {
        crate::output::modify_vpn_connection_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpnConnectionOutput {
    /// <p>Information about the VPN connection.</p>
    #[doc(hidden)]
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
    _request_id: Option<String>,
}
impl ModifyVpnConnectionOutput {
    /// <p>Information about the VPN connection.</p>
    pub fn vpn_connection(&self) -> std::option::Option<&crate::model::VpnConnection> {
        self.vpn_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVpnConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput).
pub mod modify_vpn_connection_output {

    /// A builder for [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPN connection.</p>
        pub fn vpn_connection(mut self, input: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(input);
            self
        }
        /// <p>Information about the VPN connection.</p>
        pub fn set_vpn_connection(
            mut self,
            input: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput).
        pub fn build(self) -> crate::output::ModifyVpnConnectionOutput {
            crate::output::ModifyVpnConnectionOutput {
                vpn_connection: self.vpn_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpnConnectionOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput).
    pub fn builder() -> crate::output::modify_vpn_connection_output::Builder {
        crate::output::modify_vpn_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcTenancyOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyVpcTenancyOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for ModifyVpcTenancyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput).
pub mod modify_vpc_tenancy_output {

    /// A builder for [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput).
        pub fn build(self) -> crate::output::ModifyVpcTenancyOutput {
            crate::output::ModifyVpcTenancyOutput {
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcTenancyOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput).
    pub fn builder() -> crate::output::modify_vpc_tenancy_output::Builder {
        crate::output::modify_vpc_tenancy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcPeeringConnectionOptionsOutput {
    /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
    #[doc(hidden)]
    pub accepter_peering_connection_options:
        std::option::Option<crate::model::PeeringConnectionOptions>,
    /// <p>Information about the VPC peering connection options for the requester VPC.</p>
    #[doc(hidden)]
    pub requester_peering_connection_options:
        std::option::Option<crate::model::PeeringConnectionOptions>,
    _request_id: Option<String>,
}
impl ModifyVpcPeeringConnectionOptionsOutput {
    /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
    pub fn accepter_peering_connection_options(
        &self,
    ) -> std::option::Option<&crate::model::PeeringConnectionOptions> {
        self.accepter_peering_connection_options.as_ref()
    }
    /// <p>Information about the VPC peering connection options for the requester VPC.</p>
    pub fn requester_peering_connection_options(
        &self,
    ) -> std::option::Option<&crate::model::PeeringConnectionOptions> {
        self.requester_peering_connection_options.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVpcPeeringConnectionOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput).
pub mod modify_vpc_peering_connection_options_output {

    /// A builder for [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accepter_peering_connection_options:
            std::option::Option<crate::model::PeeringConnectionOptions>,
        pub(crate) requester_peering_connection_options:
            std::option::Option<crate::model::PeeringConnectionOptions>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
        pub fn accepter_peering_connection_options(
            mut self,
            input: crate::model::PeeringConnectionOptions,
        ) -> Self {
            self.accepter_peering_connection_options = Some(input);
            self
        }
        /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
        pub fn set_accepter_peering_connection_options(
            mut self,
            input: std::option::Option<crate::model::PeeringConnectionOptions>,
        ) -> Self {
            self.accepter_peering_connection_options = input;
            self
        }
        /// <p>Information about the VPC peering connection options for the requester VPC.</p>
        pub fn requester_peering_connection_options(
            mut self,
            input: crate::model::PeeringConnectionOptions,
        ) -> Self {
            self.requester_peering_connection_options = Some(input);
            self
        }
        /// <p>Information about the VPC peering connection options for the requester VPC.</p>
        pub fn set_requester_peering_connection_options(
            mut self,
            input: std::option::Option<crate::model::PeeringConnectionOptions>,
        ) -> Self {
            self.requester_peering_connection_options = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput).
        pub fn build(self) -> crate::output::ModifyVpcPeeringConnectionOptionsOutput {
            crate::output::ModifyVpcPeeringConnectionOptionsOutput {
                accepter_peering_connection_options: self.accepter_peering_connection_options,
                requester_peering_connection_options: self.requester_peering_connection_options,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcPeeringConnectionOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput).
    pub fn builder() -> crate::output::modify_vpc_peering_connection_options_output::Builder {
        crate::output::modify_vpc_peering_connection_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcEndpointServicePermissionsOutput {
    /// <p>Information about the added principals.</p>
    #[doc(hidden)]
    pub added_principals: std::option::Option<std::vec::Vec<crate::model::AddedPrincipal>>,
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyVpcEndpointServicePermissionsOutput {
    /// <p>Information about the added principals.</p>
    pub fn added_principals(&self) -> std::option::Option<&[crate::model::AddedPrincipal]> {
        self.added_principals.as_deref()
    }
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for ModifyVpcEndpointServicePermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput).
pub mod modify_vpc_endpoint_service_permissions_output {

    /// A builder for [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) added_principals:
            std::option::Option<std::vec::Vec<crate::model::AddedPrincipal>>,
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `added_principals`.
        ///
        /// To override the contents of this collection use [`set_added_principals`](Self::set_added_principals).
        ///
        /// <p>Information about the added principals.</p>
        pub fn added_principals(mut self, input: crate::model::AddedPrincipal) -> Self {
            let mut v = self.added_principals.unwrap_or_default();
            v.push(input);
            self.added_principals = Some(v);
            self
        }
        /// <p>Information about the added principals.</p>
        pub fn set_added_principals(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AddedPrincipal>>,
        ) -> Self {
            self.added_principals = input;
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput).
        pub fn build(self) -> crate::output::ModifyVpcEndpointServicePermissionsOutput {
            crate::output::ModifyVpcEndpointServicePermissionsOutput {
                added_principals: self.added_principals,
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcEndpointServicePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput).
    pub fn builder() -> crate::output::modify_vpc_endpoint_service_permissions_output::Builder {
        crate::output::modify_vpc_endpoint_service_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcEndpointServicePayerResponsibilityOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyVpcEndpointServicePayerResponsibilityOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for ModifyVpcEndpointServicePayerResponsibilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcEndpointServicePayerResponsibilityOutput`](crate::output::ModifyVpcEndpointServicePayerResponsibilityOutput).
pub mod modify_vpc_endpoint_service_payer_responsibility_output {

    /// A builder for [`ModifyVpcEndpointServicePayerResponsibilityOutput`](crate::output::ModifyVpcEndpointServicePayerResponsibilityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointServicePayerResponsibilityOutput`](crate::output::ModifyVpcEndpointServicePayerResponsibilityOutput).
        pub fn build(self) -> crate::output::ModifyVpcEndpointServicePayerResponsibilityOutput {
            crate::output::ModifyVpcEndpointServicePayerResponsibilityOutput {
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcEndpointServicePayerResponsibilityOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServicePayerResponsibilityOutput`](crate::output::ModifyVpcEndpointServicePayerResponsibilityOutput).
    pub fn builder(
    ) -> crate::output::modify_vpc_endpoint_service_payer_responsibility_output::Builder {
        crate::output::modify_vpc_endpoint_service_payer_responsibility_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcEndpointServiceConfigurationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyVpcEndpointServiceConfigurationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyVpcEndpointServiceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput).
pub mod modify_vpc_endpoint_service_configuration_output {

    /// A builder for [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput).
        pub fn build(self) -> crate::output::ModifyVpcEndpointServiceConfigurationOutput {
            crate::output::ModifyVpcEndpointServiceConfigurationOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcEndpointServiceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput).
    pub fn builder() -> crate::output::modify_vpc_endpoint_service_configuration_output::Builder {
        crate::output::modify_vpc_endpoint_service_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcEndpointConnectionNotificationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyVpcEndpointConnectionNotificationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for ModifyVpcEndpointConnectionNotificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput).
pub mod modify_vpc_endpoint_connection_notification_output {

    /// A builder for [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput).
        pub fn build(self) -> crate::output::ModifyVpcEndpointConnectionNotificationOutput {
            crate::output::ModifyVpcEndpointConnectionNotificationOutput {
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcEndpointConnectionNotificationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput).
    pub fn builder() -> crate::output::modify_vpc_endpoint_connection_notification_output::Builder {
        crate::output::modify_vpc_endpoint_connection_notification_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcEndpointOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyVpcEndpointOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyVpcEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput).
pub mod modify_vpc_endpoint_output {

    /// A builder for [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput).
        pub fn build(self) -> crate::output::ModifyVpcEndpointOutput {
            crate::output::ModifyVpcEndpointOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput).
    pub fn builder() -> crate::output::modify_vpc_endpoint_output::Builder {
        crate::output::modify_vpc_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVpcAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyVpcAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput).
pub mod modify_vpc_attribute_output {

    /// A builder for [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput).
        pub fn build(self) -> crate::output::ModifyVpcAttributeOutput {
            crate::output::ModifyVpcAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVpcAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput).
    pub fn builder() -> crate::output::modify_vpc_attribute_output::Builder {
        crate::output::modify_vpc_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVolumeAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyVolumeAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput).
pub mod modify_volume_attribute_output {

    /// A builder for [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput).
        pub fn build(self) -> crate::output::ModifyVolumeAttributeOutput {
            crate::output::ModifyVolumeAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVolumeAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput).
    pub fn builder() -> crate::output::modify_volume_attribute_output::Builder {
        crate::output::modify_volume_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVolumeOutput {
    /// <p>Information about the volume modification.</p>
    #[doc(hidden)]
    pub volume_modification: std::option::Option<crate::model::VolumeModification>,
    _request_id: Option<String>,
}
impl ModifyVolumeOutput {
    /// <p>Information about the volume modification.</p>
    pub fn volume_modification(&self) -> std::option::Option<&crate::model::VolumeModification> {
        self.volume_modification.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput).
pub mod modify_volume_output {

    /// A builder for [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) volume_modification: std::option::Option<crate::model::VolumeModification>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the volume modification.</p>
        pub fn volume_modification(mut self, input: crate::model::VolumeModification) -> Self {
            self.volume_modification = Some(input);
            self
        }
        /// <p>Information about the volume modification.</p>
        pub fn set_volume_modification(
            mut self,
            input: std::option::Option<crate::model::VolumeModification>,
        ) -> Self {
            self.volume_modification = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput).
        pub fn build(self) -> crate::output::ModifyVolumeOutput {
            crate::output::ModifyVolumeOutput {
                volume_modification: self.volume_modification,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVolumeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput).
    pub fn builder() -> crate::output::modify_volume_output::Builder {
        crate::output::modify_volume_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub verified_access_trust_provider:
        std::option::Option<crate::model::VerifiedAccessTrustProvider>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    pub fn verified_access_trust_provider(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessTrustProvider> {
        self.verified_access_trust_provider.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessTrustProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessTrustProviderOutput`](crate::output::ModifyVerifiedAccessTrustProviderOutput).
pub mod modify_verified_access_trust_provider_output {

    /// A builder for [`ModifyVerifiedAccessTrustProviderOutput`](crate::output::ModifyVerifiedAccessTrustProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_trust_provider:
            std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn verified_access_trust_provider(
            mut self,
            input: crate::model::VerifiedAccessTrustProvider,
        ) -> Self {
            self.verified_access_trust_provider = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn set_verified_access_trust_provider(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        ) -> Self {
            self.verified_access_trust_provider = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessTrustProviderOutput`](crate::output::ModifyVerifiedAccessTrustProviderOutput).
        pub fn build(self) -> crate::output::ModifyVerifiedAccessTrustProviderOutput {
            crate::output::ModifyVerifiedAccessTrustProviderOutput {
                verified_access_trust_provider: self.verified_access_trust_provider,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessTrustProviderOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessTrustProviderOutput`](crate::output::ModifyVerifiedAccessTrustProviderOutput).
    pub fn builder() -> crate::output::modify_verified_access_trust_provider_output::Builder {
        crate::output::modify_verified_access_trust_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessInstanceLoggingConfigurationOutput {
    /// <p>The logging configuration for Amazon Web Services Verified Access instance.</p>
    #[doc(hidden)]
    pub logging_configuration:
        std::option::Option<crate::model::VerifiedAccessInstanceLoggingConfiguration>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessInstanceLoggingConfigurationOutput {
    /// <p>The logging configuration for Amazon Web Services Verified Access instance.</p>
    pub fn logging_configuration(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessInstanceLoggingConfiguration> {
        self.logging_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessInstanceLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessInstanceLoggingConfigurationOutput`](crate::output::ModifyVerifiedAccessInstanceLoggingConfigurationOutput).
pub mod modify_verified_access_instance_logging_configuration_output {

    /// A builder for [`ModifyVerifiedAccessInstanceLoggingConfigurationOutput`](crate::output::ModifyVerifiedAccessInstanceLoggingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configuration:
            std::option::Option<crate::model::VerifiedAccessInstanceLoggingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The logging configuration for Amazon Web Services Verified Access instance.</p>
        pub fn logging_configuration(
            mut self,
            input: crate::model::VerifiedAccessInstanceLoggingConfiguration,
        ) -> Self {
            self.logging_configuration = Some(input);
            self
        }
        /// <p>The logging configuration for Amazon Web Services Verified Access instance.</p>
        pub fn set_logging_configuration(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessInstanceLoggingConfiguration>,
        ) -> Self {
            self.logging_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessInstanceLoggingConfigurationOutput`](crate::output::ModifyVerifiedAccessInstanceLoggingConfigurationOutput).
        pub fn build(
            self,
        ) -> crate::output::ModifyVerifiedAccessInstanceLoggingConfigurationOutput {
            crate::output::ModifyVerifiedAccessInstanceLoggingConfigurationOutput {
                logging_configuration: self.logging_configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessInstanceLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessInstanceLoggingConfigurationOutput`](crate::output::ModifyVerifiedAccessInstanceLoggingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::modify_verified_access_instance_logging_configuration_output::Builder {
        crate::output::modify_verified_access_instance_logging_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessInstanceOutput {
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    #[doc(hidden)]
    pub verified_access_instance: std::option::Option<crate::model::VerifiedAccessInstance>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessInstanceOutput {
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessInstance> {
        self.verified_access_instance.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessInstanceOutput`](crate::output::ModifyVerifiedAccessInstanceOutput).
pub mod modify_verified_access_instance_output {

    /// A builder for [`ModifyVerifiedAccessInstanceOutput`](crate::output::ModifyVerifiedAccessInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_instance:
            std::option::Option<crate::model::VerifiedAccessInstance>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn verified_access_instance(
            mut self,
            input: crate::model::VerifiedAccessInstance,
        ) -> Self {
            self.verified_access_instance = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn set_verified_access_instance(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessInstance>,
        ) -> Self {
            self.verified_access_instance = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessInstanceOutput`](crate::output::ModifyVerifiedAccessInstanceOutput).
        pub fn build(self) -> crate::output::ModifyVerifiedAccessInstanceOutput {
            crate::output::ModifyVerifiedAccessInstanceOutput {
                verified_access_instance: self.verified_access_instance,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessInstanceOutput`](crate::output::ModifyVerifiedAccessInstanceOutput).
    pub fn builder() -> crate::output::modify_verified_access_instance_output::Builder {
        crate::output::modify_verified_access_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessGroupPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    #[doc(hidden)]
    pub policy_enabled: std::option::Option<bool>,
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    #[doc(hidden)]
    pub policy_document: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessGroupPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    pub fn policy_enabled(&self) -> std::option::Option<bool> {
        self.policy_enabled
    }
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    pub fn policy_document(&self) -> std::option::Option<&str> {
        self.policy_document.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessGroupPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessGroupPolicyOutput`](crate::output::ModifyVerifiedAccessGroupPolicyOutput).
pub mod modify_verified_access_group_policy_output {

    /// A builder for [`ModifyVerifiedAccessGroupPolicyOutput`](crate::output::ModifyVerifiedAccessGroupPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_enabled: std::option::Option<bool>,
        pub(crate) policy_document: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The status of the Verified Access policy.</p>
        pub fn policy_enabled(mut self, input: bool) -> Self {
            self.policy_enabled = Some(input);
            self
        }
        /// <p>The status of the Verified Access policy.</p>
        pub fn set_policy_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.policy_enabled = input;
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn policy_document(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_document = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn set_policy_document(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_document = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessGroupPolicyOutput`](crate::output::ModifyVerifiedAccessGroupPolicyOutput).
        pub fn build(self) -> crate::output::ModifyVerifiedAccessGroupPolicyOutput {
            crate::output::ModifyVerifiedAccessGroupPolicyOutput {
                policy_enabled: self.policy_enabled,
                policy_document: self.policy_document,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessGroupPolicyOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessGroupPolicyOutput`](crate::output::ModifyVerifiedAccessGroupPolicyOutput).
    pub fn builder() -> crate::output::modify_verified_access_group_policy_output::Builder {
        crate::output::modify_verified_access_group_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessGroupOutput {
    /// <p>Details of Amazon Web Services Verified Access group.</p>
    #[doc(hidden)]
    pub verified_access_group: std::option::Option<crate::model::VerifiedAccessGroup>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessGroupOutput {
    /// <p>Details of Amazon Web Services Verified Access group.</p>
    pub fn verified_access_group(&self) -> std::option::Option<&crate::model::VerifiedAccessGroup> {
        self.verified_access_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessGroupOutput`](crate::output::ModifyVerifiedAccessGroupOutput).
pub mod modify_verified_access_group_output {

    /// A builder for [`ModifyVerifiedAccessGroupOutput`](crate::output::ModifyVerifiedAccessGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_group: std::option::Option<crate::model::VerifiedAccessGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Details of Amazon Web Services Verified Access group.</p>
        pub fn verified_access_group(mut self, input: crate::model::VerifiedAccessGroup) -> Self {
            self.verified_access_group = Some(input);
            self
        }
        /// <p>Details of Amazon Web Services Verified Access group.</p>
        pub fn set_verified_access_group(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessGroup>,
        ) -> Self {
            self.verified_access_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessGroupOutput`](crate::output::ModifyVerifiedAccessGroupOutput).
        pub fn build(self) -> crate::output::ModifyVerifiedAccessGroupOutput {
            crate::output::ModifyVerifiedAccessGroupOutput {
                verified_access_group: self.verified_access_group,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessGroupOutput`](crate::output::ModifyVerifiedAccessGroupOutput).
    pub fn builder() -> crate::output::modify_verified_access_group_output::Builder {
        crate::output::modify_verified_access_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessEndpointPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    #[doc(hidden)]
    pub policy_enabled: std::option::Option<bool>,
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    #[doc(hidden)]
    pub policy_document: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessEndpointPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    pub fn policy_enabled(&self) -> std::option::Option<bool> {
        self.policy_enabled
    }
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    pub fn policy_document(&self) -> std::option::Option<&str> {
        self.policy_document.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessEndpointPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessEndpointPolicyOutput`](crate::output::ModifyVerifiedAccessEndpointPolicyOutput).
pub mod modify_verified_access_endpoint_policy_output {

    /// A builder for [`ModifyVerifiedAccessEndpointPolicyOutput`](crate::output::ModifyVerifiedAccessEndpointPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_enabled: std::option::Option<bool>,
        pub(crate) policy_document: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The status of the Verified Access policy.</p>
        pub fn policy_enabled(mut self, input: bool) -> Self {
            self.policy_enabled = Some(input);
            self
        }
        /// <p>The status of the Verified Access policy.</p>
        pub fn set_policy_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.policy_enabled = input;
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn policy_document(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_document = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn set_policy_document(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_document = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessEndpointPolicyOutput`](crate::output::ModifyVerifiedAccessEndpointPolicyOutput).
        pub fn build(self) -> crate::output::ModifyVerifiedAccessEndpointPolicyOutput {
            crate::output::ModifyVerifiedAccessEndpointPolicyOutput {
                policy_enabled: self.policy_enabled,
                policy_document: self.policy_document,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessEndpointPolicyOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessEndpointPolicyOutput`](crate::output::ModifyVerifiedAccessEndpointPolicyOutput).
    pub fn builder() -> crate::output::modify_verified_access_endpoint_policy_output::Builder {
        crate::output::modify_verified_access_endpoint_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyVerifiedAccessEndpointOutput {
    /// <p>The Amazon Web Services Verified Access endpoint details.</p>
    #[doc(hidden)]
    pub verified_access_endpoint: std::option::Option<crate::model::VerifiedAccessEndpoint>,
    _request_id: Option<String>,
}
impl ModifyVerifiedAccessEndpointOutput {
    /// <p>The Amazon Web Services Verified Access endpoint details.</p>
    pub fn verified_access_endpoint(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessEndpoint> {
        self.verified_access_endpoint.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyVerifiedAccessEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyVerifiedAccessEndpointOutput`](crate::output::ModifyVerifiedAccessEndpointOutput).
pub mod modify_verified_access_endpoint_output {

    /// A builder for [`ModifyVerifiedAccessEndpointOutput`](crate::output::ModifyVerifiedAccessEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_endpoint:
            std::option::Option<crate::model::VerifiedAccessEndpoint>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Web Services Verified Access endpoint details.</p>
        pub fn verified_access_endpoint(
            mut self,
            input: crate::model::VerifiedAccessEndpoint,
        ) -> Self {
            self.verified_access_endpoint = Some(input);
            self
        }
        /// <p>The Amazon Web Services Verified Access endpoint details.</p>
        pub fn set_verified_access_endpoint(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessEndpoint>,
        ) -> Self {
            self.verified_access_endpoint = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVerifiedAccessEndpointOutput`](crate::output::ModifyVerifiedAccessEndpointOutput).
        pub fn build(self) -> crate::output::ModifyVerifiedAccessEndpointOutput {
            crate::output::ModifyVerifiedAccessEndpointOutput {
                verified_access_endpoint: self.verified_access_endpoint,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyVerifiedAccessEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVerifiedAccessEndpointOutput`](crate::output::ModifyVerifiedAccessEndpointOutput).
    pub fn builder() -> crate::output::modify_verified_access_endpoint_output::Builder {
        crate::output::modify_verified_access_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the modified attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    _request_id: Option<String>,
}
impl ModifyTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the modified attachment.</p>
    pub fn transit_gateway_vpc_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayVpcAttachment> {
        self.transit_gateway_vpc_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyTransitGatewayVpcAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput).
pub mod modify_transit_gateway_vpc_attachment_output {

    /// A builder for [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the modified attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            input: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(input);
            self
        }
        /// <p>Information about the modified attachment.</p>
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput).
        pub fn build(self) -> crate::output::ModifyTransitGatewayVpcAttachmentOutput {
            crate::output::ModifyTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput).
    pub fn builder() -> crate::output::modify_transit_gateway_vpc_attachment_output::Builder {
        crate::output::modify_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the prefix list reference.</p>
    #[doc(hidden)]
    pub transit_gateway_prefix_list_reference:
        std::option::Option<crate::model::TransitGatewayPrefixListReference>,
    _request_id: Option<String>,
}
impl ModifyTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the prefix list reference.</p>
    pub fn transit_gateway_prefix_list_reference(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPrefixListReference> {
        self.transit_gateway_prefix_list_reference.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyTransitGatewayPrefixListReferenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput).
pub mod modify_transit_gateway_prefix_list_reference_output {

    /// A builder for [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_reference:
            std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the prefix list reference.</p>
        pub fn transit_gateway_prefix_list_reference(
            mut self,
            input: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = Some(input);
            self
        }
        /// <p>Information about the prefix list reference.</p>
        pub fn set_transit_gateway_prefix_list_reference(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput).
        pub fn build(self) -> crate::output::ModifyTransitGatewayPrefixListReferenceOutput {
            crate::output::ModifyTransitGatewayPrefixListReferenceOutput {
                transit_gateway_prefix_list_reference: self.transit_gateway_prefix_list_reference,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyTransitGatewayPrefixListReferenceOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput).
    pub fn builder() -> crate::output::modify_transit_gateway_prefix_list_reference_output::Builder
    {
        crate::output::modify_transit_gateway_prefix_list_reference_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyTransitGatewayOutput {
    /// <p>Information about the transit gateway.</p>
    #[doc(hidden)]
    pub transit_gateway: std::option::Option<crate::model::TransitGateway>,
    _request_id: Option<String>,
}
impl ModifyTransitGatewayOutput {
    /// <p>Information about the transit gateway.</p>
    pub fn transit_gateway(&self) -> std::option::Option<&crate::model::TransitGateway> {
        self.transit_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyTransitGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput).
pub mod modify_transit_gateway_output {

    /// A builder for [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway: std::option::Option<crate::model::TransitGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the transit gateway.</p>
        pub fn transit_gateway(mut self, input: crate::model::TransitGateway) -> Self {
            self.transit_gateway = Some(input);
            self
        }
        /// <p>Information about the transit gateway.</p>
        pub fn set_transit_gateway(
            mut self,
            input: std::option::Option<crate::model::TransitGateway>,
        ) -> Self {
            self.transit_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput).
        pub fn build(self) -> crate::output::ModifyTransitGatewayOutput {
            crate::output::ModifyTransitGatewayOutput {
                transit_gateway: self.transit_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyTransitGatewayOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput).
    pub fn builder() -> crate::output::modify_transit_gateway_output::Builder {
        crate::output::modify_transit_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyTrafficMirrorSessionOutput {
    /// <p>Information about the Traffic Mirror session.</p>
    #[doc(hidden)]
    pub traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
    _request_id: Option<String>,
}
impl ModifyTrafficMirrorSessionOutput {
    /// <p>Information about the Traffic Mirror session.</p>
    pub fn traffic_mirror_session(
        &self,
    ) -> std::option::Option<&crate::model::TrafficMirrorSession> {
        self.traffic_mirror_session.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyTrafficMirrorSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput).
pub mod modify_traffic_mirror_session_output {

    /// A builder for [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror session.</p>
        pub fn traffic_mirror_session(mut self, input: crate::model::TrafficMirrorSession) -> Self {
            self.traffic_mirror_session = Some(input);
            self
        }
        /// <p>Information about the Traffic Mirror session.</p>
        pub fn set_traffic_mirror_session(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorSession>,
        ) -> Self {
            self.traffic_mirror_session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput).
        pub fn build(self) -> crate::output::ModifyTrafficMirrorSessionOutput {
            crate::output::ModifyTrafficMirrorSessionOutput {
                traffic_mirror_session: self.traffic_mirror_session,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyTrafficMirrorSessionOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput).
    pub fn builder() -> crate::output::modify_traffic_mirror_session_output::Builder {
        crate::output::modify_traffic_mirror_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyTrafficMirrorFilterRuleOutput {
    /// <p>Modifies a Traffic Mirror rule.</p>
    #[doc(hidden)]
    pub traffic_mirror_filter_rule: std::option::Option<crate::model::TrafficMirrorFilterRule>,
    _request_id: Option<String>,
}
impl ModifyTrafficMirrorFilterRuleOutput {
    /// <p>Modifies a Traffic Mirror rule.</p>
    pub fn traffic_mirror_filter_rule(
        &self,
    ) -> std::option::Option<&crate::model::TrafficMirrorFilterRule> {
        self.traffic_mirror_filter_rule.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyTrafficMirrorFilterRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput).
pub mod modify_traffic_mirror_filter_rule_output {

    /// A builder for [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_rule:
            std::option::Option<crate::model::TrafficMirrorFilterRule>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Modifies a Traffic Mirror rule.</p>
        pub fn traffic_mirror_filter_rule(
            mut self,
            input: crate::model::TrafficMirrorFilterRule,
        ) -> Self {
            self.traffic_mirror_filter_rule = Some(input);
            self
        }
        /// <p>Modifies a Traffic Mirror rule.</p>
        pub fn set_traffic_mirror_filter_rule(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorFilterRule>,
        ) -> Self {
            self.traffic_mirror_filter_rule = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput).
        pub fn build(self) -> crate::output::ModifyTrafficMirrorFilterRuleOutput {
            crate::output::ModifyTrafficMirrorFilterRuleOutput {
                traffic_mirror_filter_rule: self.traffic_mirror_filter_rule,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyTrafficMirrorFilterRuleOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput).
    pub fn builder() -> crate::output::modify_traffic_mirror_filter_rule_output::Builder {
        crate::output::modify_traffic_mirror_filter_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyTrafficMirrorFilterNetworkServicesOutput {
    /// <p>The Traffic Mirror filter that the network service is associated with.</p>
    #[doc(hidden)]
    pub traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
    _request_id: Option<String>,
}
impl ModifyTrafficMirrorFilterNetworkServicesOutput {
    /// <p>The Traffic Mirror filter that the network service is associated with.</p>
    pub fn traffic_mirror_filter(&self) -> std::option::Option<&crate::model::TrafficMirrorFilter> {
        self.traffic_mirror_filter.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyTrafficMirrorFilterNetworkServicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput).
pub mod modify_traffic_mirror_filter_network_services_output {

    /// A builder for [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Traffic Mirror filter that the network service is associated with.</p>
        pub fn traffic_mirror_filter(mut self, input: crate::model::TrafficMirrorFilter) -> Self {
            self.traffic_mirror_filter = Some(input);
            self
        }
        /// <p>The Traffic Mirror filter that the network service is associated with.</p>
        pub fn set_traffic_mirror_filter(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorFilter>,
        ) -> Self {
            self.traffic_mirror_filter = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput).
        pub fn build(self) -> crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput {
            crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput {
                traffic_mirror_filter: self.traffic_mirror_filter,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyTrafficMirrorFilterNetworkServicesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput).
    pub fn builder() -> crate::output::modify_traffic_mirror_filter_network_services_output::Builder
    {
        crate::output::modify_traffic_mirror_filter_network_services_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifySubnetAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifySubnetAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput).
pub mod modify_subnet_attribute_output {

    /// A builder for [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput).
        pub fn build(self) -> crate::output::ModifySubnetAttributeOutput {
            crate::output::ModifySubnetAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifySubnetAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput).
    pub fn builder() -> crate::output::modify_subnet_attribute_output::Builder {
        crate::output::modify_subnet_attribute_output::Builder::default()
    }
}

/// <p>Contains the output of ModifySpotFleetRequest.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifySpotFleetRequestOutput {
    /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifySpotFleetRequestOutput {
    /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifySpotFleetRequestOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput).
pub mod modify_spot_fleet_request_output {

    /// A builder for [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput).
        pub fn build(self) -> crate::output::ModifySpotFleetRequestOutput {
            crate::output::ModifySpotFleetRequestOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifySpotFleetRequestOutput {
    /// Creates a new builder-style object to manufacture [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput).
    pub fn builder() -> crate::output::modify_spot_fleet_request_output::Builder {
        crate::output::modify_spot_fleet_request_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifySnapshotTierOutput {
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the archive process was started.</p>
    #[doc(hidden)]
    pub tiering_start_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl ModifySnapshotTierOutput {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The date and time when the archive process was started.</p>
    pub fn tiering_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.tiering_start_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifySnapshotTierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifySnapshotTierOutput`](crate::output::ModifySnapshotTierOutput).
pub mod modify_snapshot_tier_output {

    /// A builder for [`ModifySnapshotTierOutput`](crate::output::ModifySnapshotTierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) tiering_start_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the snapshot.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The ID of the snapshot.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        /// <p>The date and time when the archive process was started.</p>
        pub fn tiering_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.tiering_start_time = Some(input);
            self
        }
        /// <p>The date and time when the archive process was started.</p>
        pub fn set_tiering_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.tiering_start_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifySnapshotTierOutput`](crate::output::ModifySnapshotTierOutput).
        pub fn build(self) -> crate::output::ModifySnapshotTierOutput {
            crate::output::ModifySnapshotTierOutput {
                snapshot_id: self.snapshot_id,
                tiering_start_time: self.tiering_start_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifySnapshotTierOutput {
    /// Creates a new builder-style object to manufacture [`ModifySnapshotTierOutput`](crate::output::ModifySnapshotTierOutput).
    pub fn builder() -> crate::output::modify_snapshot_tier_output::Builder {
        crate::output::modify_snapshot_tier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifySnapshotAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifySnapshotAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput).
pub mod modify_snapshot_attribute_output {

    /// A builder for [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput).
        pub fn build(self) -> crate::output::ModifySnapshotAttributeOutput {
            crate::output::ModifySnapshotAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifySnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput).
    pub fn builder() -> crate::output::modify_snapshot_attribute_output::Builder {
        crate::output::modify_snapshot_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifySecurityGroupRulesOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifySecurityGroupRulesOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifySecurityGroupRulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifySecurityGroupRulesOutput`](crate::output::ModifySecurityGroupRulesOutput).
pub mod modify_security_group_rules_output {

    /// A builder for [`ModifySecurityGroupRulesOutput`](crate::output::ModifySecurityGroupRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifySecurityGroupRulesOutput`](crate::output::ModifySecurityGroupRulesOutput).
        pub fn build(self) -> crate::output::ModifySecurityGroupRulesOutput {
            crate::output::ModifySecurityGroupRulesOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifySecurityGroupRulesOutput {
    /// Creates a new builder-style object to manufacture [`ModifySecurityGroupRulesOutput`](crate::output::ModifySecurityGroupRulesOutput).
    pub fn builder() -> crate::output::modify_security_group_rules_output::Builder {
        crate::output::modify_security_group_rules_output::Builder::default()
    }
}

/// <p>Contains the output of ModifyReservedInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyReservedInstancesOutput {
    /// <p>The ID for the modification.</p>
    #[doc(hidden)]
    pub reserved_instances_modification_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ModifyReservedInstancesOutput {
    /// <p>The ID for the modification.</p>
    pub fn reserved_instances_modification_id(&self) -> std::option::Option<&str> {
        self.reserved_instances_modification_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyReservedInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput).
pub mod modify_reserved_instances_output {

    /// A builder for [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_modification_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID for the modification.</p>
        pub fn reserved_instances_modification_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.reserved_instances_modification_id = Some(input.into());
            self
        }
        /// <p>The ID for the modification.</p>
        pub fn set_reserved_instances_modification_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_instances_modification_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput).
        pub fn build(self) -> crate::output::ModifyReservedInstancesOutput {
            crate::output::ModifyReservedInstancesOutput {
                reserved_instances_modification_id: self.reserved_instances_modification_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyReservedInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput).
    pub fn builder() -> crate::output::modify_reserved_instances_output::Builder {
        crate::output::modify_reserved_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyPrivateDnsNameOptionsOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyPrivateDnsNameOptionsOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyPrivateDnsNameOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyPrivateDnsNameOptionsOutput`](crate::output::ModifyPrivateDnsNameOptionsOutput).
pub mod modify_private_dns_name_options_output {

    /// A builder for [`ModifyPrivateDnsNameOptionsOutput`](crate::output::ModifyPrivateDnsNameOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyPrivateDnsNameOptionsOutput`](crate::output::ModifyPrivateDnsNameOptionsOutput).
        pub fn build(self) -> crate::output::ModifyPrivateDnsNameOptionsOutput {
            crate::output::ModifyPrivateDnsNameOptionsOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyPrivateDnsNameOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyPrivateDnsNameOptionsOutput`](crate::output::ModifyPrivateDnsNameOptionsOutput).
    pub fn builder() -> crate::output::modify_private_dns_name_options_output::Builder {
        crate::output::modify_private_dns_name_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyNetworkInterfaceAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyNetworkInterfaceAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput).
pub mod modify_network_interface_attribute_output {

    /// A builder for [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput).
        pub fn build(self) -> crate::output::ModifyNetworkInterfaceAttributeOutput {
            crate::output::ModifyNetworkInterfaceAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyNetworkInterfaceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput).
    pub fn builder() -> crate::output::modify_network_interface_attribute_output::Builder {
        crate::output::modify_network_interface_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    #[doc(hidden)]
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    _request_id: Option<String>,
}
impl ModifyManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    pub fn prefix_list(&self) -> std::option::Option<&crate::model::ManagedPrefixList> {
        self.prefix_list.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyManagedPrefixListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput).
pub mod modify_managed_prefix_list_output {

    /// A builder for [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, input: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(input);
            self
        }
        /// <p>Information about the prefix list.</p>
        pub fn set_prefix_list(
            mut self,
            input: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput).
        pub fn build(self) -> crate::output::ModifyManagedPrefixListOutput {
            crate::output::ModifyManagedPrefixListOutput {
                prefix_list: self.prefix_list,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyManagedPrefixListOutput {
    /// Creates a new builder-style object to manufacture [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput).
    pub fn builder() -> crate::output::modify_managed_prefix_list_output::Builder {
        crate::output::modify_managed_prefix_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyLocalGatewayRouteOutput {
    /// <p>Information about the local gateway route table.</p>
    #[doc(hidden)]
    pub route: std::option::Option<crate::model::LocalGatewayRoute>,
    _request_id: Option<String>,
}
impl ModifyLocalGatewayRouteOutput {
    /// <p>Information about the local gateway route table.</p>
    pub fn route(&self) -> std::option::Option<&crate::model::LocalGatewayRoute> {
        self.route.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyLocalGatewayRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyLocalGatewayRouteOutput`](crate::output::ModifyLocalGatewayRouteOutput).
pub mod modify_local_gateway_route_output {

    /// A builder for [`ModifyLocalGatewayRouteOutput`](crate::output::ModifyLocalGatewayRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::LocalGatewayRoute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the local gateway route table.</p>
        pub fn route(mut self, input: crate::model::LocalGatewayRoute) -> Self {
            self.route = Some(input);
            self
        }
        /// <p>Information about the local gateway route table.</p>
        pub fn set_route(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRoute>,
        ) -> Self {
            self.route = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyLocalGatewayRouteOutput`](crate::output::ModifyLocalGatewayRouteOutput).
        pub fn build(self) -> crate::output::ModifyLocalGatewayRouteOutput {
            crate::output::ModifyLocalGatewayRouteOutput {
                route: self.route,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyLocalGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`ModifyLocalGatewayRouteOutput`](crate::output::ModifyLocalGatewayRouteOutput).
    pub fn builder() -> crate::output::modify_local_gateway_route_output::Builder {
        crate::output::modify_local_gateway_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    #[doc(hidden)]
    pub launch_template: std::option::Option<crate::model::LaunchTemplate>,
    _request_id: Option<String>,
}
impl ModifyLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    pub fn launch_template(&self) -> std::option::Option<&crate::model::LaunchTemplate> {
        self.launch_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyLaunchTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput).
pub mod modify_launch_template_output {

    /// A builder for [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the launch template.</p>
        pub fn launch_template(mut self, input: crate::model::LaunchTemplate) -> Self {
            self.launch_template = Some(input);
            self
        }
        /// <p>Information about the launch template.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::LaunchTemplate>,
        ) -> Self {
            self.launch_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput).
        pub fn build(self) -> crate::output::ModifyLaunchTemplateOutput {
            crate::output::ModifyLaunchTemplateOutput {
                launch_template: self.launch_template,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyLaunchTemplateOutput {
    /// Creates a new builder-style object to manufacture [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput).
    pub fn builder() -> crate::output::modify_launch_template_output::Builder {
        crate::output::modify_launch_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIpamScopeOutput {
    /// <p>The results of the modification.</p>
    #[doc(hidden)]
    pub ipam_scope: std::option::Option<crate::model::IpamScope>,
    _request_id: Option<String>,
}
impl ModifyIpamScopeOutput {
    /// <p>The results of the modification.</p>
    pub fn ipam_scope(&self) -> std::option::Option<&crate::model::IpamScope> {
        self.ipam_scope.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyIpamScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyIpamScopeOutput`](crate::output::ModifyIpamScopeOutput).
pub mod modify_ipam_scope_output {

    /// A builder for [`ModifyIpamScopeOutput`](crate::output::ModifyIpamScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_scope: std::option::Option<crate::model::IpamScope>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The results of the modification.</p>
        pub fn ipam_scope(mut self, input: crate::model::IpamScope) -> Self {
            self.ipam_scope = Some(input);
            self
        }
        /// <p>The results of the modification.</p>
        pub fn set_ipam_scope(
            mut self,
            input: std::option::Option<crate::model::IpamScope>,
        ) -> Self {
            self.ipam_scope = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyIpamScopeOutput`](crate::output::ModifyIpamScopeOutput).
        pub fn build(self) -> crate::output::ModifyIpamScopeOutput {
            crate::output::ModifyIpamScopeOutput {
                ipam_scope: self.ipam_scope,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyIpamScopeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIpamScopeOutput`](crate::output::ModifyIpamScopeOutput).
    pub fn builder() -> crate::output::modify_ipam_scope_output::Builder {
        crate::output::modify_ipam_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIpamResourceCidrOutput {
    /// <p>The CIDR of the resource.</p>
    #[doc(hidden)]
    pub ipam_resource_cidr: std::option::Option<crate::model::IpamResourceCidr>,
    _request_id: Option<String>,
}
impl ModifyIpamResourceCidrOutput {
    /// <p>The CIDR of the resource.</p>
    pub fn ipam_resource_cidr(&self) -> std::option::Option<&crate::model::IpamResourceCidr> {
        self.ipam_resource_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyIpamResourceCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyIpamResourceCidrOutput`](crate::output::ModifyIpamResourceCidrOutput).
pub mod modify_ipam_resource_cidr_output {

    /// A builder for [`ModifyIpamResourceCidrOutput`](crate::output::ModifyIpamResourceCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_resource_cidr: std::option::Option<crate::model::IpamResourceCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The CIDR of the resource.</p>
        pub fn ipam_resource_cidr(mut self, input: crate::model::IpamResourceCidr) -> Self {
            self.ipam_resource_cidr = Some(input);
            self
        }
        /// <p>The CIDR of the resource.</p>
        pub fn set_ipam_resource_cidr(
            mut self,
            input: std::option::Option<crate::model::IpamResourceCidr>,
        ) -> Self {
            self.ipam_resource_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyIpamResourceCidrOutput`](crate::output::ModifyIpamResourceCidrOutput).
        pub fn build(self) -> crate::output::ModifyIpamResourceCidrOutput {
            crate::output::ModifyIpamResourceCidrOutput {
                ipam_resource_cidr: self.ipam_resource_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyIpamResourceCidrOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIpamResourceCidrOutput`](crate::output::ModifyIpamResourceCidrOutput).
    pub fn builder() -> crate::output::modify_ipam_resource_cidr_output::Builder {
        crate::output::modify_ipam_resource_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIpamPoolOutput {
    /// <p>The results of the modification.</p>
    #[doc(hidden)]
    pub ipam_pool: std::option::Option<crate::model::IpamPool>,
    _request_id: Option<String>,
}
impl ModifyIpamPoolOutput {
    /// <p>The results of the modification.</p>
    pub fn ipam_pool(&self) -> std::option::Option<&crate::model::IpamPool> {
        self.ipam_pool.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyIpamPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyIpamPoolOutput`](crate::output::ModifyIpamPoolOutput).
pub mod modify_ipam_pool_output {

    /// A builder for [`ModifyIpamPoolOutput`](crate::output::ModifyIpamPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool: std::option::Option<crate::model::IpamPool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The results of the modification.</p>
        pub fn ipam_pool(mut self, input: crate::model::IpamPool) -> Self {
            self.ipam_pool = Some(input);
            self
        }
        /// <p>The results of the modification.</p>
        pub fn set_ipam_pool(mut self, input: std::option::Option<crate::model::IpamPool>) -> Self {
            self.ipam_pool = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyIpamPoolOutput`](crate::output::ModifyIpamPoolOutput).
        pub fn build(self) -> crate::output::ModifyIpamPoolOutput {
            crate::output::ModifyIpamPoolOutput {
                ipam_pool: self.ipam_pool,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyIpamPoolOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIpamPoolOutput`](crate::output::ModifyIpamPoolOutput).
    pub fn builder() -> crate::output::modify_ipam_pool_output::Builder {
        crate::output::modify_ipam_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIpamOutput {
    /// <p>The results of the modification.</p>
    #[doc(hidden)]
    pub ipam: std::option::Option<crate::model::Ipam>,
    _request_id: Option<String>,
}
impl ModifyIpamOutput {
    /// <p>The results of the modification.</p>
    pub fn ipam(&self) -> std::option::Option<&crate::model::Ipam> {
        self.ipam.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyIpamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyIpamOutput`](crate::output::ModifyIpamOutput).
pub mod modify_ipam_output {

    /// A builder for [`ModifyIpamOutput`](crate::output::ModifyIpamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam: std::option::Option<crate::model::Ipam>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The results of the modification.</p>
        pub fn ipam(mut self, input: crate::model::Ipam) -> Self {
            self.ipam = Some(input);
            self
        }
        /// <p>The results of the modification.</p>
        pub fn set_ipam(mut self, input: std::option::Option<crate::model::Ipam>) -> Self {
            self.ipam = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyIpamOutput`](crate::output::ModifyIpamOutput).
        pub fn build(self) -> crate::output::ModifyIpamOutput {
            crate::output::ModifyIpamOutput {
                ipam: self.ipam,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyIpamOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIpamOutput`](crate::output::ModifyIpamOutput).
    pub fn builder() -> crate::output::modify_ipam_output::Builder {
        crate::output::modify_ipam_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstancePlacementOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyInstancePlacementOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyInstancePlacementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput).
pub mod modify_instance_placement_output {

    /// A builder for [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput).
        pub fn build(self) -> crate::output::ModifyInstancePlacementOutput {
            crate::output::ModifyInstancePlacementOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstancePlacementOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput).
    pub fn builder() -> crate::output::modify_instance_placement_output::Builder {
        crate::output::modify_instance_placement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceMetadataOptionsOutput {
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The metadata options for the instance.</p>
    #[doc(hidden)]
    pub instance_metadata_options:
        std::option::Option<crate::model::InstanceMetadataOptionsResponse>,
    _request_id: Option<String>,
}
impl ModifyInstanceMetadataOptionsOutput {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The metadata options for the instance.</p>
    pub fn instance_metadata_options(
        &self,
    ) -> std::option::Option<&crate::model::InstanceMetadataOptionsResponse> {
        self.instance_metadata_options.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyInstanceMetadataOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput).
pub mod modify_instance_metadata_options_output {

    /// A builder for [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) instance_metadata_options:
            std::option::Option<crate::model::InstanceMetadataOptionsResponse>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>The metadata options for the instance.</p>
        pub fn instance_metadata_options(
            mut self,
            input: crate::model::InstanceMetadataOptionsResponse,
        ) -> Self {
            self.instance_metadata_options = Some(input);
            self
        }
        /// <p>The metadata options for the instance.</p>
        pub fn set_instance_metadata_options(
            mut self,
            input: std::option::Option<crate::model::InstanceMetadataOptionsResponse>,
        ) -> Self {
            self.instance_metadata_options = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput).
        pub fn build(self) -> crate::output::ModifyInstanceMetadataOptionsOutput {
            crate::output::ModifyInstanceMetadataOptionsOutput {
                instance_id: self.instance_id,
                instance_metadata_options: self.instance_metadata_options,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceMetadataOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput).
    pub fn builder() -> crate::output::modify_instance_metadata_options_output::Builder {
        crate::output::modify_instance_metadata_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceMaintenanceOptionsOutput {
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>Provides information on the current automatic recovery behavior of your instance.</p>
    #[doc(hidden)]
    pub auto_recovery: std::option::Option<crate::model::InstanceAutoRecoveryState>,
    _request_id: Option<String>,
}
impl ModifyInstanceMaintenanceOptionsOutput {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Provides information on the current automatic recovery behavior of your instance.</p>
    pub fn auto_recovery(&self) -> std::option::Option<&crate::model::InstanceAutoRecoveryState> {
        self.auto_recovery.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyInstanceMaintenanceOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceMaintenanceOptionsOutput`](crate::output::ModifyInstanceMaintenanceOptionsOutput).
pub mod modify_instance_maintenance_options_output {

    /// A builder for [`ModifyInstanceMaintenanceOptionsOutput`](crate::output::ModifyInstanceMaintenanceOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) auto_recovery: std::option::Option<crate::model::InstanceAutoRecoveryState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>Provides information on the current automatic recovery behavior of your instance.</p>
        pub fn auto_recovery(mut self, input: crate::model::InstanceAutoRecoveryState) -> Self {
            self.auto_recovery = Some(input);
            self
        }
        /// <p>Provides information on the current automatic recovery behavior of your instance.</p>
        pub fn set_auto_recovery(
            mut self,
            input: std::option::Option<crate::model::InstanceAutoRecoveryState>,
        ) -> Self {
            self.auto_recovery = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceMaintenanceOptionsOutput`](crate::output::ModifyInstanceMaintenanceOptionsOutput).
        pub fn build(self) -> crate::output::ModifyInstanceMaintenanceOptionsOutput {
            crate::output::ModifyInstanceMaintenanceOptionsOutput {
                instance_id: self.instance_id,
                auto_recovery: self.auto_recovery,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceMaintenanceOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceMaintenanceOptionsOutput`](crate::output::ModifyInstanceMaintenanceOptionsOutput).
    pub fn builder() -> crate::output::modify_instance_maintenance_options_output::Builder {
        crate::output::modify_instance_maintenance_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    #[doc(hidden)]
    pub instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
    _request_id: Option<String>,
}
impl ModifyInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    pub fn instance_event_window(&self) -> std::option::Option<&crate::model::InstanceEventWindow> {
        self.instance_event_window.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyInstanceEventWindowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceEventWindowOutput`](crate::output::ModifyInstanceEventWindowOutput).
pub mod modify_instance_event_window_output {

    /// A builder for [`ModifyInstanceEventWindowOutput`](crate::output::ModifyInstanceEventWindowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the event window.</p>
        pub fn instance_event_window(mut self, input: crate::model::InstanceEventWindow) -> Self {
            self.instance_event_window = Some(input);
            self
        }
        /// <p>Information about the event window.</p>
        pub fn set_instance_event_window(
            mut self,
            input: std::option::Option<crate::model::InstanceEventWindow>,
        ) -> Self {
            self.instance_event_window = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceEventWindowOutput`](crate::output::ModifyInstanceEventWindowOutput).
        pub fn build(self) -> crate::output::ModifyInstanceEventWindowOutput {
            crate::output::ModifyInstanceEventWindowOutput {
                instance_event_window: self.instance_event_window,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceEventWindowOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceEventWindowOutput`](crate::output::ModifyInstanceEventWindowOutput).
    pub fn builder() -> crate::output::modify_instance_event_window_output::Builder {
        crate::output::modify_instance_event_window_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceEventStartTimeOutput {
    /// <p>Information about the event.</p>
    #[doc(hidden)]
    pub event: std::option::Option<crate::model::InstanceStatusEvent>,
    _request_id: Option<String>,
}
impl ModifyInstanceEventStartTimeOutput {
    /// <p>Information about the event.</p>
    pub fn event(&self) -> std::option::Option<&crate::model::InstanceStatusEvent> {
        self.event.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyInstanceEventStartTimeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput).
pub mod modify_instance_event_start_time_output {

    /// A builder for [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event: std::option::Option<crate::model::InstanceStatusEvent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the event.</p>
        pub fn event(mut self, input: crate::model::InstanceStatusEvent) -> Self {
            self.event = Some(input);
            self
        }
        /// <p>Information about the event.</p>
        pub fn set_event(
            mut self,
            input: std::option::Option<crate::model::InstanceStatusEvent>,
        ) -> Self {
            self.event = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput).
        pub fn build(self) -> crate::output::ModifyInstanceEventStartTimeOutput {
            crate::output::ModifyInstanceEventStartTimeOutput {
                event: self.event,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceEventStartTimeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput).
    pub fn builder() -> crate::output::modify_instance_event_start_time_output::Builder {
        crate::output::modify_instance_event_start_time_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceCreditSpecificationOutput {
    /// <p>Information about the instances whose credit option for CPU usage was successfully modified.</p>
    #[doc(hidden)]
    pub successful_instance_credit_specifications:
        std::option::Option<std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>>,
    /// <p>Information about the instances whose credit option for CPU usage was not modified.</p>
    #[doc(hidden)]
    pub unsuccessful_instance_credit_specifications: std::option::Option<
        std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
    >,
    _request_id: Option<String>,
}
impl ModifyInstanceCreditSpecificationOutput {
    /// <p>Information about the instances whose credit option for CPU usage was successfully modified.</p>
    pub fn successful_instance_credit_specifications(
        &self,
    ) -> std::option::Option<&[crate::model::SuccessfulInstanceCreditSpecificationItem]> {
        self.successful_instance_credit_specifications.as_deref()
    }
    /// <p>Information about the instances whose credit option for CPU usage was not modified.</p>
    pub fn unsuccessful_instance_credit_specifications(
        &self,
    ) -> std::option::Option<&[crate::model::UnsuccessfulInstanceCreditSpecificationItem]> {
        self.unsuccessful_instance_credit_specifications.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyInstanceCreditSpecificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput).
pub mod modify_instance_credit_specification_output {

    /// A builder for [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_instance_credit_specifications: std::option::Option<
            std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>,
        >,
        pub(crate) unsuccessful_instance_credit_specifications: std::option::Option<
            std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful_instance_credit_specifications`.
        ///
        /// To override the contents of this collection use [`set_successful_instance_credit_specifications`](Self::set_successful_instance_credit_specifications).
        ///
        /// <p>Information about the instances whose credit option for CPU usage was successfully modified.</p>
        pub fn successful_instance_credit_specifications(
            mut self,
            input: crate::model::SuccessfulInstanceCreditSpecificationItem,
        ) -> Self {
            let mut v = self
                .successful_instance_credit_specifications
                .unwrap_or_default();
            v.push(input);
            self.successful_instance_credit_specifications = Some(v);
            self
        }
        /// <p>Information about the instances whose credit option for CPU usage was successfully modified.</p>
        pub fn set_successful_instance_credit_specifications(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>,
            >,
        ) -> Self {
            self.successful_instance_credit_specifications = input;
            self
        }
        /// Appends an item to `unsuccessful_instance_credit_specifications`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful_instance_credit_specifications`](Self::set_unsuccessful_instance_credit_specifications).
        ///
        /// <p>Information about the instances whose credit option for CPU usage was not modified.</p>
        pub fn unsuccessful_instance_credit_specifications(
            mut self,
            input: crate::model::UnsuccessfulInstanceCreditSpecificationItem,
        ) -> Self {
            let mut v = self
                .unsuccessful_instance_credit_specifications
                .unwrap_or_default();
            v.push(input);
            self.unsuccessful_instance_credit_specifications = Some(v);
            self
        }
        /// <p>Information about the instances whose credit option for CPU usage was not modified.</p>
        pub fn set_unsuccessful_instance_credit_specifications(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
            >,
        ) -> Self {
            self.unsuccessful_instance_credit_specifications = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput).
        pub fn build(self) -> crate::output::ModifyInstanceCreditSpecificationOutput {
            crate::output::ModifyInstanceCreditSpecificationOutput {
                successful_instance_credit_specifications: self
                    .successful_instance_credit_specifications,
                unsuccessful_instance_credit_specifications: self
                    .unsuccessful_instance_credit_specifications,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceCreditSpecificationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput).
    pub fn builder() -> crate::output::modify_instance_credit_specification_output::Builder {
        crate::output::modify_instance_credit_specification_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceCapacityReservationAttributesOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyInstanceCapacityReservationAttributesOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyInstanceCapacityReservationAttributesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput).
pub mod modify_instance_capacity_reservation_attributes_output {

    /// A builder for [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput).
        pub fn build(self) -> crate::output::ModifyInstanceCapacityReservationAttributesOutput {
            crate::output::ModifyInstanceCapacityReservationAttributesOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceCapacityReservationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput).
    pub fn builder(
    ) -> crate::output::modify_instance_capacity_reservation_attributes_output::Builder {
        crate::output::modify_instance_capacity_reservation_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyInstanceAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyInstanceAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput).
pub mod modify_instance_attribute_output {

    /// A builder for [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput).
        pub fn build(self) -> crate::output::ModifyInstanceAttributeOutput {
            crate::output::ModifyInstanceAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput).
    pub fn builder() -> crate::output::modify_instance_attribute_output::Builder {
        crate::output::modify_instance_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyImageAttributeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyImageAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput).
pub mod modify_image_attribute_output {

    /// A builder for [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput).
        pub fn build(self) -> crate::output::ModifyImageAttributeOutput {
            crate::output::ModifyImageAttributeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput).
    pub fn builder() -> crate::output::modify_image_attribute_output::Builder {
        crate::output::modify_image_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIdFormatOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyIdFormatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput).
pub mod modify_id_format_output {

    /// A builder for [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput).
        pub fn build(self) -> crate::output::ModifyIdFormatOutput {
            crate::output::ModifyIdFormatOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput).
    pub fn builder() -> crate::output::modify_id_format_output::Builder {
        crate::output::modify_id_format_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIdentityIdFormatOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ModifyIdentityIdFormatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput).
pub mod modify_identity_id_format_output {

    /// A builder for [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput).
        pub fn build(self) -> crate::output::ModifyIdentityIdFormatOutput {
            crate::output::ModifyIdentityIdFormatOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyIdentityIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput).
    pub fn builder() -> crate::output::modify_identity_id_format_output::Builder {
        crate::output::modify_identity_id_format_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyHostsOutput {
    /// <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
    #[doc(hidden)]
    pub successful: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl ModifyHostsOutput {
    /// <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
    pub fn successful(&self) -> std::option::Option<&[std::string::String]> {
        self.successful.as_deref()
    }
    /// <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyHostsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyHostsOutput`](crate::output::ModifyHostsOutput).
pub mod modify_hosts_output {

    /// A builder for [`ModifyHostsOutput`](crate::output::ModifyHostsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful`.
        ///
        /// To override the contents of this collection use [`set_successful`](Self::set_successful).
        ///
        /// <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
        pub fn successful(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(input.into());
            self.successful = Some(v);
            self
        }
        /// <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
        pub fn set_successful(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.successful = input;
            self
        }
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyHostsOutput`](crate::output::ModifyHostsOutput).
        pub fn build(self) -> crate::output::ModifyHostsOutput {
            crate::output::ModifyHostsOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyHostsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyHostsOutput`](crate::output::ModifyHostsOutput).
    pub fn builder() -> crate::output::modify_hosts_output::Builder {
        crate::output::modify_hosts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyFpgaImageAttributeOutput {
    /// <p>Information about the attribute.</p>
    #[doc(hidden)]
    pub fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
    _request_id: Option<String>,
}
impl ModifyFpgaImageAttributeOutput {
    /// <p>Information about the attribute.</p>
    pub fn fpga_image_attribute(&self) -> std::option::Option<&crate::model::FpgaImageAttribute> {
        self.fpga_image_attribute.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyFpgaImageAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput).
pub mod modify_fpga_image_attribute_output {

    /// A builder for [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the attribute.</p>
        pub fn fpga_image_attribute(mut self, input: crate::model::FpgaImageAttribute) -> Self {
            self.fpga_image_attribute = Some(input);
            self
        }
        /// <p>Information about the attribute.</p>
        pub fn set_fpga_image_attribute(
            mut self,
            input: std::option::Option<crate::model::FpgaImageAttribute>,
        ) -> Self {
            self.fpga_image_attribute = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput).
        pub fn build(self) -> crate::output::ModifyFpgaImageAttributeOutput {
            crate::output::ModifyFpgaImageAttributeOutput {
                fpga_image_attribute: self.fpga_image_attribute,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyFpgaImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput).
    pub fn builder() -> crate::output::modify_fpga_image_attribute_output::Builder {
        crate::output::modify_fpga_image_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyFleetOutput {
    /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyFleetOutput {
    /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyFleetOutput`](crate::output::ModifyFleetOutput).
pub mod modify_fleet_output {

    /// A builder for [`ModifyFleetOutput`](crate::output::ModifyFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>If the request succeeds, the response returns <code>true</code>. If the request fails, no response is returned, and instead an error message is returned.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyFleetOutput`](crate::output::ModifyFleetOutput).
        pub fn build(self) -> crate::output::ModifyFleetOutput {
            crate::output::ModifyFleetOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyFleetOutput {
    /// Creates a new builder-style object to manufacture [`ModifyFleetOutput`](crate::output::ModifyFleetOutput).
    pub fn builder() -> crate::output::modify_fleet_output::Builder {
        crate::output::modify_fleet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ModifyEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyEbsDefaultKmsKeyIdOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput).
pub mod modify_ebs_default_kms_key_id_output {

    /// A builder for [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput).
        pub fn build(self) -> crate::output::ModifyEbsDefaultKmsKeyIdOutput {
            crate::output::ModifyEbsDefaultKmsKeyIdOutput {
                kms_key_id: self.kms_key_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyEbsDefaultKmsKeyIdOutput {
    /// Creates a new builder-style object to manufacture [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput).
    pub fn builder() -> crate::output::modify_ebs_default_kms_key_id_output::Builder {
        crate::output::modify_ebs_default_kms_key_id_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyDefaultCreditSpecificationOutput {
    /// <p>The default credit option for CPU usage of the instance family.</p>
    #[doc(hidden)]
    pub instance_family_credit_specification:
        std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
    _request_id: Option<String>,
}
impl ModifyDefaultCreditSpecificationOutput {
    /// <p>The default credit option for CPU usage of the instance family.</p>
    pub fn instance_family_credit_specification(
        &self,
    ) -> std::option::Option<&crate::model::InstanceFamilyCreditSpecification> {
        self.instance_family_credit_specification.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyDefaultCreditSpecificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput).
pub mod modify_default_credit_specification_output {

    /// A builder for [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_family_credit_specification:
            std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The default credit option for CPU usage of the instance family.</p>
        pub fn instance_family_credit_specification(
            mut self,
            input: crate::model::InstanceFamilyCreditSpecification,
        ) -> Self {
            self.instance_family_credit_specification = Some(input);
            self
        }
        /// <p>The default credit option for CPU usage of the instance family.</p>
        pub fn set_instance_family_credit_specification(
            mut self,
            input: std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
        ) -> Self {
            self.instance_family_credit_specification = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput).
        pub fn build(self) -> crate::output::ModifyDefaultCreditSpecificationOutput {
            crate::output::ModifyDefaultCreditSpecificationOutput {
                instance_family_credit_specification: self.instance_family_credit_specification,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyDefaultCreditSpecificationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput).
    pub fn builder() -> crate::output::modify_default_credit_specification_output::Builder {
        crate::output::modify_default_credit_specification_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyClientVpnEndpointOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyClientVpnEndpointOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyClientVpnEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput).
pub mod modify_client_vpn_endpoint_output {

    /// A builder for [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput).
        pub fn build(self) -> crate::output::ModifyClientVpnEndpointOutput {
            crate::output::ModifyClientVpnEndpointOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyClientVpnEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput).
    pub fn builder() -> crate::output::modify_client_vpn_endpoint_output::Builder {
        crate::output::modify_client_vpn_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyCapacityReservationFleetOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyCapacityReservationFleetOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyCapacityReservationFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyCapacityReservationFleetOutput`](crate::output::ModifyCapacityReservationFleetOutput).
pub mod modify_capacity_reservation_fleet_output {

    /// A builder for [`ModifyCapacityReservationFleetOutput`](crate::output::ModifyCapacityReservationFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCapacityReservationFleetOutput`](crate::output::ModifyCapacityReservationFleetOutput).
        pub fn build(self) -> crate::output::ModifyCapacityReservationFleetOutput {
            crate::output::ModifyCapacityReservationFleetOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyCapacityReservationFleetOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCapacityReservationFleetOutput`](crate::output::ModifyCapacityReservationFleetOutput).
    pub fn builder() -> crate::output::modify_capacity_reservation_fleet_output::Builder {
        crate::output::modify_capacity_reservation_fleet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyCapacityReservationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyCapacityReservationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyCapacityReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput).
pub mod modify_capacity_reservation_output {

    /// A builder for [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput).
        pub fn build(self) -> crate::output::ModifyCapacityReservationOutput {
            crate::output::ModifyCapacityReservationOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput).
    pub fn builder() -> crate::output::modify_capacity_reservation_output::Builder {
        crate::output::modify_capacity_reservation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyAvailabilityZoneGroupOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ModifyAvailabilityZoneGroupOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ModifyAvailabilityZoneGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput).
pub mod modify_availability_zone_group_output {

    /// A builder for [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput).
        pub fn build(self) -> crate::output::ModifyAvailabilityZoneGroupOutput {
            crate::output::ModifyAvailabilityZoneGroupOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyAvailabilityZoneGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput).
    pub fn builder() -> crate::output::modify_availability_zone_group_output::Builder {
        crate::output::modify_availability_zone_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyAddressAttributeOutput {
    /// <p>Information about the Elastic IP address.</p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::model::AddressAttribute>,
    _request_id: Option<String>,
}
impl ModifyAddressAttributeOutput {
    /// <p>Information about the Elastic IP address.</p>
    pub fn address(&self) -> std::option::Option<&crate::model::AddressAttribute> {
        self.address.as_ref()
    }
}
impl aws_http::request_id::RequestId for ModifyAddressAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput).
pub mod modify_address_attribute_output {

    /// A builder for [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address: std::option::Option<crate::model::AddressAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Elastic IP address.</p>
        pub fn address(mut self, input: crate::model::AddressAttribute) -> Self {
            self.address = Some(input);
            self
        }
        /// <p>Information about the Elastic IP address.</p>
        pub fn set_address(
            mut self,
            input: std::option::Option<crate::model::AddressAttribute>,
        ) -> Self {
            self.address = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput).
        pub fn build(self) -> crate::output::ModifyAddressAttributeOutput {
            crate::output::ModifyAddressAttributeOutput {
                address: self.address,
                _request_id: self._request_id,
            }
        }
    }
}
impl ModifyAddressAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput).
    pub fn builder() -> crate::output::modify_address_attribute_output::Builder {
        crate::output::modify_address_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSnapshotsInRecycleBinOutput {
    /// <p>Information about the snapshots.</p>
    #[doc(hidden)]
    pub snapshots: std::option::Option<std::vec::Vec<crate::model::SnapshotRecycleBinInfo>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSnapshotsInRecycleBinOutput {
    /// <p>Information about the snapshots.</p>
    pub fn snapshots(&self) -> std::option::Option<&[crate::model::SnapshotRecycleBinInfo]> {
        self.snapshots.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSnapshotsInRecycleBinOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListSnapshotsInRecycleBinOutput`](crate::output::ListSnapshotsInRecycleBinOutput).
pub mod list_snapshots_in_recycle_bin_output {

    /// A builder for [`ListSnapshotsInRecycleBinOutput`](crate::output::ListSnapshotsInRecycleBinOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshots:
            std::option::Option<std::vec::Vec<crate::model::SnapshotRecycleBinInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `snapshots`.
        ///
        /// To override the contents of this collection use [`set_snapshots`](Self::set_snapshots).
        ///
        /// <p>Information about the snapshots.</p>
        pub fn snapshots(mut self, input: crate::model::SnapshotRecycleBinInfo) -> Self {
            let mut v = self.snapshots.unwrap_or_default();
            v.push(input);
            self.snapshots = Some(v);
            self
        }
        /// <p>Information about the snapshots.</p>
        pub fn set_snapshots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SnapshotRecycleBinInfo>>,
        ) -> Self {
            self.snapshots = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSnapshotsInRecycleBinOutput`](crate::output::ListSnapshotsInRecycleBinOutput).
        pub fn build(self) -> crate::output::ListSnapshotsInRecycleBinOutput {
            crate::output::ListSnapshotsInRecycleBinOutput {
                snapshots: self.snapshots,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListSnapshotsInRecycleBinOutput {
    /// Creates a new builder-style object to manufacture [`ListSnapshotsInRecycleBinOutput`](crate::output::ListSnapshotsInRecycleBinOutput).
    pub fn builder() -> crate::output::list_snapshots_in_recycle_bin_output::Builder {
        crate::output::list_snapshots_in_recycle_bin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListImagesInRecycleBinOutput {
    /// <p>Information about the AMIs.</p>
    #[doc(hidden)]
    pub images: std::option::Option<std::vec::Vec<crate::model::ImageRecycleBinInfo>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListImagesInRecycleBinOutput {
    /// <p>Information about the AMIs.</p>
    pub fn images(&self) -> std::option::Option<&[crate::model::ImageRecycleBinInfo]> {
        self.images.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListImagesInRecycleBinOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListImagesInRecycleBinOutput`](crate::output::ListImagesInRecycleBinOutput).
pub mod list_images_in_recycle_bin_output {

    /// A builder for [`ListImagesInRecycleBinOutput`](crate::output::ListImagesInRecycleBinOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) images: std::option::Option<std::vec::Vec<crate::model::ImageRecycleBinInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `images`.
        ///
        /// To override the contents of this collection use [`set_images`](Self::set_images).
        ///
        /// <p>Information about the AMIs.</p>
        pub fn images(mut self, input: crate::model::ImageRecycleBinInfo) -> Self {
            let mut v = self.images.unwrap_or_default();
            v.push(input);
            self.images = Some(v);
            self
        }
        /// <p>Information about the AMIs.</p>
        pub fn set_images(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImageRecycleBinInfo>>,
        ) -> Self {
            self.images = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListImagesInRecycleBinOutput`](crate::output::ListImagesInRecycleBinOutput).
        pub fn build(self) -> crate::output::ListImagesInRecycleBinOutput {
            crate::output::ListImagesInRecycleBinOutput {
                images: self.images,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListImagesInRecycleBinOutput {
    /// Creates a new builder-style object to manufacture [`ListImagesInRecycleBinOutput`](crate::output::ListImagesInRecycleBinOutput).
    pub fn builder() -> crate::output::list_images_in_recycle_bin_output::Builder {
        crate::output::list_images_in_recycle_bin_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportVolumeOutput {
    /// <p>Information about the conversion task.</p>
    #[doc(hidden)]
    pub conversion_task: std::option::Option<crate::model::ConversionTask>,
    _request_id: Option<String>,
}
impl ImportVolumeOutput {
    /// <p>Information about the conversion task.</p>
    pub fn conversion_task(&self) -> std::option::Option<&crate::model::ConversionTask> {
        self.conversion_task.as_ref()
    }
}
impl aws_http::request_id::RequestId for ImportVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportVolumeOutput`](crate::output::ImportVolumeOutput).
pub mod import_volume_output {

    /// A builder for [`ImportVolumeOutput`](crate::output::ImportVolumeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) conversion_task: std::option::Option<crate::model::ConversionTask>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the conversion task.</p>
        pub fn conversion_task(mut self, input: crate::model::ConversionTask) -> Self {
            self.conversion_task = Some(input);
            self
        }
        /// <p>Information about the conversion task.</p>
        pub fn set_conversion_task(
            mut self,
            input: std::option::Option<crate::model::ConversionTask>,
        ) -> Self {
            self.conversion_task = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportVolumeOutput`](crate::output::ImportVolumeOutput).
        pub fn build(self) -> crate::output::ImportVolumeOutput {
            crate::output::ImportVolumeOutput {
                conversion_task: self.conversion_task,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportVolumeOutput {
    /// Creates a new builder-style object to manufacture [`ImportVolumeOutput`](crate::output::ImportVolumeOutput).
    pub fn builder() -> crate::output::import_volume_output::Builder {
        crate::output::import_volume_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportSnapshotOutput {
    /// <p>A description of the import snapshot task.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the import snapshot task.</p>
    #[doc(hidden)]
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>Information about the import snapshot task.</p>
    #[doc(hidden)]
    pub snapshot_task_detail: std::option::Option<crate::model::SnapshotTaskDetail>,
    /// <p>Any tags assigned to the import snapshot task.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ImportSnapshotOutput {
    /// <p>A description of the import snapshot task.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the import snapshot task.</p>
    pub fn import_task_id(&self) -> std::option::Option<&str> {
        self.import_task_id.as_deref()
    }
    /// <p>Information about the import snapshot task.</p>
    pub fn snapshot_task_detail(&self) -> std::option::Option<&crate::model::SnapshotTaskDetail> {
        self.snapshot_task_detail.as_ref()
    }
    /// <p>Any tags assigned to the import snapshot task.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput).
pub mod import_snapshot_output {

    /// A builder for [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) import_task_id: std::option::Option<std::string::String>,
        pub(crate) snapshot_task_detail: std::option::Option<crate::model::SnapshotTaskDetail>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the import snapshot task.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the import snapshot task.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ID of the import snapshot task.</p>
        pub fn import_task_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.import_task_id = Some(input.into());
            self
        }
        /// <p>The ID of the import snapshot task.</p>
        pub fn set_import_task_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.import_task_id = input;
            self
        }
        /// <p>Information about the import snapshot task.</p>
        pub fn snapshot_task_detail(mut self, input: crate::model::SnapshotTaskDetail) -> Self {
            self.snapshot_task_detail = Some(input);
            self
        }
        /// <p>Information about the import snapshot task.</p>
        pub fn set_snapshot_task_detail(
            mut self,
            input: std::option::Option<crate::model::SnapshotTaskDetail>,
        ) -> Self {
            self.snapshot_task_detail = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags assigned to the import snapshot task.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags assigned to the import snapshot task.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput).
        pub fn build(self) -> crate::output::ImportSnapshotOutput {
            crate::output::ImportSnapshotOutput {
                description: self.description,
                import_task_id: self.import_task_id,
                snapshot_task_detail: self.snapshot_task_detail,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput).
    pub fn builder() -> crate::output::import_snapshot_output::Builder {
        crate::output::import_snapshot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportKeyPairOutput {
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub key_fingerprint: std::option::Option<std::string::String>,
    /// <p>The key pair name that you provided.</p>
    #[doc(hidden)]
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The ID of the resulting key pair.</p>
    #[doc(hidden)]
    pub key_pair_id: std::option::Option<std::string::String>,
    /// <p>The tags applied to the imported key pair.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ImportKeyPairOutput {
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    pub fn key_fingerprint(&self) -> std::option::Option<&str> {
        self.key_fingerprint.as_deref()
    }
    /// <p>The key pair name that you provided.</p>
    pub fn key_name(&self) -> std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The ID of the resulting key pair.</p>
    pub fn key_pair_id(&self) -> std::option::Option<&str> {
        self.key_pair_id.as_deref()
    }
    /// <p>The tags applied to the imported key pair.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportKeyPairOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput).
pub mod import_key_pair_output {

    /// A builder for [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_fingerprint: std::option::Option<std::string::String>,
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) key_pair_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <ul>
        /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.</p> </li>
        /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
        /// </ul>
        pub fn key_fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_fingerprint = Some(input.into());
            self
        }
        /// <ul>
        /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.</p> </li>
        /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
        /// </ul>
        pub fn set_key_fingerprint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.key_fingerprint = input;
            self
        }
        /// <p>The key pair name that you provided.</p>
        pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_name = Some(input.into());
            self
        }
        /// <p>The key pair name that you provided.</p>
        pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_name = input;
            self
        }
        /// <p>The ID of the resulting key pair.</p>
        pub fn key_pair_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_pair_id = Some(input.into());
            self
        }
        /// <p>The ID of the resulting key pair.</p>
        pub fn set_key_pair_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_pair_id = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags applied to the imported key pair.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags applied to the imported key pair.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput).
        pub fn build(self) -> crate::output::ImportKeyPairOutput {
            crate::output::ImportKeyPairOutput {
                key_fingerprint: self.key_fingerprint,
                key_name: self.key_name,
                key_pair_id: self.key_pair_id,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportKeyPairOutput {
    /// Creates a new builder-style object to manufacture [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput).
    pub fn builder() -> crate::output::import_key_pair_output::Builder {
        crate::output::import_key_pair_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportInstanceOutput {
    /// <p>Information about the conversion task.</p>
    #[doc(hidden)]
    pub conversion_task: std::option::Option<crate::model::ConversionTask>,
    _request_id: Option<String>,
}
impl ImportInstanceOutput {
    /// <p>Information about the conversion task.</p>
    pub fn conversion_task(&self) -> std::option::Option<&crate::model::ConversionTask> {
        self.conversion_task.as_ref()
    }
}
impl aws_http::request_id::RequestId for ImportInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportInstanceOutput`](crate::output::ImportInstanceOutput).
pub mod import_instance_output {

    /// A builder for [`ImportInstanceOutput`](crate::output::ImportInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) conversion_task: std::option::Option<crate::model::ConversionTask>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the conversion task.</p>
        pub fn conversion_task(mut self, input: crate::model::ConversionTask) -> Self {
            self.conversion_task = Some(input);
            self
        }
        /// <p>Information about the conversion task.</p>
        pub fn set_conversion_task(
            mut self,
            input: std::option::Option<crate::model::ConversionTask>,
        ) -> Self {
            self.conversion_task = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportInstanceOutput`](crate::output::ImportInstanceOutput).
        pub fn build(self) -> crate::output::ImportInstanceOutput {
            crate::output::ImportInstanceOutput {
                conversion_task: self.conversion_task,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ImportInstanceOutput`](crate::output::ImportInstanceOutput).
    pub fn builder() -> crate::output::import_instance_output::Builder {
        crate::output::import_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportImageOutput {
    /// <p>The architecture of the virtual machine.</p>
    #[doc(hidden)]
    pub architecture: std::option::Option<std::string::String>,
    /// <p>A description of the import task.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates whether the AMI is encrypted.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The target hypervisor of the import task.</p>
    #[doc(hidden)]
    pub hypervisor: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The task ID of the import image task.</p>
    #[doc(hidden)]
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the symmetric KMS key that was used to create the encrypted AMI.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The license type of the virtual machine.</p>
    #[doc(hidden)]
    pub license_type: std::option::Option<std::string::String>,
    /// <p>The operating system of the virtual machine.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The progress of the task.</p>
    #[doc(hidden)]
    pub progress: std::option::Option<std::string::String>,
    /// <p>Information about the snapshots.</p>
    #[doc(hidden)]
    pub snapshot_details: std::option::Option<std::vec::Vec<crate::model::SnapshotDetail>>,
    /// <p>A brief status of the task.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>A detailed status message of the import task.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The ARNs of the license configurations.</p>
    #[doc(hidden)]
    pub license_specifications:
        std::option::Option<std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>>,
    /// <p>Any tags assigned to the import image task.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The usage operation value.</p>
    #[doc(hidden)]
    pub usage_operation: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportImageOutput {
    /// <p>The architecture of the virtual machine.</p>
    pub fn architecture(&self) -> std::option::Option<&str> {
        self.architecture.as_deref()
    }
    /// <p>A description of the import task.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the AMI is encrypted.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The target hypervisor of the import task.</p>
    pub fn hypervisor(&self) -> std::option::Option<&str> {
        self.hypervisor.as_deref()
    }
    /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The task ID of the import image task.</p>
    pub fn import_task_id(&self) -> std::option::Option<&str> {
        self.import_task_id.as_deref()
    }
    /// <p>The identifier for the symmetric KMS key that was used to create the encrypted AMI.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The license type of the virtual machine.</p>
    pub fn license_type(&self) -> std::option::Option<&str> {
        self.license_type.as_deref()
    }
    /// <p>The operating system of the virtual machine.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The progress of the task.</p>
    pub fn progress(&self) -> std::option::Option<&str> {
        self.progress.as_deref()
    }
    /// <p>Information about the snapshots.</p>
    pub fn snapshot_details(&self) -> std::option::Option<&[crate::model::SnapshotDetail]> {
        self.snapshot_details.as_deref()
    }
    /// <p>A brief status of the task.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A detailed status message of the import task.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The ARNs of the license configurations.</p>
    pub fn license_specifications(
        &self,
    ) -> std::option::Option<&[crate::model::ImportImageLicenseConfigurationResponse]> {
        self.license_specifications.as_deref()
    }
    /// <p>Any tags assigned to the import image task.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The usage operation value.</p>
    pub fn usage_operation(&self) -> std::option::Option<&str> {
        self.usage_operation.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportImageOutput`](crate::output::ImportImageOutput).
pub mod import_image_output {

    /// A builder for [`ImportImageOutput`](crate::output::ImportImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) architecture: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) hypervisor: std::option::Option<std::string::String>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) import_task_id: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) license_type: std::option::Option<std::string::String>,
        pub(crate) platform: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) snapshot_details:
            std::option::Option<std::vec::Vec<crate::model::SnapshotDetail>>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) license_specifications: std::option::Option<
            std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>,
        >,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) usage_operation: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The architecture of the virtual machine.</p>
        pub fn architecture(mut self, input: impl Into<std::string::String>) -> Self {
            self.architecture = Some(input.into());
            self
        }
        /// <p>The architecture of the virtual machine.</p>
        pub fn set_architecture(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.architecture = input;
            self
        }
        /// <p>A description of the import task.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the import task.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Indicates whether the AMI is encrypted.</p>
        pub fn encrypted(mut self, input: bool) -> Self {
            self.encrypted = Some(input);
            self
        }
        /// <p>Indicates whether the AMI is encrypted.</p>
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.encrypted = input;
            self
        }
        /// <p>The target hypervisor of the import task.</p>
        pub fn hypervisor(mut self, input: impl Into<std::string::String>) -> Self {
            self.hypervisor = Some(input.into());
            self
        }
        /// <p>The target hypervisor of the import task.</p>
        pub fn set_hypervisor(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.hypervisor = input;
            self
        }
        /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        /// <p>The task ID of the import image task.</p>
        pub fn import_task_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.import_task_id = Some(input.into());
            self
        }
        /// <p>The task ID of the import image task.</p>
        pub fn set_import_task_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.import_task_id = input;
            self
        }
        /// <p>The identifier for the symmetric KMS key that was used to create the encrypted AMI.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The identifier for the symmetric KMS key that was used to create the encrypted AMI.</p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The license type of the virtual machine.</p>
        pub fn license_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_type = Some(input.into());
            self
        }
        /// <p>The license type of the virtual machine.</p>
        pub fn set_license_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.license_type = input;
            self
        }
        /// <p>The operating system of the virtual machine.</p>
        pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
            self.platform = Some(input.into());
            self
        }
        /// <p>The operating system of the virtual machine.</p>
        pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.platform = input;
            self
        }
        /// <p>The progress of the task.</p>
        pub fn progress(mut self, input: impl Into<std::string::String>) -> Self {
            self.progress = Some(input.into());
            self
        }
        /// <p>The progress of the task.</p>
        pub fn set_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.progress = input;
            self
        }
        /// Appends an item to `snapshot_details`.
        ///
        /// To override the contents of this collection use [`set_snapshot_details`](Self::set_snapshot_details).
        ///
        /// <p>Information about the snapshots.</p>
        pub fn snapshot_details(mut self, input: crate::model::SnapshotDetail) -> Self {
            let mut v = self.snapshot_details.unwrap_or_default();
            v.push(input);
            self.snapshot_details = Some(v);
            self
        }
        /// <p>Information about the snapshots.</p>
        pub fn set_snapshot_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SnapshotDetail>>,
        ) -> Self {
            self.snapshot_details = input;
            self
        }
        /// <p>A brief status of the task.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>A brief status of the task.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>A detailed status message of the import task.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>A detailed status message of the import task.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Appends an item to `license_specifications`.
        ///
        /// To override the contents of this collection use [`set_license_specifications`](Self::set_license_specifications).
        ///
        /// <p>The ARNs of the license configurations.</p>
        pub fn license_specifications(
            mut self,
            input: crate::model::ImportImageLicenseConfigurationResponse,
        ) -> Self {
            let mut v = self.license_specifications.unwrap_or_default();
            v.push(input);
            self.license_specifications = Some(v);
            self
        }
        /// <p>The ARNs of the license configurations.</p>
        pub fn set_license_specifications(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>,
            >,
        ) -> Self {
            self.license_specifications = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags assigned to the import image task.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags assigned to the import image task.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The usage operation value.</p>
        pub fn usage_operation(mut self, input: impl Into<std::string::String>) -> Self {
            self.usage_operation = Some(input.into());
            self
        }
        /// <p>The usage operation value.</p>
        pub fn set_usage_operation(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.usage_operation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportImageOutput`](crate::output::ImportImageOutput).
        pub fn build(self) -> crate::output::ImportImageOutput {
            crate::output::ImportImageOutput {
                architecture: self.architecture,
                description: self.description,
                encrypted: self.encrypted,
                hypervisor: self.hypervisor,
                image_id: self.image_id,
                import_task_id: self.import_task_id,
                kms_key_id: self.kms_key_id,
                license_type: self.license_type,
                platform: self.platform,
                progress: self.progress,
                snapshot_details: self.snapshot_details,
                status: self.status,
                status_message: self.status_message,
                license_specifications: self.license_specifications,
                tags: self.tags,
                usage_operation: self.usage_operation,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportImageOutput {
    /// Creates a new builder-style object to manufacture [`ImportImageOutput`](crate::output::ImportImageOutput).
    pub fn builder() -> crate::output::import_image_output::Builder {
        crate::output::import_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportClientVpnClientCertificateRevocationListOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ImportClientVpnClientCertificateRevocationListOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ImportClientVpnClientCertificateRevocationListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput).
pub mod import_client_vpn_client_certificate_revocation_list_output {

    /// A builder for [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput).
        pub fn build(self) -> crate::output::ImportClientVpnClientCertificateRevocationListOutput {
            crate::output::ImportClientVpnClientCertificateRevocationListOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ImportClientVpnClientCertificateRevocationListOutput {
    /// Creates a new builder-style object to manufacture [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput).
    pub fn builder(
    ) -> crate::output::import_client_vpn_client_certificate_revocation_list_output::Builder {
        crate::output::import_client_vpn_client_certificate_revocation_list_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVpnConnectionDeviceTypesOutput {
    /// <p>List of customer gateway devices that have a sample configuration file available for use.</p>
    #[doc(hidden)]
    pub vpn_connection_device_types:
        std::option::Option<std::vec::Vec<crate::model::VpnConnectionDeviceType>>,
    /// <p>The <code>NextToken</code> value to include in a future <code>GetVpnConnectionDeviceTypes</code> request. When the results of a <code>GetVpnConnectionDeviceTypes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVpnConnectionDeviceTypesOutput {
    /// <p>List of customer gateway devices that have a sample configuration file available for use.</p>
    pub fn vpn_connection_device_types(
        &self,
    ) -> std::option::Option<&[crate::model::VpnConnectionDeviceType]> {
        self.vpn_connection_device_types.as_deref()
    }
    /// <p>The <code>NextToken</code> value to include in a future <code>GetVpnConnectionDeviceTypes</code> request. When the results of a <code>GetVpnConnectionDeviceTypes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVpnConnectionDeviceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVpnConnectionDeviceTypesOutput`](crate::output::GetVpnConnectionDeviceTypesOutput).
pub mod get_vpn_connection_device_types_output {

    /// A builder for [`GetVpnConnectionDeviceTypesOutput`](crate::output::GetVpnConnectionDeviceTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection_device_types:
            std::option::Option<std::vec::Vec<crate::model::VpnConnectionDeviceType>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpn_connection_device_types`.
        ///
        /// To override the contents of this collection use [`set_vpn_connection_device_types`](Self::set_vpn_connection_device_types).
        ///
        /// <p>List of customer gateway devices that have a sample configuration file available for use.</p>
        pub fn vpn_connection_device_types(
            mut self,
            input: crate::model::VpnConnectionDeviceType,
        ) -> Self {
            let mut v = self.vpn_connection_device_types.unwrap_or_default();
            v.push(input);
            self.vpn_connection_device_types = Some(v);
            self
        }
        /// <p>List of customer gateway devices that have a sample configuration file available for use.</p>
        pub fn set_vpn_connection_device_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpnConnectionDeviceType>>,
        ) -> Self {
            self.vpn_connection_device_types = input;
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>GetVpnConnectionDeviceTypes</code> request. When the results of a <code>GetVpnConnectionDeviceTypes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>GetVpnConnectionDeviceTypes</code> request. When the results of a <code>GetVpnConnectionDeviceTypes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVpnConnectionDeviceTypesOutput`](crate::output::GetVpnConnectionDeviceTypesOutput).
        pub fn build(self) -> crate::output::GetVpnConnectionDeviceTypesOutput {
            crate::output::GetVpnConnectionDeviceTypesOutput {
                vpn_connection_device_types: self.vpn_connection_device_types,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVpnConnectionDeviceTypesOutput {
    /// Creates a new builder-style object to manufacture [`GetVpnConnectionDeviceTypesOutput`](crate::output::GetVpnConnectionDeviceTypesOutput).
    pub fn builder() -> crate::output::get_vpn_connection_device_types_output::Builder {
        crate::output::get_vpn_connection_device_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetVpnConnectionDeviceSampleConfigurationOutput {
    /// <p>Sample configuration file for the specified customer gateway device.</p>
    #[doc(hidden)]
    pub vpn_connection_device_sample_configuration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVpnConnectionDeviceSampleConfigurationOutput {
    /// <p>Sample configuration file for the specified customer gateway device.</p>
    pub fn vpn_connection_device_sample_configuration(&self) -> std::option::Option<&str> {
        self.vpn_connection_device_sample_configuration.as_deref()
    }
}
impl std::fmt::Debug for GetVpnConnectionDeviceSampleConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetVpnConnectionDeviceSampleConfigurationOutput");
        formatter.field(
            "vpn_connection_device_sample_configuration",
            &"*** Sensitive Data Redacted ***",
        );
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetVpnConnectionDeviceSampleConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVpnConnectionDeviceSampleConfigurationOutput`](crate::output::GetVpnConnectionDeviceSampleConfigurationOutput).
pub mod get_vpn_connection_device_sample_configuration_output {

    /// A builder for [`GetVpnConnectionDeviceSampleConfigurationOutput`](crate::output::GetVpnConnectionDeviceSampleConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) vpn_connection_device_sample_configuration:
            std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Sample configuration file for the specified customer gateway device.</p>
        pub fn vpn_connection_device_sample_configuration(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.vpn_connection_device_sample_configuration = Some(input.into());
            self
        }
        /// <p>Sample configuration file for the specified customer gateway device.</p>
        pub fn set_vpn_connection_device_sample_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vpn_connection_device_sample_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVpnConnectionDeviceSampleConfigurationOutput`](crate::output::GetVpnConnectionDeviceSampleConfigurationOutput).
        pub fn build(self) -> crate::output::GetVpnConnectionDeviceSampleConfigurationOutput {
            crate::output::GetVpnConnectionDeviceSampleConfigurationOutput {
                vpn_connection_device_sample_configuration: self
                    .vpn_connection_device_sample_configuration,
                _request_id: self._request_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field(
                "vpn_connection_device_sample_configuration",
                &"*** Sensitive Data Redacted ***",
            );
            formatter.field("_request_id", &self._request_id);
            formatter.finish()
        }
    }
}
impl GetVpnConnectionDeviceSampleConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetVpnConnectionDeviceSampleConfigurationOutput`](crate::output::GetVpnConnectionDeviceSampleConfigurationOutput).
    pub fn builder() -> crate::output::get_vpn_connection_device_sample_configuration_output::Builder
    {
        crate::output::get_vpn_connection_device_sample_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVerifiedAccessGroupPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    #[doc(hidden)]
    pub policy_enabled: std::option::Option<bool>,
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    #[doc(hidden)]
    pub policy_document: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVerifiedAccessGroupPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    pub fn policy_enabled(&self) -> std::option::Option<bool> {
        self.policy_enabled
    }
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    pub fn policy_document(&self) -> std::option::Option<&str> {
        self.policy_document.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVerifiedAccessGroupPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVerifiedAccessGroupPolicyOutput`](crate::output::GetVerifiedAccessGroupPolicyOutput).
pub mod get_verified_access_group_policy_output {

    /// A builder for [`GetVerifiedAccessGroupPolicyOutput`](crate::output::GetVerifiedAccessGroupPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_enabled: std::option::Option<bool>,
        pub(crate) policy_document: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The status of the Verified Access policy.</p>
        pub fn policy_enabled(mut self, input: bool) -> Self {
            self.policy_enabled = Some(input);
            self
        }
        /// <p>The status of the Verified Access policy.</p>
        pub fn set_policy_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.policy_enabled = input;
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn policy_document(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_document = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn set_policy_document(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_document = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVerifiedAccessGroupPolicyOutput`](crate::output::GetVerifiedAccessGroupPolicyOutput).
        pub fn build(self) -> crate::output::GetVerifiedAccessGroupPolicyOutput {
            crate::output::GetVerifiedAccessGroupPolicyOutput {
                policy_enabled: self.policy_enabled,
                policy_document: self.policy_document,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVerifiedAccessGroupPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetVerifiedAccessGroupPolicyOutput`](crate::output::GetVerifiedAccessGroupPolicyOutput).
    pub fn builder() -> crate::output::get_verified_access_group_policy_output::Builder {
        crate::output::get_verified_access_group_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVerifiedAccessEndpointPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    #[doc(hidden)]
    pub policy_enabled: std::option::Option<bool>,
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    #[doc(hidden)]
    pub policy_document: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetVerifiedAccessEndpointPolicyOutput {
    /// <p>The status of the Verified Access policy.</p>
    pub fn policy_enabled(&self) -> std::option::Option<bool> {
        self.policy_enabled
    }
    /// <p>The Amazon Web Services Verified Access policy document.</p>
    pub fn policy_document(&self) -> std::option::Option<&str> {
        self.policy_document.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetVerifiedAccessEndpointPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetVerifiedAccessEndpointPolicyOutput`](crate::output::GetVerifiedAccessEndpointPolicyOutput).
pub mod get_verified_access_endpoint_policy_output {

    /// A builder for [`GetVerifiedAccessEndpointPolicyOutput`](crate::output::GetVerifiedAccessEndpointPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_enabled: std::option::Option<bool>,
        pub(crate) policy_document: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The status of the Verified Access policy.</p>
        pub fn policy_enabled(mut self, input: bool) -> Self {
            self.policy_enabled = Some(input);
            self
        }
        /// <p>The status of the Verified Access policy.</p>
        pub fn set_policy_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.policy_enabled = input;
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn policy_document(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_document = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services Verified Access policy document.</p>
        pub fn set_policy_document(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.policy_document = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetVerifiedAccessEndpointPolicyOutput`](crate::output::GetVerifiedAccessEndpointPolicyOutput).
        pub fn build(self) -> crate::output::GetVerifiedAccessEndpointPolicyOutput {
            crate::output::GetVerifiedAccessEndpointPolicyOutput {
                policy_enabled: self.policy_enabled,
                policy_document: self.policy_document,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetVerifiedAccessEndpointPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetVerifiedAccessEndpointPolicyOutput`](crate::output::GetVerifiedAccessEndpointPolicyOutput).
    pub fn builder() -> crate::output::get_verified_access_endpoint_policy_output::Builder {
        crate::output::get_verified_access_endpoint_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayRouteTablePropagationsOutput {
    /// <p>Information about the route table propagations.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table_propagations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTransitGatewayRouteTablePropagationsOutput {
    /// <p>Information about the route table propagations.</p>
    pub fn transit_gateway_route_table_propagations(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayRouteTablePropagation]> {
        self.transit_gateway_route_table_propagations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayRouteTablePropagationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput).
pub mod get_transit_gateway_route_table_propagations_output {

    /// A builder for [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table_propagations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_route_table_propagations`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_route_table_propagations`](Self::set_transit_gateway_route_table_propagations).
        ///
        /// <p>Information about the route table propagations.</p>
        pub fn transit_gateway_route_table_propagations(
            mut self,
            input: crate::model::TransitGatewayRouteTablePropagation,
        ) -> Self {
            let mut v = self
                .transit_gateway_route_table_propagations
                .unwrap_or_default();
            v.push(input);
            self.transit_gateway_route_table_propagations = Some(v);
            self
        }
        /// <p>Information about the route table propagations.</p>
        pub fn set_transit_gateway_route_table_propagations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>,
            >,
        ) -> Self {
            self.transit_gateway_route_table_propagations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayRouteTablePropagationsOutput {
            crate::output::GetTransitGatewayRouteTablePropagationsOutput {
                transit_gateway_route_table_propagations: self
                    .transit_gateway_route_table_propagations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayRouteTablePropagationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput).
    pub fn builder() -> crate::output::get_transit_gateway_route_table_propagations_output::Builder
    {
        crate::output::get_transit_gateway_route_table_propagations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayRouteTableAssociationsOutput {
    /// <p>Information about the associations.</p>
    #[doc(hidden)]
    pub associations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTransitGatewayRouteTableAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub fn associations(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayRouteTableAssociation]> {
        self.associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayRouteTableAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput).
pub mod get_transit_gateway_route_table_associations_output {

    /// A builder for [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `associations`.
        ///
        /// To override the contents of this collection use [`set_associations`](Self::set_associations).
        ///
        /// <p>Information about the associations.</p>
        pub fn associations(
            mut self,
            input: crate::model::TransitGatewayRouteTableAssociation,
        ) -> Self {
            let mut v = self.associations.unwrap_or_default();
            v.push(input);
            self.associations = Some(v);
            self
        }
        /// <p>Information about the associations.</p>
        pub fn set_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>,
            >,
        ) -> Self {
            self.associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayRouteTableAssociationsOutput {
            crate::output::GetTransitGatewayRouteTableAssociationsOutput {
                associations: self.associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayRouteTableAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput).
    pub fn builder() -> crate::output::get_transit_gateway_route_table_associations_output::Builder
    {
        crate::output::get_transit_gateway_route_table_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayPrefixListReferencesOutput {
    /// <p>Information about the prefix list references.</p>
    #[doc(hidden)]
    pub transit_gateway_prefix_list_references:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPrefixListReference>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTransitGatewayPrefixListReferencesOutput {
    /// <p>Information about the prefix list references.</p>
    pub fn transit_gateway_prefix_list_references(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayPrefixListReference]> {
        self.transit_gateway_prefix_list_references.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayPrefixListReferencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput).
pub mod get_transit_gateway_prefix_list_references_output {

    /// A builder for [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_references:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPrefixListReference>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_prefix_list_references`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_prefix_list_references`](Self::set_transit_gateway_prefix_list_references).
        ///
        /// <p>Information about the prefix list references.</p>
        pub fn transit_gateway_prefix_list_references(
            mut self,
            input: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            let mut v = self
                .transit_gateway_prefix_list_references
                .unwrap_or_default();
            v.push(input);
            self.transit_gateway_prefix_list_references = Some(v);
            self
        }
        /// <p>Information about the prefix list references.</p>
        pub fn set_transit_gateway_prefix_list_references(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayPrefixListReference>,
            >,
        ) -> Self {
            self.transit_gateway_prefix_list_references = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayPrefixListReferencesOutput {
            crate::output::GetTransitGatewayPrefixListReferencesOutput {
                transit_gateway_prefix_list_references: self.transit_gateway_prefix_list_references,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayPrefixListReferencesOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput).
    pub fn builder() -> crate::output::get_transit_gateway_prefix_list_references_output::Builder {
        crate::output::get_transit_gateway_prefix_list_references_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayPolicyTableEntriesOutput {
    /// <p>The entries for the transit gateway policy table.</p>
    #[doc(hidden)]
    pub transit_gateway_policy_table_entries:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTableEntry>>,
    _request_id: Option<String>,
}
impl GetTransitGatewayPolicyTableEntriesOutput {
    /// <p>The entries for the transit gateway policy table.</p>
    pub fn transit_gateway_policy_table_entries(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayPolicyTableEntry]> {
        self.transit_gateway_policy_table_entries.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayPolicyTableEntriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayPolicyTableEntriesOutput`](crate::output::GetTransitGatewayPolicyTableEntriesOutput).
pub mod get_transit_gateway_policy_table_entries_output {

    /// A builder for [`GetTransitGatewayPolicyTableEntriesOutput`](crate::output::GetTransitGatewayPolicyTableEntriesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_policy_table_entries:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTableEntry>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_policy_table_entries`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_policy_table_entries`](Self::set_transit_gateway_policy_table_entries).
        ///
        /// <p>The entries for the transit gateway policy table.</p>
        pub fn transit_gateway_policy_table_entries(
            mut self,
            input: crate::model::TransitGatewayPolicyTableEntry,
        ) -> Self {
            let mut v = self
                .transit_gateway_policy_table_entries
                .unwrap_or_default();
            v.push(input);
            self.transit_gateway_policy_table_entries = Some(v);
            self
        }
        /// <p>The entries for the transit gateway policy table.</p>
        pub fn set_transit_gateway_policy_table_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTableEntry>>,
        ) -> Self {
            self.transit_gateway_policy_table_entries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayPolicyTableEntriesOutput`](crate::output::GetTransitGatewayPolicyTableEntriesOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayPolicyTableEntriesOutput {
            crate::output::GetTransitGatewayPolicyTableEntriesOutput {
                transit_gateway_policy_table_entries: self.transit_gateway_policy_table_entries,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayPolicyTableEntriesOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayPolicyTableEntriesOutput`](crate::output::GetTransitGatewayPolicyTableEntriesOutput).
    pub fn builder() -> crate::output::get_transit_gateway_policy_table_entries_output::Builder {
        crate::output::get_transit_gateway_policy_table_entries_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayPolicyTableAssociationsOutput {
    /// <p>Returns details about the transit gateway policy table association.</p>
    #[doc(hidden)]
    pub associations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTableAssociation>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTransitGatewayPolicyTableAssociationsOutput {
    /// <p>Returns details about the transit gateway policy table association.</p>
    pub fn associations(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayPolicyTableAssociation]> {
        self.associations.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayPolicyTableAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayPolicyTableAssociationsOutput`](crate::output::GetTransitGatewayPolicyTableAssociationsOutput).
pub mod get_transit_gateway_policy_table_associations_output {

    /// A builder for [`GetTransitGatewayPolicyTableAssociationsOutput`](crate::output::GetTransitGatewayPolicyTableAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTableAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `associations`.
        ///
        /// To override the contents of this collection use [`set_associations`](Self::set_associations).
        ///
        /// <p>Returns details about the transit gateway policy table association.</p>
        pub fn associations(
            mut self,
            input: crate::model::TransitGatewayPolicyTableAssociation,
        ) -> Self {
            let mut v = self.associations.unwrap_or_default();
            v.push(input);
            self.associations = Some(v);
            self
        }
        /// <p>Returns details about the transit gateway policy table association.</p>
        pub fn set_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayPolicyTableAssociation>,
            >,
        ) -> Self {
            self.associations = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayPolicyTableAssociationsOutput`](crate::output::GetTransitGatewayPolicyTableAssociationsOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayPolicyTableAssociationsOutput {
            crate::output::GetTransitGatewayPolicyTableAssociationsOutput {
                associations: self.associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayPolicyTableAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayPolicyTableAssociationsOutput`](crate::output::GetTransitGatewayPolicyTableAssociationsOutput).
    pub fn builder() -> crate::output::get_transit_gateway_policy_table_associations_output::Builder
    {
        crate::output::get_transit_gateway_policy_table_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    #[doc(hidden)]
    pub multicast_domain_associations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    pub fn multicast_domain_associations(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayMulticastDomainAssociation]> {
        self.multicast_domain_associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayMulticastDomainAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput).
pub mod get_transit_gateway_multicast_domain_associations_output {

    /// A builder for [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) multicast_domain_associations: std::option::Option<
            std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `multicast_domain_associations`.
        ///
        /// To override the contents of this collection use [`set_multicast_domain_associations`](Self::set_multicast_domain_associations).
        ///
        /// <p>Information about the multicast domain associations.</p>
        pub fn multicast_domain_associations(
            mut self,
            input: crate::model::TransitGatewayMulticastDomainAssociation,
        ) -> Self {
            let mut v = self.multicast_domain_associations.unwrap_or_default();
            v.push(input);
            self.multicast_domain_associations = Some(v);
            self
        }
        /// <p>Information about the multicast domain associations.</p>
        pub fn set_multicast_domain_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>,
            >,
        ) -> Self {
            self.multicast_domain_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayMulticastDomainAssociationsOutput {
            crate::output::GetTransitGatewayMulticastDomainAssociationsOutput {
                multicast_domain_associations: self.multicast_domain_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayMulticastDomainAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput).
    pub fn builder(
    ) -> crate::output::get_transit_gateway_multicast_domain_associations_output::Builder {
        crate::output::get_transit_gateway_multicast_domain_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTransitGatewayAttachmentPropagationsOutput {
    /// <p>Information about the propagation route tables.</p>
    #[doc(hidden)]
    pub transit_gateway_attachment_propagations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetTransitGatewayAttachmentPropagationsOutput {
    /// <p>Information about the propagation route tables.</p>
    pub fn transit_gateway_attachment_propagations(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayAttachmentPropagation]> {
        self.transit_gateway_attachment_propagations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetTransitGatewayAttachmentPropagationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput).
pub mod get_transit_gateway_attachment_propagations_output {

    /// A builder for [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_attachment_propagations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_attachment_propagations`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_attachment_propagations`](Self::set_transit_gateway_attachment_propagations).
        ///
        /// <p>Information about the propagation route tables.</p>
        pub fn transit_gateway_attachment_propagations(
            mut self,
            input: crate::model::TransitGatewayAttachmentPropagation,
        ) -> Self {
            let mut v = self
                .transit_gateway_attachment_propagations
                .unwrap_or_default();
            v.push(input);
            self.transit_gateway_attachment_propagations = Some(v);
            self
        }
        /// <p>Information about the propagation route tables.</p>
        pub fn set_transit_gateway_attachment_propagations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>,
            >,
        ) -> Self {
            self.transit_gateway_attachment_propagations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput).
        pub fn build(self) -> crate::output::GetTransitGatewayAttachmentPropagationsOutput {
            crate::output::GetTransitGatewayAttachmentPropagationsOutput {
                transit_gateway_attachment_propagations: self
                    .transit_gateway_attachment_propagations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetTransitGatewayAttachmentPropagationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput).
    pub fn builder() -> crate::output::get_transit_gateway_attachment_propagations_output::Builder {
        crate::output::get_transit_gateway_attachment_propagations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSubnetCidrReservationsOutput {
    /// <p>Information about the IPv4 subnet CIDR reservations.</p>
    #[doc(hidden)]
    pub subnet_ipv4_cidr_reservations:
        std::option::Option<std::vec::Vec<crate::model::SubnetCidrReservation>>,
    /// <p>Information about the IPv6 subnet CIDR reservations.</p>
    #[doc(hidden)]
    pub subnet_ipv6_cidr_reservations:
        std::option::Option<std::vec::Vec<crate::model::SubnetCidrReservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSubnetCidrReservationsOutput {
    /// <p>Information about the IPv4 subnet CIDR reservations.</p>
    pub fn subnet_ipv4_cidr_reservations(
        &self,
    ) -> std::option::Option<&[crate::model::SubnetCidrReservation]> {
        self.subnet_ipv4_cidr_reservations.as_deref()
    }
    /// <p>Information about the IPv6 subnet CIDR reservations.</p>
    pub fn subnet_ipv6_cidr_reservations(
        &self,
    ) -> std::option::Option<&[crate::model::SubnetCidrReservation]> {
        self.subnet_ipv6_cidr_reservations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSubnetCidrReservationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSubnetCidrReservationsOutput`](crate::output::GetSubnetCidrReservationsOutput).
pub mod get_subnet_cidr_reservations_output {

    /// A builder for [`GetSubnetCidrReservationsOutput`](crate::output::GetSubnetCidrReservationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet_ipv4_cidr_reservations:
            std::option::Option<std::vec::Vec<crate::model::SubnetCidrReservation>>,
        pub(crate) subnet_ipv6_cidr_reservations:
            std::option::Option<std::vec::Vec<crate::model::SubnetCidrReservation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `subnet_ipv4_cidr_reservations`.
        ///
        /// To override the contents of this collection use [`set_subnet_ipv4_cidr_reservations`](Self::set_subnet_ipv4_cidr_reservations).
        ///
        /// <p>Information about the IPv4 subnet CIDR reservations.</p>
        pub fn subnet_ipv4_cidr_reservations(
            mut self,
            input: crate::model::SubnetCidrReservation,
        ) -> Self {
            let mut v = self.subnet_ipv4_cidr_reservations.unwrap_or_default();
            v.push(input);
            self.subnet_ipv4_cidr_reservations = Some(v);
            self
        }
        /// <p>Information about the IPv4 subnet CIDR reservations.</p>
        pub fn set_subnet_ipv4_cidr_reservations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SubnetCidrReservation>>,
        ) -> Self {
            self.subnet_ipv4_cidr_reservations = input;
            self
        }
        /// Appends an item to `subnet_ipv6_cidr_reservations`.
        ///
        /// To override the contents of this collection use [`set_subnet_ipv6_cidr_reservations`](Self::set_subnet_ipv6_cidr_reservations).
        ///
        /// <p>Information about the IPv6 subnet CIDR reservations.</p>
        pub fn subnet_ipv6_cidr_reservations(
            mut self,
            input: crate::model::SubnetCidrReservation,
        ) -> Self {
            let mut v = self.subnet_ipv6_cidr_reservations.unwrap_or_default();
            v.push(input);
            self.subnet_ipv6_cidr_reservations = Some(v);
            self
        }
        /// <p>Information about the IPv6 subnet CIDR reservations.</p>
        pub fn set_subnet_ipv6_cidr_reservations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SubnetCidrReservation>>,
        ) -> Self {
            self.subnet_ipv6_cidr_reservations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSubnetCidrReservationsOutput`](crate::output::GetSubnetCidrReservationsOutput).
        pub fn build(self) -> crate::output::GetSubnetCidrReservationsOutput {
            crate::output::GetSubnetCidrReservationsOutput {
                subnet_ipv4_cidr_reservations: self.subnet_ipv4_cidr_reservations,
                subnet_ipv6_cidr_reservations: self.subnet_ipv6_cidr_reservations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSubnetCidrReservationsOutput {
    /// Creates a new builder-style object to manufacture [`GetSubnetCidrReservationsOutput`](crate::output::GetSubnetCidrReservationsOutput).
    pub fn builder() -> crate::output::get_subnet_cidr_reservations_output::Builder {
        crate::output::get_subnet_cidr_reservations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSpotPlacementScoresOutput {
    /// <p>The Spot placement score for the top 10 Regions or Availability Zones, scored on a scale from 1 to 10. Each score  reflects how likely it is that each Region or Availability Zone will succeed at fulfilling the specified target capacity  <i>at the time of the Spot placement score request</i>. A score of <code>10</code> means that your Spot capacity request is highly likely to succeed in that Region or Availability Zone. </p>
    /// <p>If you request a Spot placement score for Regions, a high score assumes that your fleet request will be configured to use all Availability Zones and the <code>capacity-optimized</code> allocation strategy. If you request a Spot placement score for Availability Zones, a high score assumes that your fleet request will be configured to use a single Availability Zone and the <code>capacity-optimized</code> allocation strategy.</p>
    /// <p>Different  Regions or Availability Zones might return the same score.</p> <note>
    /// <p>The Spot placement score serves as a recommendation only. No score guarantees that your Spot request will be fully or partially fulfilled.</p>
    /// </note>
    #[doc(hidden)]
    pub spot_placement_scores: std::option::Option<std::vec::Vec<crate::model::SpotPlacementScore>>,
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSpotPlacementScoresOutput {
    /// <p>The Spot placement score for the top 10 Regions or Availability Zones, scored on a scale from 1 to 10. Each score  reflects how likely it is that each Region or Availability Zone will succeed at fulfilling the specified target capacity  <i>at the time of the Spot placement score request</i>. A score of <code>10</code> means that your Spot capacity request is highly likely to succeed in that Region or Availability Zone. </p>
    /// <p>If you request a Spot placement score for Regions, a high score assumes that your fleet request will be configured to use all Availability Zones and the <code>capacity-optimized</code> allocation strategy. If you request a Spot placement score for Availability Zones, a high score assumes that your fleet request will be configured to use a single Availability Zone and the <code>capacity-optimized</code> allocation strategy.</p>
    /// <p>Different  Regions or Availability Zones might return the same score.</p> <note>
    /// <p>The Spot placement score serves as a recommendation only. No score guarantees that your Spot request will be fully or partially fulfilled.</p>
    /// </note>
    pub fn spot_placement_scores(
        &self,
    ) -> std::option::Option<&[crate::model::SpotPlacementScore]> {
        self.spot_placement_scores.as_deref()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSpotPlacementScoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSpotPlacementScoresOutput`](crate::output::GetSpotPlacementScoresOutput).
pub mod get_spot_placement_scores_output {

    /// A builder for [`GetSpotPlacementScoresOutput`](crate::output::GetSpotPlacementScoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_placement_scores:
            std::option::Option<std::vec::Vec<crate::model::SpotPlacementScore>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `spot_placement_scores`.
        ///
        /// To override the contents of this collection use [`set_spot_placement_scores`](Self::set_spot_placement_scores).
        ///
        /// <p>The Spot placement score for the top 10 Regions or Availability Zones, scored on a scale from 1 to 10. Each score  reflects how likely it is that each Region or Availability Zone will succeed at fulfilling the specified target capacity  <i>at the time of the Spot placement score request</i>. A score of <code>10</code> means that your Spot capacity request is highly likely to succeed in that Region or Availability Zone. </p>
        /// <p>If you request a Spot placement score for Regions, a high score assumes that your fleet request will be configured to use all Availability Zones and the <code>capacity-optimized</code> allocation strategy. If you request a Spot placement score for Availability Zones, a high score assumes that your fleet request will be configured to use a single Availability Zone and the <code>capacity-optimized</code> allocation strategy.</p>
        /// <p>Different  Regions or Availability Zones might return the same score.</p> <note>
        /// <p>The Spot placement score serves as a recommendation only. No score guarantees that your Spot request will be fully or partially fulfilled.</p>
        /// </note>
        pub fn spot_placement_scores(mut self, input: crate::model::SpotPlacementScore) -> Self {
            let mut v = self.spot_placement_scores.unwrap_or_default();
            v.push(input);
            self.spot_placement_scores = Some(v);
            self
        }
        /// <p>The Spot placement score for the top 10 Regions or Availability Zones, scored on a scale from 1 to 10. Each score  reflects how likely it is that each Region or Availability Zone will succeed at fulfilling the specified target capacity  <i>at the time of the Spot placement score request</i>. A score of <code>10</code> means that your Spot capacity request is highly likely to succeed in that Region or Availability Zone. </p>
        /// <p>If you request a Spot placement score for Regions, a high score assumes that your fleet request will be configured to use all Availability Zones and the <code>capacity-optimized</code> allocation strategy. If you request a Spot placement score for Availability Zones, a high score assumes that your fleet request will be configured to use a single Availability Zone and the <code>capacity-optimized</code> allocation strategy.</p>
        /// <p>Different  Regions or Availability Zones might return the same score.</p> <note>
        /// <p>The Spot placement score serves as a recommendation only. No score guarantees that your Spot request will be fully or partially fulfilled.</p>
        /// </note>
        pub fn set_spot_placement_scores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SpotPlacementScore>>,
        ) -> Self {
            self.spot_placement_scores = input;
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSpotPlacementScoresOutput`](crate::output::GetSpotPlacementScoresOutput).
        pub fn build(self) -> crate::output::GetSpotPlacementScoresOutput {
            crate::output::GetSpotPlacementScoresOutput {
                spot_placement_scores: self.spot_placement_scores,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSpotPlacementScoresOutput {
    /// Creates a new builder-style object to manufacture [`GetSpotPlacementScoresOutput`](crate::output::GetSpotPlacementScoresOutput).
    pub fn builder() -> crate::output::get_spot_placement_scores_output::Builder {
        crate::output::get_spot_placement_scores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSerialConsoleAccessStatusOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    #[doc(hidden)]
    pub serial_console_access_enabled: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetSerialConsoleAccessStatusOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn serial_console_access_enabled(&self) -> std::option::Option<bool> {
        self.serial_console_access_enabled
    }
}
impl aws_http::request_id::RequestId for GetSerialConsoleAccessStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput).
pub mod get_serial_console_access_status_output {

    /// A builder for [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) serial_console_access_enabled: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
        pub fn serial_console_access_enabled(mut self, input: bool) -> Self {
            self.serial_console_access_enabled = Some(input);
            self
        }
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
        pub fn set_serial_console_access_enabled(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.serial_console_access_enabled = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput).
        pub fn build(self) -> crate::output::GetSerialConsoleAccessStatusOutput {
            crate::output::GetSerialConsoleAccessStatusOutput {
                serial_console_access_enabled: self.serial_console_access_enabled,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSerialConsoleAccessStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput).
    pub fn builder() -> crate::output::get_serial_console_access_status_output::Builder {
        crate::output::get_serial_console_access_status_output::Builder::default()
    }
}

/// <p>Contains the output of GetReservedInstancesExchangeQuote.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetReservedInstancesExchangeQuoteOutput {
    /// <p>The currency of the transaction.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
    #[doc(hidden)]
    pub is_valid_exchange: std::option::Option<bool>,
    /// <p>The new end date of the reservation term.</p>
    #[doc(hidden)]
    pub output_reserved_instances_will_expire_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The total true upfront charge for the exchange.</p>
    #[doc(hidden)]
    pub payment_due: std::option::Option<std::string::String>,
    /// <p>The cost associated with the Reserved Instance.</p>
    #[doc(hidden)]
    pub reserved_instance_value_rollup: std::option::Option<crate::model::ReservationValue>,
    /// <p>The configuration of your Convertible Reserved Instances.</p>
    #[doc(hidden)]
    pub reserved_instance_value_set:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstanceReservationValue>>,
    /// <p>The cost associated with the Reserved Instance.</p>
    #[doc(hidden)]
    pub target_configuration_value_rollup: std::option::Option<crate::model::ReservationValue>,
    /// <p>The values of the target Convertible Reserved Instances.</p>
    #[doc(hidden)]
    pub target_configuration_value_set:
        std::option::Option<std::vec::Vec<crate::model::TargetReservationValue>>,
    /// <p>Describes the reason why the exchange cannot be completed.</p>
    #[doc(hidden)]
    pub validation_failure_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetReservedInstancesExchangeQuoteOutput {
    /// <p>The currency of the transaction.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
    pub fn is_valid_exchange(&self) -> std::option::Option<bool> {
        self.is_valid_exchange
    }
    /// <p>The new end date of the reservation term.</p>
    pub fn output_reserved_instances_will_expire_at(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.output_reserved_instances_will_expire_at.as_ref()
    }
    /// <p>The total true upfront charge for the exchange.</p>
    pub fn payment_due(&self) -> std::option::Option<&str> {
        self.payment_due.as_deref()
    }
    /// <p>The cost associated with the Reserved Instance.</p>
    pub fn reserved_instance_value_rollup(
        &self,
    ) -> std::option::Option<&crate::model::ReservationValue> {
        self.reserved_instance_value_rollup.as_ref()
    }
    /// <p>The configuration of your Convertible Reserved Instances.</p>
    pub fn reserved_instance_value_set(
        &self,
    ) -> std::option::Option<&[crate::model::ReservedInstanceReservationValue]> {
        self.reserved_instance_value_set.as_deref()
    }
    /// <p>The cost associated with the Reserved Instance.</p>
    pub fn target_configuration_value_rollup(
        &self,
    ) -> std::option::Option<&crate::model::ReservationValue> {
        self.target_configuration_value_rollup.as_ref()
    }
    /// <p>The values of the target Convertible Reserved Instances.</p>
    pub fn target_configuration_value_set(
        &self,
    ) -> std::option::Option<&[crate::model::TargetReservationValue]> {
        self.target_configuration_value_set.as_deref()
    }
    /// <p>Describes the reason why the exchange cannot be completed.</p>
    pub fn validation_failure_reason(&self) -> std::option::Option<&str> {
        self.validation_failure_reason.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetReservedInstancesExchangeQuoteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput).
pub mod get_reserved_instances_exchange_quote_output {

    /// A builder for [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) currency_code: std::option::Option<std::string::String>,
        pub(crate) is_valid_exchange: std::option::Option<bool>,
        pub(crate) output_reserved_instances_will_expire_at:
            std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) payment_due: std::option::Option<std::string::String>,
        pub(crate) reserved_instance_value_rollup:
            std::option::Option<crate::model::ReservationValue>,
        pub(crate) reserved_instance_value_set:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstanceReservationValue>>,
        pub(crate) target_configuration_value_rollup:
            std::option::Option<crate::model::ReservationValue>,
        pub(crate) target_configuration_value_set:
            std::option::Option<std::vec::Vec<crate::model::TargetReservationValue>>,
        pub(crate) validation_failure_reason: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The currency of the transaction.</p>
        pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.currency_code = Some(input.into());
            self
        }
        /// <p>The currency of the transaction.</p>
        pub fn set_currency_code(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.currency_code = input;
            self
        }
        /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
        pub fn is_valid_exchange(mut self, input: bool) -> Self {
            self.is_valid_exchange = Some(input);
            self
        }
        /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
        pub fn set_is_valid_exchange(mut self, input: std::option::Option<bool>) -> Self {
            self.is_valid_exchange = input;
            self
        }
        /// <p>The new end date of the reservation term.</p>
        pub fn output_reserved_instances_will_expire_at(
            mut self,
            input: aws_smithy_types::DateTime,
        ) -> Self {
            self.output_reserved_instances_will_expire_at = Some(input);
            self
        }
        /// <p>The new end date of the reservation term.</p>
        pub fn set_output_reserved_instances_will_expire_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.output_reserved_instances_will_expire_at = input;
            self
        }
        /// <p>The total true upfront charge for the exchange.</p>
        pub fn payment_due(mut self, input: impl Into<std::string::String>) -> Self {
            self.payment_due = Some(input.into());
            self
        }
        /// <p>The total true upfront charge for the exchange.</p>
        pub fn set_payment_due(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.payment_due = input;
            self
        }
        /// <p>The cost associated with the Reserved Instance.</p>
        pub fn reserved_instance_value_rollup(
            mut self,
            input: crate::model::ReservationValue,
        ) -> Self {
            self.reserved_instance_value_rollup = Some(input);
            self
        }
        /// <p>The cost associated with the Reserved Instance.</p>
        pub fn set_reserved_instance_value_rollup(
            mut self,
            input: std::option::Option<crate::model::ReservationValue>,
        ) -> Self {
            self.reserved_instance_value_rollup = input;
            self
        }
        /// Appends an item to `reserved_instance_value_set`.
        ///
        /// To override the contents of this collection use [`set_reserved_instance_value_set`](Self::set_reserved_instance_value_set).
        ///
        /// <p>The configuration of your Convertible Reserved Instances.</p>
        pub fn reserved_instance_value_set(
            mut self,
            input: crate::model::ReservedInstanceReservationValue,
        ) -> Self {
            let mut v = self.reserved_instance_value_set.unwrap_or_default();
            v.push(input);
            self.reserved_instance_value_set = Some(v);
            self
        }
        /// <p>The configuration of your Convertible Reserved Instances.</p>
        pub fn set_reserved_instance_value_set(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ReservedInstanceReservationValue>,
            >,
        ) -> Self {
            self.reserved_instance_value_set = input;
            self
        }
        /// <p>The cost associated with the Reserved Instance.</p>
        pub fn target_configuration_value_rollup(
            mut self,
            input: crate::model::ReservationValue,
        ) -> Self {
            self.target_configuration_value_rollup = Some(input);
            self
        }
        /// <p>The cost associated with the Reserved Instance.</p>
        pub fn set_target_configuration_value_rollup(
            mut self,
            input: std::option::Option<crate::model::ReservationValue>,
        ) -> Self {
            self.target_configuration_value_rollup = input;
            self
        }
        /// Appends an item to `target_configuration_value_set`.
        ///
        /// To override the contents of this collection use [`set_target_configuration_value_set`](Self::set_target_configuration_value_set).
        ///
        /// <p>The values of the target Convertible Reserved Instances.</p>
        pub fn target_configuration_value_set(
            mut self,
            input: crate::model::TargetReservationValue,
        ) -> Self {
            let mut v = self.target_configuration_value_set.unwrap_or_default();
            v.push(input);
            self.target_configuration_value_set = Some(v);
            self
        }
        /// <p>The values of the target Convertible Reserved Instances.</p>
        pub fn set_target_configuration_value_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TargetReservationValue>>,
        ) -> Self {
            self.target_configuration_value_set = input;
            self
        }
        /// <p>Describes the reason why the exchange cannot be completed.</p>
        pub fn validation_failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.validation_failure_reason = Some(input.into());
            self
        }
        /// <p>Describes the reason why the exchange cannot be completed.</p>
        pub fn set_validation_failure_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.validation_failure_reason = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput).
        pub fn build(self) -> crate::output::GetReservedInstancesExchangeQuoteOutput {
            crate::output::GetReservedInstancesExchangeQuoteOutput {
                currency_code: self.currency_code,
                is_valid_exchange: self.is_valid_exchange,
                output_reserved_instances_will_expire_at: self
                    .output_reserved_instances_will_expire_at,
                payment_due: self.payment_due,
                reserved_instance_value_rollup: self.reserved_instance_value_rollup,
                reserved_instance_value_set: self.reserved_instance_value_set,
                target_configuration_value_rollup: self.target_configuration_value_rollup,
                target_configuration_value_set: self.target_configuration_value_set,
                validation_failure_reason: self.validation_failure_reason,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetReservedInstancesExchangeQuoteOutput {
    /// Creates a new builder-style object to manufacture [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput).
    pub fn builder() -> crate::output::get_reserved_instances_exchange_quote_output::Builder {
        crate::output::get_reserved_instances_exchange_quote_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPasswordDataOutput {
    /// <p>The ID of the Windows instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    #[doc(hidden)]
    pub password_data: std::option::Option<std::string::String>,
    /// <p>The time the data was last updated.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPasswordDataOutput {
    /// <p>The ID of the Windows instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    pub fn password_data(&self) -> std::option::Option<&str> {
        self.password_data.as_deref()
    }
    /// <p>The time the data was last updated.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPasswordDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput).
pub mod get_password_data_output {

    /// A builder for [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) password_data: std::option::Option<std::string::String>,
        pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Windows instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the Windows instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
        pub fn password_data(mut self, input: impl Into<std::string::String>) -> Self {
            self.password_data = Some(input.into());
            self
        }
        /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
        pub fn set_password_data(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.password_data = input;
            self
        }
        /// <p>The time the data was last updated.</p>
        pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.timestamp = Some(input);
            self
        }
        /// <p>The time the data was last updated.</p>
        pub fn set_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.timestamp = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput).
        pub fn build(self) -> crate::output::GetPasswordDataOutput {
            crate::output::GetPasswordDataOutput {
                instance_id: self.instance_id,
                password_data: self.password_data,
                timestamp: self.timestamp,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetPasswordDataOutput {
    /// Creates a new builder-style object to manufacture [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput).
    pub fn builder() -> crate::output::get_password_data_output::Builder {
        crate::output::get_password_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetNetworkInsightsAccessScopeContentOutput {
    /// <p>The Network Access Scope content.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_content:
        std::option::Option<crate::model::NetworkInsightsAccessScopeContent>,
    _request_id: Option<String>,
}
impl GetNetworkInsightsAccessScopeContentOutput {
    /// <p>The Network Access Scope content.</p>
    pub fn network_insights_access_scope_content(
        &self,
    ) -> std::option::Option<&crate::model::NetworkInsightsAccessScopeContent> {
        self.network_insights_access_scope_content.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetNetworkInsightsAccessScopeContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetNetworkInsightsAccessScopeContentOutput`](crate::output::GetNetworkInsightsAccessScopeContentOutput).
pub mod get_network_insights_access_scope_content_output {

    /// A builder for [`GetNetworkInsightsAccessScopeContentOutput`](crate::output::GetNetworkInsightsAccessScopeContentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope_content:
            std::option::Option<crate::model::NetworkInsightsAccessScopeContent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Network Access Scope content.</p>
        pub fn network_insights_access_scope_content(
            mut self,
            input: crate::model::NetworkInsightsAccessScopeContent,
        ) -> Self {
            self.network_insights_access_scope_content = Some(input);
            self
        }
        /// <p>The Network Access Scope content.</p>
        pub fn set_network_insights_access_scope_content(
            mut self,
            input: std::option::Option<crate::model::NetworkInsightsAccessScopeContent>,
        ) -> Self {
            self.network_insights_access_scope_content = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkInsightsAccessScopeContentOutput`](crate::output::GetNetworkInsightsAccessScopeContentOutput).
        pub fn build(self) -> crate::output::GetNetworkInsightsAccessScopeContentOutput {
            crate::output::GetNetworkInsightsAccessScopeContentOutput {
                network_insights_access_scope_content: self.network_insights_access_scope_content,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetNetworkInsightsAccessScopeContentOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkInsightsAccessScopeContentOutput`](crate::output::GetNetworkInsightsAccessScopeContentOutput).
    pub fn builder() -> crate::output::get_network_insights_access_scope_content_output::Builder {
        crate::output::get_network_insights_access_scope_content_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
    /// <p>The ID of the Network Access Scope analysis.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_analysis_id: std::option::Option<std::string::String>,
    /// <p>The status of Network Access Scope Analysis.</p>
    #[doc(hidden)]
    pub analysis_status: std::option::Option<crate::model::AnalysisStatus>,
    /// <p>The findings associated with Network Access Scope Analysis.</p>
    #[doc(hidden)]
    pub analysis_findings:
        std::option::Option<std::vec::Vec<crate::model::AccessScopeAnalysisFinding>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub fn network_insights_access_scope_analysis_id(&self) -> std::option::Option<&str> {
        self.network_insights_access_scope_analysis_id.as_deref()
    }
    /// <p>The status of Network Access Scope Analysis.</p>
    pub fn analysis_status(&self) -> std::option::Option<&crate::model::AnalysisStatus> {
        self.analysis_status.as_ref()
    }
    /// <p>The findings associated with Network Access Scope Analysis.</p>
    pub fn analysis_findings(
        &self,
    ) -> std::option::Option<&[crate::model::AccessScopeAnalysisFinding]> {
        self.analysis_findings.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetNetworkInsightsAccessScopeAnalysisFindingsOutput`](crate::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput).
pub mod get_network_insights_access_scope_analysis_findings_output {

    /// A builder for [`GetNetworkInsightsAccessScopeAnalysisFindingsOutput`](crate::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope_analysis_id:
            std::option::Option<std::string::String>,
        pub(crate) analysis_status: std::option::Option<crate::model::AnalysisStatus>,
        pub(crate) analysis_findings:
            std::option::Option<std::vec::Vec<crate::model::AccessScopeAnalysisFinding>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Network Access Scope analysis.</p>
        pub fn network_insights_access_scope_analysis_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.network_insights_access_scope_analysis_id = Some(input.into());
            self
        }
        /// <p>The ID of the Network Access Scope analysis.</p>
        pub fn set_network_insights_access_scope_analysis_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_access_scope_analysis_id = input;
            self
        }
        /// <p>The status of Network Access Scope Analysis.</p>
        pub fn analysis_status(mut self, input: crate::model::AnalysisStatus) -> Self {
            self.analysis_status = Some(input);
            self
        }
        /// <p>The status of Network Access Scope Analysis.</p>
        pub fn set_analysis_status(
            mut self,
            input: std::option::Option<crate::model::AnalysisStatus>,
        ) -> Self {
            self.analysis_status = input;
            self
        }
        /// Appends an item to `analysis_findings`.
        ///
        /// To override the contents of this collection use [`set_analysis_findings`](Self::set_analysis_findings).
        ///
        /// <p>The findings associated with Network Access Scope Analysis.</p>
        pub fn analysis_findings(
            mut self,
            input: crate::model::AccessScopeAnalysisFinding,
        ) -> Self {
            let mut v = self.analysis_findings.unwrap_or_default();
            v.push(input);
            self.analysis_findings = Some(v);
            self
        }
        /// <p>The findings associated with Network Access Scope Analysis.</p>
        pub fn set_analysis_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccessScopeAnalysisFinding>>,
        ) -> Self {
            self.analysis_findings = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkInsightsAccessScopeAnalysisFindingsOutput`](crate::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput).
        pub fn build(self) -> crate::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
            crate::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
                network_insights_access_scope_analysis_id: self
                    .network_insights_access_scope_analysis_id,
                analysis_status: self.analysis_status,
                analysis_findings: self.analysis_findings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkInsightsAccessScopeAnalysisFindingsOutput`](crate::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput).
    pub fn builder(
    ) -> crate::output::get_network_insights_access_scope_analysis_findings_output::Builder {
        crate::output::get_network_insights_access_scope_analysis_findings_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetManagedPrefixListEntriesOutput {
    /// <p>Information about the prefix list entries.</p>
    #[doc(hidden)]
    pub entries: std::option::Option<std::vec::Vec<crate::model::PrefixListEntry>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetManagedPrefixListEntriesOutput {
    /// <p>Information about the prefix list entries.</p>
    pub fn entries(&self) -> std::option::Option<&[crate::model::PrefixListEntry]> {
        self.entries.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetManagedPrefixListEntriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput).
pub mod get_managed_prefix_list_entries_output {

    /// A builder for [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entries: std::option::Option<std::vec::Vec<crate::model::PrefixListEntry>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `entries`.
        ///
        /// To override the contents of this collection use [`set_entries`](Self::set_entries).
        ///
        /// <p>Information about the prefix list entries.</p>
        pub fn entries(mut self, input: crate::model::PrefixListEntry) -> Self {
            let mut v = self.entries.unwrap_or_default();
            v.push(input);
            self.entries = Some(v);
            self
        }
        /// <p>Information about the prefix list entries.</p>
        pub fn set_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PrefixListEntry>>,
        ) -> Self {
            self.entries = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput).
        pub fn build(self) -> crate::output::GetManagedPrefixListEntriesOutput {
            crate::output::GetManagedPrefixListEntriesOutput {
                entries: self.entries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetManagedPrefixListEntriesOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput).
    pub fn builder() -> crate::output::get_managed_prefix_list_entries_output::Builder {
        crate::output::get_managed_prefix_list_entries_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetManagedPrefixListAssociationsOutput {
    /// <p>Information about the associations.</p>
    #[doc(hidden)]
    pub prefix_list_associations:
        std::option::Option<std::vec::Vec<crate::model::PrefixListAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetManagedPrefixListAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub fn prefix_list_associations(
        &self,
    ) -> std::option::Option<&[crate::model::PrefixListAssociation]> {
        self.prefix_list_associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetManagedPrefixListAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput).
pub mod get_managed_prefix_list_associations_output {

    /// A builder for [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list_associations:
            std::option::Option<std::vec::Vec<crate::model::PrefixListAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `prefix_list_associations`.
        ///
        /// To override the contents of this collection use [`set_prefix_list_associations`](Self::set_prefix_list_associations).
        ///
        /// <p>Information about the associations.</p>
        pub fn prefix_list_associations(
            mut self,
            input: crate::model::PrefixListAssociation,
        ) -> Self {
            let mut v = self.prefix_list_associations.unwrap_or_default();
            v.push(input);
            self.prefix_list_associations = Some(v);
            self
        }
        /// <p>Information about the associations.</p>
        pub fn set_prefix_list_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PrefixListAssociation>>,
        ) -> Self {
            self.prefix_list_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput).
        pub fn build(self) -> crate::output::GetManagedPrefixListAssociationsOutput {
            crate::output::GetManagedPrefixListAssociationsOutput {
                prefix_list_associations: self.prefix_list_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetManagedPrefixListAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput).
    pub fn builder() -> crate::output::get_managed_prefix_list_associations_output::Builder {
        crate::output::get_managed_prefix_list_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLaunchTemplateDataOutput {
    /// <p>The instance data.</p>
    #[doc(hidden)]
    pub launch_template_data: std::option::Option<crate::model::ResponseLaunchTemplateData>,
    _request_id: Option<String>,
}
impl GetLaunchTemplateDataOutput {
    /// <p>The instance data.</p>
    pub fn launch_template_data(
        &self,
    ) -> std::option::Option<&crate::model::ResponseLaunchTemplateData> {
        self.launch_template_data.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLaunchTemplateDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput).
pub mod get_launch_template_data_output {

    /// A builder for [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template_data:
            std::option::Option<crate::model::ResponseLaunchTemplateData>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The instance data.</p>
        pub fn launch_template_data(
            mut self,
            input: crate::model::ResponseLaunchTemplateData,
        ) -> Self {
            self.launch_template_data = Some(input);
            self
        }
        /// <p>The instance data.</p>
        pub fn set_launch_template_data(
            mut self,
            input: std::option::Option<crate::model::ResponseLaunchTemplateData>,
        ) -> Self {
            self.launch_template_data = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput).
        pub fn build(self) -> crate::output::GetLaunchTemplateDataOutput {
            crate::output::GetLaunchTemplateDataOutput {
                launch_template_data: self.launch_template_data,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetLaunchTemplateDataOutput {
    /// Creates a new builder-style object to manufacture [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput).
    pub fn builder() -> crate::output::get_launch_template_data_output::Builder {
        crate::output::get_launch_template_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIpamResourceCidrsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The resource CIDRs.</p>
    #[doc(hidden)]
    pub ipam_resource_cidrs: std::option::Option<std::vec::Vec<crate::model::IpamResourceCidr>>,
    _request_id: Option<String>,
}
impl GetIpamResourceCidrsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The resource CIDRs.</p>
    pub fn ipam_resource_cidrs(&self) -> std::option::Option<&[crate::model::IpamResourceCidr]> {
        self.ipam_resource_cidrs.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetIpamResourceCidrsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetIpamResourceCidrsOutput`](crate::output::GetIpamResourceCidrsOutput).
pub mod get_ipam_resource_cidrs_output {

    /// A builder for [`GetIpamResourceCidrsOutput`](crate::output::GetIpamResourceCidrsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) ipam_resource_cidrs:
            std::option::Option<std::vec::Vec<crate::model::IpamResourceCidr>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `ipam_resource_cidrs`.
        ///
        /// To override the contents of this collection use [`set_ipam_resource_cidrs`](Self::set_ipam_resource_cidrs).
        ///
        /// <p>The resource CIDRs.</p>
        pub fn ipam_resource_cidrs(mut self, input: crate::model::IpamResourceCidr) -> Self {
            let mut v = self.ipam_resource_cidrs.unwrap_or_default();
            v.push(input);
            self.ipam_resource_cidrs = Some(v);
            self
        }
        /// <p>The resource CIDRs.</p>
        pub fn set_ipam_resource_cidrs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpamResourceCidr>>,
        ) -> Self {
            self.ipam_resource_cidrs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetIpamResourceCidrsOutput`](crate::output::GetIpamResourceCidrsOutput).
        pub fn build(self) -> crate::output::GetIpamResourceCidrsOutput {
            crate::output::GetIpamResourceCidrsOutput {
                next_token: self.next_token,
                ipam_resource_cidrs: self.ipam_resource_cidrs,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetIpamResourceCidrsOutput {
    /// Creates a new builder-style object to manufacture [`GetIpamResourceCidrsOutput`](crate::output::GetIpamResourceCidrsOutput).
    pub fn builder() -> crate::output::get_ipam_resource_cidrs_output::Builder {
        crate::output::get_ipam_resource_cidrs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIpamPoolCidrsOutput {
    /// <p>Information about the CIDRs provisioned to an IPAM pool.</p>
    #[doc(hidden)]
    pub ipam_pool_cidrs: std::option::Option<std::vec::Vec<crate::model::IpamPoolCidr>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetIpamPoolCidrsOutput {
    /// <p>Information about the CIDRs provisioned to an IPAM pool.</p>
    pub fn ipam_pool_cidrs(&self) -> std::option::Option<&[crate::model::IpamPoolCidr]> {
        self.ipam_pool_cidrs.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetIpamPoolCidrsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetIpamPoolCidrsOutput`](crate::output::GetIpamPoolCidrsOutput).
pub mod get_ipam_pool_cidrs_output {

    /// A builder for [`GetIpamPoolCidrsOutput`](crate::output::GetIpamPoolCidrsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool_cidrs: std::option::Option<std::vec::Vec<crate::model::IpamPoolCidr>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `ipam_pool_cidrs`.
        ///
        /// To override the contents of this collection use [`set_ipam_pool_cidrs`](Self::set_ipam_pool_cidrs).
        ///
        /// <p>Information about the CIDRs provisioned to an IPAM pool.</p>
        pub fn ipam_pool_cidrs(mut self, input: crate::model::IpamPoolCidr) -> Self {
            let mut v = self.ipam_pool_cidrs.unwrap_or_default();
            v.push(input);
            self.ipam_pool_cidrs = Some(v);
            self
        }
        /// <p>Information about the CIDRs provisioned to an IPAM pool.</p>
        pub fn set_ipam_pool_cidrs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpamPoolCidr>>,
        ) -> Self {
            self.ipam_pool_cidrs = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetIpamPoolCidrsOutput`](crate::output::GetIpamPoolCidrsOutput).
        pub fn build(self) -> crate::output::GetIpamPoolCidrsOutput {
            crate::output::GetIpamPoolCidrsOutput {
                ipam_pool_cidrs: self.ipam_pool_cidrs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetIpamPoolCidrsOutput {
    /// Creates a new builder-style object to manufacture [`GetIpamPoolCidrsOutput`](crate::output::GetIpamPoolCidrsOutput).
    pub fn builder() -> crate::output::get_ipam_pool_cidrs_output::Builder {
        crate::output::get_ipam_pool_cidrs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIpamPoolAllocationsOutput {
    /// <p>The IPAM pool allocations you want information on.</p>
    #[doc(hidden)]
    pub ipam_pool_allocations: std::option::Option<std::vec::Vec<crate::model::IpamPoolAllocation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetIpamPoolAllocationsOutput {
    /// <p>The IPAM pool allocations you want information on.</p>
    pub fn ipam_pool_allocations(
        &self,
    ) -> std::option::Option<&[crate::model::IpamPoolAllocation]> {
        self.ipam_pool_allocations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetIpamPoolAllocationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetIpamPoolAllocationsOutput`](crate::output::GetIpamPoolAllocationsOutput).
pub mod get_ipam_pool_allocations_output {

    /// A builder for [`GetIpamPoolAllocationsOutput`](crate::output::GetIpamPoolAllocationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool_allocations:
            std::option::Option<std::vec::Vec<crate::model::IpamPoolAllocation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `ipam_pool_allocations`.
        ///
        /// To override the contents of this collection use [`set_ipam_pool_allocations`](Self::set_ipam_pool_allocations).
        ///
        /// <p>The IPAM pool allocations you want information on.</p>
        pub fn ipam_pool_allocations(mut self, input: crate::model::IpamPoolAllocation) -> Self {
            let mut v = self.ipam_pool_allocations.unwrap_or_default();
            v.push(input);
            self.ipam_pool_allocations = Some(v);
            self
        }
        /// <p>The IPAM pool allocations you want information on.</p>
        pub fn set_ipam_pool_allocations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpamPoolAllocation>>,
        ) -> Self {
            self.ipam_pool_allocations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetIpamPoolAllocationsOutput`](crate::output::GetIpamPoolAllocationsOutput).
        pub fn build(self) -> crate::output::GetIpamPoolAllocationsOutput {
            crate::output::GetIpamPoolAllocationsOutput {
                ipam_pool_allocations: self.ipam_pool_allocations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetIpamPoolAllocationsOutput {
    /// Creates a new builder-style object to manufacture [`GetIpamPoolAllocationsOutput`](crate::output::GetIpamPoolAllocationsOutput).
    pub fn builder() -> crate::output::get_ipam_pool_allocations_output::Builder {
        crate::output::get_ipam_pool_allocations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIpamAddressHistoryOutput {
    /// <p>A historical record for a CIDR within an IPAM scope. If the CIDR is associated with an EC2 instance, you will see an object in the response for the instance and one for the network interface.</p>
    #[doc(hidden)]
    pub history_records: std::option::Option<std::vec::Vec<crate::model::IpamAddressHistoryRecord>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetIpamAddressHistoryOutput {
    /// <p>A historical record for a CIDR within an IPAM scope. If the CIDR is associated with an EC2 instance, you will see an object in the response for the instance and one for the network interface.</p>
    pub fn history_records(
        &self,
    ) -> std::option::Option<&[crate::model::IpamAddressHistoryRecord]> {
        self.history_records.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetIpamAddressHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetIpamAddressHistoryOutput`](crate::output::GetIpamAddressHistoryOutput).
pub mod get_ipam_address_history_output {

    /// A builder for [`GetIpamAddressHistoryOutput`](crate::output::GetIpamAddressHistoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) history_records:
            std::option::Option<std::vec::Vec<crate::model::IpamAddressHistoryRecord>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `history_records`.
        ///
        /// To override the contents of this collection use [`set_history_records`](Self::set_history_records).
        ///
        /// <p>A historical record for a CIDR within an IPAM scope. If the CIDR is associated with an EC2 instance, you will see an object in the response for the instance and one for the network interface.</p>
        pub fn history_records(mut self, input: crate::model::IpamAddressHistoryRecord) -> Self {
            let mut v = self.history_records.unwrap_or_default();
            v.push(input);
            self.history_records = Some(v);
            self
        }
        /// <p>A historical record for a CIDR within an IPAM scope. If the CIDR is associated with an EC2 instance, you will see an object in the response for the instance and one for the network interface.</p>
        pub fn set_history_records(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpamAddressHistoryRecord>>,
        ) -> Self {
            self.history_records = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetIpamAddressHistoryOutput`](crate::output::GetIpamAddressHistoryOutput).
        pub fn build(self) -> crate::output::GetIpamAddressHistoryOutput {
            crate::output::GetIpamAddressHistoryOutput {
                history_records: self.history_records,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetIpamAddressHistoryOutput {
    /// Creates a new builder-style object to manufacture [`GetIpamAddressHistoryOutput`](crate::output::GetIpamAddressHistoryOutput).
    pub fn builder() -> crate::output::get_ipam_address_history_output::Builder {
        crate::output::get_ipam_address_history_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInstanceUefiDataOutput {
    /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
    #[doc(hidden)]
    pub uefi_data: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetInstanceUefiDataOutput {
    /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
    pub fn uefi_data(&self) -> std::option::Option<&str> {
        self.uefi_data.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetInstanceUefiDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetInstanceUefiDataOutput`](crate::output::GetInstanceUefiDataOutput).
pub mod get_instance_uefi_data_output {

    /// A builder for [`GetInstanceUefiDataOutput`](crate::output::GetInstanceUefiDataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) uefi_data: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
        pub fn uefi_data(mut self, input: impl Into<std::string::String>) -> Self {
            self.uefi_data = Some(input.into());
            self
        }
        /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
        pub fn set_uefi_data(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.uefi_data = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetInstanceUefiDataOutput`](crate::output::GetInstanceUefiDataOutput).
        pub fn build(self) -> crate::output::GetInstanceUefiDataOutput {
            crate::output::GetInstanceUefiDataOutput {
                instance_id: self.instance_id,
                uefi_data: self.uefi_data,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetInstanceUefiDataOutput {
    /// Creates a new builder-style object to manufacture [`GetInstanceUefiDataOutput`](crate::output::GetInstanceUefiDataOutput).
    pub fn builder() -> crate::output::get_instance_uefi_data_output::Builder {
        crate::output::get_instance_uefi_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInstanceTypesFromInstanceRequirementsOutput {
    /// <p>The instance types with the specified instance attributes.</p>
    #[doc(hidden)]
    pub instance_types:
        std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfoFromInstanceRequirements>>,
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetInstanceTypesFromInstanceRequirementsOutput {
    /// <p>The instance types with the specified instance attributes.</p>
    pub fn instance_types(
        &self,
    ) -> std::option::Option<&[crate::model::InstanceTypeInfoFromInstanceRequirements]> {
        self.instance_types.as_deref()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetInstanceTypesFromInstanceRequirementsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetInstanceTypesFromInstanceRequirementsOutput`](crate::output::GetInstanceTypesFromInstanceRequirementsOutput).
pub mod get_instance_types_from_instance_requirements_output {

    /// A builder for [`GetInstanceTypesFromInstanceRequirementsOutput`](crate::output::GetInstanceTypesFromInstanceRequirementsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_types: std::option::Option<
            std::vec::Vec<crate::model::InstanceTypeInfoFromInstanceRequirements>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_types`.
        ///
        /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
        ///
        /// <p>The instance types with the specified instance attributes.</p>
        pub fn instance_types(
            mut self,
            input: crate::model::InstanceTypeInfoFromInstanceRequirements,
        ) -> Self {
            let mut v = self.instance_types.unwrap_or_default();
            v.push(input);
            self.instance_types = Some(v);
            self
        }
        /// <p>The instance types with the specified instance attributes.</p>
        pub fn set_instance_types(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::InstanceTypeInfoFromInstanceRequirements>,
            >,
        ) -> Self {
            self.instance_types = input;
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetInstanceTypesFromInstanceRequirementsOutput`](crate::output::GetInstanceTypesFromInstanceRequirementsOutput).
        pub fn build(self) -> crate::output::GetInstanceTypesFromInstanceRequirementsOutput {
            crate::output::GetInstanceTypesFromInstanceRequirementsOutput {
                instance_types: self.instance_types,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetInstanceTypesFromInstanceRequirementsOutput {
    /// Creates a new builder-style object to manufacture [`GetInstanceTypesFromInstanceRequirementsOutput`](crate::output::GetInstanceTypesFromInstanceRequirementsOutput).
    pub fn builder() -> crate::output::get_instance_types_from_instance_requirements_output::Builder
    {
        crate::output::get_instance_types_from_instance_requirements_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetHostReservationPurchasePreviewOutput {
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
    /// <p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.</p>
    #[doc(hidden)]
    pub purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
    /// <p>The potential total hourly price of the reservation per hour.</p>
    #[doc(hidden)]
    pub total_hourly_price: std::option::Option<std::string::String>,
    /// <p>The potential total upfront price. This is billed immediately.</p>
    #[doc(hidden)]
    pub total_upfront_price: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetHostReservationPurchasePreviewOutput {
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub fn currency_code(&self) -> std::option::Option<&crate::model::CurrencyCodeValues> {
        self.currency_code.as_ref()
    }
    /// <p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.</p>
    pub fn purchase(&self) -> std::option::Option<&[crate::model::Purchase]> {
        self.purchase.as_deref()
    }
    /// <p>The potential total hourly price of the reservation per hour.</p>
    pub fn total_hourly_price(&self) -> std::option::Option<&str> {
        self.total_hourly_price.as_deref()
    }
    /// <p>The potential total upfront price. This is billed immediately.</p>
    pub fn total_upfront_price(&self) -> std::option::Option<&str> {
        self.total_upfront_price.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetHostReservationPurchasePreviewOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput).
pub mod get_host_reservation_purchase_preview_output {

    /// A builder for [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
        pub(crate) purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        pub(crate) total_hourly_price: std::option::Option<std::string::String>,
        pub(crate) total_upfront_price: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
        pub fn currency_code(mut self, input: crate::model::CurrencyCodeValues) -> Self {
            self.currency_code = Some(input);
            self
        }
        /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
        pub fn set_currency_code(
            mut self,
            input: std::option::Option<crate::model::CurrencyCodeValues>,
        ) -> Self {
            self.currency_code = input;
            self
        }
        /// Appends an item to `purchase`.
        ///
        /// To override the contents of this collection use [`set_purchase`](Self::set_purchase).
        ///
        /// <p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.</p>
        pub fn purchase(mut self, input: crate::model::Purchase) -> Self {
            let mut v = self.purchase.unwrap_or_default();
            v.push(input);
            self.purchase = Some(v);
            self
        }
        /// <p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.</p>
        pub fn set_purchase(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        ) -> Self {
            self.purchase = input;
            self
        }
        /// <p>The potential total hourly price of the reservation per hour.</p>
        pub fn total_hourly_price(mut self, input: impl Into<std::string::String>) -> Self {
            self.total_hourly_price = Some(input.into());
            self
        }
        /// <p>The potential total hourly price of the reservation per hour.</p>
        pub fn set_total_hourly_price(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_hourly_price = input;
            self
        }
        /// <p>The potential total upfront price. This is billed immediately.</p>
        pub fn total_upfront_price(mut self, input: impl Into<std::string::String>) -> Self {
            self.total_upfront_price = Some(input.into());
            self
        }
        /// <p>The potential total upfront price. This is billed immediately.</p>
        pub fn set_total_upfront_price(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_upfront_price = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput).
        pub fn build(self) -> crate::output::GetHostReservationPurchasePreviewOutput {
            crate::output::GetHostReservationPurchasePreviewOutput {
                currency_code: self.currency_code,
                purchase: self.purchase,
                total_hourly_price: self.total_hourly_price,
                total_upfront_price: self.total_upfront_price,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetHostReservationPurchasePreviewOutput {
    /// Creates a new builder-style object to manufacture [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput).
    pub fn builder() -> crate::output::get_host_reservation_purchase_preview_output::Builder {
        crate::output::get_host_reservation_purchase_preview_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetGroupsForCapacityReservationOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the resource groups to which the Capacity Reservation has been added.</p>
    #[doc(hidden)]
    pub capacity_reservation_groups:
        std::option::Option<std::vec::Vec<crate::model::CapacityReservationGroup>>,
    _request_id: Option<String>,
}
impl GetGroupsForCapacityReservationOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the resource groups to which the Capacity Reservation has been added.</p>
    pub fn capacity_reservation_groups(
        &self,
    ) -> std::option::Option<&[crate::model::CapacityReservationGroup]> {
        self.capacity_reservation_groups.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetGroupsForCapacityReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput).
pub mod get_groups_for_capacity_reservation_output {

    /// A builder for [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) capacity_reservation_groups:
            std::option::Option<std::vec::Vec<crate::model::CapacityReservationGroup>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `capacity_reservation_groups`.
        ///
        /// To override the contents of this collection use [`set_capacity_reservation_groups`](Self::set_capacity_reservation_groups).
        ///
        /// <p>Information about the resource groups to which the Capacity Reservation has been added.</p>
        pub fn capacity_reservation_groups(
            mut self,
            input: crate::model::CapacityReservationGroup,
        ) -> Self {
            let mut v = self.capacity_reservation_groups.unwrap_or_default();
            v.push(input);
            self.capacity_reservation_groups = Some(v);
            self
        }
        /// <p>Information about the resource groups to which the Capacity Reservation has been added.</p>
        pub fn set_capacity_reservation_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CapacityReservationGroup>>,
        ) -> Self {
            self.capacity_reservation_groups = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput).
        pub fn build(self) -> crate::output::GetGroupsForCapacityReservationOutput {
            crate::output::GetGroupsForCapacityReservationOutput {
                next_token: self.next_token,
                capacity_reservation_groups: self.capacity_reservation_groups,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetGroupsForCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput).
    pub fn builder() -> crate::output::get_groups_for_capacity_reservation_output::Builder {
        crate::output::get_groups_for_capacity_reservation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFlowLogsIntegrationTemplateOutput {
    /// <p>The generated CloudFormation template.</p>
    #[doc(hidden)]
    pub result: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetFlowLogsIntegrationTemplateOutput {
    /// <p>The generated CloudFormation template.</p>
    pub fn result(&self) -> std::option::Option<&str> {
        self.result.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetFlowLogsIntegrationTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput).
pub mod get_flow_logs_integration_template_output {

    /// A builder for [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) result: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The generated CloudFormation template.</p>
        pub fn result(mut self, input: impl Into<std::string::String>) -> Self {
            self.result = Some(input.into());
            self
        }
        /// <p>The generated CloudFormation template.</p>
        pub fn set_result(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.result = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput).
        pub fn build(self) -> crate::output::GetFlowLogsIntegrationTemplateOutput {
            crate::output::GetFlowLogsIntegrationTemplateOutput {
                result: self.result,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFlowLogsIntegrationTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput).
    pub fn builder() -> crate::output::get_flow_logs_integration_template_output::Builder {
        crate::output::get_flow_logs_integration_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEbsEncryptionByDefaultOutput {
    /// <p>Indicates whether encryption by default is enabled.</p>
    #[doc(hidden)]
    pub ebs_encryption_by_default: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetEbsEncryptionByDefaultOutput {
    /// <p>Indicates whether encryption by default is enabled.</p>
    pub fn ebs_encryption_by_default(&self) -> std::option::Option<bool> {
        self.ebs_encryption_by_default
    }
}
impl aws_http::request_id::RequestId for GetEbsEncryptionByDefaultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput).
pub mod get_ebs_encryption_by_default_output {

    /// A builder for [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ebs_encryption_by_default: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether encryption by default is enabled.</p>
        pub fn ebs_encryption_by_default(mut self, input: bool) -> Self {
            self.ebs_encryption_by_default = Some(input);
            self
        }
        /// <p>Indicates whether encryption by default is enabled.</p>
        pub fn set_ebs_encryption_by_default(mut self, input: std::option::Option<bool>) -> Self {
            self.ebs_encryption_by_default = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput).
        pub fn build(self) -> crate::output::GetEbsEncryptionByDefaultOutput {
            crate::output::GetEbsEncryptionByDefaultOutput {
                ebs_encryption_by_default: self.ebs_encryption_by_default,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEbsEncryptionByDefaultOutput {
    /// Creates a new builder-style object to manufacture [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput).
    pub fn builder() -> crate::output::get_ebs_encryption_by_default_output::Builder {
        crate::output::get_ebs_encryption_by_default_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEbsDefaultKmsKeyIdOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput).
pub mod get_ebs_default_kms_key_id_output {

    /// A builder for [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the default KMS key for encryption by default.</p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput).
        pub fn build(self) -> crate::output::GetEbsDefaultKmsKeyIdOutput {
            crate::output::GetEbsDefaultKmsKeyIdOutput {
                kms_key_id: self.kms_key_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetEbsDefaultKmsKeyIdOutput {
    /// Creates a new builder-style object to manufacture [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput).
    pub fn builder() -> crate::output::get_ebs_default_kms_key_id_output::Builder {
        crate::output::get_ebs_default_kms_key_id_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDefaultCreditSpecificationOutput {
    /// <p>The default credit option for CPU usage of the instance family.</p>
    #[doc(hidden)]
    pub instance_family_credit_specification:
        std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
    _request_id: Option<String>,
}
impl GetDefaultCreditSpecificationOutput {
    /// <p>The default credit option for CPU usage of the instance family.</p>
    pub fn instance_family_credit_specification(
        &self,
    ) -> std::option::Option<&crate::model::InstanceFamilyCreditSpecification> {
        self.instance_family_credit_specification.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDefaultCreditSpecificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput).
pub mod get_default_credit_specification_output {

    /// A builder for [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_family_credit_specification:
            std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The default credit option for CPU usage of the instance family.</p>
        pub fn instance_family_credit_specification(
            mut self,
            input: crate::model::InstanceFamilyCreditSpecification,
        ) -> Self {
            self.instance_family_credit_specification = Some(input);
            self
        }
        /// <p>The default credit option for CPU usage of the instance family.</p>
        pub fn set_instance_family_credit_specification(
            mut self,
            input: std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
        ) -> Self {
            self.instance_family_credit_specification = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput).
        pub fn build(self) -> crate::output::GetDefaultCreditSpecificationOutput {
            crate::output::GetDefaultCreditSpecificationOutput {
                instance_family_credit_specification: self.instance_family_credit_specification,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetDefaultCreditSpecificationOutput {
    /// Creates a new builder-style object to manufacture [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput).
    pub fn builder() -> crate::output::get_default_credit_specification_output::Builder {
        crate::output::get_default_credit_specification_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConsoleScreenshotOutput {
    /// <p>The data that comprises the image.</p>
    #[doc(hidden)]
    pub image_data: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetConsoleScreenshotOutput {
    /// <p>The data that comprises the image.</p>
    pub fn image_data(&self) -> std::option::Option<&str> {
        self.image_data.as_deref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetConsoleScreenshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput).
pub mod get_console_screenshot_output {

    /// A builder for [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_data: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The data that comprises the image.</p>
        pub fn image_data(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_data = Some(input.into());
            self
        }
        /// <p>The data that comprises the image.</p>
        pub fn set_image_data(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_data = input;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput).
        pub fn build(self) -> crate::output::GetConsoleScreenshotOutput {
            crate::output::GetConsoleScreenshotOutput {
                image_data: self.image_data,
                instance_id: self.instance_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetConsoleScreenshotOutput {
    /// Creates a new builder-style object to manufacture [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput).
    pub fn builder() -> crate::output::get_console_screenshot_output::Builder {
        crate::output::get_console_screenshot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetConsoleOutputOutput {
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.</p>
    #[doc(hidden)]
    pub output: std::option::Option<std::string::String>,
    /// <p>The time at which the output was last updated.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetConsoleOutputOutput {
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.</p>
    pub fn output(&self) -> std::option::Option<&str> {
        self.output.as_deref()
    }
    /// <p>The time at which the output was last updated.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetConsoleOutputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput).
pub mod get_console_output_output {

    /// A builder for [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) output: std::option::Option<std::string::String>,
        pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.</p>
        pub fn output(mut self, input: impl Into<std::string::String>) -> Self {
            self.output = Some(input.into());
            self
        }
        /// <p>The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.</p>
        pub fn set_output(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.output = input;
            self
        }
        /// <p>The time at which the output was last updated.</p>
        pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.timestamp = Some(input);
            self
        }
        /// <p>The time at which the output was last updated.</p>
        pub fn set_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.timestamp = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput).
        pub fn build(self) -> crate::output::GetConsoleOutputOutput {
            crate::output::GetConsoleOutputOutput {
                instance_id: self.instance_id,
                output: self.output,
                timestamp: self.timestamp,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetConsoleOutputOutput {
    /// Creates a new builder-style object to manufacture [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput).
    pub fn builder() -> crate::output::get_console_output_output::Builder {
        crate::output::get_console_output_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCoipPoolUsageOutput {
    /// <p>The ID of the customer-owned address pool.</p>
    #[doc(hidden)]
    pub coip_pool_id: std::option::Option<std::string::String>,
    /// <p>Information about the address usage.</p>
    #[doc(hidden)]
    pub coip_address_usages: std::option::Option<std::vec::Vec<crate::model::CoipAddressUsage>>,
    /// <p>The ID of the local gateway route table.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetCoipPoolUsageOutput {
    /// <p>The ID of the customer-owned address pool.</p>
    pub fn coip_pool_id(&self) -> std::option::Option<&str> {
        self.coip_pool_id.as_deref()
    }
    /// <p>Information about the address usage.</p>
    pub fn coip_address_usages(&self) -> std::option::Option<&[crate::model::CoipAddressUsage]> {
        self.coip_address_usages.as_deref()
    }
    /// <p>The ID of the local gateway route table.</p>
    pub fn local_gateway_route_table_id(&self) -> std::option::Option<&str> {
        self.local_gateway_route_table_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCoipPoolUsageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput).
pub mod get_coip_pool_usage_output {

    /// A builder for [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_pool_id: std::option::Option<std::string::String>,
        pub(crate) coip_address_usages:
            std::option::Option<std::vec::Vec<crate::model::CoipAddressUsage>>,
        pub(crate) local_gateway_route_table_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the customer-owned address pool.</p>
        pub fn coip_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.coip_pool_id = Some(input.into());
            self
        }
        /// <p>The ID of the customer-owned address pool.</p>
        pub fn set_coip_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.coip_pool_id = input;
            self
        }
        /// Appends an item to `coip_address_usages`.
        ///
        /// To override the contents of this collection use [`set_coip_address_usages`](Self::set_coip_address_usages).
        ///
        /// <p>Information about the address usage.</p>
        pub fn coip_address_usages(mut self, input: crate::model::CoipAddressUsage) -> Self {
            let mut v = self.coip_address_usages.unwrap_or_default();
            v.push(input);
            self.coip_address_usages = Some(v);
            self
        }
        /// <p>Information about the address usage.</p>
        pub fn set_coip_address_usages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CoipAddressUsage>>,
        ) -> Self {
            self.coip_address_usages = input;
            self
        }
        /// <p>The ID of the local gateway route table.</p>
        pub fn local_gateway_route_table_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.local_gateway_route_table_id = Some(input.into());
            self
        }
        /// <p>The ID of the local gateway route table.</p>
        pub fn set_local_gateway_route_table_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.local_gateway_route_table_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput).
        pub fn build(self) -> crate::output::GetCoipPoolUsageOutput {
            crate::output::GetCoipPoolUsageOutput {
                coip_pool_id: self.coip_pool_id,
                coip_address_usages: self.coip_address_usages,
                local_gateway_route_table_id: self.local_gateway_route_table_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCoipPoolUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput).
    pub fn builder() -> crate::output::get_coip_pool_usage_output::Builder {
        crate::output::get_coip_pool_usage_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCapacityReservationUsageOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the Capacity Reservation.</p>
    #[doc(hidden)]
    pub capacity_reservation_id: std::option::Option<std::string::String>,
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    #[doc(hidden)]
    pub total_instance_count: std::option::Option<i32>,
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    #[doc(hidden)]
    pub available_instance_count: std::option::Option<i32>,
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li>
    /// <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li>
    /// <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li>
    /// <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li>
    /// <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::CapacityReservationState>,
    /// <p>Information about the Capacity Reservation usage.</p>
    #[doc(hidden)]
    pub instance_usages: std::option::Option<std::vec::Vec<crate::model::InstanceUsage>>,
    _request_id: Option<String>,
}
impl GetCapacityReservationUsageOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the Capacity Reservation.</p>
    pub fn capacity_reservation_id(&self) -> std::option::Option<&str> {
        self.capacity_reservation_id.as_deref()
    }
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub fn total_instance_count(&self) -> std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub fn available_instance_count(&self) -> std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li>
    /// <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li>
    /// <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li>
    /// <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li>
    /// <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&crate::model::CapacityReservationState> {
        self.state.as_ref()
    }
    /// <p>Information about the Capacity Reservation usage.</p>
    pub fn instance_usages(&self) -> std::option::Option<&[crate::model::InstanceUsage]> {
        self.instance_usages.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCapacityReservationUsageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput).
pub mod get_capacity_reservation_usage_output {

    /// A builder for [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) capacity_reservation_id: std::option::Option<std::string::String>,
        pub(crate) instance_type: std::option::Option<std::string::String>,
        pub(crate) total_instance_count: std::option::Option<i32>,
        pub(crate) available_instance_count: std::option::Option<i32>,
        pub(crate) state: std::option::Option<crate::model::CapacityReservationState>,
        pub(crate) instance_usages: std::option::Option<std::vec::Vec<crate::model::InstanceUsage>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The ID of the Capacity Reservation.</p>
        pub fn capacity_reservation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.capacity_reservation_id = Some(input.into());
            self
        }
        /// <p>The ID of the Capacity Reservation.</p>
        pub fn set_capacity_reservation_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.capacity_reservation_id = input;
            self
        }
        /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
        pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_type = Some(input.into());
            self
        }
        /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.instance_type = input;
            self
        }
        /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
        pub fn total_instance_count(mut self, input: i32) -> Self {
            self.total_instance_count = Some(input);
            self
        }
        /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
        pub fn set_total_instance_count(mut self, input: std::option::Option<i32>) -> Self {
            self.total_instance_count = input;
            self
        }
        /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
        pub fn available_instance_count(mut self, input: i32) -> Self {
            self.available_instance_count = Some(input);
            self
        }
        /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
        pub fn set_available_instance_count(mut self, input: std::option::Option<i32>) -> Self {
            self.available_instance_count = input;
            self
        }
        /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
        /// <ul>
        /// <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li>
        /// <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li>
        /// <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li>
        /// <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li>
        /// <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li>
        /// </ul>
        pub fn state(mut self, input: crate::model::CapacityReservationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
        /// <ul>
        /// <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li>
        /// <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li>
        /// <li> <p> <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.</p> </li>
        /// <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li>
        /// <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li>
        /// </ul>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::CapacityReservationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// Appends an item to `instance_usages`.
        ///
        /// To override the contents of this collection use [`set_instance_usages`](Self::set_instance_usages).
        ///
        /// <p>Information about the Capacity Reservation usage.</p>
        pub fn instance_usages(mut self, input: crate::model::InstanceUsage) -> Self {
            let mut v = self.instance_usages.unwrap_or_default();
            v.push(input);
            self.instance_usages = Some(v);
            self
        }
        /// <p>Information about the Capacity Reservation usage.</p>
        pub fn set_instance_usages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceUsage>>,
        ) -> Self {
            self.instance_usages = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput).
        pub fn build(self) -> crate::output::GetCapacityReservationUsageOutput {
            crate::output::GetCapacityReservationUsageOutput {
                next_token: self.next_token,
                capacity_reservation_id: self.capacity_reservation_id,
                instance_type: self.instance_type,
                total_instance_count: self.total_instance_count,
                available_instance_count: self.available_instance_count,
                state: self.state,
                instance_usages: self.instance_usages,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCapacityReservationUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput).
    pub fn builder() -> crate::output::get_capacity_reservation_usage_output::Builder {
        crate::output::get_capacity_reservation_usage_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAwsNetworkPerformanceDataOutput {
    /// <p>The list of data responses.</p>
    #[doc(hidden)]
    pub data_responses: std::option::Option<std::vec::Vec<crate::model::DataResponse>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetAwsNetworkPerformanceDataOutput {
    /// <p>The list of data responses.</p>
    pub fn data_responses(&self) -> std::option::Option<&[crate::model::DataResponse]> {
        self.data_responses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetAwsNetworkPerformanceDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAwsNetworkPerformanceDataOutput`](crate::output::GetAwsNetworkPerformanceDataOutput).
pub mod get_aws_network_performance_data_output {

    /// A builder for [`GetAwsNetworkPerformanceDataOutput`](crate::output::GetAwsNetworkPerformanceDataOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_responses: std::option::Option<std::vec::Vec<crate::model::DataResponse>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `data_responses`.
        ///
        /// To override the contents of this collection use [`set_data_responses`](Self::set_data_responses).
        ///
        /// <p>The list of data responses.</p>
        pub fn data_responses(mut self, input: crate::model::DataResponse) -> Self {
            let mut v = self.data_responses.unwrap_or_default();
            v.push(input);
            self.data_responses = Some(v);
            self
        }
        /// <p>The list of data responses.</p>
        pub fn set_data_responses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DataResponse>>,
        ) -> Self {
            self.data_responses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAwsNetworkPerformanceDataOutput`](crate::output::GetAwsNetworkPerformanceDataOutput).
        pub fn build(self) -> crate::output::GetAwsNetworkPerformanceDataOutput {
            crate::output::GetAwsNetworkPerformanceDataOutput {
                data_responses: self.data_responses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAwsNetworkPerformanceDataOutput {
    /// Creates a new builder-style object to manufacture [`GetAwsNetworkPerformanceDataOutput`](crate::output::GetAwsNetworkPerformanceDataOutput).
    pub fn builder() -> crate::output::get_aws_network_performance_data_output::Builder {
        crate::output::get_aws_network_performance_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAssociatedIpv6PoolCidrsOutput {
    /// <p>Information about the IPv6 CIDR block associations.</p>
    #[doc(hidden)]
    pub ipv6_cidr_associations:
        std::option::Option<std::vec::Vec<crate::model::Ipv6CidrAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetAssociatedIpv6PoolCidrsOutput {
    /// <p>Information about the IPv6 CIDR block associations.</p>
    pub fn ipv6_cidr_associations(
        &self,
    ) -> std::option::Option<&[crate::model::Ipv6CidrAssociation]> {
        self.ipv6_cidr_associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetAssociatedIpv6PoolCidrsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput).
pub mod get_associated_ipv6_pool_cidrs_output {

    /// A builder for [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_associations:
            std::option::Option<std::vec::Vec<crate::model::Ipv6CidrAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `ipv6_cidr_associations`.
        ///
        /// To override the contents of this collection use [`set_ipv6_cidr_associations`](Self::set_ipv6_cidr_associations).
        ///
        /// <p>Information about the IPv6 CIDR block associations.</p>
        pub fn ipv6_cidr_associations(mut self, input: crate::model::Ipv6CidrAssociation) -> Self {
            let mut v = self.ipv6_cidr_associations.unwrap_or_default();
            v.push(input);
            self.ipv6_cidr_associations = Some(v);
            self
        }
        /// <p>Information about the IPv6 CIDR block associations.</p>
        pub fn set_ipv6_cidr_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Ipv6CidrAssociation>>,
        ) -> Self {
            self.ipv6_cidr_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput).
        pub fn build(self) -> crate::output::GetAssociatedIpv6PoolCidrsOutput {
            crate::output::GetAssociatedIpv6PoolCidrsOutput {
                ipv6_cidr_associations: self.ipv6_cidr_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAssociatedIpv6PoolCidrsOutput {
    /// Creates a new builder-style object to manufacture [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput).
    pub fn builder() -> crate::output::get_associated_ipv6_pool_cidrs_output::Builder {
        crate::output::get_associated_ipv6_pool_cidrs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAssociatedEnclaveCertificateIamRolesOutput {
    /// <p>Information about the associated IAM roles.</p>
    #[doc(hidden)]
    pub associated_roles: std::option::Option<std::vec::Vec<crate::model::AssociatedRole>>,
    _request_id: Option<String>,
}
impl GetAssociatedEnclaveCertificateIamRolesOutput {
    /// <p>Information about the associated IAM roles.</p>
    pub fn associated_roles(&self) -> std::option::Option<&[crate::model::AssociatedRole]> {
        self.associated_roles.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetAssociatedEnclaveCertificateIamRolesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput).
pub mod get_associated_enclave_certificate_iam_roles_output {

    /// A builder for [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associated_roles:
            std::option::Option<std::vec::Vec<crate::model::AssociatedRole>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `associated_roles`.
        ///
        /// To override the contents of this collection use [`set_associated_roles`](Self::set_associated_roles).
        ///
        /// <p>Information about the associated IAM roles.</p>
        pub fn associated_roles(mut self, input: crate::model::AssociatedRole) -> Self {
            let mut v = self.associated_roles.unwrap_or_default();
            v.push(input);
            self.associated_roles = Some(v);
            self
        }
        /// <p>Information about the associated IAM roles.</p>
        pub fn set_associated_roles(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssociatedRole>>,
        ) -> Self {
            self.associated_roles = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput).
        pub fn build(self) -> crate::output::GetAssociatedEnclaveCertificateIamRolesOutput {
            crate::output::GetAssociatedEnclaveCertificateIamRolesOutput {
                associated_roles: self.associated_roles,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAssociatedEnclaveCertificateIamRolesOutput {
    /// Creates a new builder-style object to manufacture [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput).
    pub fn builder() -> crate::output::get_associated_enclave_certificate_iam_roles_output::Builder
    {
        crate::output::get_associated_enclave_certificate_iam_roles_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportTransitGatewayRoutesOutput {
    /// <p>The URL of the exported file in Amazon S3. For example, s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
    #[doc(hidden)]
    pub s3_location: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportTransitGatewayRoutesOutput {
    /// <p>The URL of the exported file in Amazon S3. For example, s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
    pub fn s3_location(&self) -> std::option::Option<&str> {
        self.s3_location.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportTransitGatewayRoutesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput).
pub mod export_transit_gateway_routes_output {

    /// A builder for [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_location: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The URL of the exported file in Amazon S3. For example, s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
        pub fn s3_location(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_location = Some(input.into());
            self
        }
        /// <p>The URL of the exported file in Amazon S3. For example, s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
        pub fn set_s3_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_location = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput).
        pub fn build(self) -> crate::output::ExportTransitGatewayRoutesOutput {
            crate::output::ExportTransitGatewayRoutesOutput {
                s3_location: self.s3_location,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportTransitGatewayRoutesOutput {
    /// Creates a new builder-style object to manufacture [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput).
    pub fn builder() -> crate::output::export_transit_gateway_routes_output::Builder {
        crate::output::export_transit_gateway_routes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportImageOutput {
    /// <p>A description of the image being exported.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The disk image format for the exported image.</p>
    #[doc(hidden)]
    pub disk_image_format: std::option::Option<crate::model::DiskImageFormat>,
    /// <p>The ID of the export image task.</p>
    #[doc(hidden)]
    pub export_image_task_id: std::option::Option<std::string::String>,
    /// <p>The ID of the image.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.</p>
    #[doc(hidden)]
    pub role_name: std::option::Option<std::string::String>,
    /// <p>The percent complete of the export image task.</p>
    #[doc(hidden)]
    pub progress: std::option::Option<std::string::String>,
    /// <p>Information about the destination Amazon S3 bucket.</p>
    #[doc(hidden)]
    pub s3_export_location: std::option::Option<crate::model::ExportTaskS3Location>,
    /// <p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>, <code>deleting</code>, and <code>deleted</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The status message for the export image task.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Any tags assigned to the export image task.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ExportImageOutput {
    /// <p>A description of the image being exported.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The disk image format for the exported image.</p>
    pub fn disk_image_format(&self) -> std::option::Option<&crate::model::DiskImageFormat> {
        self.disk_image_format.as_ref()
    }
    /// <p>The ID of the export image task.</p>
    pub fn export_image_task_id(&self) -> std::option::Option<&str> {
        self.export_image_task_id.as_deref()
    }
    /// <p>The ID of the image.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.</p>
    pub fn role_name(&self) -> std::option::Option<&str> {
        self.role_name.as_deref()
    }
    /// <p>The percent complete of the export image task.</p>
    pub fn progress(&self) -> std::option::Option<&str> {
        self.progress.as_deref()
    }
    /// <p>Information about the destination Amazon S3 bucket.</p>
    pub fn s3_export_location(&self) -> std::option::Option<&crate::model::ExportTaskS3Location> {
        self.s3_export_location.as_ref()
    }
    /// <p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>, <code>deleting</code>, and <code>deleted</code>.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The status message for the export image task.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Any tags assigned to the export image task.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportImageOutput`](crate::output::ExportImageOutput).
pub mod export_image_output {

    /// A builder for [`ExportImageOutput`](crate::output::ExportImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) disk_image_format: std::option::Option<crate::model::DiskImageFormat>,
        pub(crate) export_image_task_id: std::option::Option<std::string::String>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) role_name: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) s3_export_location: std::option::Option<crate::model::ExportTaskS3Location>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the image being exported.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the image being exported.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The disk image format for the exported image.</p>
        pub fn disk_image_format(mut self, input: crate::model::DiskImageFormat) -> Self {
            self.disk_image_format = Some(input);
            self
        }
        /// <p>The disk image format for the exported image.</p>
        pub fn set_disk_image_format(
            mut self,
            input: std::option::Option<crate::model::DiskImageFormat>,
        ) -> Self {
            self.disk_image_format = input;
            self
        }
        /// <p>The ID of the export image task.</p>
        pub fn export_image_task_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.export_image_task_id = Some(input.into());
            self
        }
        /// <p>The ID of the export image task.</p>
        pub fn set_export_image_task_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_image_task_id = input;
            self
        }
        /// <p>The ID of the image.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the image.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        /// <p>The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.</p>
        pub fn role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_name = Some(input.into());
            self
        }
        /// <p>The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.</p>
        pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_name = input;
            self
        }
        /// <p>The percent complete of the export image task.</p>
        pub fn progress(mut self, input: impl Into<std::string::String>) -> Self {
            self.progress = Some(input.into());
            self
        }
        /// <p>The percent complete of the export image task.</p>
        pub fn set_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.progress = input;
            self
        }
        /// <p>Information about the destination Amazon S3 bucket.</p>
        pub fn s3_export_location(mut self, input: crate::model::ExportTaskS3Location) -> Self {
            self.s3_export_location = Some(input);
            self
        }
        /// <p>Information about the destination Amazon S3 bucket.</p>
        pub fn set_s3_export_location(
            mut self,
            input: std::option::Option<crate::model::ExportTaskS3Location>,
        ) -> Self {
            self.s3_export_location = input;
            self
        }
        /// <p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>, <code>deleting</code>, and <code>deleted</code>.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>, <code>deleting</code>, and <code>deleted</code>.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The status message for the export image task.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>The status message for the export image task.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags assigned to the export image task.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags assigned to the export image task.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportImageOutput`](crate::output::ExportImageOutput).
        pub fn build(self) -> crate::output::ExportImageOutput {
            crate::output::ExportImageOutput {
                description: self.description,
                disk_image_format: self.disk_image_format,
                export_image_task_id: self.export_image_task_id,
                image_id: self.image_id,
                role_name: self.role_name,
                progress: self.progress,
                s3_export_location: self.s3_export_location,
                status: self.status,
                status_message: self.status_message,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportImageOutput {
    /// Creates a new builder-style object to manufacture [`ExportImageOutput`](crate::output::ExportImageOutput).
    pub fn builder() -> crate::output::export_image_output::Builder {
        crate::output::export_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportClientVpnClientConfigurationOutput {
    /// <p>The contents of the Client VPN endpoint configuration file.</p>
    #[doc(hidden)]
    pub client_configuration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExportClientVpnClientConfigurationOutput {
    /// <p>The contents of the Client VPN endpoint configuration file.</p>
    pub fn client_configuration(&self) -> std::option::Option<&str> {
        self.client_configuration.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExportClientVpnClientConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput).
pub mod export_client_vpn_client_configuration_output {

    /// A builder for [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_configuration: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The contents of the Client VPN endpoint configuration file.</p>
        pub fn client_configuration(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_configuration = Some(input.into());
            self
        }
        /// <p>The contents of the Client VPN endpoint configuration file.</p>
        pub fn set_client_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.client_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput).
        pub fn build(self) -> crate::output::ExportClientVpnClientConfigurationOutput {
            crate::output::ExportClientVpnClientConfigurationOutput {
                client_configuration: self.client_configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportClientVpnClientConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput).
    pub fn builder() -> crate::output::export_client_vpn_client_configuration_output::Builder {
        crate::output::export_client_vpn_client_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExportClientVpnClientCertificateRevocationListOutput {
    /// <p>Information about the client certificate revocation list.</p>
    #[doc(hidden)]
    pub certificate_revocation_list: std::option::Option<std::string::String>,
    /// <p>The current state of the client certificate revocation list.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientCertificateRevocationListStatus>,
    _request_id: Option<String>,
}
impl ExportClientVpnClientCertificateRevocationListOutput {
    /// <p>Information about the client certificate revocation list.</p>
    pub fn certificate_revocation_list(&self) -> std::option::Option<&str> {
        self.certificate_revocation_list.as_deref()
    }
    /// <p>The current state of the client certificate revocation list.</p>
    pub fn status(
        &self,
    ) -> std::option::Option<&crate::model::ClientCertificateRevocationListStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for ExportClientVpnClientCertificateRevocationListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput).
pub mod export_client_vpn_client_certificate_revocation_list_output {

    /// A builder for [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_revocation_list: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ClientCertificateRevocationListStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the client certificate revocation list.</p>
        pub fn certificate_revocation_list(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.certificate_revocation_list = Some(input.into());
            self
        }
        /// <p>Information about the client certificate revocation list.</p>
        pub fn set_certificate_revocation_list(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_revocation_list = input;
            self
        }
        /// <p>The current state of the client certificate revocation list.</p>
        pub fn status(
            mut self,
            input: crate::model::ClientCertificateRevocationListStatus,
        ) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the client certificate revocation list.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientCertificateRevocationListStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput).
        pub fn build(self) -> crate::output::ExportClientVpnClientCertificateRevocationListOutput {
            crate::output::ExportClientVpnClientCertificateRevocationListOutput {
                certificate_revocation_list: self.certificate_revocation_list,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExportClientVpnClientCertificateRevocationListOutput {
    /// Creates a new builder-style object to manufacture [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput).
    pub fn builder(
    ) -> crate::output::export_client_vpn_client_certificate_revocation_list_output::Builder {
        crate::output::export_client_vpn_client_certificate_revocation_list_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableVpcClassicLinkDnsSupportOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableVpcClassicLinkDnsSupportOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for EnableVpcClassicLinkDnsSupportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput).
pub mod enable_vpc_classic_link_dns_support_output {

    /// A builder for [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput).
        pub fn build(self) -> crate::output::EnableVpcClassicLinkDnsSupportOutput {
            crate::output::EnableVpcClassicLinkDnsSupportOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableVpcClassicLinkDnsSupportOutput {
    /// Creates a new builder-style object to manufacture [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput).
    pub fn builder() -> crate::output::enable_vpc_classic_link_dns_support_output::Builder {
        crate::output::enable_vpc_classic_link_dns_support_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableVpcClassicLinkOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableVpcClassicLinkOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for EnableVpcClassicLinkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput).
pub mod enable_vpc_classic_link_output {

    /// A builder for [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput).
        pub fn build(self) -> crate::output::EnableVpcClassicLinkOutput {
            crate::output::EnableVpcClassicLinkOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableVpcClassicLinkOutput {
    /// Creates a new builder-style object to manufacture [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput).
    pub fn builder() -> crate::output::enable_vpc_classic_link_output::Builder {
        crate::output::enable_vpc_classic_link_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableVolumeIoOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for EnableVolumeIoOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableVolumeIoOutput`](crate::output::EnableVolumeIoOutput).
pub mod enable_volume_io_output {

    /// A builder for [`EnableVolumeIoOutput`](crate::output::EnableVolumeIoOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableVolumeIoOutput`](crate::output::EnableVolumeIoOutput).
        pub fn build(self) -> crate::output::EnableVolumeIoOutput {
            crate::output::EnableVolumeIoOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableVolumeIoOutput {
    /// Creates a new builder-style object to manufacture [`EnableVolumeIoOutput`](crate::output::EnableVolumeIoOutput).
    pub fn builder() -> crate::output::enable_volume_io_output::Builder {
        crate::output::enable_volume_io_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableVgwRoutePropagationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for EnableVgwRoutePropagationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput).
pub mod enable_vgw_route_propagation_output {

    /// A builder for [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput).
        pub fn build(self) -> crate::output::EnableVgwRoutePropagationOutput {
            crate::output::EnableVgwRoutePropagationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableVgwRoutePropagationOutput {
    /// Creates a new builder-style object to manufacture [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput).
    pub fn builder() -> crate::output::enable_vgw_route_propagation_output::Builder {
        crate::output::enable_vgw_route_propagation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableTransitGatewayRouteTablePropagationOutput {
    /// <p>Information about route propagation.</p>
    #[doc(hidden)]
    pub propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
    _request_id: Option<String>,
}
impl EnableTransitGatewayRouteTablePropagationOutput {
    /// <p>Information about route propagation.</p>
    pub fn propagation(&self) -> std::option::Option<&crate::model::TransitGatewayPropagation> {
        self.propagation.as_ref()
    }
}
impl aws_http::request_id::RequestId for EnableTransitGatewayRouteTablePropagationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput).
pub mod enable_transit_gateway_route_table_propagation_output {

    /// A builder for [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about route propagation.</p>
        pub fn propagation(mut self, input: crate::model::TransitGatewayPropagation) -> Self {
            self.propagation = Some(input);
            self
        }
        /// <p>Information about route propagation.</p>
        pub fn set_propagation(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPropagation>,
        ) -> Self {
            self.propagation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput).
        pub fn build(self) -> crate::output::EnableTransitGatewayRouteTablePropagationOutput {
            crate::output::EnableTransitGatewayRouteTablePropagationOutput {
                propagation: self.propagation,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableTransitGatewayRouteTablePropagationOutput {
    /// Creates a new builder-style object to manufacture [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput).
    pub fn builder() -> crate::output::enable_transit_gateway_route_table_propagation_output::Builder
    {
        crate::output::enable_transit_gateway_route_table_propagation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableSerialConsoleAccessOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    #[doc(hidden)]
    pub serial_console_access_enabled: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableSerialConsoleAccessOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn serial_console_access_enabled(&self) -> std::option::Option<bool> {
        self.serial_console_access_enabled
    }
}
impl aws_http::request_id::RequestId for EnableSerialConsoleAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput).
pub mod enable_serial_console_access_output {

    /// A builder for [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) serial_console_access_enabled: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
        pub fn serial_console_access_enabled(mut self, input: bool) -> Self {
            self.serial_console_access_enabled = Some(input);
            self
        }
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
        pub fn set_serial_console_access_enabled(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.serial_console_access_enabled = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput).
        pub fn build(self) -> crate::output::EnableSerialConsoleAccessOutput {
            crate::output::EnableSerialConsoleAccessOutput {
                serial_console_access_enabled: self.serial_console_access_enabled,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableSerialConsoleAccessOutput {
    /// Creates a new builder-style object to manufacture [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput).
    pub fn builder() -> crate::output::enable_serial_console_access_output::Builder {
        crate::output::enable_serial_console_access_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableReachabilityAnalyzerOrganizationSharingOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableReachabilityAnalyzerOrganizationSharingOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for EnableReachabilityAnalyzerOrganizationSharingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableReachabilityAnalyzerOrganizationSharingOutput`](crate::output::EnableReachabilityAnalyzerOrganizationSharingOutput).
pub mod enable_reachability_analyzer_organization_sharing_output {

    /// A builder for [`EnableReachabilityAnalyzerOrganizationSharingOutput`](crate::output::EnableReachabilityAnalyzerOrganizationSharingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableReachabilityAnalyzerOrganizationSharingOutput`](crate::output::EnableReachabilityAnalyzerOrganizationSharingOutput).
        pub fn build(self) -> crate::output::EnableReachabilityAnalyzerOrganizationSharingOutput {
            crate::output::EnableReachabilityAnalyzerOrganizationSharingOutput {
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableReachabilityAnalyzerOrganizationSharingOutput {
    /// Creates a new builder-style object to manufacture [`EnableReachabilityAnalyzerOrganizationSharingOutput`](crate::output::EnableReachabilityAnalyzerOrganizationSharingOutput).
    pub fn builder(
    ) -> crate::output::enable_reachability_analyzer_organization_sharing_output::Builder {
        crate::output::enable_reachability_analyzer_organization_sharing_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableIpamOrganizationAdminAccountOutput {
    /// <p>The result of enabling the IPAM account.</p>
    #[doc(hidden)]
    pub success: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableIpamOrganizationAdminAccountOutput {
    /// <p>The result of enabling the IPAM account.</p>
    pub fn success(&self) -> std::option::Option<bool> {
        self.success
    }
}
impl aws_http::request_id::RequestId for EnableIpamOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableIpamOrganizationAdminAccountOutput`](crate::output::EnableIpamOrganizationAdminAccountOutput).
pub mod enable_ipam_organization_admin_account_output {

    /// A builder for [`EnableIpamOrganizationAdminAccountOutput`](crate::output::EnableIpamOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) success: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The result of enabling the IPAM account.</p>
        pub fn success(mut self, input: bool) -> Self {
            self.success = Some(input);
            self
        }
        /// <p>The result of enabling the IPAM account.</p>
        pub fn set_success(mut self, input: std::option::Option<bool>) -> Self {
            self.success = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableIpamOrganizationAdminAccountOutput`](crate::output::EnableIpamOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::EnableIpamOrganizationAdminAccountOutput {
            crate::output::EnableIpamOrganizationAdminAccountOutput {
                success: self.success,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableIpamOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`EnableIpamOrganizationAdminAccountOutput`](crate::output::EnableIpamOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::enable_ipam_organization_admin_account_output::Builder {
        crate::output::enable_ipam_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableImageDeprecationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableImageDeprecationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for EnableImageDeprecationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableImageDeprecationOutput`](crate::output::EnableImageDeprecationOutput).
pub mod enable_image_deprecation_output {

    /// A builder for [`EnableImageDeprecationOutput`](crate::output::EnableImageDeprecationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableImageDeprecationOutput`](crate::output::EnableImageDeprecationOutput).
        pub fn build(self) -> crate::output::EnableImageDeprecationOutput {
            crate::output::EnableImageDeprecationOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableImageDeprecationOutput {
    /// Creates a new builder-style object to manufacture [`EnableImageDeprecationOutput`](crate::output::EnableImageDeprecationOutput).
    pub fn builder() -> crate::output::enable_image_deprecation_output::Builder {
        crate::output::enable_image_deprecation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableFastSnapshotRestoresOutput {
    /// <p>Information about the snapshots for which fast snapshot restores were successfully enabled.</p>
    #[doc(hidden)]
    pub successful:
        std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>>,
    /// <p>Information about the snapshots for which fast snapshot restores could not be enabled.</p>
    #[doc(hidden)]
    pub unsuccessful:
        std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>>,
    _request_id: Option<String>,
}
impl EnableFastSnapshotRestoresOutput {
    /// <p>Information about the snapshots for which fast snapshot restores were successfully enabled.</p>
    pub fn successful(
        &self,
    ) -> std::option::Option<&[crate::model::EnableFastSnapshotRestoreSuccessItem]> {
        self.successful.as_deref()
    }
    /// <p>Information about the snapshots for which fast snapshot restores could not be enabled.</p>
    pub fn unsuccessful(
        &self,
    ) -> std::option::Option<&[crate::model::EnableFastSnapshotRestoreErrorItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for EnableFastSnapshotRestoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput).
pub mod enable_fast_snapshot_restores_output {

    /// A builder for [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful:
            std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>>,
        pub(crate) unsuccessful:
            std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful`.
        ///
        /// To override the contents of this collection use [`set_successful`](Self::set_successful).
        ///
        /// <p>Information about the snapshots for which fast snapshot restores were successfully enabled.</p>
        pub fn successful(
            mut self,
            input: crate::model::EnableFastSnapshotRestoreSuccessItem,
        ) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(input);
            self.successful = Some(v);
            self
        }
        /// <p>Information about the snapshots for which fast snapshot restores were successfully enabled.</p>
        pub fn set_successful(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>,
            >,
        ) -> Self {
            self.successful = input;
            self
        }
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the snapshots for which fast snapshot restores could not be enabled.</p>
        pub fn unsuccessful(
            mut self,
            input: crate::model::EnableFastSnapshotRestoreErrorItem,
        ) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the snapshots for which fast snapshot restores could not be enabled.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>,
            >,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput).
        pub fn build(self) -> crate::output::EnableFastSnapshotRestoresOutput {
            crate::output::EnableFastSnapshotRestoresOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableFastSnapshotRestoresOutput {
    /// Creates a new builder-style object to manufacture [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput).
    pub fn builder() -> crate::output::enable_fast_snapshot_restores_output::Builder {
        crate::output::enable_fast_snapshot_restores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableFastLaunchOutput {
    /// <p>The image ID that identifies the Windows AMI for which faster launching was enabled.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The type of resource that was defined for pre-provisioning the Windows AMI for faster launching.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::model::FastLaunchResourceType>,
    /// <p>The configuration settings that were defined for creating and managing the pre-provisioned snapshots for faster launching of the Windows AMI. This property is returned when the associated <code>resourceType</code> is <code>snapshot</code>.</p>
    #[doc(hidden)]
    pub snapshot_configuration:
        std::option::Option<crate::model::FastLaunchSnapshotConfigurationResponse>,
    /// <p>The launch template that is used when launching Windows instances from pre-provisioned snapshots.</p>
    #[doc(hidden)]
    pub launch_template:
        std::option::Option<crate::model::FastLaunchLaunchTemplateSpecificationResponse>,
    /// <p>The maximum number of parallel instances to launch for creating resources.</p>
    #[doc(hidden)]
    pub max_parallel_launches: std::option::Option<i32>,
    /// <p>The owner ID for the Windows AMI for which faster launching was enabled.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The current state of faster launching for the specified Windows AMI.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::FastLaunchStateCode>,
    /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
    #[doc(hidden)]
    pub state_transition_reason: std::option::Option<std::string::String>,
    /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
    #[doc(hidden)]
    pub state_transition_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl EnableFastLaunchOutput {
    /// <p>The image ID that identifies the Windows AMI for which faster launching was enabled.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The type of resource that was defined for pre-provisioning the Windows AMI for faster launching.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::model::FastLaunchResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The configuration settings that were defined for creating and managing the pre-provisioned snapshots for faster launching of the Windows AMI. This property is returned when the associated <code>resourceType</code> is <code>snapshot</code>.</p>
    pub fn snapshot_configuration(
        &self,
    ) -> std::option::Option<&crate::model::FastLaunchSnapshotConfigurationResponse> {
        self.snapshot_configuration.as_ref()
    }
    /// <p>The launch template that is used when launching Windows instances from pre-provisioned snapshots.</p>
    pub fn launch_template(
        &self,
    ) -> std::option::Option<&crate::model::FastLaunchLaunchTemplateSpecificationResponse> {
        self.launch_template.as_ref()
    }
    /// <p>The maximum number of parallel instances to launch for creating resources.</p>
    pub fn max_parallel_launches(&self) -> std::option::Option<i32> {
        self.max_parallel_launches
    }
    /// <p>The owner ID for the Windows AMI for which faster launching was enabled.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The current state of faster launching for the specified Windows AMI.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::FastLaunchStateCode> {
        self.state.as_ref()
    }
    /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
    pub fn state_transition_reason(&self) -> std::option::Option<&str> {
        self.state_transition_reason.as_deref()
    }
    /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
    pub fn state_transition_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.state_transition_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for EnableFastLaunchOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableFastLaunchOutput`](crate::output::EnableFastLaunchOutput).
pub mod enable_fast_launch_output {

    /// A builder for [`EnableFastLaunchOutput`](crate::output::EnableFastLaunchOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<crate::model::FastLaunchResourceType>,
        pub(crate) snapshot_configuration:
            std::option::Option<crate::model::FastLaunchSnapshotConfigurationResponse>,
        pub(crate) launch_template:
            std::option::Option<crate::model::FastLaunchLaunchTemplateSpecificationResponse>,
        pub(crate) max_parallel_launches: std::option::Option<i32>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::FastLaunchStateCode>,
        pub(crate) state_transition_reason: std::option::Option<std::string::String>,
        pub(crate) state_transition_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The image ID that identifies the Windows AMI for which faster launching was enabled.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The image ID that identifies the Windows AMI for which faster launching was enabled.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        /// <p>The type of resource that was defined for pre-provisioning the Windows AMI for faster launching.</p>
        pub fn resource_type(mut self, input: crate::model::FastLaunchResourceType) -> Self {
            self.resource_type = Some(input);
            self
        }
        /// <p>The type of resource that was defined for pre-provisioning the Windows AMI for faster launching.</p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<crate::model::FastLaunchResourceType>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The configuration settings that were defined for creating and managing the pre-provisioned snapshots for faster launching of the Windows AMI. This property is returned when the associated <code>resourceType</code> is <code>snapshot</code>.</p>
        pub fn snapshot_configuration(
            mut self,
            input: crate::model::FastLaunchSnapshotConfigurationResponse,
        ) -> Self {
            self.snapshot_configuration = Some(input);
            self
        }
        /// <p>The configuration settings that were defined for creating and managing the pre-provisioned snapshots for faster launching of the Windows AMI. This property is returned when the associated <code>resourceType</code> is <code>snapshot</code>.</p>
        pub fn set_snapshot_configuration(
            mut self,
            input: std::option::Option<crate::model::FastLaunchSnapshotConfigurationResponse>,
        ) -> Self {
            self.snapshot_configuration = input;
            self
        }
        /// <p>The launch template that is used when launching Windows instances from pre-provisioned snapshots.</p>
        pub fn launch_template(
            mut self,
            input: crate::model::FastLaunchLaunchTemplateSpecificationResponse,
        ) -> Self {
            self.launch_template = Some(input);
            self
        }
        /// <p>The launch template that is used when launching Windows instances from pre-provisioned snapshots.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::FastLaunchLaunchTemplateSpecificationResponse>,
        ) -> Self {
            self.launch_template = input;
            self
        }
        /// <p>The maximum number of parallel instances to launch for creating resources.</p>
        pub fn max_parallel_launches(mut self, input: i32) -> Self {
            self.max_parallel_launches = Some(input);
            self
        }
        /// <p>The maximum number of parallel instances to launch for creating resources.</p>
        pub fn set_max_parallel_launches(mut self, input: std::option::Option<i32>) -> Self {
            self.max_parallel_launches = input;
            self
        }
        /// <p>The owner ID for the Windows AMI for which faster launching was enabled.</p>
        pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(input.into());
            self
        }
        /// <p>The owner ID for the Windows AMI for which faster launching was enabled.</p>
        pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_id = input;
            self
        }
        /// <p>The current state of faster launching for the specified Windows AMI.</p>
        pub fn state(mut self, input: crate::model::FastLaunchStateCode) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of faster launching for the specified Windows AMI.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::FastLaunchStateCode>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
        pub fn state_transition_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.state_transition_reason = Some(input.into());
            self
        }
        /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
        pub fn set_state_transition_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.state_transition_reason = input;
            self
        }
        /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
        pub fn state_transition_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.state_transition_time = Some(input);
            self
        }
        /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
        pub fn set_state_transition_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.state_transition_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableFastLaunchOutput`](crate::output::EnableFastLaunchOutput).
        pub fn build(self) -> crate::output::EnableFastLaunchOutput {
            crate::output::EnableFastLaunchOutput {
                image_id: self.image_id,
                resource_type: self.resource_type,
                snapshot_configuration: self.snapshot_configuration,
                launch_template: self.launch_template,
                max_parallel_launches: self.max_parallel_launches,
                owner_id: self.owner_id,
                state: self.state,
                state_transition_reason: self.state_transition_reason,
                state_transition_time: self.state_transition_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableFastLaunchOutput {
    /// Creates a new builder-style object to manufacture [`EnableFastLaunchOutput`](crate::output::EnableFastLaunchOutput).
    pub fn builder() -> crate::output::enable_fast_launch_output::Builder {
        crate::output::enable_fast_launch_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableEbsEncryptionByDefaultOutput {
    /// <p>The updated status of encryption by default.</p>
    #[doc(hidden)]
    pub ebs_encryption_by_default: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableEbsEncryptionByDefaultOutput {
    /// <p>The updated status of encryption by default.</p>
    pub fn ebs_encryption_by_default(&self) -> std::option::Option<bool> {
        self.ebs_encryption_by_default
    }
}
impl aws_http::request_id::RequestId for EnableEbsEncryptionByDefaultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput).
pub mod enable_ebs_encryption_by_default_output {

    /// A builder for [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ebs_encryption_by_default: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The updated status of encryption by default.</p>
        pub fn ebs_encryption_by_default(mut self, input: bool) -> Self {
            self.ebs_encryption_by_default = Some(input);
            self
        }
        /// <p>The updated status of encryption by default.</p>
        pub fn set_ebs_encryption_by_default(mut self, input: std::option::Option<bool>) -> Self {
            self.ebs_encryption_by_default = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput).
        pub fn build(self) -> crate::output::EnableEbsEncryptionByDefaultOutput {
            crate::output::EnableEbsEncryptionByDefaultOutput {
                ebs_encryption_by_default: self.ebs_encryption_by_default,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableEbsEncryptionByDefaultOutput {
    /// Creates a new builder-style object to manufacture [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput).
    pub fn builder() -> crate::output::enable_ebs_encryption_by_default_output::Builder {
        crate::output::enable_ebs_encryption_by_default_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableAwsNetworkPerformanceMetricSubscriptionOutput {
    /// <p>Indicates whether the subscribe action was successful.</p>
    #[doc(hidden)]
    pub output: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl EnableAwsNetworkPerformanceMetricSubscriptionOutput {
    /// <p>Indicates whether the subscribe action was successful.</p>
    pub fn output(&self) -> std::option::Option<bool> {
        self.output
    }
}
impl aws_http::request_id::RequestId for EnableAwsNetworkPerformanceMetricSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::EnableAwsNetworkPerformanceMetricSubscriptionOutput).
pub mod enable_aws_network_performance_metric_subscription_output {

    /// A builder for [`EnableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::EnableAwsNetworkPerformanceMetricSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) output: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether the subscribe action was successful.</p>
        pub fn output(mut self, input: bool) -> Self {
            self.output = Some(input);
            self
        }
        /// <p>Indicates whether the subscribe action was successful.</p>
        pub fn set_output(mut self, input: std::option::Option<bool>) -> Self {
            self.output = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::EnableAwsNetworkPerformanceMetricSubscriptionOutput).
        pub fn build(self) -> crate::output::EnableAwsNetworkPerformanceMetricSubscriptionOutput {
            crate::output::EnableAwsNetworkPerformanceMetricSubscriptionOutput {
                output: self.output,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableAwsNetworkPerformanceMetricSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`EnableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::EnableAwsNetworkPerformanceMetricSubscriptionOutput).
    pub fn builder(
    ) -> crate::output::enable_aws_network_performance_metric_subscription_output::Builder {
        crate::output::enable_aws_network_performance_metric_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableAddressTransferOutput {
    /// <p>An Elastic IP address transfer.</p>
    #[doc(hidden)]
    pub address_transfer: std::option::Option<crate::model::AddressTransfer>,
    _request_id: Option<String>,
}
impl EnableAddressTransferOutput {
    /// <p>An Elastic IP address transfer.</p>
    pub fn address_transfer(&self) -> std::option::Option<&crate::model::AddressTransfer> {
        self.address_transfer.as_ref()
    }
}
impl aws_http::request_id::RequestId for EnableAddressTransferOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableAddressTransferOutput`](crate::output::EnableAddressTransferOutput).
pub mod enable_address_transfer_output {

    /// A builder for [`EnableAddressTransferOutput`](crate::output::EnableAddressTransferOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address_transfer: std::option::Option<crate::model::AddressTransfer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An Elastic IP address transfer.</p>
        pub fn address_transfer(mut self, input: crate::model::AddressTransfer) -> Self {
            self.address_transfer = Some(input);
            self
        }
        /// <p>An Elastic IP address transfer.</p>
        pub fn set_address_transfer(
            mut self,
            input: std::option::Option<crate::model::AddressTransfer>,
        ) -> Self {
            self.address_transfer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableAddressTransferOutput`](crate::output::EnableAddressTransferOutput).
        pub fn build(self) -> crate::output::EnableAddressTransferOutput {
            crate::output::EnableAddressTransferOutput {
                address_transfer: self.address_transfer,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableAddressTransferOutput {
    /// Creates a new builder-style object to manufacture [`EnableAddressTransferOutput`](crate::output::EnableAddressTransferOutput).
    pub fn builder() -> crate::output::enable_address_transfer_output::Builder {
        crate::output::enable_address_transfer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateVpcCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block_association: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
    /// <p>Information about the IPv4 CIDR block association.</p>
    #[doc(hidden)]
    pub cidr_block_association: std::option::Option<crate::model::VpcCidrBlockAssociation>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DisassociateVpcCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub fn ipv6_cidr_block_association(
        &self,
    ) -> std::option::Option<&crate::model::VpcIpv6CidrBlockAssociation> {
        self.ipv6_cidr_block_association.as_ref()
    }
    /// <p>Information about the IPv4 CIDR block association.</p>
    pub fn cidr_block_association(
        &self,
    ) -> std::option::Option<&crate::model::VpcCidrBlockAssociation> {
        self.cidr_block_association.as_ref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociateVpcCidrBlockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput).
pub mod disassociate_vpc_cidr_block_output {

    /// A builder for [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        pub(crate) cidr_block_association:
            std::option::Option<crate::model::VpcCidrBlockAssociation>,
        pub(crate) vpc_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            input: crate::model::VpcIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(input);
            self
        }
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn set_ipv6_cidr_block_association(
            mut self,
            input: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = input;
            self
        }
        /// <p>Information about the IPv4 CIDR block association.</p>
        pub fn cidr_block_association(
            mut self,
            input: crate::model::VpcCidrBlockAssociation,
        ) -> Self {
            self.cidr_block_association = Some(input);
            self
        }
        /// <p>Information about the IPv4 CIDR block association.</p>
        pub fn set_cidr_block_association(
            mut self,
            input: std::option::Option<crate::model::VpcCidrBlockAssociation>,
        ) -> Self {
            self.cidr_block_association = input;
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(input.into());
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput).
        pub fn build(self) -> crate::output::DisassociateVpcCidrBlockOutput {
            crate::output::DisassociateVpcCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                cidr_block_association: self.cidr_block_association,
                vpc_id: self.vpc_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateVpcCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput).
    pub fn builder() -> crate::output::disassociate_vpc_cidr_block_output::Builder {
        crate::output::disassociate_vpc_cidr_block_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateTrunkInterfaceOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DisassociateTrunkInterfaceOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociateTrunkInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateTrunkInterfaceOutput`](crate::output::DisassociateTrunkInterfaceOutput).
pub mod disassociate_trunk_interface_output {

    /// A builder for [`DisassociateTrunkInterfaceOutput`](crate::output::DisassociateTrunkInterfaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTrunkInterfaceOutput`](crate::output::DisassociateTrunkInterfaceOutput).
        pub fn build(self) -> crate::output::DisassociateTrunkInterfaceOutput {
            crate::output::DisassociateTrunkInterfaceOutput {
                r#return: self.r#return,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateTrunkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTrunkInterfaceOutput`](crate::output::DisassociateTrunkInterfaceOutput).
    pub fn builder() -> crate::output::disassociate_trunk_interface_output::Builder {
        crate::output::disassociate_trunk_interface_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateTransitGatewayRouteTableOutput {
    /// <p>Information about the association.</p>
    #[doc(hidden)]
    pub association: std::option::Option<crate::model::TransitGatewayAssociation>,
    _request_id: Option<String>,
}
impl DisassociateTransitGatewayRouteTableOutput {
    /// <p>Information about the association.</p>
    pub fn association(&self) -> std::option::Option<&crate::model::TransitGatewayAssociation> {
        self.association.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateTransitGatewayRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput).
pub mod disassociate_transit_gateway_route_table_output {

    /// A builder for [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association: std::option::Option<crate::model::TransitGatewayAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn association(mut self, input: crate::model::TransitGatewayAssociation) -> Self {
            self.association = Some(input);
            self
        }
        /// <p>Information about the association.</p>
        pub fn set_association(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayAssociation>,
        ) -> Self {
            self.association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput).
        pub fn build(self) -> crate::output::DisassociateTransitGatewayRouteTableOutput {
            crate::output::DisassociateTransitGatewayRouteTableOutput {
                association: self.association,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput).
    pub fn builder() -> crate::output::disassociate_transit_gateway_route_table_output::Builder {
        crate::output::disassociate_transit_gateway_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateTransitGatewayPolicyTableOutput {
    /// <p>Returns details about the transit gateway policy table disassociation.</p>
    #[doc(hidden)]
    pub association: std::option::Option<crate::model::TransitGatewayPolicyTableAssociation>,
    _request_id: Option<String>,
}
impl DisassociateTransitGatewayPolicyTableOutput {
    /// <p>Returns details about the transit gateway policy table disassociation.</p>
    pub fn association(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPolicyTableAssociation> {
        self.association.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateTransitGatewayPolicyTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateTransitGatewayPolicyTableOutput`](crate::output::DisassociateTransitGatewayPolicyTableOutput).
pub mod disassociate_transit_gateway_policy_table_output {

    /// A builder for [`DisassociateTransitGatewayPolicyTableOutput`](crate::output::DisassociateTransitGatewayPolicyTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association:
            std::option::Option<crate::model::TransitGatewayPolicyTableAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns details about the transit gateway policy table disassociation.</p>
        pub fn association(
            mut self,
            input: crate::model::TransitGatewayPolicyTableAssociation,
        ) -> Self {
            self.association = Some(input);
            self
        }
        /// <p>Returns details about the transit gateway policy table disassociation.</p>
        pub fn set_association(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPolicyTableAssociation>,
        ) -> Self {
            self.association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTransitGatewayPolicyTableOutput`](crate::output::DisassociateTransitGatewayPolicyTableOutput).
        pub fn build(self) -> crate::output::DisassociateTransitGatewayPolicyTableOutput {
            crate::output::DisassociateTransitGatewayPolicyTableOutput {
                association: self.association,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateTransitGatewayPolicyTableOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayPolicyTableOutput`](crate::output::DisassociateTransitGatewayPolicyTableOutput).
    pub fn builder() -> crate::output::disassociate_transit_gateway_policy_table_output::Builder {
        crate::output::disassociate_transit_gateway_policy_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the association.</p>
    #[doc(hidden)]
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    _request_id: Option<String>,
}
impl DisassociateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the association.</p>
    pub fn associations(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDomainAssociations> {
        self.associations.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateTransitGatewayMulticastDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput).
pub mod disassociate_transit_gateway_multicast_domain_output {

    /// A builder for [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn associations(
            mut self,
            input: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(input);
            self
        }
        /// <p>Information about the association.</p>
        pub fn set_associations(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput).
        pub fn build(self) -> crate::output::DisassociateTransitGatewayMulticastDomainOutput {
            crate::output::DisassociateTransitGatewayMulticastDomainOutput {
                associations: self.associations,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput).
    pub fn builder() -> crate::output::disassociate_transit_gateway_multicast_domain_output::Builder
    {
        crate::output::disassociate_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateSubnetCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block_association:
        std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
    /// <p>The ID of the subnet.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DisassociateSubnetCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub fn ipv6_cidr_block_association(
        &self,
    ) -> std::option::Option<&crate::model::SubnetIpv6CidrBlockAssociation> {
        self.ipv6_cidr_block_association.as_ref()
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociateSubnetCidrBlockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput).
pub mod disassociate_subnet_cidr_block_output {

    /// A builder for [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        pub(crate) subnet_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            input: crate::model::SubnetIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(input);
            self
        }
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn set_ipv6_cidr_block_association(
            mut self,
            input: std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = input;
            self
        }
        /// <p>The ID of the subnet.</p>
        pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.subnet_id = Some(input.into());
            self
        }
        /// <p>The ID of the subnet.</p>
        pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.subnet_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput).
        pub fn build(self) -> crate::output::DisassociateSubnetCidrBlockOutput {
            crate::output::DisassociateSubnetCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                subnet_id: self.subnet_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateSubnetCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput).
    pub fn builder() -> crate::output::disassociate_subnet_cidr_block_output::Builder {
        crate::output::disassociate_subnet_cidr_block_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateRouteTableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput).
pub mod disassociate_route_table_output {

    /// A builder for [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput).
        pub fn build(self) -> crate::output::DisassociateRouteTableOutput {
            crate::output::DisassociateRouteTableOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput).
    pub fn builder() -> crate::output::disassociate_route_table_output::Builder {
        crate::output::disassociate_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    #[doc(hidden)]
    pub instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
    _request_id: Option<String>,
}
impl DisassociateInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    pub fn instance_event_window(&self) -> std::option::Option<&crate::model::InstanceEventWindow> {
        self.instance_event_window.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateInstanceEventWindowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateInstanceEventWindowOutput`](crate::output::DisassociateInstanceEventWindowOutput).
pub mod disassociate_instance_event_window_output {

    /// A builder for [`DisassociateInstanceEventWindowOutput`](crate::output::DisassociateInstanceEventWindowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the event window.</p>
        pub fn instance_event_window(mut self, input: crate::model::InstanceEventWindow) -> Self {
            self.instance_event_window = Some(input);
            self
        }
        /// <p>Information about the event window.</p>
        pub fn set_instance_event_window(
            mut self,
            input: std::option::Option<crate::model::InstanceEventWindow>,
        ) -> Self {
            self.instance_event_window = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateInstanceEventWindowOutput`](crate::output::DisassociateInstanceEventWindowOutput).
        pub fn build(self) -> crate::output::DisassociateInstanceEventWindowOutput {
            crate::output::DisassociateInstanceEventWindowOutput {
                instance_event_window: self.instance_event_window,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateInstanceEventWindowOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateInstanceEventWindowOutput`](crate::output::DisassociateInstanceEventWindowOutput).
    pub fn builder() -> crate::output::disassociate_instance_event_window_output::Builder {
        crate::output::disassociate_instance_event_window_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateIamInstanceProfileOutput {
    /// <p>Information about the IAM instance profile association.</p>
    #[doc(hidden)]
    pub iam_instance_profile_association:
        std::option::Option<crate::model::IamInstanceProfileAssociation>,
    _request_id: Option<String>,
}
impl DisassociateIamInstanceProfileOutput {
    /// <p>Information about the IAM instance profile association.</p>
    pub fn iam_instance_profile_association(
        &self,
    ) -> std::option::Option<&crate::model::IamInstanceProfileAssociation> {
        self.iam_instance_profile_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateIamInstanceProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput).
pub mod disassociate_iam_instance_profile_output {

    /// A builder for [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_association:
            std::option::Option<crate::model::IamInstanceProfileAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IAM instance profile association.</p>
        pub fn iam_instance_profile_association(
            mut self,
            input: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            self.iam_instance_profile_association = Some(input);
            self
        }
        /// <p>Information about the IAM instance profile association.</p>
        pub fn set_iam_instance_profile_association(
            mut self,
            input: std::option::Option<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            self.iam_instance_profile_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput).
        pub fn build(self) -> crate::output::DisassociateIamInstanceProfileOutput {
            crate::output::DisassociateIamInstanceProfileOutput {
                iam_instance_profile_association: self.iam_instance_profile_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateIamInstanceProfileOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput).
    pub fn builder() -> crate::output::disassociate_iam_instance_profile_output::Builder {
        crate::output::disassociate_iam_instance_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateEnclaveCertificateIamRoleOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisassociateEnclaveCertificateIamRoleOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DisassociateEnclaveCertificateIamRoleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput).
pub mod disassociate_enclave_certificate_iam_role_output {

    /// A builder for [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput).
        pub fn build(self) -> crate::output::DisassociateEnclaveCertificateIamRoleOutput {
            crate::output::DisassociateEnclaveCertificateIamRoleOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateEnclaveCertificateIamRoleOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput).
    pub fn builder() -> crate::output::disassociate_enclave_certificate_iam_role_output::Builder {
        crate::output::disassociate_enclave_certificate_iam_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateClientVpnTargetNetworkOutput {
    /// <p>The ID of the target network association.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The current state of the target network association.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AssociationStatus>,
    _request_id: Option<String>,
}
impl DisassociateClientVpnTargetNetworkOutput {
    /// <p>The ID of the target network association.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The current state of the target network association.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::AssociationStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateClientVpnTargetNetworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput).
pub mod disassociate_client_vpn_target_network_output {

    /// A builder for [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::AssociationStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the target network association.</p>
        pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_id = Some(input.into());
            self
        }
        /// <p>The ID of the target network association.</p>
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_id = input;
            self
        }
        /// <p>The current state of the target network association.</p>
        pub fn status(mut self, input: crate::model::AssociationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the target network association.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AssociationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput).
        pub fn build(self) -> crate::output::DisassociateClientVpnTargetNetworkOutput {
            crate::output::DisassociateClientVpnTargetNetworkOutput {
                association_id: self.association_id,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateClientVpnTargetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput).
    pub fn builder() -> crate::output::disassociate_client_vpn_target_network_output::Builder {
        crate::output::disassociate_client_vpn_target_network_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateAddressOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput).
pub mod disassociate_address_output {

    /// A builder for [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput).
        pub fn build(self) -> crate::output::DisassociateAddressOutput {
            crate::output::DisassociateAddressOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateAddressOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput).
    pub fn builder() -> crate::output::disassociate_address_output::Builder {
        crate::output::disassociate_address_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableVpcClassicLinkDnsSupportOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableVpcClassicLinkDnsSupportOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DisableVpcClassicLinkDnsSupportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput).
pub mod disable_vpc_classic_link_dns_support_output {

    /// A builder for [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput).
        pub fn build(self) -> crate::output::DisableVpcClassicLinkDnsSupportOutput {
            crate::output::DisableVpcClassicLinkDnsSupportOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableVpcClassicLinkDnsSupportOutput {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput).
    pub fn builder() -> crate::output::disable_vpc_classic_link_dns_support_output::Builder {
        crate::output::disable_vpc_classic_link_dns_support_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableVpcClassicLinkOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableVpcClassicLinkOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DisableVpcClassicLinkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput).
pub mod disable_vpc_classic_link_output {

    /// A builder for [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput).
        pub fn build(self) -> crate::output::DisableVpcClassicLinkOutput {
            crate::output::DisableVpcClassicLinkOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableVpcClassicLinkOutput {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput).
    pub fn builder() -> crate::output::disable_vpc_classic_link_output::Builder {
        crate::output::disable_vpc_classic_link_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableVgwRoutePropagationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisableVgwRoutePropagationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput).
pub mod disable_vgw_route_propagation_output {

    /// A builder for [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput).
        pub fn build(self) -> crate::output::DisableVgwRoutePropagationOutput {
            crate::output::DisableVgwRoutePropagationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableVgwRoutePropagationOutput {
    /// Creates a new builder-style object to manufacture [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput).
    pub fn builder() -> crate::output::disable_vgw_route_propagation_output::Builder {
        crate::output::disable_vgw_route_propagation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableTransitGatewayRouteTablePropagationOutput {
    /// <p>Information about route propagation.</p>
    #[doc(hidden)]
    pub propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
    _request_id: Option<String>,
}
impl DisableTransitGatewayRouteTablePropagationOutput {
    /// <p>Information about route propagation.</p>
    pub fn propagation(&self) -> std::option::Option<&crate::model::TransitGatewayPropagation> {
        self.propagation.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisableTransitGatewayRouteTablePropagationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput).
pub mod disable_transit_gateway_route_table_propagation_output {

    /// A builder for [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about route propagation.</p>
        pub fn propagation(mut self, input: crate::model::TransitGatewayPropagation) -> Self {
            self.propagation = Some(input);
            self
        }
        /// <p>Information about route propagation.</p>
        pub fn set_propagation(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPropagation>,
        ) -> Self {
            self.propagation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput).
        pub fn build(self) -> crate::output::DisableTransitGatewayRouteTablePropagationOutput {
            crate::output::DisableTransitGatewayRouteTablePropagationOutput {
                propagation: self.propagation,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableTransitGatewayRouteTablePropagationOutput {
    /// Creates a new builder-style object to manufacture [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput).
    pub fn builder(
    ) -> crate::output::disable_transit_gateway_route_table_propagation_output::Builder {
        crate::output::disable_transit_gateway_route_table_propagation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableSerialConsoleAccessOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    #[doc(hidden)]
    pub serial_console_access_enabled: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableSerialConsoleAccessOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
    pub fn serial_console_access_enabled(&self) -> std::option::Option<bool> {
        self.serial_console_access_enabled
    }
}
impl aws_http::request_id::RequestId for DisableSerialConsoleAccessOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput).
pub mod disable_serial_console_access_output {

    /// A builder for [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) serial_console_access_enabled: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
        pub fn serial_console_access_enabled(mut self, input: bool) -> Self {
            self.serial_console_access_enabled = Some(input);
            self
        }
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for your account. If <code>false</code>, access to the EC2 serial console of all instances is disabled for your account.</p>
        pub fn set_serial_console_access_enabled(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.serial_console_access_enabled = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput).
        pub fn build(self) -> crate::output::DisableSerialConsoleAccessOutput {
            crate::output::DisableSerialConsoleAccessOutput {
                serial_console_access_enabled: self.serial_console_access_enabled,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableSerialConsoleAccessOutput {
    /// Creates a new builder-style object to manufacture [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput).
    pub fn builder() -> crate::output::disable_serial_console_access_output::Builder {
        crate::output::disable_serial_console_access_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableIpamOrganizationAdminAccountOutput {
    /// <p>The result of disabling the IPAM account.</p>
    #[doc(hidden)]
    pub success: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableIpamOrganizationAdminAccountOutput {
    /// <p>The result of disabling the IPAM account.</p>
    pub fn success(&self) -> std::option::Option<bool> {
        self.success
    }
}
impl aws_http::request_id::RequestId for DisableIpamOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableIpamOrganizationAdminAccountOutput`](crate::output::DisableIpamOrganizationAdminAccountOutput).
pub mod disable_ipam_organization_admin_account_output {

    /// A builder for [`DisableIpamOrganizationAdminAccountOutput`](crate::output::DisableIpamOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) success: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The result of disabling the IPAM account.</p>
        pub fn success(mut self, input: bool) -> Self {
            self.success = Some(input);
            self
        }
        /// <p>The result of disabling the IPAM account.</p>
        pub fn set_success(mut self, input: std::option::Option<bool>) -> Self {
            self.success = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableIpamOrganizationAdminAccountOutput`](crate::output::DisableIpamOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::DisableIpamOrganizationAdminAccountOutput {
            crate::output::DisableIpamOrganizationAdminAccountOutput {
                success: self.success,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableIpamOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisableIpamOrganizationAdminAccountOutput`](crate::output::DisableIpamOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::disable_ipam_organization_admin_account_output::Builder {
        crate::output::disable_ipam_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableImageDeprecationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableImageDeprecationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DisableImageDeprecationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableImageDeprecationOutput`](crate::output::DisableImageDeprecationOutput).
pub mod disable_image_deprecation_output {

    /// A builder for [`DisableImageDeprecationOutput`](crate::output::DisableImageDeprecationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableImageDeprecationOutput`](crate::output::DisableImageDeprecationOutput).
        pub fn build(self) -> crate::output::DisableImageDeprecationOutput {
            crate::output::DisableImageDeprecationOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableImageDeprecationOutput {
    /// Creates a new builder-style object to manufacture [`DisableImageDeprecationOutput`](crate::output::DisableImageDeprecationOutput).
    pub fn builder() -> crate::output::disable_image_deprecation_output::Builder {
        crate::output::disable_image_deprecation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableFastSnapshotRestoresOutput {
    /// <p>Information about the snapshots for which fast snapshot restores were successfully disabled.</p>
    #[doc(hidden)]
    pub successful:
        std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>>,
    /// <p>Information about the snapshots for which fast snapshot restores could not be disabled.</p>
    #[doc(hidden)]
    pub unsuccessful:
        std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>>,
    _request_id: Option<String>,
}
impl DisableFastSnapshotRestoresOutput {
    /// <p>Information about the snapshots for which fast snapshot restores were successfully disabled.</p>
    pub fn successful(
        &self,
    ) -> std::option::Option<&[crate::model::DisableFastSnapshotRestoreSuccessItem]> {
        self.successful.as_deref()
    }
    /// <p>Information about the snapshots for which fast snapshot restores could not be disabled.</p>
    pub fn unsuccessful(
        &self,
    ) -> std::option::Option<&[crate::model::DisableFastSnapshotRestoreErrorItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisableFastSnapshotRestoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput).
pub mod disable_fast_snapshot_restores_output {

    /// A builder for [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful:
            std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>>,
        pub(crate) unsuccessful:
            std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful`.
        ///
        /// To override the contents of this collection use [`set_successful`](Self::set_successful).
        ///
        /// <p>Information about the snapshots for which fast snapshot restores were successfully disabled.</p>
        pub fn successful(
            mut self,
            input: crate::model::DisableFastSnapshotRestoreSuccessItem,
        ) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(input);
            self.successful = Some(v);
            self
        }
        /// <p>Information about the snapshots for which fast snapshot restores were successfully disabled.</p>
        pub fn set_successful(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>,
            >,
        ) -> Self {
            self.successful = input;
            self
        }
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the snapshots for which fast snapshot restores could not be disabled.</p>
        pub fn unsuccessful(
            mut self,
            input: crate::model::DisableFastSnapshotRestoreErrorItem,
        ) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the snapshots for which fast snapshot restores could not be disabled.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>,
            >,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput).
        pub fn build(self) -> crate::output::DisableFastSnapshotRestoresOutput {
            crate::output::DisableFastSnapshotRestoresOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableFastSnapshotRestoresOutput {
    /// Creates a new builder-style object to manufacture [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput).
    pub fn builder() -> crate::output::disable_fast_snapshot_restores_output::Builder {
        crate::output::disable_fast_snapshot_restores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableFastLaunchOutput {
    /// <p>The ID of the image for which faster-launching has been turned off.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The pre-provisioning resource type that must be cleaned after turning off faster launching for the Windows AMI. Supported values include: <code>snapshot</code>.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::model::FastLaunchResourceType>,
    /// <p>Parameters that were used for faster launching for the Windows AMI before faster launching was turned off. This informs the clean-up process.</p>
    #[doc(hidden)]
    pub snapshot_configuration:
        std::option::Option<crate::model::FastLaunchSnapshotConfigurationResponse>,
    /// <p>The launch template that was used to launch Windows instances from pre-provisioned snapshots.</p>
    #[doc(hidden)]
    pub launch_template:
        std::option::Option<crate::model::FastLaunchLaunchTemplateSpecificationResponse>,
    /// <p>The maximum number of parallel instances to launch for creating resources.</p>
    #[doc(hidden)]
    pub max_parallel_launches: std::option::Option<i32>,
    /// <p>The owner of the Windows AMI for which faster launching was turned off.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The current state of faster launching for the specified Windows AMI.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::FastLaunchStateCode>,
    /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
    #[doc(hidden)]
    pub state_transition_reason: std::option::Option<std::string::String>,
    /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
    #[doc(hidden)]
    pub state_transition_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DisableFastLaunchOutput {
    /// <p>The ID of the image for which faster-launching has been turned off.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The pre-provisioning resource type that must be cleaned after turning off faster launching for the Windows AMI. Supported values include: <code>snapshot</code>.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::model::FastLaunchResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>Parameters that were used for faster launching for the Windows AMI before faster launching was turned off. This informs the clean-up process.</p>
    pub fn snapshot_configuration(
        &self,
    ) -> std::option::Option<&crate::model::FastLaunchSnapshotConfigurationResponse> {
        self.snapshot_configuration.as_ref()
    }
    /// <p>The launch template that was used to launch Windows instances from pre-provisioned snapshots.</p>
    pub fn launch_template(
        &self,
    ) -> std::option::Option<&crate::model::FastLaunchLaunchTemplateSpecificationResponse> {
        self.launch_template.as_ref()
    }
    /// <p>The maximum number of parallel instances to launch for creating resources.</p>
    pub fn max_parallel_launches(&self) -> std::option::Option<i32> {
        self.max_parallel_launches
    }
    /// <p>The owner of the Windows AMI for which faster launching was turned off.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The current state of faster launching for the specified Windows AMI.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::FastLaunchStateCode> {
        self.state.as_ref()
    }
    /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
    pub fn state_transition_reason(&self) -> std::option::Option<&str> {
        self.state_transition_reason.as_deref()
    }
    /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
    pub fn state_transition_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.state_transition_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisableFastLaunchOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableFastLaunchOutput`](crate::output::DisableFastLaunchOutput).
pub mod disable_fast_launch_output {

    /// A builder for [`DisableFastLaunchOutput`](crate::output::DisableFastLaunchOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<crate::model::FastLaunchResourceType>,
        pub(crate) snapshot_configuration:
            std::option::Option<crate::model::FastLaunchSnapshotConfigurationResponse>,
        pub(crate) launch_template:
            std::option::Option<crate::model::FastLaunchLaunchTemplateSpecificationResponse>,
        pub(crate) max_parallel_launches: std::option::Option<i32>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::FastLaunchStateCode>,
        pub(crate) state_transition_reason: std::option::Option<std::string::String>,
        pub(crate) state_transition_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the image for which faster-launching has been turned off.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the image for which faster-launching has been turned off.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        /// <p>The pre-provisioning resource type that must be cleaned after turning off faster launching for the Windows AMI. Supported values include: <code>snapshot</code>.</p>
        pub fn resource_type(mut self, input: crate::model::FastLaunchResourceType) -> Self {
            self.resource_type = Some(input);
            self
        }
        /// <p>The pre-provisioning resource type that must be cleaned after turning off faster launching for the Windows AMI. Supported values include: <code>snapshot</code>.</p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<crate::model::FastLaunchResourceType>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>Parameters that were used for faster launching for the Windows AMI before faster launching was turned off. This informs the clean-up process.</p>
        pub fn snapshot_configuration(
            mut self,
            input: crate::model::FastLaunchSnapshotConfigurationResponse,
        ) -> Self {
            self.snapshot_configuration = Some(input);
            self
        }
        /// <p>Parameters that were used for faster launching for the Windows AMI before faster launching was turned off. This informs the clean-up process.</p>
        pub fn set_snapshot_configuration(
            mut self,
            input: std::option::Option<crate::model::FastLaunchSnapshotConfigurationResponse>,
        ) -> Self {
            self.snapshot_configuration = input;
            self
        }
        /// <p>The launch template that was used to launch Windows instances from pre-provisioned snapshots.</p>
        pub fn launch_template(
            mut self,
            input: crate::model::FastLaunchLaunchTemplateSpecificationResponse,
        ) -> Self {
            self.launch_template = Some(input);
            self
        }
        /// <p>The launch template that was used to launch Windows instances from pre-provisioned snapshots.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::FastLaunchLaunchTemplateSpecificationResponse>,
        ) -> Self {
            self.launch_template = input;
            self
        }
        /// <p>The maximum number of parallel instances to launch for creating resources.</p>
        pub fn max_parallel_launches(mut self, input: i32) -> Self {
            self.max_parallel_launches = Some(input);
            self
        }
        /// <p>The maximum number of parallel instances to launch for creating resources.</p>
        pub fn set_max_parallel_launches(mut self, input: std::option::Option<i32>) -> Self {
            self.max_parallel_launches = input;
            self
        }
        /// <p>The owner of the Windows AMI for which faster launching was turned off.</p>
        pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(input.into());
            self
        }
        /// <p>The owner of the Windows AMI for which faster launching was turned off.</p>
        pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_id = input;
            self
        }
        /// <p>The current state of faster launching for the specified Windows AMI.</p>
        pub fn state(mut self, input: crate::model::FastLaunchStateCode) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The current state of faster launching for the specified Windows AMI.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::FastLaunchStateCode>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
        pub fn state_transition_reason(mut self, input: impl Into<std::string::String>) -> Self {
            self.state_transition_reason = Some(input.into());
            self
        }
        /// <p>The reason that the state changed for faster launching for the Windows AMI.</p>
        pub fn set_state_transition_reason(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.state_transition_reason = input;
            self
        }
        /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
        pub fn state_transition_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.state_transition_time = Some(input);
            self
        }
        /// <p>The time that the state changed for faster launching for the Windows AMI.</p>
        pub fn set_state_transition_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.state_transition_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableFastLaunchOutput`](crate::output::DisableFastLaunchOutput).
        pub fn build(self) -> crate::output::DisableFastLaunchOutput {
            crate::output::DisableFastLaunchOutput {
                image_id: self.image_id,
                resource_type: self.resource_type,
                snapshot_configuration: self.snapshot_configuration,
                launch_template: self.launch_template,
                max_parallel_launches: self.max_parallel_launches,
                owner_id: self.owner_id,
                state: self.state,
                state_transition_reason: self.state_transition_reason,
                state_transition_time: self.state_transition_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableFastLaunchOutput {
    /// Creates a new builder-style object to manufacture [`DisableFastLaunchOutput`](crate::output::DisableFastLaunchOutput).
    pub fn builder() -> crate::output::disable_fast_launch_output::Builder {
        crate::output::disable_fast_launch_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableEbsEncryptionByDefaultOutput {
    /// <p>The updated status of encryption by default.</p>
    #[doc(hidden)]
    pub ebs_encryption_by_default: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableEbsEncryptionByDefaultOutput {
    /// <p>The updated status of encryption by default.</p>
    pub fn ebs_encryption_by_default(&self) -> std::option::Option<bool> {
        self.ebs_encryption_by_default
    }
}
impl aws_http::request_id::RequestId for DisableEbsEncryptionByDefaultOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput).
pub mod disable_ebs_encryption_by_default_output {

    /// A builder for [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ebs_encryption_by_default: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The updated status of encryption by default.</p>
        pub fn ebs_encryption_by_default(mut self, input: bool) -> Self {
            self.ebs_encryption_by_default = Some(input);
            self
        }
        /// <p>The updated status of encryption by default.</p>
        pub fn set_ebs_encryption_by_default(mut self, input: std::option::Option<bool>) -> Self {
            self.ebs_encryption_by_default = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput).
        pub fn build(self) -> crate::output::DisableEbsEncryptionByDefaultOutput {
            crate::output::DisableEbsEncryptionByDefaultOutput {
                ebs_encryption_by_default: self.ebs_encryption_by_default,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableEbsEncryptionByDefaultOutput {
    /// Creates a new builder-style object to manufacture [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput).
    pub fn builder() -> crate::output::disable_ebs_encryption_by_default_output::Builder {
        crate::output::disable_ebs_encryption_by_default_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableAwsNetworkPerformanceMetricSubscriptionOutput {
    /// <p>Indicates whether the unsubscribe action was successful.</p>
    #[doc(hidden)]
    pub output: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DisableAwsNetworkPerformanceMetricSubscriptionOutput {
    /// <p>Indicates whether the unsubscribe action was successful.</p>
    pub fn output(&self) -> std::option::Option<bool> {
        self.output
    }
}
impl aws_http::request_id::RequestId for DisableAwsNetworkPerformanceMetricSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::DisableAwsNetworkPerformanceMetricSubscriptionOutput).
pub mod disable_aws_network_performance_metric_subscription_output {

    /// A builder for [`DisableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::DisableAwsNetworkPerformanceMetricSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) output: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether the unsubscribe action was successful.</p>
        pub fn output(mut self, input: bool) -> Self {
            self.output = Some(input);
            self
        }
        /// <p>Indicates whether the unsubscribe action was successful.</p>
        pub fn set_output(mut self, input: std::option::Option<bool>) -> Self {
            self.output = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::DisableAwsNetworkPerformanceMetricSubscriptionOutput).
        pub fn build(self) -> crate::output::DisableAwsNetworkPerformanceMetricSubscriptionOutput {
            crate::output::DisableAwsNetworkPerformanceMetricSubscriptionOutput {
                output: self.output,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableAwsNetworkPerformanceMetricSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DisableAwsNetworkPerformanceMetricSubscriptionOutput`](crate::output::DisableAwsNetworkPerformanceMetricSubscriptionOutput).
    pub fn builder(
    ) -> crate::output::disable_aws_network_performance_metric_subscription_output::Builder {
        crate::output::disable_aws_network_performance_metric_subscription_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableAddressTransferOutput {
    /// <p>An Elastic IP address transfer.</p>
    #[doc(hidden)]
    pub address_transfer: std::option::Option<crate::model::AddressTransfer>,
    _request_id: Option<String>,
}
impl DisableAddressTransferOutput {
    /// <p>An Elastic IP address transfer.</p>
    pub fn address_transfer(&self) -> std::option::Option<&crate::model::AddressTransfer> {
        self.address_transfer.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisableAddressTransferOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableAddressTransferOutput`](crate::output::DisableAddressTransferOutput).
pub mod disable_address_transfer_output {

    /// A builder for [`DisableAddressTransferOutput`](crate::output::DisableAddressTransferOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address_transfer: std::option::Option<crate::model::AddressTransfer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An Elastic IP address transfer.</p>
        pub fn address_transfer(mut self, input: crate::model::AddressTransfer) -> Self {
            self.address_transfer = Some(input);
            self
        }
        /// <p>An Elastic IP address transfer.</p>
        pub fn set_address_transfer(
            mut self,
            input: std::option::Option<crate::model::AddressTransfer>,
        ) -> Self {
            self.address_transfer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableAddressTransferOutput`](crate::output::DisableAddressTransferOutput).
        pub fn build(self) -> crate::output::DisableAddressTransferOutput {
            crate::output::DisableAddressTransferOutput {
                address_transfer: self.address_transfer,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableAddressTransferOutput {
    /// Creates a new builder-style object to manufacture [`DisableAddressTransferOutput`](crate::output::DisableAddressTransferOutput).
    pub fn builder() -> crate::output::disable_address_transfer_output::Builder {
        crate::output::disable_address_transfer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachVpnGatewayOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DetachVpnGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput).
pub mod detach_vpn_gateway_output {

    /// A builder for [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput).
        pub fn build(self) -> crate::output::DetachVpnGatewayOutput {
            crate::output::DetachVpnGatewayOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput).
    pub fn builder() -> crate::output::detach_vpn_gateway_output::Builder {
        crate::output::detach_vpn_gateway_output::Builder::default()
    }
}

/// <p>Describes volume attachment details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachVolumeOutput {
    /// <p>The time stamp when the attachment initiated.</p>
    #[doc(hidden)]
    pub attach_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The device name.</p>
    #[doc(hidden)]
    pub device: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The attachment state of the volume.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::VolumeAttachmentState>,
    /// <p>The ID of the volume.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    #[doc(hidden)]
    pub delete_on_termination: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DetachVolumeOutput {
    /// <p>The time stamp when the attachment initiated.</p>
    pub fn attach_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.attach_time.as_ref()
    }
    /// <p>The device name.</p>
    pub fn device(&self) -> std::option::Option<&str> {
        self.device.as_deref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The attachment state of the volume.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::VolumeAttachmentState> {
        self.state.as_ref()
    }
    /// <p>The ID of the volume.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub fn delete_on_termination(&self) -> std::option::Option<bool> {
        self.delete_on_termination
    }
}
impl aws_http::request_id::RequestId for DetachVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachVolumeOutput`](crate::output::DetachVolumeOutput).
pub mod detach_volume_output {

    /// A builder for [`DetachVolumeOutput`](crate::output::DetachVolumeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attach_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) device: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::VolumeAttachmentState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) delete_on_termination: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The time stamp when the attachment initiated.</p>
        pub fn attach_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.attach_time = Some(input);
            self
        }
        /// <p>The time stamp when the attachment initiated.</p>
        pub fn set_attach_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.attach_time = input;
            self
        }
        /// <p>The device name.</p>
        pub fn device(mut self, input: impl Into<std::string::String>) -> Self {
            self.device = Some(input.into());
            self
        }
        /// <p>The device name.</p>
        pub fn set_device(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.device = input;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>The attachment state of the volume.</p>
        pub fn state(mut self, input: crate::model::VolumeAttachmentState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The attachment state of the volume.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::VolumeAttachmentState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(input.into());
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.volume_id = input;
            self
        }
        /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
        pub fn delete_on_termination(mut self, input: bool) -> Self {
            self.delete_on_termination = Some(input);
            self
        }
        /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
        pub fn set_delete_on_termination(mut self, input: std::option::Option<bool>) -> Self {
            self.delete_on_termination = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachVolumeOutput`](crate::output::DetachVolumeOutput).
        pub fn build(self) -> crate::output::DetachVolumeOutput {
            crate::output::DetachVolumeOutput {
                attach_time: self.attach_time,
                device: self.device,
                instance_id: self.instance_id,
                state: self.state,
                volume_id: self.volume_id,
                delete_on_termination: self.delete_on_termination,
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachVolumeOutput {
    /// Creates a new builder-style object to manufacture [`DetachVolumeOutput`](crate::output::DetachVolumeOutput).
    pub fn builder() -> crate::output::detach_volume_output::Builder {
        crate::output::detach_volume_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub verified_access_trust_provider:
        std::option::Option<crate::model::VerifiedAccessTrustProvider>,
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    #[doc(hidden)]
    pub verified_access_instance: std::option::Option<crate::model::VerifiedAccessInstance>,
    _request_id: Option<String>,
}
impl DetachVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    pub fn verified_access_trust_provider(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessTrustProvider> {
        self.verified_access_trust_provider.as_ref()
    }
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessInstance> {
        self.verified_access_instance.as_ref()
    }
}
impl aws_http::request_id::RequestId for DetachVerifiedAccessTrustProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachVerifiedAccessTrustProviderOutput`](crate::output::DetachVerifiedAccessTrustProviderOutput).
pub mod detach_verified_access_trust_provider_output {

    /// A builder for [`DetachVerifiedAccessTrustProviderOutput`](crate::output::DetachVerifiedAccessTrustProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_trust_provider:
            std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        pub(crate) verified_access_instance:
            std::option::Option<crate::model::VerifiedAccessInstance>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn verified_access_trust_provider(
            mut self,
            input: crate::model::VerifiedAccessTrustProvider,
        ) -> Self {
            self.verified_access_trust_provider = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn set_verified_access_trust_provider(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        ) -> Self {
            self.verified_access_trust_provider = input;
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn verified_access_instance(
            mut self,
            input: crate::model::VerifiedAccessInstance,
        ) -> Self {
            self.verified_access_instance = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn set_verified_access_instance(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessInstance>,
        ) -> Self {
            self.verified_access_instance = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachVerifiedAccessTrustProviderOutput`](crate::output::DetachVerifiedAccessTrustProviderOutput).
        pub fn build(self) -> crate::output::DetachVerifiedAccessTrustProviderOutput {
            crate::output::DetachVerifiedAccessTrustProviderOutput {
                verified_access_trust_provider: self.verified_access_trust_provider,
                verified_access_instance: self.verified_access_instance,
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachVerifiedAccessTrustProviderOutput {
    /// Creates a new builder-style object to manufacture [`DetachVerifiedAccessTrustProviderOutput`](crate::output::DetachVerifiedAccessTrustProviderOutput).
    pub fn builder() -> crate::output::detach_verified_access_trust_provider_output::Builder {
        crate::output::detach_verified_access_trust_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachNetworkInterfaceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DetachNetworkInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput).
pub mod detach_network_interface_output {

    /// A builder for [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput).
        pub fn build(self) -> crate::output::DetachNetworkInterfaceOutput {
            crate::output::DetachNetworkInterfaceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput).
    pub fn builder() -> crate::output::detach_network_interface_output::Builder {
        crate::output::detach_network_interface_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachInternetGatewayOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DetachInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput).
pub mod detach_internet_gateway_output {

    /// A builder for [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput).
        pub fn build(self) -> crate::output::DetachInternetGatewayOutput {
            crate::output::DetachInternetGatewayOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput).
    pub fn builder() -> crate::output::detach_internet_gateway_output::Builder {
        crate::output::detach_internet_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachClassicLinkVpcOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DetachClassicLinkVpcOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DetachClassicLinkVpcOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput).
pub mod detach_classic_link_vpc_output {

    /// A builder for [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput).
        pub fn build(self) -> crate::output::DetachClassicLinkVpcOutput {
            crate::output::DetachClassicLinkVpcOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachClassicLinkVpcOutput {
    /// Creates a new builder-style object to manufacture [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput).
    pub fn builder() -> crate::output::detach_classic_link_vpc_output::Builder {
        crate::output::detach_classic_link_vpc_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeVpnGateways.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpnGatewaysOutput {
    /// <p>Information about one or more virtual private gateways.</p>
    #[doc(hidden)]
    pub vpn_gateways: std::option::Option<std::vec::Vec<crate::model::VpnGateway>>,
    _request_id: Option<String>,
}
impl DescribeVpnGatewaysOutput {
    /// <p>Information about one or more virtual private gateways.</p>
    pub fn vpn_gateways(&self) -> std::option::Option<&[crate::model::VpnGateway]> {
        self.vpn_gateways.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpnGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput).
pub mod describe_vpn_gateways_output {

    /// A builder for [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_gateways: std::option::Option<std::vec::Vec<crate::model::VpnGateway>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpn_gateways`.
        ///
        /// To override the contents of this collection use [`set_vpn_gateways`](Self::set_vpn_gateways).
        ///
        /// <p>Information about one or more virtual private gateways.</p>
        pub fn vpn_gateways(mut self, input: crate::model::VpnGateway) -> Self {
            let mut v = self.vpn_gateways.unwrap_or_default();
            v.push(input);
            self.vpn_gateways = Some(v);
            self
        }
        /// <p>Information about one or more virtual private gateways.</p>
        pub fn set_vpn_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpnGateway>>,
        ) -> Self {
            self.vpn_gateways = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeVpnGatewaysOutput {
            crate::output::DescribeVpnGatewaysOutput {
                vpn_gateways: self.vpn_gateways,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpnGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput).
    pub fn builder() -> crate::output::describe_vpn_gateways_output::Builder {
        crate::output::describe_vpn_gateways_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeVpnConnections.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpnConnectionsOutput {
    /// <p>Information about one or more VPN connections.</p>
    #[doc(hidden)]
    pub vpn_connections: std::option::Option<std::vec::Vec<crate::model::VpnConnection>>,
    _request_id: Option<String>,
}
impl DescribeVpnConnectionsOutput {
    /// <p>Information about one or more VPN connections.</p>
    pub fn vpn_connections(&self) -> std::option::Option<&[crate::model::VpnConnection]> {
        self.vpn_connections.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpnConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput).
pub mod describe_vpn_connections_output {

    /// A builder for [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connections: std::option::Option<std::vec::Vec<crate::model::VpnConnection>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpn_connections`.
        ///
        /// To override the contents of this collection use [`set_vpn_connections`](Self::set_vpn_connections).
        ///
        /// <p>Information about one or more VPN connections.</p>
        pub fn vpn_connections(mut self, input: crate::model::VpnConnection) -> Self {
            let mut v = self.vpn_connections.unwrap_or_default();
            v.push(input);
            self.vpn_connections = Some(v);
            self
        }
        /// <p>Information about one or more VPN connections.</p>
        pub fn set_vpn_connections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpnConnection>>,
        ) -> Self {
            self.vpn_connections = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput).
        pub fn build(self) -> crate::output::DescribeVpnConnectionsOutput {
            crate::output::DescribeVpnConnectionsOutput {
                vpn_connections: self.vpn_connections,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpnConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput).
    pub fn builder() -> crate::output::describe_vpn_connections_output::Builder {
        crate::output::describe_vpn_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcsOutput {
    /// <p>Information about one or more VPCs.</p>
    #[doc(hidden)]
    pub vpcs: std::option::Option<std::vec::Vec<crate::model::Vpc>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcsOutput {
    /// <p>Information about one or more VPCs.</p>
    pub fn vpcs(&self) -> std::option::Option<&[crate::model::Vpc]> {
        self.vpcs.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput).
pub mod describe_vpcs_output {

    /// A builder for [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpcs: std::option::Option<std::vec::Vec<crate::model::Vpc>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpcs`.
        ///
        /// To override the contents of this collection use [`set_vpcs`](Self::set_vpcs).
        ///
        /// <p>Information about one or more VPCs.</p>
        pub fn vpcs(mut self, input: crate::model::Vpc) -> Self {
            let mut v = self.vpcs.unwrap_or_default();
            v.push(input);
            self.vpcs = Some(v);
            self
        }
        /// <p>Information about one or more VPCs.</p>
        pub fn set_vpcs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Vpc>>,
        ) -> Self {
            self.vpcs = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput).
        pub fn build(self) -> crate::output::DescribeVpcsOutput {
            crate::output::DescribeVpcsOutput {
                vpcs: self.vpcs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput).
    pub fn builder() -> crate::output::describe_vpcs_output::Builder {
        crate::output::describe_vpcs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcPeeringConnectionsOutput {
    /// <p>Information about the VPC peering connections.</p>
    #[doc(hidden)]
    pub vpc_peering_connections:
        std::option::Option<std::vec::Vec<crate::model::VpcPeeringConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcPeeringConnectionsOutput {
    /// <p>Information about the VPC peering connections.</p>
    pub fn vpc_peering_connections(
        &self,
    ) -> std::option::Option<&[crate::model::VpcPeeringConnection]> {
        self.vpc_peering_connections.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcPeeringConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput).
pub mod describe_vpc_peering_connections_output {

    /// A builder for [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_peering_connections:
            std::option::Option<std::vec::Vec<crate::model::VpcPeeringConnection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_peering_connections`.
        ///
        /// To override the contents of this collection use [`set_vpc_peering_connections`](Self::set_vpc_peering_connections).
        ///
        /// <p>Information about the VPC peering connections.</p>
        pub fn vpc_peering_connections(
            mut self,
            input: crate::model::VpcPeeringConnection,
        ) -> Self {
            let mut v = self.vpc_peering_connections.unwrap_or_default();
            v.push(input);
            self.vpc_peering_connections = Some(v);
            self
        }
        /// <p>Information about the VPC peering connections.</p>
        pub fn set_vpc_peering_connections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcPeeringConnection>>,
        ) -> Self {
            self.vpc_peering_connections = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput).
        pub fn build(self) -> crate::output::DescribeVpcPeeringConnectionsOutput {
            crate::output::DescribeVpcPeeringConnectionsOutput {
                vpc_peering_connections: self.vpc_peering_connections,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcPeeringConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput).
    pub fn builder() -> crate::output::describe_vpc_peering_connections_output::Builder {
        crate::output::describe_vpc_peering_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcEndpointServicesOutput {
    /// <p>The supported services.</p>
    #[doc(hidden)]
    pub service_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the service.</p>
    #[doc(hidden)]
    pub service_details: std::option::Option<std::vec::Vec<crate::model::ServiceDetail>>,
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcEndpointServicesOutput {
    /// <p>The supported services.</p>
    pub fn service_names(&self) -> std::option::Option<&[std::string::String]> {
        self.service_names.as_deref()
    }
    /// <p>Information about the service.</p>
    pub fn service_details(&self) -> std::option::Option<&[crate::model::ServiceDetail]> {
        self.service_details.as_deref()
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcEndpointServicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput).
pub mod describe_vpc_endpoint_services_output {

    /// A builder for [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_names: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) service_details: std::option::Option<std::vec::Vec<crate::model::ServiceDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `service_names`.
        ///
        /// To override the contents of this collection use [`set_service_names`](Self::set_service_names).
        ///
        /// <p>The supported services.</p>
        pub fn service_names(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.service_names.unwrap_or_default();
            v.push(input.into());
            self.service_names = Some(v);
            self
        }
        /// <p>The supported services.</p>
        pub fn set_service_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.service_names = input;
            self
        }
        /// Appends an item to `service_details`.
        ///
        /// To override the contents of this collection use [`set_service_details`](Self::set_service_details).
        ///
        /// <p>Information about the service.</p>
        pub fn service_details(mut self, input: crate::model::ServiceDetail) -> Self {
            let mut v = self.service_details.unwrap_or_default();
            v.push(input);
            self.service_details = Some(v);
            self
        }
        /// <p>Information about the service.</p>
        pub fn set_service_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceDetail>>,
        ) -> Self {
            self.service_details = input;
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput).
        pub fn build(self) -> crate::output::DescribeVpcEndpointServicesOutput {
            crate::output::DescribeVpcEndpointServicesOutput {
                service_names: self.service_names,
                service_details: self.service_details,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcEndpointServicesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput).
    pub fn builder() -> crate::output::describe_vpc_endpoint_services_output::Builder {
        crate::output::describe_vpc_endpoint_services_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcEndpointServicePermissionsOutput {
    /// <p>Information about the allowed principals.</p>
    #[doc(hidden)]
    pub allowed_principals: std::option::Option<std::vec::Vec<crate::model::AllowedPrincipal>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcEndpointServicePermissionsOutput {
    /// <p>Information about the allowed principals.</p>
    pub fn allowed_principals(&self) -> std::option::Option<&[crate::model::AllowedPrincipal]> {
        self.allowed_principals.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcEndpointServicePermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput).
pub mod describe_vpc_endpoint_service_permissions_output {

    /// A builder for [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) allowed_principals:
            std::option::Option<std::vec::Vec<crate::model::AllowedPrincipal>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `allowed_principals`.
        ///
        /// To override the contents of this collection use [`set_allowed_principals`](Self::set_allowed_principals).
        ///
        /// <p>Information about the allowed principals.</p>
        pub fn allowed_principals(mut self, input: crate::model::AllowedPrincipal) -> Self {
            let mut v = self.allowed_principals.unwrap_or_default();
            v.push(input);
            self.allowed_principals = Some(v);
            self
        }
        /// <p>Information about the allowed principals.</p>
        pub fn set_allowed_principals(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AllowedPrincipal>>,
        ) -> Self {
            self.allowed_principals = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput).
        pub fn build(self) -> crate::output::DescribeVpcEndpointServicePermissionsOutput {
            crate::output::DescribeVpcEndpointServicePermissionsOutput {
                allowed_principals: self.allowed_principals,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcEndpointServicePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput).
    pub fn builder() -> crate::output::describe_vpc_endpoint_service_permissions_output::Builder {
        crate::output::describe_vpc_endpoint_service_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcEndpointServiceConfigurationsOutput {
    /// <p>Information about the services.</p>
    #[doc(hidden)]
    pub service_configurations:
        std::option::Option<std::vec::Vec<crate::model::ServiceConfiguration>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcEndpointServiceConfigurationsOutput {
    /// <p>Information about the services.</p>
    pub fn service_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::ServiceConfiguration]> {
        self.service_configurations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcEndpointServiceConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput).
pub mod describe_vpc_endpoint_service_configurations_output {

    /// A builder for [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_configurations:
            std::option::Option<std::vec::Vec<crate::model::ServiceConfiguration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `service_configurations`.
        ///
        /// To override the contents of this collection use [`set_service_configurations`](Self::set_service_configurations).
        ///
        /// <p>Information about the services.</p>
        pub fn service_configurations(mut self, input: crate::model::ServiceConfiguration) -> Self {
            let mut v = self.service_configurations.unwrap_or_default();
            v.push(input);
            self.service_configurations = Some(v);
            self
        }
        /// <p>Information about the services.</p>
        pub fn set_service_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceConfiguration>>,
        ) -> Self {
            self.service_configurations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput).
        pub fn build(self) -> crate::output::DescribeVpcEndpointServiceConfigurationsOutput {
            crate::output::DescribeVpcEndpointServiceConfigurationsOutput {
                service_configurations: self.service_configurations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcEndpointServiceConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput).
    pub fn builder() -> crate::output::describe_vpc_endpoint_service_configurations_output::Builder
    {
        crate::output::describe_vpc_endpoint_service_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcEndpointsOutput {
    /// <p>Information about the endpoints.</p>
    #[doc(hidden)]
    pub vpc_endpoints: std::option::Option<std::vec::Vec<crate::model::VpcEndpoint>>,
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcEndpointsOutput {
    /// <p>Information about the endpoints.</p>
    pub fn vpc_endpoints(&self) -> std::option::Option<&[crate::model::VpcEndpoint]> {
        self.vpc_endpoints.as_deref()
    }
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput).
pub mod describe_vpc_endpoints_output {

    /// A builder for [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoints: std::option::Option<std::vec::Vec<crate::model::VpcEndpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_endpoints`.
        ///
        /// To override the contents of this collection use [`set_vpc_endpoints`](Self::set_vpc_endpoints).
        ///
        /// <p>Information about the endpoints.</p>
        pub fn vpc_endpoints(mut self, input: crate::model::VpcEndpoint) -> Self {
            let mut v = self.vpc_endpoints.unwrap_or_default();
            v.push(input);
            self.vpc_endpoints = Some(v);
            self
        }
        /// <p>Information about the endpoints.</p>
        pub fn set_vpc_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcEndpoint>>,
        ) -> Self {
            self.vpc_endpoints = input;
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput).
        pub fn build(self) -> crate::output::DescribeVpcEndpointsOutput {
            crate::output::DescribeVpcEndpointsOutput {
                vpc_endpoints: self.vpc_endpoints,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput).
    pub fn builder() -> crate::output::describe_vpc_endpoints_output::Builder {
        crate::output::describe_vpc_endpoints_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcEndpointConnectionsOutput {
    /// <p>Information about the VPC endpoint connections.</p>
    #[doc(hidden)]
    pub vpc_endpoint_connections:
        std::option::Option<std::vec::Vec<crate::model::VpcEndpointConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcEndpointConnectionsOutput {
    /// <p>Information about the VPC endpoint connections.</p>
    pub fn vpc_endpoint_connections(
        &self,
    ) -> std::option::Option<&[crate::model::VpcEndpointConnection]> {
        self.vpc_endpoint_connections.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcEndpointConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput).
pub mod describe_vpc_endpoint_connections_output {

    /// A builder for [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoint_connections:
            std::option::Option<std::vec::Vec<crate::model::VpcEndpointConnection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_endpoint_connections`.
        ///
        /// To override the contents of this collection use [`set_vpc_endpoint_connections`](Self::set_vpc_endpoint_connections).
        ///
        /// <p>Information about the VPC endpoint connections.</p>
        pub fn vpc_endpoint_connections(
            mut self,
            input: crate::model::VpcEndpointConnection,
        ) -> Self {
            let mut v = self.vpc_endpoint_connections.unwrap_or_default();
            v.push(input);
            self.vpc_endpoint_connections = Some(v);
            self
        }
        /// <p>Information about the VPC endpoint connections.</p>
        pub fn set_vpc_endpoint_connections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcEndpointConnection>>,
        ) -> Self {
            self.vpc_endpoint_connections = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput).
        pub fn build(self) -> crate::output::DescribeVpcEndpointConnectionsOutput {
            crate::output::DescribeVpcEndpointConnectionsOutput {
                vpc_endpoint_connections: self.vpc_endpoint_connections,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcEndpointConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput).
    pub fn builder() -> crate::output::describe_vpc_endpoint_connections_output::Builder {
        crate::output::describe_vpc_endpoint_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcEndpointConnectionNotificationsOutput {
    /// <p>The notifications.</p>
    #[doc(hidden)]
    pub connection_notification_set:
        std::option::Option<std::vec::Vec<crate::model::ConnectionNotification>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVpcEndpointConnectionNotificationsOutput {
    /// <p>The notifications.</p>
    pub fn connection_notification_set(
        &self,
    ) -> std::option::Option<&[crate::model::ConnectionNotification]> {
        self.connection_notification_set.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcEndpointConnectionNotificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput).
pub mod describe_vpc_endpoint_connection_notifications_output {

    /// A builder for [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_notification_set:
            std::option::Option<std::vec::Vec<crate::model::ConnectionNotification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `connection_notification_set`.
        ///
        /// To override the contents of this collection use [`set_connection_notification_set`](Self::set_connection_notification_set).
        ///
        /// <p>The notifications.</p>
        pub fn connection_notification_set(
            mut self,
            input: crate::model::ConnectionNotification,
        ) -> Self {
            let mut v = self.connection_notification_set.unwrap_or_default();
            v.push(input);
            self.connection_notification_set = Some(v);
            self
        }
        /// <p>The notifications.</p>
        pub fn set_connection_notification_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConnectionNotification>>,
        ) -> Self {
            self.connection_notification_set = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput).
        pub fn build(self) -> crate::output::DescribeVpcEndpointConnectionNotificationsOutput {
            crate::output::DescribeVpcEndpointConnectionNotificationsOutput {
                connection_notification_set: self.connection_notification_set,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcEndpointConnectionNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput).
    pub fn builder() -> crate::output::describe_vpc_endpoint_connection_notifications_output::Builder
    {
        crate::output::describe_vpc_endpoint_connection_notifications_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcClassicLinkDnsSupportOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the ClassicLink DNS support status of the VPCs.</p>
    #[doc(hidden)]
    pub vpcs: std::option::Option<std::vec::Vec<crate::model::ClassicLinkDnsSupport>>,
    _request_id: Option<String>,
}
impl DescribeVpcClassicLinkDnsSupportOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the ClassicLink DNS support status of the VPCs.</p>
    pub fn vpcs(&self) -> std::option::Option<&[crate::model::ClassicLinkDnsSupport]> {
        self.vpcs.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcClassicLinkDnsSupportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput).
pub mod describe_vpc_classic_link_dns_support_output {

    /// A builder for [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) vpcs: std::option::Option<std::vec::Vec<crate::model::ClassicLinkDnsSupport>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `vpcs`.
        ///
        /// To override the contents of this collection use [`set_vpcs`](Self::set_vpcs).
        ///
        /// <p>Information about the ClassicLink DNS support status of the VPCs.</p>
        pub fn vpcs(mut self, input: crate::model::ClassicLinkDnsSupport) -> Self {
            let mut v = self.vpcs.unwrap_or_default();
            v.push(input);
            self.vpcs = Some(v);
            self
        }
        /// <p>Information about the ClassicLink DNS support status of the VPCs.</p>
        pub fn set_vpcs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClassicLinkDnsSupport>>,
        ) -> Self {
            self.vpcs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput).
        pub fn build(self) -> crate::output::DescribeVpcClassicLinkDnsSupportOutput {
            crate::output::DescribeVpcClassicLinkDnsSupportOutput {
                next_token: self.next_token,
                vpcs: self.vpcs,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcClassicLinkDnsSupportOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput).
    pub fn builder() -> crate::output::describe_vpc_classic_link_dns_support_output::Builder {
        crate::output::describe_vpc_classic_link_dns_support_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcClassicLinkOutput {
    /// <p>The ClassicLink status of one or more VPCs.</p>
    #[doc(hidden)]
    pub vpcs: std::option::Option<std::vec::Vec<crate::model::VpcClassicLink>>,
    _request_id: Option<String>,
}
impl DescribeVpcClassicLinkOutput {
    /// <p>The ClassicLink status of one or more VPCs.</p>
    pub fn vpcs(&self) -> std::option::Option<&[crate::model::VpcClassicLink]> {
        self.vpcs.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcClassicLinkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput).
pub mod describe_vpc_classic_link_output {

    /// A builder for [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpcs: std::option::Option<std::vec::Vec<crate::model::VpcClassicLink>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpcs`.
        ///
        /// To override the contents of this collection use [`set_vpcs`](Self::set_vpcs).
        ///
        /// <p>The ClassicLink status of one or more VPCs.</p>
        pub fn vpcs(mut self, input: crate::model::VpcClassicLink) -> Self {
            let mut v = self.vpcs.unwrap_or_default();
            v.push(input);
            self.vpcs = Some(v);
            self
        }
        /// <p>The ClassicLink status of one or more VPCs.</p>
        pub fn set_vpcs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcClassicLink>>,
        ) -> Self {
            self.vpcs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput).
        pub fn build(self) -> crate::output::DescribeVpcClassicLinkOutput {
            crate::output::DescribeVpcClassicLinkOutput {
                vpcs: self.vpcs,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcClassicLinkOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput).
    pub fn builder() -> crate::output::describe_vpc_classic_link_output::Builder {
        crate::output::describe_vpc_classic_link_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcAttributeOutput {
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
    #[doc(hidden)]
    pub enable_dns_hostnames: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
    #[doc(hidden)]
    pub enable_dns_support: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether Network Address Usage metrics are enabled for your VPC.</p>
    #[doc(hidden)]
    pub enable_network_address_usage_metrics:
        std::option::Option<crate::model::AttributeBooleanValue>,
    _request_id: Option<String>,
}
impl DescribeVpcAttributeOutput {
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
    pub fn enable_dns_hostnames(
        &self,
    ) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.enable_dns_hostnames.as_ref()
    }
    /// <p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
    pub fn enable_dns_support(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.enable_dns_support.as_ref()
    }
    /// <p>Indicates whether Network Address Usage metrics are enabled for your VPC.</p>
    pub fn enable_network_address_usage_metrics(
        &self,
    ) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.enable_network_address_usage_metrics.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput).
pub mod describe_vpc_attribute_output {

    /// A builder for [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_id: std::option::Option<std::string::String>,
        pub(crate) enable_dns_hostnames: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) enable_dns_support: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) enable_network_address_usage_metrics:
            std::option::Option<crate::model::AttributeBooleanValue>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the VPC.</p>
        pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(input.into());
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = input;
            self
        }
        /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
        pub fn enable_dns_hostnames(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.enable_dns_hostnames = Some(input);
            self
        }
        /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
        pub fn set_enable_dns_hostnames(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.enable_dns_hostnames = input;
            self
        }
        /// <p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
        pub fn enable_dns_support(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.enable_dns_support = Some(input);
            self
        }
        /// <p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
        pub fn set_enable_dns_support(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.enable_dns_support = input;
            self
        }
        /// <p>Indicates whether Network Address Usage metrics are enabled for your VPC.</p>
        pub fn enable_network_address_usage_metrics(
            mut self,
            input: crate::model::AttributeBooleanValue,
        ) -> Self {
            self.enable_network_address_usage_metrics = Some(input);
            self
        }
        /// <p>Indicates whether Network Address Usage metrics are enabled for your VPC.</p>
        pub fn set_enable_network_address_usage_metrics(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.enable_network_address_usage_metrics = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput).
        pub fn build(self) -> crate::output::DescribeVpcAttributeOutput {
            crate::output::DescribeVpcAttributeOutput {
                vpc_id: self.vpc_id,
                enable_dns_hostnames: self.enable_dns_hostnames,
                enable_dns_support: self.enable_dns_support,
                enable_network_address_usage_metrics: self.enable_network_address_usage_metrics,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVpcAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput).
    pub fn builder() -> crate::output::describe_vpc_attribute_output::Builder {
        crate::output::describe_vpc_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVolumeStatusOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the status of the volumes.</p>
    #[doc(hidden)]
    pub volume_statuses: std::option::Option<std::vec::Vec<crate::model::VolumeStatusItem>>,
    _request_id: Option<String>,
}
impl DescribeVolumeStatusOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the status of the volumes.</p>
    pub fn volume_statuses(&self) -> std::option::Option<&[crate::model::VolumeStatusItem]> {
        self.volume_statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVolumeStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput).
pub mod describe_volume_status_output {

    /// A builder for [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) volume_statuses:
            std::option::Option<std::vec::Vec<crate::model::VolumeStatusItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `volume_statuses`.
        ///
        /// To override the contents of this collection use [`set_volume_statuses`](Self::set_volume_statuses).
        ///
        /// <p>Information about the status of the volumes.</p>
        pub fn volume_statuses(mut self, input: crate::model::VolumeStatusItem) -> Self {
            let mut v = self.volume_statuses.unwrap_or_default();
            v.push(input);
            self.volume_statuses = Some(v);
            self
        }
        /// <p>Information about the status of the volumes.</p>
        pub fn set_volume_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VolumeStatusItem>>,
        ) -> Self {
            self.volume_statuses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput).
        pub fn build(self) -> crate::output::DescribeVolumeStatusOutput {
            crate::output::DescribeVolumeStatusOutput {
                next_token: self.next_token,
                volume_statuses: self.volume_statuses,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVolumeStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput).
    pub fn builder() -> crate::output::describe_volume_status_output::Builder {
        crate::output::describe_volume_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVolumesModificationsOutput {
    /// <p>Information about the volume modifications.</p>
    #[doc(hidden)]
    pub volumes_modifications: std::option::Option<std::vec::Vec<crate::model::VolumeModification>>,
    /// <p>Token for pagination, null if there are no more results </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVolumesModificationsOutput {
    /// <p>Information about the volume modifications.</p>
    pub fn volumes_modifications(
        &self,
    ) -> std::option::Option<&[crate::model::VolumeModification]> {
        self.volumes_modifications.as_deref()
    }
    /// <p>Token for pagination, null if there are no more results </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVolumesModificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput).
pub mod describe_volumes_modifications_output {

    /// A builder for [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) volumes_modifications:
            std::option::Option<std::vec::Vec<crate::model::VolumeModification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `volumes_modifications`.
        ///
        /// To override the contents of this collection use [`set_volumes_modifications`](Self::set_volumes_modifications).
        ///
        /// <p>Information about the volume modifications.</p>
        pub fn volumes_modifications(mut self, input: crate::model::VolumeModification) -> Self {
            let mut v = self.volumes_modifications.unwrap_or_default();
            v.push(input);
            self.volumes_modifications = Some(v);
            self
        }
        /// <p>Information about the volume modifications.</p>
        pub fn set_volumes_modifications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VolumeModification>>,
        ) -> Self {
            self.volumes_modifications = input;
            self
        }
        /// <p>Token for pagination, null if there are no more results </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Token for pagination, null if there are no more results </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput).
        pub fn build(self) -> crate::output::DescribeVolumesModificationsOutput {
            crate::output::DescribeVolumesModificationsOutput {
                volumes_modifications: self.volumes_modifications,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVolumesModificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput).
    pub fn builder() -> crate::output::describe_volumes_modifications_output::Builder {
        crate::output::describe_volumes_modifications_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVolumesOutput {
    /// <p>Information about the volumes.</p>
    #[doc(hidden)]
    pub volumes: std::option::Option<std::vec::Vec<crate::model::Volume>>,
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVolumesOutput {
    /// <p>Information about the volumes.</p>
    pub fn volumes(&self) -> std::option::Option<&[crate::model::Volume]> {
        self.volumes.as_deref()
    }
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVolumesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput).
pub mod describe_volumes_output {

    /// A builder for [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) volumes: std::option::Option<std::vec::Vec<crate::model::Volume>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `volumes`.
        ///
        /// To override the contents of this collection use [`set_volumes`](Self::set_volumes).
        ///
        /// <p>Information about the volumes.</p>
        pub fn volumes(mut self, input: crate::model::Volume) -> Self {
            let mut v = self.volumes.unwrap_or_default();
            v.push(input);
            self.volumes = Some(v);
            self
        }
        /// <p>Information about the volumes.</p>
        pub fn set_volumes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Volume>>,
        ) -> Self {
            self.volumes = input;
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput).
        pub fn build(self) -> crate::output::DescribeVolumesOutput {
            crate::output::DescribeVolumesOutput {
                volumes: self.volumes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVolumesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput).
    pub fn builder() -> crate::output::describe_volumes_output::Builder {
        crate::output::describe_volumes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVolumeAttributeOutput {
    /// <p>The state of <code>autoEnableIO</code> attribute.</p>
    #[doc(hidden)]
    pub auto_enable_io: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>A list of product codes.</p>
    #[doc(hidden)]
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>The ID of the volume.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVolumeAttributeOutput {
    /// <p>The state of <code>autoEnableIO</code> attribute.</p>
    pub fn auto_enable_io(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.auto_enable_io.as_ref()
    }
    /// <p>A list of product codes.</p>
    pub fn product_codes(&self) -> std::option::Option<&[crate::model::ProductCode]> {
        self.product_codes.as_deref()
    }
    /// <p>The ID of the volume.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVolumeAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput).
pub mod describe_volume_attribute_output {

    /// A builder for [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_enable_io: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The state of <code>autoEnableIO</code> attribute.</p>
        pub fn auto_enable_io(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.auto_enable_io = Some(input);
            self
        }
        /// <p>The state of <code>autoEnableIO</code> attribute.</p>
        pub fn set_auto_enable_io(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.auto_enable_io = input;
            self
        }
        /// Appends an item to `product_codes`.
        ///
        /// To override the contents of this collection use [`set_product_codes`](Self::set_product_codes).
        ///
        /// <p>A list of product codes.</p>
        pub fn product_codes(mut self, input: crate::model::ProductCode) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(input);
            self.product_codes = Some(v);
            self
        }
        /// <p>A list of product codes.</p>
        pub fn set_product_codes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = input;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(input.into());
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.volume_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput).
        pub fn build(self) -> crate::output::DescribeVolumeAttributeOutput {
            crate::output::DescribeVolumeAttributeOutput {
                auto_enable_io: self.auto_enable_io,
                product_codes: self.product_codes,
                volume_id: self.volume_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVolumeAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput).
    pub fn builder() -> crate::output::describe_volume_attribute_output::Builder {
        crate::output::describe_volume_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVerifiedAccessTrustProvidersOutput {
    /// <p>The IDs of the Amazon Web Services Verified Access trust providers.</p>
    #[doc(hidden)]
    pub verified_access_trust_providers:
        std::option::Option<std::vec::Vec<crate::model::VerifiedAccessTrustProvider>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVerifiedAccessTrustProvidersOutput {
    /// <p>The IDs of the Amazon Web Services Verified Access trust providers.</p>
    pub fn verified_access_trust_providers(
        &self,
    ) -> std::option::Option<&[crate::model::VerifiedAccessTrustProvider]> {
        self.verified_access_trust_providers.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVerifiedAccessTrustProvidersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVerifiedAccessTrustProvidersOutput`](crate::output::DescribeVerifiedAccessTrustProvidersOutput).
pub mod describe_verified_access_trust_providers_output {

    /// A builder for [`DescribeVerifiedAccessTrustProvidersOutput`](crate::output::DescribeVerifiedAccessTrustProvidersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_trust_providers:
            std::option::Option<std::vec::Vec<crate::model::VerifiedAccessTrustProvider>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `verified_access_trust_providers`.
        ///
        /// To override the contents of this collection use [`set_verified_access_trust_providers`](Self::set_verified_access_trust_providers).
        ///
        /// <p>The IDs of the Amazon Web Services Verified Access trust providers.</p>
        pub fn verified_access_trust_providers(
            mut self,
            input: crate::model::VerifiedAccessTrustProvider,
        ) -> Self {
            let mut v = self.verified_access_trust_providers.unwrap_or_default();
            v.push(input);
            self.verified_access_trust_providers = Some(v);
            self
        }
        /// <p>The IDs of the Amazon Web Services Verified Access trust providers.</p>
        pub fn set_verified_access_trust_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VerifiedAccessTrustProvider>>,
        ) -> Self {
            self.verified_access_trust_providers = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVerifiedAccessTrustProvidersOutput`](crate::output::DescribeVerifiedAccessTrustProvidersOutput).
        pub fn build(self) -> crate::output::DescribeVerifiedAccessTrustProvidersOutput {
            crate::output::DescribeVerifiedAccessTrustProvidersOutput {
                verified_access_trust_providers: self.verified_access_trust_providers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVerifiedAccessTrustProvidersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVerifiedAccessTrustProvidersOutput`](crate::output::DescribeVerifiedAccessTrustProvidersOutput).
    pub fn builder() -> crate::output::describe_verified_access_trust_providers_output::Builder {
        crate::output::describe_verified_access_trust_providers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVerifiedAccessInstancesOutput {
    /// <p>The IDs of the Amazon Web Services Verified Access instances.</p>
    #[doc(hidden)]
    pub verified_access_instances:
        std::option::Option<std::vec::Vec<crate::model::VerifiedAccessInstance>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVerifiedAccessInstancesOutput {
    /// <p>The IDs of the Amazon Web Services Verified Access instances.</p>
    pub fn verified_access_instances(
        &self,
    ) -> std::option::Option<&[crate::model::VerifiedAccessInstance]> {
        self.verified_access_instances.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVerifiedAccessInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVerifiedAccessInstancesOutput`](crate::output::DescribeVerifiedAccessInstancesOutput).
pub mod describe_verified_access_instances_output {

    /// A builder for [`DescribeVerifiedAccessInstancesOutput`](crate::output::DescribeVerifiedAccessInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_instances:
            std::option::Option<std::vec::Vec<crate::model::VerifiedAccessInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `verified_access_instances`.
        ///
        /// To override the contents of this collection use [`set_verified_access_instances`](Self::set_verified_access_instances).
        ///
        /// <p>The IDs of the Amazon Web Services Verified Access instances.</p>
        pub fn verified_access_instances(
            mut self,
            input: crate::model::VerifiedAccessInstance,
        ) -> Self {
            let mut v = self.verified_access_instances.unwrap_or_default();
            v.push(input);
            self.verified_access_instances = Some(v);
            self
        }
        /// <p>The IDs of the Amazon Web Services Verified Access instances.</p>
        pub fn set_verified_access_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VerifiedAccessInstance>>,
        ) -> Self {
            self.verified_access_instances = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVerifiedAccessInstancesOutput`](crate::output::DescribeVerifiedAccessInstancesOutput).
        pub fn build(self) -> crate::output::DescribeVerifiedAccessInstancesOutput {
            crate::output::DescribeVerifiedAccessInstancesOutput {
                verified_access_instances: self.verified_access_instances,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVerifiedAccessInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVerifiedAccessInstancesOutput`](crate::output::DescribeVerifiedAccessInstancesOutput).
    pub fn builder() -> crate::output::describe_verified_access_instances_output::Builder {
        crate::output::describe_verified_access_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVerifiedAccessInstanceLoggingConfigurationsOutput {
    /// <p>The current logging configuration for the Amazon Web Services Verified Access instances.</p>
    #[doc(hidden)]
    pub logging_configurations: std::option::Option<
        std::vec::Vec<crate::model::VerifiedAccessInstanceLoggingConfiguration>,
    >,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVerifiedAccessInstanceLoggingConfigurationsOutput {
    /// <p>The current logging configuration for the Amazon Web Services Verified Access instances.</p>
    pub fn logging_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::VerifiedAccessInstanceLoggingConfiguration]> {
        self.logging_configurations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVerifiedAccessInstanceLoggingConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVerifiedAccessInstanceLoggingConfigurationsOutput`](crate::output::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput).
pub mod describe_verified_access_instance_logging_configurations_output {

    /// A builder for [`DescribeVerifiedAccessInstanceLoggingConfigurationsOutput`](crate::output::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) logging_configurations: std::option::Option<
            std::vec::Vec<crate::model::VerifiedAccessInstanceLoggingConfiguration>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `logging_configurations`.
        ///
        /// To override the contents of this collection use [`set_logging_configurations`](Self::set_logging_configurations).
        ///
        /// <p>The current logging configuration for the Amazon Web Services Verified Access instances.</p>
        pub fn logging_configurations(
            mut self,
            input: crate::model::VerifiedAccessInstanceLoggingConfiguration,
        ) -> Self {
            let mut v = self.logging_configurations.unwrap_or_default();
            v.push(input);
            self.logging_configurations = Some(v);
            self
        }
        /// <p>The current logging configuration for the Amazon Web Services Verified Access instances.</p>
        pub fn set_logging_configurations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::VerifiedAccessInstanceLoggingConfiguration>,
            >,
        ) -> Self {
            self.logging_configurations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVerifiedAccessInstanceLoggingConfigurationsOutput`](crate::output::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput).
        pub fn build(
            self,
        ) -> crate::output::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput {
            crate::output::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput {
                logging_configurations: self.logging_configurations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVerifiedAccessInstanceLoggingConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVerifiedAccessInstanceLoggingConfigurationsOutput`](crate::output::DescribeVerifiedAccessInstanceLoggingConfigurationsOutput).
    pub fn builder(
    ) -> crate::output::describe_verified_access_instance_logging_configurations_output::Builder
    {
        crate::output::describe_verified_access_instance_logging_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVerifiedAccessGroupsOutput {
    /// <p>The ID of the Verified Access group.</p>
    #[doc(hidden)]
    pub verified_access_groups:
        std::option::Option<std::vec::Vec<crate::model::VerifiedAccessGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVerifiedAccessGroupsOutput {
    /// <p>The ID of the Verified Access group.</p>
    pub fn verified_access_groups(
        &self,
    ) -> std::option::Option<&[crate::model::VerifiedAccessGroup]> {
        self.verified_access_groups.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVerifiedAccessGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVerifiedAccessGroupsOutput`](crate::output::DescribeVerifiedAccessGroupsOutput).
pub mod describe_verified_access_groups_output {

    /// A builder for [`DescribeVerifiedAccessGroupsOutput`](crate::output::DescribeVerifiedAccessGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_groups:
            std::option::Option<std::vec::Vec<crate::model::VerifiedAccessGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `verified_access_groups`.
        ///
        /// To override the contents of this collection use [`set_verified_access_groups`](Self::set_verified_access_groups).
        ///
        /// <p>The ID of the Verified Access group.</p>
        pub fn verified_access_groups(mut self, input: crate::model::VerifiedAccessGroup) -> Self {
            let mut v = self.verified_access_groups.unwrap_or_default();
            v.push(input);
            self.verified_access_groups = Some(v);
            self
        }
        /// <p>The ID of the Verified Access group.</p>
        pub fn set_verified_access_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VerifiedAccessGroup>>,
        ) -> Self {
            self.verified_access_groups = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVerifiedAccessGroupsOutput`](crate::output::DescribeVerifiedAccessGroupsOutput).
        pub fn build(self) -> crate::output::DescribeVerifiedAccessGroupsOutput {
            crate::output::DescribeVerifiedAccessGroupsOutput {
                verified_access_groups: self.verified_access_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVerifiedAccessGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVerifiedAccessGroupsOutput`](crate::output::DescribeVerifiedAccessGroupsOutput).
    pub fn builder() -> crate::output::describe_verified_access_groups_output::Builder {
        crate::output::describe_verified_access_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVerifiedAccessEndpointsOutput {
    /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
    #[doc(hidden)]
    pub verified_access_endpoints:
        std::option::Option<std::vec::Vec<crate::model::VerifiedAccessEndpoint>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVerifiedAccessEndpointsOutput {
    /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
    pub fn verified_access_endpoints(
        &self,
    ) -> std::option::Option<&[crate::model::VerifiedAccessEndpoint]> {
        self.verified_access_endpoints.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVerifiedAccessEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVerifiedAccessEndpointsOutput`](crate::output::DescribeVerifiedAccessEndpointsOutput).
pub mod describe_verified_access_endpoints_output {

    /// A builder for [`DescribeVerifiedAccessEndpointsOutput`](crate::output::DescribeVerifiedAccessEndpointsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_endpoints:
            std::option::Option<std::vec::Vec<crate::model::VerifiedAccessEndpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `verified_access_endpoints`.
        ///
        /// To override the contents of this collection use [`set_verified_access_endpoints`](Self::set_verified_access_endpoints).
        ///
        /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
        pub fn verified_access_endpoints(
            mut self,
            input: crate::model::VerifiedAccessEndpoint,
        ) -> Self {
            let mut v = self.verified_access_endpoints.unwrap_or_default();
            v.push(input);
            self.verified_access_endpoints = Some(v);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
        pub fn set_verified_access_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VerifiedAccessEndpoint>>,
        ) -> Self {
            self.verified_access_endpoints = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVerifiedAccessEndpointsOutput`](crate::output::DescribeVerifiedAccessEndpointsOutput).
        pub fn build(self) -> crate::output::DescribeVerifiedAccessEndpointsOutput {
            crate::output::DescribeVerifiedAccessEndpointsOutput {
                verified_access_endpoints: self.verified_access_endpoints,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVerifiedAccessEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVerifiedAccessEndpointsOutput`](crate::output::DescribeVerifiedAccessEndpointsOutput).
    pub fn builder() -> crate::output::describe_verified_access_endpoints_output::Builder {
        crate::output::describe_verified_access_endpoints_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTrunkInterfaceAssociationsOutput {
    /// <p>Information about the trunk associations.</p>
    #[doc(hidden)]
    pub interface_associations:
        std::option::Option<std::vec::Vec<crate::model::TrunkInterfaceAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTrunkInterfaceAssociationsOutput {
    /// <p>Information about the trunk associations.</p>
    pub fn interface_associations(
        &self,
    ) -> std::option::Option<&[crate::model::TrunkInterfaceAssociation]> {
        self.interface_associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTrunkInterfaceAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTrunkInterfaceAssociationsOutput`](crate::output::DescribeTrunkInterfaceAssociationsOutput).
pub mod describe_trunk_interface_associations_output {

    /// A builder for [`DescribeTrunkInterfaceAssociationsOutput`](crate::output::DescribeTrunkInterfaceAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) interface_associations:
            std::option::Option<std::vec::Vec<crate::model::TrunkInterfaceAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `interface_associations`.
        ///
        /// To override the contents of this collection use [`set_interface_associations`](Self::set_interface_associations).
        ///
        /// <p>Information about the trunk associations.</p>
        pub fn interface_associations(
            mut self,
            input: crate::model::TrunkInterfaceAssociation,
        ) -> Self {
            let mut v = self.interface_associations.unwrap_or_default();
            v.push(input);
            self.interface_associations = Some(v);
            self
        }
        /// <p>Information about the trunk associations.</p>
        pub fn set_interface_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrunkInterfaceAssociation>>,
        ) -> Self {
            self.interface_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrunkInterfaceAssociationsOutput`](crate::output::DescribeTrunkInterfaceAssociationsOutput).
        pub fn build(self) -> crate::output::DescribeTrunkInterfaceAssociationsOutput {
            crate::output::DescribeTrunkInterfaceAssociationsOutput {
                interface_associations: self.interface_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTrunkInterfaceAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrunkInterfaceAssociationsOutput`](crate::output::DescribeTrunkInterfaceAssociationsOutput).
    pub fn builder() -> crate::output::describe_trunk_interface_associations_output::Builder {
        crate::output::describe_trunk_interface_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayVpcAttachmentsOutput {
    /// <p>Information about the VPC attachments.</p>
    #[doc(hidden)]
    pub transit_gateway_vpc_attachments:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayVpcAttachment>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayVpcAttachmentsOutput {
    /// <p>Information about the VPC attachments.</p>
    pub fn transit_gateway_vpc_attachments(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayVpcAttachment]> {
        self.transit_gateway_vpc_attachments.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayVpcAttachmentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput).
pub mod describe_transit_gateway_vpc_attachments_output {

    /// A builder for [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachments:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayVpcAttachment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_vpc_attachments`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_vpc_attachments`](Self::set_transit_gateway_vpc_attachments).
        ///
        /// <p>Information about the VPC attachments.</p>
        pub fn transit_gateway_vpc_attachments(
            mut self,
            input: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            let mut v = self.transit_gateway_vpc_attachments.unwrap_or_default();
            v.push(input);
            self.transit_gateway_vpc_attachments = Some(v);
            self
        }
        /// <p>Information about the VPC attachments.</p>
        pub fn set_transit_gateway_vpc_attachments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayVpcAttachment>>,
        ) -> Self {
            self.transit_gateway_vpc_attachments = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayVpcAttachmentsOutput {
            crate::output::DescribeTransitGatewayVpcAttachmentsOutput {
                transit_gateway_vpc_attachments: self.transit_gateway_vpc_attachments,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayVpcAttachmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_vpc_attachments_output::Builder {
        crate::output::describe_transit_gateway_vpc_attachments_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewaysOutput {
    /// <p>Information about the transit gateways.</p>
    #[doc(hidden)]
    pub transit_gateways: std::option::Option<std::vec::Vec<crate::model::TransitGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewaysOutput {
    /// <p>Information about the transit gateways.</p>
    pub fn transit_gateways(&self) -> std::option::Option<&[crate::model::TransitGateway]> {
        self.transit_gateways.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput).
pub mod describe_transit_gateways_output {

    /// A builder for [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateways:
            std::option::Option<std::vec::Vec<crate::model::TransitGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateways`.
        ///
        /// To override the contents of this collection use [`set_transit_gateways`](Self::set_transit_gateways).
        ///
        /// <p>Information about the transit gateways.</p>
        pub fn transit_gateways(mut self, input: crate::model::TransitGateway) -> Self {
            let mut v = self.transit_gateways.unwrap_or_default();
            v.push(input);
            self.transit_gateways = Some(v);
            self
        }
        /// <p>Information about the transit gateways.</p>
        pub fn set_transit_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGateway>>,
        ) -> Self {
            self.transit_gateways = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewaysOutput {
            crate::output::DescribeTransitGatewaysOutput {
                transit_gateways: self.transit_gateways,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput).
    pub fn builder() -> crate::output::describe_transit_gateways_output::Builder {
        crate::output::describe_transit_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayRouteTablesOutput {
    /// <p>Information about the transit gateway route tables.</p>
    #[doc(hidden)]
    pub transit_gateway_route_tables:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTable>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayRouteTablesOutput {
    /// <p>Information about the transit gateway route tables.</p>
    pub fn transit_gateway_route_tables(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayRouteTable]> {
        self.transit_gateway_route_tables.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayRouteTablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput).
pub mod describe_transit_gateway_route_tables_output {

    /// A builder for [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_tables:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_route_tables`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_route_tables`](Self::set_transit_gateway_route_tables).
        ///
        /// <p>Information about the transit gateway route tables.</p>
        pub fn transit_gateway_route_tables(
            mut self,
            input: crate::model::TransitGatewayRouteTable,
        ) -> Self {
            let mut v = self.transit_gateway_route_tables.unwrap_or_default();
            v.push(input);
            self.transit_gateway_route_tables = Some(v);
            self
        }
        /// <p>Information about the transit gateway route tables.</p>
        pub fn set_transit_gateway_route_tables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTable>>,
        ) -> Self {
            self.transit_gateway_route_tables = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayRouteTablesOutput {
            crate::output::DescribeTransitGatewayRouteTablesOutput {
                transit_gateway_route_tables: self.transit_gateway_route_tables,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayRouteTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_route_tables_output::Builder {
        crate::output::describe_transit_gateway_route_tables_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayRouteTableAnnouncementsOutput {
    /// <p>Describes the transit gateway route table announcement.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table_announcements:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTableAnnouncement>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayRouteTableAnnouncementsOutput {
    /// <p>Describes the transit gateway route table announcement.</p>
    pub fn transit_gateway_route_table_announcements(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayRouteTableAnnouncement]> {
        self.transit_gateway_route_table_announcements.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayRouteTableAnnouncementsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayRouteTableAnnouncementsOutput`](crate::output::DescribeTransitGatewayRouteTableAnnouncementsOutput).
pub mod describe_transit_gateway_route_table_announcements_output {

    /// A builder for [`DescribeTransitGatewayRouteTableAnnouncementsOutput`](crate::output::DescribeTransitGatewayRouteTableAnnouncementsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table_announcements:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTableAnnouncement>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_route_table_announcements`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_route_table_announcements`](Self::set_transit_gateway_route_table_announcements).
        ///
        /// <p>Describes the transit gateway route table announcement.</p>
        pub fn transit_gateway_route_table_announcements(
            mut self,
            input: crate::model::TransitGatewayRouteTableAnnouncement,
        ) -> Self {
            let mut v = self
                .transit_gateway_route_table_announcements
                .unwrap_or_default();
            v.push(input);
            self.transit_gateway_route_table_announcements = Some(v);
            self
        }
        /// <p>Describes the transit gateway route table announcement.</p>
        pub fn set_transit_gateway_route_table_announcements(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayRouteTableAnnouncement>,
            >,
        ) -> Self {
            self.transit_gateway_route_table_announcements = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayRouteTableAnnouncementsOutput`](crate::output::DescribeTransitGatewayRouteTableAnnouncementsOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayRouteTableAnnouncementsOutput {
            crate::output::DescribeTransitGatewayRouteTableAnnouncementsOutput {
                transit_gateway_route_table_announcements: self
                    .transit_gateway_route_table_announcements,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayRouteTableAnnouncementsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayRouteTableAnnouncementsOutput`](crate::output::DescribeTransitGatewayRouteTableAnnouncementsOutput).
    pub fn builder(
    ) -> crate::output::describe_transit_gateway_route_table_announcements_output::Builder {
        crate::output::describe_transit_gateway_route_table_announcements_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayPolicyTablesOutput {
    /// <p>Describes the transit gateway policy tables.</p>
    #[doc(hidden)]
    pub transit_gateway_policy_tables:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTable>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayPolicyTablesOutput {
    /// <p>Describes the transit gateway policy tables.</p>
    pub fn transit_gateway_policy_tables(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayPolicyTable]> {
        self.transit_gateway_policy_tables.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayPolicyTablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayPolicyTablesOutput`](crate::output::DescribeTransitGatewayPolicyTablesOutput).
pub mod describe_transit_gateway_policy_tables_output {

    /// A builder for [`DescribeTransitGatewayPolicyTablesOutput`](crate::output::DescribeTransitGatewayPolicyTablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_policy_tables:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_policy_tables`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_policy_tables`](Self::set_transit_gateway_policy_tables).
        ///
        /// <p>Describes the transit gateway policy tables.</p>
        pub fn transit_gateway_policy_tables(
            mut self,
            input: crate::model::TransitGatewayPolicyTable,
        ) -> Self {
            let mut v = self.transit_gateway_policy_tables.unwrap_or_default();
            v.push(input);
            self.transit_gateway_policy_tables = Some(v);
            self
        }
        /// <p>Describes the transit gateway policy tables.</p>
        pub fn set_transit_gateway_policy_tables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayPolicyTable>>,
        ) -> Self {
            self.transit_gateway_policy_tables = input;
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayPolicyTablesOutput`](crate::output::DescribeTransitGatewayPolicyTablesOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayPolicyTablesOutput {
            crate::output::DescribeTransitGatewayPolicyTablesOutput {
                transit_gateway_policy_tables: self.transit_gateway_policy_tables,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayPolicyTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayPolicyTablesOutput`](crate::output::DescribeTransitGatewayPolicyTablesOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_policy_tables_output::Builder {
        crate::output::describe_transit_gateway_policy_tables_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayPeeringAttachmentsOutput {
    /// <p>The transit gateway peering attachments.</p>
    #[doc(hidden)]
    pub transit_gateway_peering_attachments:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayPeeringAttachmentsOutput {
    /// <p>The transit gateway peering attachments.</p>
    pub fn transit_gateway_peering_attachments(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayPeeringAttachment]> {
        self.transit_gateway_peering_attachments.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayPeeringAttachmentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput).
pub mod describe_transit_gateway_peering_attachments_output {

    /// A builder for [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachments:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_peering_attachments`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_peering_attachments`](Self::set_transit_gateway_peering_attachments).
        ///
        /// <p>The transit gateway peering attachments.</p>
        pub fn transit_gateway_peering_attachments(
            mut self,
            input: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            let mut v = self.transit_gateway_peering_attachments.unwrap_or_default();
            v.push(input);
            self.transit_gateway_peering_attachments = Some(v);
            self
        }
        /// <p>The transit gateway peering attachments.</p>
        pub fn set_transit_gateway_peering_attachments(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>,
            >,
        ) -> Self {
            self.transit_gateway_peering_attachments = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayPeeringAttachmentsOutput {
            crate::output::DescribeTransitGatewayPeeringAttachmentsOutput {
                transit_gateway_peering_attachments: self.transit_gateway_peering_attachments,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayPeeringAttachmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_peering_attachments_output::Builder
    {
        crate::output::describe_transit_gateway_peering_attachments_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayMulticastDomainsOutput {
    /// <p>Information about the transit gateway multicast domains.</p>
    #[doc(hidden)]
    pub transit_gateway_multicast_domains:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomain>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayMulticastDomainsOutput {
    /// <p>Information about the transit gateway multicast domains.</p>
    pub fn transit_gateway_multicast_domains(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayMulticastDomain]> {
        self.transit_gateway_multicast_domains.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayMulticastDomainsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput).
pub mod describe_transit_gateway_multicast_domains_output {

    /// A builder for [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_multicast_domains:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomain>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_multicast_domains`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_multicast_domains`](Self::set_transit_gateway_multicast_domains).
        ///
        /// <p>Information about the transit gateway multicast domains.</p>
        pub fn transit_gateway_multicast_domains(
            mut self,
            input: crate::model::TransitGatewayMulticastDomain,
        ) -> Self {
            let mut v = self.transit_gateway_multicast_domains.unwrap_or_default();
            v.push(input);
            self.transit_gateway_multicast_domains = Some(v);
            self
        }
        /// <p>Information about the transit gateway multicast domains.</p>
        pub fn set_transit_gateway_multicast_domains(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomain>>,
        ) -> Self {
            self.transit_gateway_multicast_domains = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayMulticastDomainsOutput {
            crate::output::DescribeTransitGatewayMulticastDomainsOutput {
                transit_gateway_multicast_domains: self.transit_gateway_multicast_domains,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayMulticastDomainsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_multicast_domains_output::Builder {
        crate::output::describe_transit_gateway_multicast_domains_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayConnectsOutput {
    /// <p>Information about the Connect attachments.</p>
    #[doc(hidden)]
    pub transit_gateway_connects:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnect>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayConnectsOutput {
    /// <p>Information about the Connect attachments.</p>
    pub fn transit_gateway_connects(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayConnect]> {
        self.transit_gateway_connects.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayConnectsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput).
pub mod describe_transit_gateway_connects_output {

    /// A builder for [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connects:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnect>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_connects`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_connects`](Self::set_transit_gateway_connects).
        ///
        /// <p>Information about the Connect attachments.</p>
        pub fn transit_gateway_connects(
            mut self,
            input: crate::model::TransitGatewayConnect,
        ) -> Self {
            let mut v = self.transit_gateway_connects.unwrap_or_default();
            v.push(input);
            self.transit_gateway_connects = Some(v);
            self
        }
        /// <p>Information about the Connect attachments.</p>
        pub fn set_transit_gateway_connects(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnect>>,
        ) -> Self {
            self.transit_gateway_connects = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayConnectsOutput {
            crate::output::DescribeTransitGatewayConnectsOutput {
                transit_gateway_connects: self.transit_gateway_connects,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayConnectsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_connects_output::Builder {
        crate::output::describe_transit_gateway_connects_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayConnectPeersOutput {
    /// <p>Information about the Connect peers.</p>
    #[doc(hidden)]
    pub transit_gateway_connect_peers:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnectPeer>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayConnectPeersOutput {
    /// <p>Information about the Connect peers.</p>
    pub fn transit_gateway_connect_peers(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayConnectPeer]> {
        self.transit_gateway_connect_peers.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayConnectPeersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput).
pub mod describe_transit_gateway_connect_peers_output {

    /// A builder for [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect_peers:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnectPeer>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_connect_peers`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_connect_peers`](Self::set_transit_gateway_connect_peers).
        ///
        /// <p>Information about the Connect peers.</p>
        pub fn transit_gateway_connect_peers(
            mut self,
            input: crate::model::TransitGatewayConnectPeer,
        ) -> Self {
            let mut v = self.transit_gateway_connect_peers.unwrap_or_default();
            v.push(input);
            self.transit_gateway_connect_peers = Some(v);
            self
        }
        /// <p>Information about the Connect peers.</p>
        pub fn set_transit_gateway_connect_peers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnectPeer>>,
        ) -> Self {
            self.transit_gateway_connect_peers = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayConnectPeersOutput {
            crate::output::DescribeTransitGatewayConnectPeersOutput {
                transit_gateway_connect_peers: self.transit_gateway_connect_peers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayConnectPeersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_connect_peers_output::Builder {
        crate::output::describe_transit_gateway_connect_peers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTransitGatewayAttachmentsOutput {
    /// <p>Information about the attachments.</p>
    #[doc(hidden)]
    pub transit_gateway_attachments:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachment>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTransitGatewayAttachmentsOutput {
    /// <p>Information about the attachments.</p>
    pub fn transit_gateway_attachments(
        &self,
    ) -> std::option::Option<&[crate::model::TransitGatewayAttachment]> {
        self.transit_gateway_attachments.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTransitGatewayAttachmentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput).
pub mod describe_transit_gateway_attachments_output {

    /// A builder for [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_attachments:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `transit_gateway_attachments`.
        ///
        /// To override the contents of this collection use [`set_transit_gateway_attachments`](Self::set_transit_gateway_attachments).
        ///
        /// <p>Information about the attachments.</p>
        pub fn transit_gateway_attachments(
            mut self,
            input: crate::model::TransitGatewayAttachment,
        ) -> Self {
            let mut v = self.transit_gateway_attachments.unwrap_or_default();
            v.push(input);
            self.transit_gateway_attachments = Some(v);
            self
        }
        /// <p>Information about the attachments.</p>
        pub fn set_transit_gateway_attachments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachment>>,
        ) -> Self {
            self.transit_gateway_attachments = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput).
        pub fn build(self) -> crate::output::DescribeTransitGatewayAttachmentsOutput {
            crate::output::DescribeTransitGatewayAttachmentsOutput {
                transit_gateway_attachments: self.transit_gateway_attachments,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTransitGatewayAttachmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput).
    pub fn builder() -> crate::output::describe_transit_gateway_attachments_output::Builder {
        crate::output::describe_transit_gateway_attachments_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTrafficMirrorTargetsOutput {
    /// <p>Information about one or more Traffic Mirror targets.</p>
    #[doc(hidden)]
    pub traffic_mirror_targets:
        std::option::Option<std::vec::Vec<crate::model::TrafficMirrorTarget>>,
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTrafficMirrorTargetsOutput {
    /// <p>Information about one or more Traffic Mirror targets.</p>
    pub fn traffic_mirror_targets(
        &self,
    ) -> std::option::Option<&[crate::model::TrafficMirrorTarget]> {
        self.traffic_mirror_targets.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTrafficMirrorTargetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput).
pub mod describe_traffic_mirror_targets_output {

    /// A builder for [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_targets:
            std::option::Option<std::vec::Vec<crate::model::TrafficMirrorTarget>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `traffic_mirror_targets`.
        ///
        /// To override the contents of this collection use [`set_traffic_mirror_targets`](Self::set_traffic_mirror_targets).
        ///
        /// <p>Information about one or more Traffic Mirror targets.</p>
        pub fn traffic_mirror_targets(mut self, input: crate::model::TrafficMirrorTarget) -> Self {
            let mut v = self.traffic_mirror_targets.unwrap_or_default();
            v.push(input);
            self.traffic_mirror_targets = Some(v);
            self
        }
        /// <p>Information about one or more Traffic Mirror targets.</p>
        pub fn set_traffic_mirror_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrafficMirrorTarget>>,
        ) -> Self {
            self.traffic_mirror_targets = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput).
        pub fn build(self) -> crate::output::DescribeTrafficMirrorTargetsOutput {
            crate::output::DescribeTrafficMirrorTargetsOutput {
                traffic_mirror_targets: self.traffic_mirror_targets,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTrafficMirrorTargetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput).
    pub fn builder() -> crate::output::describe_traffic_mirror_targets_output::Builder {
        crate::output::describe_traffic_mirror_targets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTrafficMirrorSessionsOutput {
    /// <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
    #[doc(hidden)]
    pub traffic_mirror_sessions:
        std::option::Option<std::vec::Vec<crate::model::TrafficMirrorSession>>,
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTrafficMirrorSessionsOutput {
    /// <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
    pub fn traffic_mirror_sessions(
        &self,
    ) -> std::option::Option<&[crate::model::TrafficMirrorSession]> {
        self.traffic_mirror_sessions.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTrafficMirrorSessionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput).
pub mod describe_traffic_mirror_sessions_output {

    /// A builder for [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_sessions:
            std::option::Option<std::vec::Vec<crate::model::TrafficMirrorSession>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `traffic_mirror_sessions`.
        ///
        /// To override the contents of this collection use [`set_traffic_mirror_sessions`](Self::set_traffic_mirror_sessions).
        ///
        /// <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
        pub fn traffic_mirror_sessions(
            mut self,
            input: crate::model::TrafficMirrorSession,
        ) -> Self {
            let mut v = self.traffic_mirror_sessions.unwrap_or_default();
            v.push(input);
            self.traffic_mirror_sessions = Some(v);
            self
        }
        /// <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
        pub fn set_traffic_mirror_sessions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrafficMirrorSession>>,
        ) -> Self {
            self.traffic_mirror_sessions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput).
        pub fn build(self) -> crate::output::DescribeTrafficMirrorSessionsOutput {
            crate::output::DescribeTrafficMirrorSessionsOutput {
                traffic_mirror_sessions: self.traffic_mirror_sessions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTrafficMirrorSessionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput).
    pub fn builder() -> crate::output::describe_traffic_mirror_sessions_output::Builder {
        crate::output::describe_traffic_mirror_sessions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTrafficMirrorFiltersOutput {
    /// <p>Information about one or more Traffic Mirror filters.</p>
    #[doc(hidden)]
    pub traffic_mirror_filters:
        std::option::Option<std::vec::Vec<crate::model::TrafficMirrorFilter>>,
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTrafficMirrorFiltersOutput {
    /// <p>Information about one or more Traffic Mirror filters.</p>
    pub fn traffic_mirror_filters(
        &self,
    ) -> std::option::Option<&[crate::model::TrafficMirrorFilter]> {
        self.traffic_mirror_filters.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTrafficMirrorFiltersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput).
pub mod describe_traffic_mirror_filters_output {

    /// A builder for [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filters:
            std::option::Option<std::vec::Vec<crate::model::TrafficMirrorFilter>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `traffic_mirror_filters`.
        ///
        /// To override the contents of this collection use [`set_traffic_mirror_filters`](Self::set_traffic_mirror_filters).
        ///
        /// <p>Information about one or more Traffic Mirror filters.</p>
        pub fn traffic_mirror_filters(mut self, input: crate::model::TrafficMirrorFilter) -> Self {
            let mut v = self.traffic_mirror_filters.unwrap_or_default();
            v.push(input);
            self.traffic_mirror_filters = Some(v);
            self
        }
        /// <p>Information about one or more Traffic Mirror filters.</p>
        pub fn set_traffic_mirror_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrafficMirrorFilter>>,
        ) -> Self {
            self.traffic_mirror_filters = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput).
        pub fn build(self) -> crate::output::DescribeTrafficMirrorFiltersOutput {
            crate::output::DescribeTrafficMirrorFiltersOutput {
                traffic_mirror_filters: self.traffic_mirror_filters,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTrafficMirrorFiltersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput).
    pub fn builder() -> crate::output::describe_traffic_mirror_filters_output::Builder {
        crate::output::describe_traffic_mirror_filters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTagsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The tags.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
    _request_id: Option<String>,
}
impl DescribeTagsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The tags.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::TagDescription]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
pub mod describe_tags_output {

    /// A builder for [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags.</p>
        pub fn tags(mut self, input: crate::model::TagDescription) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
        pub fn build(self) -> crate::output::DescribeTagsOutput {
            crate::output::DescribeTagsOutput {
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTagsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
    pub fn builder() -> crate::output::describe_tags_output::Builder {
        crate::output::describe_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSubnetsOutput {
    /// <p>Information about one or more subnets.</p>
    #[doc(hidden)]
    pub subnets: std::option::Option<std::vec::Vec<crate::model::Subnet>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSubnetsOutput {
    /// <p>Information about one or more subnets.</p>
    pub fn subnets(&self) -> std::option::Option<&[crate::model::Subnet]> {
        self.subnets.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSubnetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput).
pub mod describe_subnets_output {

    /// A builder for [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnets: std::option::Option<std::vec::Vec<crate::model::Subnet>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `subnets`.
        ///
        /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
        ///
        /// <p>Information about one or more subnets.</p>
        pub fn subnets(mut self, input: crate::model::Subnet) -> Self {
            let mut v = self.subnets.unwrap_or_default();
            v.push(input);
            self.subnets = Some(v);
            self
        }
        /// <p>Information about one or more subnets.</p>
        pub fn set_subnets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subnet>>,
        ) -> Self {
            self.subnets = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput).
        pub fn build(self) -> crate::output::DescribeSubnetsOutput {
            crate::output::DescribeSubnetsOutput {
                subnets: self.subnets,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSubnetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput).
    pub fn builder() -> crate::output::describe_subnets_output::Builder {
        crate::output::describe_subnets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeStoreImageTasksOutput {
    /// <p>The information about the AMI store tasks.</p>
    #[doc(hidden)]
    pub store_image_task_results:
        std::option::Option<std::vec::Vec<crate::model::StoreImageTaskResult>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeStoreImageTasksOutput {
    /// <p>The information about the AMI store tasks.</p>
    pub fn store_image_task_results(
        &self,
    ) -> std::option::Option<&[crate::model::StoreImageTaskResult]> {
        self.store_image_task_results.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeStoreImageTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput).
pub mod describe_store_image_tasks_output {

    /// A builder for [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) store_image_task_results:
            std::option::Option<std::vec::Vec<crate::model::StoreImageTaskResult>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `store_image_task_results`.
        ///
        /// To override the contents of this collection use [`set_store_image_task_results`](Self::set_store_image_task_results).
        ///
        /// <p>The information about the AMI store tasks.</p>
        pub fn store_image_task_results(
            mut self,
            input: crate::model::StoreImageTaskResult,
        ) -> Self {
            let mut v = self.store_image_task_results.unwrap_or_default();
            v.push(input);
            self.store_image_task_results = Some(v);
            self
        }
        /// <p>The information about the AMI store tasks.</p>
        pub fn set_store_image_task_results(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StoreImageTaskResult>>,
        ) -> Self {
            self.store_image_task_results = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput).
        pub fn build(self) -> crate::output::DescribeStoreImageTasksOutput {
            crate::output::DescribeStoreImageTasksOutput {
                store_image_task_results: self.store_image_task_results,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeStoreImageTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput).
    pub fn builder() -> crate::output::describe_store_image_tasks_output::Builder {
        crate::output::describe_store_image_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeStaleSecurityGroupsOutput {
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the stale security groups.</p>
    #[doc(hidden)]
    pub stale_security_group_set:
        std::option::Option<std::vec::Vec<crate::model::StaleSecurityGroup>>,
    _request_id: Option<String>,
}
impl DescribeStaleSecurityGroupsOutput {
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the stale security groups.</p>
    pub fn stale_security_group_set(
        &self,
    ) -> std::option::Option<&[crate::model::StaleSecurityGroup]> {
        self.stale_security_group_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeStaleSecurityGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput).
pub mod describe_stale_security_groups_output {

    /// A builder for [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) stale_security_group_set:
            std::option::Option<std::vec::Vec<crate::model::StaleSecurityGroup>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `stale_security_group_set`.
        ///
        /// To override the contents of this collection use [`set_stale_security_group_set`](Self::set_stale_security_group_set).
        ///
        /// <p>Information about the stale security groups.</p>
        pub fn stale_security_group_set(mut self, input: crate::model::StaleSecurityGroup) -> Self {
            let mut v = self.stale_security_group_set.unwrap_or_default();
            v.push(input);
            self.stale_security_group_set = Some(v);
            self
        }
        /// <p>Information about the stale security groups.</p>
        pub fn set_stale_security_group_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StaleSecurityGroup>>,
        ) -> Self {
            self.stale_security_group_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput).
        pub fn build(self) -> crate::output::DescribeStaleSecurityGroupsOutput {
            crate::output::DescribeStaleSecurityGroupsOutput {
                next_token: self.next_token,
                stale_security_group_set: self.stale_security_group_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeStaleSecurityGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput).
    pub fn builder() -> crate::output::describe_stale_security_groups_output::Builder {
        crate::output::describe_stale_security_groups_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotPriceHistory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotPriceHistoryOutput {
    /// <p>The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The historical Spot prices.</p>
    #[doc(hidden)]
    pub spot_price_history: std::option::Option<std::vec::Vec<crate::model::SpotPrice>>,
    _request_id: Option<String>,
}
impl DescribeSpotPriceHistoryOutput {
    /// <p>The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The historical Spot prices.</p>
    pub fn spot_price_history(&self) -> std::option::Option<&[crate::model::SpotPrice]> {
        self.spot_price_history.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSpotPriceHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput).
pub mod describe_spot_price_history_output {

    /// A builder for [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_price_history: std::option::Option<std::vec::Vec<crate::model::SpotPrice>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `spot_price_history`.
        ///
        /// To override the contents of this collection use [`set_spot_price_history`](Self::set_spot_price_history).
        ///
        /// <p>The historical Spot prices.</p>
        pub fn spot_price_history(mut self, input: crate::model::SpotPrice) -> Self {
            let mut v = self.spot_price_history.unwrap_or_default();
            v.push(input);
            self.spot_price_history = Some(v);
            self
        }
        /// <p>The historical Spot prices.</p>
        pub fn set_spot_price_history(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SpotPrice>>,
        ) -> Self {
            self.spot_price_history = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput).
        pub fn build(self) -> crate::output::DescribeSpotPriceHistoryOutput {
            crate::output::DescribeSpotPriceHistoryOutput {
                next_token: self.next_token,
                spot_price_history: self.spot_price_history,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSpotPriceHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput).
    pub fn builder() -> crate::output::describe_spot_price_history_output::Builder {
        crate::output::describe_spot_price_history_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotInstanceRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotInstanceRequestsOutput {
    /// <p>One or more Spot Instance requests.</p>
    #[doc(hidden)]
    pub spot_instance_requests:
        std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
    /// <p>The token to use to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSpotInstanceRequestsOutput {
    /// <p>One or more Spot Instance requests.</p>
    pub fn spot_instance_requests(
        &self,
    ) -> std::option::Option<&[crate::model::SpotInstanceRequest]> {
        self.spot_instance_requests.as_deref()
    }
    /// <p>The token to use to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSpotInstanceRequestsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput).
pub mod describe_spot_instance_requests_output {

    /// A builder for [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_instance_requests:
            std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `spot_instance_requests`.
        ///
        /// To override the contents of this collection use [`set_spot_instance_requests`](Self::set_spot_instance_requests).
        ///
        /// <p>One or more Spot Instance requests.</p>
        pub fn spot_instance_requests(mut self, input: crate::model::SpotInstanceRequest) -> Self {
            let mut v = self.spot_instance_requests.unwrap_or_default();
            v.push(input);
            self.spot_instance_requests = Some(v);
            self
        }
        /// <p>One or more Spot Instance requests.</p>
        pub fn set_spot_instance_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        ) -> Self {
            self.spot_instance_requests = input;
            self
        }
        /// <p>The token to use to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput).
        pub fn build(self) -> crate::output::DescribeSpotInstanceRequestsOutput {
            crate::output::DescribeSpotInstanceRequestsOutput {
                spot_instance_requests: self.spot_instance_requests,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSpotInstanceRequestsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput).
    pub fn builder() -> crate::output::describe_spot_instance_requests_output::Builder {
        crate::output::describe_spot_instance_requests_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotFleetRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotFleetRequestsOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the configuration of your Spot Fleet.</p>
    #[doc(hidden)]
    pub spot_fleet_request_configs:
        std::option::Option<std::vec::Vec<crate::model::SpotFleetRequestConfig>>,
    _request_id: Option<String>,
}
impl DescribeSpotFleetRequestsOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the configuration of your Spot Fleet.</p>
    pub fn spot_fleet_request_configs(
        &self,
    ) -> std::option::Option<&[crate::model::SpotFleetRequestConfig]> {
        self.spot_fleet_request_configs.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSpotFleetRequestsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput).
pub mod describe_spot_fleet_requests_output {

    /// A builder for [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_fleet_request_configs:
            std::option::Option<std::vec::Vec<crate::model::SpotFleetRequestConfig>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `spot_fleet_request_configs`.
        ///
        /// To override the contents of this collection use [`set_spot_fleet_request_configs`](Self::set_spot_fleet_request_configs).
        ///
        /// <p>Information about the configuration of your Spot Fleet.</p>
        pub fn spot_fleet_request_configs(
            mut self,
            input: crate::model::SpotFleetRequestConfig,
        ) -> Self {
            let mut v = self.spot_fleet_request_configs.unwrap_or_default();
            v.push(input);
            self.spot_fleet_request_configs = Some(v);
            self
        }
        /// <p>Information about the configuration of your Spot Fleet.</p>
        pub fn set_spot_fleet_request_configs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SpotFleetRequestConfig>>,
        ) -> Self {
            self.spot_fleet_request_configs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput).
        pub fn build(self) -> crate::output::DescribeSpotFleetRequestsOutput {
            crate::output::DescribeSpotFleetRequestsOutput {
                next_token: self.next_token,
                spot_fleet_request_configs: self.spot_fleet_request_configs,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSpotFleetRequestsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput).
    pub fn builder() -> crate::output::describe_spot_fleet_requests_output::Builder {
        crate::output::describe_spot_fleet_requests_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotFleetRequestHistory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotFleetRequestHistoryOutput {
    /// <p>Information about the events in the history of the Spot Fleet request.</p>
    #[doc(hidden)]
    pub history_records: std::option::Option<std::vec::Vec<crate::model::HistoryRecord>>,
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
    /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    #[doc(hidden)]
    pub last_evaluated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the Spot Fleet request.</p>
    #[doc(hidden)]
    pub spot_fleet_request_id: std::option::Option<std::string::String>,
    /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeSpotFleetRequestHistoryOutput {
    /// <p>Information about the events in the history of the Spot Fleet request.</p>
    pub fn history_records(&self) -> std::option::Option<&[crate::model::HistoryRecord]> {
        self.history_records.as_deref()
    }
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
    /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    pub fn last_evaluated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_evaluated_time.as_ref()
    }
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the Spot Fleet request.</p>
    pub fn spot_fleet_request_id(&self) -> std::option::Option<&str> {
        self.spot_fleet_request_id.as_deref()
    }
    /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeSpotFleetRequestHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput).
pub mod describe_spot_fleet_request_history_output {

    /// A builder for [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) history_records: std::option::Option<std::vec::Vec<crate::model::HistoryRecord>>,
        pub(crate) last_evaluated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_fleet_request_id: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `history_records`.
        ///
        /// To override the contents of this collection use [`set_history_records`](Self::set_history_records).
        ///
        /// <p>Information about the events in the history of the Spot Fleet request.</p>
        pub fn history_records(mut self, input: crate::model::HistoryRecord) -> Self {
            let mut v = self.history_records.unwrap_or_default();
            v.push(input);
            self.history_records = Some(v);
            self
        }
        /// <p>Information about the events in the history of the Spot Fleet request.</p>
        pub fn set_history_records(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HistoryRecord>>,
        ) -> Self {
            self.history_records = input;
            self
        }
        /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
        /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
        pub fn last_evaluated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_evaluated_time = Some(input);
            self
        }
        /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
        /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
        pub fn set_last_evaluated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_evaluated_time = input;
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn spot_fleet_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.spot_fleet_request_id = Some(input.into());
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn set_spot_fleet_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.spot_fleet_request_id = input;
            self
        }
        /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput).
        pub fn build(self) -> crate::output::DescribeSpotFleetRequestHistoryOutput {
            crate::output::DescribeSpotFleetRequestHistoryOutput {
                history_records: self.history_records,
                last_evaluated_time: self.last_evaluated_time,
                next_token: self.next_token,
                spot_fleet_request_id: self.spot_fleet_request_id,
                start_time: self.start_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSpotFleetRequestHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput).
    pub fn builder() -> crate::output::describe_spot_fleet_request_history_output::Builder {
        crate::output::describe_spot_fleet_request_history_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotFleetInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotFleetInstancesOutput {
    /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
    #[doc(hidden)]
    pub active_instances: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the Spot Fleet request.</p>
    #[doc(hidden)]
    pub spot_fleet_request_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSpotFleetInstancesOutput {
    /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
    pub fn active_instances(&self) -> std::option::Option<&[crate::model::ActiveInstance]> {
        self.active_instances.as_deref()
    }
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the Spot Fleet request.</p>
    pub fn spot_fleet_request_id(&self) -> std::option::Option<&str> {
        self.spot_fleet_request_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSpotFleetInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput).
pub mod describe_spot_fleet_instances_output {

    /// A builder for [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) active_instances:
            std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_fleet_request_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `active_instances`.
        ///
        /// To override the contents of this collection use [`set_active_instances`](Self::set_active_instances).
        ///
        /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
        pub fn active_instances(mut self, input: crate::model::ActiveInstance) -> Self {
            let mut v = self.active_instances.unwrap_or_default();
            v.push(input);
            self.active_instances = Some(v);
            self
        }
        /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
        pub fn set_active_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        ) -> Self {
            self.active_instances = input;
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn spot_fleet_request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.spot_fleet_request_id = Some(input.into());
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn set_spot_fleet_request_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.spot_fleet_request_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput).
        pub fn build(self) -> crate::output::DescribeSpotFleetInstancesOutput {
            crate::output::DescribeSpotFleetInstancesOutput {
                active_instances: self.active_instances,
                next_token: self.next_token,
                spot_fleet_request_id: self.spot_fleet_request_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSpotFleetInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput).
    pub fn builder() -> crate::output::describe_spot_fleet_instances_output::Builder {
        crate::output::describe_spot_fleet_instances_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotDatafeedSubscription.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotDatafeedSubscriptionOutput {
    /// <p>The Spot Instance data feed subscription.</p>
    #[doc(hidden)]
    pub spot_datafeed_subscription: std::option::Option<crate::model::SpotDatafeedSubscription>,
    _request_id: Option<String>,
}
impl DescribeSpotDatafeedSubscriptionOutput {
    /// <p>The Spot Instance data feed subscription.</p>
    pub fn spot_datafeed_subscription(
        &self,
    ) -> std::option::Option<&crate::model::SpotDatafeedSubscription> {
        self.spot_datafeed_subscription.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeSpotDatafeedSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput).
pub mod describe_spot_datafeed_subscription_output {

    /// A builder for [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_datafeed_subscription:
            std::option::Option<crate::model::SpotDatafeedSubscription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Spot Instance data feed subscription.</p>
        pub fn spot_datafeed_subscription(
            mut self,
            input: crate::model::SpotDatafeedSubscription,
        ) -> Self {
            self.spot_datafeed_subscription = Some(input);
            self
        }
        /// <p>The Spot Instance data feed subscription.</p>
        pub fn set_spot_datafeed_subscription(
            mut self,
            input: std::option::Option<crate::model::SpotDatafeedSubscription>,
        ) -> Self {
            self.spot_datafeed_subscription = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput).
        pub fn build(self) -> crate::output::DescribeSpotDatafeedSubscriptionOutput {
            crate::output::DescribeSpotDatafeedSubscriptionOutput {
                spot_datafeed_subscription: self.spot_datafeed_subscription,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSpotDatafeedSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput).
    pub fn builder() -> crate::output::describe_spot_datafeed_subscription_output::Builder {
        crate::output::describe_spot_datafeed_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSnapshotTierStatusOutput {
    /// <p>Information about the snapshot's storage tier.</p>
    #[doc(hidden)]
    pub snapshot_tier_statuses:
        std::option::Option<std::vec::Vec<crate::model::SnapshotTierStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSnapshotTierStatusOutput {
    /// <p>Information about the snapshot's storage tier.</p>
    pub fn snapshot_tier_statuses(
        &self,
    ) -> std::option::Option<&[crate::model::SnapshotTierStatus]> {
        self.snapshot_tier_statuses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSnapshotTierStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSnapshotTierStatusOutput`](crate::output::DescribeSnapshotTierStatusOutput).
pub mod describe_snapshot_tier_status_output {

    /// A builder for [`DescribeSnapshotTierStatusOutput`](crate::output::DescribeSnapshotTierStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_tier_statuses:
            std::option::Option<std::vec::Vec<crate::model::SnapshotTierStatus>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `snapshot_tier_statuses`.
        ///
        /// To override the contents of this collection use [`set_snapshot_tier_statuses`](Self::set_snapshot_tier_statuses).
        ///
        /// <p>Information about the snapshot's storage tier.</p>
        pub fn snapshot_tier_statuses(mut self, input: crate::model::SnapshotTierStatus) -> Self {
            let mut v = self.snapshot_tier_statuses.unwrap_or_default();
            v.push(input);
            self.snapshot_tier_statuses = Some(v);
            self
        }
        /// <p>Information about the snapshot's storage tier.</p>
        pub fn set_snapshot_tier_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SnapshotTierStatus>>,
        ) -> Self {
            self.snapshot_tier_statuses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSnapshotTierStatusOutput`](crate::output::DescribeSnapshotTierStatusOutput).
        pub fn build(self) -> crate::output::DescribeSnapshotTierStatusOutput {
            crate::output::DescribeSnapshotTierStatusOutput {
                snapshot_tier_statuses: self.snapshot_tier_statuses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSnapshotTierStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotTierStatusOutput`](crate::output::DescribeSnapshotTierStatusOutput).
    pub fn builder() -> crate::output::describe_snapshot_tier_status_output::Builder {
        crate::output::describe_snapshot_tier_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSnapshotsOutput {
    /// <p>Information about the snapshots.</p>
    #[doc(hidden)]
    pub snapshots: std::option::Option<std::vec::Vec<crate::model::Snapshot>>,
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSnapshotsOutput {
    /// <p>Information about the snapshots.</p>
    pub fn snapshots(&self) -> std::option::Option<&[crate::model::Snapshot]> {
        self.snapshots.as_deref()
    }
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSnapshotsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput).
pub mod describe_snapshots_output {

    /// A builder for [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshots: std::option::Option<std::vec::Vec<crate::model::Snapshot>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `snapshots`.
        ///
        /// To override the contents of this collection use [`set_snapshots`](Self::set_snapshots).
        ///
        /// <p>Information about the snapshots.</p>
        pub fn snapshots(mut self, input: crate::model::Snapshot) -> Self {
            let mut v = self.snapshots.unwrap_or_default();
            v.push(input);
            self.snapshots = Some(v);
            self
        }
        /// <p>Information about the snapshots.</p>
        pub fn set_snapshots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Snapshot>>,
        ) -> Self {
            self.snapshots = input;
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput).
        pub fn build(self) -> crate::output::DescribeSnapshotsOutput {
            crate::output::DescribeSnapshotsOutput {
                snapshots: self.snapshots,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput).
    pub fn builder() -> crate::output::describe_snapshots_output::Builder {
        crate::output::describe_snapshots_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSnapshotAttributeOutput {
    /// <p>The users and groups that have the permissions for creating volumes from the snapshot.</p>
    #[doc(hidden)]
    pub create_volume_permissions:
        std::option::Option<std::vec::Vec<crate::model::CreateVolumePermission>>,
    /// <p>The product codes.</p>
    #[doc(hidden)]
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>The ID of the EBS snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSnapshotAttributeOutput {
    /// <p>The users and groups that have the permissions for creating volumes from the snapshot.</p>
    pub fn create_volume_permissions(
        &self,
    ) -> std::option::Option<&[crate::model::CreateVolumePermission]> {
        self.create_volume_permissions.as_deref()
    }
    /// <p>The product codes.</p>
    pub fn product_codes(&self) -> std::option::Option<&[crate::model::ProductCode]> {
        self.product_codes.as_deref()
    }
    /// <p>The ID of the EBS snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSnapshotAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput).
pub mod describe_snapshot_attribute_output {

    /// A builder for [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_volume_permissions:
            std::option::Option<std::vec::Vec<crate::model::CreateVolumePermission>>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `create_volume_permissions`.
        ///
        /// To override the contents of this collection use [`set_create_volume_permissions`](Self::set_create_volume_permissions).
        ///
        /// <p>The users and groups that have the permissions for creating volumes from the snapshot.</p>
        pub fn create_volume_permissions(
            mut self,
            input: crate::model::CreateVolumePermission,
        ) -> Self {
            let mut v = self.create_volume_permissions.unwrap_or_default();
            v.push(input);
            self.create_volume_permissions = Some(v);
            self
        }
        /// <p>The users and groups that have the permissions for creating volumes from the snapshot.</p>
        pub fn set_create_volume_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateVolumePermission>>,
        ) -> Self {
            self.create_volume_permissions = input;
            self
        }
        /// Appends an item to `product_codes`.
        ///
        /// To override the contents of this collection use [`set_product_codes`](Self::set_product_codes).
        ///
        /// <p>The product codes.</p>
        pub fn product_codes(mut self, input: crate::model::ProductCode) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(input);
            self.product_codes = Some(v);
            self
        }
        /// <p>The product codes.</p>
        pub fn set_product_codes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = input;
            self
        }
        /// <p>The ID of the EBS snapshot.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The ID of the EBS snapshot.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput).
        pub fn build(self) -> crate::output::DescribeSnapshotAttributeOutput {
            crate::output::DescribeSnapshotAttributeOutput {
                create_volume_permissions: self.create_volume_permissions,
                product_codes: self.product_codes,
                snapshot_id: self.snapshot_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput).
    pub fn builder() -> crate::output::describe_snapshot_attribute_output::Builder {
        crate::output::describe_snapshot_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSecurityGroupsOutput {
    /// <p>Information about the security groups.</p>
    #[doc(hidden)]
    pub security_groups: std::option::Option<std::vec::Vec<crate::model::SecurityGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSecurityGroupsOutput {
    /// <p>Information about the security groups.</p>
    pub fn security_groups(&self) -> std::option::Option<&[crate::model::SecurityGroup]> {
        self.security_groups.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSecurityGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput).
pub mod describe_security_groups_output {

    /// A builder for [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_groups: std::option::Option<std::vec::Vec<crate::model::SecurityGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `security_groups`.
        ///
        /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
        ///
        /// <p>Information about the security groups.</p>
        pub fn security_groups(mut self, input: crate::model::SecurityGroup) -> Self {
            let mut v = self.security_groups.unwrap_or_default();
            v.push(input);
            self.security_groups = Some(v);
            self
        }
        /// <p>Information about the security groups.</p>
        pub fn set_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityGroup>>,
        ) -> Self {
            self.security_groups = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput).
        pub fn build(self) -> crate::output::DescribeSecurityGroupsOutput {
            crate::output::DescribeSecurityGroupsOutput {
                security_groups: self.security_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSecurityGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput).
    pub fn builder() -> crate::output::describe_security_groups_output::Builder {
        crate::output::describe_security_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSecurityGroupRulesOutput {
    /// <p>Information about security group rules.</p>
    #[doc(hidden)]
    pub security_group_rules: std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeSecurityGroupRulesOutput {
    /// <p>Information about security group rules.</p>
    pub fn security_group_rules(&self) -> std::option::Option<&[crate::model::SecurityGroupRule]> {
        self.security_group_rules.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSecurityGroupRulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSecurityGroupRulesOutput`](crate::output::DescribeSecurityGroupRulesOutput).
pub mod describe_security_group_rules_output {

    /// A builder for [`DescribeSecurityGroupRulesOutput`](crate::output::DescribeSecurityGroupRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_group_rules:
            std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `security_group_rules`.
        ///
        /// To override the contents of this collection use [`set_security_group_rules`](Self::set_security_group_rules).
        ///
        /// <p>Information about security group rules.</p>
        pub fn security_group_rules(mut self, input: crate::model::SecurityGroupRule) -> Self {
            let mut v = self.security_group_rules.unwrap_or_default();
            v.push(input);
            self.security_group_rules = Some(v);
            self
        }
        /// <p>Information about security group rules.</p>
        pub fn set_security_group_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
        ) -> Self {
            self.security_group_rules = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityGroupRulesOutput`](crate::output::DescribeSecurityGroupRulesOutput).
        pub fn build(self) -> crate::output::DescribeSecurityGroupRulesOutput {
            crate::output::DescribeSecurityGroupRulesOutput {
                security_group_rules: self.security_group_rules,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSecurityGroupRulesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupRulesOutput`](crate::output::DescribeSecurityGroupRulesOutput).
    pub fn builder() -> crate::output::describe_security_group_rules_output::Builder {
        crate::output::describe_security_group_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSecurityGroupReferencesOutput {
    /// <p>Information about the VPCs with the referencing security groups.</p>
    #[doc(hidden)]
    pub security_group_reference_set:
        std::option::Option<std::vec::Vec<crate::model::SecurityGroupReference>>,
    _request_id: Option<String>,
}
impl DescribeSecurityGroupReferencesOutput {
    /// <p>Information about the VPCs with the referencing security groups.</p>
    pub fn security_group_reference_set(
        &self,
    ) -> std::option::Option<&[crate::model::SecurityGroupReference]> {
        self.security_group_reference_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeSecurityGroupReferencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput).
pub mod describe_security_group_references_output {

    /// A builder for [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_group_reference_set:
            std::option::Option<std::vec::Vec<crate::model::SecurityGroupReference>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `security_group_reference_set`.
        ///
        /// To override the contents of this collection use [`set_security_group_reference_set`](Self::set_security_group_reference_set).
        ///
        /// <p>Information about the VPCs with the referencing security groups.</p>
        pub fn security_group_reference_set(
            mut self,
            input: crate::model::SecurityGroupReference,
        ) -> Self {
            let mut v = self.security_group_reference_set.unwrap_or_default();
            v.push(input);
            self.security_group_reference_set = Some(v);
            self
        }
        /// <p>Information about the VPCs with the referencing security groups.</p>
        pub fn set_security_group_reference_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityGroupReference>>,
        ) -> Self {
            self.security_group_reference_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput).
        pub fn build(self) -> crate::output::DescribeSecurityGroupReferencesOutput {
            crate::output::DescribeSecurityGroupReferencesOutput {
                security_group_reference_set: self.security_group_reference_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeSecurityGroupReferencesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput).
    pub fn builder() -> crate::output::describe_security_group_references_output::Builder {
        crate::output::describe_security_group_references_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeScheduledInstancesOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the Scheduled Instances.</p>
    #[doc(hidden)]
    pub scheduled_instance_set: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
    _request_id: Option<String>,
}
impl DescribeScheduledInstancesOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the Scheduled Instances.</p>
    pub fn scheduled_instance_set(
        &self,
    ) -> std::option::Option<&[crate::model::ScheduledInstance]> {
        self.scheduled_instance_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeScheduledInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput).
pub mod describe_scheduled_instances_output {

    /// A builder for [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) scheduled_instance_set:
            std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `scheduled_instance_set`.
        ///
        /// To override the contents of this collection use [`set_scheduled_instance_set`](Self::set_scheduled_instance_set).
        ///
        /// <p>Information about the Scheduled Instances.</p>
        pub fn scheduled_instance_set(mut self, input: crate::model::ScheduledInstance) -> Self {
            let mut v = self.scheduled_instance_set.unwrap_or_default();
            v.push(input);
            self.scheduled_instance_set = Some(v);
            self
        }
        /// <p>Information about the Scheduled Instances.</p>
        pub fn set_scheduled_instance_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
        ) -> Self {
            self.scheduled_instance_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput).
        pub fn build(self) -> crate::output::DescribeScheduledInstancesOutput {
            crate::output::DescribeScheduledInstancesOutput {
                next_token: self.next_token,
                scheduled_instance_set: self.scheduled_instance_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeScheduledInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput).
    pub fn builder() -> crate::output::describe_scheduled_instances_output::Builder {
        crate::output::describe_scheduled_instances_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeScheduledInstanceAvailability.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeScheduledInstanceAvailabilityOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the available Scheduled Instances.</p>
    #[doc(hidden)]
    pub scheduled_instance_availability_set:
        std::option::Option<std::vec::Vec<crate::model::ScheduledInstanceAvailability>>,
    _request_id: Option<String>,
}
impl DescribeScheduledInstanceAvailabilityOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the available Scheduled Instances.</p>
    pub fn scheduled_instance_availability_set(
        &self,
    ) -> std::option::Option<&[crate::model::ScheduledInstanceAvailability]> {
        self.scheduled_instance_availability_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeScheduledInstanceAvailabilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput).
pub mod describe_scheduled_instance_availability_output {

    /// A builder for [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) scheduled_instance_availability_set:
            std::option::Option<std::vec::Vec<crate::model::ScheduledInstanceAvailability>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `scheduled_instance_availability_set`.
        ///
        /// To override the contents of this collection use [`set_scheduled_instance_availability_set`](Self::set_scheduled_instance_availability_set).
        ///
        /// <p>Information about the available Scheduled Instances.</p>
        pub fn scheduled_instance_availability_set(
            mut self,
            input: crate::model::ScheduledInstanceAvailability,
        ) -> Self {
            let mut v = self.scheduled_instance_availability_set.unwrap_or_default();
            v.push(input);
            self.scheduled_instance_availability_set = Some(v);
            self
        }
        /// <p>Information about the available Scheduled Instances.</p>
        pub fn set_scheduled_instance_availability_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduledInstanceAvailability>>,
        ) -> Self {
            self.scheduled_instance_availability_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput).
        pub fn build(self) -> crate::output::DescribeScheduledInstanceAvailabilityOutput {
            crate::output::DescribeScheduledInstanceAvailabilityOutput {
                next_token: self.next_token,
                scheduled_instance_availability_set: self.scheduled_instance_availability_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeScheduledInstanceAvailabilityOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput).
    pub fn builder() -> crate::output::describe_scheduled_instance_availability_output::Builder {
        crate::output::describe_scheduled_instance_availability_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeRouteTables.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeRouteTablesOutput {
    /// <p>Information about one or more route tables.</p>
    #[doc(hidden)]
    pub route_tables: std::option::Option<std::vec::Vec<crate::model::RouteTable>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeRouteTablesOutput {
    /// <p>Information about one or more route tables.</p>
    pub fn route_tables(&self) -> std::option::Option<&[crate::model::RouteTable]> {
        self.route_tables.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeRouteTablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput).
pub mod describe_route_tables_output {

    /// A builder for [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route_tables: std::option::Option<std::vec::Vec<crate::model::RouteTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `route_tables`.
        ///
        /// To override the contents of this collection use [`set_route_tables`](Self::set_route_tables).
        ///
        /// <p>Information about one or more route tables.</p>
        pub fn route_tables(mut self, input: crate::model::RouteTable) -> Self {
            let mut v = self.route_tables.unwrap_or_default();
            v.push(input);
            self.route_tables = Some(v);
            self
        }
        /// <p>Information about one or more route tables.</p>
        pub fn set_route_tables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteTable>>,
        ) -> Self {
            self.route_tables = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput).
        pub fn build(self) -> crate::output::DescribeRouteTablesOutput {
            crate::output::DescribeRouteTablesOutput {
                route_tables: self.route_tables,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeRouteTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput).
    pub fn builder() -> crate::output::describe_route_tables_output::Builder {
        crate::output::describe_route_tables_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeReservedInstancesOfferings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedInstancesOfferingsOutput {
    /// <p>A list of Reserved Instances offerings.</p>
    #[doc(hidden)]
    pub reserved_instances_offerings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesOffering>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeReservedInstancesOfferingsOutput {
    /// <p>A list of Reserved Instances offerings.</p>
    pub fn reserved_instances_offerings(
        &self,
    ) -> std::option::Option<&[crate::model::ReservedInstancesOffering]> {
        self.reserved_instances_offerings.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReservedInstancesOfferingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput).
pub mod describe_reserved_instances_offerings_output {

    /// A builder for [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_offerings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesOffering>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `reserved_instances_offerings`.
        ///
        /// To override the contents of this collection use [`set_reserved_instances_offerings`](Self::set_reserved_instances_offerings).
        ///
        /// <p>A list of Reserved Instances offerings.</p>
        pub fn reserved_instances_offerings(
            mut self,
            input: crate::model::ReservedInstancesOffering,
        ) -> Self {
            let mut v = self.reserved_instances_offerings.unwrap_or_default();
            v.push(input);
            self.reserved_instances_offerings = Some(v);
            self
        }
        /// <p>A list of Reserved Instances offerings.</p>
        pub fn set_reserved_instances_offerings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesOffering>>,
        ) -> Self {
            self.reserved_instances_offerings = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput).
        pub fn build(self) -> crate::output::DescribeReservedInstancesOfferingsOutput {
            crate::output::DescribeReservedInstancesOfferingsOutput {
                reserved_instances_offerings: self.reserved_instances_offerings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeReservedInstancesOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput).
    pub fn builder() -> crate::output::describe_reserved_instances_offerings_output::Builder {
        crate::output::describe_reserved_instances_offerings_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeReservedInstancesModifications.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedInstancesModificationsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Reserved Instance modification information.</p>
    #[doc(hidden)]
    pub reserved_instances_modifications:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesModification>>,
    _request_id: Option<String>,
}
impl DescribeReservedInstancesModificationsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The Reserved Instance modification information.</p>
    pub fn reserved_instances_modifications(
        &self,
    ) -> std::option::Option<&[crate::model::ReservedInstancesModification]> {
        self.reserved_instances_modifications.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReservedInstancesModificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput).
pub mod describe_reserved_instances_modifications_output {

    /// A builder for [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) reserved_instances_modifications:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesModification>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `reserved_instances_modifications`.
        ///
        /// To override the contents of this collection use [`set_reserved_instances_modifications`](Self::set_reserved_instances_modifications).
        ///
        /// <p>The Reserved Instance modification information.</p>
        pub fn reserved_instances_modifications(
            mut self,
            input: crate::model::ReservedInstancesModification,
        ) -> Self {
            let mut v = self.reserved_instances_modifications.unwrap_or_default();
            v.push(input);
            self.reserved_instances_modifications = Some(v);
            self
        }
        /// <p>The Reserved Instance modification information.</p>
        pub fn set_reserved_instances_modifications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesModification>>,
        ) -> Self {
            self.reserved_instances_modifications = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput).
        pub fn build(self) -> crate::output::DescribeReservedInstancesModificationsOutput {
            crate::output::DescribeReservedInstancesModificationsOutput {
                next_token: self.next_token,
                reserved_instances_modifications: self.reserved_instances_modifications,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeReservedInstancesModificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput).
    pub fn builder() -> crate::output::describe_reserved_instances_modifications_output::Builder {
        crate::output::describe_reserved_instances_modifications_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeReservedInstancesListings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedInstancesListingsOutput {
    /// <p>Information about the Reserved Instance listing.</p>
    #[doc(hidden)]
    pub reserved_instances_listings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
    _request_id: Option<String>,
}
impl DescribeReservedInstancesListingsOutput {
    /// <p>Information about the Reserved Instance listing.</p>
    pub fn reserved_instances_listings(
        &self,
    ) -> std::option::Option<&[crate::model::ReservedInstancesListing]> {
        self.reserved_instances_listings.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReservedInstancesListingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput).
pub mod describe_reserved_instances_listings_output {

    /// A builder for [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_listings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `reserved_instances_listings`.
        ///
        /// To override the contents of this collection use [`set_reserved_instances_listings`](Self::set_reserved_instances_listings).
        ///
        /// <p>Information about the Reserved Instance listing.</p>
        pub fn reserved_instances_listings(
            mut self,
            input: crate::model::ReservedInstancesListing,
        ) -> Self {
            let mut v = self.reserved_instances_listings.unwrap_or_default();
            v.push(input);
            self.reserved_instances_listings = Some(v);
            self
        }
        /// <p>Information about the Reserved Instance listing.</p>
        pub fn set_reserved_instances_listings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        ) -> Self {
            self.reserved_instances_listings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput).
        pub fn build(self) -> crate::output::DescribeReservedInstancesListingsOutput {
            crate::output::DescribeReservedInstancesListingsOutput {
                reserved_instances_listings: self.reserved_instances_listings,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeReservedInstancesListingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput).
    pub fn builder() -> crate::output::describe_reserved_instances_listings_output::Builder {
        crate::output::describe_reserved_instances_listings_output::Builder::default()
    }
}

/// <p>Contains the output for DescribeReservedInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedInstancesOutput {
    /// <p>A list of Reserved Instances.</p>
    #[doc(hidden)]
    pub reserved_instances: std::option::Option<std::vec::Vec<crate::model::ReservedInstances>>,
    _request_id: Option<String>,
}
impl DescribeReservedInstancesOutput {
    /// <p>A list of Reserved Instances.</p>
    pub fn reserved_instances(&self) -> std::option::Option<&[crate::model::ReservedInstances]> {
        self.reserved_instances.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReservedInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput).
pub mod describe_reserved_instances_output {

    /// A builder for [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstances>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `reserved_instances`.
        ///
        /// To override the contents of this collection use [`set_reserved_instances`](Self::set_reserved_instances).
        ///
        /// <p>A list of Reserved Instances.</p>
        pub fn reserved_instances(mut self, input: crate::model::ReservedInstances) -> Self {
            let mut v = self.reserved_instances.unwrap_or_default();
            v.push(input);
            self.reserved_instances = Some(v);
            self
        }
        /// <p>A list of Reserved Instances.</p>
        pub fn set_reserved_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedInstances>>,
        ) -> Self {
            self.reserved_instances = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput).
        pub fn build(self) -> crate::output::DescribeReservedInstancesOutput {
            crate::output::DescribeReservedInstancesOutput {
                reserved_instances: self.reserved_instances,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeReservedInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput).
    pub fn builder() -> crate::output::describe_reserved_instances_output::Builder {
        crate::output::describe_reserved_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReplaceRootVolumeTasksOutput {
    /// <p>Information about the root volume replacement task.</p>
    #[doc(hidden)]
    pub replace_root_volume_tasks:
        std::option::Option<std::vec::Vec<crate::model::ReplaceRootVolumeTask>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeReplaceRootVolumeTasksOutput {
    /// <p>Information about the root volume replacement task.</p>
    pub fn replace_root_volume_tasks(
        &self,
    ) -> std::option::Option<&[crate::model::ReplaceRootVolumeTask]> {
        self.replace_root_volume_tasks.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeReplaceRootVolumeTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput).
pub mod describe_replace_root_volume_tasks_output {

    /// A builder for [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replace_root_volume_tasks:
            std::option::Option<std::vec::Vec<crate::model::ReplaceRootVolumeTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `replace_root_volume_tasks`.
        ///
        /// To override the contents of this collection use [`set_replace_root_volume_tasks`](Self::set_replace_root_volume_tasks).
        ///
        /// <p>Information about the root volume replacement task.</p>
        pub fn replace_root_volume_tasks(
            mut self,
            input: crate::model::ReplaceRootVolumeTask,
        ) -> Self {
            let mut v = self.replace_root_volume_tasks.unwrap_or_default();
            v.push(input);
            self.replace_root_volume_tasks = Some(v);
            self
        }
        /// <p>Information about the root volume replacement task.</p>
        pub fn set_replace_root_volume_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReplaceRootVolumeTask>>,
        ) -> Self {
            self.replace_root_volume_tasks = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput).
        pub fn build(self) -> crate::output::DescribeReplaceRootVolumeTasksOutput {
            crate::output::DescribeReplaceRootVolumeTasksOutput {
                replace_root_volume_tasks: self.replace_root_volume_tasks,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeReplaceRootVolumeTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput).
    pub fn builder() -> crate::output::describe_replace_root_volume_tasks_output::Builder {
        crate::output::describe_replace_root_volume_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeRegionsOutput {
    /// <p>Information about the Regions.</p>
    #[doc(hidden)]
    pub regions: std::option::Option<std::vec::Vec<crate::model::Region>>,
    _request_id: Option<String>,
}
impl DescribeRegionsOutput {
    /// <p>Information about the Regions.</p>
    pub fn regions(&self) -> std::option::Option<&[crate::model::Region]> {
        self.regions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeRegionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput).
pub mod describe_regions_output {

    /// A builder for [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) regions: std::option::Option<std::vec::Vec<crate::model::Region>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `regions`.
        ///
        /// To override the contents of this collection use [`set_regions`](Self::set_regions).
        ///
        /// <p>Information about the Regions.</p>
        pub fn regions(mut self, input: crate::model::Region) -> Self {
            let mut v = self.regions.unwrap_or_default();
            v.push(input);
            self.regions = Some(v);
            self
        }
        /// <p>Information about the Regions.</p>
        pub fn set_regions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Region>>,
        ) -> Self {
            self.regions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput).
        pub fn build(self) -> crate::output::DescribeRegionsOutput {
            crate::output::DescribeRegionsOutput {
                regions: self.regions,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeRegionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput).
    pub fn builder() -> crate::output::describe_regions_output::Builder {
        crate::output::describe_regions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePublicIpv4PoolsOutput {
    /// <p>Information about the address pools.</p>
    #[doc(hidden)]
    pub public_ipv4_pools: std::option::Option<std::vec::Vec<crate::model::PublicIpv4Pool>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePublicIpv4PoolsOutput {
    /// <p>Information about the address pools.</p>
    pub fn public_ipv4_pools(&self) -> std::option::Option<&[crate::model::PublicIpv4Pool]> {
        self.public_ipv4_pools.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePublicIpv4PoolsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput).
pub mod describe_public_ipv4_pools_output {

    /// A builder for [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) public_ipv4_pools:
            std::option::Option<std::vec::Vec<crate::model::PublicIpv4Pool>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `public_ipv4_pools`.
        ///
        /// To override the contents of this collection use [`set_public_ipv4_pools`](Self::set_public_ipv4_pools).
        ///
        /// <p>Information about the address pools.</p>
        pub fn public_ipv4_pools(mut self, input: crate::model::PublicIpv4Pool) -> Self {
            let mut v = self.public_ipv4_pools.unwrap_or_default();
            v.push(input);
            self.public_ipv4_pools = Some(v);
            self
        }
        /// <p>Information about the address pools.</p>
        pub fn set_public_ipv4_pools(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PublicIpv4Pool>>,
        ) -> Self {
            self.public_ipv4_pools = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput).
        pub fn build(self) -> crate::output::DescribePublicIpv4PoolsOutput {
            crate::output::DescribePublicIpv4PoolsOutput {
                public_ipv4_pools: self.public_ipv4_pools,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribePublicIpv4PoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput).
    pub fn builder() -> crate::output::describe_public_ipv4_pools_output::Builder {
        crate::output::describe_public_ipv4_pools_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePrincipalIdFormatOutput {
    /// <p>Information about the ID format settings for the ARN.</p>
    #[doc(hidden)]
    pub principals: std::option::Option<std::vec::Vec<crate::model::PrincipalIdFormat>>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePrincipalIdFormatOutput {
    /// <p>Information about the ID format settings for the ARN.</p>
    pub fn principals(&self) -> std::option::Option<&[crate::model::PrincipalIdFormat]> {
        self.principals.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePrincipalIdFormatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput).
pub mod describe_principal_id_format_output {

    /// A builder for [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) principals: std::option::Option<std::vec::Vec<crate::model::PrincipalIdFormat>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `principals`.
        ///
        /// To override the contents of this collection use [`set_principals`](Self::set_principals).
        ///
        /// <p>Information about the ID format settings for the ARN.</p>
        pub fn principals(mut self, input: crate::model::PrincipalIdFormat) -> Self {
            let mut v = self.principals.unwrap_or_default();
            v.push(input);
            self.principals = Some(v);
            self
        }
        /// <p>Information about the ID format settings for the ARN.</p>
        pub fn set_principals(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PrincipalIdFormat>>,
        ) -> Self {
            self.principals = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput).
        pub fn build(self) -> crate::output::DescribePrincipalIdFormatOutput {
            crate::output::DescribePrincipalIdFormatOutput {
                principals: self.principals,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribePrincipalIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput).
    pub fn builder() -> crate::output::describe_principal_id_format_output::Builder {
        crate::output::describe_principal_id_format_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePrefixListsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>All available prefix lists.</p>
    #[doc(hidden)]
    pub prefix_lists: std::option::Option<std::vec::Vec<crate::model::PrefixList>>,
    _request_id: Option<String>,
}
impl DescribePrefixListsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>All available prefix lists.</p>
    pub fn prefix_lists(&self) -> std::option::Option<&[crate::model::PrefixList]> {
        self.prefix_lists.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePrefixListsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput).
pub mod describe_prefix_lists_output {

    /// A builder for [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) prefix_lists: std::option::Option<std::vec::Vec<crate::model::PrefixList>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `prefix_lists`.
        ///
        /// To override the contents of this collection use [`set_prefix_lists`](Self::set_prefix_lists).
        ///
        /// <p>All available prefix lists.</p>
        pub fn prefix_lists(mut self, input: crate::model::PrefixList) -> Self {
            let mut v = self.prefix_lists.unwrap_or_default();
            v.push(input);
            self.prefix_lists = Some(v);
            self
        }
        /// <p>All available prefix lists.</p>
        pub fn set_prefix_lists(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PrefixList>>,
        ) -> Self {
            self.prefix_lists = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput).
        pub fn build(self) -> crate::output::DescribePrefixListsOutput {
            crate::output::DescribePrefixListsOutput {
                next_token: self.next_token,
                prefix_lists: self.prefix_lists,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribePrefixListsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput).
    pub fn builder() -> crate::output::describe_prefix_lists_output::Builder {
        crate::output::describe_prefix_lists_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePlacementGroupsOutput {
    /// <p>Information about the placement groups.</p>
    #[doc(hidden)]
    pub placement_groups: std::option::Option<std::vec::Vec<crate::model::PlacementGroup>>,
    _request_id: Option<String>,
}
impl DescribePlacementGroupsOutput {
    /// <p>Information about the placement groups.</p>
    pub fn placement_groups(&self) -> std::option::Option<&[crate::model::PlacementGroup]> {
        self.placement_groups.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePlacementGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput).
pub mod describe_placement_groups_output {

    /// A builder for [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) placement_groups:
            std::option::Option<std::vec::Vec<crate::model::PlacementGroup>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `placement_groups`.
        ///
        /// To override the contents of this collection use [`set_placement_groups`](Self::set_placement_groups).
        ///
        /// <p>Information about the placement groups.</p>
        pub fn placement_groups(mut self, input: crate::model::PlacementGroup) -> Self {
            let mut v = self.placement_groups.unwrap_or_default();
            v.push(input);
            self.placement_groups = Some(v);
            self
        }
        /// <p>Information about the placement groups.</p>
        pub fn set_placement_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PlacementGroup>>,
        ) -> Self {
            self.placement_groups = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput).
        pub fn build(self) -> crate::output::DescribePlacementGroupsOutput {
            crate::output::DescribePlacementGroupsOutput {
                placement_groups: self.placement_groups,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribePlacementGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput).
    pub fn builder() -> crate::output::describe_placement_groups_output::Builder {
        crate::output::describe_placement_groups_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeNetworkInterfaces.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInterfacesOutput {
    /// <p>Information about one or more network interfaces.</p>
    #[doc(hidden)]
    pub network_interfaces: std::option::Option<std::vec::Vec<crate::model::NetworkInterface>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkInterfacesOutput {
    /// <p>Information about one or more network interfaces.</p>
    pub fn network_interfaces(&self) -> std::option::Option<&[crate::model::NetworkInterface]> {
        self.network_interfaces.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInterfacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput).
pub mod describe_network_interfaces_output {

    /// A builder for [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interfaces:
            std::option::Option<std::vec::Vec<crate::model::NetworkInterface>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_interfaces`.
        ///
        /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
        ///
        /// <p>Information about one or more network interfaces.</p>
        pub fn network_interfaces(mut self, input: crate::model::NetworkInterface) -> Self {
            let mut v = self.network_interfaces.unwrap_or_default();
            v.push(input);
            self.network_interfaces = Some(v);
            self
        }
        /// <p>Information about one or more network interfaces.</p>
        pub fn set_network_interfaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkInterface>>,
        ) -> Self {
            self.network_interfaces = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInterfacesOutput {
            crate::output::DescribeNetworkInterfacesOutput {
                network_interfaces: self.network_interfaces,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInterfacesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput).
    pub fn builder() -> crate::output::describe_network_interfaces_output::Builder {
        crate::output::describe_network_interfaces_output::Builder::default()
    }
}

/// <p>Contains the output for DescribeNetworkInterfacePermissions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInterfacePermissionsOutput {
    /// <p>The network interface permissions.</p>
    #[doc(hidden)]
    pub network_interface_permissions:
        std::option::Option<std::vec::Vec<crate::model::NetworkInterfacePermission>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkInterfacePermissionsOutput {
    /// <p>The network interface permissions.</p>
    pub fn network_interface_permissions(
        &self,
    ) -> std::option::Option<&[crate::model::NetworkInterfacePermission]> {
        self.network_interface_permissions.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInterfacePermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput).
pub mod describe_network_interface_permissions_output {

    /// A builder for [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface_permissions:
            std::option::Option<std::vec::Vec<crate::model::NetworkInterfacePermission>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_interface_permissions`.
        ///
        /// To override the contents of this collection use [`set_network_interface_permissions`](Self::set_network_interface_permissions).
        ///
        /// <p>The network interface permissions.</p>
        pub fn network_interface_permissions(
            mut self,
            input: crate::model::NetworkInterfacePermission,
        ) -> Self {
            let mut v = self.network_interface_permissions.unwrap_or_default();
            v.push(input);
            self.network_interface_permissions = Some(v);
            self
        }
        /// <p>The network interface permissions.</p>
        pub fn set_network_interface_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkInterfacePermission>>,
        ) -> Self {
            self.network_interface_permissions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInterfacePermissionsOutput {
            crate::output::DescribeNetworkInterfacePermissionsOutput {
                network_interface_permissions: self.network_interface_permissions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInterfacePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput).
    pub fn builder() -> crate::output::describe_network_interface_permissions_output::Builder {
        crate::output::describe_network_interface_permissions_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeNetworkInterfaceAttribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInterfaceAttributeOutput {
    /// <p>The attachment (if any) of the network interface.</p>
    #[doc(hidden)]
    pub attachment: std::option::Option<crate::model::NetworkInterfaceAttachment>,
    /// <p>The description of the network interface.</p>
    #[doc(hidden)]
    pub description: std::option::Option<crate::model::AttributeValue>,
    /// <p>The security groups associated with the network interface.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether source/destination checking is enabled.</p>
    #[doc(hidden)]
    pub source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
    _request_id: Option<String>,
}
impl DescribeNetworkInterfaceAttributeOutput {
    /// <p>The attachment (if any) of the network interface.</p>
    pub fn attachment(&self) -> std::option::Option<&crate::model::NetworkInterfaceAttachment> {
        self.attachment.as_ref()
    }
    /// <p>The description of the network interface.</p>
    pub fn description(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.description.as_ref()
    }
    /// <p>The security groups associated with the network interface.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::model::GroupIdentifier]> {
        self.groups.as_deref()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>Indicates whether source/destination checking is enabled.</p>
    pub fn source_dest_check(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.source_dest_check.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInterfaceAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput).
pub mod describe_network_interface_attribute_output {

    /// A builder for [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attachment: std::option::Option<crate::model::NetworkInterfaceAttachment>,
        pub(crate) description: std::option::Option<crate::model::AttributeValue>,
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        pub(crate) source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The attachment (if any) of the network interface.</p>
        pub fn attachment(mut self, input: crate::model::NetworkInterfaceAttachment) -> Self {
            self.attachment = Some(input);
            self
        }
        /// <p>The attachment (if any) of the network interface.</p>
        pub fn set_attachment(
            mut self,
            input: std::option::Option<crate::model::NetworkInterfaceAttachment>,
        ) -> Self {
            self.attachment = input;
            self
        }
        /// <p>The description of the network interface.</p>
        pub fn description(mut self, input: crate::model::AttributeValue) -> Self {
            self.description = Some(input);
            self
        }
        /// <p>The description of the network interface.</p>
        pub fn set_description(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.description = input;
            self
        }
        /// Appends an item to `groups`.
        ///
        /// To override the contents of this collection use [`set_groups`](Self::set_groups).
        ///
        /// <p>The security groups associated with the network interface.</p>
        pub fn groups(mut self, input: crate::model::GroupIdentifier) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(input);
            self.groups = Some(v);
            self
        }
        /// <p>The security groups associated with the network interface.</p>
        pub fn set_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        ) -> Self {
            self.groups = input;
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(input.into());
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn set_network_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = input;
            self
        }
        /// <p>Indicates whether source/destination checking is enabled.</p>
        pub fn source_dest_check(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.source_dest_check = Some(input);
            self
        }
        /// <p>Indicates whether source/destination checking is enabled.</p>
        pub fn set_source_dest_check(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.source_dest_check = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInterfaceAttributeOutput {
            crate::output::DescribeNetworkInterfaceAttributeOutput {
                attachment: self.attachment,
                description: self.description,
                groups: self.groups,
                network_interface_id: self.network_interface_id,
                source_dest_check: self.source_dest_check,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInterfaceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput).
    pub fn builder() -> crate::output::describe_network_interface_attribute_output::Builder {
        crate::output::describe_network_interface_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInsightsPathsOutput {
    /// <p>Information about the paths.</p>
    #[doc(hidden)]
    pub network_insights_paths:
        std::option::Option<std::vec::Vec<crate::model::NetworkInsightsPath>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkInsightsPathsOutput {
    /// <p>Information about the paths.</p>
    pub fn network_insights_paths(
        &self,
    ) -> std::option::Option<&[crate::model::NetworkInsightsPath]> {
        self.network_insights_paths.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInsightsPathsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput).
pub mod describe_network_insights_paths_output {

    /// A builder for [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_paths:
            std::option::Option<std::vec::Vec<crate::model::NetworkInsightsPath>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_insights_paths`.
        ///
        /// To override the contents of this collection use [`set_network_insights_paths`](Self::set_network_insights_paths).
        ///
        /// <p>Information about the paths.</p>
        pub fn network_insights_paths(mut self, input: crate::model::NetworkInsightsPath) -> Self {
            let mut v = self.network_insights_paths.unwrap_or_default();
            v.push(input);
            self.network_insights_paths = Some(v);
            self
        }
        /// <p>Information about the paths.</p>
        pub fn set_network_insights_paths(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkInsightsPath>>,
        ) -> Self {
            self.network_insights_paths = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInsightsPathsOutput {
            crate::output::DescribeNetworkInsightsPathsOutput {
                network_insights_paths: self.network_insights_paths,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInsightsPathsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput).
    pub fn builder() -> crate::output::describe_network_insights_paths_output::Builder {
        crate::output::describe_network_insights_paths_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInsightsAnalysesOutput {
    /// <p>Information about the network insights analyses.</p>
    #[doc(hidden)]
    pub network_insights_analyses:
        std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAnalysis>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkInsightsAnalysesOutput {
    /// <p>Information about the network insights analyses.</p>
    pub fn network_insights_analyses(
        &self,
    ) -> std::option::Option<&[crate::model::NetworkInsightsAnalysis]> {
        self.network_insights_analyses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInsightsAnalysesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput).
pub mod describe_network_insights_analyses_output {

    /// A builder for [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_analyses:
            std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAnalysis>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_insights_analyses`.
        ///
        /// To override the contents of this collection use [`set_network_insights_analyses`](Self::set_network_insights_analyses).
        ///
        /// <p>Information about the network insights analyses.</p>
        pub fn network_insights_analyses(
            mut self,
            input: crate::model::NetworkInsightsAnalysis,
        ) -> Self {
            let mut v = self.network_insights_analyses.unwrap_or_default();
            v.push(input);
            self.network_insights_analyses = Some(v);
            self
        }
        /// <p>Information about the network insights analyses.</p>
        pub fn set_network_insights_analyses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAnalysis>>,
        ) -> Self {
            self.network_insights_analyses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInsightsAnalysesOutput {
            crate::output::DescribeNetworkInsightsAnalysesOutput {
                network_insights_analyses: self.network_insights_analyses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInsightsAnalysesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput).
    pub fn builder() -> crate::output::describe_network_insights_analyses_output::Builder {
        crate::output::describe_network_insights_analyses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInsightsAccessScopesOutput {
    /// <p>The Network Access Scopes.</p>
    #[doc(hidden)]
    pub network_insights_access_scopes:
        std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAccessScope>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkInsightsAccessScopesOutput {
    /// <p>The Network Access Scopes.</p>
    pub fn network_insights_access_scopes(
        &self,
    ) -> std::option::Option<&[crate::model::NetworkInsightsAccessScope]> {
        self.network_insights_access_scopes.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInsightsAccessScopesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInsightsAccessScopesOutput`](crate::output::DescribeNetworkInsightsAccessScopesOutput).
pub mod describe_network_insights_access_scopes_output {

    /// A builder for [`DescribeNetworkInsightsAccessScopesOutput`](crate::output::DescribeNetworkInsightsAccessScopesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scopes:
            std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAccessScope>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_insights_access_scopes`.
        ///
        /// To override the contents of this collection use [`set_network_insights_access_scopes`](Self::set_network_insights_access_scopes).
        ///
        /// <p>The Network Access Scopes.</p>
        pub fn network_insights_access_scopes(
            mut self,
            input: crate::model::NetworkInsightsAccessScope,
        ) -> Self {
            let mut v = self.network_insights_access_scopes.unwrap_or_default();
            v.push(input);
            self.network_insights_access_scopes = Some(v);
            self
        }
        /// <p>The Network Access Scopes.</p>
        pub fn set_network_insights_access_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAccessScope>>,
        ) -> Self {
            self.network_insights_access_scopes = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInsightsAccessScopesOutput`](crate::output::DescribeNetworkInsightsAccessScopesOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInsightsAccessScopesOutput {
            crate::output::DescribeNetworkInsightsAccessScopesOutput {
                network_insights_access_scopes: self.network_insights_access_scopes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInsightsAccessScopesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsAccessScopesOutput`](crate::output::DescribeNetworkInsightsAccessScopesOutput).
    pub fn builder() -> crate::output::describe_network_insights_access_scopes_output::Builder {
        crate::output::describe_network_insights_access_scopes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInsightsAccessScopeAnalysesOutput {
    /// <p>The Network Access Scope analyses.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_analyses:
        std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAccessScopeAnalysis>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkInsightsAccessScopeAnalysesOutput {
    /// <p>The Network Access Scope analyses.</p>
    pub fn network_insights_access_scope_analyses(
        &self,
    ) -> std::option::Option<&[crate::model::NetworkInsightsAccessScopeAnalysis]> {
        self.network_insights_access_scope_analyses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkInsightsAccessScopeAnalysesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkInsightsAccessScopeAnalysesOutput`](crate::output::DescribeNetworkInsightsAccessScopeAnalysesOutput).
pub mod describe_network_insights_access_scope_analyses_output {

    /// A builder for [`DescribeNetworkInsightsAccessScopeAnalysesOutput`](crate::output::DescribeNetworkInsightsAccessScopeAnalysesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope_analyses:
            std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAccessScopeAnalysis>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_insights_access_scope_analyses`.
        ///
        /// To override the contents of this collection use [`set_network_insights_access_scope_analyses`](Self::set_network_insights_access_scope_analyses).
        ///
        /// <p>The Network Access Scope analyses.</p>
        pub fn network_insights_access_scope_analyses(
            mut self,
            input: crate::model::NetworkInsightsAccessScopeAnalysis,
        ) -> Self {
            let mut v = self
                .network_insights_access_scope_analyses
                .unwrap_or_default();
            v.push(input);
            self.network_insights_access_scope_analyses = Some(v);
            self
        }
        /// <p>The Network Access Scope analyses.</p>
        pub fn set_network_insights_access_scope_analyses(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::NetworkInsightsAccessScopeAnalysis>,
            >,
        ) -> Self {
            self.network_insights_access_scope_analyses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInsightsAccessScopeAnalysesOutput`](crate::output::DescribeNetworkInsightsAccessScopeAnalysesOutput).
        pub fn build(self) -> crate::output::DescribeNetworkInsightsAccessScopeAnalysesOutput {
            crate::output::DescribeNetworkInsightsAccessScopeAnalysesOutput {
                network_insights_access_scope_analyses: self.network_insights_access_scope_analyses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkInsightsAccessScopeAnalysesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsAccessScopeAnalysesOutput`](crate::output::DescribeNetworkInsightsAccessScopeAnalysesOutput).
    pub fn builder(
    ) -> crate::output::describe_network_insights_access_scope_analyses_output::Builder {
        crate::output::describe_network_insights_access_scope_analyses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkAclsOutput {
    /// <p>Information about one or more network ACLs.</p>
    #[doc(hidden)]
    pub network_acls: std::option::Option<std::vec::Vec<crate::model::NetworkAcl>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNetworkAclsOutput {
    /// <p>Information about one or more network ACLs.</p>
    pub fn network_acls(&self) -> std::option::Option<&[crate::model::NetworkAcl]> {
        self.network_acls.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNetworkAclsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput).
pub mod describe_network_acls_output {

    /// A builder for [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_acls: std::option::Option<std::vec::Vec<crate::model::NetworkAcl>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `network_acls`.
        ///
        /// To override the contents of this collection use [`set_network_acls`](Self::set_network_acls).
        ///
        /// <p>Information about one or more network ACLs.</p>
        pub fn network_acls(mut self, input: crate::model::NetworkAcl) -> Self {
            let mut v = self.network_acls.unwrap_or_default();
            v.push(input);
            self.network_acls = Some(v);
            self
        }
        /// <p>Information about one or more network ACLs.</p>
        pub fn set_network_acls(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkAcl>>,
        ) -> Self {
            self.network_acls = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput).
        pub fn build(self) -> crate::output::DescribeNetworkAclsOutput {
            crate::output::DescribeNetworkAclsOutput {
                network_acls: self.network_acls,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNetworkAclsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput).
    pub fn builder() -> crate::output::describe_network_acls_output::Builder {
        crate::output::describe_network_acls_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNatGatewaysOutput {
    /// <p>Information about the NAT gateways.</p>
    #[doc(hidden)]
    pub nat_gateways: std::option::Option<std::vec::Vec<crate::model::NatGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNatGatewaysOutput {
    /// <p>Information about the NAT gateways.</p>
    pub fn nat_gateways(&self) -> std::option::Option<&[crate::model::NatGateway]> {
        self.nat_gateways.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNatGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput).
pub mod describe_nat_gateways_output {

    /// A builder for [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) nat_gateways: std::option::Option<std::vec::Vec<crate::model::NatGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `nat_gateways`.
        ///
        /// To override the contents of this collection use [`set_nat_gateways`](Self::set_nat_gateways).
        ///
        /// <p>Information about the NAT gateways.</p>
        pub fn nat_gateways(mut self, input: crate::model::NatGateway) -> Self {
            let mut v = self.nat_gateways.unwrap_or_default();
            v.push(input);
            self.nat_gateways = Some(v);
            self
        }
        /// <p>Information about the NAT gateways.</p>
        pub fn set_nat_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NatGateway>>,
        ) -> Self {
            self.nat_gateways = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeNatGatewaysOutput {
            crate::output::DescribeNatGatewaysOutput {
                nat_gateways: self.nat_gateways,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNatGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput).
    pub fn builder() -> crate::output::describe_nat_gateways_output::Builder {
        crate::output::describe_nat_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMovingAddressesOutput {
    /// <p>The status for each Elastic IP address.</p>
    #[doc(hidden)]
    pub moving_address_statuses:
        std::option::Option<std::vec::Vec<crate::model::MovingAddressStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeMovingAddressesOutput {
    /// <p>The status for each Elastic IP address.</p>
    pub fn moving_address_statuses(
        &self,
    ) -> std::option::Option<&[crate::model::MovingAddressStatus]> {
        self.moving_address_statuses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeMovingAddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput).
pub mod describe_moving_addresses_output {

    /// A builder for [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) moving_address_statuses:
            std::option::Option<std::vec::Vec<crate::model::MovingAddressStatus>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `moving_address_statuses`.
        ///
        /// To override the contents of this collection use [`set_moving_address_statuses`](Self::set_moving_address_statuses).
        ///
        /// <p>The status for each Elastic IP address.</p>
        pub fn moving_address_statuses(mut self, input: crate::model::MovingAddressStatus) -> Self {
            let mut v = self.moving_address_statuses.unwrap_or_default();
            v.push(input);
            self.moving_address_statuses = Some(v);
            self
        }
        /// <p>The status for each Elastic IP address.</p>
        pub fn set_moving_address_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MovingAddressStatus>>,
        ) -> Self {
            self.moving_address_statuses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput).
        pub fn build(self) -> crate::output::DescribeMovingAddressesOutput {
            crate::output::DescribeMovingAddressesOutput {
                moving_address_statuses: self.moving_address_statuses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeMovingAddressesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput).
    pub fn builder() -> crate::output::describe_moving_addresses_output::Builder {
        crate::output::describe_moving_addresses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeManagedPrefixListsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the prefix lists.</p>
    #[doc(hidden)]
    pub prefix_lists: std::option::Option<std::vec::Vec<crate::model::ManagedPrefixList>>,
    _request_id: Option<String>,
}
impl DescribeManagedPrefixListsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the prefix lists.</p>
    pub fn prefix_lists(&self) -> std::option::Option<&[crate::model::ManagedPrefixList]> {
        self.prefix_lists.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeManagedPrefixListsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput).
pub mod describe_managed_prefix_lists_output {

    /// A builder for [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) prefix_lists:
            std::option::Option<std::vec::Vec<crate::model::ManagedPrefixList>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `prefix_lists`.
        ///
        /// To override the contents of this collection use [`set_prefix_lists`](Self::set_prefix_lists).
        ///
        /// <p>Information about the prefix lists.</p>
        pub fn prefix_lists(mut self, input: crate::model::ManagedPrefixList) -> Self {
            let mut v = self.prefix_lists.unwrap_or_default();
            v.push(input);
            self.prefix_lists = Some(v);
            self
        }
        /// <p>Information about the prefix lists.</p>
        pub fn set_prefix_lists(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ManagedPrefixList>>,
        ) -> Self {
            self.prefix_lists = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput).
        pub fn build(self) -> crate::output::DescribeManagedPrefixListsOutput {
            crate::output::DescribeManagedPrefixListsOutput {
                next_token: self.next_token,
                prefix_lists: self.prefix_lists,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeManagedPrefixListsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput).
    pub fn builder() -> crate::output::describe_managed_prefix_lists_output::Builder {
        crate::output::describe_managed_prefix_lists_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLocalGatewayVirtualInterfacesOutput {
    /// <p>Information about the virtual interfaces.</p>
    #[doc(hidden)]
    pub local_gateway_virtual_interfaces:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterface>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocalGatewayVirtualInterfacesOutput {
    /// <p>Information about the virtual interfaces.</p>
    pub fn local_gateway_virtual_interfaces(
        &self,
    ) -> std::option::Option<&[crate::model::LocalGatewayVirtualInterface]> {
        self.local_gateway_virtual_interfaces.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLocalGatewayVirtualInterfacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput).
pub mod describe_local_gateway_virtual_interfaces_output {

    /// A builder for [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_virtual_interfaces:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterface>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `local_gateway_virtual_interfaces`.
        ///
        /// To override the contents of this collection use [`set_local_gateway_virtual_interfaces`](Self::set_local_gateway_virtual_interfaces).
        ///
        /// <p>Information about the virtual interfaces.</p>
        pub fn local_gateway_virtual_interfaces(
            mut self,
            input: crate::model::LocalGatewayVirtualInterface,
        ) -> Self {
            let mut v = self.local_gateway_virtual_interfaces.unwrap_or_default();
            v.push(input);
            self.local_gateway_virtual_interfaces = Some(v);
            self
        }
        /// <p>Information about the virtual interfaces.</p>
        pub fn set_local_gateway_virtual_interfaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterface>>,
        ) -> Self {
            self.local_gateway_virtual_interfaces = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput).
        pub fn build(self) -> crate::output::DescribeLocalGatewayVirtualInterfacesOutput {
            crate::output::DescribeLocalGatewayVirtualInterfacesOutput {
                local_gateway_virtual_interfaces: self.local_gateway_virtual_interfaces,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLocalGatewayVirtualInterfacesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput).
    pub fn builder() -> crate::output::describe_local_gateway_virtual_interfaces_output::Builder {
        crate::output::describe_local_gateway_virtual_interfaces_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    /// <p>The virtual interface groups.</p>
    #[doc(hidden)]
    pub local_gateway_virtual_interface_groups:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    /// <p>The virtual interface groups.</p>
    pub fn local_gateway_virtual_interface_groups(
        &self,
    ) -> std::option::Option<&[crate::model::LocalGatewayVirtualInterfaceGroup]> {
        self.local_gateway_virtual_interface_groups.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput).
pub mod describe_local_gateway_virtual_interface_groups_output {

    /// A builder for [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_virtual_interface_groups:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `local_gateway_virtual_interface_groups`.
        ///
        /// To override the contents of this collection use [`set_local_gateway_virtual_interface_groups`](Self::set_local_gateway_virtual_interface_groups).
        ///
        /// <p>The virtual interface groups.</p>
        pub fn local_gateway_virtual_interface_groups(
            mut self,
            input: crate::model::LocalGatewayVirtualInterfaceGroup,
        ) -> Self {
            let mut v = self
                .local_gateway_virtual_interface_groups
                .unwrap_or_default();
            v.push(input);
            self.local_gateway_virtual_interface_groups = Some(v);
            self
        }
        /// <p>The virtual interface groups.</p>
        pub fn set_local_gateway_virtual_interface_groups(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>,
            >,
        ) -> Self {
            self.local_gateway_virtual_interface_groups = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput).
        pub fn build(self) -> crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput {
            crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput {
                local_gateway_virtual_interface_groups: self.local_gateway_virtual_interface_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput).
    pub fn builder(
    ) -> crate::output::describe_local_gateway_virtual_interface_groups_output::Builder {
        crate::output::describe_local_gateway_virtual_interface_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLocalGatewaysOutput {
    /// <p>Information about the local gateways.</p>
    #[doc(hidden)]
    pub local_gateways: std::option::Option<std::vec::Vec<crate::model::LocalGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocalGatewaysOutput {
    /// <p>Information about the local gateways.</p>
    pub fn local_gateways(&self) -> std::option::Option<&[crate::model::LocalGateway]> {
        self.local_gateways.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLocalGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput).
pub mod describe_local_gateways_output {

    /// A builder for [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateways: std::option::Option<std::vec::Vec<crate::model::LocalGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `local_gateways`.
        ///
        /// To override the contents of this collection use [`set_local_gateways`](Self::set_local_gateways).
        ///
        /// <p>Information about the local gateways.</p>
        pub fn local_gateways(mut self, input: crate::model::LocalGateway) -> Self {
            let mut v = self.local_gateways.unwrap_or_default();
            v.push(input);
            self.local_gateways = Some(v);
            self
        }
        /// <p>Information about the local gateways.</p>
        pub fn set_local_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LocalGateway>>,
        ) -> Self {
            self.local_gateways = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeLocalGatewaysOutput {
            crate::output::DescribeLocalGatewaysOutput {
                local_gateways: self.local_gateways,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLocalGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput).
    pub fn builder() -> crate::output::describe_local_gateways_output::Builder {
        crate::output::describe_local_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    /// <p>Information about the associations.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_vpc_associations:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub fn local_gateway_route_table_vpc_associations(
        &self,
    ) -> std::option::Option<&[crate::model::LocalGatewayRouteTableVpcAssociation]> {
        self.local_gateway_route_table_vpc_associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput).
pub mod describe_local_gateway_route_table_vpc_associations_output {

    /// A builder for [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_vpc_associations:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `local_gateway_route_table_vpc_associations`.
        ///
        /// To override the contents of this collection use [`set_local_gateway_route_table_vpc_associations`](Self::set_local_gateway_route_table_vpc_associations).
        ///
        /// <p>Information about the associations.</p>
        pub fn local_gateway_route_table_vpc_associations(
            mut self,
            input: crate::model::LocalGatewayRouteTableVpcAssociation,
        ) -> Self {
            let mut v = self
                .local_gateway_route_table_vpc_associations
                .unwrap_or_default();
            v.push(input);
            self.local_gateway_route_table_vpc_associations = Some(v);
            self
        }
        /// <p>Information about the associations.</p>
        pub fn set_local_gateway_route_table_vpc_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>,
            >,
        ) -> Self {
            self.local_gateway_route_table_vpc_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput).
        pub fn build(self) -> crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput {
            crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput {
                local_gateway_route_table_vpc_associations: self
                    .local_gateway_route_table_vpc_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput).
    pub fn builder(
    ) -> crate::output::describe_local_gateway_route_table_vpc_associations_output::Builder {
        crate::output::describe_local_gateway_route_table_vpc_associations_output::Builder::default(
        )
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
    /// <p>Information about the associations.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_virtual_interface_group_associations: std::option::Option<
        std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
    >,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub fn local_gateway_route_table_virtual_interface_group_associations(
        &self,
    ) -> std::option::Option<&[crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation]>
    {
        self.local_gateway_route_table_virtual_interface_group_associations
            .as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId
    for DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
{
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput).
pub mod describe_local_gateway_route_table_virtual_interface_group_associations_output {

    /// A builder for [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_virtual_interface_group_associations:
            std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
            >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `local_gateway_route_table_virtual_interface_group_associations`.
        ///
        /// To override the contents of this collection use [`set_local_gateway_route_table_virtual_interface_group_associations`](Self::set_local_gateway_route_table_virtual_interface_group_associations).
        ///
        /// <p>Information about the associations.</p>
        pub fn local_gateway_route_table_virtual_interface_group_associations(
            mut self,
            input: crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
        ) -> Self {
            let mut v = self
                .local_gateway_route_table_virtual_interface_group_associations
                .unwrap_or_default();
            v.push(input);
            self.local_gateway_route_table_virtual_interface_group_associations = Some(v);
            self
        }
        /// <p>Information about the associations.</p>
        pub fn set_local_gateway_route_table_virtual_interface_group_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
            >,
        ) -> Self {
            self.local_gateway_route_table_virtual_interface_group_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput).
        pub fn build(
            self,
        ) -> crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
        {
            crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
                local_gateway_route_table_virtual_interface_group_associations: self
                    .local_gateway_route_table_virtual_interface_group_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput).
    pub fn builder() -> crate::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder{
        crate::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLocalGatewayRouteTablesOutput {
    /// <p>Information about the local gateway route tables.</p>
    #[doc(hidden)]
    pub local_gateway_route_tables:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTable>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocalGatewayRouteTablesOutput {
    /// <p>Information about the local gateway route tables.</p>
    pub fn local_gateway_route_tables(
        &self,
    ) -> std::option::Option<&[crate::model::LocalGatewayRouteTable]> {
        self.local_gateway_route_tables.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLocalGatewayRouteTablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput).
pub mod describe_local_gateway_route_tables_output {

    /// A builder for [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_tables:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `local_gateway_route_tables`.
        ///
        /// To override the contents of this collection use [`set_local_gateway_route_tables`](Self::set_local_gateway_route_tables).
        ///
        /// <p>Information about the local gateway route tables.</p>
        pub fn local_gateway_route_tables(
            mut self,
            input: crate::model::LocalGatewayRouteTable,
        ) -> Self {
            let mut v = self.local_gateway_route_tables.unwrap_or_default();
            v.push(input);
            self.local_gateway_route_tables = Some(v);
            self
        }
        /// <p>Information about the local gateway route tables.</p>
        pub fn set_local_gateway_route_tables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTable>>,
        ) -> Self {
            self.local_gateway_route_tables = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput).
        pub fn build(self) -> crate::output::DescribeLocalGatewayRouteTablesOutput {
            crate::output::DescribeLocalGatewayRouteTablesOutput {
                local_gateway_route_tables: self.local_gateway_route_tables,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLocalGatewayRouteTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput).
    pub fn builder() -> crate::output::describe_local_gateway_route_tables_output::Builder {
        crate::output::describe_local_gateway_route_tables_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLaunchTemplateVersionsOutput {
    /// <p>Information about the launch template versions.</p>
    #[doc(hidden)]
    pub launch_template_versions:
        std::option::Option<std::vec::Vec<crate::model::LaunchTemplateVersion>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLaunchTemplateVersionsOutput {
    /// <p>Information about the launch template versions.</p>
    pub fn launch_template_versions(
        &self,
    ) -> std::option::Option<&[crate::model::LaunchTemplateVersion]> {
        self.launch_template_versions.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLaunchTemplateVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput).
pub mod describe_launch_template_versions_output {

    /// A builder for [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template_versions:
            std::option::Option<std::vec::Vec<crate::model::LaunchTemplateVersion>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `launch_template_versions`.
        ///
        /// To override the contents of this collection use [`set_launch_template_versions`](Self::set_launch_template_versions).
        ///
        /// <p>Information about the launch template versions.</p>
        pub fn launch_template_versions(
            mut self,
            input: crate::model::LaunchTemplateVersion,
        ) -> Self {
            let mut v = self.launch_template_versions.unwrap_or_default();
            v.push(input);
            self.launch_template_versions = Some(v);
            self
        }
        /// <p>Information about the launch template versions.</p>
        pub fn set_launch_template_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LaunchTemplateVersion>>,
        ) -> Self {
            self.launch_template_versions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput).
        pub fn build(self) -> crate::output::DescribeLaunchTemplateVersionsOutput {
            crate::output::DescribeLaunchTemplateVersionsOutput {
                launch_template_versions: self.launch_template_versions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLaunchTemplateVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput).
    pub fn builder() -> crate::output::describe_launch_template_versions_output::Builder {
        crate::output::describe_launch_template_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLaunchTemplatesOutput {
    /// <p>Information about the launch templates.</p>
    #[doc(hidden)]
    pub launch_templates: std::option::Option<std::vec::Vec<crate::model::LaunchTemplate>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLaunchTemplatesOutput {
    /// <p>Information about the launch templates.</p>
    pub fn launch_templates(&self) -> std::option::Option<&[crate::model::LaunchTemplate]> {
        self.launch_templates.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLaunchTemplatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput).
pub mod describe_launch_templates_output {

    /// A builder for [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_templates:
            std::option::Option<std::vec::Vec<crate::model::LaunchTemplate>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `launch_templates`.
        ///
        /// To override the contents of this collection use [`set_launch_templates`](Self::set_launch_templates).
        ///
        /// <p>Information about the launch templates.</p>
        pub fn launch_templates(mut self, input: crate::model::LaunchTemplate) -> Self {
            let mut v = self.launch_templates.unwrap_or_default();
            v.push(input);
            self.launch_templates = Some(v);
            self
        }
        /// <p>Information about the launch templates.</p>
        pub fn set_launch_templates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LaunchTemplate>>,
        ) -> Self {
            self.launch_templates = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput).
        pub fn build(self) -> crate::output::DescribeLaunchTemplatesOutput {
            crate::output::DescribeLaunchTemplatesOutput {
                launch_templates: self.launch_templates,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLaunchTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput).
    pub fn builder() -> crate::output::describe_launch_templates_output::Builder {
        crate::output::describe_launch_templates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeKeyPairsOutput {
    /// <p>Information about the key pairs.</p>
    #[doc(hidden)]
    pub key_pairs: std::option::Option<std::vec::Vec<crate::model::KeyPairInfo>>,
    _request_id: Option<String>,
}
impl DescribeKeyPairsOutput {
    /// <p>Information about the key pairs.</p>
    pub fn key_pairs(&self) -> std::option::Option<&[crate::model::KeyPairInfo]> {
        self.key_pairs.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeKeyPairsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput).
pub mod describe_key_pairs_output {

    /// A builder for [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_pairs: std::option::Option<std::vec::Vec<crate::model::KeyPairInfo>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `key_pairs`.
        ///
        /// To override the contents of this collection use [`set_key_pairs`](Self::set_key_pairs).
        ///
        /// <p>Information about the key pairs.</p>
        pub fn key_pairs(mut self, input: crate::model::KeyPairInfo) -> Self {
            let mut v = self.key_pairs.unwrap_or_default();
            v.push(input);
            self.key_pairs = Some(v);
            self
        }
        /// <p>Information about the key pairs.</p>
        pub fn set_key_pairs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::KeyPairInfo>>,
        ) -> Self {
            self.key_pairs = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput).
        pub fn build(self) -> crate::output::DescribeKeyPairsOutput {
            crate::output::DescribeKeyPairsOutput {
                key_pairs: self.key_pairs,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeKeyPairsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput).
    pub fn builder() -> crate::output::describe_key_pairs_output::Builder {
        crate::output::describe_key_pairs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIpv6PoolsOutput {
    /// <p>Information about the IPv6 address pools.</p>
    #[doc(hidden)]
    pub ipv6_pools: std::option::Option<std::vec::Vec<crate::model::Ipv6Pool>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeIpv6PoolsOutput {
    /// <p>Information about the IPv6 address pools.</p>
    pub fn ipv6_pools(&self) -> std::option::Option<&[crate::model::Ipv6Pool]> {
        self.ipv6_pools.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIpv6PoolsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput).
pub mod describe_ipv6_pools_output {

    /// A builder for [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_pools: std::option::Option<std::vec::Vec<crate::model::Ipv6Pool>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `ipv6_pools`.
        ///
        /// To override the contents of this collection use [`set_ipv6_pools`](Self::set_ipv6_pools).
        ///
        /// <p>Information about the IPv6 address pools.</p>
        pub fn ipv6_pools(mut self, input: crate::model::Ipv6Pool) -> Self {
            let mut v = self.ipv6_pools.unwrap_or_default();
            v.push(input);
            self.ipv6_pools = Some(v);
            self
        }
        /// <p>Information about the IPv6 address pools.</p>
        pub fn set_ipv6_pools(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Ipv6Pool>>,
        ) -> Self {
            self.ipv6_pools = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput).
        pub fn build(self) -> crate::output::DescribeIpv6PoolsOutput {
            crate::output::DescribeIpv6PoolsOutput {
                ipv6_pools: self.ipv6_pools,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIpv6PoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput).
    pub fn builder() -> crate::output::describe_ipv6_pools_output::Builder {
        crate::output::describe_ipv6_pools_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIpamScopesOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The scopes you want information on.</p>
    #[doc(hidden)]
    pub ipam_scopes: std::option::Option<std::vec::Vec<crate::model::IpamScope>>,
    _request_id: Option<String>,
}
impl DescribeIpamScopesOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The scopes you want information on.</p>
    pub fn ipam_scopes(&self) -> std::option::Option<&[crate::model::IpamScope]> {
        self.ipam_scopes.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIpamScopesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIpamScopesOutput`](crate::output::DescribeIpamScopesOutput).
pub mod describe_ipam_scopes_output {

    /// A builder for [`DescribeIpamScopesOutput`](crate::output::DescribeIpamScopesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) ipam_scopes: std::option::Option<std::vec::Vec<crate::model::IpamScope>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `ipam_scopes`.
        ///
        /// To override the contents of this collection use [`set_ipam_scopes`](Self::set_ipam_scopes).
        ///
        /// <p>The scopes you want information on.</p>
        pub fn ipam_scopes(mut self, input: crate::model::IpamScope) -> Self {
            let mut v = self.ipam_scopes.unwrap_or_default();
            v.push(input);
            self.ipam_scopes = Some(v);
            self
        }
        /// <p>The scopes you want information on.</p>
        pub fn set_ipam_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpamScope>>,
        ) -> Self {
            self.ipam_scopes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIpamScopesOutput`](crate::output::DescribeIpamScopesOutput).
        pub fn build(self) -> crate::output::DescribeIpamScopesOutput {
            crate::output::DescribeIpamScopesOutput {
                next_token: self.next_token,
                ipam_scopes: self.ipam_scopes,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIpamScopesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIpamScopesOutput`](crate::output::DescribeIpamScopesOutput).
    pub fn builder() -> crate::output::describe_ipam_scopes_output::Builder {
        crate::output::describe_ipam_scopes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIpamsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the IPAMs.</p>
    #[doc(hidden)]
    pub ipams: std::option::Option<std::vec::Vec<crate::model::Ipam>>,
    _request_id: Option<String>,
}
impl DescribeIpamsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the IPAMs.</p>
    pub fn ipams(&self) -> std::option::Option<&[crate::model::Ipam]> {
        self.ipams.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIpamsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIpamsOutput`](crate::output::DescribeIpamsOutput).
pub mod describe_ipams_output {

    /// A builder for [`DescribeIpamsOutput`](crate::output::DescribeIpamsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) ipams: std::option::Option<std::vec::Vec<crate::model::Ipam>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `ipams`.
        ///
        /// To override the contents of this collection use [`set_ipams`](Self::set_ipams).
        ///
        /// <p>Information about the IPAMs.</p>
        pub fn ipams(mut self, input: crate::model::Ipam) -> Self {
            let mut v = self.ipams.unwrap_or_default();
            v.push(input);
            self.ipams = Some(v);
            self
        }
        /// <p>Information about the IPAMs.</p>
        pub fn set_ipams(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Ipam>>,
        ) -> Self {
            self.ipams = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIpamsOutput`](crate::output::DescribeIpamsOutput).
        pub fn build(self) -> crate::output::DescribeIpamsOutput {
            crate::output::DescribeIpamsOutput {
                next_token: self.next_token,
                ipams: self.ipams,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIpamsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIpamsOutput`](crate::output::DescribeIpamsOutput).
    pub fn builder() -> crate::output::describe_ipams_output::Builder {
        crate::output::describe_ipams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIpamPoolsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the IPAM pools.</p>
    #[doc(hidden)]
    pub ipam_pools: std::option::Option<std::vec::Vec<crate::model::IpamPool>>,
    _request_id: Option<String>,
}
impl DescribeIpamPoolsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the IPAM pools.</p>
    pub fn ipam_pools(&self) -> std::option::Option<&[crate::model::IpamPool]> {
        self.ipam_pools.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIpamPoolsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIpamPoolsOutput`](crate::output::DescribeIpamPoolsOutput).
pub mod describe_ipam_pools_output {

    /// A builder for [`DescribeIpamPoolsOutput`](crate::output::DescribeIpamPoolsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) ipam_pools: std::option::Option<std::vec::Vec<crate::model::IpamPool>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `ipam_pools`.
        ///
        /// To override the contents of this collection use [`set_ipam_pools`](Self::set_ipam_pools).
        ///
        /// <p>Information about the IPAM pools.</p>
        pub fn ipam_pools(mut self, input: crate::model::IpamPool) -> Self {
            let mut v = self.ipam_pools.unwrap_or_default();
            v.push(input);
            self.ipam_pools = Some(v);
            self
        }
        /// <p>Information about the IPAM pools.</p>
        pub fn set_ipam_pools(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IpamPool>>,
        ) -> Self {
            self.ipam_pools = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIpamPoolsOutput`](crate::output::DescribeIpamPoolsOutput).
        pub fn build(self) -> crate::output::DescribeIpamPoolsOutput {
            crate::output::DescribeIpamPoolsOutput {
                next_token: self.next_token,
                ipam_pools: self.ipam_pools,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIpamPoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIpamPoolsOutput`](crate::output::DescribeIpamPoolsOutput).
    pub fn builder() -> crate::output::describe_ipam_pools_output::Builder {
        crate::output::describe_ipam_pools_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInternetGatewaysOutput {
    /// <p>Information about one or more internet gateways.</p>
    #[doc(hidden)]
    pub internet_gateways: std::option::Option<std::vec::Vec<crate::model::InternetGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInternetGatewaysOutput {
    /// <p>Information about one or more internet gateways.</p>
    pub fn internet_gateways(&self) -> std::option::Option<&[crate::model::InternetGateway]> {
        self.internet_gateways.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInternetGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput).
pub mod describe_internet_gateways_output {

    /// A builder for [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) internet_gateways:
            std::option::Option<std::vec::Vec<crate::model::InternetGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `internet_gateways`.
        ///
        /// To override the contents of this collection use [`set_internet_gateways`](Self::set_internet_gateways).
        ///
        /// <p>Information about one or more internet gateways.</p>
        pub fn internet_gateways(mut self, input: crate::model::InternetGateway) -> Self {
            let mut v = self.internet_gateways.unwrap_or_default();
            v.push(input);
            self.internet_gateways = Some(v);
            self
        }
        /// <p>Information about one or more internet gateways.</p>
        pub fn set_internet_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InternetGateway>>,
        ) -> Self {
            self.internet_gateways = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeInternetGatewaysOutput {
            crate::output::DescribeInternetGatewaysOutput {
                internet_gateways: self.internet_gateways,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInternetGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput).
    pub fn builder() -> crate::output::describe_internet_gateways_output::Builder {
        crate::output::describe_internet_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceTypesOutput {
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #[doc(hidden)]
    pub instance_types: std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfo>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstanceTypesOutput {
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_types(&self) -> std::option::Option<&[crate::model::InstanceTypeInfo]> {
        self.instance_types.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput).
pub mod describe_instance_types_output {

    /// A builder for [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_types:
            std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_types`.
        ///
        /// To override the contents of this collection use [`set_instance_types`](Self::set_instance_types).
        ///
        /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn instance_types(mut self, input: crate::model::InstanceTypeInfo) -> Self {
            let mut v = self.instance_types.unwrap_or_default();
            v.push(input);
            self.instance_types = Some(v);
            self
        }
        /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_instance_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfo>>,
        ) -> Self {
            self.instance_types = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput).
        pub fn build(self) -> crate::output::DescribeInstanceTypesOutput {
            crate::output::DescribeInstanceTypesOutput {
                instance_types: self.instance_types,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput).
    pub fn builder() -> crate::output::describe_instance_types_output::Builder {
        crate::output::describe_instance_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceTypeOfferingsOutput {
    /// <p>The instance types offered.</p>
    #[doc(hidden)]
    pub instance_type_offerings:
        std::option::Option<std::vec::Vec<crate::model::InstanceTypeOffering>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstanceTypeOfferingsOutput {
    /// <p>The instance types offered.</p>
    pub fn instance_type_offerings(
        &self,
    ) -> std::option::Option<&[crate::model::InstanceTypeOffering]> {
        self.instance_type_offerings.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceTypeOfferingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput).
pub mod describe_instance_type_offerings_output {

    /// A builder for [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_type_offerings:
            std::option::Option<std::vec::Vec<crate::model::InstanceTypeOffering>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_type_offerings`.
        ///
        /// To override the contents of this collection use [`set_instance_type_offerings`](Self::set_instance_type_offerings).
        ///
        /// <p>The instance types offered.</p>
        pub fn instance_type_offerings(
            mut self,
            input: crate::model::InstanceTypeOffering,
        ) -> Self {
            let mut v = self.instance_type_offerings.unwrap_or_default();
            v.push(input);
            self.instance_type_offerings = Some(v);
            self
        }
        /// <p>The instance types offered.</p>
        pub fn set_instance_type_offerings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceTypeOffering>>,
        ) -> Self {
            self.instance_type_offerings = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput).
        pub fn build(self) -> crate::output::DescribeInstanceTypeOfferingsOutput {
            crate::output::DescribeInstanceTypeOfferingsOutput {
                instance_type_offerings: self.instance_type_offerings,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceTypeOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput).
    pub fn builder() -> crate::output::describe_instance_type_offerings_output::Builder {
        crate::output::describe_instance_type_offerings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceStatusOutput {
    /// <p>Information about the status of the instances.</p>
    #[doc(hidden)]
    pub instance_statuses: std::option::Option<std::vec::Vec<crate::model::InstanceStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstanceStatusOutput {
    /// <p>Information about the status of the instances.</p>
    pub fn instance_statuses(&self) -> std::option::Option<&[crate::model::InstanceStatus]> {
        self.instance_statuses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput).
pub mod describe_instance_status_output {

    /// A builder for [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_statuses:
            std::option::Option<std::vec::Vec<crate::model::InstanceStatus>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_statuses`.
        ///
        /// To override the contents of this collection use [`set_instance_statuses`](Self::set_instance_statuses).
        ///
        /// <p>Information about the status of the instances.</p>
        pub fn instance_statuses(mut self, input: crate::model::InstanceStatus) -> Self {
            let mut v = self.instance_statuses.unwrap_or_default();
            v.push(input);
            self.instance_statuses = Some(v);
            self
        }
        /// <p>Information about the status of the instances.</p>
        pub fn set_instance_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceStatus>>,
        ) -> Self {
            self.instance_statuses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput).
        pub fn build(self) -> crate::output::DescribeInstanceStatusOutput {
            crate::output::DescribeInstanceStatusOutput {
                instance_statuses: self.instance_statuses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput).
    pub fn builder() -> crate::output::describe_instance_status_output::Builder {
        crate::output::describe_instance_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstancesOutput {
    /// <p>Information about the reservations.</p>
    #[doc(hidden)]
    pub reservations: std::option::Option<std::vec::Vec<crate::model::Reservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstancesOutput {
    /// <p>Information about the reservations.</p>
    pub fn reservations(&self) -> std::option::Option<&[crate::model::Reservation]> {
        self.reservations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput).
pub mod describe_instances_output {

    /// A builder for [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reservations: std::option::Option<std::vec::Vec<crate::model::Reservation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `reservations`.
        ///
        /// To override the contents of this collection use [`set_reservations`](Self::set_reservations).
        ///
        /// <p>Information about the reservations.</p>
        pub fn reservations(mut self, input: crate::model::Reservation) -> Self {
            let mut v = self.reservations.unwrap_or_default();
            v.push(input);
            self.reservations = Some(v);
            self
        }
        /// <p>Information about the reservations.</p>
        pub fn set_reservations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Reservation>>,
        ) -> Self {
            self.reservations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput).
        pub fn build(self) -> crate::output::DescribeInstancesOutput {
            crate::output::DescribeInstancesOutput {
                reservations: self.reservations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput).
    pub fn builder() -> crate::output::describe_instances_output::Builder {
        crate::output::describe_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceEventWindowsOutput {
    /// <p>Information about the event windows.</p>
    #[doc(hidden)]
    pub instance_event_windows:
        std::option::Option<std::vec::Vec<crate::model::InstanceEventWindow>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstanceEventWindowsOutput {
    /// <p>Information about the event windows.</p>
    pub fn instance_event_windows(
        &self,
    ) -> std::option::Option<&[crate::model::InstanceEventWindow]> {
        self.instance_event_windows.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceEventWindowsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceEventWindowsOutput`](crate::output::DescribeInstanceEventWindowsOutput).
pub mod describe_instance_event_windows_output {

    /// A builder for [`DescribeInstanceEventWindowsOutput`](crate::output::DescribeInstanceEventWindowsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_event_windows:
            std::option::Option<std::vec::Vec<crate::model::InstanceEventWindow>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_event_windows`.
        ///
        /// To override the contents of this collection use [`set_instance_event_windows`](Self::set_instance_event_windows).
        ///
        /// <p>Information about the event windows.</p>
        pub fn instance_event_windows(mut self, input: crate::model::InstanceEventWindow) -> Self {
            let mut v = self.instance_event_windows.unwrap_or_default();
            v.push(input);
            self.instance_event_windows = Some(v);
            self
        }
        /// <p>Information about the event windows.</p>
        pub fn set_instance_event_windows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceEventWindow>>,
        ) -> Self {
            self.instance_event_windows = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceEventWindowsOutput`](crate::output::DescribeInstanceEventWindowsOutput).
        pub fn build(self) -> crate::output::DescribeInstanceEventWindowsOutput {
            crate::output::DescribeInstanceEventWindowsOutput {
                instance_event_windows: self.instance_event_windows,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceEventWindowsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceEventWindowsOutput`](crate::output::DescribeInstanceEventWindowsOutput).
    pub fn builder() -> crate::output::describe_instance_event_windows_output::Builder {
        crate::output::describe_instance_event_windows_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceEventNotificationAttributesOutput {
    /// <p>Information about the registered tag keys.</p>
    #[doc(hidden)]
    pub instance_tag_attribute: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
    _request_id: Option<String>,
}
impl DescribeInstanceEventNotificationAttributesOutput {
    /// <p>Information about the registered tag keys.</p>
    pub fn instance_tag_attribute(
        &self,
    ) -> std::option::Option<&crate::model::InstanceTagNotificationAttribute> {
        self.instance_tag_attribute.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceEventNotificationAttributesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput).
pub mod describe_instance_event_notification_attributes_output {

    /// A builder for [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_tag_attribute:
            std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the registered tag keys.</p>
        pub fn instance_tag_attribute(
            mut self,
            input: crate::model::InstanceTagNotificationAttribute,
        ) -> Self {
            self.instance_tag_attribute = Some(input);
            self
        }
        /// <p>Information about the registered tag keys.</p>
        pub fn set_instance_tag_attribute(
            mut self,
            input: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        ) -> Self {
            self.instance_tag_attribute = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput).
        pub fn build(self) -> crate::output::DescribeInstanceEventNotificationAttributesOutput {
            crate::output::DescribeInstanceEventNotificationAttributesOutput {
                instance_tag_attribute: self.instance_tag_attribute,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceEventNotificationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput).
    pub fn builder(
    ) -> crate::output::describe_instance_event_notification_attributes_output::Builder {
        crate::output::describe_instance_event_notification_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceCreditSpecificationsOutput {
    /// <p>Information about the credit option for CPU usage of an instance.</p>
    #[doc(hidden)]
    pub instance_credit_specifications:
        std::option::Option<std::vec::Vec<crate::model::InstanceCreditSpecification>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstanceCreditSpecificationsOutput {
    /// <p>Information about the credit option for CPU usage of an instance.</p>
    pub fn instance_credit_specifications(
        &self,
    ) -> std::option::Option<&[crate::model::InstanceCreditSpecification]> {
        self.instance_credit_specifications.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceCreditSpecificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput).
pub mod describe_instance_credit_specifications_output {

    /// A builder for [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_credit_specifications:
            std::option::Option<std::vec::Vec<crate::model::InstanceCreditSpecification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_credit_specifications`.
        ///
        /// To override the contents of this collection use [`set_instance_credit_specifications`](Self::set_instance_credit_specifications).
        ///
        /// <p>Information about the credit option for CPU usage of an instance.</p>
        pub fn instance_credit_specifications(
            mut self,
            input: crate::model::InstanceCreditSpecification,
        ) -> Self {
            let mut v = self.instance_credit_specifications.unwrap_or_default();
            v.push(input);
            self.instance_credit_specifications = Some(v);
            self
        }
        /// <p>Information about the credit option for CPU usage of an instance.</p>
        pub fn set_instance_credit_specifications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceCreditSpecification>>,
        ) -> Self {
            self.instance_credit_specifications = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput).
        pub fn build(self) -> crate::output::DescribeInstanceCreditSpecificationsOutput {
            crate::output::DescribeInstanceCreditSpecificationsOutput {
                instance_credit_specifications: self.instance_credit_specifications,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceCreditSpecificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput).
    pub fn builder() -> crate::output::describe_instance_credit_specifications_output::Builder {
        crate::output::describe_instance_credit_specifications_output::Builder::default()
    }
}

/// <p>Describes an instance attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceAttributeOutput {
    /// <p>The security groups associated with the instance.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
    /// <p>The block device mapping of the instance.</p>
    #[doc(hidden)]
    pub block_device_mappings:
        std::option::Option<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>>,
    /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
    #[doc(hidden)]
    pub disable_api_termination: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
    #[doc(hidden)]
    pub ena_support: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
    #[doc(hidden)]
    pub enclave_options: std::option::Option<crate::model::EnclaveOptions>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
    #[doc(hidden)]
    pub ebs_optimized: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
    #[doc(hidden)]
    pub instance_initiated_shutdown_behavior: std::option::Option<crate::model::AttributeValue>,
    /// <p>The instance type.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::model::AttributeValue>,
    /// <p>The kernel ID.</p>
    #[doc(hidden)]
    pub kernel_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>A list of product codes.</p>
    #[doc(hidden)]
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>The RAM disk ID.</p>
    #[doc(hidden)]
    pub ramdisk_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    #[doc(hidden)]
    pub root_device_name: std::option::Option<crate::model::AttributeValue>,
    /// <p>Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is <code>true</code>, source/destination checks are enabled; otherwise, they are disabled. The default value is <code>true</code>. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.</p>
    #[doc(hidden)]
    pub source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    #[doc(hidden)]
    pub sriov_net_support: std::option::Option<crate::model::AttributeValue>,
    /// <p>The user data.</p>
    #[doc(hidden)]
    pub user_data: std::option::Option<crate::model::AttributeValue>,
    /// <p>To enable the instance for Amazon Web Services Stop Protection, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
    #[doc(hidden)]
    pub disable_api_stop: std::option::Option<crate::model::AttributeBooleanValue>,
    _request_id: Option<String>,
}
impl DescribeInstanceAttributeOutput {
    /// <p>The security groups associated with the instance.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::model::GroupIdentifier]> {
        self.groups.as_deref()
    }
    /// <p>The block device mapping of the instance.</p>
    pub fn block_device_mappings(
        &self,
    ) -> std::option::Option<&[crate::model::InstanceBlockDeviceMapping]> {
        self.block_device_mappings.as_deref()
    }
    /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
    pub fn disable_api_termination(
        &self,
    ) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.disable_api_termination.as_ref()
    }
    /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
    pub fn ena_support(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.ena_support.as_ref()
    }
    /// <p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
    pub fn enclave_options(&self) -> std::option::Option<&crate::model::EnclaveOptions> {
        self.enclave_options.as_ref()
    }
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
    pub fn ebs_optimized(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.ebs_optimized.as_ref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
    pub fn instance_initiated_shutdown_behavior(
        &self,
    ) -> std::option::Option<&crate::model::AttributeValue> {
        self.instance_initiated_shutdown_behavior.as_ref()
    }
    /// <p>The instance type.</p>
    pub fn instance_type(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.instance_type.as_ref()
    }
    /// <p>The kernel ID.</p>
    pub fn kernel_id(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.kernel_id.as_ref()
    }
    /// <p>A list of product codes.</p>
    pub fn product_codes(&self) -> std::option::Option<&[crate::model::ProductCode]> {
        self.product_codes.as_deref()
    }
    /// <p>The RAM disk ID.</p>
    pub fn ramdisk_id(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.ramdisk_id.as_ref()
    }
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    pub fn root_device_name(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.root_device_name.as_ref()
    }
    /// <p>Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is <code>true</code>, source/destination checks are enabled; otherwise, they are disabled. The default value is <code>true</code>. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.</p>
    pub fn source_dest_check(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.source_dest_check.as_ref()
    }
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub fn sriov_net_support(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.sriov_net_support.as_ref()
    }
    /// <p>The user data.</p>
    pub fn user_data(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.user_data.as_ref()
    }
    /// <p>To enable the instance for Amazon Web Services Stop Protection, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
    pub fn disable_api_stop(&self) -> std::option::Option<&crate::model::AttributeBooleanValue> {
        self.disable_api_stop.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput).
pub mod describe_instance_attribute_output {

    /// A builder for [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        pub(crate) block_device_mappings:
            std::option::Option<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>>,
        pub(crate) disable_api_termination:
            std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) ena_support: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) enclave_options: std::option::Option<crate::model::EnclaveOptions>,
        pub(crate) ebs_optimized: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) instance_initiated_shutdown_behavior:
            std::option::Option<crate::model::AttributeValue>,
        pub(crate) instance_type: std::option::Option<crate::model::AttributeValue>,
        pub(crate) kernel_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) ramdisk_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) root_device_name: std::option::Option<crate::model::AttributeValue>,
        pub(crate) source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) sriov_net_support: std::option::Option<crate::model::AttributeValue>,
        pub(crate) user_data: std::option::Option<crate::model::AttributeValue>,
        pub(crate) disable_api_stop: std::option::Option<crate::model::AttributeBooleanValue>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `groups`.
        ///
        /// To override the contents of this collection use [`set_groups`](Self::set_groups).
        ///
        /// <p>The security groups associated with the instance.</p>
        pub fn groups(mut self, input: crate::model::GroupIdentifier) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(input);
            self.groups = Some(v);
            self
        }
        /// <p>The security groups associated with the instance.</p>
        pub fn set_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        ) -> Self {
            self.groups = input;
            self
        }
        /// Appends an item to `block_device_mappings`.
        ///
        /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
        ///
        /// <p>The block device mapping of the instance.</p>
        pub fn block_device_mappings(
            mut self,
            input: crate::model::InstanceBlockDeviceMapping,
        ) -> Self {
            let mut v = self.block_device_mappings.unwrap_or_default();
            v.push(input);
            self.block_device_mappings = Some(v);
            self
        }
        /// <p>The block device mapping of the instance.</p>
        pub fn set_block_device_mappings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>>,
        ) -> Self {
            self.block_device_mappings = input;
            self
        }
        /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
        pub fn disable_api_termination(
            mut self,
            input: crate::model::AttributeBooleanValue,
        ) -> Self {
            self.disable_api_termination = Some(input);
            self
        }
        /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
        pub fn set_disable_api_termination(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.disable_api_termination = input;
            self
        }
        /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
        pub fn ena_support(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.ena_support = Some(input);
            self
        }
        /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
        pub fn set_ena_support(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.ena_support = input;
            self
        }
        /// <p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
        pub fn enclave_options(mut self, input: crate::model::EnclaveOptions) -> Self {
            self.enclave_options = Some(input);
            self
        }
        /// <p>To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
        pub fn set_enclave_options(
            mut self,
            input: std::option::Option<crate::model::EnclaveOptions>,
        ) -> Self {
            self.enclave_options = input;
            self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
        pub fn ebs_optimized(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.ebs_optimized = Some(input);
            self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
        pub fn set_ebs_optimized(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.ebs_optimized = input;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
        pub fn instance_initiated_shutdown_behavior(
            mut self,
            input: crate::model::AttributeValue,
        ) -> Self {
            self.instance_initiated_shutdown_behavior = Some(input);
            self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
        pub fn set_instance_initiated_shutdown_behavior(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.instance_initiated_shutdown_behavior = input;
            self
        }
        /// <p>The instance type.</p>
        pub fn instance_type(mut self, input: crate::model::AttributeValue) -> Self {
            self.instance_type = Some(input);
            self
        }
        /// <p>The instance type.</p>
        pub fn set_instance_type(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.instance_type = input;
            self
        }
        /// <p>The kernel ID.</p>
        pub fn kernel_id(mut self, input: crate::model::AttributeValue) -> Self {
            self.kernel_id = Some(input);
            self
        }
        /// <p>The kernel ID.</p>
        pub fn set_kernel_id(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.kernel_id = input;
            self
        }
        /// Appends an item to `product_codes`.
        ///
        /// To override the contents of this collection use [`set_product_codes`](Self::set_product_codes).
        ///
        /// <p>A list of product codes.</p>
        pub fn product_codes(mut self, input: crate::model::ProductCode) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(input);
            self.product_codes = Some(v);
            self
        }
        /// <p>A list of product codes.</p>
        pub fn set_product_codes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = input;
            self
        }
        /// <p>The RAM disk ID.</p>
        pub fn ramdisk_id(mut self, input: crate::model::AttributeValue) -> Self {
            self.ramdisk_id = Some(input);
            self
        }
        /// <p>The RAM disk ID.</p>
        pub fn set_ramdisk_id(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.ramdisk_id = input;
            self
        }
        /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
        pub fn root_device_name(mut self, input: crate::model::AttributeValue) -> Self {
            self.root_device_name = Some(input);
            self
        }
        /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
        pub fn set_root_device_name(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.root_device_name = input;
            self
        }
        /// <p>Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is <code>true</code>, source/destination checks are enabled; otherwise, they are disabled. The default value is <code>true</code>. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.</p>
        pub fn source_dest_check(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.source_dest_check = Some(input);
            self
        }
        /// <p>Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is <code>true</code>, source/destination checks are enabled; otherwise, they are disabled. The default value is <code>true</code>. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.</p>
        pub fn set_source_dest_check(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.source_dest_check = input;
            self
        }
        /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
        pub fn sriov_net_support(mut self, input: crate::model::AttributeValue) -> Self {
            self.sriov_net_support = Some(input);
            self
        }
        /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
        pub fn set_sriov_net_support(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.sriov_net_support = input;
            self
        }
        /// <p>The user data.</p>
        pub fn user_data(mut self, input: crate::model::AttributeValue) -> Self {
            self.user_data = Some(input);
            self
        }
        /// <p>The user data.</p>
        pub fn set_user_data(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.user_data = input;
            self
        }
        /// <p>To enable the instance for Amazon Web Services Stop Protection, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
        pub fn disable_api_stop(mut self, input: crate::model::AttributeBooleanValue) -> Self {
            self.disable_api_stop = Some(input);
            self
        }
        /// <p>To enable the instance for Amazon Web Services Stop Protection, set this parameter to <code>true</code>; otherwise, set it to <code>false</code>.</p>
        pub fn set_disable_api_stop(
            mut self,
            input: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.disable_api_stop = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput).
        pub fn build(self) -> crate::output::DescribeInstanceAttributeOutput {
            crate::output::DescribeInstanceAttributeOutput {
                groups: self.groups,
                block_device_mappings: self.block_device_mappings,
                disable_api_termination: self.disable_api_termination,
                ena_support: self.ena_support,
                enclave_options: self.enclave_options,
                ebs_optimized: self.ebs_optimized,
                instance_id: self.instance_id,
                instance_initiated_shutdown_behavior: self.instance_initiated_shutdown_behavior,
                instance_type: self.instance_type,
                kernel_id: self.kernel_id,
                product_codes: self.product_codes,
                ramdisk_id: self.ramdisk_id,
                root_device_name: self.root_device_name,
                source_dest_check: self.source_dest_check,
                sriov_net_support: self.sriov_net_support,
                user_data: self.user_data,
                disable_api_stop: self.disable_api_stop,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput).
    pub fn builder() -> crate::output::describe_instance_attribute_output::Builder {
        crate::output::describe_instance_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImportSnapshotTasksOutput {
    /// <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
    #[doc(hidden)]
    pub import_snapshot_tasks: std::option::Option<std::vec::Vec<crate::model::ImportSnapshotTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeImportSnapshotTasksOutput {
    /// <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
    pub fn import_snapshot_tasks(
        &self,
    ) -> std::option::Option<&[crate::model::ImportSnapshotTask]> {
        self.import_snapshot_tasks.as_deref()
    }
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeImportSnapshotTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput).
pub mod describe_import_snapshot_tasks_output {

    /// A builder for [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_snapshot_tasks:
            std::option::Option<std::vec::Vec<crate::model::ImportSnapshotTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `import_snapshot_tasks`.
        ///
        /// To override the contents of this collection use [`set_import_snapshot_tasks`](Self::set_import_snapshot_tasks).
        ///
        /// <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
        pub fn import_snapshot_tasks(mut self, input: crate::model::ImportSnapshotTask) -> Self {
            let mut v = self.import_snapshot_tasks.unwrap_or_default();
            v.push(input);
            self.import_snapshot_tasks = Some(v);
            self
        }
        /// <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
        pub fn set_import_snapshot_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImportSnapshotTask>>,
        ) -> Self {
            self.import_snapshot_tasks = input;
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput).
        pub fn build(self) -> crate::output::DescribeImportSnapshotTasksOutput {
            crate::output::DescribeImportSnapshotTasksOutput {
                import_snapshot_tasks: self.import_snapshot_tasks,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeImportSnapshotTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput).
    pub fn builder() -> crate::output::describe_import_snapshot_tasks_output::Builder {
        crate::output::describe_import_snapshot_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImportImageTasksOutput {
    /// <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
    #[doc(hidden)]
    pub import_image_tasks: std::option::Option<std::vec::Vec<crate::model::ImportImageTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeImportImageTasksOutput {
    /// <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
    pub fn import_image_tasks(&self) -> std::option::Option<&[crate::model::ImportImageTask]> {
        self.import_image_tasks.as_deref()
    }
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeImportImageTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput).
pub mod describe_import_image_tasks_output {

    /// A builder for [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_image_tasks:
            std::option::Option<std::vec::Vec<crate::model::ImportImageTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `import_image_tasks`.
        ///
        /// To override the contents of this collection use [`set_import_image_tasks`](Self::set_import_image_tasks).
        ///
        /// <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
        pub fn import_image_tasks(mut self, input: crate::model::ImportImageTask) -> Self {
            let mut v = self.import_image_tasks.unwrap_or_default();
            v.push(input);
            self.import_image_tasks = Some(v);
            self
        }
        /// <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
        pub fn set_import_image_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ImportImageTask>>,
        ) -> Self {
            self.import_image_tasks = input;
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput).
        pub fn build(self) -> crate::output::DescribeImportImageTasksOutput {
            crate::output::DescribeImportImageTasksOutput {
                import_image_tasks: self.import_image_tasks,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeImportImageTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput).
    pub fn builder() -> crate::output::describe_import_image_tasks_output::Builder {
        crate::output::describe_import_image_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImagesOutput {
    /// <p>Information about the images.</p>
    #[doc(hidden)]
    pub images: std::option::Option<std::vec::Vec<crate::model::Image>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeImagesOutput {
    /// <p>Information about the images.</p>
    pub fn images(&self) -> std::option::Option<&[crate::model::Image]> {
        self.images.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeImagesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeImagesOutput`](crate::output::DescribeImagesOutput).
pub mod describe_images_output {

    /// A builder for [`DescribeImagesOutput`](crate::output::DescribeImagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) images: std::option::Option<std::vec::Vec<crate::model::Image>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `images`.
        ///
        /// To override the contents of this collection use [`set_images`](Self::set_images).
        ///
        /// <p>Information about the images.</p>
        pub fn images(mut self, input: crate::model::Image) -> Self {
            let mut v = self.images.unwrap_or_default();
            v.push(input);
            self.images = Some(v);
            self
        }
        /// <p>Information about the images.</p>
        pub fn set_images(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Image>>,
        ) -> Self {
            self.images = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImagesOutput`](crate::output::DescribeImagesOutput).
        pub fn build(self) -> crate::output::DescribeImagesOutput {
            crate::output::DescribeImagesOutput {
                images: self.images,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeImagesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImagesOutput`](crate::output::DescribeImagesOutput).
    pub fn builder() -> crate::output::describe_images_output::Builder {
        crate::output::describe_images_output::Builder::default()
    }
}

/// <p>Describes an image attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImageAttributeOutput {
    /// <p>The block device mapping entries.</p>
    #[doc(hidden)]
    pub block_device_mappings: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
    /// <p>The ID of the AMI.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The launch permissions.</p>
    #[doc(hidden)]
    pub launch_permissions: std::option::Option<std::vec::Vec<crate::model::LaunchPermission>>,
    /// <p>The product codes.</p>
    #[doc(hidden)]
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>A description for the AMI.</p>
    #[doc(hidden)]
    pub description: std::option::Option<crate::model::AttributeValue>,
    /// <p>The kernel ID.</p>
    #[doc(hidden)]
    pub kernel_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>The RAM disk ID.</p>
    #[doc(hidden)]
    pub ramdisk_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    #[doc(hidden)]
    pub sriov_net_support: std::option::Option<crate::model::AttributeValue>,
    /// <p>The boot mode.</p>
    #[doc(hidden)]
    pub boot_mode: std::option::Option<crate::model::AttributeValue>,
    /// <p>If the image is configured for NitroTPM support, the value is <code>v2.0</code>.</p>
    #[doc(hidden)]
    pub tpm_support: std::option::Option<crate::model::AttributeValue>,
    /// <p>Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a> command. You can inspect and modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #[doc(hidden)]
    pub uefi_data: std::option::Option<crate::model::AttributeValue>,
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.</p> <note>
    /// <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p>
    /// </note>
    #[doc(hidden)]
    pub last_launched_time: std::option::Option<crate::model::AttributeValue>,
    /// <p>If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
    #[doc(hidden)]
    pub imds_support: std::option::Option<crate::model::AttributeValue>,
    _request_id: Option<String>,
}
impl DescribeImageAttributeOutput {
    /// <p>The block device mapping entries.</p>
    pub fn block_device_mappings(
        &self,
    ) -> std::option::Option<&[crate::model::BlockDeviceMapping]> {
        self.block_device_mappings.as_deref()
    }
    /// <p>The ID of the AMI.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The launch permissions.</p>
    pub fn launch_permissions(&self) -> std::option::Option<&[crate::model::LaunchPermission]> {
        self.launch_permissions.as_deref()
    }
    /// <p>The product codes.</p>
    pub fn product_codes(&self) -> std::option::Option<&[crate::model::ProductCode]> {
        self.product_codes.as_deref()
    }
    /// <p>A description for the AMI.</p>
    pub fn description(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.description.as_ref()
    }
    /// <p>The kernel ID.</p>
    pub fn kernel_id(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.kernel_id.as_ref()
    }
    /// <p>The RAM disk ID.</p>
    pub fn ramdisk_id(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.ramdisk_id.as_ref()
    }
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub fn sriov_net_support(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.sriov_net_support.as_ref()
    }
    /// <p>The boot mode.</p>
    pub fn boot_mode(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.boot_mode.as_ref()
    }
    /// <p>If the image is configured for NitroTPM support, the value is <code>v2.0</code>.</p>
    pub fn tpm_support(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.tpm_support.as_ref()
    }
    /// <p>Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a> command. You can inspect and modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn uefi_data(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.uefi_data.as_ref()
    }
    /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.</p> <note>
    /// <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p>
    /// </note>
    pub fn last_launched_time(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.last_launched_time.as_ref()
    }
    /// <p>If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn imds_support(&self) -> std::option::Option<&crate::model::AttributeValue> {
        self.imds_support.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeImageAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput).
pub mod describe_image_attribute_output {

    /// A builder for [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) block_device_mappings:
            std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) launch_permissions:
            std::option::Option<std::vec::Vec<crate::model::LaunchPermission>>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) description: std::option::Option<crate::model::AttributeValue>,
        pub(crate) kernel_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) ramdisk_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) sriov_net_support: std::option::Option<crate::model::AttributeValue>,
        pub(crate) boot_mode: std::option::Option<crate::model::AttributeValue>,
        pub(crate) tpm_support: std::option::Option<crate::model::AttributeValue>,
        pub(crate) uefi_data: std::option::Option<crate::model::AttributeValue>,
        pub(crate) last_launched_time: std::option::Option<crate::model::AttributeValue>,
        pub(crate) imds_support: std::option::Option<crate::model::AttributeValue>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `block_device_mappings`.
        ///
        /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
        ///
        /// <p>The block device mapping entries.</p>
        pub fn block_device_mappings(mut self, input: crate::model::BlockDeviceMapping) -> Self {
            let mut v = self.block_device_mappings.unwrap_or_default();
            v.push(input);
            self.block_device_mappings = Some(v);
            self
        }
        /// <p>The block device mapping entries.</p>
        pub fn set_block_device_mappings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
        ) -> Self {
            self.block_device_mappings = input;
            self
        }
        /// <p>The ID of the AMI.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the AMI.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        /// Appends an item to `launch_permissions`.
        ///
        /// To override the contents of this collection use [`set_launch_permissions`](Self::set_launch_permissions).
        ///
        /// <p>The launch permissions.</p>
        pub fn launch_permissions(mut self, input: crate::model::LaunchPermission) -> Self {
            let mut v = self.launch_permissions.unwrap_or_default();
            v.push(input);
            self.launch_permissions = Some(v);
            self
        }
        /// <p>The launch permissions.</p>
        pub fn set_launch_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LaunchPermission>>,
        ) -> Self {
            self.launch_permissions = input;
            self
        }
        /// Appends an item to `product_codes`.
        ///
        /// To override the contents of this collection use [`set_product_codes`](Self::set_product_codes).
        ///
        /// <p>The product codes.</p>
        pub fn product_codes(mut self, input: crate::model::ProductCode) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(input);
            self.product_codes = Some(v);
            self
        }
        /// <p>The product codes.</p>
        pub fn set_product_codes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = input;
            self
        }
        /// <p>A description for the AMI.</p>
        pub fn description(mut self, input: crate::model::AttributeValue) -> Self {
            self.description = Some(input);
            self
        }
        /// <p>A description for the AMI.</p>
        pub fn set_description(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.description = input;
            self
        }
        /// <p>The kernel ID.</p>
        pub fn kernel_id(mut self, input: crate::model::AttributeValue) -> Self {
            self.kernel_id = Some(input);
            self
        }
        /// <p>The kernel ID.</p>
        pub fn set_kernel_id(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.kernel_id = input;
            self
        }
        /// <p>The RAM disk ID.</p>
        pub fn ramdisk_id(mut self, input: crate::model::AttributeValue) -> Self {
            self.ramdisk_id = Some(input);
            self
        }
        /// <p>The RAM disk ID.</p>
        pub fn set_ramdisk_id(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.ramdisk_id = input;
            self
        }
        /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
        pub fn sriov_net_support(mut self, input: crate::model::AttributeValue) -> Self {
            self.sriov_net_support = Some(input);
            self
        }
        /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
        pub fn set_sriov_net_support(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.sriov_net_support = input;
            self
        }
        /// <p>The boot mode.</p>
        pub fn boot_mode(mut self, input: crate::model::AttributeValue) -> Self {
            self.boot_mode = Some(input);
            self
        }
        /// <p>The boot mode.</p>
        pub fn set_boot_mode(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.boot_mode = input;
            self
        }
        /// <p>If the image is configured for NitroTPM support, the value is <code>v2.0</code>.</p>
        pub fn tpm_support(mut self, input: crate::model::AttributeValue) -> Self {
            self.tpm_support = Some(input);
            self
        }
        /// <p>If the image is configured for NitroTPM support, the value is <code>v2.0</code>.</p>
        pub fn set_tpm_support(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.tpm_support = input;
            self
        }
        /// <p>Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a> command. You can inspect and modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn uefi_data(mut self, input: crate::model::AttributeValue) -> Self {
            self.uefi_data = Some(input);
            self
        }
        /// <p>Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceUefiData">GetInstanceUefiData</a> command. You can inspect and modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_uefi_data(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.uefi_data = input;
            self
        }
        /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.</p> <note>
        /// <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p>
        /// </note>
        pub fn last_launched_time(mut self, input: crate::model::AttributeValue) -> Self {
            self.last_launched_time = Some(input);
            self
        }
        /// <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.</p> <note>
        /// <p> <code>lastLaunchedTime</code> data is available starting April 2017.</p>
        /// </note>
        pub fn set_last_launched_time(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.last_launched_time = input;
            self
        }
        /// <p>If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn imds_support(mut self, input: crate::model::AttributeValue) -> Self {
            self.imds_support = Some(input);
            self
        }
        /// <p>If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
        pub fn set_imds_support(
            mut self,
            input: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.imds_support = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput).
        pub fn build(self) -> crate::output::DescribeImageAttributeOutput {
            crate::output::DescribeImageAttributeOutput {
                block_device_mappings: self.block_device_mappings,
                image_id: self.image_id,
                launch_permissions: self.launch_permissions,
                product_codes: self.product_codes,
                description: self.description,
                kernel_id: self.kernel_id,
                ramdisk_id: self.ramdisk_id,
                sriov_net_support: self.sriov_net_support,
                boot_mode: self.boot_mode,
                tpm_support: self.tpm_support,
                uefi_data: self.uefi_data,
                last_launched_time: self.last_launched_time,
                imds_support: self.imds_support,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput).
    pub fn builder() -> crate::output::describe_image_attribute_output::Builder {
        crate::output::describe_image_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIdFormatOutput {
    /// <p>Information about the ID format for the resource.</p>
    #[doc(hidden)]
    pub statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
    _request_id: Option<String>,
}
impl DescribeIdFormatOutput {
    /// <p>Information about the ID format for the resource.</p>
    pub fn statuses(&self) -> std::option::Option<&[crate::model::IdFormat]> {
        self.statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIdFormatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput).
pub mod describe_id_format_output {

    /// A builder for [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `statuses`.
        ///
        /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
        ///
        /// <p>Information about the ID format for the resource.</p>
        pub fn statuses(mut self, input: crate::model::IdFormat) -> Self {
            let mut v = self.statuses.unwrap_or_default();
            v.push(input);
            self.statuses = Some(v);
            self
        }
        /// <p>Information about the ID format for the resource.</p>
        pub fn set_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        ) -> Self {
            self.statuses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput).
        pub fn build(self) -> crate::output::DescribeIdFormatOutput {
            crate::output::DescribeIdFormatOutput {
                statuses: self.statuses,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput).
    pub fn builder() -> crate::output::describe_id_format_output::Builder {
        crate::output::describe_id_format_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIdentityIdFormatOutput {
    /// <p>Information about the ID format for the resources.</p>
    #[doc(hidden)]
    pub statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
    _request_id: Option<String>,
}
impl DescribeIdentityIdFormatOutput {
    /// <p>Information about the ID format for the resources.</p>
    pub fn statuses(&self) -> std::option::Option<&[crate::model::IdFormat]> {
        self.statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIdentityIdFormatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput).
pub mod describe_identity_id_format_output {

    /// A builder for [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `statuses`.
        ///
        /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
        ///
        /// <p>Information about the ID format for the resources.</p>
        pub fn statuses(mut self, input: crate::model::IdFormat) -> Self {
            let mut v = self.statuses.unwrap_or_default();
            v.push(input);
            self.statuses = Some(v);
            self
        }
        /// <p>Information about the ID format for the resources.</p>
        pub fn set_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        ) -> Self {
            self.statuses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput).
        pub fn build(self) -> crate::output::DescribeIdentityIdFormatOutput {
            crate::output::DescribeIdentityIdFormatOutput {
                statuses: self.statuses,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIdentityIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput).
    pub fn builder() -> crate::output::describe_identity_id_format_output::Builder {
        crate::output::describe_identity_id_format_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeIamInstanceProfileAssociationsOutput {
    /// <p>Information about the IAM instance profile associations.</p>
    #[doc(hidden)]
    pub iam_instance_profile_associations:
        std::option::Option<std::vec::Vec<crate::model::IamInstanceProfileAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeIamInstanceProfileAssociationsOutput {
    /// <p>Information about the IAM instance profile associations.</p>
    pub fn iam_instance_profile_associations(
        &self,
    ) -> std::option::Option<&[crate::model::IamInstanceProfileAssociation]> {
        self.iam_instance_profile_associations.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeIamInstanceProfileAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput).
pub mod describe_iam_instance_profile_associations_output {

    /// A builder for [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_associations:
            std::option::Option<std::vec::Vec<crate::model::IamInstanceProfileAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `iam_instance_profile_associations`.
        ///
        /// To override the contents of this collection use [`set_iam_instance_profile_associations`](Self::set_iam_instance_profile_associations).
        ///
        /// <p>Information about the IAM instance profile associations.</p>
        pub fn iam_instance_profile_associations(
            mut self,
            input: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            let mut v = self.iam_instance_profile_associations.unwrap_or_default();
            v.push(input);
            self.iam_instance_profile_associations = Some(v);
            self
        }
        /// <p>Information about the IAM instance profile associations.</p>
        pub fn set_iam_instance_profile_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IamInstanceProfileAssociation>>,
        ) -> Self {
            self.iam_instance_profile_associations = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput).
        pub fn build(self) -> crate::output::DescribeIamInstanceProfileAssociationsOutput {
            crate::output::DescribeIamInstanceProfileAssociationsOutput {
                iam_instance_profile_associations: self.iam_instance_profile_associations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeIamInstanceProfileAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput).
    pub fn builder() -> crate::output::describe_iam_instance_profile_associations_output::Builder {
        crate::output::describe_iam_instance_profile_associations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeHostsOutput {
    /// <p>Information about the Dedicated Hosts.</p>
    #[doc(hidden)]
    pub hosts: std::option::Option<std::vec::Vec<crate::model::Host>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeHostsOutput {
    /// <p>Information about the Dedicated Hosts.</p>
    pub fn hosts(&self) -> std::option::Option<&[crate::model::Host]> {
        self.hosts.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeHostsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeHostsOutput`](crate::output::DescribeHostsOutput).
pub mod describe_hosts_output {

    /// A builder for [`DescribeHostsOutput`](crate::output::DescribeHostsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hosts: std::option::Option<std::vec::Vec<crate::model::Host>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `hosts`.
        ///
        /// To override the contents of this collection use [`set_hosts`](Self::set_hosts).
        ///
        /// <p>Information about the Dedicated Hosts.</p>
        pub fn hosts(mut self, input: crate::model::Host) -> Self {
            let mut v = self.hosts.unwrap_or_default();
            v.push(input);
            self.hosts = Some(v);
            self
        }
        /// <p>Information about the Dedicated Hosts.</p>
        pub fn set_hosts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Host>>,
        ) -> Self {
            self.hosts = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostsOutput`](crate::output::DescribeHostsOutput).
        pub fn build(self) -> crate::output::DescribeHostsOutput {
            crate::output::DescribeHostsOutput {
                hosts: self.hosts,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeHostsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostsOutput`](crate::output::DescribeHostsOutput).
    pub fn builder() -> crate::output::describe_hosts_output::Builder {
        crate::output::describe_hosts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeHostReservationsOutput {
    /// <p>Details about the reservation's configuration.</p>
    #[doc(hidden)]
    pub host_reservation_set: std::option::Option<std::vec::Vec<crate::model::HostReservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeHostReservationsOutput {
    /// <p>Details about the reservation's configuration.</p>
    pub fn host_reservation_set(&self) -> std::option::Option<&[crate::model::HostReservation]> {
        self.host_reservation_set.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeHostReservationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput).
pub mod describe_host_reservations_output {

    /// A builder for [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) host_reservation_set:
            std::option::Option<std::vec::Vec<crate::model::HostReservation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `host_reservation_set`.
        ///
        /// To override the contents of this collection use [`set_host_reservation_set`](Self::set_host_reservation_set).
        ///
        /// <p>Details about the reservation's configuration.</p>
        pub fn host_reservation_set(mut self, input: crate::model::HostReservation) -> Self {
            let mut v = self.host_reservation_set.unwrap_or_default();
            v.push(input);
            self.host_reservation_set = Some(v);
            self
        }
        /// <p>Details about the reservation's configuration.</p>
        pub fn set_host_reservation_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HostReservation>>,
        ) -> Self {
            self.host_reservation_set = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput).
        pub fn build(self) -> crate::output::DescribeHostReservationsOutput {
            crate::output::DescribeHostReservationsOutput {
                host_reservation_set: self.host_reservation_set,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeHostReservationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput).
    pub fn builder() -> crate::output::describe_host_reservations_output::Builder {
        crate::output::describe_host_reservations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeHostReservationOfferingsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the offerings.</p>
    #[doc(hidden)]
    pub offering_set: std::option::Option<std::vec::Vec<crate::model::HostOffering>>,
    _request_id: Option<String>,
}
impl DescribeHostReservationOfferingsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the offerings.</p>
    pub fn offering_set(&self) -> std::option::Option<&[crate::model::HostOffering]> {
        self.offering_set.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeHostReservationOfferingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput).
pub mod describe_host_reservation_offerings_output {

    /// A builder for [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) offering_set: std::option::Option<std::vec::Vec<crate::model::HostOffering>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `offering_set`.
        ///
        /// To override the contents of this collection use [`set_offering_set`](Self::set_offering_set).
        ///
        /// <p>Information about the offerings.</p>
        pub fn offering_set(mut self, input: crate::model::HostOffering) -> Self {
            let mut v = self.offering_set.unwrap_or_default();
            v.push(input);
            self.offering_set = Some(v);
            self
        }
        /// <p>Information about the offerings.</p>
        pub fn set_offering_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HostOffering>>,
        ) -> Self {
            self.offering_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput).
        pub fn build(self) -> crate::output::DescribeHostReservationOfferingsOutput {
            crate::output::DescribeHostReservationOfferingsOutput {
                next_token: self.next_token,
                offering_set: self.offering_set,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeHostReservationOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput).
    pub fn builder() -> crate::output::describe_host_reservation_offerings_output::Builder {
        crate::output::describe_host_reservation_offerings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFpgaImagesOutput {
    /// <p>Information about the FPGA images.</p>
    #[doc(hidden)]
    pub fpga_images: std::option::Option<std::vec::Vec<crate::model::FpgaImage>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeFpgaImagesOutput {
    /// <p>Information about the FPGA images.</p>
    pub fn fpga_images(&self) -> std::option::Option<&[crate::model::FpgaImage]> {
        self.fpga_images.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeFpgaImagesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput).
pub mod describe_fpga_images_output {

    /// A builder for [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_images: std::option::Option<std::vec::Vec<crate::model::FpgaImage>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `fpga_images`.
        ///
        /// To override the contents of this collection use [`set_fpga_images`](Self::set_fpga_images).
        ///
        /// <p>Information about the FPGA images.</p>
        pub fn fpga_images(mut self, input: crate::model::FpgaImage) -> Self {
            let mut v = self.fpga_images.unwrap_or_default();
            v.push(input);
            self.fpga_images = Some(v);
            self
        }
        /// <p>Information about the FPGA images.</p>
        pub fn set_fpga_images(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FpgaImage>>,
        ) -> Self {
            self.fpga_images = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput).
        pub fn build(self) -> crate::output::DescribeFpgaImagesOutput {
            crate::output::DescribeFpgaImagesOutput {
                fpga_images: self.fpga_images,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFpgaImagesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput).
    pub fn builder() -> crate::output::describe_fpga_images_output::Builder {
        crate::output::describe_fpga_images_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFpgaImageAttributeOutput {
    /// <p>Information about the attribute.</p>
    #[doc(hidden)]
    pub fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
    _request_id: Option<String>,
}
impl DescribeFpgaImageAttributeOutput {
    /// <p>Information about the attribute.</p>
    pub fn fpga_image_attribute(&self) -> std::option::Option<&crate::model::FpgaImageAttribute> {
        self.fpga_image_attribute.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeFpgaImageAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput).
pub mod describe_fpga_image_attribute_output {

    /// A builder for [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the attribute.</p>
        pub fn fpga_image_attribute(mut self, input: crate::model::FpgaImageAttribute) -> Self {
            self.fpga_image_attribute = Some(input);
            self
        }
        /// <p>Information about the attribute.</p>
        pub fn set_fpga_image_attribute(
            mut self,
            input: std::option::Option<crate::model::FpgaImageAttribute>,
        ) -> Self {
            self.fpga_image_attribute = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput).
        pub fn build(self) -> crate::output::DescribeFpgaImageAttributeOutput {
            crate::output::DescribeFpgaImageAttributeOutput {
                fpga_image_attribute: self.fpga_image_attribute,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFpgaImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput).
    pub fn builder() -> crate::output::describe_fpga_image_attribute_output::Builder {
        crate::output::describe_fpga_image_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFlowLogsOutput {
    /// <p>Information about the flow logs.</p>
    #[doc(hidden)]
    pub flow_logs: std::option::Option<std::vec::Vec<crate::model::FlowLog>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeFlowLogsOutput {
    /// <p>Information about the flow logs.</p>
    pub fn flow_logs(&self) -> std::option::Option<&[crate::model::FlowLog]> {
        self.flow_logs.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeFlowLogsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput).
pub mod describe_flow_logs_output {

    /// A builder for [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) flow_logs: std::option::Option<std::vec::Vec<crate::model::FlowLog>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `flow_logs`.
        ///
        /// To override the contents of this collection use [`set_flow_logs`](Self::set_flow_logs).
        ///
        /// <p>Information about the flow logs.</p>
        pub fn flow_logs(mut self, input: crate::model::FlowLog) -> Self {
            let mut v = self.flow_logs.unwrap_or_default();
            v.push(input);
            self.flow_logs = Some(v);
            self
        }
        /// <p>Information about the flow logs.</p>
        pub fn set_flow_logs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FlowLog>>,
        ) -> Self {
            self.flow_logs = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput).
        pub fn build(self) -> crate::output::DescribeFlowLogsOutput {
            crate::output::DescribeFlowLogsOutput {
                flow_logs: self.flow_logs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFlowLogsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput).
    pub fn builder() -> crate::output::describe_flow_logs_output::Builder {
        crate::output::describe_flow_logs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFleetsOutput {
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the EC2 Fleets.</p>
    #[doc(hidden)]
    pub fleets: std::option::Option<std::vec::Vec<crate::model::FleetData>>,
    _request_id: Option<String>,
}
impl DescribeFleetsOutput {
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the EC2 Fleets.</p>
    pub fn fleets(&self) -> std::option::Option<&[crate::model::FleetData]> {
        self.fleets.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeFleetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput).
pub mod describe_fleets_output {

    /// A builder for [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) fleets: std::option::Option<std::vec::Vec<crate::model::FleetData>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `fleets`.
        ///
        /// To override the contents of this collection use [`set_fleets`](Self::set_fleets).
        ///
        /// <p>Information about the EC2 Fleets.</p>
        pub fn fleets(mut self, input: crate::model::FleetData) -> Self {
            let mut v = self.fleets.unwrap_or_default();
            v.push(input);
            self.fleets = Some(v);
            self
        }
        /// <p>Information about the EC2 Fleets.</p>
        pub fn set_fleets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FleetData>>,
        ) -> Self {
            self.fleets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput).
        pub fn build(self) -> crate::output::DescribeFleetsOutput {
            crate::output::DescribeFleetsOutput {
                next_token: self.next_token,
                fleets: self.fleets,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFleetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput).
    pub fn builder() -> crate::output::describe_fleets_output::Builder {
        crate::output::describe_fleets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFleetInstancesOutput {
    /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
    #[doc(hidden)]
    pub active_instances: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the EC2 Fleet.</p>
    #[doc(hidden)]
    pub fleet_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeFleetInstancesOutput {
    /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
    pub fn active_instances(&self) -> std::option::Option<&[crate::model::ActiveInstance]> {
        self.active_instances.as_deref()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the EC2 Fleet.</p>
    pub fn fleet_id(&self) -> std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeFleetInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput).
pub mod describe_fleet_instances_output {

    /// A builder for [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) active_instances:
            std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) fleet_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `active_instances`.
        ///
        /// To override the contents of this collection use [`set_active_instances`](Self::set_active_instances).
        ///
        /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
        pub fn active_instances(mut self, input: crate::model::ActiveInstance) -> Self {
            let mut v = self.active_instances.unwrap_or_default();
            v.push(input);
            self.active_instances = Some(v);
            self
        }
        /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
        pub fn set_active_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        ) -> Self {
            self.active_instances = input;
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The ID of the EC2 Fleet.</p>
        pub fn fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.fleet_id = Some(input.into());
            self
        }
        /// <p>The ID of the EC2 Fleet.</p>
        pub fn set_fleet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.fleet_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput).
        pub fn build(self) -> crate::output::DescribeFleetInstancesOutput {
            crate::output::DescribeFleetInstancesOutput {
                active_instances: self.active_instances,
                next_token: self.next_token,
                fleet_id: self.fleet_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFleetInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput).
    pub fn builder() -> crate::output::describe_fleet_instances_output::Builder {
        crate::output::describe_fleet_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFleetHistoryOutput {
    /// <p>Information about the events in the history of the EC2 Fleet.</p>
    #[doc(hidden)]
    pub history_records: std::option::Option<std::vec::Vec<crate::model::HistoryRecordEntry>>,
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
    /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    #[doc(hidden)]
    pub last_evaluated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the EC Fleet.</p>
    #[doc(hidden)]
    pub fleet_id: std::option::Option<std::string::String>,
    /// <p>The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeFleetHistoryOutput {
    /// <p>Information about the events in the history of the EC2 Fleet.</p>
    pub fn history_records(&self) -> std::option::Option<&[crate::model::HistoryRecordEntry]> {
        self.history_records.as_deref()
    }
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
    /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    pub fn last_evaluated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_evaluated_time.as_ref()
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the EC Fleet.</p>
    pub fn fleet_id(&self) -> std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeFleetHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput).
pub mod describe_fleet_history_output {

    /// A builder for [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) history_records:
            std::option::Option<std::vec::Vec<crate::model::HistoryRecordEntry>>,
        pub(crate) last_evaluated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) fleet_id: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `history_records`.
        ///
        /// To override the contents of this collection use [`set_history_records`](Self::set_history_records).
        ///
        /// <p>Information about the events in the history of the EC2 Fleet.</p>
        pub fn history_records(mut self, input: crate::model::HistoryRecordEntry) -> Self {
            let mut v = self.history_records.unwrap_or_default();
            v.push(input);
            self.history_records = Some(v);
            self
        }
        /// <p>Information about the events in the history of the EC2 Fleet.</p>
        pub fn set_history_records(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::HistoryRecordEntry>>,
        ) -> Self {
            self.history_records = input;
            self
        }
        /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
        /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
        pub fn last_evaluated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_evaluated_time = Some(input);
            self
        }
        /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p>
        /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
        pub fn set_last_evaluated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_evaluated_time = input;
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The ID of the EC Fleet.</p>
        pub fn fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.fleet_id = Some(input.into());
            self
        }
        /// <p>The ID of the EC Fleet.</p>
        pub fn set_fleet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.fleet_id = input;
            self
        }
        /// <p>The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput).
        pub fn build(self) -> crate::output::DescribeFleetHistoryOutput {
            crate::output::DescribeFleetHistoryOutput {
                history_records: self.history_records,
                last_evaluated_time: self.last_evaluated_time,
                next_token: self.next_token,
                fleet_id: self.fleet_id,
                start_time: self.start_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFleetHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput).
    pub fn builder() -> crate::output::describe_fleet_history_output::Builder {
        crate::output::describe_fleet_history_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFastSnapshotRestoresOutput {
    /// <p>Information about the state of fast snapshot restores.</p>
    #[doc(hidden)]
    pub fast_snapshot_restores:
        std::option::Option<std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeFastSnapshotRestoresOutput {
    /// <p>Information about the state of fast snapshot restores.</p>
    pub fn fast_snapshot_restores(
        &self,
    ) -> std::option::Option<&[crate::model::DescribeFastSnapshotRestoreSuccessItem]> {
        self.fast_snapshot_restores.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeFastSnapshotRestoresOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput).
pub mod describe_fast_snapshot_restores_output {

    /// A builder for [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fast_snapshot_restores: std::option::Option<
            std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `fast_snapshot_restores`.
        ///
        /// To override the contents of this collection use [`set_fast_snapshot_restores`](Self::set_fast_snapshot_restores).
        ///
        /// <p>Information about the state of fast snapshot restores.</p>
        pub fn fast_snapshot_restores(
            mut self,
            input: crate::model::DescribeFastSnapshotRestoreSuccessItem,
        ) -> Self {
            let mut v = self.fast_snapshot_restores.unwrap_or_default();
            v.push(input);
            self.fast_snapshot_restores = Some(v);
            self
        }
        /// <p>Information about the state of fast snapshot restores.</p>
        pub fn set_fast_snapshot_restores(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>,
            >,
        ) -> Self {
            self.fast_snapshot_restores = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput).
        pub fn build(self) -> crate::output::DescribeFastSnapshotRestoresOutput {
            crate::output::DescribeFastSnapshotRestoresOutput {
                fast_snapshot_restores: self.fast_snapshot_restores,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFastSnapshotRestoresOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput).
    pub fn builder() -> crate::output::describe_fast_snapshot_restores_output::Builder {
        crate::output::describe_fast_snapshot_restores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeFastLaunchImagesOutput {
    /// <p>A collection of details about the fast-launch enabled Windows images that meet the requested criteria.</p>
    #[doc(hidden)]
    pub fast_launch_images:
        std::option::Option<std::vec::Vec<crate::model::DescribeFastLaunchImagesSuccessItem>>,
    /// <p>The token to use for the next set of results. This value is null when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeFastLaunchImagesOutput {
    /// <p>A collection of details about the fast-launch enabled Windows images that meet the requested criteria.</p>
    pub fn fast_launch_images(
        &self,
    ) -> std::option::Option<&[crate::model::DescribeFastLaunchImagesSuccessItem]> {
        self.fast_launch_images.as_deref()
    }
    /// <p>The token to use for the next set of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeFastLaunchImagesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeFastLaunchImagesOutput`](crate::output::DescribeFastLaunchImagesOutput).
pub mod describe_fast_launch_images_output {

    /// A builder for [`DescribeFastLaunchImagesOutput`](crate::output::DescribeFastLaunchImagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fast_launch_images:
            std::option::Option<std::vec::Vec<crate::model::DescribeFastLaunchImagesSuccessItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `fast_launch_images`.
        ///
        /// To override the contents of this collection use [`set_fast_launch_images`](Self::set_fast_launch_images).
        ///
        /// <p>A collection of details about the fast-launch enabled Windows images that meet the requested criteria.</p>
        pub fn fast_launch_images(
            mut self,
            input: crate::model::DescribeFastLaunchImagesSuccessItem,
        ) -> Self {
            let mut v = self.fast_launch_images.unwrap_or_default();
            v.push(input);
            self.fast_launch_images = Some(v);
            self
        }
        /// <p>A collection of details about the fast-launch enabled Windows images that meet the requested criteria.</p>
        pub fn set_fast_launch_images(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DescribeFastLaunchImagesSuccessItem>,
            >,
        ) -> Self {
            self.fast_launch_images = input;
            self
        }
        /// <p>The token to use for the next set of results. This value is null when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use for the next set of results. This value is null when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFastLaunchImagesOutput`](crate::output::DescribeFastLaunchImagesOutput).
        pub fn build(self) -> crate::output::DescribeFastLaunchImagesOutput {
            crate::output::DescribeFastLaunchImagesOutput {
                fast_launch_images: self.fast_launch_images,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeFastLaunchImagesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFastLaunchImagesOutput`](crate::output::DescribeFastLaunchImagesOutput).
    pub fn builder() -> crate::output::describe_fast_launch_images_output::Builder {
        crate::output::describe_fast_launch_images_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeExportTasksOutput {
    /// <p>Information about the export tasks.</p>
    #[doc(hidden)]
    pub export_tasks: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
    _request_id: Option<String>,
}
impl DescribeExportTasksOutput {
    /// <p>Information about the export tasks.</p>
    pub fn export_tasks(&self) -> std::option::Option<&[crate::model::ExportTask]> {
        self.export_tasks.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeExportTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput).
pub mod describe_export_tasks_output {

    /// A builder for [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_tasks: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `export_tasks`.
        ///
        /// To override the contents of this collection use [`set_export_tasks`](Self::set_export_tasks).
        ///
        /// <p>Information about the export tasks.</p>
        pub fn export_tasks(mut self, input: crate::model::ExportTask) -> Self {
            let mut v = self.export_tasks.unwrap_or_default();
            v.push(input);
            self.export_tasks = Some(v);
            self
        }
        /// <p>Information about the export tasks.</p>
        pub fn set_export_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
        ) -> Self {
            self.export_tasks = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput).
        pub fn build(self) -> crate::output::DescribeExportTasksOutput {
            crate::output::DescribeExportTasksOutput {
                export_tasks: self.export_tasks,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeExportTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput).
    pub fn builder() -> crate::output::describe_export_tasks_output::Builder {
        crate::output::describe_export_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeExportImageTasksOutput {
    /// <p>Information about the export image tasks.</p>
    #[doc(hidden)]
    pub export_image_tasks: std::option::Option<std::vec::Vec<crate::model::ExportImageTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeExportImageTasksOutput {
    /// <p>Information about the export image tasks.</p>
    pub fn export_image_tasks(&self) -> std::option::Option<&[crate::model::ExportImageTask]> {
        self.export_image_tasks.as_deref()
    }
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeExportImageTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput).
pub mod describe_export_image_tasks_output {

    /// A builder for [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_image_tasks:
            std::option::Option<std::vec::Vec<crate::model::ExportImageTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `export_image_tasks`.
        ///
        /// To override the contents of this collection use [`set_export_image_tasks`](Self::set_export_image_tasks).
        ///
        /// <p>Information about the export image tasks.</p>
        pub fn export_image_tasks(mut self, input: crate::model::ExportImageTask) -> Self {
            let mut v = self.export_image_tasks.unwrap_or_default();
            v.push(input);
            self.export_image_tasks = Some(v);
            self
        }
        /// <p>Information about the export image tasks.</p>
        pub fn set_export_image_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportImageTask>>,
        ) -> Self {
            self.export_image_tasks = input;
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput).
        pub fn build(self) -> crate::output::DescribeExportImageTasksOutput {
            crate::output::DescribeExportImageTasksOutput {
                export_image_tasks: self.export_image_tasks,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeExportImageTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput).
    pub fn builder() -> crate::output::describe_export_image_tasks_output::Builder {
        crate::output::describe_export_image_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeElasticGpusOutput {
    /// <p>Information about the Elastic Graphics accelerators.</p>
    #[doc(hidden)]
    pub elastic_gpu_set: std::option::Option<std::vec::Vec<crate::model::ElasticGpus>>,
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeElasticGpusOutput {
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub fn elastic_gpu_set(&self) -> std::option::Option<&[crate::model::ElasticGpus]> {
        self.elastic_gpu_set.as_deref()
    }
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeElasticGpusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput).
pub mod describe_elastic_gpus_output {

    /// A builder for [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) elastic_gpu_set: std::option::Option<std::vec::Vec<crate::model::ElasticGpus>>,
        pub(crate) max_results: std::option::Option<i32>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `elastic_gpu_set`.
        ///
        /// To override the contents of this collection use [`set_elastic_gpu_set`](Self::set_elastic_gpu_set).
        ///
        /// <p>Information about the Elastic Graphics accelerators.</p>
        pub fn elastic_gpu_set(mut self, input: crate::model::ElasticGpus) -> Self {
            let mut v = self.elastic_gpu_set.unwrap_or_default();
            v.push(input);
            self.elastic_gpu_set = Some(v);
            self
        }
        /// <p>Information about the Elastic Graphics accelerators.</p>
        pub fn set_elastic_gpu_set(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ElasticGpus>>,
        ) -> Self {
            self.elastic_gpu_set = input;
            self
        }
        /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.max_results = Some(input);
            self
        }
        /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.max_results = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput).
        pub fn build(self) -> crate::output::DescribeElasticGpusOutput {
            crate::output::DescribeElasticGpusOutput {
                elastic_gpu_set: self.elastic_gpu_set,
                max_results: self.max_results,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeElasticGpusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput).
    pub fn builder() -> crate::output::describe_elastic_gpus_output::Builder {
        crate::output::describe_elastic_gpus_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEgressOnlyInternetGatewaysOutput {
    /// <p>Information about the egress-only internet gateways.</p>
    #[doc(hidden)]
    pub egress_only_internet_gateways:
        std::option::Option<std::vec::Vec<crate::model::EgressOnlyInternetGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeEgressOnlyInternetGatewaysOutput {
    /// <p>Information about the egress-only internet gateways.</p>
    pub fn egress_only_internet_gateways(
        &self,
    ) -> std::option::Option<&[crate::model::EgressOnlyInternetGateway]> {
        self.egress_only_internet_gateways.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeEgressOnlyInternetGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput).
pub mod describe_egress_only_internet_gateways_output {

    /// A builder for [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) egress_only_internet_gateways:
            std::option::Option<std::vec::Vec<crate::model::EgressOnlyInternetGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `egress_only_internet_gateways`.
        ///
        /// To override the contents of this collection use [`set_egress_only_internet_gateways`](Self::set_egress_only_internet_gateways).
        ///
        /// <p>Information about the egress-only internet gateways.</p>
        pub fn egress_only_internet_gateways(
            mut self,
            input: crate::model::EgressOnlyInternetGateway,
        ) -> Self {
            let mut v = self.egress_only_internet_gateways.unwrap_or_default();
            v.push(input);
            self.egress_only_internet_gateways = Some(v);
            self
        }
        /// <p>Information about the egress-only internet gateways.</p>
        pub fn set_egress_only_internet_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EgressOnlyInternetGateway>>,
        ) -> Self {
            self.egress_only_internet_gateways = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeEgressOnlyInternetGatewaysOutput {
            crate::output::DescribeEgressOnlyInternetGatewaysOutput {
                egress_only_internet_gateways: self.egress_only_internet_gateways,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeEgressOnlyInternetGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput).
    pub fn builder() -> crate::output::describe_egress_only_internet_gateways_output::Builder {
        crate::output::describe_egress_only_internet_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDhcpOptionsOutput {
    /// <p>Information about one or more DHCP options sets.</p>
    #[doc(hidden)]
    pub dhcp_options: std::option::Option<std::vec::Vec<crate::model::DhcpOptions>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDhcpOptionsOutput {
    /// <p>Information about one or more DHCP options sets.</p>
    pub fn dhcp_options(&self) -> std::option::Option<&[crate::model::DhcpOptions]> {
        self.dhcp_options.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeDhcpOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput).
pub mod describe_dhcp_options_output {

    /// A builder for [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dhcp_options: std::option::Option<std::vec::Vec<crate::model::DhcpOptions>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `dhcp_options`.
        ///
        /// To override the contents of this collection use [`set_dhcp_options`](Self::set_dhcp_options).
        ///
        /// <p>Information about one or more DHCP options sets.</p>
        pub fn dhcp_options(mut self, input: crate::model::DhcpOptions) -> Self {
            let mut v = self.dhcp_options.unwrap_or_default();
            v.push(input);
            self.dhcp_options = Some(v);
            self
        }
        /// <p>Information about one or more DHCP options sets.</p>
        pub fn set_dhcp_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DhcpOptions>>,
        ) -> Self {
            self.dhcp_options = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput).
        pub fn build(self) -> crate::output::DescribeDhcpOptionsOutput {
            crate::output::DescribeDhcpOptionsOutput {
                dhcp_options: self.dhcp_options,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput).
    pub fn builder() -> crate::output::describe_dhcp_options_output::Builder {
        crate::output::describe_dhcp_options_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeCustomerGateways.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCustomerGatewaysOutput {
    /// <p>Information about one or more customer gateways.</p>
    #[doc(hidden)]
    pub customer_gateways: std::option::Option<std::vec::Vec<crate::model::CustomerGateway>>,
    _request_id: Option<String>,
}
impl DescribeCustomerGatewaysOutput {
    /// <p>Information about one or more customer gateways.</p>
    pub fn customer_gateways(&self) -> std::option::Option<&[crate::model::CustomerGateway]> {
        self.customer_gateways.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCustomerGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput).
pub mod describe_customer_gateways_output {

    /// A builder for [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) customer_gateways:
            std::option::Option<std::vec::Vec<crate::model::CustomerGateway>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `customer_gateways`.
        ///
        /// To override the contents of this collection use [`set_customer_gateways`](Self::set_customer_gateways).
        ///
        /// <p>Information about one or more customer gateways.</p>
        pub fn customer_gateways(mut self, input: crate::model::CustomerGateway) -> Self {
            let mut v = self.customer_gateways.unwrap_or_default();
            v.push(input);
            self.customer_gateways = Some(v);
            self
        }
        /// <p>Information about one or more customer gateways.</p>
        pub fn set_customer_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomerGateway>>,
        ) -> Self {
            self.customer_gateways = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeCustomerGatewaysOutput {
            crate::output::DescribeCustomerGatewaysOutput {
                customer_gateways: self.customer_gateways,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCustomerGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput).
    pub fn builder() -> crate::output::describe_customer_gateways_output::Builder {
        crate::output::describe_customer_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConversionTasksOutput {
    /// <p>Information about the conversion tasks.</p>
    #[doc(hidden)]
    pub conversion_tasks: std::option::Option<std::vec::Vec<crate::model::ConversionTask>>,
    _request_id: Option<String>,
}
impl DescribeConversionTasksOutput {
    /// <p>Information about the conversion tasks.</p>
    pub fn conversion_tasks(&self) -> std::option::Option<&[crate::model::ConversionTask]> {
        self.conversion_tasks.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeConversionTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput).
pub mod describe_conversion_tasks_output {

    /// A builder for [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) conversion_tasks:
            std::option::Option<std::vec::Vec<crate::model::ConversionTask>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `conversion_tasks`.
        ///
        /// To override the contents of this collection use [`set_conversion_tasks`](Self::set_conversion_tasks).
        ///
        /// <p>Information about the conversion tasks.</p>
        pub fn conversion_tasks(mut self, input: crate::model::ConversionTask) -> Self {
            let mut v = self.conversion_tasks.unwrap_or_default();
            v.push(input);
            self.conversion_tasks = Some(v);
            self
        }
        /// <p>Information about the conversion tasks.</p>
        pub fn set_conversion_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConversionTask>>,
        ) -> Self {
            self.conversion_tasks = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput).
        pub fn build(self) -> crate::output::DescribeConversionTasksOutput {
            crate::output::DescribeConversionTasksOutput {
                conversion_tasks: self.conversion_tasks,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeConversionTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput).
    pub fn builder() -> crate::output::describe_conversion_tasks_output::Builder {
        crate::output::describe_conversion_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCoipPoolsOutput {
    /// <p>Information about the address pools.</p>
    #[doc(hidden)]
    pub coip_pools: std::option::Option<std::vec::Vec<crate::model::CoipPool>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCoipPoolsOutput {
    /// <p>Information about the address pools.</p>
    pub fn coip_pools(&self) -> std::option::Option<&[crate::model::CoipPool]> {
        self.coip_pools.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCoipPoolsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput).
pub mod describe_coip_pools_output {

    /// A builder for [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_pools: std::option::Option<std::vec::Vec<crate::model::CoipPool>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `coip_pools`.
        ///
        /// To override the contents of this collection use [`set_coip_pools`](Self::set_coip_pools).
        ///
        /// <p>Information about the address pools.</p>
        pub fn coip_pools(mut self, input: crate::model::CoipPool) -> Self {
            let mut v = self.coip_pools.unwrap_or_default();
            v.push(input);
            self.coip_pools = Some(v);
            self
        }
        /// <p>Information about the address pools.</p>
        pub fn set_coip_pools(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CoipPool>>,
        ) -> Self {
            self.coip_pools = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput).
        pub fn build(self) -> crate::output::DescribeCoipPoolsOutput {
            crate::output::DescribeCoipPoolsOutput {
                coip_pools: self.coip_pools,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCoipPoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput).
    pub fn builder() -> crate::output::describe_coip_pools_output::Builder {
        crate::output::describe_coip_pools_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClientVpnTargetNetworksOutput {
    /// <p>Information about the associated target networks.</p>
    #[doc(hidden)]
    pub client_vpn_target_networks: std::option::Option<std::vec::Vec<crate::model::TargetNetwork>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeClientVpnTargetNetworksOutput {
    /// <p>Information about the associated target networks.</p>
    pub fn client_vpn_target_networks(
        &self,
    ) -> std::option::Option<&[crate::model::TargetNetwork]> {
        self.client_vpn_target_networks.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeClientVpnTargetNetworksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput).
pub mod describe_client_vpn_target_networks_output {

    /// A builder for [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_target_networks:
            std::option::Option<std::vec::Vec<crate::model::TargetNetwork>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `client_vpn_target_networks`.
        ///
        /// To override the contents of this collection use [`set_client_vpn_target_networks`](Self::set_client_vpn_target_networks).
        ///
        /// <p>Information about the associated target networks.</p>
        pub fn client_vpn_target_networks(mut self, input: crate::model::TargetNetwork) -> Self {
            let mut v = self.client_vpn_target_networks.unwrap_or_default();
            v.push(input);
            self.client_vpn_target_networks = Some(v);
            self
        }
        /// <p>Information about the associated target networks.</p>
        pub fn set_client_vpn_target_networks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TargetNetwork>>,
        ) -> Self {
            self.client_vpn_target_networks = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput).
        pub fn build(self) -> crate::output::DescribeClientVpnTargetNetworksOutput {
            crate::output::DescribeClientVpnTargetNetworksOutput {
                client_vpn_target_networks: self.client_vpn_target_networks,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClientVpnTargetNetworksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput).
    pub fn builder() -> crate::output::describe_client_vpn_target_networks_output::Builder {
        crate::output::describe_client_vpn_target_networks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClientVpnRoutesOutput {
    /// <p>Information about the Client VPN endpoint routes.</p>
    #[doc(hidden)]
    pub routes: std::option::Option<std::vec::Vec<crate::model::ClientVpnRoute>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeClientVpnRoutesOutput {
    /// <p>Information about the Client VPN endpoint routes.</p>
    pub fn routes(&self) -> std::option::Option<&[crate::model::ClientVpnRoute]> {
        self.routes.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeClientVpnRoutesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput).
pub mod describe_client_vpn_routes_output {

    /// A builder for [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::ClientVpnRoute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `routes`.
        ///
        /// To override the contents of this collection use [`set_routes`](Self::set_routes).
        ///
        /// <p>Information about the Client VPN endpoint routes.</p>
        pub fn routes(mut self, input: crate::model::ClientVpnRoute) -> Self {
            let mut v = self.routes.unwrap_or_default();
            v.push(input);
            self.routes = Some(v);
            self
        }
        /// <p>Information about the Client VPN endpoint routes.</p>
        pub fn set_routes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClientVpnRoute>>,
        ) -> Self {
            self.routes = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput).
        pub fn build(self) -> crate::output::DescribeClientVpnRoutesOutput {
            crate::output::DescribeClientVpnRoutesOutput {
                routes: self.routes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClientVpnRoutesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput).
    pub fn builder() -> crate::output::describe_client_vpn_routes_output::Builder {
        crate::output::describe_client_vpn_routes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClientVpnEndpointsOutput {
    /// <p>Information about the Client VPN endpoints.</p>
    #[doc(hidden)]
    pub client_vpn_endpoints: std::option::Option<std::vec::Vec<crate::model::ClientVpnEndpoint>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeClientVpnEndpointsOutput {
    /// <p>Information about the Client VPN endpoints.</p>
    pub fn client_vpn_endpoints(&self) -> std::option::Option<&[crate::model::ClientVpnEndpoint]> {
        self.client_vpn_endpoints.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeClientVpnEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput).
pub mod describe_client_vpn_endpoints_output {

    /// A builder for [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_endpoints:
            std::option::Option<std::vec::Vec<crate::model::ClientVpnEndpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `client_vpn_endpoints`.
        ///
        /// To override the contents of this collection use [`set_client_vpn_endpoints`](Self::set_client_vpn_endpoints).
        ///
        /// <p>Information about the Client VPN endpoints.</p>
        pub fn client_vpn_endpoints(mut self, input: crate::model::ClientVpnEndpoint) -> Self {
            let mut v = self.client_vpn_endpoints.unwrap_or_default();
            v.push(input);
            self.client_vpn_endpoints = Some(v);
            self
        }
        /// <p>Information about the Client VPN endpoints.</p>
        pub fn set_client_vpn_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClientVpnEndpoint>>,
        ) -> Self {
            self.client_vpn_endpoints = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput).
        pub fn build(self) -> crate::output::DescribeClientVpnEndpointsOutput {
            crate::output::DescribeClientVpnEndpointsOutput {
                client_vpn_endpoints: self.client_vpn_endpoints,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClientVpnEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput).
    pub fn builder() -> crate::output::describe_client_vpn_endpoints_output::Builder {
        crate::output::describe_client_vpn_endpoints_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClientVpnConnectionsOutput {
    /// <p>Information about the active and terminated client connections.</p>
    #[doc(hidden)]
    pub connections: std::option::Option<std::vec::Vec<crate::model::ClientVpnConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeClientVpnConnectionsOutput {
    /// <p>Information about the active and terminated client connections.</p>
    pub fn connections(&self) -> std::option::Option<&[crate::model::ClientVpnConnection]> {
        self.connections.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeClientVpnConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput).
pub mod describe_client_vpn_connections_output {

    /// A builder for [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connections:
            std::option::Option<std::vec::Vec<crate::model::ClientVpnConnection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `connections`.
        ///
        /// To override the contents of this collection use [`set_connections`](Self::set_connections).
        ///
        /// <p>Information about the active and terminated client connections.</p>
        pub fn connections(mut self, input: crate::model::ClientVpnConnection) -> Self {
            let mut v = self.connections.unwrap_or_default();
            v.push(input);
            self.connections = Some(v);
            self
        }
        /// <p>Information about the active and terminated client connections.</p>
        pub fn set_connections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClientVpnConnection>>,
        ) -> Self {
            self.connections = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput).
        pub fn build(self) -> crate::output::DescribeClientVpnConnectionsOutput {
            crate::output::DescribeClientVpnConnectionsOutput {
                connections: self.connections,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClientVpnConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput).
    pub fn builder() -> crate::output::describe_client_vpn_connections_output::Builder {
        crate::output::describe_client_vpn_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClientVpnAuthorizationRulesOutput {
    /// <p>Information about the authorization rules.</p>
    #[doc(hidden)]
    pub authorization_rules: std::option::Option<std::vec::Vec<crate::model::AuthorizationRule>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeClientVpnAuthorizationRulesOutput {
    /// <p>Information about the authorization rules.</p>
    pub fn authorization_rules(&self) -> std::option::Option<&[crate::model::AuthorizationRule]> {
        self.authorization_rules.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeClientVpnAuthorizationRulesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput).
pub mod describe_client_vpn_authorization_rules_output {

    /// A builder for [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) authorization_rules:
            std::option::Option<std::vec::Vec<crate::model::AuthorizationRule>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `authorization_rules`.
        ///
        /// To override the contents of this collection use [`set_authorization_rules`](Self::set_authorization_rules).
        ///
        /// <p>Information about the authorization rules.</p>
        pub fn authorization_rules(mut self, input: crate::model::AuthorizationRule) -> Self {
            let mut v = self.authorization_rules.unwrap_or_default();
            v.push(input);
            self.authorization_rules = Some(v);
            self
        }
        /// <p>Information about the authorization rules.</p>
        pub fn set_authorization_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AuthorizationRule>>,
        ) -> Self {
            self.authorization_rules = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput).
        pub fn build(self) -> crate::output::DescribeClientVpnAuthorizationRulesOutput {
            crate::output::DescribeClientVpnAuthorizationRulesOutput {
                authorization_rules: self.authorization_rules,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClientVpnAuthorizationRulesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput).
    pub fn builder() -> crate::output::describe_client_vpn_authorization_rules_output::Builder {
        crate::output::describe_client_vpn_authorization_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClassicLinkInstancesOutput {
    /// <p>Information about one or more linked EC2-Classic instances.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<crate::model::ClassicLinkInstance>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeClassicLinkInstancesOutput {
    /// <p>Information about one or more linked EC2-Classic instances.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::ClassicLinkInstance]> {
        self.instances.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeClassicLinkInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput).
pub mod describe_classic_link_instances_output {

    /// A builder for [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::ClassicLinkInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>Information about one or more linked EC2-Classic instances.</p>
        pub fn instances(mut self, input: crate::model::ClassicLinkInstance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>Information about one or more linked EC2-Classic instances.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClassicLinkInstance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput).
        pub fn build(self) -> crate::output::DescribeClassicLinkInstancesOutput {
            crate::output::DescribeClassicLinkInstancesOutput {
                instances: self.instances,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClassicLinkInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput).
    pub fn builder() -> crate::output::describe_classic_link_instances_output::Builder {
        crate::output::describe_classic_link_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCarrierGatewaysOutput {
    /// <p>Information about the carrier gateway.</p>
    #[doc(hidden)]
    pub carrier_gateways: std::option::Option<std::vec::Vec<crate::model::CarrierGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCarrierGatewaysOutput {
    /// <p>Information about the carrier gateway.</p>
    pub fn carrier_gateways(&self) -> std::option::Option<&[crate::model::CarrierGateway]> {
        self.carrier_gateways.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCarrierGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput).
pub mod describe_carrier_gateways_output {

    /// A builder for [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) carrier_gateways:
            std::option::Option<std::vec::Vec<crate::model::CarrierGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `carrier_gateways`.
        ///
        /// To override the contents of this collection use [`set_carrier_gateways`](Self::set_carrier_gateways).
        ///
        /// <p>Information about the carrier gateway.</p>
        pub fn carrier_gateways(mut self, input: crate::model::CarrierGateway) -> Self {
            let mut v = self.carrier_gateways.unwrap_or_default();
            v.push(input);
            self.carrier_gateways = Some(v);
            self
        }
        /// <p>Information about the carrier gateway.</p>
        pub fn set_carrier_gateways(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CarrierGateway>>,
        ) -> Self {
            self.carrier_gateways = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput).
        pub fn build(self) -> crate::output::DescribeCarrierGatewaysOutput {
            crate::output::DescribeCarrierGatewaysOutput {
                carrier_gateways: self.carrier_gateways,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCarrierGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput).
    pub fn builder() -> crate::output::describe_carrier_gateways_output::Builder {
        crate::output::describe_carrier_gateways_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCapacityReservationsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the Capacity Reservations.</p>
    #[doc(hidden)]
    pub capacity_reservations:
        std::option::Option<std::vec::Vec<crate::model::CapacityReservation>>,
    _request_id: Option<String>,
}
impl DescribeCapacityReservationsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the Capacity Reservations.</p>
    pub fn capacity_reservations(
        &self,
    ) -> std::option::Option<&[crate::model::CapacityReservation]> {
        self.capacity_reservations.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCapacityReservationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput).
pub mod describe_capacity_reservations_output {

    /// A builder for [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) capacity_reservations:
            std::option::Option<std::vec::Vec<crate::model::CapacityReservation>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `capacity_reservations`.
        ///
        /// To override the contents of this collection use [`set_capacity_reservations`](Self::set_capacity_reservations).
        ///
        /// <p>Information about the Capacity Reservations.</p>
        pub fn capacity_reservations(mut self, input: crate::model::CapacityReservation) -> Self {
            let mut v = self.capacity_reservations.unwrap_or_default();
            v.push(input);
            self.capacity_reservations = Some(v);
            self
        }
        /// <p>Information about the Capacity Reservations.</p>
        pub fn set_capacity_reservations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CapacityReservation>>,
        ) -> Self {
            self.capacity_reservations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput).
        pub fn build(self) -> crate::output::DescribeCapacityReservationsOutput {
            crate::output::DescribeCapacityReservationsOutput {
                next_token: self.next_token,
                capacity_reservations: self.capacity_reservations,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCapacityReservationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput).
    pub fn builder() -> crate::output::describe_capacity_reservations_output::Builder {
        crate::output::describe_capacity_reservations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCapacityReservationFleetsOutput {
    /// <p>Information about the Capacity Reservation Fleets.</p>
    #[doc(hidden)]
    pub capacity_reservation_fleets:
        std::option::Option<std::vec::Vec<crate::model::CapacityReservationFleet>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCapacityReservationFleetsOutput {
    /// <p>Information about the Capacity Reservation Fleets.</p>
    pub fn capacity_reservation_fleets(
        &self,
    ) -> std::option::Option<&[crate::model::CapacityReservationFleet]> {
        self.capacity_reservation_fleets.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCapacityReservationFleetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeCapacityReservationFleetsOutput`](crate::output::DescribeCapacityReservationFleetsOutput).
pub mod describe_capacity_reservation_fleets_output {

    /// A builder for [`DescribeCapacityReservationFleetsOutput`](crate::output::DescribeCapacityReservationFleetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) capacity_reservation_fleets:
            std::option::Option<std::vec::Vec<crate::model::CapacityReservationFleet>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `capacity_reservation_fleets`.
        ///
        /// To override the contents of this collection use [`set_capacity_reservation_fleets`](Self::set_capacity_reservation_fleets).
        ///
        /// <p>Information about the Capacity Reservation Fleets.</p>
        pub fn capacity_reservation_fleets(
            mut self,
            input: crate::model::CapacityReservationFleet,
        ) -> Self {
            let mut v = self.capacity_reservation_fleets.unwrap_or_default();
            v.push(input);
            self.capacity_reservation_fleets = Some(v);
            self
        }
        /// <p>Information about the Capacity Reservation Fleets.</p>
        pub fn set_capacity_reservation_fleets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CapacityReservationFleet>>,
        ) -> Self {
            self.capacity_reservation_fleets = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCapacityReservationFleetsOutput`](crate::output::DescribeCapacityReservationFleetsOutput).
        pub fn build(self) -> crate::output::DescribeCapacityReservationFleetsOutput {
            crate::output::DescribeCapacityReservationFleetsOutput {
                capacity_reservation_fleets: self.capacity_reservation_fleets,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeCapacityReservationFleetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCapacityReservationFleetsOutput`](crate::output::DescribeCapacityReservationFleetsOutput).
    pub fn builder() -> crate::output::describe_capacity_reservation_fleets_output::Builder {
        crate::output::describe_capacity_reservation_fleets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeByoipCidrsOutput {
    /// <p>Information about your address ranges.</p>
    #[doc(hidden)]
    pub byoip_cidrs: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeByoipCidrsOutput {
    /// <p>Information about your address ranges.</p>
    pub fn byoip_cidrs(&self) -> std::option::Option<&[crate::model::ByoipCidr]> {
        self.byoip_cidrs.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeByoipCidrsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput).
pub mod describe_byoip_cidrs_output {

    /// A builder for [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidrs: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `byoip_cidrs`.
        ///
        /// To override the contents of this collection use [`set_byoip_cidrs`](Self::set_byoip_cidrs).
        ///
        /// <p>Information about your address ranges.</p>
        pub fn byoip_cidrs(mut self, input: crate::model::ByoipCidr) -> Self {
            let mut v = self.byoip_cidrs.unwrap_or_default();
            v.push(input);
            self.byoip_cidrs = Some(v);
            self
        }
        /// <p>Information about your address ranges.</p>
        pub fn set_byoip_cidrs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
        ) -> Self {
            self.byoip_cidrs = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput).
        pub fn build(self) -> crate::output::DescribeByoipCidrsOutput {
            crate::output::DescribeByoipCidrsOutput {
                byoip_cidrs: self.byoip_cidrs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeByoipCidrsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput).
    pub fn builder() -> crate::output::describe_byoip_cidrs_output::Builder {
        crate::output::describe_byoip_cidrs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeBundleTasksOutput {
    /// <p>Information about the bundle tasks.</p>
    #[doc(hidden)]
    pub bundle_tasks: std::option::Option<std::vec::Vec<crate::model::BundleTask>>,
    _request_id: Option<String>,
}
impl DescribeBundleTasksOutput {
    /// <p>Information about the bundle tasks.</p>
    pub fn bundle_tasks(&self) -> std::option::Option<&[crate::model::BundleTask]> {
        self.bundle_tasks.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeBundleTasksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput).
pub mod describe_bundle_tasks_output {

    /// A builder for [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bundle_tasks: std::option::Option<std::vec::Vec<crate::model::BundleTask>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `bundle_tasks`.
        ///
        /// To override the contents of this collection use [`set_bundle_tasks`](Self::set_bundle_tasks).
        ///
        /// <p>Information about the bundle tasks.</p>
        pub fn bundle_tasks(mut self, input: crate::model::BundleTask) -> Self {
            let mut v = self.bundle_tasks.unwrap_or_default();
            v.push(input);
            self.bundle_tasks = Some(v);
            self
        }
        /// <p>Information about the bundle tasks.</p>
        pub fn set_bundle_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BundleTask>>,
        ) -> Self {
            self.bundle_tasks = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput).
        pub fn build(self) -> crate::output::DescribeBundleTasksOutput {
            crate::output::DescribeBundleTasksOutput {
                bundle_tasks: self.bundle_tasks,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeBundleTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput).
    pub fn builder() -> crate::output::describe_bundle_tasks_output::Builder {
        crate::output::describe_bundle_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAwsNetworkPerformanceMetricSubscriptionsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Describes the current Infrastructure Performance subscriptions.</p>
    #[doc(hidden)]
    pub subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
    _request_id: Option<String>,
}
impl DescribeAwsNetworkPerformanceMetricSubscriptionsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Describes the current Infrastructure Performance subscriptions.</p>
    pub fn subscriptions(&self) -> std::option::Option<&[crate::model::Subscription]> {
        self.subscriptions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAwsNetworkPerformanceMetricSubscriptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAwsNetworkPerformanceMetricSubscriptionsOutput`](crate::output::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput).
pub mod describe_aws_network_performance_metric_subscriptions_output {

    /// A builder for [`DescribeAwsNetworkPerformanceMetricSubscriptionsOutput`](crate::output::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `subscriptions`.
        ///
        /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
        ///
        /// <p>Describes the current Infrastructure Performance subscriptions.</p>
        pub fn subscriptions(mut self, input: crate::model::Subscription) -> Self {
            let mut v = self.subscriptions.unwrap_or_default();
            v.push(input);
            self.subscriptions = Some(v);
            self
        }
        /// <p>Describes the current Infrastructure Performance subscriptions.</p>
        pub fn set_subscriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        ) -> Self {
            self.subscriptions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAwsNetworkPerformanceMetricSubscriptionsOutput`](crate::output::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput).
        pub fn build(
            self,
        ) -> crate::output::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput {
            crate::output::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput {
                next_token: self.next_token,
                subscriptions: self.subscriptions,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAwsNetworkPerformanceMetricSubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAwsNetworkPerformanceMetricSubscriptionsOutput`](crate::output::DescribeAwsNetworkPerformanceMetricSubscriptionsOutput).
    pub fn builder(
    ) -> crate::output::describe_aws_network_performance_metric_subscriptions_output::Builder {
        crate::output::describe_aws_network_performance_metric_subscriptions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAvailabilityZonesOutput {
    /// <p>Information about the Availability Zones, Local Zones, and Wavelength Zones.</p>
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<crate::model::AvailabilityZone>>,
    _request_id: Option<String>,
}
impl DescribeAvailabilityZonesOutput {
    /// <p>Information about the Availability Zones, Local Zones, and Wavelength Zones.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[crate::model::AvailabilityZone]> {
        self.availability_zones.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAvailabilityZonesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput).
pub mod describe_availability_zones_output {

    /// A builder for [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones:
            std::option::Option<std::vec::Vec<crate::model::AvailabilityZone>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `availability_zones`.
        ///
        /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
        ///
        /// <p>Information about the Availability Zones, Local Zones, and Wavelength Zones.</p>
        pub fn availability_zones(mut self, input: crate::model::AvailabilityZone) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(input);
            self.availability_zones = Some(v);
            self
        }
        /// <p>Information about the Availability Zones, Local Zones, and Wavelength Zones.</p>
        pub fn set_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AvailabilityZone>>,
        ) -> Self {
            self.availability_zones = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput).
        pub fn build(self) -> crate::output::DescribeAvailabilityZonesOutput {
            crate::output::DescribeAvailabilityZonesOutput {
                availability_zones: self.availability_zones,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAvailabilityZonesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput).
    pub fn builder() -> crate::output::describe_availability_zones_output::Builder {
        crate::output::describe_availability_zones_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAggregateIdFormatOutput {
    /// <p>Indicates whether all resource types in the Region are configured to use longer IDs. This value is only <code>true</code> if all users are configured to use longer IDs for all resources types in the Region.</p>
    #[doc(hidden)]
    pub use_long_ids_aggregated: std::option::Option<bool>,
    /// <p>Information about each resource's ID format.</p>
    #[doc(hidden)]
    pub statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
    _request_id: Option<String>,
}
impl DescribeAggregateIdFormatOutput {
    /// <p>Indicates whether all resource types in the Region are configured to use longer IDs. This value is only <code>true</code> if all users are configured to use longer IDs for all resources types in the Region.</p>
    pub fn use_long_ids_aggregated(&self) -> std::option::Option<bool> {
        self.use_long_ids_aggregated
    }
    /// <p>Information about each resource's ID format.</p>
    pub fn statuses(&self) -> std::option::Option<&[crate::model::IdFormat]> {
        self.statuses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAggregateIdFormatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput).
pub mod describe_aggregate_id_format_output {

    /// A builder for [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) use_long_ids_aggregated: std::option::Option<bool>,
        pub(crate) statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Indicates whether all resource types in the Region are configured to use longer IDs. This value is only <code>true</code> if all users are configured to use longer IDs for all resources types in the Region.</p>
        pub fn use_long_ids_aggregated(mut self, input: bool) -> Self {
            self.use_long_ids_aggregated = Some(input);
            self
        }
        /// <p>Indicates whether all resource types in the Region are configured to use longer IDs. This value is only <code>true</code> if all users are configured to use longer IDs for all resources types in the Region.</p>
        pub fn set_use_long_ids_aggregated(mut self, input: std::option::Option<bool>) -> Self {
            self.use_long_ids_aggregated = input;
            self
        }
        /// Appends an item to `statuses`.
        ///
        /// To override the contents of this collection use [`set_statuses`](Self::set_statuses).
        ///
        /// <p>Information about each resource's ID format.</p>
        pub fn statuses(mut self, input: crate::model::IdFormat) -> Self {
            let mut v = self.statuses.unwrap_or_default();
            v.push(input);
            self.statuses = Some(v);
            self
        }
        /// <p>Information about each resource's ID format.</p>
        pub fn set_statuses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        ) -> Self {
            self.statuses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput).
        pub fn build(self) -> crate::output::DescribeAggregateIdFormatOutput {
            crate::output::DescribeAggregateIdFormatOutput {
                use_long_ids_aggregated: self.use_long_ids_aggregated,
                statuses: self.statuses,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAggregateIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput).
    pub fn builder() -> crate::output::describe_aggregate_id_format_output::Builder {
        crate::output::describe_aggregate_id_format_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAddressTransfersOutput {
    /// <p>The Elastic IP address transfer.</p>
    #[doc(hidden)]
    pub address_transfers: std::option::Option<std::vec::Vec<crate::model::AddressTransfer>>,
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAddressTransfersOutput {
    /// <p>The Elastic IP address transfer.</p>
    pub fn address_transfers(&self) -> std::option::Option<&[crate::model::AddressTransfer]> {
        self.address_transfers.as_deref()
    }
    /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAddressTransfersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAddressTransfersOutput`](crate::output::DescribeAddressTransfersOutput).
pub mod describe_address_transfers_output {

    /// A builder for [`DescribeAddressTransfersOutput`](crate::output::DescribeAddressTransfersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address_transfers:
            std::option::Option<std::vec::Vec<crate::model::AddressTransfer>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `address_transfers`.
        ///
        /// To override the contents of this collection use [`set_address_transfers`](Self::set_address_transfers).
        ///
        /// <p>The Elastic IP address transfer.</p>
        pub fn address_transfers(mut self, input: crate::model::AddressTransfer) -> Self {
            let mut v = self.address_transfers.unwrap_or_default();
            v.push(input);
            self.address_transfers = Some(v);
            self
        }
        /// <p>The Elastic IP address transfer.</p>
        pub fn set_address_transfers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AddressTransfer>>,
        ) -> Self {
            self.address_transfers = input;
            self
        }
        /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAddressTransfersOutput`](crate::output::DescribeAddressTransfersOutput).
        pub fn build(self) -> crate::output::DescribeAddressTransfersOutput {
            crate::output::DescribeAddressTransfersOutput {
                address_transfers: self.address_transfers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAddressTransfersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAddressTransfersOutput`](crate::output::DescribeAddressTransfersOutput).
    pub fn builder() -> crate::output::describe_address_transfers_output::Builder {
        crate::output::describe_address_transfers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAddressesAttributeOutput {
    /// <p>Information about the IP addresses.</p>
    #[doc(hidden)]
    pub addresses: std::option::Option<std::vec::Vec<crate::model::AddressAttribute>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAddressesAttributeOutput {
    /// <p>Information about the IP addresses.</p>
    pub fn addresses(&self) -> std::option::Option<&[crate::model::AddressAttribute]> {
        self.addresses.as_deref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAddressesAttributeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput).
pub mod describe_addresses_attribute_output {

    /// A builder for [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) addresses: std::option::Option<std::vec::Vec<crate::model::AddressAttribute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `addresses`.
        ///
        /// To override the contents of this collection use [`set_addresses`](Self::set_addresses).
        ///
        /// <p>Information about the IP addresses.</p>
        pub fn addresses(mut self, input: crate::model::AddressAttribute) -> Self {
            let mut v = self.addresses.unwrap_or_default();
            v.push(input);
            self.addresses = Some(v);
            self
        }
        /// <p>Information about the IP addresses.</p>
        pub fn set_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AddressAttribute>>,
        ) -> Self {
            self.addresses = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput).
        pub fn build(self) -> crate::output::DescribeAddressesAttributeOutput {
            crate::output::DescribeAddressesAttributeOutput {
                addresses: self.addresses,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAddressesAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput).
    pub fn builder() -> crate::output::describe_addresses_attribute_output::Builder {
        crate::output::describe_addresses_attribute_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAddressesOutput {
    /// <p>Information about the Elastic IP addresses.</p>
    #[doc(hidden)]
    pub addresses: std::option::Option<std::vec::Vec<crate::model::Address>>,
    _request_id: Option<String>,
}
impl DescribeAddressesOutput {
    /// <p>Information about the Elastic IP addresses.</p>
    pub fn addresses(&self) -> std::option::Option<&[crate::model::Address]> {
        self.addresses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput).
pub mod describe_addresses_output {

    /// A builder for [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) addresses: std::option::Option<std::vec::Vec<crate::model::Address>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `addresses`.
        ///
        /// To override the contents of this collection use [`set_addresses`](Self::set_addresses).
        ///
        /// <p>Information about the Elastic IP addresses.</p>
        pub fn addresses(mut self, input: crate::model::Address) -> Self {
            let mut v = self.addresses.unwrap_or_default();
            v.push(input);
            self.addresses = Some(v);
            self
        }
        /// <p>Information about the Elastic IP addresses.</p>
        pub fn set_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Address>>,
        ) -> Self {
            self.addresses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput).
        pub fn build(self) -> crate::output::DescribeAddressesOutput {
            crate::output::DescribeAddressesOutput {
                addresses: self.addresses,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAddressesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput).
    pub fn builder() -> crate::output::describe_addresses_output::Builder {
        crate::output::describe_addresses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAccountAttributesOutput {
    /// <p>Information about the account attributes.</p>
    #[doc(hidden)]
    pub account_attributes: std::option::Option<std::vec::Vec<crate::model::AccountAttribute>>,
    _request_id: Option<String>,
}
impl DescribeAccountAttributesOutput {
    /// <p>Information about the account attributes.</p>
    pub fn account_attributes(&self) -> std::option::Option<&[crate::model::AccountAttribute]> {
        self.account_attributes.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAccountAttributesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput).
pub mod describe_account_attributes_output {

    /// A builder for [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_attributes:
            std::option::Option<std::vec::Vec<crate::model::AccountAttribute>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `account_attributes`.
        ///
        /// To override the contents of this collection use [`set_account_attributes`](Self::set_account_attributes).
        ///
        /// <p>Information about the account attributes.</p>
        pub fn account_attributes(mut self, input: crate::model::AccountAttribute) -> Self {
            let mut v = self.account_attributes.unwrap_or_default();
            v.push(input);
            self.account_attributes = Some(v);
            self
        }
        /// <p>Information about the account attributes.</p>
        pub fn set_account_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccountAttribute>>,
        ) -> Self {
            self.account_attributes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput).
        pub fn build(self) -> crate::output::DescribeAccountAttributesOutput {
            crate::output::DescribeAccountAttributesOutput {
                account_attributes: self.account_attributes,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAccountAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput).
    pub fn builder() -> crate::output::describe_account_attributes_output::Builder {
        crate::output::describe_account_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterTransitGatewayMulticastGroupSourcesOutput {
    /// <p>Information about the deregistered group sources.</p>
    #[doc(hidden)]
    pub deregistered_multicast_group_sources:
        std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupSources>,
    _request_id: Option<String>,
}
impl DeregisterTransitGatewayMulticastGroupSourcesOutput {
    /// <p>Information about the deregistered group sources.</p>
    pub fn deregistered_multicast_group_sources(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDeregisteredGroupSources> {
        self.deregistered_multicast_group_sources.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeregisterTransitGatewayMulticastGroupSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput).
pub mod deregister_transit_gateway_multicast_group_sources_output {

    /// A builder for [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) deregistered_multicast_group_sources:
            std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupSources>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deregistered group sources.</p>
        pub fn deregistered_multicast_group_sources(
            mut self,
            input: crate::model::TransitGatewayMulticastDeregisteredGroupSources,
        ) -> Self {
            self.deregistered_multicast_group_sources = Some(input);
            self
        }
        /// <p>Information about the deregistered group sources.</p>
        pub fn set_deregistered_multicast_group_sources(
            mut self,
            input: std::option::Option<
                crate::model::TransitGatewayMulticastDeregisteredGroupSources,
            >,
        ) -> Self {
            self.deregistered_multicast_group_sources = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput).
        pub fn build(self) -> crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput {
            crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput {
                deregistered_multicast_group_sources: self.deregistered_multicast_group_sources,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeregisterTransitGatewayMulticastGroupSourcesOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput).
    pub fn builder(
    ) -> crate::output::deregister_transit_gateway_multicast_group_sources_output::Builder {
        crate::output::deregister_transit_gateway_multicast_group_sources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterTransitGatewayMulticastGroupMembersOutput {
    /// <p>Information about the deregistered members.</p>
    #[doc(hidden)]
    pub deregistered_multicast_group_members:
        std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupMembers>,
    _request_id: Option<String>,
}
impl DeregisterTransitGatewayMulticastGroupMembersOutput {
    /// <p>Information about the deregistered members.</p>
    pub fn deregistered_multicast_group_members(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDeregisteredGroupMembers> {
        self.deregistered_multicast_group_members.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeregisterTransitGatewayMulticastGroupMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput).
pub mod deregister_transit_gateway_multicast_group_members_output {

    /// A builder for [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) deregistered_multicast_group_members:
            std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupMembers>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deregistered members.</p>
        pub fn deregistered_multicast_group_members(
            mut self,
            input: crate::model::TransitGatewayMulticastDeregisteredGroupMembers,
        ) -> Self {
            self.deregistered_multicast_group_members = Some(input);
            self
        }
        /// <p>Information about the deregistered members.</p>
        pub fn set_deregistered_multicast_group_members(
            mut self,
            input: std::option::Option<
                crate::model::TransitGatewayMulticastDeregisteredGroupMembers,
            >,
        ) -> Self {
            self.deregistered_multicast_group_members = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput).
        pub fn build(self) -> crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput {
            crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput {
                deregistered_multicast_group_members: self.deregistered_multicast_group_members,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeregisterTransitGatewayMulticastGroupMembersOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput).
    pub fn builder(
    ) -> crate::output::deregister_transit_gateway_multicast_group_members_output::Builder {
        crate::output::deregister_transit_gateway_multicast_group_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterInstanceEventNotificationAttributesOutput {
    /// <p>The resulting set of tag keys.</p>
    #[doc(hidden)]
    pub instance_tag_attribute: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
    _request_id: Option<String>,
}
impl DeregisterInstanceEventNotificationAttributesOutput {
    /// <p>The resulting set of tag keys.</p>
    pub fn instance_tag_attribute(
        &self,
    ) -> std::option::Option<&crate::model::InstanceTagNotificationAttribute> {
        self.instance_tag_attribute.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeregisterInstanceEventNotificationAttributesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput).
pub mod deregister_instance_event_notification_attributes_output {

    /// A builder for [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_tag_attribute:
            std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The resulting set of tag keys.</p>
        pub fn instance_tag_attribute(
            mut self,
            input: crate::model::InstanceTagNotificationAttribute,
        ) -> Self {
            self.instance_tag_attribute = Some(input);
            self
        }
        /// <p>The resulting set of tag keys.</p>
        pub fn set_instance_tag_attribute(
            mut self,
            input: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        ) -> Self {
            self.instance_tag_attribute = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput).
        pub fn build(self) -> crate::output::DeregisterInstanceEventNotificationAttributesOutput {
            crate::output::DeregisterInstanceEventNotificationAttributesOutput {
                instance_tag_attribute: self.instance_tag_attribute,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeregisterInstanceEventNotificationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput).
    pub fn builder(
    ) -> crate::output::deregister_instance_event_notification_attributes_output::Builder {
        crate::output::deregister_instance_event_notification_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterImageOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeregisterImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeregisterImageOutput`](crate::output::DeregisterImageOutput).
pub mod deregister_image_output {

    /// A builder for [`DeregisterImageOutput`](crate::output::DeregisterImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterImageOutput`](crate::output::DeregisterImageOutput).
        pub fn build(self) -> crate::output::DeregisterImageOutput {
            crate::output::DeregisterImageOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeregisterImageOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterImageOutput`](crate::output::DeregisterImageOutput).
    pub fn builder() -> crate::output::deregister_image_output::Builder {
        crate::output::deregister_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeprovisionPublicIpv4PoolCidrOutput {
    /// <p>The ID of the pool that you deprovisioned the CIDR from.</p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    /// <p>The deprovisioned CIDRs.</p>
    #[doc(hidden)]
    pub deprovisioned_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DeprovisionPublicIpv4PoolCidrOutput {
    /// <p>The ID of the pool that you deprovisioned the CIDR from.</p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>The deprovisioned CIDRs.</p>
    pub fn deprovisioned_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.deprovisioned_addresses.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeprovisionPublicIpv4PoolCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeprovisionPublicIpv4PoolCidrOutput`](crate::output::DeprovisionPublicIpv4PoolCidrOutput).
pub mod deprovision_public_ipv4_pool_cidr_output {

    /// A builder for [`DeprovisionPublicIpv4PoolCidrOutput`](crate::output::DeprovisionPublicIpv4PoolCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pool_id: std::option::Option<std::string::String>,
        pub(crate) deprovisioned_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the pool that you deprovisioned the CIDR from.</p>
        pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.pool_id = Some(input.into());
            self
        }
        /// <p>The ID of the pool that you deprovisioned the CIDR from.</p>
        pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.pool_id = input;
            self
        }
        /// Appends an item to `deprovisioned_addresses`.
        ///
        /// To override the contents of this collection use [`set_deprovisioned_addresses`](Self::set_deprovisioned_addresses).
        ///
        /// <p>The deprovisioned CIDRs.</p>
        pub fn deprovisioned_addresses(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.deprovisioned_addresses.unwrap_or_default();
            v.push(input.into());
            self.deprovisioned_addresses = Some(v);
            self
        }
        /// <p>The deprovisioned CIDRs.</p>
        pub fn set_deprovisioned_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.deprovisioned_addresses = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeprovisionPublicIpv4PoolCidrOutput`](crate::output::DeprovisionPublicIpv4PoolCidrOutput).
        pub fn build(self) -> crate::output::DeprovisionPublicIpv4PoolCidrOutput {
            crate::output::DeprovisionPublicIpv4PoolCidrOutput {
                pool_id: self.pool_id,
                deprovisioned_addresses: self.deprovisioned_addresses,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeprovisionPublicIpv4PoolCidrOutput {
    /// Creates a new builder-style object to manufacture [`DeprovisionPublicIpv4PoolCidrOutput`](crate::output::DeprovisionPublicIpv4PoolCidrOutput).
    pub fn builder() -> crate::output::deprovision_public_ipv4_pool_cidr_output::Builder {
        crate::output::deprovision_public_ipv4_pool_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeprovisionIpamPoolCidrOutput {
    /// <p>The deprovisioned pool CIDR.</p>
    #[doc(hidden)]
    pub ipam_pool_cidr: std::option::Option<crate::model::IpamPoolCidr>,
    _request_id: Option<String>,
}
impl DeprovisionIpamPoolCidrOutput {
    /// <p>The deprovisioned pool CIDR.</p>
    pub fn ipam_pool_cidr(&self) -> std::option::Option<&crate::model::IpamPoolCidr> {
        self.ipam_pool_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeprovisionIpamPoolCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeprovisionIpamPoolCidrOutput`](crate::output::DeprovisionIpamPoolCidrOutput).
pub mod deprovision_ipam_pool_cidr_output {

    /// A builder for [`DeprovisionIpamPoolCidrOutput`](crate::output::DeprovisionIpamPoolCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool_cidr: std::option::Option<crate::model::IpamPoolCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The deprovisioned pool CIDR.</p>
        pub fn ipam_pool_cidr(mut self, input: crate::model::IpamPoolCidr) -> Self {
            self.ipam_pool_cidr = Some(input);
            self
        }
        /// <p>The deprovisioned pool CIDR.</p>
        pub fn set_ipam_pool_cidr(
            mut self,
            input: std::option::Option<crate::model::IpamPoolCidr>,
        ) -> Self {
            self.ipam_pool_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeprovisionIpamPoolCidrOutput`](crate::output::DeprovisionIpamPoolCidrOutput).
        pub fn build(self) -> crate::output::DeprovisionIpamPoolCidrOutput {
            crate::output::DeprovisionIpamPoolCidrOutput {
                ipam_pool_cidr: self.ipam_pool_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeprovisionIpamPoolCidrOutput {
    /// Creates a new builder-style object to manufacture [`DeprovisionIpamPoolCidrOutput`](crate::output::DeprovisionIpamPoolCidrOutput).
    pub fn builder() -> crate::output::deprovision_ipam_pool_cidr_output::Builder {
        crate::output::deprovision_ipam_pool_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeprovisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    #[doc(hidden)]
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    _request_id: Option<String>,
}
impl DeprovisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeprovisionByoipCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput).
pub mod deprovision_byoip_cidr_output {

    /// A builder for [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address range.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput).
        pub fn build(self) -> crate::output::DeprovisionByoipCidrOutput {
            crate::output::DeprovisionByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeprovisionByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput).
    pub fn builder() -> crate::output::deprovision_byoip_cidr_output::Builder {
        crate::output::deprovision_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpnGatewayOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVpnGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput).
pub mod delete_vpn_gateway_output {

    /// A builder for [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput).
        pub fn build(self) -> crate::output::DeleteVpnGatewayOutput {
            crate::output::DeleteVpnGatewayOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput).
    pub fn builder() -> crate::output::delete_vpn_gateway_output::Builder {
        crate::output::delete_vpn_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpnConnectionRouteOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVpnConnectionRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput).
pub mod delete_vpn_connection_route_output {

    /// A builder for [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput).
        pub fn build(self) -> crate::output::DeleteVpnConnectionRouteOutput {
            crate::output::DeleteVpnConnectionRouteOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpnConnectionRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput).
    pub fn builder() -> crate::output::delete_vpn_connection_route_output::Builder {
        crate::output::delete_vpn_connection_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpnConnectionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVpnConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput).
pub mod delete_vpn_connection_output {

    /// A builder for [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput).
        pub fn build(self) -> crate::output::DeleteVpnConnectionOutput {
            crate::output::DeleteVpnConnectionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpnConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput).
    pub fn builder() -> crate::output::delete_vpn_connection_output::Builder {
        crate::output::delete_vpn_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcPeeringConnectionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeleteVpcPeeringConnectionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DeleteVpcPeeringConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput).
pub mod delete_vpc_peering_connection_output {

    /// A builder for [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput).
        pub fn build(self) -> crate::output::DeleteVpcPeeringConnectionOutput {
            crate::output::DeleteVpcPeeringConnectionOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput).
    pub fn builder() -> crate::output::delete_vpc_peering_connection_output::Builder {
        crate::output::delete_vpc_peering_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcEndpointServiceConfigurationsOutput {
    /// <p>Information about the service configurations that were not deleted, if applicable.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl DeleteVpcEndpointServiceConfigurationsOutput {
    /// <p>Information about the service configurations that were not deleted, if applicable.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteVpcEndpointServiceConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput).
pub mod delete_vpc_endpoint_service_configurations_output {

    /// A builder for [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the service configurations that were not deleted, if applicable.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the service configurations that were not deleted, if applicable.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput).
        pub fn build(self) -> crate::output::DeleteVpcEndpointServiceConfigurationsOutput {
            crate::output::DeleteVpcEndpointServiceConfigurationsOutput {
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpcEndpointServiceConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput).
    pub fn builder() -> crate::output::delete_vpc_endpoint_service_configurations_output::Builder {
        crate::output::delete_vpc_endpoint_service_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcEndpointsOutput {
    /// <p>Information about the VPC endpoints that were not successfully deleted.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl DeleteVpcEndpointsOutput {
    /// <p>Information about the VPC endpoints that were not successfully deleted.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteVpcEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput).
pub mod delete_vpc_endpoints_output {

    /// A builder for [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the VPC endpoints that were not successfully deleted.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the VPC endpoints that were not successfully deleted.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput).
        pub fn build(self) -> crate::output::DeleteVpcEndpointsOutput {
            crate::output::DeleteVpcEndpointsOutput {
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpcEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput).
    pub fn builder() -> crate::output::delete_vpc_endpoints_output::Builder {
        crate::output::delete_vpc_endpoints_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcEndpointConnectionNotificationsOutput {
    /// <p>Information about the notifications that could not be deleted successfully.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl DeleteVpcEndpointConnectionNotificationsOutput {
    /// <p>Information about the notifications that could not be deleted successfully.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteVpcEndpointConnectionNotificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput).
pub mod delete_vpc_endpoint_connection_notifications_output {

    /// A builder for [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the notifications that could not be deleted successfully.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the notifications that could not be deleted successfully.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput).
        pub fn build(self) -> crate::output::DeleteVpcEndpointConnectionNotificationsOutput {
            crate::output::DeleteVpcEndpointConnectionNotificationsOutput {
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpcEndpointConnectionNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput).
    pub fn builder() -> crate::output::delete_vpc_endpoint_connection_notifications_output::Builder
    {
        crate::output::delete_vpc_endpoint_connection_notifications_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVpcOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVpcOutput`](crate::output::DeleteVpcOutput).
pub mod delete_vpc_output {

    /// A builder for [`DeleteVpcOutput`](crate::output::DeleteVpcOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcOutput`](crate::output::DeleteVpcOutput).
        pub fn build(self) -> crate::output::DeleteVpcOutput {
            crate::output::DeleteVpcOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVpcOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcOutput`](crate::output::DeleteVpcOutput).
    pub fn builder() -> crate::output::delete_vpc_output::Builder {
        crate::output::delete_vpc_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVolumeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput).
pub mod delete_volume_output {

    /// A builder for [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput).
        pub fn build(self) -> crate::output::DeleteVolumeOutput {
            crate::output::DeleteVolumeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVolumeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput).
    pub fn builder() -> crate::output::delete_volume_output::Builder {
        crate::output::delete_volume_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub verified_access_trust_provider:
        std::option::Option<crate::model::VerifiedAccessTrustProvider>,
    _request_id: Option<String>,
}
impl DeleteVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    pub fn verified_access_trust_provider(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessTrustProvider> {
        self.verified_access_trust_provider.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVerifiedAccessTrustProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVerifiedAccessTrustProviderOutput`](crate::output::DeleteVerifiedAccessTrustProviderOutput).
pub mod delete_verified_access_trust_provider_output {

    /// A builder for [`DeleteVerifiedAccessTrustProviderOutput`](crate::output::DeleteVerifiedAccessTrustProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_trust_provider:
            std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn verified_access_trust_provider(
            mut self,
            input: crate::model::VerifiedAccessTrustProvider,
        ) -> Self {
            self.verified_access_trust_provider = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn set_verified_access_trust_provider(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        ) -> Self {
            self.verified_access_trust_provider = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVerifiedAccessTrustProviderOutput`](crate::output::DeleteVerifiedAccessTrustProviderOutput).
        pub fn build(self) -> crate::output::DeleteVerifiedAccessTrustProviderOutput {
            crate::output::DeleteVerifiedAccessTrustProviderOutput {
                verified_access_trust_provider: self.verified_access_trust_provider,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVerifiedAccessTrustProviderOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVerifiedAccessTrustProviderOutput`](crate::output::DeleteVerifiedAccessTrustProviderOutput).
    pub fn builder() -> crate::output::delete_verified_access_trust_provider_output::Builder {
        crate::output::delete_verified_access_trust_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVerifiedAccessInstanceOutput {
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    #[doc(hidden)]
    pub verified_access_instance: std::option::Option<crate::model::VerifiedAccessInstance>,
    _request_id: Option<String>,
}
impl DeleteVerifiedAccessInstanceOutput {
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessInstance> {
        self.verified_access_instance.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVerifiedAccessInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVerifiedAccessInstanceOutput`](crate::output::DeleteVerifiedAccessInstanceOutput).
pub mod delete_verified_access_instance_output {

    /// A builder for [`DeleteVerifiedAccessInstanceOutput`](crate::output::DeleteVerifiedAccessInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_instance:
            std::option::Option<crate::model::VerifiedAccessInstance>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn verified_access_instance(
            mut self,
            input: crate::model::VerifiedAccessInstance,
        ) -> Self {
            self.verified_access_instance = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn set_verified_access_instance(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessInstance>,
        ) -> Self {
            self.verified_access_instance = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVerifiedAccessInstanceOutput`](crate::output::DeleteVerifiedAccessInstanceOutput).
        pub fn build(self) -> crate::output::DeleteVerifiedAccessInstanceOutput {
            crate::output::DeleteVerifiedAccessInstanceOutput {
                verified_access_instance: self.verified_access_instance,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVerifiedAccessInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVerifiedAccessInstanceOutput`](crate::output::DeleteVerifiedAccessInstanceOutput).
    pub fn builder() -> crate::output::delete_verified_access_instance_output::Builder {
        crate::output::delete_verified_access_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVerifiedAccessGroupOutput {
    /// <p>The ID of the Amazon Web Services Verified Access group.</p>
    #[doc(hidden)]
    pub verified_access_group: std::option::Option<crate::model::VerifiedAccessGroup>,
    _request_id: Option<String>,
}
impl DeleteVerifiedAccessGroupOutput {
    /// <p>The ID of the Amazon Web Services Verified Access group.</p>
    pub fn verified_access_group(&self) -> std::option::Option<&crate::model::VerifiedAccessGroup> {
        self.verified_access_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVerifiedAccessGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVerifiedAccessGroupOutput`](crate::output::DeleteVerifiedAccessGroupOutput).
pub mod delete_verified_access_group_output {

    /// A builder for [`DeleteVerifiedAccessGroupOutput`](crate::output::DeleteVerifiedAccessGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_group: std::option::Option<crate::model::VerifiedAccessGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access group.</p>
        pub fn verified_access_group(mut self, input: crate::model::VerifiedAccessGroup) -> Self {
            self.verified_access_group = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access group.</p>
        pub fn set_verified_access_group(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessGroup>,
        ) -> Self {
            self.verified_access_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVerifiedAccessGroupOutput`](crate::output::DeleteVerifiedAccessGroupOutput).
        pub fn build(self) -> crate::output::DeleteVerifiedAccessGroupOutput {
            crate::output::DeleteVerifiedAccessGroupOutput {
                verified_access_group: self.verified_access_group,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVerifiedAccessGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVerifiedAccessGroupOutput`](crate::output::DeleteVerifiedAccessGroupOutput).
    pub fn builder() -> crate::output::delete_verified_access_group_output::Builder {
        crate::output::delete_verified_access_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVerifiedAccessEndpointOutput {
    /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
    #[doc(hidden)]
    pub verified_access_endpoint: std::option::Option<crate::model::VerifiedAccessEndpoint>,
    _request_id: Option<String>,
}
impl DeleteVerifiedAccessEndpointOutput {
    /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
    pub fn verified_access_endpoint(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessEndpoint> {
        self.verified_access_endpoint.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVerifiedAccessEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVerifiedAccessEndpointOutput`](crate::output::DeleteVerifiedAccessEndpointOutput).
pub mod delete_verified_access_endpoint_output {

    /// A builder for [`DeleteVerifiedAccessEndpointOutput`](crate::output::DeleteVerifiedAccessEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_endpoint:
            std::option::Option<crate::model::VerifiedAccessEndpoint>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
        pub fn verified_access_endpoint(
            mut self,
            input: crate::model::VerifiedAccessEndpoint,
        ) -> Self {
            self.verified_access_endpoint = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
        pub fn set_verified_access_endpoint(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessEndpoint>,
        ) -> Self {
            self.verified_access_endpoint = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVerifiedAccessEndpointOutput`](crate::output::DeleteVerifiedAccessEndpointOutput).
        pub fn build(self) -> crate::output::DeleteVerifiedAccessEndpointOutput {
            crate::output::DeleteVerifiedAccessEndpointOutput {
                verified_access_endpoint: self.verified_access_endpoint,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVerifiedAccessEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVerifiedAccessEndpointOutput`](crate::output::DeleteVerifiedAccessEndpointOutput).
    pub fn builder() -> crate::output::delete_verified_access_endpoint_output::Builder {
        crate::output::delete_verified_access_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the deleted VPC attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the deleted VPC attachment.</p>
    pub fn transit_gateway_vpc_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayVpcAttachment> {
        self.transit_gateway_vpc_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayVpcAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput).
pub mod delete_transit_gateway_vpc_attachment_output {

    /// A builder for [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted VPC attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            input: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(input);
            self
        }
        /// <p>Information about the deleted VPC attachment.</p>
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayVpcAttachmentOutput {
            crate::output::DeleteTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_vpc_attachment_output::Builder {
        crate::output::delete_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayRouteTableAnnouncementOutput {
    /// <p>Provides details about a deleted transit gateway route table.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table_announcement:
        std::option::Option<crate::model::TransitGatewayRouteTableAnnouncement>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayRouteTableAnnouncementOutput {
    /// <p>Provides details about a deleted transit gateway route table.</p>
    pub fn transit_gateway_route_table_announcement(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayRouteTableAnnouncement> {
        self.transit_gateway_route_table_announcement.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayRouteTableAnnouncementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayRouteTableAnnouncementOutput`](crate::output::DeleteTransitGatewayRouteTableAnnouncementOutput).
pub mod delete_transit_gateway_route_table_announcement_output {

    /// A builder for [`DeleteTransitGatewayRouteTableAnnouncementOutput`](crate::output::DeleteTransitGatewayRouteTableAnnouncementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table_announcement:
            std::option::Option<crate::model::TransitGatewayRouteTableAnnouncement>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides details about a deleted transit gateway route table.</p>
        pub fn transit_gateway_route_table_announcement(
            mut self,
            input: crate::model::TransitGatewayRouteTableAnnouncement,
        ) -> Self {
            self.transit_gateway_route_table_announcement = Some(input);
            self
        }
        /// <p>Provides details about a deleted transit gateway route table.</p>
        pub fn set_transit_gateway_route_table_announcement(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRouteTableAnnouncement>,
        ) -> Self {
            self.transit_gateway_route_table_announcement = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayRouteTableAnnouncementOutput`](crate::output::DeleteTransitGatewayRouteTableAnnouncementOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayRouteTableAnnouncementOutput {
            crate::output::DeleteTransitGatewayRouteTableAnnouncementOutput {
                transit_gateway_route_table_announcement: self
                    .transit_gateway_route_table_announcement,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayRouteTableAnnouncementOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteTableAnnouncementOutput`](crate::output::DeleteTransitGatewayRouteTableAnnouncementOutput).
    pub fn builder(
    ) -> crate::output::delete_transit_gateway_route_table_announcement_output::Builder {
        crate::output::delete_transit_gateway_route_table_announcement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayRouteTableOutput {
    /// <p>Information about the deleted transit gateway route table.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table: std::option::Option<crate::model::TransitGatewayRouteTable>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayRouteTableOutput {
    /// <p>Information about the deleted transit gateway route table.</p>
    pub fn transit_gateway_route_table(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayRouteTable> {
        self.transit_gateway_route_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput).
pub mod delete_transit_gateway_route_table_output {

    /// A builder for [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table:
            std::option::Option<crate::model::TransitGatewayRouteTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted transit gateway route table.</p>
        pub fn transit_gateway_route_table(
            mut self,
            input: crate::model::TransitGatewayRouteTable,
        ) -> Self {
            self.transit_gateway_route_table = Some(input);
            self
        }
        /// <p>Information about the deleted transit gateway route table.</p>
        pub fn set_transit_gateway_route_table(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRouteTable>,
        ) -> Self {
            self.transit_gateway_route_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayRouteTableOutput {
            crate::output::DeleteTransitGatewayRouteTableOutput {
                transit_gateway_route_table: self.transit_gateway_route_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_route_table_output::Builder {
        crate::output::delete_transit_gateway_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayRouteOutput {
    /// <p>Information about the route.</p>
    #[doc(hidden)]
    pub route: std::option::Option<crate::model::TransitGatewayRoute>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub fn route(&self) -> std::option::Option<&crate::model::TransitGatewayRoute> {
        self.route.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput).
pub mod delete_transit_gateway_route_output {

    /// A builder for [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::TransitGatewayRoute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, input: crate::model::TransitGatewayRoute) -> Self {
            self.route = Some(input);
            self
        }
        /// <p>Information about the route.</p>
        pub fn set_route(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRoute>,
        ) -> Self {
            self.route = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayRouteOutput {
            crate::output::DeleteTransitGatewayRouteOutput {
                route: self.route,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_route_output::Builder {
        crate::output::delete_transit_gateway_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the deleted prefix list reference.</p>
    #[doc(hidden)]
    pub transit_gateway_prefix_list_reference:
        std::option::Option<crate::model::TransitGatewayPrefixListReference>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the deleted prefix list reference.</p>
    pub fn transit_gateway_prefix_list_reference(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPrefixListReference> {
        self.transit_gateway_prefix_list_reference.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayPrefixListReferenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput).
pub mod delete_transit_gateway_prefix_list_reference_output {

    /// A builder for [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_reference:
            std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted prefix list reference.</p>
        pub fn transit_gateway_prefix_list_reference(
            mut self,
            input: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = Some(input);
            self
        }
        /// <p>Information about the deleted prefix list reference.</p>
        pub fn set_transit_gateway_prefix_list_reference(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayPrefixListReferenceOutput {
            crate::output::DeleteTransitGatewayPrefixListReferenceOutput {
                transit_gateway_prefix_list_reference: self.transit_gateway_prefix_list_reference,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayPrefixListReferenceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_prefix_list_reference_output::Builder
    {
        crate::output::delete_transit_gateway_prefix_list_reference_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayPolicyTableOutput {
    /// <p>Provides details about the deleted transit gateway policy table.</p>
    #[doc(hidden)]
    pub transit_gateway_policy_table: std::option::Option<crate::model::TransitGatewayPolicyTable>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayPolicyTableOutput {
    /// <p>Provides details about the deleted transit gateway policy table.</p>
    pub fn transit_gateway_policy_table(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPolicyTable> {
        self.transit_gateway_policy_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayPolicyTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayPolicyTableOutput`](crate::output::DeleteTransitGatewayPolicyTableOutput).
pub mod delete_transit_gateway_policy_table_output {

    /// A builder for [`DeleteTransitGatewayPolicyTableOutput`](crate::output::DeleteTransitGatewayPolicyTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_policy_table:
            std::option::Option<crate::model::TransitGatewayPolicyTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides details about the deleted transit gateway policy table.</p>
        pub fn transit_gateway_policy_table(
            mut self,
            input: crate::model::TransitGatewayPolicyTable,
        ) -> Self {
            self.transit_gateway_policy_table = Some(input);
            self
        }
        /// <p>Provides details about the deleted transit gateway policy table.</p>
        pub fn set_transit_gateway_policy_table(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPolicyTable>,
        ) -> Self {
            self.transit_gateway_policy_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayPolicyTableOutput`](crate::output::DeleteTransitGatewayPolicyTableOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayPolicyTableOutput {
            crate::output::DeleteTransitGatewayPolicyTableOutput {
                transit_gateway_policy_table: self.transit_gateway_policy_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayPolicyTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPolicyTableOutput`](crate::output::DeleteTransitGatewayPolicyTableOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_policy_table_output::Builder {
        crate::output::delete_transit_gateway_policy_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub fn transit_gateway_peering_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPeeringAttachment> {
        self.transit_gateway_peering_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayPeeringAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput).
pub mod delete_transit_gateway_peering_attachment_output {

    /// A builder for [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            input: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(input);
            self
        }
        /// <p>The transit gateway peering attachment.</p>
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayPeeringAttachmentOutput {
            crate::output::DeleteTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_peering_attachment_output::Builder {
        crate::output::delete_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayMulticastDomainOutput {
    /// <p>Information about the deleted transit gateway multicast domain.</p>
    #[doc(hidden)]
    pub transit_gateway_multicast_domain:
        std::option::Option<crate::model::TransitGatewayMulticastDomain>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayMulticastDomainOutput {
    /// <p>Information about the deleted transit gateway multicast domain.</p>
    pub fn transit_gateway_multicast_domain(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDomain> {
        self.transit_gateway_multicast_domain.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayMulticastDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput).
pub mod delete_transit_gateway_multicast_domain_output {

    /// A builder for [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_multicast_domain:
            std::option::Option<crate::model::TransitGatewayMulticastDomain>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted transit gateway multicast domain.</p>
        pub fn transit_gateway_multicast_domain(
            mut self,
            input: crate::model::TransitGatewayMulticastDomain,
        ) -> Self {
            self.transit_gateway_multicast_domain = Some(input);
            self
        }
        /// <p>Information about the deleted transit gateway multicast domain.</p>
        pub fn set_transit_gateway_multicast_domain(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastDomain>,
        ) -> Self {
            self.transit_gateway_multicast_domain = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayMulticastDomainOutput {
            crate::output::DeleteTransitGatewayMulticastDomainOutput {
                transit_gateway_multicast_domain: self.transit_gateway_multicast_domain,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_multicast_domain_output::Builder {
        crate::output::delete_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayConnectPeerOutput {
    /// <p>Information about the deleted Connect peer.</p>
    #[doc(hidden)]
    pub transit_gateway_connect_peer: std::option::Option<crate::model::TransitGatewayConnectPeer>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayConnectPeerOutput {
    /// <p>Information about the deleted Connect peer.</p>
    pub fn transit_gateway_connect_peer(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayConnectPeer> {
        self.transit_gateway_connect_peer.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayConnectPeerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput).
pub mod delete_transit_gateway_connect_peer_output {

    /// A builder for [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect_peer:
            std::option::Option<crate::model::TransitGatewayConnectPeer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted Connect peer.</p>
        pub fn transit_gateway_connect_peer(
            mut self,
            input: crate::model::TransitGatewayConnectPeer,
        ) -> Self {
            self.transit_gateway_connect_peer = Some(input);
            self
        }
        /// <p>Information about the deleted Connect peer.</p>
        pub fn set_transit_gateway_connect_peer(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayConnectPeer>,
        ) -> Self {
            self.transit_gateway_connect_peer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayConnectPeerOutput {
            crate::output::DeleteTransitGatewayConnectPeerOutput {
                transit_gateway_connect_peer: self.transit_gateway_connect_peer,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayConnectPeerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_connect_peer_output::Builder {
        crate::output::delete_transit_gateway_connect_peer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayConnectOutput {
    /// <p>Information about the deleted Connect attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_connect: std::option::Option<crate::model::TransitGatewayConnect>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayConnectOutput {
    /// <p>Information about the deleted Connect attachment.</p>
    pub fn transit_gateway_connect(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayConnect> {
        self.transit_gateway_connect.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayConnectOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput).
pub mod delete_transit_gateway_connect_output {

    /// A builder for [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect:
            std::option::Option<crate::model::TransitGatewayConnect>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted Connect attachment.</p>
        pub fn transit_gateway_connect(
            mut self,
            input: crate::model::TransitGatewayConnect,
        ) -> Self {
            self.transit_gateway_connect = Some(input);
            self
        }
        /// <p>Information about the deleted Connect attachment.</p>
        pub fn set_transit_gateway_connect(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayConnect>,
        ) -> Self {
            self.transit_gateway_connect = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayConnectOutput {
            crate::output::DeleteTransitGatewayConnectOutput {
                transit_gateway_connect: self.transit_gateway_connect,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayConnectOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_connect_output::Builder {
        crate::output::delete_transit_gateway_connect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTransitGatewayOutput {
    /// <p>Information about the deleted transit gateway.</p>
    #[doc(hidden)]
    pub transit_gateway: std::option::Option<crate::model::TransitGateway>,
    _request_id: Option<String>,
}
impl DeleteTransitGatewayOutput {
    /// <p>Information about the deleted transit gateway.</p>
    pub fn transit_gateway(&self) -> std::option::Option<&crate::model::TransitGateway> {
        self.transit_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteTransitGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput).
pub mod delete_transit_gateway_output {

    /// A builder for [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway: std::option::Option<crate::model::TransitGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted transit gateway.</p>
        pub fn transit_gateway(mut self, input: crate::model::TransitGateway) -> Self {
            self.transit_gateway = Some(input);
            self
        }
        /// <p>Information about the deleted transit gateway.</p>
        pub fn set_transit_gateway(
            mut self,
            input: std::option::Option<crate::model::TransitGateway>,
        ) -> Self {
            self.transit_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput).
        pub fn build(self) -> crate::output::DeleteTransitGatewayOutput {
            crate::output::DeleteTransitGatewayOutput {
                transit_gateway: self.transit_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTransitGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput).
    pub fn builder() -> crate::output::delete_transit_gateway_output::Builder {
        crate::output::delete_transit_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTrafficMirrorTargetOutput {
    /// <p>The ID of the deleted Traffic Mirror target.</p>
    #[doc(hidden)]
    pub traffic_mirror_target_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteTrafficMirrorTargetOutput {
    /// <p>The ID of the deleted Traffic Mirror target.</p>
    pub fn traffic_mirror_target_id(&self) -> std::option::Option<&str> {
        self.traffic_mirror_target_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteTrafficMirrorTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput).
pub mod delete_traffic_mirror_target_output {

    /// A builder for [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_target_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the deleted Traffic Mirror target.</p>
        pub fn traffic_mirror_target_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.traffic_mirror_target_id = Some(input.into());
            self
        }
        /// <p>The ID of the deleted Traffic Mirror target.</p>
        pub fn set_traffic_mirror_target_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_target_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput).
        pub fn build(self) -> crate::output::DeleteTrafficMirrorTargetOutput {
            crate::output::DeleteTrafficMirrorTargetOutput {
                traffic_mirror_target_id: self.traffic_mirror_target_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTrafficMirrorTargetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput).
    pub fn builder() -> crate::output::delete_traffic_mirror_target_output::Builder {
        crate::output::delete_traffic_mirror_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTrafficMirrorSessionOutput {
    /// <p>The ID of the deleted Traffic Mirror session.</p>
    #[doc(hidden)]
    pub traffic_mirror_session_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteTrafficMirrorSessionOutput {
    /// <p>The ID of the deleted Traffic Mirror session.</p>
    pub fn traffic_mirror_session_id(&self) -> std::option::Option<&str> {
        self.traffic_mirror_session_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteTrafficMirrorSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput).
pub mod delete_traffic_mirror_session_output {

    /// A builder for [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_session_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the deleted Traffic Mirror session.</p>
        pub fn traffic_mirror_session_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.traffic_mirror_session_id = Some(input.into());
            self
        }
        /// <p>The ID of the deleted Traffic Mirror session.</p>
        pub fn set_traffic_mirror_session_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_session_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput).
        pub fn build(self) -> crate::output::DeleteTrafficMirrorSessionOutput {
            crate::output::DeleteTrafficMirrorSessionOutput {
                traffic_mirror_session_id: self.traffic_mirror_session_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTrafficMirrorSessionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput).
    pub fn builder() -> crate::output::delete_traffic_mirror_session_output::Builder {
        crate::output::delete_traffic_mirror_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTrafficMirrorFilterRuleOutput {
    /// <p>The ID of the deleted Traffic Mirror rule.</p>
    #[doc(hidden)]
    pub traffic_mirror_filter_rule_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteTrafficMirrorFilterRuleOutput {
    /// <p>The ID of the deleted Traffic Mirror rule.</p>
    pub fn traffic_mirror_filter_rule_id(&self) -> std::option::Option<&str> {
        self.traffic_mirror_filter_rule_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteTrafficMirrorFilterRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput).
pub mod delete_traffic_mirror_filter_rule_output {

    /// A builder for [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_rule_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the deleted Traffic Mirror rule.</p>
        pub fn traffic_mirror_filter_rule_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.traffic_mirror_filter_rule_id = Some(input.into());
            self
        }
        /// <p>The ID of the deleted Traffic Mirror rule.</p>
        pub fn set_traffic_mirror_filter_rule_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_filter_rule_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput).
        pub fn build(self) -> crate::output::DeleteTrafficMirrorFilterRuleOutput {
            crate::output::DeleteTrafficMirrorFilterRuleOutput {
                traffic_mirror_filter_rule_id: self.traffic_mirror_filter_rule_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTrafficMirrorFilterRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput).
    pub fn builder() -> crate::output::delete_traffic_mirror_filter_rule_output::Builder {
        crate::output::delete_traffic_mirror_filter_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTrafficMirrorFilterOutput {
    /// <p>The ID of the Traffic Mirror filter.</p>
    #[doc(hidden)]
    pub traffic_mirror_filter_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteTrafficMirrorFilterOutput {
    /// <p>The ID of the Traffic Mirror filter.</p>
    pub fn traffic_mirror_filter_id(&self) -> std::option::Option<&str> {
        self.traffic_mirror_filter_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteTrafficMirrorFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput).
pub mod delete_traffic_mirror_filter_output {

    /// A builder for [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Traffic Mirror filter.</p>
        pub fn traffic_mirror_filter_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.traffic_mirror_filter_id = Some(input.into());
            self
        }
        /// <p>The ID of the Traffic Mirror filter.</p>
        pub fn set_traffic_mirror_filter_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_filter_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput).
        pub fn build(self) -> crate::output::DeleteTrafficMirrorFilterOutput {
            crate::output::DeleteTrafficMirrorFilterOutput {
                traffic_mirror_filter_id: self.traffic_mirror_filter_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTrafficMirrorFilterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput).
    pub fn builder() -> crate::output::delete_traffic_mirror_filter_output::Builder {
        crate::output::delete_traffic_mirror_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTagsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
pub mod delete_tags_output {

    /// A builder for [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
        pub fn build(self) -> crate::output::DeleteTagsOutput {
            crate::output::DeleteTagsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTagsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
    pub fn builder() -> crate::output::delete_tags_output::Builder {
        crate::output::delete_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSubnetCidrReservationOutput {
    /// <p>Information about the deleted subnet CIDR reservation.</p>
    #[doc(hidden)]
    pub deleted_subnet_cidr_reservation: std::option::Option<crate::model::SubnetCidrReservation>,
    _request_id: Option<String>,
}
impl DeleteSubnetCidrReservationOutput {
    /// <p>Information about the deleted subnet CIDR reservation.</p>
    pub fn deleted_subnet_cidr_reservation(
        &self,
    ) -> std::option::Option<&crate::model::SubnetCidrReservation> {
        self.deleted_subnet_cidr_reservation.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteSubnetCidrReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSubnetCidrReservationOutput`](crate::output::DeleteSubnetCidrReservationOutput).
pub mod delete_subnet_cidr_reservation_output {

    /// A builder for [`DeleteSubnetCidrReservationOutput`](crate::output::DeleteSubnetCidrReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) deleted_subnet_cidr_reservation:
            std::option::Option<crate::model::SubnetCidrReservation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the deleted subnet CIDR reservation.</p>
        pub fn deleted_subnet_cidr_reservation(
            mut self,
            input: crate::model::SubnetCidrReservation,
        ) -> Self {
            self.deleted_subnet_cidr_reservation = Some(input);
            self
        }
        /// <p>Information about the deleted subnet CIDR reservation.</p>
        pub fn set_deleted_subnet_cidr_reservation(
            mut self,
            input: std::option::Option<crate::model::SubnetCidrReservation>,
        ) -> Self {
            self.deleted_subnet_cidr_reservation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSubnetCidrReservationOutput`](crate::output::DeleteSubnetCidrReservationOutput).
        pub fn build(self) -> crate::output::DeleteSubnetCidrReservationOutput {
            crate::output::DeleteSubnetCidrReservationOutput {
                deleted_subnet_cidr_reservation: self.deleted_subnet_cidr_reservation,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSubnetCidrReservationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSubnetCidrReservationOutput`](crate::output::DeleteSubnetCidrReservationOutput).
    pub fn builder() -> crate::output::delete_subnet_cidr_reservation_output::Builder {
        crate::output::delete_subnet_cidr_reservation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSubnetOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSubnetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput).
pub mod delete_subnet_output {

    /// A builder for [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput).
        pub fn build(self) -> crate::output::DeleteSubnetOutput {
            crate::output::DeleteSubnetOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSubnetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput).
    pub fn builder() -> crate::output::delete_subnet_output::Builder {
        crate::output::delete_subnet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSpotDatafeedSubscriptionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSpotDatafeedSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput).
pub mod delete_spot_datafeed_subscription_output {

    /// A builder for [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput).
        pub fn build(self) -> crate::output::DeleteSpotDatafeedSubscriptionOutput {
            crate::output::DeleteSpotDatafeedSubscriptionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSpotDatafeedSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput).
    pub fn builder() -> crate::output::delete_spot_datafeed_subscription_output::Builder {
        crate::output::delete_spot_datafeed_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSnapshotOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput).
pub mod delete_snapshot_output {

    /// A builder for [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput).
        pub fn build(self) -> crate::output::DeleteSnapshotOutput {
            crate::output::DeleteSnapshotOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput).
    pub fn builder() -> crate::output::delete_snapshot_output::Builder {
        crate::output::delete_snapshot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSecurityGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSecurityGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput).
pub mod delete_security_group_output {

    /// A builder for [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput).
        pub fn build(self) -> crate::output::DeleteSecurityGroupOutput {
            crate::output::DeleteSecurityGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteSecurityGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput).
    pub fn builder() -> crate::output::delete_security_group_output::Builder {
        crate::output::delete_security_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRouteTableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput).
pub mod delete_route_table_output {

    /// A builder for [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput).
        pub fn build(self) -> crate::output::DeleteRouteTableOutput {
            crate::output::DeleteRouteTableOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput).
    pub fn builder() -> crate::output::delete_route_table_output::Builder {
        crate::output::delete_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRouteOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteRouteOutput`](crate::output::DeleteRouteOutput).
pub mod delete_route_output {

    /// A builder for [`DeleteRouteOutput`](crate::output::DeleteRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteRouteOutput`](crate::output::DeleteRouteOutput).
        pub fn build(self) -> crate::output::DeleteRouteOutput {
            crate::output::DeleteRouteOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRouteOutput`](crate::output::DeleteRouteOutput).
    pub fn builder() -> crate::output::delete_route_output::Builder {
        crate::output::delete_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteQueuedReservedInstancesOutput {
    /// <p>Information about the queued purchases that were successfully deleted.</p>
    #[doc(hidden)]
    pub successful_queued_purchase_deletions:
        std::option::Option<std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>>,
    /// <p>Information about the queued purchases that could not be deleted.</p>
    #[doc(hidden)]
    pub failed_queued_purchase_deletions:
        std::option::Option<std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>>,
    _request_id: Option<String>,
}
impl DeleteQueuedReservedInstancesOutput {
    /// <p>Information about the queued purchases that were successfully deleted.</p>
    pub fn successful_queued_purchase_deletions(
        &self,
    ) -> std::option::Option<&[crate::model::SuccessfulQueuedPurchaseDeletion]> {
        self.successful_queued_purchase_deletions.as_deref()
    }
    /// <p>Information about the queued purchases that could not be deleted.</p>
    pub fn failed_queued_purchase_deletions(
        &self,
    ) -> std::option::Option<&[crate::model::FailedQueuedPurchaseDeletion]> {
        self.failed_queued_purchase_deletions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteQueuedReservedInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput).
pub mod delete_queued_reserved_instances_output {

    /// A builder for [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_queued_purchase_deletions:
            std::option::Option<std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>>,
        pub(crate) failed_queued_purchase_deletions:
            std::option::Option<std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful_queued_purchase_deletions`.
        ///
        /// To override the contents of this collection use [`set_successful_queued_purchase_deletions`](Self::set_successful_queued_purchase_deletions).
        ///
        /// <p>Information about the queued purchases that were successfully deleted.</p>
        pub fn successful_queued_purchase_deletions(
            mut self,
            input: crate::model::SuccessfulQueuedPurchaseDeletion,
        ) -> Self {
            let mut v = self
                .successful_queued_purchase_deletions
                .unwrap_or_default();
            v.push(input);
            self.successful_queued_purchase_deletions = Some(v);
            self
        }
        /// <p>Information about the queued purchases that were successfully deleted.</p>
        pub fn set_successful_queued_purchase_deletions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>,
            >,
        ) -> Self {
            self.successful_queued_purchase_deletions = input;
            self
        }
        /// Appends an item to `failed_queued_purchase_deletions`.
        ///
        /// To override the contents of this collection use [`set_failed_queued_purchase_deletions`](Self::set_failed_queued_purchase_deletions).
        ///
        /// <p>Information about the queued purchases that could not be deleted.</p>
        pub fn failed_queued_purchase_deletions(
            mut self,
            input: crate::model::FailedQueuedPurchaseDeletion,
        ) -> Self {
            let mut v = self.failed_queued_purchase_deletions.unwrap_or_default();
            v.push(input);
            self.failed_queued_purchase_deletions = Some(v);
            self
        }
        /// <p>Information about the queued purchases that could not be deleted.</p>
        pub fn set_failed_queued_purchase_deletions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>>,
        ) -> Self {
            self.failed_queued_purchase_deletions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput).
        pub fn build(self) -> crate::output::DeleteQueuedReservedInstancesOutput {
            crate::output::DeleteQueuedReservedInstancesOutput {
                successful_queued_purchase_deletions: self.successful_queued_purchase_deletions,
                failed_queued_purchase_deletions: self.failed_queued_purchase_deletions,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteQueuedReservedInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput).
    pub fn builder() -> crate::output::delete_queued_reserved_instances_output::Builder {
        crate::output::delete_queued_reserved_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePublicIpv4PoolOutput {
    /// <p>Information about the result of deleting the public IPv4 pool.</p>
    #[doc(hidden)]
    pub return_value: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeletePublicIpv4PoolOutput {
    /// <p>Information about the result of deleting the public IPv4 pool.</p>
    pub fn return_value(&self) -> std::option::Option<bool> {
        self.return_value
    }
}
impl aws_http::request_id::RequestId for DeletePublicIpv4PoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeletePublicIpv4PoolOutput`](crate::output::DeletePublicIpv4PoolOutput).
pub mod delete_public_ipv4_pool_output {

    /// A builder for [`DeletePublicIpv4PoolOutput`](crate::output::DeletePublicIpv4PoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the result of deleting the public IPv4 pool.</p>
        pub fn return_value(mut self, input: bool) -> Self {
            self.return_value = Some(input);
            self
        }
        /// <p>Information about the result of deleting the public IPv4 pool.</p>
        pub fn set_return_value(mut self, input: std::option::Option<bool>) -> Self {
            self.return_value = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePublicIpv4PoolOutput`](crate::output::DeletePublicIpv4PoolOutput).
        pub fn build(self) -> crate::output::DeletePublicIpv4PoolOutput {
            crate::output::DeletePublicIpv4PoolOutput {
                return_value: self.return_value,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeletePublicIpv4PoolOutput {
    /// Creates a new builder-style object to manufacture [`DeletePublicIpv4PoolOutput`](crate::output::DeletePublicIpv4PoolOutput).
    pub fn builder() -> crate::output::delete_public_ipv4_pool_output::Builder {
        crate::output::delete_public_ipv4_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePlacementGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeletePlacementGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput).
pub mod delete_placement_group_output {

    /// A builder for [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput).
        pub fn build(self) -> crate::output::DeletePlacementGroupOutput {
            crate::output::DeletePlacementGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeletePlacementGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput).
    pub fn builder() -> crate::output::delete_placement_group_output::Builder {
        crate::output::delete_placement_group_output::Builder::default()
    }
}

/// <p>Contains the output for DeleteNetworkInterfacePermission.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkInterfacePermissionOutput {
    /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeleteNetworkInterfacePermissionOutput {
    /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DeleteNetworkInterfacePermissionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput).
pub mod delete_network_interface_permission_output {

    /// A builder for [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput).
        pub fn build(self) -> crate::output::DeleteNetworkInterfacePermissionOutput {
            crate::output::DeleteNetworkInterfacePermissionOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkInterfacePermissionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput).
    pub fn builder() -> crate::output::delete_network_interface_permission_output::Builder {
        crate::output::delete_network_interface_permission_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkInterfaceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteNetworkInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput).
pub mod delete_network_interface_output {

    /// A builder for [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput).
        pub fn build(self) -> crate::output::DeleteNetworkInterfaceOutput {
            crate::output::DeleteNetworkInterfaceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput).
    pub fn builder() -> crate::output::delete_network_interface_output::Builder {
        crate::output::delete_network_interface_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkInsightsPathOutput {
    /// <p>The ID of the path.</p>
    #[doc(hidden)]
    pub network_insights_path_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteNetworkInsightsPathOutput {
    /// <p>The ID of the path.</p>
    pub fn network_insights_path_id(&self) -> std::option::Option<&str> {
        self.network_insights_path_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteNetworkInsightsPathOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput).
pub mod delete_network_insights_path_output {

    /// A builder for [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_path_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the path.</p>
        pub fn network_insights_path_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_insights_path_id = Some(input.into());
            self
        }
        /// <p>The ID of the path.</p>
        pub fn set_network_insights_path_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_path_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput).
        pub fn build(self) -> crate::output::DeleteNetworkInsightsPathOutput {
            crate::output::DeleteNetworkInsightsPathOutput {
                network_insights_path_id: self.network_insights_path_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkInsightsPathOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput).
    pub fn builder() -> crate::output::delete_network_insights_path_output::Builder {
        crate::output::delete_network_insights_path_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkInsightsAnalysisOutput {
    /// <p>The ID of the network insights analysis.</p>
    #[doc(hidden)]
    pub network_insights_analysis_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteNetworkInsightsAnalysisOutput {
    /// <p>The ID of the network insights analysis.</p>
    pub fn network_insights_analysis_id(&self) -> std::option::Option<&str> {
        self.network_insights_analysis_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteNetworkInsightsAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput).
pub mod delete_network_insights_analysis_output {

    /// A builder for [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_analysis_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the network insights analysis.</p>
        pub fn network_insights_analysis_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.network_insights_analysis_id = Some(input.into());
            self
        }
        /// <p>The ID of the network insights analysis.</p>
        pub fn set_network_insights_analysis_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_analysis_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput).
        pub fn build(self) -> crate::output::DeleteNetworkInsightsAnalysisOutput {
            crate::output::DeleteNetworkInsightsAnalysisOutput {
                network_insights_analysis_id: self.network_insights_analysis_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkInsightsAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput).
    pub fn builder() -> crate::output::delete_network_insights_analysis_output::Builder {
        crate::output::delete_network_insights_analysis_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkInsightsAccessScopeAnalysisOutput {
    /// <p>The ID of the Network Access Scope analysis.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_analysis_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteNetworkInsightsAccessScopeAnalysisOutput {
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub fn network_insights_access_scope_analysis_id(&self) -> std::option::Option<&str> {
        self.network_insights_access_scope_analysis_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteNetworkInsightsAccessScopeAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkInsightsAccessScopeAnalysisOutput`](crate::output::DeleteNetworkInsightsAccessScopeAnalysisOutput).
pub mod delete_network_insights_access_scope_analysis_output {

    /// A builder for [`DeleteNetworkInsightsAccessScopeAnalysisOutput`](crate::output::DeleteNetworkInsightsAccessScopeAnalysisOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope_analysis_id:
            std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Network Access Scope analysis.</p>
        pub fn network_insights_access_scope_analysis_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.network_insights_access_scope_analysis_id = Some(input.into());
            self
        }
        /// <p>The ID of the Network Access Scope analysis.</p>
        pub fn set_network_insights_access_scope_analysis_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_access_scope_analysis_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInsightsAccessScopeAnalysisOutput`](crate::output::DeleteNetworkInsightsAccessScopeAnalysisOutput).
        pub fn build(self) -> crate::output::DeleteNetworkInsightsAccessScopeAnalysisOutput {
            crate::output::DeleteNetworkInsightsAccessScopeAnalysisOutput {
                network_insights_access_scope_analysis_id: self
                    .network_insights_access_scope_analysis_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkInsightsAccessScopeAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsAccessScopeAnalysisOutput`](crate::output::DeleteNetworkInsightsAccessScopeAnalysisOutput).
    pub fn builder() -> crate::output::delete_network_insights_access_scope_analysis_output::Builder
    {
        crate::output::delete_network_insights_access_scope_analysis_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkInsightsAccessScopeOutput {
    /// <p>The ID of the Network Access Scope.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteNetworkInsightsAccessScopeOutput {
    /// <p>The ID of the Network Access Scope.</p>
    pub fn network_insights_access_scope_id(&self) -> std::option::Option<&str> {
        self.network_insights_access_scope_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteNetworkInsightsAccessScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkInsightsAccessScopeOutput`](crate::output::DeleteNetworkInsightsAccessScopeOutput).
pub mod delete_network_insights_access_scope_output {

    /// A builder for [`DeleteNetworkInsightsAccessScopeOutput`](crate::output::DeleteNetworkInsightsAccessScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Network Access Scope.</p>
        pub fn network_insights_access_scope_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.network_insights_access_scope_id = Some(input.into());
            self
        }
        /// <p>The ID of the Network Access Scope.</p>
        pub fn set_network_insights_access_scope_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_access_scope_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInsightsAccessScopeOutput`](crate::output::DeleteNetworkInsightsAccessScopeOutput).
        pub fn build(self) -> crate::output::DeleteNetworkInsightsAccessScopeOutput {
            crate::output::DeleteNetworkInsightsAccessScopeOutput {
                network_insights_access_scope_id: self.network_insights_access_scope_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkInsightsAccessScopeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsAccessScopeOutput`](crate::output::DeleteNetworkInsightsAccessScopeOutput).
    pub fn builder() -> crate::output::delete_network_insights_access_scope_output::Builder {
        crate::output::delete_network_insights_access_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkAclEntryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteNetworkAclEntryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput).
pub mod delete_network_acl_entry_output {

    /// A builder for [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput).
        pub fn build(self) -> crate::output::DeleteNetworkAclEntryOutput {
            crate::output::DeleteNetworkAclEntryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkAclEntryOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput).
    pub fn builder() -> crate::output::delete_network_acl_entry_output::Builder {
        crate::output::delete_network_acl_entry_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNetworkAclOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteNetworkAclOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput).
pub mod delete_network_acl_output {

    /// A builder for [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput).
        pub fn build(self) -> crate::output::DeleteNetworkAclOutput {
            crate::output::DeleteNetworkAclOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNetworkAclOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput).
    pub fn builder() -> crate::output::delete_network_acl_output::Builder {
        crate::output::delete_network_acl_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNatGatewayOutput {
    /// <p>The ID of the NAT gateway.</p>
    #[doc(hidden)]
    pub nat_gateway_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteNatGatewayOutput {
    /// <p>The ID of the NAT gateway.</p>
    pub fn nat_gateway_id(&self) -> std::option::Option<&str> {
        self.nat_gateway_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteNatGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput).
pub mod delete_nat_gateway_output {

    /// A builder for [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) nat_gateway_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the NAT gateway.</p>
        pub fn nat_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.nat_gateway_id = Some(input.into());
            self
        }
        /// <p>The ID of the NAT gateway.</p>
        pub fn set_nat_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.nat_gateway_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput).
        pub fn build(self) -> crate::output::DeleteNatGatewayOutput {
            crate::output::DeleteNatGatewayOutput {
                nat_gateway_id: self.nat_gateway_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNatGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput).
    pub fn builder() -> crate::output::delete_nat_gateway_output::Builder {
        crate::output::delete_nat_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    #[doc(hidden)]
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    _request_id: Option<String>,
}
impl DeleteManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    pub fn prefix_list(&self) -> std::option::Option<&crate::model::ManagedPrefixList> {
        self.prefix_list.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteManagedPrefixListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput).
pub mod delete_managed_prefix_list_output {

    /// A builder for [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, input: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(input);
            self
        }
        /// <p>Information about the prefix list.</p>
        pub fn set_prefix_list(
            mut self,
            input: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput).
        pub fn build(self) -> crate::output::DeleteManagedPrefixListOutput {
            crate::output::DeleteManagedPrefixListOutput {
                prefix_list: self.prefix_list,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteManagedPrefixListOutput {
    /// Creates a new builder-style object to manufacture [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput).
    pub fn builder() -> crate::output::delete_managed_prefix_list_output::Builder {
        crate::output::delete_managed_prefix_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLocalGatewayRouteTableVpcAssociationOutput {
    /// <p>Information about the association.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_vpc_association:
        std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
    _request_id: Option<String>,
}
impl DeleteLocalGatewayRouteTableVpcAssociationOutput {
    /// <p>Information about the association.</p>
    pub fn local_gateway_route_table_vpc_association(
        &self,
    ) -> std::option::Option<&crate::model::LocalGatewayRouteTableVpcAssociation> {
        self.local_gateway_route_table_vpc_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteLocalGatewayRouteTableVpcAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput).
pub mod delete_local_gateway_route_table_vpc_association_output {

    /// A builder for [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_vpc_association:
            std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn local_gateway_route_table_vpc_association(
            mut self,
            input: crate::model::LocalGatewayRouteTableVpcAssociation,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = Some(input);
            self
        }
        /// <p>Information about the association.</p>
        pub fn set_local_gateway_route_table_vpc_association(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput).
        pub fn build(self) -> crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput {
            crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput {
                local_gateway_route_table_vpc_association: self
                    .local_gateway_route_table_vpc_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLocalGatewayRouteTableVpcAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput).
    pub fn builder(
    ) -> crate::output::delete_local_gateway_route_table_vpc_association_output::Builder {
        crate::output::delete_local_gateway_route_table_vpc_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
    /// <p>Information about the association.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_virtual_interface_group_association:
        std::option::Option<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
    _request_id: Option<String>,
}
impl DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
    /// <p>Information about the association.</p>
    pub fn local_gateway_route_table_virtual_interface_group_association(
        &self,
    ) -> std::option::Option<&crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>
    {
        self.local_gateway_route_table_virtual_interface_group_association
            .as_ref()
    }
}
impl aws_http::request_id::RequestId
    for DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
{
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
pub mod delete_local_gateway_route_table_virtual_interface_group_association_output {

    /// A builder for [`DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_virtual_interface_group_association:
            std::option::Option<
                crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
            >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn local_gateway_route_table_virtual_interface_group_association(
            mut self,
            input: crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
        ) -> Self {
            self.local_gateway_route_table_virtual_interface_group_association = Some(input);
            self
        }
        /// <p>Information about the association.</p>
        pub fn set_local_gateway_route_table_virtual_interface_group_association(
            mut self,
            input: std::option::Option<
                crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
            >,
        ) -> Self {
            self.local_gateway_route_table_virtual_interface_group_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
        pub fn build(
            self,
        ) -> crate::output::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
        {
            crate::output::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
                local_gateway_route_table_virtual_interface_group_association: self
                    .local_gateway_route_table_virtual_interface_group_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
    pub fn builder() -> crate::output::delete_local_gateway_route_table_virtual_interface_group_association_output::Builder{
        crate::output::delete_local_gateway_route_table_virtual_interface_group_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLocalGatewayRouteTableOutput {
    /// <p>Information about the local gateway route table.</p>
    #[doc(hidden)]
    pub local_gateway_route_table: std::option::Option<crate::model::LocalGatewayRouteTable>,
    _request_id: Option<String>,
}
impl DeleteLocalGatewayRouteTableOutput {
    /// <p>Information about the local gateway route table.</p>
    pub fn local_gateway_route_table(
        &self,
    ) -> std::option::Option<&crate::model::LocalGatewayRouteTable> {
        self.local_gateway_route_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteLocalGatewayRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLocalGatewayRouteTableOutput`](crate::output::DeleteLocalGatewayRouteTableOutput).
pub mod delete_local_gateway_route_table_output {

    /// A builder for [`DeleteLocalGatewayRouteTableOutput`](crate::output::DeleteLocalGatewayRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table:
            std::option::Option<crate::model::LocalGatewayRouteTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the local gateway route table.</p>
        pub fn local_gateway_route_table(
            mut self,
            input: crate::model::LocalGatewayRouteTable,
        ) -> Self {
            self.local_gateway_route_table = Some(input);
            self
        }
        /// <p>Information about the local gateway route table.</p>
        pub fn set_local_gateway_route_table(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRouteTable>,
        ) -> Self {
            self.local_gateway_route_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLocalGatewayRouteTableOutput`](crate::output::DeleteLocalGatewayRouteTableOutput).
        pub fn build(self) -> crate::output::DeleteLocalGatewayRouteTableOutput {
            crate::output::DeleteLocalGatewayRouteTableOutput {
                local_gateway_route_table: self.local_gateway_route_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLocalGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteTableOutput`](crate::output::DeleteLocalGatewayRouteTableOutput).
    pub fn builder() -> crate::output::delete_local_gateway_route_table_output::Builder {
        crate::output::delete_local_gateway_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLocalGatewayRouteOutput {
    /// <p>Information about the route.</p>
    #[doc(hidden)]
    pub route: std::option::Option<crate::model::LocalGatewayRoute>,
    _request_id: Option<String>,
}
impl DeleteLocalGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub fn route(&self) -> std::option::Option<&crate::model::LocalGatewayRoute> {
        self.route.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteLocalGatewayRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput).
pub mod delete_local_gateway_route_output {

    /// A builder for [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::LocalGatewayRoute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, input: crate::model::LocalGatewayRoute) -> Self {
            self.route = Some(input);
            self
        }
        /// <p>Information about the route.</p>
        pub fn set_route(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRoute>,
        ) -> Self {
            self.route = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput).
        pub fn build(self) -> crate::output::DeleteLocalGatewayRouteOutput {
            crate::output::DeleteLocalGatewayRouteOutput {
                route: self.route,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLocalGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput).
    pub fn builder() -> crate::output::delete_local_gateway_route_output::Builder {
        crate::output::delete_local_gateway_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLaunchTemplateVersionsOutput {
    /// <p>Information about the launch template versions that were successfully deleted.</p>
    #[doc(hidden)]
    pub successfully_deleted_launch_template_versions: std::option::Option<
        std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
    >,
    /// <p>Information about the launch template versions that could not be deleted.</p>
    #[doc(hidden)]
    pub unsuccessfully_deleted_launch_template_versions: std::option::Option<
        std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
    >,
    _request_id: Option<String>,
}
impl DeleteLaunchTemplateVersionsOutput {
    /// <p>Information about the launch template versions that were successfully deleted.</p>
    pub fn successfully_deleted_launch_template_versions(
        &self,
    ) -> std::option::Option<&[crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem]> {
        self.successfully_deleted_launch_template_versions
            .as_deref()
    }
    /// <p>Information about the launch template versions that could not be deleted.</p>
    pub fn unsuccessfully_deleted_launch_template_versions(
        &self,
    ) -> std::option::Option<&[crate::model::DeleteLaunchTemplateVersionsResponseErrorItem]> {
        self.unsuccessfully_deleted_launch_template_versions
            .as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteLaunchTemplateVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput).
pub mod delete_launch_template_versions_output {

    /// A builder for [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successfully_deleted_launch_template_versions: std::option::Option<
            std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
        >,
        pub(crate) unsuccessfully_deleted_launch_template_versions: std::option::Option<
            std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successfully_deleted_launch_template_versions`.
        ///
        /// To override the contents of this collection use [`set_successfully_deleted_launch_template_versions`](Self::set_successfully_deleted_launch_template_versions).
        ///
        /// <p>Information about the launch template versions that were successfully deleted.</p>
        pub fn successfully_deleted_launch_template_versions(
            mut self,
            input: crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem,
        ) -> Self {
            let mut v = self
                .successfully_deleted_launch_template_versions
                .unwrap_or_default();
            v.push(input);
            self.successfully_deleted_launch_template_versions = Some(v);
            self
        }
        /// <p>Information about the launch template versions that were successfully deleted.</p>
        pub fn set_successfully_deleted_launch_template_versions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
            >,
        ) -> Self {
            self.successfully_deleted_launch_template_versions = input;
            self
        }
        /// Appends an item to `unsuccessfully_deleted_launch_template_versions`.
        ///
        /// To override the contents of this collection use [`set_unsuccessfully_deleted_launch_template_versions`](Self::set_unsuccessfully_deleted_launch_template_versions).
        ///
        /// <p>Information about the launch template versions that could not be deleted.</p>
        pub fn unsuccessfully_deleted_launch_template_versions(
            mut self,
            input: crate::model::DeleteLaunchTemplateVersionsResponseErrorItem,
        ) -> Self {
            let mut v = self
                .unsuccessfully_deleted_launch_template_versions
                .unwrap_or_default();
            v.push(input);
            self.unsuccessfully_deleted_launch_template_versions = Some(v);
            self
        }
        /// <p>Information about the launch template versions that could not be deleted.</p>
        pub fn set_unsuccessfully_deleted_launch_template_versions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
            >,
        ) -> Self {
            self.unsuccessfully_deleted_launch_template_versions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput).
        pub fn build(self) -> crate::output::DeleteLaunchTemplateVersionsOutput {
            crate::output::DeleteLaunchTemplateVersionsOutput {
                successfully_deleted_launch_template_versions: self
                    .successfully_deleted_launch_template_versions,
                unsuccessfully_deleted_launch_template_versions: self
                    .unsuccessfully_deleted_launch_template_versions,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLaunchTemplateVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput).
    pub fn builder() -> crate::output::delete_launch_template_versions_output::Builder {
        crate::output::delete_launch_template_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    #[doc(hidden)]
    pub launch_template: std::option::Option<crate::model::LaunchTemplate>,
    _request_id: Option<String>,
}
impl DeleteLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    pub fn launch_template(&self) -> std::option::Option<&crate::model::LaunchTemplate> {
        self.launch_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteLaunchTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput).
pub mod delete_launch_template_output {

    /// A builder for [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the launch template.</p>
        pub fn launch_template(mut self, input: crate::model::LaunchTemplate) -> Self {
            self.launch_template = Some(input);
            self
        }
        /// <p>Information about the launch template.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::LaunchTemplate>,
        ) -> Self {
            self.launch_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput).
        pub fn build(self) -> crate::output::DeleteLaunchTemplateOutput {
            crate::output::DeleteLaunchTemplateOutput {
                launch_template: self.launch_template,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLaunchTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput).
    pub fn builder() -> crate::output::delete_launch_template_output::Builder {
        crate::output::delete_launch_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteKeyPairOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteKeyPairOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput).
pub mod delete_key_pair_output {

    /// A builder for [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput).
        pub fn build(self) -> crate::output::DeleteKeyPairOutput {
            crate::output::DeleteKeyPairOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteKeyPairOutput {
    /// Creates a new builder-style object to manufacture [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput).
    pub fn builder() -> crate::output::delete_key_pair_output::Builder {
        crate::output::delete_key_pair_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteIpamScopeOutput {
    /// <p>Information about the results of the deletion.</p>
    #[doc(hidden)]
    pub ipam_scope: std::option::Option<crate::model::IpamScope>,
    _request_id: Option<String>,
}
impl DeleteIpamScopeOutput {
    /// <p>Information about the results of the deletion.</p>
    pub fn ipam_scope(&self) -> std::option::Option<&crate::model::IpamScope> {
        self.ipam_scope.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteIpamScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteIpamScopeOutput`](crate::output::DeleteIpamScopeOutput).
pub mod delete_ipam_scope_output {

    /// A builder for [`DeleteIpamScopeOutput`](crate::output::DeleteIpamScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_scope: std::option::Option<crate::model::IpamScope>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the results of the deletion.</p>
        pub fn ipam_scope(mut self, input: crate::model::IpamScope) -> Self {
            self.ipam_scope = Some(input);
            self
        }
        /// <p>Information about the results of the deletion.</p>
        pub fn set_ipam_scope(
            mut self,
            input: std::option::Option<crate::model::IpamScope>,
        ) -> Self {
            self.ipam_scope = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteIpamScopeOutput`](crate::output::DeleteIpamScopeOutput).
        pub fn build(self) -> crate::output::DeleteIpamScopeOutput {
            crate::output::DeleteIpamScopeOutput {
                ipam_scope: self.ipam_scope,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteIpamScopeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIpamScopeOutput`](crate::output::DeleteIpamScopeOutput).
    pub fn builder() -> crate::output::delete_ipam_scope_output::Builder {
        crate::output::delete_ipam_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteIpamPoolOutput {
    /// <p>Information about the results of the deletion.</p>
    #[doc(hidden)]
    pub ipam_pool: std::option::Option<crate::model::IpamPool>,
    _request_id: Option<String>,
}
impl DeleteIpamPoolOutput {
    /// <p>Information about the results of the deletion.</p>
    pub fn ipam_pool(&self) -> std::option::Option<&crate::model::IpamPool> {
        self.ipam_pool.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteIpamPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteIpamPoolOutput`](crate::output::DeleteIpamPoolOutput).
pub mod delete_ipam_pool_output {

    /// A builder for [`DeleteIpamPoolOutput`](crate::output::DeleteIpamPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool: std::option::Option<crate::model::IpamPool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the results of the deletion.</p>
        pub fn ipam_pool(mut self, input: crate::model::IpamPool) -> Self {
            self.ipam_pool = Some(input);
            self
        }
        /// <p>Information about the results of the deletion.</p>
        pub fn set_ipam_pool(mut self, input: std::option::Option<crate::model::IpamPool>) -> Self {
            self.ipam_pool = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteIpamPoolOutput`](crate::output::DeleteIpamPoolOutput).
        pub fn build(self) -> crate::output::DeleteIpamPoolOutput {
            crate::output::DeleteIpamPoolOutput {
                ipam_pool: self.ipam_pool,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteIpamPoolOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIpamPoolOutput`](crate::output::DeleteIpamPoolOutput).
    pub fn builder() -> crate::output::delete_ipam_pool_output::Builder {
        crate::output::delete_ipam_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteIpamOutput {
    /// <p>Information about the results of the deletion.</p>
    #[doc(hidden)]
    pub ipam: std::option::Option<crate::model::Ipam>,
    _request_id: Option<String>,
}
impl DeleteIpamOutput {
    /// <p>Information about the results of the deletion.</p>
    pub fn ipam(&self) -> std::option::Option<&crate::model::Ipam> {
        self.ipam.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteIpamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteIpamOutput`](crate::output::DeleteIpamOutput).
pub mod delete_ipam_output {

    /// A builder for [`DeleteIpamOutput`](crate::output::DeleteIpamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam: std::option::Option<crate::model::Ipam>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the results of the deletion.</p>
        pub fn ipam(mut self, input: crate::model::Ipam) -> Self {
            self.ipam = Some(input);
            self
        }
        /// <p>Information about the results of the deletion.</p>
        pub fn set_ipam(mut self, input: std::option::Option<crate::model::Ipam>) -> Self {
            self.ipam = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteIpamOutput`](crate::output::DeleteIpamOutput).
        pub fn build(self) -> crate::output::DeleteIpamOutput {
            crate::output::DeleteIpamOutput {
                ipam: self.ipam,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteIpamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIpamOutput`](crate::output::DeleteIpamOutput).
    pub fn builder() -> crate::output::delete_ipam_output::Builder {
        crate::output::delete_ipam_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteInternetGatewayOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput).
pub mod delete_internet_gateway_output {

    /// A builder for [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput).
        pub fn build(self) -> crate::output::DeleteInternetGatewayOutput {
            crate::output::DeleteInternetGatewayOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput).
    pub fn builder() -> crate::output::delete_internet_gateway_output::Builder {
        crate::output::delete_internet_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteInstanceEventWindowOutput {
    /// <p>The state of the event window.</p>
    #[doc(hidden)]
    pub instance_event_window_state:
        std::option::Option<crate::model::InstanceEventWindowStateChange>,
    _request_id: Option<String>,
}
impl DeleteInstanceEventWindowOutput {
    /// <p>The state of the event window.</p>
    pub fn instance_event_window_state(
        &self,
    ) -> std::option::Option<&crate::model::InstanceEventWindowStateChange> {
        self.instance_event_window_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteInstanceEventWindowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteInstanceEventWindowOutput`](crate::output::DeleteInstanceEventWindowOutput).
pub mod delete_instance_event_window_output {

    /// A builder for [`DeleteInstanceEventWindowOutput`](crate::output::DeleteInstanceEventWindowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_event_window_state:
            std::option::Option<crate::model::InstanceEventWindowStateChange>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The state of the event window.</p>
        pub fn instance_event_window_state(
            mut self,
            input: crate::model::InstanceEventWindowStateChange,
        ) -> Self {
            self.instance_event_window_state = Some(input);
            self
        }
        /// <p>The state of the event window.</p>
        pub fn set_instance_event_window_state(
            mut self,
            input: std::option::Option<crate::model::InstanceEventWindowStateChange>,
        ) -> Self {
            self.instance_event_window_state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInstanceEventWindowOutput`](crate::output::DeleteInstanceEventWindowOutput).
        pub fn build(self) -> crate::output::DeleteInstanceEventWindowOutput {
            crate::output::DeleteInstanceEventWindowOutput {
                instance_event_window_state: self.instance_event_window_state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteInstanceEventWindowOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInstanceEventWindowOutput`](crate::output::DeleteInstanceEventWindowOutput).
    pub fn builder() -> crate::output::delete_instance_event_window_output::Builder {
        crate::output::delete_instance_event_window_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFpgaImageOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeleteFpgaImageOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for DeleteFpgaImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput).
pub mod delete_fpga_image_output {

    /// A builder for [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput).
        pub fn build(self) -> crate::output::DeleteFpgaImageOutput {
            crate::output::DeleteFpgaImageOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteFpgaImageOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput).
    pub fn builder() -> crate::output::delete_fpga_image_output::Builder {
        crate::output::delete_fpga_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFlowLogsOutput {
    /// <p>Information about the flow logs that could not be deleted successfully.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl DeleteFlowLogsOutput {
    /// <p>Information about the flow logs that could not be deleted successfully.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteFlowLogsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput).
pub mod delete_flow_logs_output {

    /// A builder for [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the flow logs that could not be deleted successfully.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the flow logs that could not be deleted successfully.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput).
        pub fn build(self) -> crate::output::DeleteFlowLogsOutput {
            crate::output::DeleteFlowLogsOutput {
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteFlowLogsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput).
    pub fn builder() -> crate::output::delete_flow_logs_output::Builder {
        crate::output::delete_flow_logs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFleetsOutput {
    /// <p>Information about the EC2 Fleets that are successfully deleted.</p>
    #[doc(hidden)]
    pub successful_fleet_deletions:
        std::option::Option<std::vec::Vec<crate::model::DeleteFleetSuccessItem>>,
    /// <p>Information about the EC2 Fleets that are not successfully deleted.</p>
    #[doc(hidden)]
    pub unsuccessful_fleet_deletions:
        std::option::Option<std::vec::Vec<crate::model::DeleteFleetErrorItem>>,
    _request_id: Option<String>,
}
impl DeleteFleetsOutput {
    /// <p>Information about the EC2 Fleets that are successfully deleted.</p>
    pub fn successful_fleet_deletions(
        &self,
    ) -> std::option::Option<&[crate::model::DeleteFleetSuccessItem]> {
        self.successful_fleet_deletions.as_deref()
    }
    /// <p>Information about the EC2 Fleets that are not successfully deleted.</p>
    pub fn unsuccessful_fleet_deletions(
        &self,
    ) -> std::option::Option<&[crate::model::DeleteFleetErrorItem]> {
        self.unsuccessful_fleet_deletions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteFleetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput).
pub mod delete_fleets_output {

    /// A builder for [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_fleet_deletions:
            std::option::Option<std::vec::Vec<crate::model::DeleteFleetSuccessItem>>,
        pub(crate) unsuccessful_fleet_deletions:
            std::option::Option<std::vec::Vec<crate::model::DeleteFleetErrorItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful_fleet_deletions`.
        ///
        /// To override the contents of this collection use [`set_successful_fleet_deletions`](Self::set_successful_fleet_deletions).
        ///
        /// <p>Information about the EC2 Fleets that are successfully deleted.</p>
        pub fn successful_fleet_deletions(
            mut self,
            input: crate::model::DeleteFleetSuccessItem,
        ) -> Self {
            let mut v = self.successful_fleet_deletions.unwrap_or_default();
            v.push(input);
            self.successful_fleet_deletions = Some(v);
            self
        }
        /// <p>Information about the EC2 Fleets that are successfully deleted.</p>
        pub fn set_successful_fleet_deletions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DeleteFleetSuccessItem>>,
        ) -> Self {
            self.successful_fleet_deletions = input;
            self
        }
        /// Appends an item to `unsuccessful_fleet_deletions`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful_fleet_deletions`](Self::set_unsuccessful_fleet_deletions).
        ///
        /// <p>Information about the EC2 Fleets that are not successfully deleted.</p>
        pub fn unsuccessful_fleet_deletions(
            mut self,
            input: crate::model::DeleteFleetErrorItem,
        ) -> Self {
            let mut v = self.unsuccessful_fleet_deletions.unwrap_or_default();
            v.push(input);
            self.unsuccessful_fleet_deletions = Some(v);
            self
        }
        /// <p>Information about the EC2 Fleets that are not successfully deleted.</p>
        pub fn set_unsuccessful_fleet_deletions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DeleteFleetErrorItem>>,
        ) -> Self {
            self.unsuccessful_fleet_deletions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput).
        pub fn build(self) -> crate::output::DeleteFleetsOutput {
            crate::output::DeleteFleetsOutput {
                successful_fleet_deletions: self.successful_fleet_deletions,
                unsuccessful_fleet_deletions: self.unsuccessful_fleet_deletions,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteFleetsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput).
    pub fn builder() -> crate::output::delete_fleets_output::Builder {
        crate::output::delete_fleets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteEgressOnlyInternetGatewayOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub return_code: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DeleteEgressOnlyInternetGatewayOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn return_code(&self) -> std::option::Option<bool> {
        self.return_code
    }
}
impl aws_http::request_id::RequestId for DeleteEgressOnlyInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput).
pub mod delete_egress_only_internet_gateway_output {

    /// A builder for [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_code: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_code(mut self, input: bool) -> Self {
            self.return_code = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return_code(mut self, input: std::option::Option<bool>) -> Self {
            self.return_code = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput).
        pub fn build(self) -> crate::output::DeleteEgressOnlyInternetGatewayOutput {
            crate::output::DeleteEgressOnlyInternetGatewayOutput {
                return_code: self.return_code,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteEgressOnlyInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput).
    pub fn builder() -> crate::output::delete_egress_only_internet_gateway_output::Builder {
        crate::output::delete_egress_only_internet_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteDhcpOptionsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteDhcpOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput).
pub mod delete_dhcp_options_output {

    /// A builder for [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput).
        pub fn build(self) -> crate::output::DeleteDhcpOptionsOutput {
            crate::output::DeleteDhcpOptionsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput).
    pub fn builder() -> crate::output::delete_dhcp_options_output::Builder {
        crate::output::delete_dhcp_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCustomerGatewayOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCustomerGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput).
pub mod delete_customer_gateway_output {

    /// A builder for [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput).
        pub fn build(self) -> crate::output::DeleteCustomerGatewayOutput {
            crate::output::DeleteCustomerGatewayOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCustomerGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput).
    pub fn builder() -> crate::output::delete_customer_gateway_output::Builder {
        crate::output::delete_customer_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCoipPoolOutput {
    /// <p>Information about the CoIP address pool.</p>
    #[doc(hidden)]
    pub coip_pool: std::option::Option<crate::model::CoipPool>,
    _request_id: Option<String>,
}
impl DeleteCoipPoolOutput {
    /// <p>Information about the CoIP address pool.</p>
    pub fn coip_pool(&self) -> std::option::Option<&crate::model::CoipPool> {
        self.coip_pool.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteCoipPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCoipPoolOutput`](crate::output::DeleteCoipPoolOutput).
pub mod delete_coip_pool_output {

    /// A builder for [`DeleteCoipPoolOutput`](crate::output::DeleteCoipPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_pool: std::option::Option<crate::model::CoipPool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the CoIP address pool.</p>
        pub fn coip_pool(mut self, input: crate::model::CoipPool) -> Self {
            self.coip_pool = Some(input);
            self
        }
        /// <p>Information about the CoIP address pool.</p>
        pub fn set_coip_pool(mut self, input: std::option::Option<crate::model::CoipPool>) -> Self {
            self.coip_pool = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCoipPoolOutput`](crate::output::DeleteCoipPoolOutput).
        pub fn build(self) -> crate::output::DeleteCoipPoolOutput {
            crate::output::DeleteCoipPoolOutput {
                coip_pool: self.coip_pool,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCoipPoolOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCoipPoolOutput`](crate::output::DeleteCoipPoolOutput).
    pub fn builder() -> crate::output::delete_coip_pool_output::Builder {
        crate::output::delete_coip_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCoipCidrOutput {
    /// <p> Information about a range of customer-owned IP addresses. </p>
    #[doc(hidden)]
    pub coip_cidr: std::option::Option<crate::model::CoipCidr>,
    _request_id: Option<String>,
}
impl DeleteCoipCidrOutput {
    /// <p> Information about a range of customer-owned IP addresses. </p>
    pub fn coip_cidr(&self) -> std::option::Option<&crate::model::CoipCidr> {
        self.coip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteCoipCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCoipCidrOutput`](crate::output::DeleteCoipCidrOutput).
pub mod delete_coip_cidr_output {

    /// A builder for [`DeleteCoipCidrOutput`](crate::output::DeleteCoipCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_cidr: std::option::Option<crate::model::CoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> Information about a range of customer-owned IP addresses. </p>
        pub fn coip_cidr(mut self, input: crate::model::CoipCidr) -> Self {
            self.coip_cidr = Some(input);
            self
        }
        /// <p> Information about a range of customer-owned IP addresses. </p>
        pub fn set_coip_cidr(mut self, input: std::option::Option<crate::model::CoipCidr>) -> Self {
            self.coip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCoipCidrOutput`](crate::output::DeleteCoipCidrOutput).
        pub fn build(self) -> crate::output::DeleteCoipCidrOutput {
            crate::output::DeleteCoipCidrOutput {
                coip_cidr: self.coip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCoipCidrOutput`](crate::output::DeleteCoipCidrOutput).
    pub fn builder() -> crate::output::delete_coip_cidr_output::Builder {
        crate::output::delete_coip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteClientVpnRouteOutput {
    /// <p>The current state of the route.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientVpnRouteStatus>,
    _request_id: Option<String>,
}
impl DeleteClientVpnRouteOutput {
    /// <p>The current state of the route.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ClientVpnRouteStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteClientVpnRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput).
pub mod delete_client_vpn_route_output {

    /// A builder for [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnRouteStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the route.</p>
        pub fn status(mut self, input: crate::model::ClientVpnRouteStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the route.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientVpnRouteStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput).
        pub fn build(self) -> crate::output::DeleteClientVpnRouteOutput {
            crate::output::DeleteClientVpnRouteOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteClientVpnRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput).
    pub fn builder() -> crate::output::delete_client_vpn_route_output::Builder {
        crate::output::delete_client_vpn_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteClientVpnEndpointOutput {
    /// <p>The current state of the Client VPN endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
    _request_id: Option<String>,
}
impl DeleteClientVpnEndpointOutput {
    /// <p>The current state of the Client VPN endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ClientVpnEndpointStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteClientVpnEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput).
pub mod delete_client_vpn_endpoint_output {

    /// A builder for [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the Client VPN endpoint.</p>
        pub fn status(mut self, input: crate::model::ClientVpnEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the Client VPN endpoint.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput).
        pub fn build(self) -> crate::output::DeleteClientVpnEndpointOutput {
            crate::output::DeleteClientVpnEndpointOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteClientVpnEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput).
    pub fn builder() -> crate::output::delete_client_vpn_endpoint_output::Builder {
        crate::output::delete_client_vpn_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCarrierGatewayOutput {
    /// <p>Information about the carrier gateway.</p>
    #[doc(hidden)]
    pub carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
    _request_id: Option<String>,
}
impl DeleteCarrierGatewayOutput {
    /// <p>Information about the carrier gateway.</p>
    pub fn carrier_gateway(&self) -> std::option::Option<&crate::model::CarrierGateway> {
        self.carrier_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteCarrierGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput).
pub mod delete_carrier_gateway_output {

    /// A builder for [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the carrier gateway.</p>
        pub fn carrier_gateway(mut self, input: crate::model::CarrierGateway) -> Self {
            self.carrier_gateway = Some(input);
            self
        }
        /// <p>Information about the carrier gateway.</p>
        pub fn set_carrier_gateway(
            mut self,
            input: std::option::Option<crate::model::CarrierGateway>,
        ) -> Self {
            self.carrier_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput).
        pub fn build(self) -> crate::output::DeleteCarrierGatewayOutput {
            crate::output::DeleteCarrierGatewayOutput {
                carrier_gateway: self.carrier_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCarrierGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput).
    pub fn builder() -> crate::output::delete_carrier_gateway_output::Builder {
        crate::output::delete_carrier_gateway_output::Builder::default()
    }
}

/// <p>Contains the output of CreateVpnGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpnGatewayOutput {
    /// <p>Information about the virtual private gateway.</p>
    #[doc(hidden)]
    pub vpn_gateway: std::option::Option<crate::model::VpnGateway>,
    _request_id: Option<String>,
}
impl CreateVpnGatewayOutput {
    /// <p>Information about the virtual private gateway.</p>
    pub fn vpn_gateway(&self) -> std::option::Option<&crate::model::VpnGateway> {
        self.vpn_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpnGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput).
pub mod create_vpn_gateway_output {

    /// A builder for [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_gateway: std::option::Option<crate::model::VpnGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the virtual private gateway.</p>
        pub fn vpn_gateway(mut self, input: crate::model::VpnGateway) -> Self {
            self.vpn_gateway = Some(input);
            self
        }
        /// <p>Information about the virtual private gateway.</p>
        pub fn set_vpn_gateway(
            mut self,
            input: std::option::Option<crate::model::VpnGateway>,
        ) -> Self {
            self.vpn_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput).
        pub fn build(self) -> crate::output::CreateVpnGatewayOutput {
            crate::output::CreateVpnGatewayOutput {
                vpn_gateway: self.vpn_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput).
    pub fn builder() -> crate::output::create_vpn_gateway_output::Builder {
        crate::output::create_vpn_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpnConnectionRouteOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateVpnConnectionRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput).
pub mod create_vpn_connection_route_output {

    /// A builder for [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput).
        pub fn build(self) -> crate::output::CreateVpnConnectionRouteOutput {
            crate::output::CreateVpnConnectionRouteOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpnConnectionRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput).
    pub fn builder() -> crate::output::create_vpn_connection_route_output::Builder {
        crate::output::create_vpn_connection_route_output::Builder::default()
    }
}

/// <p>Contains the output of CreateVpnConnection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpnConnectionOutput {
    /// <p>Information about the VPN connection.</p>
    #[doc(hidden)]
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
    _request_id: Option<String>,
}
impl CreateVpnConnectionOutput {
    /// <p>Information about the VPN connection.</p>
    pub fn vpn_connection(&self) -> std::option::Option<&crate::model::VpnConnection> {
        self.vpn_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpnConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput).
pub mod create_vpn_connection_output {

    /// A builder for [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPN connection.</p>
        pub fn vpn_connection(mut self, input: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(input);
            self
        }
        /// <p>Information about the VPN connection.</p>
        pub fn set_vpn_connection(
            mut self,
            input: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput).
        pub fn build(self) -> crate::output::CreateVpnConnectionOutput {
            crate::output::CreateVpnConnectionOutput {
                vpn_connection: self.vpn_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpnConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput).
    pub fn builder() -> crate::output::create_vpn_connection_output::Builder {
        crate::output::create_vpn_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcPeeringConnectionOutput {
    /// <p>Information about the VPC peering connection.</p>
    #[doc(hidden)]
    pub vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
    _request_id: Option<String>,
}
impl CreateVpcPeeringConnectionOutput {
    /// <p>Information about the VPC peering connection.</p>
    pub fn vpc_peering_connection(
        &self,
    ) -> std::option::Option<&crate::model::VpcPeeringConnection> {
        self.vpc_peering_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcPeeringConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput).
pub mod create_vpc_peering_connection_output {

    /// A builder for [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPC peering connection.</p>
        pub fn vpc_peering_connection(mut self, input: crate::model::VpcPeeringConnection) -> Self {
            self.vpc_peering_connection = Some(input);
            self
        }
        /// <p>Information about the VPC peering connection.</p>
        pub fn set_vpc_peering_connection(
            mut self,
            input: std::option::Option<crate::model::VpcPeeringConnection>,
        ) -> Self {
            self.vpc_peering_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput).
        pub fn build(self) -> crate::output::CreateVpcPeeringConnectionOutput {
            crate::output::CreateVpcPeeringConnectionOutput {
                vpc_peering_connection: self.vpc_peering_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput).
    pub fn builder() -> crate::output::create_vpc_peering_connection_output::Builder {
        crate::output::create_vpc_peering_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcEndpointServiceConfigurationOutput {
    /// <p>Information about the service configuration.</p>
    #[doc(hidden)]
    pub service_configuration: std::option::Option<crate::model::ServiceConfiguration>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVpcEndpointServiceConfigurationOutput {
    /// <p>Information about the service configuration.</p>
    pub fn service_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ServiceConfiguration> {
        self.service_configuration.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcEndpointServiceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput).
pub mod create_vpc_endpoint_service_configuration_output {

    /// A builder for [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_configuration: std::option::Option<crate::model::ServiceConfiguration>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the service configuration.</p>
        pub fn service_configuration(mut self, input: crate::model::ServiceConfiguration) -> Self {
            self.service_configuration = Some(input);
            self
        }
        /// <p>Information about the service configuration.</p>
        pub fn set_service_configuration(
            mut self,
            input: std::option::Option<crate::model::ServiceConfiguration>,
        ) -> Self {
            self.service_configuration = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput).
        pub fn build(self) -> crate::output::CreateVpcEndpointServiceConfigurationOutput {
            crate::output::CreateVpcEndpointServiceConfigurationOutput {
                service_configuration: self.service_configuration,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpcEndpointServiceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput).
    pub fn builder() -> crate::output::create_vpc_endpoint_service_configuration_output::Builder {
        crate::output::create_vpc_endpoint_service_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcEndpointConnectionNotificationOutput {
    /// <p>Information about the notification.</p>
    #[doc(hidden)]
    pub connection_notification: std::option::Option<crate::model::ConnectionNotification>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVpcEndpointConnectionNotificationOutput {
    /// <p>Information about the notification.</p>
    pub fn connection_notification(
        &self,
    ) -> std::option::Option<&crate::model::ConnectionNotification> {
        self.connection_notification.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcEndpointConnectionNotificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput).
pub mod create_vpc_endpoint_connection_notification_output {

    /// A builder for [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_notification:
            std::option::Option<crate::model::ConnectionNotification>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the notification.</p>
        pub fn connection_notification(
            mut self,
            input: crate::model::ConnectionNotification,
        ) -> Self {
            self.connection_notification = Some(input);
            self
        }
        /// <p>Information about the notification.</p>
        pub fn set_connection_notification(
            mut self,
            input: std::option::Option<crate::model::ConnectionNotification>,
        ) -> Self {
            self.connection_notification = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput).
        pub fn build(self) -> crate::output::CreateVpcEndpointConnectionNotificationOutput {
            crate::output::CreateVpcEndpointConnectionNotificationOutput {
                connection_notification: self.connection_notification,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpcEndpointConnectionNotificationOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput).
    pub fn builder() -> crate::output::create_vpc_endpoint_connection_notification_output::Builder {
        crate::output::create_vpc_endpoint_connection_notification_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcEndpointOutput {
    /// <p>Information about the endpoint.</p>
    #[doc(hidden)]
    pub vpc_endpoint: std::option::Option<crate::model::VpcEndpoint>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVpcEndpointOutput {
    /// <p>Information about the endpoint.</p>
    pub fn vpc_endpoint(&self) -> std::option::Option<&crate::model::VpcEndpoint> {
        self.vpc_endpoint.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
pub mod create_vpc_endpoint_output {

    /// A builder for [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoint: std::option::Option<crate::model::VpcEndpoint>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the endpoint.</p>
        pub fn vpc_endpoint(mut self, input: crate::model::VpcEndpoint) -> Self {
            self.vpc_endpoint = Some(input);
            self
        }
        /// <p>Information about the endpoint.</p>
        pub fn set_vpc_endpoint(
            mut self,
            input: std::option::Option<crate::model::VpcEndpoint>,
        ) -> Self {
            self.vpc_endpoint = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
        pub fn build(self) -> crate::output::CreateVpcEndpointOutput {
            crate::output::CreateVpcEndpointOutput {
                vpc_endpoint: self.vpc_endpoint,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput).
    pub fn builder() -> crate::output::create_vpc_endpoint_output::Builder {
        crate::output::create_vpc_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcOutput {
    /// <p>Information about the VPC.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<crate::model::Vpc>,
    _request_id: Option<String>,
}
impl CreateVpcOutput {
    /// <p>Information about the VPC.</p>
    pub fn vpc(&self) -> std::option::Option<&crate::model::Vpc> {
        self.vpc.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVpcOutput`](crate::output::CreateVpcOutput).
pub mod create_vpc_output {

    /// A builder for [`CreateVpcOutput`](crate::output::CreateVpcOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc: std::option::Option<crate::model::Vpc>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPC.</p>
        pub fn vpc(mut self, input: crate::model::Vpc) -> Self {
            self.vpc = Some(input);
            self
        }
        /// <p>Information about the VPC.</p>
        pub fn set_vpc(mut self, input: std::option::Option<crate::model::Vpc>) -> Self {
            self.vpc = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcOutput`](crate::output::CreateVpcOutput).
        pub fn build(self) -> crate::output::CreateVpcOutput {
            crate::output::CreateVpcOutput {
                vpc: self.vpc,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVpcOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcOutput`](crate::output::CreateVpcOutput).
    pub fn builder() -> crate::output::create_vpc_output::Builder {
        crate::output::create_vpc_output::Builder::default()
    }
}

/// <p>Describes a volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVolumeOutput {
    /// <p>Information about the volume attachments.</p>
    #[doc(hidden)]
    pub attachments: std::option::Option<std::vec::Vec<crate::model::VolumeAttachment>>,
    /// <p>The Availability Zone for the volume.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The time stamp when volume creation was initiated.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates whether the volume is encrypted.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the volume.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiBs.</p>
    #[doc(hidden)]
    pub size: std::option::Option<i32>,
    /// <p>The snapshot from which the volume was created, if applicable.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The volume state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::VolumeState>,
    /// <p>The ID of the volume.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p>Any tags assigned to the volume.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The volume type.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<crate::model::VolumeType>,
    /// <p>Indicates whether the volume was created using fast snapshot restore.</p>
    #[doc(hidden)]
    pub fast_restored: std::option::Option<bool>,
    /// <p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>
    #[doc(hidden)]
    pub multi_attach_enabled: std::option::Option<bool>,
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    #[doc(hidden)]
    pub throughput: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl CreateVolumeOutput {
    /// <p>Information about the volume attachments.</p>
    pub fn attachments(&self) -> std::option::Option<&[crate::model::VolumeAttachment]> {
        self.attachments.as_deref()
    }
    /// <p>The Availability Zone for the volume.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The time stamp when volume creation was initiated.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>Indicates whether the volume is encrypted.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the volume.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>The size of the volume, in GiBs.</p>
    pub fn size(&self) -> std::option::Option<i32> {
        self.size
    }
    /// <p>The snapshot from which the volume was created, if applicable.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The volume state.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::VolumeState> {
        self.state.as_ref()
    }
    /// <p>The ID of the volume.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p>Any tags assigned to the volume.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The volume type.</p>
    pub fn volume_type(&self) -> std::option::Option<&crate::model::VolumeType> {
        self.volume_type.as_ref()
    }
    /// <p>Indicates whether the volume was created using fast snapshot restore.</p>
    pub fn fast_restored(&self) -> std::option::Option<bool> {
        self.fast_restored
    }
    /// <p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>
    pub fn multi_attach_enabled(&self) -> std::option::Option<bool> {
        self.multi_attach_enabled
    }
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    pub fn throughput(&self) -> std::option::Option<i32> {
        self.throughput
    }
}
impl aws_http::request_id::RequestId for CreateVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVolumeOutput`](crate::output::CreateVolumeOutput).
pub mod create_volume_output {

    /// A builder for [`CreateVolumeOutput`](crate::output::CreateVolumeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attachments: std::option::Option<std::vec::Vec<crate::model::VolumeAttachment>>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
        pub(crate) size: std::option::Option<i32>,
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::VolumeState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) volume_type: std::option::Option<crate::model::VolumeType>,
        pub(crate) fast_restored: std::option::Option<bool>,
        pub(crate) multi_attach_enabled: std::option::Option<bool>,
        pub(crate) throughput: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `attachments`.
        ///
        /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
        ///
        /// <p>Information about the volume attachments.</p>
        pub fn attachments(mut self, input: crate::model::VolumeAttachment) -> Self {
            let mut v = self.attachments.unwrap_or_default();
            v.push(input);
            self.attachments = Some(v);
            self
        }
        /// <p>Information about the volume attachments.</p>
        pub fn set_attachments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VolumeAttachment>>,
        ) -> Self {
            self.attachments = input;
            self
        }
        /// <p>The Availability Zone for the volume.</p>
        pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(input.into());
            self
        }
        /// <p>The Availability Zone for the volume.</p>
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = input;
            self
        }
        /// <p>The time stamp when volume creation was initiated.</p>
        pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.create_time = Some(input);
            self
        }
        /// <p>The time stamp when volume creation was initiated.</p>
        pub fn set_create_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.create_time = input;
            self
        }
        /// <p>Indicates whether the volume is encrypted.</p>
        pub fn encrypted(mut self, input: bool) -> Self {
            self.encrypted = Some(input);
            self
        }
        /// <p>Indicates whether the volume is encrypted.</p>
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.encrypted = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the volume.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the volume.</p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = input;
            self
        }
        /// <p>The size of the volume, in GiBs.</p>
        pub fn size(mut self, input: i32) -> Self {
            self.size = Some(input);
            self
        }
        /// <p>The size of the volume, in GiBs.</p>
        pub fn set_size(mut self, input: std::option::Option<i32>) -> Self {
            self.size = input;
            self
        }
        /// <p>The snapshot from which the volume was created, if applicable.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The snapshot from which the volume was created, if applicable.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        /// <p>The volume state.</p>
        pub fn state(mut self, input: crate::model::VolumeState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The volume state.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::VolumeState>) -> Self {
            self.state = input;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(input.into());
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.volume_id = input;
            self
        }
        /// <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        /// <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags assigned to the volume.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags assigned to the volume.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The volume type.</p>
        pub fn volume_type(mut self, input: crate::model::VolumeType) -> Self {
            self.volume_type = Some(input);
            self
        }
        /// <p>The volume type.</p>
        pub fn set_volume_type(
            mut self,
            input: std::option::Option<crate::model::VolumeType>,
        ) -> Self {
            self.volume_type = input;
            self
        }
        /// <p>Indicates whether the volume was created using fast snapshot restore.</p>
        pub fn fast_restored(mut self, input: bool) -> Self {
            self.fast_restored = Some(input);
            self
        }
        /// <p>Indicates whether the volume was created using fast snapshot restore.</p>
        pub fn set_fast_restored(mut self, input: std::option::Option<bool>) -> Self {
            self.fast_restored = input;
            self
        }
        /// <p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>
        pub fn multi_attach_enabled(mut self, input: bool) -> Self {
            self.multi_attach_enabled = Some(input);
            self
        }
        /// <p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>
        pub fn set_multi_attach_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_attach_enabled = input;
            self
        }
        /// <p>The throughput that the volume supports, in MiB/s.</p>
        pub fn throughput(mut self, input: i32) -> Self {
            self.throughput = Some(input);
            self
        }
        /// <p>The throughput that the volume supports, in MiB/s.</p>
        pub fn set_throughput(mut self, input: std::option::Option<i32>) -> Self {
            self.throughput = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVolumeOutput`](crate::output::CreateVolumeOutput).
        pub fn build(self) -> crate::output::CreateVolumeOutput {
            crate::output::CreateVolumeOutput {
                attachments: self.attachments,
                availability_zone: self.availability_zone,
                create_time: self.create_time,
                encrypted: self.encrypted,
                kms_key_id: self.kms_key_id,
                outpost_arn: self.outpost_arn,
                size: self.size,
                snapshot_id: self.snapshot_id,
                state: self.state,
                volume_id: self.volume_id,
                iops: self.iops,
                tags: self.tags,
                volume_type: self.volume_type,
                fast_restored: self.fast_restored,
                multi_attach_enabled: self.multi_attach_enabled,
                throughput: self.throughput,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVolumeOutput {
    /// Creates a new builder-style object to manufacture [`CreateVolumeOutput`](crate::output::CreateVolumeOutput).
    pub fn builder() -> crate::output::create_volume_output::Builder {
        crate::output::create_volume_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub verified_access_trust_provider:
        std::option::Option<crate::model::VerifiedAccessTrustProvider>,
    _request_id: Option<String>,
}
impl CreateVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    pub fn verified_access_trust_provider(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessTrustProvider> {
        self.verified_access_trust_provider.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVerifiedAccessTrustProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVerifiedAccessTrustProviderOutput`](crate::output::CreateVerifiedAccessTrustProviderOutput).
pub mod create_verified_access_trust_provider_output {

    /// A builder for [`CreateVerifiedAccessTrustProviderOutput`](crate::output::CreateVerifiedAccessTrustProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_trust_provider:
            std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn verified_access_trust_provider(
            mut self,
            input: crate::model::VerifiedAccessTrustProvider,
        ) -> Self {
            self.verified_access_trust_provider = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn set_verified_access_trust_provider(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        ) -> Self {
            self.verified_access_trust_provider = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVerifiedAccessTrustProviderOutput`](crate::output::CreateVerifiedAccessTrustProviderOutput).
        pub fn build(self) -> crate::output::CreateVerifiedAccessTrustProviderOutput {
            crate::output::CreateVerifiedAccessTrustProviderOutput {
                verified_access_trust_provider: self.verified_access_trust_provider,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVerifiedAccessTrustProviderOutput {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessTrustProviderOutput`](crate::output::CreateVerifiedAccessTrustProviderOutput).
    pub fn builder() -> crate::output::create_verified_access_trust_provider_output::Builder {
        crate::output::create_verified_access_trust_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVerifiedAccessInstanceOutput {
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    #[doc(hidden)]
    pub verified_access_instance: std::option::Option<crate::model::VerifiedAccessInstance>,
    _request_id: Option<String>,
}
impl CreateVerifiedAccessInstanceOutput {
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessInstance> {
        self.verified_access_instance.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVerifiedAccessInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVerifiedAccessInstanceOutput`](crate::output::CreateVerifiedAccessInstanceOutput).
pub mod create_verified_access_instance_output {

    /// A builder for [`CreateVerifiedAccessInstanceOutput`](crate::output::CreateVerifiedAccessInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_instance:
            std::option::Option<crate::model::VerifiedAccessInstance>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn verified_access_instance(
            mut self,
            input: crate::model::VerifiedAccessInstance,
        ) -> Self {
            self.verified_access_instance = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn set_verified_access_instance(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessInstance>,
        ) -> Self {
            self.verified_access_instance = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVerifiedAccessInstanceOutput`](crate::output::CreateVerifiedAccessInstanceOutput).
        pub fn build(self) -> crate::output::CreateVerifiedAccessInstanceOutput {
            crate::output::CreateVerifiedAccessInstanceOutput {
                verified_access_instance: self.verified_access_instance,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVerifiedAccessInstanceOutput {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessInstanceOutput`](crate::output::CreateVerifiedAccessInstanceOutput).
    pub fn builder() -> crate::output::create_verified_access_instance_output::Builder {
        crate::output::create_verified_access_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVerifiedAccessGroupOutput {
    /// <p>The ID of the Verified Access group.</p>
    #[doc(hidden)]
    pub verified_access_group: std::option::Option<crate::model::VerifiedAccessGroup>,
    _request_id: Option<String>,
}
impl CreateVerifiedAccessGroupOutput {
    /// <p>The ID of the Verified Access group.</p>
    pub fn verified_access_group(&self) -> std::option::Option<&crate::model::VerifiedAccessGroup> {
        self.verified_access_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVerifiedAccessGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVerifiedAccessGroupOutput`](crate::output::CreateVerifiedAccessGroupOutput).
pub mod create_verified_access_group_output {

    /// A builder for [`CreateVerifiedAccessGroupOutput`](crate::output::CreateVerifiedAccessGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_group: std::option::Option<crate::model::VerifiedAccessGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Verified Access group.</p>
        pub fn verified_access_group(mut self, input: crate::model::VerifiedAccessGroup) -> Self {
            self.verified_access_group = Some(input);
            self
        }
        /// <p>The ID of the Verified Access group.</p>
        pub fn set_verified_access_group(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessGroup>,
        ) -> Self {
            self.verified_access_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVerifiedAccessGroupOutput`](crate::output::CreateVerifiedAccessGroupOutput).
        pub fn build(self) -> crate::output::CreateVerifiedAccessGroupOutput {
            crate::output::CreateVerifiedAccessGroupOutput {
                verified_access_group: self.verified_access_group,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVerifiedAccessGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessGroupOutput`](crate::output::CreateVerifiedAccessGroupOutput).
    pub fn builder() -> crate::output::create_verified_access_group_output::Builder {
        crate::output::create_verified_access_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVerifiedAccessEndpointOutput {
    /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
    #[doc(hidden)]
    pub verified_access_endpoint: std::option::Option<crate::model::VerifiedAccessEndpoint>,
    _request_id: Option<String>,
}
impl CreateVerifiedAccessEndpointOutput {
    /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
    pub fn verified_access_endpoint(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessEndpoint> {
        self.verified_access_endpoint.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVerifiedAccessEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVerifiedAccessEndpointOutput`](crate::output::CreateVerifiedAccessEndpointOutput).
pub mod create_verified_access_endpoint_output {

    /// A builder for [`CreateVerifiedAccessEndpointOutput`](crate::output::CreateVerifiedAccessEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_endpoint:
            std::option::Option<crate::model::VerifiedAccessEndpoint>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
        pub fn verified_access_endpoint(
            mut self,
            input: crate::model::VerifiedAccessEndpoint,
        ) -> Self {
            self.verified_access_endpoint = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access endpoint.</p>
        pub fn set_verified_access_endpoint(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessEndpoint>,
        ) -> Self {
            self.verified_access_endpoint = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVerifiedAccessEndpointOutput`](crate::output::CreateVerifiedAccessEndpointOutput).
        pub fn build(self) -> crate::output::CreateVerifiedAccessEndpointOutput {
            crate::output::CreateVerifiedAccessEndpointOutput {
                verified_access_endpoint: self.verified_access_endpoint,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVerifiedAccessEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessEndpointOutput`](crate::output::CreateVerifiedAccessEndpointOutput).
    pub fn builder() -> crate::output::create_verified_access_endpoint_output::Builder {
        crate::output::create_verified_access_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the VPC attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the VPC attachment.</p>
    pub fn transit_gateway_vpc_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayVpcAttachment> {
        self.transit_gateway_vpc_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayVpcAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput).
pub mod create_transit_gateway_vpc_attachment_output {

    /// A builder for [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPC attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            input: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(input);
            self
        }
        /// <p>Information about the VPC attachment.</p>
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayVpcAttachmentOutput {
            crate::output::CreateTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput).
    pub fn builder() -> crate::output::create_transit_gateway_vpc_attachment_output::Builder {
        crate::output::create_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayRouteTableAnnouncementOutput {
    /// <p>Provides details about the transit gateway route table announcement.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table_announcement:
        std::option::Option<crate::model::TransitGatewayRouteTableAnnouncement>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayRouteTableAnnouncementOutput {
    /// <p>Provides details about the transit gateway route table announcement.</p>
    pub fn transit_gateway_route_table_announcement(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayRouteTableAnnouncement> {
        self.transit_gateway_route_table_announcement.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayRouteTableAnnouncementOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayRouteTableAnnouncementOutput`](crate::output::CreateTransitGatewayRouteTableAnnouncementOutput).
pub mod create_transit_gateway_route_table_announcement_output {

    /// A builder for [`CreateTransitGatewayRouteTableAnnouncementOutput`](crate::output::CreateTransitGatewayRouteTableAnnouncementOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table_announcement:
            std::option::Option<crate::model::TransitGatewayRouteTableAnnouncement>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides details about the transit gateway route table announcement.</p>
        pub fn transit_gateway_route_table_announcement(
            mut self,
            input: crate::model::TransitGatewayRouteTableAnnouncement,
        ) -> Self {
            self.transit_gateway_route_table_announcement = Some(input);
            self
        }
        /// <p>Provides details about the transit gateway route table announcement.</p>
        pub fn set_transit_gateway_route_table_announcement(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRouteTableAnnouncement>,
        ) -> Self {
            self.transit_gateway_route_table_announcement = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayRouteTableAnnouncementOutput`](crate::output::CreateTransitGatewayRouteTableAnnouncementOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayRouteTableAnnouncementOutput {
            crate::output::CreateTransitGatewayRouteTableAnnouncementOutput {
                transit_gateway_route_table_announcement: self
                    .transit_gateway_route_table_announcement,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayRouteTableAnnouncementOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteTableAnnouncementOutput`](crate::output::CreateTransitGatewayRouteTableAnnouncementOutput).
    pub fn builder(
    ) -> crate::output::create_transit_gateway_route_table_announcement_output::Builder {
        crate::output::create_transit_gateway_route_table_announcement_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayRouteTableOutput {
    /// <p>Information about the transit gateway route table.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table: std::option::Option<crate::model::TransitGatewayRouteTable>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayRouteTableOutput {
    /// <p>Information about the transit gateway route table.</p>
    pub fn transit_gateway_route_table(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayRouteTable> {
        self.transit_gateway_route_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput).
pub mod create_transit_gateway_route_table_output {

    /// A builder for [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table:
            std::option::Option<crate::model::TransitGatewayRouteTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the transit gateway route table.</p>
        pub fn transit_gateway_route_table(
            mut self,
            input: crate::model::TransitGatewayRouteTable,
        ) -> Self {
            self.transit_gateway_route_table = Some(input);
            self
        }
        /// <p>Information about the transit gateway route table.</p>
        pub fn set_transit_gateway_route_table(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRouteTable>,
        ) -> Self {
            self.transit_gateway_route_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayRouteTableOutput {
            crate::output::CreateTransitGatewayRouteTableOutput {
                transit_gateway_route_table: self.transit_gateway_route_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput).
    pub fn builder() -> crate::output::create_transit_gateway_route_table_output::Builder {
        crate::output::create_transit_gateway_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayRouteOutput {
    /// <p>Information about the route.</p>
    #[doc(hidden)]
    pub route: std::option::Option<crate::model::TransitGatewayRoute>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub fn route(&self) -> std::option::Option<&crate::model::TransitGatewayRoute> {
        self.route.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput).
pub mod create_transit_gateway_route_output {

    /// A builder for [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::TransitGatewayRoute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, input: crate::model::TransitGatewayRoute) -> Self {
            self.route = Some(input);
            self
        }
        /// <p>Information about the route.</p>
        pub fn set_route(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayRoute>,
        ) -> Self {
            self.route = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayRouteOutput {
            crate::output::CreateTransitGatewayRouteOutput {
                route: self.route,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput).
    pub fn builder() -> crate::output::create_transit_gateway_route_output::Builder {
        crate::output::create_transit_gateway_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the prefix list reference.</p>
    #[doc(hidden)]
    pub transit_gateway_prefix_list_reference:
        std::option::Option<crate::model::TransitGatewayPrefixListReference>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the prefix list reference.</p>
    pub fn transit_gateway_prefix_list_reference(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPrefixListReference> {
        self.transit_gateway_prefix_list_reference.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayPrefixListReferenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput).
pub mod create_transit_gateway_prefix_list_reference_output {

    /// A builder for [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_reference:
            std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the prefix list reference.</p>
        pub fn transit_gateway_prefix_list_reference(
            mut self,
            input: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = Some(input);
            self
        }
        /// <p>Information about the prefix list reference.</p>
        pub fn set_transit_gateway_prefix_list_reference(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayPrefixListReferenceOutput {
            crate::output::CreateTransitGatewayPrefixListReferenceOutput {
                transit_gateway_prefix_list_reference: self.transit_gateway_prefix_list_reference,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayPrefixListReferenceOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput).
    pub fn builder() -> crate::output::create_transit_gateway_prefix_list_reference_output::Builder
    {
        crate::output::create_transit_gateway_prefix_list_reference_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayPolicyTableOutput {
    /// <p>Describes the created transit gateway policy table.</p>
    #[doc(hidden)]
    pub transit_gateway_policy_table: std::option::Option<crate::model::TransitGatewayPolicyTable>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayPolicyTableOutput {
    /// <p>Describes the created transit gateway policy table.</p>
    pub fn transit_gateway_policy_table(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPolicyTable> {
        self.transit_gateway_policy_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayPolicyTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayPolicyTableOutput`](crate::output::CreateTransitGatewayPolicyTableOutput).
pub mod create_transit_gateway_policy_table_output {

    /// A builder for [`CreateTransitGatewayPolicyTableOutput`](crate::output::CreateTransitGatewayPolicyTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_policy_table:
            std::option::Option<crate::model::TransitGatewayPolicyTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the created transit gateway policy table.</p>
        pub fn transit_gateway_policy_table(
            mut self,
            input: crate::model::TransitGatewayPolicyTable,
        ) -> Self {
            self.transit_gateway_policy_table = Some(input);
            self
        }
        /// <p>Describes the created transit gateway policy table.</p>
        pub fn set_transit_gateway_policy_table(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPolicyTable>,
        ) -> Self {
            self.transit_gateway_policy_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayPolicyTableOutput`](crate::output::CreateTransitGatewayPolicyTableOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayPolicyTableOutput {
            crate::output::CreateTransitGatewayPolicyTableOutput {
                transit_gateway_policy_table: self.transit_gateway_policy_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayPolicyTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPolicyTableOutput`](crate::output::CreateTransitGatewayPolicyTableOutput).
    pub fn builder() -> crate::output::create_transit_gateway_policy_table_output::Builder {
        crate::output::create_transit_gateway_policy_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub fn transit_gateway_peering_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPeeringAttachment> {
        self.transit_gateway_peering_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayPeeringAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput).
pub mod create_transit_gateway_peering_attachment_output {

    /// A builder for [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            input: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(input);
            self
        }
        /// <p>The transit gateway peering attachment.</p>
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayPeeringAttachmentOutput {
            crate::output::CreateTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput).
    pub fn builder() -> crate::output::create_transit_gateway_peering_attachment_output::Builder {
        crate::output::create_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the transit gateway multicast domain.</p>
    #[doc(hidden)]
    pub transit_gateway_multicast_domain:
        std::option::Option<crate::model::TransitGatewayMulticastDomain>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the transit gateway multicast domain.</p>
    pub fn transit_gateway_multicast_domain(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDomain> {
        self.transit_gateway_multicast_domain.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayMulticastDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput).
pub mod create_transit_gateway_multicast_domain_output {

    /// A builder for [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_multicast_domain:
            std::option::Option<crate::model::TransitGatewayMulticastDomain>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the transit gateway multicast domain.</p>
        pub fn transit_gateway_multicast_domain(
            mut self,
            input: crate::model::TransitGatewayMulticastDomain,
        ) -> Self {
            self.transit_gateway_multicast_domain = Some(input);
            self
        }
        /// <p>Information about the transit gateway multicast domain.</p>
        pub fn set_transit_gateway_multicast_domain(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastDomain>,
        ) -> Self {
            self.transit_gateway_multicast_domain = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayMulticastDomainOutput {
            crate::output::CreateTransitGatewayMulticastDomainOutput {
                transit_gateway_multicast_domain: self.transit_gateway_multicast_domain,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput).
    pub fn builder() -> crate::output::create_transit_gateway_multicast_domain_output::Builder {
        crate::output::create_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayConnectPeerOutput {
    /// <p>Information about the Connect peer.</p>
    #[doc(hidden)]
    pub transit_gateway_connect_peer: std::option::Option<crate::model::TransitGatewayConnectPeer>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayConnectPeerOutput {
    /// <p>Information about the Connect peer.</p>
    pub fn transit_gateway_connect_peer(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayConnectPeer> {
        self.transit_gateway_connect_peer.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayConnectPeerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput).
pub mod create_transit_gateway_connect_peer_output {

    /// A builder for [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect_peer:
            std::option::Option<crate::model::TransitGatewayConnectPeer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Connect peer.</p>
        pub fn transit_gateway_connect_peer(
            mut self,
            input: crate::model::TransitGatewayConnectPeer,
        ) -> Self {
            self.transit_gateway_connect_peer = Some(input);
            self
        }
        /// <p>Information about the Connect peer.</p>
        pub fn set_transit_gateway_connect_peer(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayConnectPeer>,
        ) -> Self {
            self.transit_gateway_connect_peer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayConnectPeerOutput {
            crate::output::CreateTransitGatewayConnectPeerOutput {
                transit_gateway_connect_peer: self.transit_gateway_connect_peer,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayConnectPeerOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput).
    pub fn builder() -> crate::output::create_transit_gateway_connect_peer_output::Builder {
        crate::output::create_transit_gateway_connect_peer_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayConnectOutput {
    /// <p>Information about the Connect attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_connect: std::option::Option<crate::model::TransitGatewayConnect>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayConnectOutput {
    /// <p>Information about the Connect attachment.</p>
    pub fn transit_gateway_connect(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayConnect> {
        self.transit_gateway_connect.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayConnectOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput).
pub mod create_transit_gateway_connect_output {

    /// A builder for [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect:
            std::option::Option<crate::model::TransitGatewayConnect>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Connect attachment.</p>
        pub fn transit_gateway_connect(
            mut self,
            input: crate::model::TransitGatewayConnect,
        ) -> Self {
            self.transit_gateway_connect = Some(input);
            self
        }
        /// <p>Information about the Connect attachment.</p>
        pub fn set_transit_gateway_connect(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayConnect>,
        ) -> Self {
            self.transit_gateway_connect = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayConnectOutput {
            crate::output::CreateTransitGatewayConnectOutput {
                transit_gateway_connect: self.transit_gateway_connect,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayConnectOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput).
    pub fn builder() -> crate::output::create_transit_gateway_connect_output::Builder {
        crate::output::create_transit_gateway_connect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTransitGatewayOutput {
    /// <p>Information about the transit gateway.</p>
    #[doc(hidden)]
    pub transit_gateway: std::option::Option<crate::model::TransitGateway>,
    _request_id: Option<String>,
}
impl CreateTransitGatewayOutput {
    /// <p>Information about the transit gateway.</p>
    pub fn transit_gateway(&self) -> std::option::Option<&crate::model::TransitGateway> {
        self.transit_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateTransitGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput).
pub mod create_transit_gateway_output {

    /// A builder for [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway: std::option::Option<crate::model::TransitGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the transit gateway.</p>
        pub fn transit_gateway(mut self, input: crate::model::TransitGateway) -> Self {
            self.transit_gateway = Some(input);
            self
        }
        /// <p>Information about the transit gateway.</p>
        pub fn set_transit_gateway(
            mut self,
            input: std::option::Option<crate::model::TransitGateway>,
        ) -> Self {
            self.transit_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput).
        pub fn build(self) -> crate::output::CreateTransitGatewayOutput {
            crate::output::CreateTransitGatewayOutput {
                transit_gateway: self.transit_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTransitGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput).
    pub fn builder() -> crate::output::create_transit_gateway_output::Builder {
        crate::output::create_transit_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTrafficMirrorTargetOutput {
    /// <p>Information about the Traffic Mirror target.</p>
    #[doc(hidden)]
    pub traffic_mirror_target: std::option::Option<crate::model::TrafficMirrorTarget>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateTrafficMirrorTargetOutput {
    /// <p>Information about the Traffic Mirror target.</p>
    pub fn traffic_mirror_target(&self) -> std::option::Option<&crate::model::TrafficMirrorTarget> {
        self.traffic_mirror_target.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateTrafficMirrorTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput).
pub mod create_traffic_mirror_target_output {

    /// A builder for [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_target: std::option::Option<crate::model::TrafficMirrorTarget>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror target.</p>
        pub fn traffic_mirror_target(mut self, input: crate::model::TrafficMirrorTarget) -> Self {
            self.traffic_mirror_target = Some(input);
            self
        }
        /// <p>Information about the Traffic Mirror target.</p>
        pub fn set_traffic_mirror_target(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorTarget>,
        ) -> Self {
            self.traffic_mirror_target = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput).
        pub fn build(self) -> crate::output::CreateTrafficMirrorTargetOutput {
            crate::output::CreateTrafficMirrorTargetOutput {
                traffic_mirror_target: self.traffic_mirror_target,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTrafficMirrorTargetOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput).
    pub fn builder() -> crate::output::create_traffic_mirror_target_output::Builder {
        crate::output::create_traffic_mirror_target_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTrafficMirrorSessionOutput {
    /// <p>Information about the Traffic Mirror session.</p>
    #[doc(hidden)]
    pub traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateTrafficMirrorSessionOutput {
    /// <p>Information about the Traffic Mirror session.</p>
    pub fn traffic_mirror_session(
        &self,
    ) -> std::option::Option<&crate::model::TrafficMirrorSession> {
        self.traffic_mirror_session.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateTrafficMirrorSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput).
pub mod create_traffic_mirror_session_output {

    /// A builder for [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror session.</p>
        pub fn traffic_mirror_session(mut self, input: crate::model::TrafficMirrorSession) -> Self {
            self.traffic_mirror_session = Some(input);
            self
        }
        /// <p>Information about the Traffic Mirror session.</p>
        pub fn set_traffic_mirror_session(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorSession>,
        ) -> Self {
            self.traffic_mirror_session = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput).
        pub fn build(self) -> crate::output::CreateTrafficMirrorSessionOutput {
            crate::output::CreateTrafficMirrorSessionOutput {
                traffic_mirror_session: self.traffic_mirror_session,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTrafficMirrorSessionOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput).
    pub fn builder() -> crate::output::create_traffic_mirror_session_output::Builder {
        crate::output::create_traffic_mirror_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTrafficMirrorFilterRuleOutput {
    /// <p>The Traffic Mirror rule.</p>
    #[doc(hidden)]
    pub traffic_mirror_filter_rule: std::option::Option<crate::model::TrafficMirrorFilterRule>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateTrafficMirrorFilterRuleOutput {
    /// <p>The Traffic Mirror rule.</p>
    pub fn traffic_mirror_filter_rule(
        &self,
    ) -> std::option::Option<&crate::model::TrafficMirrorFilterRule> {
        self.traffic_mirror_filter_rule.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateTrafficMirrorFilterRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput).
pub mod create_traffic_mirror_filter_rule_output {

    /// A builder for [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_rule:
            std::option::Option<crate::model::TrafficMirrorFilterRule>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Traffic Mirror rule.</p>
        pub fn traffic_mirror_filter_rule(
            mut self,
            input: crate::model::TrafficMirrorFilterRule,
        ) -> Self {
            self.traffic_mirror_filter_rule = Some(input);
            self
        }
        /// <p>The Traffic Mirror rule.</p>
        pub fn set_traffic_mirror_filter_rule(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorFilterRule>,
        ) -> Self {
            self.traffic_mirror_filter_rule = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput).
        pub fn build(self) -> crate::output::CreateTrafficMirrorFilterRuleOutput {
            crate::output::CreateTrafficMirrorFilterRuleOutput {
                traffic_mirror_filter_rule: self.traffic_mirror_filter_rule,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTrafficMirrorFilterRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput).
    pub fn builder() -> crate::output::create_traffic_mirror_filter_rule_output::Builder {
        crate::output::create_traffic_mirror_filter_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTrafficMirrorFilterOutput {
    /// <p>Information about the Traffic Mirror filter.</p>
    #[doc(hidden)]
    pub traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateTrafficMirrorFilterOutput {
    /// <p>Information about the Traffic Mirror filter.</p>
    pub fn traffic_mirror_filter(&self) -> std::option::Option<&crate::model::TrafficMirrorFilter> {
        self.traffic_mirror_filter.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateTrafficMirrorFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput).
pub mod create_traffic_mirror_filter_output {

    /// A builder for [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror filter.</p>
        pub fn traffic_mirror_filter(mut self, input: crate::model::TrafficMirrorFilter) -> Self {
            self.traffic_mirror_filter = Some(input);
            self
        }
        /// <p>Information about the Traffic Mirror filter.</p>
        pub fn set_traffic_mirror_filter(
            mut self,
            input: std::option::Option<crate::model::TrafficMirrorFilter>,
        ) -> Self {
            self.traffic_mirror_filter = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput).
        pub fn build(self) -> crate::output::CreateTrafficMirrorFilterOutput {
            crate::output::CreateTrafficMirrorFilterOutput {
                traffic_mirror_filter: self.traffic_mirror_filter,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTrafficMirrorFilterOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput).
    pub fn builder() -> crate::output::create_traffic_mirror_filter_output::Builder {
        crate::output::create_traffic_mirror_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTagsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateTagsOutput`](crate::output::CreateTagsOutput).
pub mod create_tags_output {

    /// A builder for [`CreateTagsOutput`](crate::output::CreateTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTagsOutput`](crate::output::CreateTagsOutput).
        pub fn build(self) -> crate::output::CreateTagsOutput {
            crate::output::CreateTagsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateTagsOutput {
    /// Creates a new builder-style object to manufacture [`CreateTagsOutput`](crate::output::CreateTagsOutput).
    pub fn builder() -> crate::output::create_tags_output::Builder {
        crate::output::create_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSubnetCidrReservationOutput {
    /// <p>Information about the created subnet CIDR reservation.</p>
    #[doc(hidden)]
    pub subnet_cidr_reservation: std::option::Option<crate::model::SubnetCidrReservation>,
    _request_id: Option<String>,
}
impl CreateSubnetCidrReservationOutput {
    /// <p>Information about the created subnet CIDR reservation.</p>
    pub fn subnet_cidr_reservation(
        &self,
    ) -> std::option::Option<&crate::model::SubnetCidrReservation> {
        self.subnet_cidr_reservation.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSubnetCidrReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSubnetCidrReservationOutput`](crate::output::CreateSubnetCidrReservationOutput).
pub mod create_subnet_cidr_reservation_output {

    /// A builder for [`CreateSubnetCidrReservationOutput`](crate::output::CreateSubnetCidrReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet_cidr_reservation:
            std::option::Option<crate::model::SubnetCidrReservation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the created subnet CIDR reservation.</p>
        pub fn subnet_cidr_reservation(
            mut self,
            input: crate::model::SubnetCidrReservation,
        ) -> Self {
            self.subnet_cidr_reservation = Some(input);
            self
        }
        /// <p>Information about the created subnet CIDR reservation.</p>
        pub fn set_subnet_cidr_reservation(
            mut self,
            input: std::option::Option<crate::model::SubnetCidrReservation>,
        ) -> Self {
            self.subnet_cidr_reservation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSubnetCidrReservationOutput`](crate::output::CreateSubnetCidrReservationOutput).
        pub fn build(self) -> crate::output::CreateSubnetCidrReservationOutput {
            crate::output::CreateSubnetCidrReservationOutput {
                subnet_cidr_reservation: self.subnet_cidr_reservation,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSubnetCidrReservationOutput {
    /// Creates a new builder-style object to manufacture [`CreateSubnetCidrReservationOutput`](crate::output::CreateSubnetCidrReservationOutput).
    pub fn builder() -> crate::output::create_subnet_cidr_reservation_output::Builder {
        crate::output::create_subnet_cidr_reservation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSubnetOutput {
    /// <p>Information about the subnet.</p>
    #[doc(hidden)]
    pub subnet: std::option::Option<crate::model::Subnet>,
    _request_id: Option<String>,
}
impl CreateSubnetOutput {
    /// <p>Information about the subnet.</p>
    pub fn subnet(&self) -> std::option::Option<&crate::model::Subnet> {
        self.subnet.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSubnetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSubnetOutput`](crate::output::CreateSubnetOutput).
pub mod create_subnet_output {

    /// A builder for [`CreateSubnetOutput`](crate::output::CreateSubnetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet: std::option::Option<crate::model::Subnet>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the subnet.</p>
        pub fn subnet(mut self, input: crate::model::Subnet) -> Self {
            self.subnet = Some(input);
            self
        }
        /// <p>Information about the subnet.</p>
        pub fn set_subnet(mut self, input: std::option::Option<crate::model::Subnet>) -> Self {
            self.subnet = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSubnetOutput`](crate::output::CreateSubnetOutput).
        pub fn build(self) -> crate::output::CreateSubnetOutput {
            crate::output::CreateSubnetOutput {
                subnet: self.subnet,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSubnetOutput {
    /// Creates a new builder-style object to manufacture [`CreateSubnetOutput`](crate::output::CreateSubnetOutput).
    pub fn builder() -> crate::output::create_subnet_output::Builder {
        crate::output::create_subnet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStoreImageTaskOutput {
    /// <p>The name of the stored AMI object in the S3 bucket.</p>
    #[doc(hidden)]
    pub object_key: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateStoreImageTaskOutput {
    /// <p>The name of the stored AMI object in the S3 bucket.</p>
    pub fn object_key(&self) -> std::option::Option<&str> {
        self.object_key.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateStoreImageTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput).
pub mod create_store_image_task_output {

    /// A builder for [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) object_key: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the stored AMI object in the S3 bucket.</p>
        pub fn object_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.object_key = Some(input.into());
            self
        }
        /// <p>The name of the stored AMI object in the S3 bucket.</p>
        pub fn set_object_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.object_key = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput).
        pub fn build(self) -> crate::output::CreateStoreImageTaskOutput {
            crate::output::CreateStoreImageTaskOutput {
                object_key: self.object_key,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateStoreImageTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput).
    pub fn builder() -> crate::output::create_store_image_task_output::Builder {
        crate::output::create_store_image_task_output::Builder::default()
    }
}

/// <p>Contains the output of CreateSpotDatafeedSubscription.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSpotDatafeedSubscriptionOutput {
    /// <p>The Spot Instance data feed subscription.</p>
    #[doc(hidden)]
    pub spot_datafeed_subscription: std::option::Option<crate::model::SpotDatafeedSubscription>,
    _request_id: Option<String>,
}
impl CreateSpotDatafeedSubscriptionOutput {
    /// <p>The Spot Instance data feed subscription.</p>
    pub fn spot_datafeed_subscription(
        &self,
    ) -> std::option::Option<&crate::model::SpotDatafeedSubscription> {
        self.spot_datafeed_subscription.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSpotDatafeedSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput).
pub mod create_spot_datafeed_subscription_output {

    /// A builder for [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_datafeed_subscription:
            std::option::Option<crate::model::SpotDatafeedSubscription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Spot Instance data feed subscription.</p>
        pub fn spot_datafeed_subscription(
            mut self,
            input: crate::model::SpotDatafeedSubscription,
        ) -> Self {
            self.spot_datafeed_subscription = Some(input);
            self
        }
        /// <p>The Spot Instance data feed subscription.</p>
        pub fn set_spot_datafeed_subscription(
            mut self,
            input: std::option::Option<crate::model::SpotDatafeedSubscription>,
        ) -> Self {
            self.spot_datafeed_subscription = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput).
        pub fn build(self) -> crate::output::CreateSpotDatafeedSubscriptionOutput {
            crate::output::CreateSpotDatafeedSubscriptionOutput {
                spot_datafeed_subscription: self.spot_datafeed_subscription,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSpotDatafeedSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput).
    pub fn builder() -> crate::output::create_spot_datafeed_subscription_output::Builder {
        crate::output::create_spot_datafeed_subscription_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSnapshotsOutput {
    /// <p>List of snapshots.</p>
    #[doc(hidden)]
    pub snapshots: std::option::Option<std::vec::Vec<crate::model::SnapshotInfo>>,
    _request_id: Option<String>,
}
impl CreateSnapshotsOutput {
    /// <p>List of snapshots.</p>
    pub fn snapshots(&self) -> std::option::Option<&[crate::model::SnapshotInfo]> {
        self.snapshots.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateSnapshotsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput).
pub mod create_snapshots_output {

    /// A builder for [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshots: std::option::Option<std::vec::Vec<crate::model::SnapshotInfo>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `snapshots`.
        ///
        /// To override the contents of this collection use [`set_snapshots`](Self::set_snapshots).
        ///
        /// <p>List of snapshots.</p>
        pub fn snapshots(mut self, input: crate::model::SnapshotInfo) -> Self {
            let mut v = self.snapshots.unwrap_or_default();
            v.push(input);
            self.snapshots = Some(v);
            self
        }
        /// <p>List of snapshots.</p>
        pub fn set_snapshots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SnapshotInfo>>,
        ) -> Self {
            self.snapshots = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput).
        pub fn build(self) -> crate::output::CreateSnapshotsOutput {
            crate::output::CreateSnapshotsOutput {
                snapshots: self.snapshots,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput).
    pub fn builder() -> crate::output::create_snapshots_output::Builder {
        crate::output::create_snapshots_output::Builder::default()
    }
}

/// <p>Describes a snapshot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSnapshotOutput {
    /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
    #[doc(hidden)]
    pub data_encryption_key_id: std::option::Option<std::string::String>,
    /// <p>The description for the snapshot.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates whether the snapshot is encrypted.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The progress of the snapshot, as a percentage.</p>
    #[doc(hidden)]
    pub progress: std::option::Option<std::string::String>,
    /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The time stamp when the snapshot was initiated.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The snapshot state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::SnapshotState>,
    /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
    #[doc(hidden)]
    pub state_message: std::option::Option<std::string::String>,
    /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <code>CopySnapshot</code> action have an arbitrary volume ID that should not be used for any purpose.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    #[doc(hidden)]
    pub volume_size: std::option::Option<i32>,
    /// <p>The Amazon Web Services owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not the user-configured Amazon Web Services account alias set using the IAM console.</p>
    #[doc(hidden)]
    pub owner_alias: std::option::Option<std::string::String>,
    /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>Any tags assigned to the snapshot.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    #[doc(hidden)]
    pub storage_tier: std::option::Option<crate::model::StorageTier>,
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    #[doc(hidden)]
    pub restore_expiry_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateSnapshotOutput {
    /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
    pub fn data_encryption_key_id(&self) -> std::option::Option<&str> {
        self.data_encryption_key_id.as_deref()
    }
    /// <p>The description for the snapshot.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The progress of the snapshot, as a percentage.</p>
    pub fn progress(&self) -> std::option::Option<&str> {
        self.progress.as_deref()
    }
    /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The time stamp when the snapshot was initiated.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The snapshot state.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::SnapshotState> {
        self.state.as_ref()
    }
    /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
    pub fn state_message(&self) -> std::option::Option<&str> {
        self.state_message.as_deref()
    }
    /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <code>CopySnapshot</code> action have an arbitrary volume ID that should not be used for any purpose.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn volume_size(&self) -> std::option::Option<i32> {
        self.volume_size
    }
    /// <p>The Amazon Web Services owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not the user-configured Amazon Web Services account alias set using the IAM console.</p>
    pub fn owner_alias(&self) -> std::option::Option<&str> {
        self.owner_alias.as_deref()
    }
    /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>Any tags assigned to the snapshot.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    pub fn storage_tier(&self) -> std::option::Option<&crate::model::StorageTier> {
        self.storage_tier.as_ref()
    }
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    pub fn restore_expiry_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.restore_expiry_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput).
pub mod create_snapshot_output {

    /// A builder for [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_encryption_key_id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) state: std::option::Option<crate::model::SnapshotState>,
        pub(crate) state_message: std::option::Option<std::string::String>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) volume_size: std::option::Option<i32>,
        pub(crate) owner_alias: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) storage_tier: std::option::Option<crate::model::StorageTier>,
        pub(crate) restore_expiry_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
        pub fn data_encryption_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.data_encryption_key_id = Some(input.into());
            self
        }
        /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
        pub fn set_data_encryption_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.data_encryption_key_id = input;
            self
        }
        /// <p>The description for the snapshot.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description for the snapshot.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Indicates whether the snapshot is encrypted.</p>
        pub fn encrypted(mut self, input: bool) -> Self {
            self.encrypted = Some(input);
            self
        }
        /// <p>Indicates whether the snapshot is encrypted.</p>
        pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.encrypted = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.</p>
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
        pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the EBS snapshot.</p>
        pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_id = input;
            self
        }
        /// <p>The progress of the snapshot, as a percentage.</p>
        pub fn progress(mut self, input: impl Into<std::string::String>) -> Self {
            self.progress = Some(input.into());
            self
        }
        /// <p>The progress of the snapshot, as a percentage.</p>
        pub fn set_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.progress = input;
            self
        }
        /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        /// <p>The time stamp when the snapshot was initiated.</p>
        pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The time stamp when the snapshot was initiated.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>The snapshot state.</p>
        pub fn state(mut self, input: crate::model::SnapshotState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The snapshot state.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::SnapshotState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
        pub fn state_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.state_message = Some(input.into());
            self
        }
        /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by <code>DescribeSnapshots</code>.</p>
        pub fn set_state_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.state_message = input;
            self
        }
        /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <code>CopySnapshot</code> action have an arbitrary volume ID that should not be used for any purpose.</p>
        pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(input.into());
            self
        }
        /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <code>CopySnapshot</code> action have an arbitrary volume ID that should not be used for any purpose.</p>
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.volume_id = input;
            self
        }
        /// <p>The size of the volume, in GiB.</p>
        pub fn volume_size(mut self, input: i32) -> Self {
            self.volume_size = Some(input);
            self
        }
        /// <p>The size of the volume, in GiB.</p>
        pub fn set_volume_size(mut self, input: std::option::Option<i32>) -> Self {
            self.volume_size = input;
            self
        }
        /// <p>The Amazon Web Services owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not the user-configured Amazon Web Services account alias set using the IAM console.</p>
        pub fn owner_alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_alias = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not the user-configured Amazon Web Services account alias set using the IAM console.</p>
        pub fn set_owner_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_alias = input;
            self
        }
        /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">Amazon EBS local snapshots on Outposts</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags assigned to the snapshot.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags assigned to the snapshot.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
        pub fn storage_tier(mut self, input: crate::model::StorageTier) -> Self {
            self.storage_tier = Some(input);
            self
        }
        /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
        pub fn set_storage_tier(
            mut self,
            input: std::option::Option<crate::model::StorageTier>,
        ) -> Self {
            self.storage_tier = input;
            self
        }
        /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
        pub fn restore_expiry_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.restore_expiry_time = Some(input);
            self
        }
        /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
        pub fn set_restore_expiry_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.restore_expiry_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput).
        pub fn build(self) -> crate::output::CreateSnapshotOutput {
            crate::output::CreateSnapshotOutput {
                data_encryption_key_id: self.data_encryption_key_id,
                description: self.description,
                encrypted: self.encrypted,
                kms_key_id: self.kms_key_id,
                owner_id: self.owner_id,
                progress: self.progress,
                snapshot_id: self.snapshot_id,
                start_time: self.start_time,
                state: self.state,
                state_message: self.state_message,
                volume_id: self.volume_id,
                volume_size: self.volume_size,
                owner_alias: self.owner_alias,
                outpost_arn: self.outpost_arn,
                tags: self.tags,
                storage_tier: self.storage_tier,
                restore_expiry_time: self.restore_expiry_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput).
    pub fn builder() -> crate::output::create_snapshot_output::Builder {
        crate::output::create_snapshot_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSecurityGroupOutput {
    /// <p>The ID of the security group.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
    /// <p>The tags assigned to the security group.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl CreateSecurityGroupOutput {
    /// <p>The ID of the security group.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The tags assigned to the security group.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateSecurityGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput).
pub mod create_security_group_output {

    /// A builder for [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) group_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the security group.</p>
        pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.group_id = Some(input.into());
            self
        }
        /// <p>The ID of the security group.</p>
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.group_id = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags assigned to the security group.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags assigned to the security group.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput).
        pub fn build(self) -> crate::output::CreateSecurityGroupOutput {
            crate::output::CreateSecurityGroupOutput {
                group_id: self.group_id,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSecurityGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput).
    pub fn builder() -> crate::output::create_security_group_output::Builder {
        crate::output::create_security_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRouteTableOutput {
    /// <p>Information about the route table.</p>
    #[doc(hidden)]
    pub route_table: std::option::Option<crate::model::RouteTable>,
    _request_id: Option<String>,
}
impl CreateRouteTableOutput {
    /// <p>Information about the route table.</p>
    pub fn route_table(&self) -> std::option::Option<&crate::model::RouteTable> {
        self.route_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput).
pub mod create_route_table_output {

    /// A builder for [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route_table: std::option::Option<crate::model::RouteTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the route table.</p>
        pub fn route_table(mut self, input: crate::model::RouteTable) -> Self {
            self.route_table = Some(input);
            self
        }
        /// <p>Information about the route table.</p>
        pub fn set_route_table(
            mut self,
            input: std::option::Option<crate::model::RouteTable>,
        ) -> Self {
            self.route_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput).
        pub fn build(self) -> crate::output::CreateRouteTableOutput {
            crate::output::CreateRouteTableOutput {
                route_table: self.route_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput).
    pub fn builder() -> crate::output::create_route_table_output::Builder {
        crate::output::create_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRouteOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl CreateRouteOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for CreateRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateRouteOutput`](crate::output::CreateRouteOutput).
pub mod create_route_output {

    /// A builder for [`CreateRouteOutput`](crate::output::CreateRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateRouteOutput`](crate::output::CreateRouteOutput).
        pub fn build(self) -> crate::output::CreateRouteOutput {
            crate::output::CreateRouteOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateRouteOutput`](crate::output::CreateRouteOutput).
    pub fn builder() -> crate::output::create_route_output::Builder {
        crate::output::create_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateRestoreImageTaskOutput {
    /// <p>The AMI ID.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateRestoreImageTaskOutput {
    /// <p>The AMI ID.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateRestoreImageTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput).
pub mod create_restore_image_task_output {

    /// A builder for [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The AMI ID.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The AMI ID.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput).
        pub fn build(self) -> crate::output::CreateRestoreImageTaskOutput {
            crate::output::CreateRestoreImageTaskOutput {
                image_id: self.image_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateRestoreImageTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput).
    pub fn builder() -> crate::output::create_restore_image_task_output::Builder {
        crate::output::create_restore_image_task_output::Builder::default()
    }
}

/// <p>Contains the output of CreateReservedInstancesListing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateReservedInstancesListingOutput {
    /// <p>Information about the Standard Reserved Instance listing.</p>
    #[doc(hidden)]
    pub reserved_instances_listings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
    _request_id: Option<String>,
}
impl CreateReservedInstancesListingOutput {
    /// <p>Information about the Standard Reserved Instance listing.</p>
    pub fn reserved_instances_listings(
        &self,
    ) -> std::option::Option<&[crate::model::ReservedInstancesListing]> {
        self.reserved_instances_listings.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateReservedInstancesListingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput).
pub mod create_reserved_instances_listing_output {

    /// A builder for [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_listings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `reserved_instances_listings`.
        ///
        /// To override the contents of this collection use [`set_reserved_instances_listings`](Self::set_reserved_instances_listings).
        ///
        /// <p>Information about the Standard Reserved Instance listing.</p>
        pub fn reserved_instances_listings(
            mut self,
            input: crate::model::ReservedInstancesListing,
        ) -> Self {
            let mut v = self.reserved_instances_listings.unwrap_or_default();
            v.push(input);
            self.reserved_instances_listings = Some(v);
            self
        }
        /// <p>Information about the Standard Reserved Instance listing.</p>
        pub fn set_reserved_instances_listings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        ) -> Self {
            self.reserved_instances_listings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput).
        pub fn build(self) -> crate::output::CreateReservedInstancesListingOutput {
            crate::output::CreateReservedInstancesListingOutput {
                reserved_instances_listings: self.reserved_instances_listings,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateReservedInstancesListingOutput {
    /// Creates a new builder-style object to manufacture [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput).
    pub fn builder() -> crate::output::create_reserved_instances_listing_output::Builder {
        crate::output::create_reserved_instances_listing_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateReplaceRootVolumeTaskOutput {
    /// <p>Information about the root volume replacement task.</p>
    #[doc(hidden)]
    pub replace_root_volume_task: std::option::Option<crate::model::ReplaceRootVolumeTask>,
    _request_id: Option<String>,
}
impl CreateReplaceRootVolumeTaskOutput {
    /// <p>Information about the root volume replacement task.</p>
    pub fn replace_root_volume_task(
        &self,
    ) -> std::option::Option<&crate::model::ReplaceRootVolumeTask> {
        self.replace_root_volume_task.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateReplaceRootVolumeTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput).
pub mod create_replace_root_volume_task_output {

    /// A builder for [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replace_root_volume_task:
            std::option::Option<crate::model::ReplaceRootVolumeTask>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the root volume replacement task.</p>
        pub fn replace_root_volume_task(
            mut self,
            input: crate::model::ReplaceRootVolumeTask,
        ) -> Self {
            self.replace_root_volume_task = Some(input);
            self
        }
        /// <p>Information about the root volume replacement task.</p>
        pub fn set_replace_root_volume_task(
            mut self,
            input: std::option::Option<crate::model::ReplaceRootVolumeTask>,
        ) -> Self {
            self.replace_root_volume_task = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput).
        pub fn build(self) -> crate::output::CreateReplaceRootVolumeTaskOutput {
            crate::output::CreateReplaceRootVolumeTaskOutput {
                replace_root_volume_task: self.replace_root_volume_task,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateReplaceRootVolumeTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput).
    pub fn builder() -> crate::output::create_replace_root_volume_task_output::Builder {
        crate::output::create_replace_root_volume_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePublicIpv4PoolOutput {
    /// <p>The ID of the public IPv4 pool.</p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreatePublicIpv4PoolOutput {
    /// <p>The ID of the public IPv4 pool.</p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreatePublicIpv4PoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreatePublicIpv4PoolOutput`](crate::output::CreatePublicIpv4PoolOutput).
pub mod create_public_ipv4_pool_output {

    /// A builder for [`CreatePublicIpv4PoolOutput`](crate::output::CreatePublicIpv4PoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pool_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the public IPv4 pool.</p>
        pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.pool_id = Some(input.into());
            self
        }
        /// <p>The ID of the public IPv4 pool.</p>
        pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.pool_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreatePublicIpv4PoolOutput`](crate::output::CreatePublicIpv4PoolOutput).
        pub fn build(self) -> crate::output::CreatePublicIpv4PoolOutput {
            crate::output::CreatePublicIpv4PoolOutput {
                pool_id: self.pool_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreatePublicIpv4PoolOutput {
    /// Creates a new builder-style object to manufacture [`CreatePublicIpv4PoolOutput`](crate::output::CreatePublicIpv4PoolOutput).
    pub fn builder() -> crate::output::create_public_ipv4_pool_output::Builder {
        crate::output::create_public_ipv4_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePlacementGroupOutput {
    /// <p>Information about the placement group.</p>
    #[doc(hidden)]
    pub placement_group: std::option::Option<crate::model::PlacementGroup>,
    _request_id: Option<String>,
}
impl CreatePlacementGroupOutput {
    /// <p>Information about the placement group.</p>
    pub fn placement_group(&self) -> std::option::Option<&crate::model::PlacementGroup> {
        self.placement_group.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreatePlacementGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput).
pub mod create_placement_group_output {

    /// A builder for [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) placement_group: std::option::Option<crate::model::PlacementGroup>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the placement group.</p>
        pub fn placement_group(mut self, input: crate::model::PlacementGroup) -> Self {
            self.placement_group = Some(input);
            self
        }
        /// <p>Information about the placement group.</p>
        pub fn set_placement_group(
            mut self,
            input: std::option::Option<crate::model::PlacementGroup>,
        ) -> Self {
            self.placement_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput).
        pub fn build(self) -> crate::output::CreatePlacementGroupOutput {
            crate::output::CreatePlacementGroupOutput {
                placement_group: self.placement_group,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreatePlacementGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput).
    pub fn builder() -> crate::output::create_placement_group_output::Builder {
        crate::output::create_placement_group_output::Builder::default()
    }
}

/// <p>Contains the output of CreateNetworkInterfacePermission.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkInterfacePermissionOutput {
    /// <p>Information about the permission for the network interface.</p>
    #[doc(hidden)]
    pub interface_permission: std::option::Option<crate::model::NetworkInterfacePermission>,
    _request_id: Option<String>,
}
impl CreateNetworkInterfacePermissionOutput {
    /// <p>Information about the permission for the network interface.</p>
    pub fn interface_permission(
        &self,
    ) -> std::option::Option<&crate::model::NetworkInterfacePermission> {
        self.interface_permission.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateNetworkInterfacePermissionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput).
pub mod create_network_interface_permission_output {

    /// A builder for [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) interface_permission:
            std::option::Option<crate::model::NetworkInterfacePermission>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the permission for the network interface.</p>
        pub fn interface_permission(
            mut self,
            input: crate::model::NetworkInterfacePermission,
        ) -> Self {
            self.interface_permission = Some(input);
            self
        }
        /// <p>Information about the permission for the network interface.</p>
        pub fn set_interface_permission(
            mut self,
            input: std::option::Option<crate::model::NetworkInterfacePermission>,
        ) -> Self {
            self.interface_permission = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput).
        pub fn build(self) -> crate::output::CreateNetworkInterfacePermissionOutput {
            crate::output::CreateNetworkInterfacePermissionOutput {
                interface_permission: self.interface_permission,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNetworkInterfacePermissionOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput).
    pub fn builder() -> crate::output::create_network_interface_permission_output::Builder {
        crate::output::create_network_interface_permission_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkInterfaceOutput {
    /// <p>Information about the network interface.</p>
    #[doc(hidden)]
    pub network_interface: std::option::Option<crate::model::NetworkInterface>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateNetworkInterfaceOutput {
    /// <p>Information about the network interface.</p>
    pub fn network_interface(&self) -> std::option::Option<&crate::model::NetworkInterface> {
        self.network_interface.as_ref()
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateNetworkInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput).
pub mod create_network_interface_output {

    /// A builder for [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface: std::option::Option<crate::model::NetworkInterface>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the network interface.</p>
        pub fn network_interface(mut self, input: crate::model::NetworkInterface) -> Self {
            self.network_interface = Some(input);
            self
        }
        /// <p>Information about the network interface.</p>
        pub fn set_network_interface(
            mut self,
            input: std::option::Option<crate::model::NetworkInterface>,
        ) -> Self {
            self.network_interface = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput).
        pub fn build(self) -> crate::output::CreateNetworkInterfaceOutput {
            crate::output::CreateNetworkInterfaceOutput {
                network_interface: self.network_interface,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput).
    pub fn builder() -> crate::output::create_network_interface_output::Builder {
        crate::output::create_network_interface_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkInsightsPathOutput {
    /// <p>Information about the path.</p>
    #[doc(hidden)]
    pub network_insights_path: std::option::Option<crate::model::NetworkInsightsPath>,
    _request_id: Option<String>,
}
impl CreateNetworkInsightsPathOutput {
    /// <p>Information about the path.</p>
    pub fn network_insights_path(&self) -> std::option::Option<&crate::model::NetworkInsightsPath> {
        self.network_insights_path.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateNetworkInsightsPathOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput).
pub mod create_network_insights_path_output {

    /// A builder for [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_path: std::option::Option<crate::model::NetworkInsightsPath>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the path.</p>
        pub fn network_insights_path(mut self, input: crate::model::NetworkInsightsPath) -> Self {
            self.network_insights_path = Some(input);
            self
        }
        /// <p>Information about the path.</p>
        pub fn set_network_insights_path(
            mut self,
            input: std::option::Option<crate::model::NetworkInsightsPath>,
        ) -> Self {
            self.network_insights_path = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput).
        pub fn build(self) -> crate::output::CreateNetworkInsightsPathOutput {
            crate::output::CreateNetworkInsightsPathOutput {
                network_insights_path: self.network_insights_path,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNetworkInsightsPathOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput).
    pub fn builder() -> crate::output::create_network_insights_path_output::Builder {
        crate::output::create_network_insights_path_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkInsightsAccessScopeOutput {
    /// <p>The Network Access Scope.</p>
    #[doc(hidden)]
    pub network_insights_access_scope:
        std::option::Option<crate::model::NetworkInsightsAccessScope>,
    /// <p>The Network Access Scope content.</p>
    #[doc(hidden)]
    pub network_insights_access_scope_content:
        std::option::Option<crate::model::NetworkInsightsAccessScopeContent>,
    _request_id: Option<String>,
}
impl CreateNetworkInsightsAccessScopeOutput {
    /// <p>The Network Access Scope.</p>
    pub fn network_insights_access_scope(
        &self,
    ) -> std::option::Option<&crate::model::NetworkInsightsAccessScope> {
        self.network_insights_access_scope.as_ref()
    }
    /// <p>The Network Access Scope content.</p>
    pub fn network_insights_access_scope_content(
        &self,
    ) -> std::option::Option<&crate::model::NetworkInsightsAccessScopeContent> {
        self.network_insights_access_scope_content.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateNetworkInsightsAccessScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNetworkInsightsAccessScopeOutput`](crate::output::CreateNetworkInsightsAccessScopeOutput).
pub mod create_network_insights_access_scope_output {

    /// A builder for [`CreateNetworkInsightsAccessScopeOutput`](crate::output::CreateNetworkInsightsAccessScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_access_scope:
            std::option::Option<crate::model::NetworkInsightsAccessScope>,
        pub(crate) network_insights_access_scope_content:
            std::option::Option<crate::model::NetworkInsightsAccessScopeContent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Network Access Scope.</p>
        pub fn network_insights_access_scope(
            mut self,
            input: crate::model::NetworkInsightsAccessScope,
        ) -> Self {
            self.network_insights_access_scope = Some(input);
            self
        }
        /// <p>The Network Access Scope.</p>
        pub fn set_network_insights_access_scope(
            mut self,
            input: std::option::Option<crate::model::NetworkInsightsAccessScope>,
        ) -> Self {
            self.network_insights_access_scope = input;
            self
        }
        /// <p>The Network Access Scope content.</p>
        pub fn network_insights_access_scope_content(
            mut self,
            input: crate::model::NetworkInsightsAccessScopeContent,
        ) -> Self {
            self.network_insights_access_scope_content = Some(input);
            self
        }
        /// <p>The Network Access Scope content.</p>
        pub fn set_network_insights_access_scope_content(
            mut self,
            input: std::option::Option<crate::model::NetworkInsightsAccessScopeContent>,
        ) -> Self {
            self.network_insights_access_scope_content = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInsightsAccessScopeOutput`](crate::output::CreateNetworkInsightsAccessScopeOutput).
        pub fn build(self) -> crate::output::CreateNetworkInsightsAccessScopeOutput {
            crate::output::CreateNetworkInsightsAccessScopeOutput {
                network_insights_access_scope: self.network_insights_access_scope,
                network_insights_access_scope_content: self.network_insights_access_scope_content,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNetworkInsightsAccessScopeOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInsightsAccessScopeOutput`](crate::output::CreateNetworkInsightsAccessScopeOutput).
    pub fn builder() -> crate::output::create_network_insights_access_scope_output::Builder {
        crate::output::create_network_insights_access_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkAclEntryOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateNetworkAclEntryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput).
pub mod create_network_acl_entry_output {

    /// A builder for [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput).
        pub fn build(self) -> crate::output::CreateNetworkAclEntryOutput {
            crate::output::CreateNetworkAclEntryOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNetworkAclEntryOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput).
    pub fn builder() -> crate::output::create_network_acl_entry_output::Builder {
        crate::output::create_network_acl_entry_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNetworkAclOutput {
    /// <p>Information about the network ACL.</p>
    #[doc(hidden)]
    pub network_acl: std::option::Option<crate::model::NetworkAcl>,
    _request_id: Option<String>,
}
impl CreateNetworkAclOutput {
    /// <p>Information about the network ACL.</p>
    pub fn network_acl(&self) -> std::option::Option<&crate::model::NetworkAcl> {
        self.network_acl.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateNetworkAclOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput).
pub mod create_network_acl_output {

    /// A builder for [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_acl: std::option::Option<crate::model::NetworkAcl>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the network ACL.</p>
        pub fn network_acl(mut self, input: crate::model::NetworkAcl) -> Self {
            self.network_acl = Some(input);
            self
        }
        /// <p>Information about the network ACL.</p>
        pub fn set_network_acl(
            mut self,
            input: std::option::Option<crate::model::NetworkAcl>,
        ) -> Self {
            self.network_acl = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput).
        pub fn build(self) -> crate::output::CreateNetworkAclOutput {
            crate::output::CreateNetworkAclOutput {
                network_acl: self.network_acl,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNetworkAclOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput).
    pub fn builder() -> crate::output::create_network_acl_output::Builder {
        crate::output::create_network_acl_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateNatGatewayOutput {
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Information about the NAT gateway.</p>
    #[doc(hidden)]
    pub nat_gateway: std::option::Option<crate::model::NatGateway>,
    _request_id: Option<String>,
}
impl CreateNatGatewayOutput {
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Information about the NAT gateway.</p>
    pub fn nat_gateway(&self) -> std::option::Option<&crate::model::NatGateway> {
        self.nat_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateNatGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput).
pub mod create_nat_gateway_output {

    /// A builder for [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) nat_gateway: std::option::Option<crate::model::NatGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        /// <p>Information about the NAT gateway.</p>
        pub fn nat_gateway(mut self, input: crate::model::NatGateway) -> Self {
            self.nat_gateway = Some(input);
            self
        }
        /// <p>Information about the NAT gateway.</p>
        pub fn set_nat_gateway(
            mut self,
            input: std::option::Option<crate::model::NatGateway>,
        ) -> Self {
            self.nat_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput).
        pub fn build(self) -> crate::output::CreateNatGatewayOutput {
            crate::output::CreateNatGatewayOutput {
                client_token: self.client_token,
                nat_gateway: self.nat_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateNatGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput).
    pub fn builder() -> crate::output::create_nat_gateway_output::Builder {
        crate::output::create_nat_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    #[doc(hidden)]
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    _request_id: Option<String>,
}
impl CreateManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    pub fn prefix_list(&self) -> std::option::Option<&crate::model::ManagedPrefixList> {
        self.prefix_list.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateManagedPrefixListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput).
pub mod create_managed_prefix_list_output {

    /// A builder for [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, input: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(input);
            self
        }
        /// <p>Information about the prefix list.</p>
        pub fn set_prefix_list(
            mut self,
            input: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput).
        pub fn build(self) -> crate::output::CreateManagedPrefixListOutput {
            crate::output::CreateManagedPrefixListOutput {
                prefix_list: self.prefix_list,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateManagedPrefixListOutput {
    /// Creates a new builder-style object to manufacture [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput).
    pub fn builder() -> crate::output::create_managed_prefix_list_output::Builder {
        crate::output::create_managed_prefix_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLocalGatewayRouteTableVpcAssociationOutput {
    /// <p>Information about the association.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_vpc_association:
        std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
    _request_id: Option<String>,
}
impl CreateLocalGatewayRouteTableVpcAssociationOutput {
    /// <p>Information about the association.</p>
    pub fn local_gateway_route_table_vpc_association(
        &self,
    ) -> std::option::Option<&crate::model::LocalGatewayRouteTableVpcAssociation> {
        self.local_gateway_route_table_vpc_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLocalGatewayRouteTableVpcAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput).
pub mod create_local_gateway_route_table_vpc_association_output {

    /// A builder for [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_vpc_association:
            std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn local_gateway_route_table_vpc_association(
            mut self,
            input: crate::model::LocalGatewayRouteTableVpcAssociation,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = Some(input);
            self
        }
        /// <p>Information about the association.</p>
        pub fn set_local_gateway_route_table_vpc_association(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput).
        pub fn build(self) -> crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput {
            crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput {
                local_gateway_route_table_vpc_association: self
                    .local_gateway_route_table_vpc_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLocalGatewayRouteTableVpcAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput).
    pub fn builder(
    ) -> crate::output::create_local_gateway_route_table_vpc_association_output::Builder {
        crate::output::create_local_gateway_route_table_vpc_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
    /// <p>Information about the local gateway route table virtual interface group association.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_virtual_interface_group_association:
        std::option::Option<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
    _request_id: Option<String>,
}
impl CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
    /// <p>Information about the local gateway route table virtual interface group association.</p>
    pub fn local_gateway_route_table_virtual_interface_group_association(
        &self,
    ) -> std::option::Option<&crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>
    {
        self.local_gateway_route_table_virtual_interface_group_association
            .as_ref()
    }
}
impl aws_http::request_id::RequestId
    for CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
{
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
pub mod create_local_gateway_route_table_virtual_interface_group_association_output {

    /// A builder for [`CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_virtual_interface_group_association:
            std::option::Option<
                crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
            >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the local gateway route table virtual interface group association.</p>
        pub fn local_gateway_route_table_virtual_interface_group_association(
            mut self,
            input: crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
        ) -> Self {
            self.local_gateway_route_table_virtual_interface_group_association = Some(input);
            self
        }
        /// <p>Information about the local gateway route table virtual interface group association.</p>
        pub fn set_local_gateway_route_table_virtual_interface_group_association(
            mut self,
            input: std::option::Option<
                crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
            >,
        ) -> Self {
            self.local_gateway_route_table_virtual_interface_group_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
        pub fn build(
            self,
        ) -> crate::output::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput
        {
            crate::output::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
                local_gateway_route_table_virtual_interface_group_association: self
                    .local_gateway_route_table_virtual_interface_group_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationOutput).
    pub fn builder() -> crate::output::create_local_gateway_route_table_virtual_interface_group_association_output::Builder{
        crate::output::create_local_gateway_route_table_virtual_interface_group_association_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLocalGatewayRouteTableOutput {
    /// <p>Information about the local gateway route table.</p>
    #[doc(hidden)]
    pub local_gateway_route_table: std::option::Option<crate::model::LocalGatewayRouteTable>,
    _request_id: Option<String>,
}
impl CreateLocalGatewayRouteTableOutput {
    /// <p>Information about the local gateway route table.</p>
    pub fn local_gateway_route_table(
        &self,
    ) -> std::option::Option<&crate::model::LocalGatewayRouteTable> {
        self.local_gateway_route_table.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLocalGatewayRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLocalGatewayRouteTableOutput`](crate::output::CreateLocalGatewayRouteTableOutput).
pub mod create_local_gateway_route_table_output {

    /// A builder for [`CreateLocalGatewayRouteTableOutput`](crate::output::CreateLocalGatewayRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table:
            std::option::Option<crate::model::LocalGatewayRouteTable>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the local gateway route table.</p>
        pub fn local_gateway_route_table(
            mut self,
            input: crate::model::LocalGatewayRouteTable,
        ) -> Self {
            self.local_gateway_route_table = Some(input);
            self
        }
        /// <p>Information about the local gateway route table.</p>
        pub fn set_local_gateway_route_table(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRouteTable>,
        ) -> Self {
            self.local_gateway_route_table = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLocalGatewayRouteTableOutput`](crate::output::CreateLocalGatewayRouteTableOutput).
        pub fn build(self) -> crate::output::CreateLocalGatewayRouteTableOutput {
            crate::output::CreateLocalGatewayRouteTableOutput {
                local_gateway_route_table: self.local_gateway_route_table,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLocalGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteTableOutput`](crate::output::CreateLocalGatewayRouteTableOutput).
    pub fn builder() -> crate::output::create_local_gateway_route_table_output::Builder {
        crate::output::create_local_gateway_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLocalGatewayRouteOutput {
    /// <p>Information about the route.</p>
    #[doc(hidden)]
    pub route: std::option::Option<crate::model::LocalGatewayRoute>,
    _request_id: Option<String>,
}
impl CreateLocalGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub fn route(&self) -> std::option::Option<&crate::model::LocalGatewayRoute> {
        self.route.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLocalGatewayRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput).
pub mod create_local_gateway_route_output {

    /// A builder for [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::LocalGatewayRoute>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, input: crate::model::LocalGatewayRoute) -> Self {
            self.route = Some(input);
            self
        }
        /// <p>Information about the route.</p>
        pub fn set_route(
            mut self,
            input: std::option::Option<crate::model::LocalGatewayRoute>,
        ) -> Self {
            self.route = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput).
        pub fn build(self) -> crate::output::CreateLocalGatewayRouteOutput {
            crate::output::CreateLocalGatewayRouteOutput {
                route: self.route,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLocalGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput).
    pub fn builder() -> crate::output::create_local_gateway_route_output::Builder {
        crate::output::create_local_gateway_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLaunchTemplateVersionOutput {
    /// <p>Information about the launch template version.</p>
    #[doc(hidden)]
    pub launch_template_version: std::option::Option<crate::model::LaunchTemplateVersion>,
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    #[doc(hidden)]
    pub warning: std::option::Option<crate::model::ValidationWarning>,
    _request_id: Option<String>,
}
impl CreateLaunchTemplateVersionOutput {
    /// <p>Information about the launch template version.</p>
    pub fn launch_template_version(
        &self,
    ) -> std::option::Option<&crate::model::LaunchTemplateVersion> {
        self.launch_template_version.as_ref()
    }
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub fn warning(&self) -> std::option::Option<&crate::model::ValidationWarning> {
        self.warning.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLaunchTemplateVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput).
pub mod create_launch_template_version_output {

    /// A builder for [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template_version:
            std::option::Option<crate::model::LaunchTemplateVersion>,
        pub(crate) warning: std::option::Option<crate::model::ValidationWarning>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the launch template version.</p>
        pub fn launch_template_version(
            mut self,
            input: crate::model::LaunchTemplateVersion,
        ) -> Self {
            self.launch_template_version = Some(input);
            self
        }
        /// <p>Information about the launch template version.</p>
        pub fn set_launch_template_version(
            mut self,
            input: std::option::Option<crate::model::LaunchTemplateVersion>,
        ) -> Self {
            self.launch_template_version = input;
            self
        }
        /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
        pub fn warning(mut self, input: crate::model::ValidationWarning) -> Self {
            self.warning = Some(input);
            self
        }
        /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
        pub fn set_warning(
            mut self,
            input: std::option::Option<crate::model::ValidationWarning>,
        ) -> Self {
            self.warning = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput).
        pub fn build(self) -> crate::output::CreateLaunchTemplateVersionOutput {
            crate::output::CreateLaunchTemplateVersionOutput {
                launch_template_version: self.launch_template_version,
                warning: self.warning,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLaunchTemplateVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput).
    pub fn builder() -> crate::output::create_launch_template_version_output::Builder {
        crate::output::create_launch_template_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    #[doc(hidden)]
    pub launch_template: std::option::Option<crate::model::LaunchTemplate>,
    /// <p>If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    #[doc(hidden)]
    pub warning: std::option::Option<crate::model::ValidationWarning>,
    _request_id: Option<String>,
}
impl CreateLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    pub fn launch_template(&self) -> std::option::Option<&crate::model::LaunchTemplate> {
        self.launch_template.as_ref()
    }
    /// <p>If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub fn warning(&self) -> std::option::Option<&crate::model::ValidationWarning> {
        self.warning.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLaunchTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput).
pub mod create_launch_template_output {

    /// A builder for [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplate>,
        pub(crate) warning: std::option::Option<crate::model::ValidationWarning>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the launch template.</p>
        pub fn launch_template(mut self, input: crate::model::LaunchTemplate) -> Self {
            self.launch_template = Some(input);
            self
        }
        /// <p>Information about the launch template.</p>
        pub fn set_launch_template(
            mut self,
            input: std::option::Option<crate::model::LaunchTemplate>,
        ) -> Self {
            self.launch_template = input;
            self
        }
        /// <p>If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
        pub fn warning(mut self, input: crate::model::ValidationWarning) -> Self {
            self.warning = Some(input);
            self
        }
        /// <p>If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
        pub fn set_warning(
            mut self,
            input: std::option::Option<crate::model::ValidationWarning>,
        ) -> Self {
            self.warning = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput).
        pub fn build(self) -> crate::output::CreateLaunchTemplateOutput {
            crate::output::CreateLaunchTemplateOutput {
                launch_template: self.launch_template,
                warning: self.warning,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLaunchTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput).
    pub fn builder() -> crate::output::create_launch_template_output::Builder {
        crate::output::create_launch_template_output::Builder::default()
    }
}

/// <p>Describes a key pair.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateKeyPairOutput {
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub key_fingerprint: std::option::Option<std::string::String>,
    /// <p>An unencrypted PEM encoded RSA or ED25519 private key.</p>
    #[doc(hidden)]
    pub key_material: std::option::Option<std::string::String>,
    /// <p>The name of the key pair.</p>
    #[doc(hidden)]
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The ID of the key pair.</p>
    #[doc(hidden)]
    pub key_pair_id: std::option::Option<std::string::String>,
    /// <p>Any tags applied to the key pair.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl CreateKeyPairOutput {
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.</p> </li>
    /// </ul>
    pub fn key_fingerprint(&self) -> std::option::Option<&str> {
        self.key_fingerprint.as_deref()
    }
    /// <p>An unencrypted PEM encoded RSA or ED25519 private key.</p>
    pub fn key_material(&self) -> std::option::Option<&str> {
        self.key_material.as_deref()
    }
    /// <p>The name of the key pair.</p>
    pub fn key_name(&self) -> std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The ID of the key pair.</p>
    pub fn key_pair_id(&self) -> std::option::Option<&str> {
        self.key_pair_id.as_deref()
    }
    /// <p>Any tags applied to the key pair.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for CreateKeyPairOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateKeyPairOutput");
        formatter.field("key_fingerprint", &self.key_fingerprint);
        formatter.field("key_material", &"*** Sensitive Data Redacted ***");
        formatter.field("key_name", &self.key_name);
        formatter.field("key_pair_id", &self.key_pair_id);
        formatter.field("tags", &self.tags);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for CreateKeyPairOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput).
pub mod create_key_pair_output {

    /// A builder for [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) key_fingerprint: std::option::Option<std::string::String>,
        pub(crate) key_material: std::option::Option<std::string::String>,
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) key_pair_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <ul>
        /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
        /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.</p> </li>
        /// </ul>
        pub fn key_fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_fingerprint = Some(input.into());
            self
        }
        /// <ul>
        /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
        /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.</p> </li>
        /// </ul>
        pub fn set_key_fingerprint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.key_fingerprint = input;
            self
        }
        /// <p>An unencrypted PEM encoded RSA or ED25519 private key.</p>
        pub fn key_material(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_material = Some(input.into());
            self
        }
        /// <p>An unencrypted PEM encoded RSA or ED25519 private key.</p>
        pub fn set_key_material(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_material = input;
            self
        }
        /// <p>The name of the key pair.</p>
        pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_name = Some(input.into());
            self
        }
        /// <p>The name of the key pair.</p>
        pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_name = input;
            self
        }
        /// <p>The ID of the key pair.</p>
        pub fn key_pair_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_pair_id = Some(input.into());
            self
        }
        /// <p>The ID of the key pair.</p>
        pub fn set_key_pair_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_pair_id = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags applied to the key pair.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags applied to the key pair.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput).
        pub fn build(self) -> crate::output::CreateKeyPairOutput {
            crate::output::CreateKeyPairOutput {
                key_fingerprint: self.key_fingerprint,
                key_material: self.key_material,
                key_name: self.key_name,
                key_pair_id: self.key_pair_id,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("key_fingerprint", &self.key_fingerprint);
            formatter.field("key_material", &"*** Sensitive Data Redacted ***");
            formatter.field("key_name", &self.key_name);
            formatter.field("key_pair_id", &self.key_pair_id);
            formatter.field("tags", &self.tags);
            formatter.field("_request_id", &self._request_id);
            formatter.finish()
        }
    }
}
impl CreateKeyPairOutput {
    /// Creates a new builder-style object to manufacture [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput).
    pub fn builder() -> crate::output::create_key_pair_output::Builder {
        crate::output::create_key_pair_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateIpamScopeOutput {
    /// <p>Information about the created scope.</p>
    #[doc(hidden)]
    pub ipam_scope: std::option::Option<crate::model::IpamScope>,
    _request_id: Option<String>,
}
impl CreateIpamScopeOutput {
    /// <p>Information about the created scope.</p>
    pub fn ipam_scope(&self) -> std::option::Option<&crate::model::IpamScope> {
        self.ipam_scope.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateIpamScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateIpamScopeOutput`](crate::output::CreateIpamScopeOutput).
pub mod create_ipam_scope_output {

    /// A builder for [`CreateIpamScopeOutput`](crate::output::CreateIpamScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_scope: std::option::Option<crate::model::IpamScope>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the created scope.</p>
        pub fn ipam_scope(mut self, input: crate::model::IpamScope) -> Self {
            self.ipam_scope = Some(input);
            self
        }
        /// <p>Information about the created scope.</p>
        pub fn set_ipam_scope(
            mut self,
            input: std::option::Option<crate::model::IpamScope>,
        ) -> Self {
            self.ipam_scope = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateIpamScopeOutput`](crate::output::CreateIpamScopeOutput).
        pub fn build(self) -> crate::output::CreateIpamScopeOutput {
            crate::output::CreateIpamScopeOutput {
                ipam_scope: self.ipam_scope,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateIpamScopeOutput {
    /// Creates a new builder-style object to manufacture [`CreateIpamScopeOutput`](crate::output::CreateIpamScopeOutput).
    pub fn builder() -> crate::output::create_ipam_scope_output::Builder {
        crate::output::create_ipam_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateIpamPoolOutput {
    /// <p>Information about the IPAM pool created.</p>
    #[doc(hidden)]
    pub ipam_pool: std::option::Option<crate::model::IpamPool>,
    _request_id: Option<String>,
}
impl CreateIpamPoolOutput {
    /// <p>Information about the IPAM pool created.</p>
    pub fn ipam_pool(&self) -> std::option::Option<&crate::model::IpamPool> {
        self.ipam_pool.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateIpamPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateIpamPoolOutput`](crate::output::CreateIpamPoolOutput).
pub mod create_ipam_pool_output {

    /// A builder for [`CreateIpamPoolOutput`](crate::output::CreateIpamPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool: std::option::Option<crate::model::IpamPool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IPAM pool created.</p>
        pub fn ipam_pool(mut self, input: crate::model::IpamPool) -> Self {
            self.ipam_pool = Some(input);
            self
        }
        /// <p>Information about the IPAM pool created.</p>
        pub fn set_ipam_pool(mut self, input: std::option::Option<crate::model::IpamPool>) -> Self {
            self.ipam_pool = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateIpamPoolOutput`](crate::output::CreateIpamPoolOutput).
        pub fn build(self) -> crate::output::CreateIpamPoolOutput {
            crate::output::CreateIpamPoolOutput {
                ipam_pool: self.ipam_pool,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateIpamPoolOutput {
    /// Creates a new builder-style object to manufacture [`CreateIpamPoolOutput`](crate::output::CreateIpamPoolOutput).
    pub fn builder() -> crate::output::create_ipam_pool_output::Builder {
        crate::output::create_ipam_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateIpamOutput {
    /// <p>Information about the IPAM created.</p>
    #[doc(hidden)]
    pub ipam: std::option::Option<crate::model::Ipam>,
    _request_id: Option<String>,
}
impl CreateIpamOutput {
    /// <p>Information about the IPAM created.</p>
    pub fn ipam(&self) -> std::option::Option<&crate::model::Ipam> {
        self.ipam.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateIpamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateIpamOutput`](crate::output::CreateIpamOutput).
pub mod create_ipam_output {

    /// A builder for [`CreateIpamOutput`](crate::output::CreateIpamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam: std::option::Option<crate::model::Ipam>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IPAM created.</p>
        pub fn ipam(mut self, input: crate::model::Ipam) -> Self {
            self.ipam = Some(input);
            self
        }
        /// <p>Information about the IPAM created.</p>
        pub fn set_ipam(mut self, input: std::option::Option<crate::model::Ipam>) -> Self {
            self.ipam = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateIpamOutput`](crate::output::CreateIpamOutput).
        pub fn build(self) -> crate::output::CreateIpamOutput {
            crate::output::CreateIpamOutput {
                ipam: self.ipam,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateIpamOutput {
    /// Creates a new builder-style object to manufacture [`CreateIpamOutput`](crate::output::CreateIpamOutput).
    pub fn builder() -> crate::output::create_ipam_output::Builder {
        crate::output::create_ipam_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateInternetGatewayOutput {
    /// <p>Information about the internet gateway.</p>
    #[doc(hidden)]
    pub internet_gateway: std::option::Option<crate::model::InternetGateway>,
    _request_id: Option<String>,
}
impl CreateInternetGatewayOutput {
    /// <p>Information about the internet gateway.</p>
    pub fn internet_gateway(&self) -> std::option::Option<&crate::model::InternetGateway> {
        self.internet_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput).
pub mod create_internet_gateway_output {

    /// A builder for [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) internet_gateway: std::option::Option<crate::model::InternetGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the internet gateway.</p>
        pub fn internet_gateway(mut self, input: crate::model::InternetGateway) -> Self {
            self.internet_gateway = Some(input);
            self
        }
        /// <p>Information about the internet gateway.</p>
        pub fn set_internet_gateway(
            mut self,
            input: std::option::Option<crate::model::InternetGateway>,
        ) -> Self {
            self.internet_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput).
        pub fn build(self) -> crate::output::CreateInternetGatewayOutput {
            crate::output::CreateInternetGatewayOutput {
                internet_gateway: self.internet_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput).
    pub fn builder() -> crate::output::create_internet_gateway_output::Builder {
        crate::output::create_internet_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateInstanceExportTaskOutput {
    /// <p>Information about the export instance task.</p>
    #[doc(hidden)]
    pub export_task: std::option::Option<crate::model::ExportTask>,
    _request_id: Option<String>,
}
impl CreateInstanceExportTaskOutput {
    /// <p>Information about the export instance task.</p>
    pub fn export_task(&self) -> std::option::Option<&crate::model::ExportTask> {
        self.export_task.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateInstanceExportTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput).
pub mod create_instance_export_task_output {

    /// A builder for [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task: std::option::Option<crate::model::ExportTask>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the export instance task.</p>
        pub fn export_task(mut self, input: crate::model::ExportTask) -> Self {
            self.export_task = Some(input);
            self
        }
        /// <p>Information about the export instance task.</p>
        pub fn set_export_task(
            mut self,
            input: std::option::Option<crate::model::ExportTask>,
        ) -> Self {
            self.export_task = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput).
        pub fn build(self) -> crate::output::CreateInstanceExportTaskOutput {
            crate::output::CreateInstanceExportTaskOutput {
                export_task: self.export_task,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateInstanceExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput).
    pub fn builder() -> crate::output::create_instance_export_task_output::Builder {
        crate::output::create_instance_export_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    #[doc(hidden)]
    pub instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
    _request_id: Option<String>,
}
impl CreateInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    pub fn instance_event_window(&self) -> std::option::Option<&crate::model::InstanceEventWindow> {
        self.instance_event_window.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateInstanceEventWindowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateInstanceEventWindowOutput`](crate::output::CreateInstanceEventWindowOutput).
pub mod create_instance_event_window_output {

    /// A builder for [`CreateInstanceEventWindowOutput`](crate::output::CreateInstanceEventWindowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the event window.</p>
        pub fn instance_event_window(mut self, input: crate::model::InstanceEventWindow) -> Self {
            self.instance_event_window = Some(input);
            self
        }
        /// <p>Information about the event window.</p>
        pub fn set_instance_event_window(
            mut self,
            input: std::option::Option<crate::model::InstanceEventWindow>,
        ) -> Self {
            self.instance_event_window = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateInstanceEventWindowOutput`](crate::output::CreateInstanceEventWindowOutput).
        pub fn build(self) -> crate::output::CreateInstanceEventWindowOutput {
            crate::output::CreateInstanceEventWindowOutput {
                instance_event_window: self.instance_event_window,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateInstanceEventWindowOutput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceEventWindowOutput`](crate::output::CreateInstanceEventWindowOutput).
    pub fn builder() -> crate::output::create_instance_event_window_output::Builder {
        crate::output::create_instance_event_window_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateImageOutput {
    /// <p>The ID of the new AMI.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateImageOutput {
    /// <p>The ID of the new AMI.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateImageOutput`](crate::output::CreateImageOutput).
pub mod create_image_output {

    /// A builder for [`CreateImageOutput`](crate::output::CreateImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the new AMI.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the new AMI.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateImageOutput`](crate::output::CreateImageOutput).
        pub fn build(self) -> crate::output::CreateImageOutput {
            crate::output::CreateImageOutput {
                image_id: self.image_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateImageOutput {
    /// Creates a new builder-style object to manufacture [`CreateImageOutput`](crate::output::CreateImageOutput).
    pub fn builder() -> crate::output::create_image_output::Builder {
        crate::output::create_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFpgaImageOutput {
    /// <p>The FPGA image identifier (AFI ID).</p>
    #[doc(hidden)]
    pub fpga_image_id: std::option::Option<std::string::String>,
    /// <p>The global FPGA image identifier (AGFI ID).</p>
    #[doc(hidden)]
    pub fpga_image_global_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateFpgaImageOutput {
    /// <p>The FPGA image identifier (AFI ID).</p>
    pub fn fpga_image_id(&self) -> std::option::Option<&str> {
        self.fpga_image_id.as_deref()
    }
    /// <p>The global FPGA image identifier (AGFI ID).</p>
    pub fn fpga_image_global_id(&self) -> std::option::Option<&str> {
        self.fpga_image_global_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateFpgaImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput).
pub mod create_fpga_image_output {

    /// A builder for [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_id: std::option::Option<std::string::String>,
        pub(crate) fpga_image_global_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The FPGA image identifier (AFI ID).</p>
        pub fn fpga_image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.fpga_image_id = Some(input.into());
            self
        }
        /// <p>The FPGA image identifier (AFI ID).</p>
        pub fn set_fpga_image_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.fpga_image_id = input;
            self
        }
        /// <p>The global FPGA image identifier (AGFI ID).</p>
        pub fn fpga_image_global_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.fpga_image_global_id = Some(input.into());
            self
        }
        /// <p>The global FPGA image identifier (AGFI ID).</p>
        pub fn set_fpga_image_global_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.fpga_image_global_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput).
        pub fn build(self) -> crate::output::CreateFpgaImageOutput {
            crate::output::CreateFpgaImageOutput {
                fpga_image_id: self.fpga_image_id,
                fpga_image_global_id: self.fpga_image_global_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateFpgaImageOutput {
    /// Creates a new builder-style object to manufacture [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput).
    pub fn builder() -> crate::output::create_fpga_image_output::Builder {
        crate::output::create_fpga_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFlowLogsOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The IDs of the flow logs.</p>
    #[doc(hidden)]
    pub flow_log_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the flow logs that could not be created successfully.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl CreateFlowLogsOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The IDs of the flow logs.</p>
    pub fn flow_log_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.flow_log_ids.as_deref()
    }
    /// <p>Information about the flow logs that could not be created successfully.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateFlowLogsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput).
pub mod create_flow_logs_output {

    /// A builder for [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) flow_log_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        /// Appends an item to `flow_log_ids`.
        ///
        /// To override the contents of this collection use [`set_flow_log_ids`](Self::set_flow_log_ids).
        ///
        /// <p>The IDs of the flow logs.</p>
        pub fn flow_log_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.flow_log_ids.unwrap_or_default();
            v.push(input.into());
            self.flow_log_ids = Some(v);
            self
        }
        /// <p>The IDs of the flow logs.</p>
        pub fn set_flow_log_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.flow_log_ids = input;
            self
        }
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the flow logs that could not be created successfully.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the flow logs that could not be created successfully.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput).
        pub fn build(self) -> crate::output::CreateFlowLogsOutput {
            crate::output::CreateFlowLogsOutput {
                client_token: self.client_token,
                flow_log_ids: self.flow_log_ids,
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateFlowLogsOutput {
    /// Creates a new builder-style object to manufacture [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput).
    pub fn builder() -> crate::output::create_flow_logs_output::Builder {
        crate::output::create_flow_logs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFleetOutput {
    /// <p>The ID of the EC2 Fleet.</p>
    #[doc(hidden)]
    pub fleet_id: std::option::Option<std::string::String>,
    /// <p>Information about the instances that could not be launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::CreateFleetError>>,
    /// <p>Information about the instances that were launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<crate::model::CreateFleetInstance>>,
    _request_id: Option<String>,
}
impl CreateFleetOutput {
    /// <p>The ID of the EC2 Fleet.</p>
    pub fn fleet_id(&self) -> std::option::Option<&str> {
        self.fleet_id.as_deref()
    }
    /// <p>Information about the instances that could not be launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::CreateFleetError]> {
        self.errors.as_deref()
    }
    /// <p>Information about the instances that were launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::CreateFleetInstance]> {
        self.instances.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateFleetOutput`](crate::output::CreateFleetOutput).
pub mod create_fleet_output {

    /// A builder for [`CreateFleetOutput`](crate::output::CreateFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fleet_id: std::option::Option<std::string::String>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::CreateFleetError>>,
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::CreateFleetInstance>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the EC2 Fleet.</p>
        pub fn fleet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.fleet_id = Some(input.into());
            self
        }
        /// <p>The ID of the EC2 Fleet.</p>
        pub fn set_fleet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.fleet_id = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>Information about the instances that could not be launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
        pub fn errors(mut self, input: crate::model::CreateFleetError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>Information about the instances that could not be launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateFleetError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>Information about the instances that were launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
        pub fn instances(mut self, input: crate::model::CreateFleetInstance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>Information about the instances that were launched by the fleet. Supported only for fleets of type <code>instant</code>.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreateFleetInstance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateFleetOutput`](crate::output::CreateFleetOutput).
        pub fn build(self) -> crate::output::CreateFleetOutput {
            crate::output::CreateFleetOutput {
                fleet_id: self.fleet_id,
                errors: self.errors,
                instances: self.instances,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateFleetOutput {
    /// Creates a new builder-style object to manufacture [`CreateFleetOutput`](crate::output::CreateFleetOutput).
    pub fn builder() -> crate::output::create_fleet_output::Builder {
        crate::output::create_fleet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateEgressOnlyInternetGatewayOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Information about the egress-only internet gateway.</p>
    #[doc(hidden)]
    pub egress_only_internet_gateway: std::option::Option<crate::model::EgressOnlyInternetGateway>,
    _request_id: Option<String>,
}
impl CreateEgressOnlyInternetGatewayOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Information about the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway(
        &self,
    ) -> std::option::Option<&crate::model::EgressOnlyInternetGateway> {
        self.egress_only_internet_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateEgressOnlyInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput).
pub mod create_egress_only_internet_gateway_output {

    /// A builder for [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) egress_only_internet_gateway:
            std::option::Option<crate::model::EgressOnlyInternetGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        /// <p>Information about the egress-only internet gateway.</p>
        pub fn egress_only_internet_gateway(
            mut self,
            input: crate::model::EgressOnlyInternetGateway,
        ) -> Self {
            self.egress_only_internet_gateway = Some(input);
            self
        }
        /// <p>Information about the egress-only internet gateway.</p>
        pub fn set_egress_only_internet_gateway(
            mut self,
            input: std::option::Option<crate::model::EgressOnlyInternetGateway>,
        ) -> Self {
            self.egress_only_internet_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput).
        pub fn build(self) -> crate::output::CreateEgressOnlyInternetGatewayOutput {
            crate::output::CreateEgressOnlyInternetGatewayOutput {
                client_token: self.client_token,
                egress_only_internet_gateway: self.egress_only_internet_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateEgressOnlyInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput).
    pub fn builder() -> crate::output::create_egress_only_internet_gateway_output::Builder {
        crate::output::create_egress_only_internet_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDhcpOptionsOutput {
    /// <p>A set of DHCP options.</p>
    #[doc(hidden)]
    pub dhcp_options: std::option::Option<crate::model::DhcpOptions>,
    _request_id: Option<String>,
}
impl CreateDhcpOptionsOutput {
    /// <p>A set of DHCP options.</p>
    pub fn dhcp_options(&self) -> std::option::Option<&crate::model::DhcpOptions> {
        self.dhcp_options.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDhcpOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput).
pub mod create_dhcp_options_output {

    /// A builder for [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dhcp_options: std::option::Option<crate::model::DhcpOptions>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A set of DHCP options.</p>
        pub fn dhcp_options(mut self, input: crate::model::DhcpOptions) -> Self {
            self.dhcp_options = Some(input);
            self
        }
        /// <p>A set of DHCP options.</p>
        pub fn set_dhcp_options(
            mut self,
            input: std::option::Option<crate::model::DhcpOptions>,
        ) -> Self {
            self.dhcp_options = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput).
        pub fn build(self) -> crate::output::CreateDhcpOptionsOutput {
            crate::output::CreateDhcpOptionsOutput {
                dhcp_options: self.dhcp_options,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput).
    pub fn builder() -> crate::output::create_dhcp_options_output::Builder {
        crate::output::create_dhcp_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDefaultVpcOutput {
    /// <p>Information about the VPC.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<crate::model::Vpc>,
    _request_id: Option<String>,
}
impl CreateDefaultVpcOutput {
    /// <p>Information about the VPC.</p>
    pub fn vpc(&self) -> std::option::Option<&crate::model::Vpc> {
        self.vpc.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDefaultVpcOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput).
pub mod create_default_vpc_output {

    /// A builder for [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc: std::option::Option<crate::model::Vpc>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPC.</p>
        pub fn vpc(mut self, input: crate::model::Vpc) -> Self {
            self.vpc = Some(input);
            self
        }
        /// <p>Information about the VPC.</p>
        pub fn set_vpc(mut self, input: std::option::Option<crate::model::Vpc>) -> Self {
            self.vpc = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput).
        pub fn build(self) -> crate::output::CreateDefaultVpcOutput {
            crate::output::CreateDefaultVpcOutput {
                vpc: self.vpc,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateDefaultVpcOutput {
    /// Creates a new builder-style object to manufacture [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput).
    pub fn builder() -> crate::output::create_default_vpc_output::Builder {
        crate::output::create_default_vpc_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDefaultSubnetOutput {
    /// <p>Information about the subnet.</p>
    #[doc(hidden)]
    pub subnet: std::option::Option<crate::model::Subnet>,
    _request_id: Option<String>,
}
impl CreateDefaultSubnetOutput {
    /// <p>Information about the subnet.</p>
    pub fn subnet(&self) -> std::option::Option<&crate::model::Subnet> {
        self.subnet.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDefaultSubnetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput).
pub mod create_default_subnet_output {

    /// A builder for [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet: std::option::Option<crate::model::Subnet>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the subnet.</p>
        pub fn subnet(mut self, input: crate::model::Subnet) -> Self {
            self.subnet = Some(input);
            self
        }
        /// <p>Information about the subnet.</p>
        pub fn set_subnet(mut self, input: std::option::Option<crate::model::Subnet>) -> Self {
            self.subnet = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput).
        pub fn build(self) -> crate::output::CreateDefaultSubnetOutput {
            crate::output::CreateDefaultSubnetOutput {
                subnet: self.subnet,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateDefaultSubnetOutput {
    /// Creates a new builder-style object to manufacture [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput).
    pub fn builder() -> crate::output::create_default_subnet_output::Builder {
        crate::output::create_default_subnet_output::Builder::default()
    }
}

/// <p>Contains the output of CreateCustomerGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomerGatewayOutput {
    /// <p>Information about the customer gateway.</p>
    #[doc(hidden)]
    pub customer_gateway: std::option::Option<crate::model::CustomerGateway>,
    _request_id: Option<String>,
}
impl CreateCustomerGatewayOutput {
    /// <p>Information about the customer gateway.</p>
    pub fn customer_gateway(&self) -> std::option::Option<&crate::model::CustomerGateway> {
        self.customer_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCustomerGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput).
pub mod create_customer_gateway_output {

    /// A builder for [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) customer_gateway: std::option::Option<crate::model::CustomerGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the customer gateway.</p>
        pub fn customer_gateway(mut self, input: crate::model::CustomerGateway) -> Self {
            self.customer_gateway = Some(input);
            self
        }
        /// <p>Information about the customer gateway.</p>
        pub fn set_customer_gateway(
            mut self,
            input: std::option::Option<crate::model::CustomerGateway>,
        ) -> Self {
            self.customer_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput).
        pub fn build(self) -> crate::output::CreateCustomerGatewayOutput {
            crate::output::CreateCustomerGatewayOutput {
                customer_gateway: self.customer_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCustomerGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput).
    pub fn builder() -> crate::output::create_customer_gateway_output::Builder {
        crate::output::create_customer_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCoipPoolOutput {
    /// <p>Information about the CoIP address pool.</p>
    #[doc(hidden)]
    pub coip_pool: std::option::Option<crate::model::CoipPool>,
    _request_id: Option<String>,
}
impl CreateCoipPoolOutput {
    /// <p>Information about the CoIP address pool.</p>
    pub fn coip_pool(&self) -> std::option::Option<&crate::model::CoipPool> {
        self.coip_pool.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCoipPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCoipPoolOutput`](crate::output::CreateCoipPoolOutput).
pub mod create_coip_pool_output {

    /// A builder for [`CreateCoipPoolOutput`](crate::output::CreateCoipPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_pool: std::option::Option<crate::model::CoipPool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the CoIP address pool.</p>
        pub fn coip_pool(mut self, input: crate::model::CoipPool) -> Self {
            self.coip_pool = Some(input);
            self
        }
        /// <p>Information about the CoIP address pool.</p>
        pub fn set_coip_pool(mut self, input: std::option::Option<crate::model::CoipPool>) -> Self {
            self.coip_pool = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCoipPoolOutput`](crate::output::CreateCoipPoolOutput).
        pub fn build(self) -> crate::output::CreateCoipPoolOutput {
            crate::output::CreateCoipPoolOutput {
                coip_pool: self.coip_pool,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCoipPoolOutput {
    /// Creates a new builder-style object to manufacture [`CreateCoipPoolOutput`](crate::output::CreateCoipPoolOutput).
    pub fn builder() -> crate::output::create_coip_pool_output::Builder {
        crate::output::create_coip_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCoipCidrOutput {
    /// <p> Information about a range of customer-owned IP addresses. </p>
    #[doc(hidden)]
    pub coip_cidr: std::option::Option<crate::model::CoipCidr>,
    _request_id: Option<String>,
}
impl CreateCoipCidrOutput {
    /// <p> Information about a range of customer-owned IP addresses. </p>
    pub fn coip_cidr(&self) -> std::option::Option<&crate::model::CoipCidr> {
        self.coip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCoipCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCoipCidrOutput`](crate::output::CreateCoipCidrOutput).
pub mod create_coip_cidr_output {

    /// A builder for [`CreateCoipCidrOutput`](crate::output::CreateCoipCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_cidr: std::option::Option<crate::model::CoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> Information about a range of customer-owned IP addresses. </p>
        pub fn coip_cidr(mut self, input: crate::model::CoipCidr) -> Self {
            self.coip_cidr = Some(input);
            self
        }
        /// <p> Information about a range of customer-owned IP addresses. </p>
        pub fn set_coip_cidr(mut self, input: std::option::Option<crate::model::CoipCidr>) -> Self {
            self.coip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCoipCidrOutput`](crate::output::CreateCoipCidrOutput).
        pub fn build(self) -> crate::output::CreateCoipCidrOutput {
            crate::output::CreateCoipCidrOutput {
                coip_cidr: self.coip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`CreateCoipCidrOutput`](crate::output::CreateCoipCidrOutput).
    pub fn builder() -> crate::output::create_coip_cidr_output::Builder {
        crate::output::create_coip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClientVpnRouteOutput {
    /// <p>The current state of the route.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientVpnRouteStatus>,
    _request_id: Option<String>,
}
impl CreateClientVpnRouteOutput {
    /// <p>The current state of the route.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ClientVpnRouteStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateClientVpnRouteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput).
pub mod create_client_vpn_route_output {

    /// A builder for [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnRouteStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the route.</p>
        pub fn status(mut self, input: crate::model::ClientVpnRouteStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the route.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientVpnRouteStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput).
        pub fn build(self) -> crate::output::CreateClientVpnRouteOutput {
            crate::output::CreateClientVpnRouteOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateClientVpnRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput).
    pub fn builder() -> crate::output::create_client_vpn_route_output::Builder {
        crate::output::create_client_vpn_route_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClientVpnEndpointOutput {
    /// <p>The ID of the Client VPN endpoint.</p>
    #[doc(hidden)]
    pub client_vpn_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The current state of the Client VPN endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
    /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
    #[doc(hidden)]
    pub dns_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateClientVpnEndpointOutput {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn client_vpn_endpoint_id(&self) -> std::option::Option<&str> {
        self.client_vpn_endpoint_id.as_deref()
    }
    /// <p>The current state of the Client VPN endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ClientVpnEndpointStatus> {
        self.status.as_ref()
    }
    /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
    pub fn dns_name(&self) -> std::option::Option<&str> {
        self.dns_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateClientVpnEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput).
pub mod create_client_vpn_endpoint_output {

    /// A builder for [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_endpoint_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        pub(crate) dns_name: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Client VPN endpoint.</p>
        pub fn client_vpn_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_vpn_endpoint_id = Some(input.into());
            self
        }
        /// <p>The ID of the Client VPN endpoint.</p>
        pub fn set_client_vpn_endpoint_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.client_vpn_endpoint_id = input;
            self
        }
        /// <p>The current state of the Client VPN endpoint.</p>
        pub fn status(mut self, input: crate::model::ClientVpnEndpointStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the Client VPN endpoint.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
        pub fn dns_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dns_name = Some(input.into());
            self
        }
        /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
        pub fn set_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dns_name = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput).
        pub fn build(self) -> crate::output::CreateClientVpnEndpointOutput {
            crate::output::CreateClientVpnEndpointOutput {
                client_vpn_endpoint_id: self.client_vpn_endpoint_id,
                status: self.status,
                dns_name: self.dns_name,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateClientVpnEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput).
    pub fn builder() -> crate::output::create_client_vpn_endpoint_output::Builder {
        crate::output::create_client_vpn_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCarrierGatewayOutput {
    /// <p>Information about the carrier gateway.</p>
    #[doc(hidden)]
    pub carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
    _request_id: Option<String>,
}
impl CreateCarrierGatewayOutput {
    /// <p>Information about the carrier gateway.</p>
    pub fn carrier_gateway(&self) -> std::option::Option<&crate::model::CarrierGateway> {
        self.carrier_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCarrierGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput).
pub mod create_carrier_gateway_output {

    /// A builder for [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the carrier gateway.</p>
        pub fn carrier_gateway(mut self, input: crate::model::CarrierGateway) -> Self {
            self.carrier_gateway = Some(input);
            self
        }
        /// <p>Information about the carrier gateway.</p>
        pub fn set_carrier_gateway(
            mut self,
            input: std::option::Option<crate::model::CarrierGateway>,
        ) -> Self {
            self.carrier_gateway = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput).
        pub fn build(self) -> crate::output::CreateCarrierGatewayOutput {
            crate::output::CreateCarrierGatewayOutput {
                carrier_gateway: self.carrier_gateway,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCarrierGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput).
    pub fn builder() -> crate::output::create_carrier_gateway_output::Builder {
        crate::output::create_carrier_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCapacityReservationFleetOutput {
    /// <p>The ID of the Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub capacity_reservation_fleet_id: std::option::Option<std::string::String>,
    /// <p>The status of the Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::CapacityReservationFleetState>,
    /// <p>The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.</p>
    #[doc(hidden)]
    pub total_target_capacity: std::option::Option<i32>,
    /// <p>The requested capacity units that have been successfully reserved.</p>
    #[doc(hidden)]
    pub total_fulfilled_capacity: std::option::Option<f64>,
    /// <p>The instance matching criteria for the Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub instance_match_criteria: std::option::Option<crate::model::FleetInstanceMatchCriteria>,
    /// <p>The allocation strategy used by the Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub allocation_strategy: std::option::Option<std::string::String>,
    /// <p>The date and time at which the Capacity Reservation Fleet was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time at which the Capacity Reservation Fleet expires.</p>
    #[doc(hidden)]
    pub end_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the tenancy of Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub tenancy: std::option::Option<crate::model::FleetCapacityReservationTenancy>,
    /// <p>Information about the individual Capacity Reservations in the Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub fleet_capacity_reservations:
        std::option::Option<std::vec::Vec<crate::model::FleetCapacityReservation>>,
    /// <p>The tags assigned to the Capacity Reservation Fleet.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl CreateCapacityReservationFleetOutput {
    /// <p>The ID of the Capacity Reservation Fleet.</p>
    pub fn capacity_reservation_fleet_id(&self) -> std::option::Option<&str> {
        self.capacity_reservation_fleet_id.as_deref()
    }
    /// <p>The status of the Capacity Reservation Fleet.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::CapacityReservationFleetState> {
        self.state.as_ref()
    }
    /// <p>The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.</p>
    pub fn total_target_capacity(&self) -> std::option::Option<i32> {
        self.total_target_capacity
    }
    /// <p>The requested capacity units that have been successfully reserved.</p>
    pub fn total_fulfilled_capacity(&self) -> std::option::Option<f64> {
        self.total_fulfilled_capacity
    }
    /// <p>The instance matching criteria for the Capacity Reservation Fleet.</p>
    pub fn instance_match_criteria(
        &self,
    ) -> std::option::Option<&crate::model::FleetInstanceMatchCriteria> {
        self.instance_match_criteria.as_ref()
    }
    /// <p>The allocation strategy used by the Capacity Reservation Fleet.</p>
    pub fn allocation_strategy(&self) -> std::option::Option<&str> {
        self.allocation_strategy.as_deref()
    }
    /// <p>The date and time at which the Capacity Reservation Fleet was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The date and time at which the Capacity Reservation Fleet expires.</p>
    pub fn end_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_date.as_ref()
    }
    /// <p>Indicates the tenancy of Capacity Reservation Fleet.</p>
    pub fn tenancy(&self) -> std::option::Option<&crate::model::FleetCapacityReservationTenancy> {
        self.tenancy.as_ref()
    }
    /// <p>Information about the individual Capacity Reservations in the Capacity Reservation Fleet.</p>
    pub fn fleet_capacity_reservations(
        &self,
    ) -> std::option::Option<&[crate::model::FleetCapacityReservation]> {
        self.fleet_capacity_reservations.as_deref()
    }
    /// <p>The tags assigned to the Capacity Reservation Fleet.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateCapacityReservationFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCapacityReservationFleetOutput`](crate::output::CreateCapacityReservationFleetOutput).
pub mod create_capacity_reservation_fleet_output {

    /// A builder for [`CreateCapacityReservationFleetOutput`](crate::output::CreateCapacityReservationFleetOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) capacity_reservation_fleet_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::CapacityReservationFleetState>,
        pub(crate) total_target_capacity: std::option::Option<i32>,
        pub(crate) total_fulfilled_capacity: std::option::Option<f64>,
        pub(crate) instance_match_criteria:
            std::option::Option<crate::model::FleetInstanceMatchCriteria>,
        pub(crate) allocation_strategy: std::option::Option<std::string::String>,
        pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) end_date: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) tenancy: std::option::Option<crate::model::FleetCapacityReservationTenancy>,
        pub(crate) fleet_capacity_reservations:
            std::option::Option<std::vec::Vec<crate::model::FleetCapacityReservation>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Capacity Reservation Fleet.</p>
        pub fn capacity_reservation_fleet_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.capacity_reservation_fleet_id = Some(input.into());
            self
        }
        /// <p>The ID of the Capacity Reservation Fleet.</p>
        pub fn set_capacity_reservation_fleet_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.capacity_reservation_fleet_id = input;
            self
        }
        /// <p>The status of the Capacity Reservation Fleet.</p>
        pub fn state(mut self, input: crate::model::CapacityReservationFleetState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The status of the Capacity Reservation Fleet.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::CapacityReservationFleetState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.</p>
        pub fn total_target_capacity(mut self, input: i32) -> Self {
            self.total_target_capacity = Some(input);
            self
        }
        /// <p>The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.</p>
        pub fn set_total_target_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.total_target_capacity = input;
            self
        }
        /// <p>The requested capacity units that have been successfully reserved.</p>
        pub fn total_fulfilled_capacity(mut self, input: f64) -> Self {
            self.total_fulfilled_capacity = Some(input);
            self
        }
        /// <p>The requested capacity units that have been successfully reserved.</p>
        pub fn set_total_fulfilled_capacity(mut self, input: std::option::Option<f64>) -> Self {
            self.total_fulfilled_capacity = input;
            self
        }
        /// <p>The instance matching criteria for the Capacity Reservation Fleet.</p>
        pub fn instance_match_criteria(
            mut self,
            input: crate::model::FleetInstanceMatchCriteria,
        ) -> Self {
            self.instance_match_criteria = Some(input);
            self
        }
        /// <p>The instance matching criteria for the Capacity Reservation Fleet.</p>
        pub fn set_instance_match_criteria(
            mut self,
            input: std::option::Option<crate::model::FleetInstanceMatchCriteria>,
        ) -> Self {
            self.instance_match_criteria = input;
            self
        }
        /// <p>The allocation strategy used by the Capacity Reservation Fleet.</p>
        pub fn allocation_strategy(mut self, input: impl Into<std::string::String>) -> Self {
            self.allocation_strategy = Some(input.into());
            self
        }
        /// <p>The allocation strategy used by the Capacity Reservation Fleet.</p>
        pub fn set_allocation_strategy(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.allocation_strategy = input;
            self
        }
        /// <p>The date and time at which the Capacity Reservation Fleet was created.</p>
        pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.create_time = Some(input);
            self
        }
        /// <p>The date and time at which the Capacity Reservation Fleet was created.</p>
        pub fn set_create_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.create_time = input;
            self
        }
        /// <p>The date and time at which the Capacity Reservation Fleet expires.</p>
        pub fn end_date(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.end_date = Some(input);
            self
        }
        /// <p>The date and time at which the Capacity Reservation Fleet expires.</p>
        pub fn set_end_date(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.end_date = input;
            self
        }
        /// <p>Indicates the tenancy of Capacity Reservation Fleet.</p>
        pub fn tenancy(mut self, input: crate::model::FleetCapacityReservationTenancy) -> Self {
            self.tenancy = Some(input);
            self
        }
        /// <p>Indicates the tenancy of Capacity Reservation Fleet.</p>
        pub fn set_tenancy(
            mut self,
            input: std::option::Option<crate::model::FleetCapacityReservationTenancy>,
        ) -> Self {
            self.tenancy = input;
            self
        }
        /// Appends an item to `fleet_capacity_reservations`.
        ///
        /// To override the contents of this collection use [`set_fleet_capacity_reservations`](Self::set_fleet_capacity_reservations).
        ///
        /// <p>Information about the individual Capacity Reservations in the Capacity Reservation Fleet.</p>
        pub fn fleet_capacity_reservations(
            mut self,
            input: crate::model::FleetCapacityReservation,
        ) -> Self {
            let mut v = self.fleet_capacity_reservations.unwrap_or_default();
            v.push(input);
            self.fleet_capacity_reservations = Some(v);
            self
        }
        /// <p>Information about the individual Capacity Reservations in the Capacity Reservation Fleet.</p>
        pub fn set_fleet_capacity_reservations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FleetCapacityReservation>>,
        ) -> Self {
            self.fleet_capacity_reservations = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags assigned to the Capacity Reservation Fleet.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tags assigned to the Capacity Reservation Fleet.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCapacityReservationFleetOutput`](crate::output::CreateCapacityReservationFleetOutput).
        pub fn build(self) -> crate::output::CreateCapacityReservationFleetOutput {
            crate::output::CreateCapacityReservationFleetOutput {
                capacity_reservation_fleet_id: self.capacity_reservation_fleet_id,
                state: self.state,
                total_target_capacity: self.total_target_capacity,
                total_fulfilled_capacity: self.total_fulfilled_capacity,
                instance_match_criteria: self.instance_match_criteria,
                allocation_strategy: self.allocation_strategy,
                create_time: self.create_time,
                end_date: self.end_date,
                tenancy: self.tenancy,
                fleet_capacity_reservations: self.fleet_capacity_reservations,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCapacityReservationFleetOutput {
    /// Creates a new builder-style object to manufacture [`CreateCapacityReservationFleetOutput`](crate::output::CreateCapacityReservationFleetOutput).
    pub fn builder() -> crate::output::create_capacity_reservation_fleet_output::Builder {
        crate::output::create_capacity_reservation_fleet_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCapacityReservationOutput {
    /// <p>Information about the Capacity Reservation.</p>
    #[doc(hidden)]
    pub capacity_reservation: std::option::Option<crate::model::CapacityReservation>,
    _request_id: Option<String>,
}
impl CreateCapacityReservationOutput {
    /// <p>Information about the Capacity Reservation.</p>
    pub fn capacity_reservation(&self) -> std::option::Option<&crate::model::CapacityReservation> {
        self.capacity_reservation.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateCapacityReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput).
pub mod create_capacity_reservation_output {

    /// A builder for [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) capacity_reservation: std::option::Option<crate::model::CapacityReservation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the Capacity Reservation.</p>
        pub fn capacity_reservation(mut self, input: crate::model::CapacityReservation) -> Self {
            self.capacity_reservation = Some(input);
            self
        }
        /// <p>Information about the Capacity Reservation.</p>
        pub fn set_capacity_reservation(
            mut self,
            input: std::option::Option<crate::model::CapacityReservation>,
        ) -> Self {
            self.capacity_reservation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput).
        pub fn build(self) -> crate::output::CreateCapacityReservationOutput {
            crate::output::CreateCapacityReservationOutput {
                capacity_reservation: self.capacity_reservation,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput).
    pub fn builder() -> crate::output::create_capacity_reservation_output::Builder {
        crate::output::create_capacity_reservation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CopySnapshotOutput {
    /// <p>The ID of the new snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>Any tags applied to the new snapshot.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl CopySnapshotOutput {
    /// <p>The ID of the new snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>Any tags applied to the new snapshot.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for CopySnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CopySnapshotOutput`](crate::output::CopySnapshotOutput).
pub mod copy_snapshot_output {

    /// A builder for [`CopySnapshotOutput`](crate::output::CopySnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the new snapshot.</p>
        pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(input.into());
            self
        }
        /// <p>The ID of the new snapshot.</p>
        pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Any tags applied to the new snapshot.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>Any tags applied to the new snapshot.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CopySnapshotOutput`](crate::output::CopySnapshotOutput).
        pub fn build(self) -> crate::output::CopySnapshotOutput {
            crate::output::CopySnapshotOutput {
                snapshot_id: self.snapshot_id,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl CopySnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CopySnapshotOutput`](crate::output::CopySnapshotOutput).
    pub fn builder() -> crate::output::copy_snapshot_output::Builder {
        crate::output::copy_snapshot_output::Builder::default()
    }
}

/// <p>Contains the output of CopyImage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CopyImageOutput {
    /// <p>The ID of the new AMI.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CopyImageOutput {
    /// <p>The ID of the new AMI.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CopyImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CopyImageOutput`](crate::output::CopyImageOutput).
pub mod copy_image_output {

    /// A builder for [`CopyImageOutput`](crate::output::CopyImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the new AMI.</p>
        pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.image_id = Some(input.into());
            self
        }
        /// <p>The ID of the new AMI.</p>
        pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.image_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CopyImageOutput`](crate::output::CopyImageOutput).
        pub fn build(self) -> crate::output::CopyImageOutput {
            crate::output::CopyImageOutput {
                image_id: self.image_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CopyImageOutput {
    /// Creates a new builder-style object to manufacture [`CopyImageOutput`](crate::output::CopyImageOutput).
    pub fn builder() -> crate::output::copy_image_output::Builder {
        crate::output::copy_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CopyFpgaImageOutput {
    /// <p>The ID of the new AFI.</p>
    #[doc(hidden)]
    pub fpga_image_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CopyFpgaImageOutput {
    /// <p>The ID of the new AFI.</p>
    pub fn fpga_image_id(&self) -> std::option::Option<&str> {
        self.fpga_image_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CopyFpgaImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput).
pub mod copy_fpga_image_output {

    /// A builder for [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the new AFI.</p>
        pub fn fpga_image_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.fpga_image_id = Some(input.into());
            self
        }
        /// <p>The ID of the new AFI.</p>
        pub fn set_fpga_image_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.fpga_image_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput).
        pub fn build(self) -> crate::output::CopyFpgaImageOutput {
            crate::output::CopyFpgaImageOutput {
                fpga_image_id: self.fpga_image_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CopyFpgaImageOutput {
    /// Creates a new builder-style object to manufacture [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput).
    pub fn builder() -> crate::output::copy_fpga_image_output::Builder {
        crate::output::copy_fpga_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfirmProductInstanceOutput {
    /// <p>The Amazon Web Services account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl ConfirmProductInstanceOutput {
    /// <p>The Amazon Web Services account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for ConfirmProductInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput).
pub mod confirm_product_instance_output {

    /// A builder for [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Web Services account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
        pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
        pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.owner_id = input;
            self
        }
        /// <p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput).
        pub fn build(self) -> crate::output::ConfirmProductInstanceOutput {
            crate::output::ConfirmProductInstanceOutput {
                owner_id: self.owner_id,
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl ConfirmProductInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput).
    pub fn builder() -> crate::output::confirm_product_instance_output::Builder {
        crate::output::confirm_product_instance_output::Builder::default()
    }
}

/// <p>Contains the output of CancelSpotInstanceRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelSpotInstanceRequestsOutput {
    /// <p>One or more Spot Instance requests.</p>
    #[doc(hidden)]
    pub cancelled_spot_instance_requests:
        std::option::Option<std::vec::Vec<crate::model::CancelledSpotInstanceRequest>>,
    _request_id: Option<String>,
}
impl CancelSpotInstanceRequestsOutput {
    /// <p>One or more Spot Instance requests.</p>
    pub fn cancelled_spot_instance_requests(
        &self,
    ) -> std::option::Option<&[crate::model::CancelledSpotInstanceRequest]> {
        self.cancelled_spot_instance_requests.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelSpotInstanceRequestsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput).
pub mod cancel_spot_instance_requests_output {

    /// A builder for [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cancelled_spot_instance_requests:
            std::option::Option<std::vec::Vec<crate::model::CancelledSpotInstanceRequest>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cancelled_spot_instance_requests`.
        ///
        /// To override the contents of this collection use [`set_cancelled_spot_instance_requests`](Self::set_cancelled_spot_instance_requests).
        ///
        /// <p>One or more Spot Instance requests.</p>
        pub fn cancelled_spot_instance_requests(
            mut self,
            input: crate::model::CancelledSpotInstanceRequest,
        ) -> Self {
            let mut v = self.cancelled_spot_instance_requests.unwrap_or_default();
            v.push(input);
            self.cancelled_spot_instance_requests = Some(v);
            self
        }
        /// <p>One or more Spot Instance requests.</p>
        pub fn set_cancelled_spot_instance_requests(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CancelledSpotInstanceRequest>>,
        ) -> Self {
            self.cancelled_spot_instance_requests = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput).
        pub fn build(self) -> crate::output::CancelSpotInstanceRequestsOutput {
            crate::output::CancelSpotInstanceRequestsOutput {
                cancelled_spot_instance_requests: self.cancelled_spot_instance_requests,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelSpotInstanceRequestsOutput {
    /// Creates a new builder-style object to manufacture [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput).
    pub fn builder() -> crate::output::cancel_spot_instance_requests_output::Builder {
        crate::output::cancel_spot_instance_requests_output::Builder::default()
    }
}

/// <p>Contains the output of CancelSpotFleetRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelSpotFleetRequestsOutput {
    /// <p>Information about the Spot Fleet requests that are successfully canceled.</p>
    #[doc(hidden)]
    pub successful_fleet_requests:
        std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>>,
    /// <p>Information about the Spot Fleet requests that are not successfully canceled.</p>
    #[doc(hidden)]
    pub unsuccessful_fleet_requests:
        std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>>,
    _request_id: Option<String>,
}
impl CancelSpotFleetRequestsOutput {
    /// <p>Information about the Spot Fleet requests that are successfully canceled.</p>
    pub fn successful_fleet_requests(
        &self,
    ) -> std::option::Option<&[crate::model::CancelSpotFleetRequestsSuccessItem]> {
        self.successful_fleet_requests.as_deref()
    }
    /// <p>Information about the Spot Fleet requests that are not successfully canceled.</p>
    pub fn unsuccessful_fleet_requests(
        &self,
    ) -> std::option::Option<&[crate::model::CancelSpotFleetRequestsErrorItem]> {
        self.unsuccessful_fleet_requests.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelSpotFleetRequestsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput).
pub mod cancel_spot_fleet_requests_output {

    /// A builder for [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_fleet_requests:
            std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>>,
        pub(crate) unsuccessful_fleet_requests:
            std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful_fleet_requests`.
        ///
        /// To override the contents of this collection use [`set_successful_fleet_requests`](Self::set_successful_fleet_requests).
        ///
        /// <p>Information about the Spot Fleet requests that are successfully canceled.</p>
        pub fn successful_fleet_requests(
            mut self,
            input: crate::model::CancelSpotFleetRequestsSuccessItem,
        ) -> Self {
            let mut v = self.successful_fleet_requests.unwrap_or_default();
            v.push(input);
            self.successful_fleet_requests = Some(v);
            self
        }
        /// <p>Information about the Spot Fleet requests that are successfully canceled.</p>
        pub fn set_successful_fleet_requests(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>,
            >,
        ) -> Self {
            self.successful_fleet_requests = input;
            self
        }
        /// Appends an item to `unsuccessful_fleet_requests`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful_fleet_requests`](Self::set_unsuccessful_fleet_requests).
        ///
        /// <p>Information about the Spot Fleet requests that are not successfully canceled.</p>
        pub fn unsuccessful_fleet_requests(
            mut self,
            input: crate::model::CancelSpotFleetRequestsErrorItem,
        ) -> Self {
            let mut v = self.unsuccessful_fleet_requests.unwrap_or_default();
            v.push(input);
            self.unsuccessful_fleet_requests = Some(v);
            self
        }
        /// <p>Information about the Spot Fleet requests that are not successfully canceled.</p>
        pub fn set_unsuccessful_fleet_requests(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>,
            >,
        ) -> Self {
            self.unsuccessful_fleet_requests = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput).
        pub fn build(self) -> crate::output::CancelSpotFleetRequestsOutput {
            crate::output::CancelSpotFleetRequestsOutput {
                successful_fleet_requests: self.successful_fleet_requests,
                unsuccessful_fleet_requests: self.unsuccessful_fleet_requests,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelSpotFleetRequestsOutput {
    /// Creates a new builder-style object to manufacture [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput).
    pub fn builder() -> crate::output::cancel_spot_fleet_requests_output::Builder {
        crate::output::cancel_spot_fleet_requests_output::Builder::default()
    }
}

/// <p>Contains the output of CancelReservedInstancesListing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelReservedInstancesListingOutput {
    /// <p>The Reserved Instance listing.</p>
    #[doc(hidden)]
    pub reserved_instances_listings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
    _request_id: Option<String>,
}
impl CancelReservedInstancesListingOutput {
    /// <p>The Reserved Instance listing.</p>
    pub fn reserved_instances_listings(
        &self,
    ) -> std::option::Option<&[crate::model::ReservedInstancesListing]> {
        self.reserved_instances_listings.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelReservedInstancesListingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput).
pub mod cancel_reserved_instances_listing_output {

    /// A builder for [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_listings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `reserved_instances_listings`.
        ///
        /// To override the contents of this collection use [`set_reserved_instances_listings`](Self::set_reserved_instances_listings).
        ///
        /// <p>The Reserved Instance listing.</p>
        pub fn reserved_instances_listings(
            mut self,
            input: crate::model::ReservedInstancesListing,
        ) -> Self {
            let mut v = self.reserved_instances_listings.unwrap_or_default();
            v.push(input);
            self.reserved_instances_listings = Some(v);
            self
        }
        /// <p>The Reserved Instance listing.</p>
        pub fn set_reserved_instances_listings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        ) -> Self {
            self.reserved_instances_listings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput).
        pub fn build(self) -> crate::output::CancelReservedInstancesListingOutput {
            crate::output::CancelReservedInstancesListingOutput {
                reserved_instances_listings: self.reserved_instances_listings,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelReservedInstancesListingOutput {
    /// Creates a new builder-style object to manufacture [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput).
    pub fn builder() -> crate::output::cancel_reserved_instances_listing_output::Builder {
        crate::output::cancel_reserved_instances_listing_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelImportTaskOutput {
    /// <p>The ID of the task being canceled.</p>
    #[doc(hidden)]
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>The current state of the task being canceled.</p>
    #[doc(hidden)]
    pub previous_state: std::option::Option<std::string::String>,
    /// <p>The current state of the task being canceled.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CancelImportTaskOutput {
    /// <p>The ID of the task being canceled.</p>
    pub fn import_task_id(&self) -> std::option::Option<&str> {
        self.import_task_id.as_deref()
    }
    /// <p>The current state of the task being canceled.</p>
    pub fn previous_state(&self) -> std::option::Option<&str> {
        self.previous_state.as_deref()
    }
    /// <p>The current state of the task being canceled.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelImportTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput).
pub mod cancel_import_task_output {

    /// A builder for [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_task_id: std::option::Option<std::string::String>,
        pub(crate) previous_state: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the task being canceled.</p>
        pub fn import_task_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.import_task_id = Some(input.into());
            self
        }
        /// <p>The ID of the task being canceled.</p>
        pub fn set_import_task_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.import_task_id = input;
            self
        }
        /// <p>The current state of the task being canceled.</p>
        pub fn previous_state(mut self, input: impl Into<std::string::String>) -> Self {
            self.previous_state = Some(input.into());
            self
        }
        /// <p>The current state of the task being canceled.</p>
        pub fn set_previous_state(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.previous_state = input;
            self
        }
        /// <p>The current state of the task being canceled.</p>
        pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
            self.state = Some(input.into());
            self
        }
        /// <p>The current state of the task being canceled.</p>
        pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput).
        pub fn build(self) -> crate::output::CancelImportTaskOutput {
            crate::output::CancelImportTaskOutput {
                import_task_id: self.import_task_id,
                previous_state: self.previous_state,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelImportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput).
    pub fn builder() -> crate::output::cancel_import_task_output::Builder {
        crate::output::cancel_import_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelImageLaunchPermissionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl CancelImageLaunchPermissionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for CancelImageLaunchPermissionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelImageLaunchPermissionOutput`](crate::output::CancelImageLaunchPermissionOutput).
pub mod cancel_image_launch_permission_output {

    /// A builder for [`CancelImageLaunchPermissionOutput`](crate::output::CancelImageLaunchPermissionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelImageLaunchPermissionOutput`](crate::output::CancelImageLaunchPermissionOutput).
        pub fn build(self) -> crate::output::CancelImageLaunchPermissionOutput {
            crate::output::CancelImageLaunchPermissionOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelImageLaunchPermissionOutput {
    /// Creates a new builder-style object to manufacture [`CancelImageLaunchPermissionOutput`](crate::output::CancelImageLaunchPermissionOutput).
    pub fn builder() -> crate::output::cancel_image_launch_permission_output::Builder {
        crate::output::cancel_image_launch_permission_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelExportTaskOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelExportTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput).
pub mod cancel_export_task_output {

    /// A builder for [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput).
        pub fn build(self) -> crate::output::CancelExportTaskOutput {
            crate::output::CancelExportTaskOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput).
    pub fn builder() -> crate::output::cancel_export_task_output::Builder {
        crate::output::cancel_export_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelConversionTaskOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CancelConversionTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput).
pub mod cancel_conversion_task_output {

    /// A builder for [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput).
        pub fn build(self) -> crate::output::CancelConversionTaskOutput {
            crate::output::CancelConversionTaskOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelConversionTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput).
    pub fn builder() -> crate::output::cancel_conversion_task_output::Builder {
        crate::output::cancel_conversion_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelCapacityReservationFleetsOutput {
    /// <p>Information about the Capacity Reservation Fleets that were successfully cancelled.</p>
    #[doc(hidden)]
    pub successful_fleet_cancellations:
        std::option::Option<std::vec::Vec<crate::model::CapacityReservationFleetCancellationState>>,
    /// <p>Information about the Capacity Reservation Fleets that could not be cancelled.</p>
    #[doc(hidden)]
    pub failed_fleet_cancellations: std::option::Option<
        std::vec::Vec<crate::model::FailedCapacityReservationFleetCancellationResult>,
    >,
    _request_id: Option<String>,
}
impl CancelCapacityReservationFleetsOutput {
    /// <p>Information about the Capacity Reservation Fleets that were successfully cancelled.</p>
    pub fn successful_fleet_cancellations(
        &self,
    ) -> std::option::Option<&[crate::model::CapacityReservationFleetCancellationState]> {
        self.successful_fleet_cancellations.as_deref()
    }
    /// <p>Information about the Capacity Reservation Fleets that could not be cancelled.</p>
    pub fn failed_fleet_cancellations(
        &self,
    ) -> std::option::Option<&[crate::model::FailedCapacityReservationFleetCancellationResult]>
    {
        self.failed_fleet_cancellations.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelCapacityReservationFleetsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelCapacityReservationFleetsOutput`](crate::output::CancelCapacityReservationFleetsOutput).
pub mod cancel_capacity_reservation_fleets_output {

    /// A builder for [`CancelCapacityReservationFleetsOutput`](crate::output::CancelCapacityReservationFleetsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_fleet_cancellations: std::option::Option<
            std::vec::Vec<crate::model::CapacityReservationFleetCancellationState>,
        >,
        pub(crate) failed_fleet_cancellations: std::option::Option<
            std::vec::Vec<crate::model::FailedCapacityReservationFleetCancellationResult>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `successful_fleet_cancellations`.
        ///
        /// To override the contents of this collection use [`set_successful_fleet_cancellations`](Self::set_successful_fleet_cancellations).
        ///
        /// <p>Information about the Capacity Reservation Fleets that were successfully cancelled.</p>
        pub fn successful_fleet_cancellations(
            mut self,
            input: crate::model::CapacityReservationFleetCancellationState,
        ) -> Self {
            let mut v = self.successful_fleet_cancellations.unwrap_or_default();
            v.push(input);
            self.successful_fleet_cancellations = Some(v);
            self
        }
        /// <p>Information about the Capacity Reservation Fleets that were successfully cancelled.</p>
        pub fn set_successful_fleet_cancellations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::CapacityReservationFleetCancellationState>,
            >,
        ) -> Self {
            self.successful_fleet_cancellations = input;
            self
        }
        /// Appends an item to `failed_fleet_cancellations`.
        ///
        /// To override the contents of this collection use [`set_failed_fleet_cancellations`](Self::set_failed_fleet_cancellations).
        ///
        /// <p>Information about the Capacity Reservation Fleets that could not be cancelled.</p>
        pub fn failed_fleet_cancellations(
            mut self,
            input: crate::model::FailedCapacityReservationFleetCancellationResult,
        ) -> Self {
            let mut v = self.failed_fleet_cancellations.unwrap_or_default();
            v.push(input);
            self.failed_fleet_cancellations = Some(v);
            self
        }
        /// <p>Information about the Capacity Reservation Fleets that could not be cancelled.</p>
        pub fn set_failed_fleet_cancellations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::FailedCapacityReservationFleetCancellationResult>,
            >,
        ) -> Self {
            self.failed_fleet_cancellations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelCapacityReservationFleetsOutput`](crate::output::CancelCapacityReservationFleetsOutput).
        pub fn build(self) -> crate::output::CancelCapacityReservationFleetsOutput {
            crate::output::CancelCapacityReservationFleetsOutput {
                successful_fleet_cancellations: self.successful_fleet_cancellations,
                failed_fleet_cancellations: self.failed_fleet_cancellations,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelCapacityReservationFleetsOutput {
    /// Creates a new builder-style object to manufacture [`CancelCapacityReservationFleetsOutput`](crate::output::CancelCapacityReservationFleetsOutput).
    pub fn builder() -> crate::output::cancel_capacity_reservation_fleets_output::Builder {
        crate::output::cancel_capacity_reservation_fleets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelCapacityReservationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl CancelCapacityReservationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for CancelCapacityReservationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput).
pub mod cancel_capacity_reservation_output {

    /// A builder for [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput).
        pub fn build(self) -> crate::output::CancelCapacityReservationOutput {
            crate::output::CancelCapacityReservationOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput).
    pub fn builder() -> crate::output::cancel_capacity_reservation_output::Builder {
        crate::output::cancel_capacity_reservation_output::Builder::default()
    }
}

/// <p>Contains the output of CancelBundleTask.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelBundleTaskOutput {
    /// <p>Information about the bundle task.</p>
    #[doc(hidden)]
    pub bundle_task: std::option::Option<crate::model::BundleTask>,
    _request_id: Option<String>,
}
impl CancelBundleTaskOutput {
    /// <p>Information about the bundle task.</p>
    pub fn bundle_task(&self) -> std::option::Option<&crate::model::BundleTask> {
        self.bundle_task.as_ref()
    }
}
impl aws_http::request_id::RequestId for CancelBundleTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput).
pub mod cancel_bundle_task_output {

    /// A builder for [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bundle_task: std::option::Option<crate::model::BundleTask>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the bundle task.</p>
        pub fn bundle_task(mut self, input: crate::model::BundleTask) -> Self {
            self.bundle_task = Some(input);
            self
        }
        /// <p>Information about the bundle task.</p>
        pub fn set_bundle_task(
            mut self,
            input: std::option::Option<crate::model::BundleTask>,
        ) -> Self {
            self.bundle_task = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput).
        pub fn build(self) -> crate::output::CancelBundleTaskOutput {
            crate::output::CancelBundleTaskOutput {
                bundle_task: self.bundle_task,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelBundleTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput).
    pub fn builder() -> crate::output::cancel_bundle_task_output::Builder {
        crate::output::cancel_bundle_task_output::Builder::default()
    }
}

/// <p>Contains the output of BundleInstance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BundleInstanceOutput {
    /// <p>Information about the bundle task.</p>
    #[doc(hidden)]
    pub bundle_task: std::option::Option<crate::model::BundleTask>,
    _request_id: Option<String>,
}
impl BundleInstanceOutput {
    /// <p>Information about the bundle task.</p>
    pub fn bundle_task(&self) -> std::option::Option<&crate::model::BundleTask> {
        self.bundle_task.as_ref()
    }
}
impl aws_http::request_id::RequestId for BundleInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BundleInstanceOutput`](crate::output::BundleInstanceOutput).
pub mod bundle_instance_output {

    /// A builder for [`BundleInstanceOutput`](crate::output::BundleInstanceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bundle_task: std::option::Option<crate::model::BundleTask>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the bundle task.</p>
        pub fn bundle_task(mut self, input: crate::model::BundleTask) -> Self {
            self.bundle_task = Some(input);
            self
        }
        /// <p>Information about the bundle task.</p>
        pub fn set_bundle_task(
            mut self,
            input: std::option::Option<crate::model::BundleTask>,
        ) -> Self {
            self.bundle_task = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BundleInstanceOutput`](crate::output::BundleInstanceOutput).
        pub fn build(self) -> crate::output::BundleInstanceOutput {
            crate::output::BundleInstanceOutput {
                bundle_task: self.bundle_task,
                _request_id: self._request_id,
            }
        }
    }
}
impl BundleInstanceOutput {
    /// Creates a new builder-style object to manufacture [`BundleInstanceOutput`](crate::output::BundleInstanceOutput).
    pub fn builder() -> crate::output::bundle_instance_output::Builder {
        crate::output::bundle_instance_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthorizeSecurityGroupIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    /// <p>Information about the inbound (ingress) security group rules that were added.</p>
    #[doc(hidden)]
    pub security_group_rules: std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
    _request_id: Option<String>,
}
impl AuthorizeSecurityGroupIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
    /// <p>Information about the inbound (ingress) security group rules that were added.</p>
    pub fn security_group_rules(&self) -> std::option::Option<&[crate::model::SecurityGroupRule]> {
        self.security_group_rules.as_deref()
    }
}
impl aws_http::request_id::RequestId for AuthorizeSecurityGroupIngressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput).
pub mod authorize_security_group_ingress_output {

    /// A builder for [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) security_group_rules:
            std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        /// Appends an item to `security_group_rules`.
        ///
        /// To override the contents of this collection use [`set_security_group_rules`](Self::set_security_group_rules).
        ///
        /// <p>Information about the inbound (ingress) security group rules that were added.</p>
        pub fn security_group_rules(mut self, input: crate::model::SecurityGroupRule) -> Self {
            let mut v = self.security_group_rules.unwrap_or_default();
            v.push(input);
            self.security_group_rules = Some(v);
            self
        }
        /// <p>Information about the inbound (ingress) security group rules that were added.</p>
        pub fn set_security_group_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
        ) -> Self {
            self.security_group_rules = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput).
        pub fn build(self) -> crate::output::AuthorizeSecurityGroupIngressOutput {
            crate::output::AuthorizeSecurityGroupIngressOutput {
                r#return: self.r#return,
                security_group_rules: self.security_group_rules,
                _request_id: self._request_id,
            }
        }
    }
}
impl AuthorizeSecurityGroupIngressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput).
    pub fn builder() -> crate::output::authorize_security_group_ingress_output::Builder {
        crate::output::authorize_security_group_ingress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthorizeSecurityGroupEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    /// <p>Information about the outbound (egress) security group rules that were added.</p>
    #[doc(hidden)]
    pub security_group_rules: std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
    _request_id: Option<String>,
}
impl AuthorizeSecurityGroupEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
    /// <p>Information about the outbound (egress) security group rules that were added.</p>
    pub fn security_group_rules(&self) -> std::option::Option<&[crate::model::SecurityGroupRule]> {
        self.security_group_rules.as_deref()
    }
}
impl aws_http::request_id::RequestId for AuthorizeSecurityGroupEgressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput).
pub mod authorize_security_group_egress_output {

    /// A builder for [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) security_group_rules:
            std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        /// Appends an item to `security_group_rules`.
        ///
        /// To override the contents of this collection use [`set_security_group_rules`](Self::set_security_group_rules).
        ///
        /// <p>Information about the outbound (egress) security group rules that were added.</p>
        pub fn security_group_rules(mut self, input: crate::model::SecurityGroupRule) -> Self {
            let mut v = self.security_group_rules.unwrap_or_default();
            v.push(input);
            self.security_group_rules = Some(v);
            self
        }
        /// <p>Information about the outbound (egress) security group rules that were added.</p>
        pub fn set_security_group_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SecurityGroupRule>>,
        ) -> Self {
            self.security_group_rules = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput).
        pub fn build(self) -> crate::output::AuthorizeSecurityGroupEgressOutput {
            crate::output::AuthorizeSecurityGroupEgressOutput {
                r#return: self.r#return,
                security_group_rules: self.security_group_rules,
                _request_id: self._request_id,
            }
        }
    }
}
impl AuthorizeSecurityGroupEgressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput).
    pub fn builder() -> crate::output::authorize_security_group_egress_output::Builder {
        crate::output::authorize_security_group_egress_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthorizeClientVpnIngressOutput {
    /// <p>The current state of the authorization rule.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
    _request_id: Option<String>,
}
impl AuthorizeClientVpnIngressOutput {
    /// <p>The current state of the authorization rule.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ClientVpnAuthorizationRuleStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for AuthorizeClientVpnIngressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput).
pub mod authorize_client_vpn_ingress_output {

    /// A builder for [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current state of the authorization rule.</p>
        pub fn status(mut self, input: crate::model::ClientVpnAuthorizationRuleStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the authorization rule.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput).
        pub fn build(self) -> crate::output::AuthorizeClientVpnIngressOutput {
            crate::output::AuthorizeClientVpnIngressOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl AuthorizeClientVpnIngressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput).
    pub fn builder() -> crate::output::authorize_client_vpn_ingress_output::Builder {
        crate::output::authorize_client_vpn_ingress_output::Builder::default()
    }
}

/// <p>Contains the output of AttachVpnGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachVpnGatewayOutput {
    /// <p>Information about the attachment.</p>
    #[doc(hidden)]
    pub vpc_attachment: std::option::Option<crate::model::VpcAttachment>,
    _request_id: Option<String>,
}
impl AttachVpnGatewayOutput {
    /// <p>Information about the attachment.</p>
    pub fn vpc_attachment(&self) -> std::option::Option<&crate::model::VpcAttachment> {
        self.vpc_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for AttachVpnGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput).
pub mod attach_vpn_gateway_output {

    /// A builder for [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_attachment: std::option::Option<crate::model::VpcAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the attachment.</p>
        pub fn vpc_attachment(mut self, input: crate::model::VpcAttachment) -> Self {
            self.vpc_attachment = Some(input);
            self
        }
        /// <p>Information about the attachment.</p>
        pub fn set_vpc_attachment(
            mut self,
            input: std::option::Option<crate::model::VpcAttachment>,
        ) -> Self {
            self.vpc_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput).
        pub fn build(self) -> crate::output::AttachVpnGatewayOutput {
            crate::output::AttachVpnGatewayOutput {
                vpc_attachment: self.vpc_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput).
    pub fn builder() -> crate::output::attach_vpn_gateway_output::Builder {
        crate::output::attach_vpn_gateway_output::Builder::default()
    }
}

/// <p>Describes volume attachment details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachVolumeOutput {
    /// <p>The time stamp when the attachment initiated.</p>
    #[doc(hidden)]
    pub attach_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The device name.</p>
    #[doc(hidden)]
    pub device: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The attachment state of the volume.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::VolumeAttachmentState>,
    /// <p>The ID of the volume.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    #[doc(hidden)]
    pub delete_on_termination: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl AttachVolumeOutput {
    /// <p>The time stamp when the attachment initiated.</p>
    pub fn attach_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.attach_time.as_ref()
    }
    /// <p>The device name.</p>
    pub fn device(&self) -> std::option::Option<&str> {
        self.device.as_deref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The attachment state of the volume.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::VolumeAttachmentState> {
        self.state.as_ref()
    }
    /// <p>The ID of the volume.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub fn delete_on_termination(&self) -> std::option::Option<bool> {
        self.delete_on_termination
    }
}
impl aws_http::request_id::RequestId for AttachVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachVolumeOutput`](crate::output::AttachVolumeOutput).
pub mod attach_volume_output {

    /// A builder for [`AttachVolumeOutput`](crate::output::AttachVolumeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attach_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) device: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::VolumeAttachmentState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) delete_on_termination: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The time stamp when the attachment initiated.</p>
        pub fn attach_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.attach_time = Some(input);
            self
        }
        /// <p>The time stamp when the attachment initiated.</p>
        pub fn set_attach_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.attach_time = input;
            self
        }
        /// <p>The device name.</p>
        pub fn device(mut self, input: impl Into<std::string::String>) -> Self {
            self.device = Some(input.into());
            self
        }
        /// <p>The device name.</p>
        pub fn set_device(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.device = input;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(input.into());
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.instance_id = input;
            self
        }
        /// <p>The attachment state of the volume.</p>
        pub fn state(mut self, input: crate::model::VolumeAttachmentState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The attachment state of the volume.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::VolumeAttachmentState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(input.into());
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.volume_id = input;
            self
        }
        /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
        pub fn delete_on_termination(mut self, input: bool) -> Self {
            self.delete_on_termination = Some(input);
            self
        }
        /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
        pub fn set_delete_on_termination(mut self, input: std::option::Option<bool>) -> Self {
            self.delete_on_termination = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachVolumeOutput`](crate::output::AttachVolumeOutput).
        pub fn build(self) -> crate::output::AttachVolumeOutput {
            crate::output::AttachVolumeOutput {
                attach_time: self.attach_time,
                device: self.device,
                instance_id: self.instance_id,
                state: self.state,
                volume_id: self.volume_id,
                delete_on_termination: self.delete_on_termination,
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachVolumeOutput {
    /// Creates a new builder-style object to manufacture [`AttachVolumeOutput`](crate::output::AttachVolumeOutput).
    pub fn builder() -> crate::output::attach_volume_output::Builder {
        crate::output::attach_volume_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub verified_access_trust_provider:
        std::option::Option<crate::model::VerifiedAccessTrustProvider>,
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    #[doc(hidden)]
    pub verified_access_instance: std::option::Option<crate::model::VerifiedAccessInstance>,
    _request_id: Option<String>,
}
impl AttachVerifiedAccessTrustProviderOutput {
    /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
    pub fn verified_access_trust_provider(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessTrustProvider> {
        self.verified_access_trust_provider.as_ref()
    }
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance(
        &self,
    ) -> std::option::Option<&crate::model::VerifiedAccessInstance> {
        self.verified_access_instance.as_ref()
    }
}
impl aws_http::request_id::RequestId for AttachVerifiedAccessTrustProviderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachVerifiedAccessTrustProviderOutput`](crate::output::AttachVerifiedAccessTrustProviderOutput).
pub mod attach_verified_access_trust_provider_output {

    /// A builder for [`AttachVerifiedAccessTrustProviderOutput`](crate::output::AttachVerifiedAccessTrustProviderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) verified_access_trust_provider:
            std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        pub(crate) verified_access_instance:
            std::option::Option<crate::model::VerifiedAccessInstance>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn verified_access_trust_provider(
            mut self,
            input: crate::model::VerifiedAccessTrustProvider,
        ) -> Self {
            self.verified_access_trust_provider = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access trust provider.</p>
        pub fn set_verified_access_trust_provider(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessTrustProvider>,
        ) -> Self {
            self.verified_access_trust_provider = input;
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn verified_access_instance(
            mut self,
            input: crate::model::VerifiedAccessInstance,
        ) -> Self {
            self.verified_access_instance = Some(input);
            self
        }
        /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
        pub fn set_verified_access_instance(
            mut self,
            input: std::option::Option<crate::model::VerifiedAccessInstance>,
        ) -> Self {
            self.verified_access_instance = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachVerifiedAccessTrustProviderOutput`](crate::output::AttachVerifiedAccessTrustProviderOutput).
        pub fn build(self) -> crate::output::AttachVerifiedAccessTrustProviderOutput {
            crate::output::AttachVerifiedAccessTrustProviderOutput {
                verified_access_trust_provider: self.verified_access_trust_provider,
                verified_access_instance: self.verified_access_instance,
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachVerifiedAccessTrustProviderOutput {
    /// Creates a new builder-style object to manufacture [`AttachVerifiedAccessTrustProviderOutput`](crate::output::AttachVerifiedAccessTrustProviderOutput).
    pub fn builder() -> crate::output::attach_verified_access_trust_provider_output::Builder {
        crate::output::attach_verified_access_trust_provider_output::Builder::default()
    }
}

/// <p>Contains the output of AttachNetworkInterface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachNetworkInterfaceOutput {
    /// <p>The ID of the network interface attachment.</p>
    #[doc(hidden)]
    pub attachment_id: std::option::Option<std::string::String>,
    /// <p>The index of the network card.</p>
    #[doc(hidden)]
    pub network_card_index: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl AttachNetworkInterfaceOutput {
    /// <p>The ID of the network interface attachment.</p>
    pub fn attachment_id(&self) -> std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>The index of the network card.</p>
    pub fn network_card_index(&self) -> std::option::Option<i32> {
        self.network_card_index
    }
}
impl aws_http::request_id::RequestId for AttachNetworkInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput).
pub mod attach_network_interface_output {

    /// A builder for [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attachment_id: std::option::Option<std::string::String>,
        pub(crate) network_card_index: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the network interface attachment.</p>
        pub fn attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.attachment_id = Some(input.into());
            self
        }
        /// <p>The ID of the network interface attachment.</p>
        pub fn set_attachment_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.attachment_id = input;
            self
        }
        /// <p>The index of the network card.</p>
        pub fn network_card_index(mut self, input: i32) -> Self {
            self.network_card_index = Some(input);
            self
        }
        /// <p>The index of the network card.</p>
        pub fn set_network_card_index(mut self, input: std::option::Option<i32>) -> Self {
            self.network_card_index = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput).
        pub fn build(self) -> crate::output::AttachNetworkInterfaceOutput {
            crate::output::AttachNetworkInterfaceOutput {
                attachment_id: self.attachment_id,
                network_card_index: self.network_card_index,
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput).
    pub fn builder() -> crate::output::attach_network_interface_output::Builder {
        crate::output::attach_network_interface_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachInternetGatewayOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AttachInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput).
pub mod attach_internet_gateway_output {

    /// A builder for [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput).
        pub fn build(self) -> crate::output::AttachInternetGatewayOutput {
            crate::output::AttachInternetGatewayOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput).
    pub fn builder() -> crate::output::attach_internet_gateway_output::Builder {
        crate::output::attach_internet_gateway_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachClassicLinkVpcOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    #[doc(hidden)]
    pub r#return: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl AttachClassicLinkVpcOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub fn r#return(&self) -> std::option::Option<bool> {
        self.r#return
    }
}
impl aws_http::request_id::RequestId for AttachClassicLinkVpcOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput).
pub mod attach_classic_link_vpc_output {

    /// A builder for [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, input: bool) -> Self {
            self.r#return = Some(input);
            self
        }
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn set_return(mut self, input: std::option::Option<bool>) -> Self {
            self.r#return = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput).
        pub fn build(self) -> crate::output::AttachClassicLinkVpcOutput {
            crate::output::AttachClassicLinkVpcOutput {
                r#return: self.r#return,
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachClassicLinkVpcOutput {
    /// Creates a new builder-style object to manufacture [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput).
    pub fn builder() -> crate::output::attach_classic_link_vpc_output::Builder {
        crate::output::attach_classic_link_vpc_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateVpcCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block_association: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
    /// <p>Information about the IPv4 CIDR block association.</p>
    #[doc(hidden)]
    pub cidr_block_association: std::option::Option<crate::model::VpcCidrBlockAssociation>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateVpcCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub fn ipv6_cidr_block_association(
        &self,
    ) -> std::option::Option<&crate::model::VpcIpv6CidrBlockAssociation> {
        self.ipv6_cidr_block_association.as_ref()
    }
    /// <p>Information about the IPv4 CIDR block association.</p>
    pub fn cidr_block_association(
        &self,
    ) -> std::option::Option<&crate::model::VpcCidrBlockAssociation> {
        self.cidr_block_association.as_ref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateVpcCidrBlockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput).
pub mod associate_vpc_cidr_block_output {

    /// A builder for [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        pub(crate) cidr_block_association:
            std::option::Option<crate::model::VpcCidrBlockAssociation>,
        pub(crate) vpc_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            input: crate::model::VpcIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(input);
            self
        }
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn set_ipv6_cidr_block_association(
            mut self,
            input: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = input;
            self
        }
        /// <p>Information about the IPv4 CIDR block association.</p>
        pub fn cidr_block_association(
            mut self,
            input: crate::model::VpcCidrBlockAssociation,
        ) -> Self {
            self.cidr_block_association = Some(input);
            self
        }
        /// <p>Information about the IPv4 CIDR block association.</p>
        pub fn set_cidr_block_association(
            mut self,
            input: std::option::Option<crate::model::VpcCidrBlockAssociation>,
        ) -> Self {
            self.cidr_block_association = input;
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(input.into());
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput).
        pub fn build(self) -> crate::output::AssociateVpcCidrBlockOutput {
            crate::output::AssociateVpcCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                cidr_block_association: self.cidr_block_association,
                vpc_id: self.vpc_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateVpcCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput).
    pub fn builder() -> crate::output::associate_vpc_cidr_block_output::Builder {
        crate::output::associate_vpc_cidr_block_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateTrunkInterfaceOutput {
    /// <p>Information about the association between the trunk network interface and branch network interface.</p>
    #[doc(hidden)]
    pub interface_association: std::option::Option<crate::model::TrunkInterfaceAssociation>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateTrunkInterfaceOutput {
    /// <p>Information about the association between the trunk network interface and branch network interface.</p>
    pub fn interface_association(
        &self,
    ) -> std::option::Option<&crate::model::TrunkInterfaceAssociation> {
        self.interface_association.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateTrunkInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateTrunkInterfaceOutput`](crate::output::AssociateTrunkInterfaceOutput).
pub mod associate_trunk_interface_output {

    /// A builder for [`AssociateTrunkInterfaceOutput`](crate::output::AssociateTrunkInterfaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) interface_association:
            std::option::Option<crate::model::TrunkInterfaceAssociation>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the association between the trunk network interface and branch network interface.</p>
        pub fn interface_association(
            mut self,
            input: crate::model::TrunkInterfaceAssociation,
        ) -> Self {
            self.interface_association = Some(input);
            self
        }
        /// <p>Information about the association between the trunk network interface and branch network interface.</p>
        pub fn set_interface_association(
            mut self,
            input: std::option::Option<crate::model::TrunkInterfaceAssociation>,
        ) -> Self {
            self.interface_association = input;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTrunkInterfaceOutput`](crate::output::AssociateTrunkInterfaceOutput).
        pub fn build(self) -> crate::output::AssociateTrunkInterfaceOutput {
            crate::output::AssociateTrunkInterfaceOutput {
                interface_association: self.interface_association,
                client_token: self.client_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateTrunkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTrunkInterfaceOutput`](crate::output::AssociateTrunkInterfaceOutput).
    pub fn builder() -> crate::output::associate_trunk_interface_output::Builder {
        crate::output::associate_trunk_interface_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateTransitGatewayRouteTableOutput {
    /// <p>The ID of the association.</p>
    #[doc(hidden)]
    pub association: std::option::Option<crate::model::TransitGatewayAssociation>,
    _request_id: Option<String>,
}
impl AssociateTransitGatewayRouteTableOutput {
    /// <p>The ID of the association.</p>
    pub fn association(&self) -> std::option::Option<&crate::model::TransitGatewayAssociation> {
        self.association.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateTransitGatewayRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput).
pub mod associate_transit_gateway_route_table_output {

    /// A builder for [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association: std::option::Option<crate::model::TransitGatewayAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the association.</p>
        pub fn association(mut self, input: crate::model::TransitGatewayAssociation) -> Self {
            self.association = Some(input);
            self
        }
        /// <p>The ID of the association.</p>
        pub fn set_association(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayAssociation>,
        ) -> Self {
            self.association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput).
        pub fn build(self) -> crate::output::AssociateTransitGatewayRouteTableOutput {
            crate::output::AssociateTransitGatewayRouteTableOutput {
                association: self.association,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput).
    pub fn builder() -> crate::output::associate_transit_gateway_route_table_output::Builder {
        crate::output::associate_transit_gateway_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateTransitGatewayPolicyTableOutput {
    /// <p>Describes the association of a transit gateway and a transit gateway policy table.</p>
    #[doc(hidden)]
    pub association: std::option::Option<crate::model::TransitGatewayPolicyTableAssociation>,
    _request_id: Option<String>,
}
impl AssociateTransitGatewayPolicyTableOutput {
    /// <p>Describes the association of a transit gateway and a transit gateway policy table.</p>
    pub fn association(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPolicyTableAssociation> {
        self.association.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateTransitGatewayPolicyTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateTransitGatewayPolicyTableOutput`](crate::output::AssociateTransitGatewayPolicyTableOutput).
pub mod associate_transit_gateway_policy_table_output {

    /// A builder for [`AssociateTransitGatewayPolicyTableOutput`](crate::output::AssociateTransitGatewayPolicyTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association:
            std::option::Option<crate::model::TransitGatewayPolicyTableAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the association of a transit gateway and a transit gateway policy table.</p>
        pub fn association(
            mut self,
            input: crate::model::TransitGatewayPolicyTableAssociation,
        ) -> Self {
            self.association = Some(input);
            self
        }
        /// <p>Describes the association of a transit gateway and a transit gateway policy table.</p>
        pub fn set_association(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPolicyTableAssociation>,
        ) -> Self {
            self.association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTransitGatewayPolicyTableOutput`](crate::output::AssociateTransitGatewayPolicyTableOutput).
        pub fn build(self) -> crate::output::AssociateTransitGatewayPolicyTableOutput {
            crate::output::AssociateTransitGatewayPolicyTableOutput {
                association: self.association,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateTransitGatewayPolicyTableOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayPolicyTableOutput`](crate::output::AssociateTransitGatewayPolicyTableOutput).
    pub fn builder() -> crate::output::associate_transit_gateway_policy_table_output::Builder {
        crate::output::associate_transit_gateway_policy_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the transit gateway multicast domain associations.</p>
    #[doc(hidden)]
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    _request_id: Option<String>,
}
impl AssociateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the transit gateway multicast domain associations.</p>
    pub fn associations(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDomainAssociations> {
        self.associations.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateTransitGatewayMulticastDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput).
pub mod associate_transit_gateway_multicast_domain_output {

    /// A builder for [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the transit gateway multicast domain associations.</p>
        pub fn associations(
            mut self,
            input: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(input);
            self
        }
        /// <p>Information about the transit gateway multicast domain associations.</p>
        pub fn set_associations(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput).
        pub fn build(self) -> crate::output::AssociateTransitGatewayMulticastDomainOutput {
            crate::output::AssociateTransitGatewayMulticastDomainOutput {
                associations: self.associations,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput).
    pub fn builder() -> crate::output::associate_transit_gateway_multicast_domain_output::Builder {
        crate::output::associate_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateSubnetCidrBlockOutput {
    /// <p>Information about the IPv6 association.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block_association:
        std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
    /// <p>The ID of the subnet.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateSubnetCidrBlockOutput {
    /// <p>Information about the IPv6 association.</p>
    pub fn ipv6_cidr_block_association(
        &self,
    ) -> std::option::Option<&crate::model::SubnetIpv6CidrBlockAssociation> {
        self.ipv6_cidr_block_association.as_ref()
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateSubnetCidrBlockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput).
pub mod associate_subnet_cidr_block_output {

    /// A builder for [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        pub(crate) subnet_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            input: crate::model::SubnetIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(input);
            self
        }
        /// <p>Information about the IPv6 association.</p>
        pub fn set_ipv6_cidr_block_association(
            mut self,
            input: std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = input;
            self
        }
        /// <p>The ID of the subnet.</p>
        pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.subnet_id = Some(input.into());
            self
        }
        /// <p>The ID of the subnet.</p>
        pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.subnet_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput).
        pub fn build(self) -> crate::output::AssociateSubnetCidrBlockOutput {
            crate::output::AssociateSubnetCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                subnet_id: self.subnet_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateSubnetCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput).
    pub fn builder() -> crate::output::associate_subnet_cidr_block_output::Builder {
        crate::output::associate_subnet_cidr_block_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateRouteTableOutput {
    /// <p>The route table association ID. This ID is required for disassociating the route table.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The state of the association.</p>
    #[doc(hidden)]
    pub association_state: std::option::Option<crate::model::RouteTableAssociationState>,
    _request_id: Option<String>,
}
impl AssociateRouteTableOutput {
    /// <p>The route table association ID. This ID is required for disassociating the route table.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The state of the association.</p>
    pub fn association_state(
        &self,
    ) -> std::option::Option<&crate::model::RouteTableAssociationState> {
        self.association_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateRouteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput).
pub mod associate_route_table_output {

    /// A builder for [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        pub(crate) association_state: std::option::Option<crate::model::RouteTableAssociationState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The route table association ID. This ID is required for disassociating the route table.</p>
        pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_id = Some(input.into());
            self
        }
        /// <p>The route table association ID. This ID is required for disassociating the route table.</p>
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_id = input;
            self
        }
        /// <p>The state of the association.</p>
        pub fn association_state(
            mut self,
            input: crate::model::RouteTableAssociationState,
        ) -> Self {
            self.association_state = Some(input);
            self
        }
        /// <p>The state of the association.</p>
        pub fn set_association_state(
            mut self,
            input: std::option::Option<crate::model::RouteTableAssociationState>,
        ) -> Self {
            self.association_state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput).
        pub fn build(self) -> crate::output::AssociateRouteTableOutput {
            crate::output::AssociateRouteTableOutput {
                association_id: self.association_id,
                association_state: self.association_state,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput).
    pub fn builder() -> crate::output::associate_route_table_output::Builder {
        crate::output::associate_route_table_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    #[doc(hidden)]
    pub instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
    _request_id: Option<String>,
}
impl AssociateInstanceEventWindowOutput {
    /// <p>Information about the event window.</p>
    pub fn instance_event_window(&self) -> std::option::Option<&crate::model::InstanceEventWindow> {
        self.instance_event_window.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateInstanceEventWindowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateInstanceEventWindowOutput`](crate::output::AssociateInstanceEventWindowOutput).
pub mod associate_instance_event_window_output {

    /// A builder for [`AssociateInstanceEventWindowOutput`](crate::output::AssociateInstanceEventWindowOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_event_window: std::option::Option<crate::model::InstanceEventWindow>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the event window.</p>
        pub fn instance_event_window(mut self, input: crate::model::InstanceEventWindow) -> Self {
            self.instance_event_window = Some(input);
            self
        }
        /// <p>Information about the event window.</p>
        pub fn set_instance_event_window(
            mut self,
            input: std::option::Option<crate::model::InstanceEventWindow>,
        ) -> Self {
            self.instance_event_window = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateInstanceEventWindowOutput`](crate::output::AssociateInstanceEventWindowOutput).
        pub fn build(self) -> crate::output::AssociateInstanceEventWindowOutput {
            crate::output::AssociateInstanceEventWindowOutput {
                instance_event_window: self.instance_event_window,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateInstanceEventWindowOutput {
    /// Creates a new builder-style object to manufacture [`AssociateInstanceEventWindowOutput`](crate::output::AssociateInstanceEventWindowOutput).
    pub fn builder() -> crate::output::associate_instance_event_window_output::Builder {
        crate::output::associate_instance_event_window_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateIamInstanceProfileOutput {
    /// <p>Information about the IAM instance profile association.</p>
    #[doc(hidden)]
    pub iam_instance_profile_association:
        std::option::Option<crate::model::IamInstanceProfileAssociation>,
    _request_id: Option<String>,
}
impl AssociateIamInstanceProfileOutput {
    /// <p>Information about the IAM instance profile association.</p>
    pub fn iam_instance_profile_association(
        &self,
    ) -> std::option::Option<&crate::model::IamInstanceProfileAssociation> {
        self.iam_instance_profile_association.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateIamInstanceProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput).
pub mod associate_iam_instance_profile_output {

    /// A builder for [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_association:
            std::option::Option<crate::model::IamInstanceProfileAssociation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the IAM instance profile association.</p>
        pub fn iam_instance_profile_association(
            mut self,
            input: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            self.iam_instance_profile_association = Some(input);
            self
        }
        /// <p>Information about the IAM instance profile association.</p>
        pub fn set_iam_instance_profile_association(
            mut self,
            input: std::option::Option<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            self.iam_instance_profile_association = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput).
        pub fn build(self) -> crate::output::AssociateIamInstanceProfileOutput {
            crate::output::AssociateIamInstanceProfileOutput {
                iam_instance_profile_association: self.iam_instance_profile_association,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateIamInstanceProfileOutput {
    /// Creates a new builder-style object to manufacture [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput).
    pub fn builder() -> crate::output::associate_iam_instance_profile_output::Builder {
        crate::output::associate_iam_instance_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateEnclaveCertificateIamRoleOutput {
    /// <p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>
    #[doc(hidden)]
    pub certificate_s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The object key is formatted as follows: <code>role_arn</code>/<code>certificate_arn</code>.</p>
    #[doc(hidden)]
    pub certificate_s3_object_key: std::option::Option<std::string::String>,
    /// <p>The ID of the KMS key used to encrypt the private key of the certificate.</p>
    #[doc(hidden)]
    pub encryption_kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateEnclaveCertificateIamRoleOutput {
    /// <p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>
    pub fn certificate_s3_bucket_name(&self) -> std::option::Option<&str> {
        self.certificate_s3_bucket_name.as_deref()
    }
    /// <p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The object key is formatted as follows: <code>role_arn</code>/<code>certificate_arn</code>.</p>
    pub fn certificate_s3_object_key(&self) -> std::option::Option<&str> {
        self.certificate_s3_object_key.as_deref()
    }
    /// <p>The ID of the KMS key used to encrypt the private key of the certificate.</p>
    pub fn encryption_kms_key_id(&self) -> std::option::Option<&str> {
        self.encryption_kms_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateEnclaveCertificateIamRoleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput).
pub mod associate_enclave_certificate_iam_role_output {

    /// A builder for [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_s3_bucket_name: std::option::Option<std::string::String>,
        pub(crate) certificate_s3_object_key: std::option::Option<std::string::String>,
        pub(crate) encryption_kms_key_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>
        pub fn certificate_s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.certificate_s3_bucket_name = Some(input.into());
            self
        }
        /// <p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>
        pub fn set_certificate_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_s3_bucket_name = input;
            self
        }
        /// <p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The object key is formatted as follows: <code>role_arn</code>/<code>certificate_arn</code>.</p>
        pub fn certificate_s3_object_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.certificate_s3_object_key = Some(input.into());
            self
        }
        /// <p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The object key is formatted as follows: <code>role_arn</code>/<code>certificate_arn</code>.</p>
        pub fn set_certificate_s3_object_key(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_s3_object_key = input;
            self
        }
        /// <p>The ID of the KMS key used to encrypt the private key of the certificate.</p>
        pub fn encryption_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.encryption_kms_key_id = Some(input.into());
            self
        }
        /// <p>The ID of the KMS key used to encrypt the private key of the certificate.</p>
        pub fn set_encryption_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_kms_key_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput).
        pub fn build(self) -> crate::output::AssociateEnclaveCertificateIamRoleOutput {
            crate::output::AssociateEnclaveCertificateIamRoleOutput {
                certificate_s3_bucket_name: self.certificate_s3_bucket_name,
                certificate_s3_object_key: self.certificate_s3_object_key,
                encryption_kms_key_id: self.encryption_kms_key_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateEnclaveCertificateIamRoleOutput {
    /// Creates a new builder-style object to manufacture [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput).
    pub fn builder() -> crate::output::associate_enclave_certificate_iam_role_output::Builder {
        crate::output::associate_enclave_certificate_iam_role_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateDhcpOptionsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AssociateDhcpOptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput).
pub mod associate_dhcp_options_output {

    /// A builder for [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput).
        pub fn build(self) -> crate::output::AssociateDhcpOptionsOutput {
            crate::output::AssociateDhcpOptionsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput).
    pub fn builder() -> crate::output::associate_dhcp_options_output::Builder {
        crate::output::associate_dhcp_options_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateClientVpnTargetNetworkOutput {
    /// <p>The unique ID of the target network association.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The current state of the target network association.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AssociationStatus>,
    _request_id: Option<String>,
}
impl AssociateClientVpnTargetNetworkOutput {
    /// <p>The unique ID of the target network association.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The current state of the target network association.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::AssociationStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateClientVpnTargetNetworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput).
pub mod associate_client_vpn_target_network_output {

    /// A builder for [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::AssociationStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique ID of the target network association.</p>
        pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the target network association.</p>
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_id = input;
            self
        }
        /// <p>The current state of the target network association.</p>
        pub fn status(mut self, input: crate::model::AssociationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current state of the target network association.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AssociationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput).
        pub fn build(self) -> crate::output::AssociateClientVpnTargetNetworkOutput {
            crate::output::AssociateClientVpnTargetNetworkOutput {
                association_id: self.association_id,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateClientVpnTargetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput).
    pub fn builder() -> crate::output::associate_client_vpn_target_network_output::Builder {
        crate::output::associate_client_vpn_target_network_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateAddressOutput {
    /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssociateAddressOutput {
    /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateAddressOutput`](crate::output::AssociateAddressOutput).
pub mod associate_address_output {

    /// A builder for [`AssociateAddressOutput`](crate::output::AssociateAddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
        pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.association_id = Some(input.into());
            self
        }
        /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.association_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateAddressOutput`](crate::output::AssociateAddressOutput).
        pub fn build(self) -> crate::output::AssociateAddressOutput {
            crate::output::AssociateAddressOutput {
                association_id: self.association_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateAddressOutput {
    /// Creates a new builder-style object to manufacture [`AssociateAddressOutput`](crate::output::AssociateAddressOutput).
    pub fn builder() -> crate::output::associate_address_output::Builder {
        crate::output::associate_address_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssignPrivateIpAddressesOutput {
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The private IP addresses assigned to the network interface.</p>
    #[doc(hidden)]
    pub assigned_private_ip_addresses:
        std::option::Option<std::vec::Vec<crate::model::AssignedPrivateIpAddress>>,
    /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
    #[doc(hidden)]
    pub assigned_ipv4_prefixes:
        std::option::Option<std::vec::Vec<crate::model::Ipv4PrefixSpecification>>,
    _request_id: Option<String>,
}
impl AssignPrivateIpAddressesOutput {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The private IP addresses assigned to the network interface.</p>
    pub fn assigned_private_ip_addresses(
        &self,
    ) -> std::option::Option<&[crate::model::AssignedPrivateIpAddress]> {
        self.assigned_private_ip_addresses.as_deref()
    }
    /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
    pub fn assigned_ipv4_prefixes(
        &self,
    ) -> std::option::Option<&[crate::model::Ipv4PrefixSpecification]> {
        self.assigned_ipv4_prefixes.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssignPrivateIpAddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput).
pub mod assign_private_ip_addresses_output {

    /// A builder for [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        pub(crate) assigned_private_ip_addresses:
            std::option::Option<std::vec::Vec<crate::model::AssignedPrivateIpAddress>>,
        pub(crate) assigned_ipv4_prefixes:
            std::option::Option<std::vec::Vec<crate::model::Ipv4PrefixSpecification>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(input.into());
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn set_network_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = input;
            self
        }
        /// Appends an item to `assigned_private_ip_addresses`.
        ///
        /// To override the contents of this collection use [`set_assigned_private_ip_addresses`](Self::set_assigned_private_ip_addresses).
        ///
        /// <p>The private IP addresses assigned to the network interface.</p>
        pub fn assigned_private_ip_addresses(
            mut self,
            input: crate::model::AssignedPrivateIpAddress,
        ) -> Self {
            let mut v = self.assigned_private_ip_addresses.unwrap_or_default();
            v.push(input);
            self.assigned_private_ip_addresses = Some(v);
            self
        }
        /// <p>The private IP addresses assigned to the network interface.</p>
        pub fn set_assigned_private_ip_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssignedPrivateIpAddress>>,
        ) -> Self {
            self.assigned_private_ip_addresses = input;
            self
        }
        /// Appends an item to `assigned_ipv4_prefixes`.
        ///
        /// To override the contents of this collection use [`set_assigned_ipv4_prefixes`](Self::set_assigned_ipv4_prefixes).
        ///
        /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
        pub fn assigned_ipv4_prefixes(
            mut self,
            input: crate::model::Ipv4PrefixSpecification,
        ) -> Self {
            let mut v = self.assigned_ipv4_prefixes.unwrap_or_default();
            v.push(input);
            self.assigned_ipv4_prefixes = Some(v);
            self
        }
        /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
        pub fn set_assigned_ipv4_prefixes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Ipv4PrefixSpecification>>,
        ) -> Self {
            self.assigned_ipv4_prefixes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput).
        pub fn build(self) -> crate::output::AssignPrivateIpAddressesOutput {
            crate::output::AssignPrivateIpAddressesOutput {
                network_interface_id: self.network_interface_id,
                assigned_private_ip_addresses: self.assigned_private_ip_addresses,
                assigned_ipv4_prefixes: self.assigned_ipv4_prefixes,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssignPrivateIpAddressesOutput {
    /// Creates a new builder-style object to manufacture [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput).
    pub fn builder() -> crate::output::assign_private_ip_addresses_output::Builder {
        crate::output::assign_private_ip_addresses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssignIpv6AddressesOutput {
    /// <p>The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses that were assigned to the network interface before the request are not included.</p>
    #[doc(hidden)]
    pub assigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
    #[doc(hidden)]
    pub assigned_ipv6_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AssignIpv6AddressesOutput {
    /// <p>The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses that were assigned to the network interface before the request are not included.</p>
    pub fn assigned_ipv6_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.assigned_ipv6_addresses.as_deref()
    }
    /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
    pub fn assigned_ipv6_prefixes(&self) -> std::option::Option<&[std::string::String]> {
        self.assigned_ipv6_prefixes.as_deref()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssignIpv6AddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput).
pub mod assign_ipv6_addresses_output {

    /// A builder for [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) assigned_ipv6_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `assigned_ipv6_addresses`.
        ///
        /// To override the contents of this collection use [`set_assigned_ipv6_addresses`](Self::set_assigned_ipv6_addresses).
        ///
        /// <p>The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses that were assigned to the network interface before the request are not included.</p>
        pub fn assigned_ipv6_addresses(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.assigned_ipv6_addresses.unwrap_or_default();
            v.push(input.into());
            self.assigned_ipv6_addresses = Some(v);
            self
        }
        /// <p>The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses that were assigned to the network interface before the request are not included.</p>
        pub fn set_assigned_ipv6_addresses(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.assigned_ipv6_addresses = input;
            self
        }
        /// Appends an item to `assigned_ipv6_prefixes`.
        ///
        /// To override the contents of this collection use [`set_assigned_ipv6_prefixes`](Self::set_assigned_ipv6_prefixes).
        ///
        /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
        pub fn assigned_ipv6_prefixes(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.assigned_ipv6_prefixes.unwrap_or_default();
            v.push(input.into());
            self.assigned_ipv6_prefixes = Some(v);
            self
        }
        /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
        pub fn set_assigned_ipv6_prefixes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.assigned_ipv6_prefixes = input;
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(input.into());
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn set_network_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput).
        pub fn build(self) -> crate::output::AssignIpv6AddressesOutput {
            crate::output::AssignIpv6AddressesOutput {
                assigned_ipv6_addresses: self.assigned_ipv6_addresses,
                assigned_ipv6_prefixes: self.assigned_ipv6_prefixes,
                network_interface_id: self.network_interface_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssignIpv6AddressesOutput {
    /// Creates a new builder-style object to manufacture [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput).
    pub fn builder() -> crate::output::assign_ipv6_addresses_output::Builder {
        crate::output::assign_ipv6_addresses_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    /// <p>The IDs of the applied security groups.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    /// <p>The IDs of the applied security groups.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
}
impl aws_http::request_id::RequestId for ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput).
pub mod apply_security_groups_to_client_vpn_target_network_output {

    /// A builder for [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `security_group_ids`.
        ///
        /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
        ///
        /// <p>The IDs of the applied security groups.</p>
        pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.security_group_ids = Some(v);
            self
        }
        /// <p>The IDs of the applied security groups.</p>
        pub fn set_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_group_ids = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput).
        pub fn build(self) -> crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput {
            crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput {
                security_group_ids: self.security_group_ids,
                _request_id: self._request_id,
            }
        }
    }
}
impl ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput).
    pub fn builder(
    ) -> crate::output::apply_security_groups_to_client_vpn_target_network_output::Builder {
        crate::output::apply_security_groups_to_client_vpn_target_network_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AllocateIpamPoolCidrOutput {
    /// <p>Information about the allocation created.</p>
    #[doc(hidden)]
    pub ipam_pool_allocation: std::option::Option<crate::model::IpamPoolAllocation>,
    _request_id: Option<String>,
}
impl AllocateIpamPoolCidrOutput {
    /// <p>Information about the allocation created.</p>
    pub fn ipam_pool_allocation(&self) -> std::option::Option<&crate::model::IpamPoolAllocation> {
        self.ipam_pool_allocation.as_ref()
    }
}
impl aws_http::request_id::RequestId for AllocateIpamPoolCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AllocateIpamPoolCidrOutput`](crate::output::AllocateIpamPoolCidrOutput).
pub mod allocate_ipam_pool_cidr_output {

    /// A builder for [`AllocateIpamPoolCidrOutput`](crate::output::AllocateIpamPoolCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipam_pool_allocation: std::option::Option<crate::model::IpamPoolAllocation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the allocation created.</p>
        pub fn ipam_pool_allocation(mut self, input: crate::model::IpamPoolAllocation) -> Self {
            self.ipam_pool_allocation = Some(input);
            self
        }
        /// <p>Information about the allocation created.</p>
        pub fn set_ipam_pool_allocation(
            mut self,
            input: std::option::Option<crate::model::IpamPoolAllocation>,
        ) -> Self {
            self.ipam_pool_allocation = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AllocateIpamPoolCidrOutput`](crate::output::AllocateIpamPoolCidrOutput).
        pub fn build(self) -> crate::output::AllocateIpamPoolCidrOutput {
            crate::output::AllocateIpamPoolCidrOutput {
                ipam_pool_allocation: self.ipam_pool_allocation,
                _request_id: self._request_id,
            }
        }
    }
}
impl AllocateIpamPoolCidrOutput {
    /// Creates a new builder-style object to manufacture [`AllocateIpamPoolCidrOutput`](crate::output::AllocateIpamPoolCidrOutput).
    pub fn builder() -> crate::output::allocate_ipam_pool_cidr_output::Builder {
        crate::output::allocate_ipam_pool_cidr_output::Builder::default()
    }
}

/// <p>Contains the output of AllocateHosts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AllocateHostsOutput {
    /// <p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.</p>
    #[doc(hidden)]
    pub host_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl AllocateHostsOutput {
    /// <p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.</p>
    pub fn host_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.host_ids.as_deref()
    }
}
impl aws_http::request_id::RequestId for AllocateHostsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AllocateHostsOutput`](crate::output::AllocateHostsOutput).
pub mod allocate_hosts_output {

    /// A builder for [`AllocateHostsOutput`](crate::output::AllocateHostsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) host_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `host_ids`.
        ///
        /// To override the contents of this collection use [`set_host_ids`](Self::set_host_ids).
        ///
        /// <p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.</p>
        pub fn host_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.host_ids.unwrap_or_default();
            v.push(input.into());
            self.host_ids = Some(v);
            self
        }
        /// <p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.</p>
        pub fn set_host_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.host_ids = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AllocateHostsOutput`](crate::output::AllocateHostsOutput).
        pub fn build(self) -> crate::output::AllocateHostsOutput {
            crate::output::AllocateHostsOutput {
                host_ids: self.host_ids,
                _request_id: self._request_id,
            }
        }
    }
}
impl AllocateHostsOutput {
    /// Creates a new builder-style object to manufacture [`AllocateHostsOutput`](crate::output::AllocateHostsOutput).
    pub fn builder() -> crate::output::allocate_hosts_output::Builder {
        crate::output::allocate_hosts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AllocateAddressOutput {
    /// <p>The Elastic IP address.</p>
    #[doc(hidden)]
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>[EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
    #[doc(hidden)]
    pub allocation_id: std::option::Option<std::string::String>,
    /// <p>The ID of an address pool.</p>
    #[doc(hidden)]
    pub public_ipv4_pool: std::option::Option<std::string::String>,
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    #[doc(hidden)]
    pub network_border_group: std::option::Option<std::string::String>,
    /// <p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or instances in EC2-Classic (<code>standard</code>).</p>
    #[doc(hidden)]
    pub domain: std::option::Option<crate::model::DomainType>,
    /// <p>The customer-owned IP address.</p>
    #[doc(hidden)]
    pub customer_owned_ip: std::option::Option<std::string::String>,
    /// <p>The ID of the customer-owned address pool.</p>
    #[doc(hidden)]
    pub customer_owned_ipv4_pool: std::option::Option<std::string::String>,
    /// <p>The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
    #[doc(hidden)]
    pub carrier_ip: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AllocateAddressOutput {
    /// <p>The Elastic IP address.</p>
    pub fn public_ip(&self) -> std::option::Option<&str> {
        self.public_ip.as_deref()
    }
    /// <p>[EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
    pub fn allocation_id(&self) -> std::option::Option<&str> {
        self.allocation_id.as_deref()
    }
    /// <p>The ID of an address pool.</p>
    pub fn public_ipv4_pool(&self) -> std::option::Option<&str> {
        self.public_ipv4_pool.as_deref()
    }
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    pub fn network_border_group(&self) -> std::option::Option<&str> {
        self.network_border_group.as_deref()
    }
    /// <p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or instances in EC2-Classic (<code>standard</code>).</p>
    pub fn domain(&self) -> std::option::Option<&crate::model::DomainType> {
        self.domain.as_ref()
    }
    /// <p>The customer-owned IP address.</p>
    pub fn customer_owned_ip(&self) -> std::option::Option<&str> {
        self.customer_owned_ip.as_deref()
    }
    /// <p>The ID of the customer-owned address pool.</p>
    pub fn customer_owned_ipv4_pool(&self) -> std::option::Option<&str> {
        self.customer_owned_ipv4_pool.as_deref()
    }
    /// <p>The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
    pub fn carrier_ip(&self) -> std::option::Option<&str> {
        self.carrier_ip.as_deref()
    }
}
impl aws_http::request_id::RequestId for AllocateAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AllocateAddressOutput`](crate::output::AllocateAddressOutput).
pub mod allocate_address_output {

    /// A builder for [`AllocateAddressOutput`](crate::output::AllocateAddressOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) public_ip: std::option::Option<std::string::String>,
        pub(crate) allocation_id: std::option::Option<std::string::String>,
        pub(crate) public_ipv4_pool: std::option::Option<std::string::String>,
        pub(crate) network_border_group: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<crate::model::DomainType>,
        pub(crate) customer_owned_ip: std::option::Option<std::string::String>,
        pub(crate) customer_owned_ipv4_pool: std::option::Option<std::string::String>,
        pub(crate) carrier_ip: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Elastic IP address.</p>
        pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
            self.public_ip = Some(input.into());
            self
        }
        /// <p>The Elastic IP address.</p>
        pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.public_ip = input;
            self
        }
        /// <p>[EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
        pub fn allocation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.allocation_id = Some(input.into());
            self
        }
        /// <p>[EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
        pub fn set_allocation_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.allocation_id = input;
            self
        }
        /// <p>The ID of an address pool.</p>
        pub fn public_ipv4_pool(mut self, input: impl Into<std::string::String>) -> Self {
            self.public_ipv4_pool = Some(input.into());
            self
        }
        /// <p>The ID of an address pool.</p>
        pub fn set_public_ipv4_pool(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.public_ipv4_pool = input;
            self
        }
        /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
        pub fn network_border_group(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_border_group = Some(input.into());
            self
        }
        /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
        pub fn set_network_border_group(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_border_group = input;
            self
        }
        /// <p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or instances in EC2-Classic (<code>standard</code>).</p>
        pub fn domain(mut self, input: crate::model::DomainType) -> Self {
            self.domain = Some(input);
            self
        }
        /// <p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or instances in EC2-Classic (<code>standard</code>).</p>
        pub fn set_domain(mut self, input: std::option::Option<crate::model::DomainType>) -> Self {
            self.domain = input;
            self
        }
        /// <p>The customer-owned IP address.</p>
        pub fn customer_owned_ip(mut self, input: impl Into<std::string::String>) -> Self {
            self.customer_owned_ip = Some(input.into());
            self
        }
        /// <p>The customer-owned IP address.</p>
        pub fn set_customer_owned_ip(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.customer_owned_ip = input;
            self
        }
        /// <p>The ID of the customer-owned address pool.</p>
        pub fn customer_owned_ipv4_pool(mut self, input: impl Into<std::string::String>) -> Self {
            self.customer_owned_ipv4_pool = Some(input.into());
            self
        }
        /// <p>The ID of the customer-owned address pool.</p>
        pub fn set_customer_owned_ipv4_pool(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.customer_owned_ipv4_pool = input;
            self
        }
        /// <p>The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
        pub fn carrier_ip(mut self, input: impl Into<std::string::String>) -> Self {
            self.carrier_ip = Some(input.into());
            self
        }
        /// <p>The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
        pub fn set_carrier_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.carrier_ip = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AllocateAddressOutput`](crate::output::AllocateAddressOutput).
        pub fn build(self) -> crate::output::AllocateAddressOutput {
            crate::output::AllocateAddressOutput {
                public_ip: self.public_ip,
                allocation_id: self.allocation_id,
                public_ipv4_pool: self.public_ipv4_pool,
                network_border_group: self.network_border_group,
                domain: self.domain,
                customer_owned_ip: self.customer_owned_ip,
                customer_owned_ipv4_pool: self.customer_owned_ipv4_pool,
                carrier_ip: self.carrier_ip,
                _request_id: self._request_id,
            }
        }
    }
}
impl AllocateAddressOutput {
    /// Creates a new builder-style object to manufacture [`AllocateAddressOutput`](crate::output::AllocateAddressOutput).
    pub fn builder() -> crate::output::allocate_address_output::Builder {
        crate::output::allocate_address_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdvertiseByoipCidrOutput {
    /// <p>Information about the address range.</p>
    #[doc(hidden)]
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    _request_id: Option<String>,
}
impl AdvertiseByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub fn byoip_cidr(&self) -> std::option::Option<&crate::model::ByoipCidr> {
        self.byoip_cidr.as_ref()
    }
}
impl aws_http::request_id::RequestId for AdvertiseByoipCidrOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput).
pub mod advertise_byoip_cidr_output {

    /// A builder for [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, input: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(input);
            self
        }
        /// <p>Information about the address range.</p>
        pub fn set_byoip_cidr(
            mut self,
            input: std::option::Option<crate::model::ByoipCidr>,
        ) -> Self {
            self.byoip_cidr = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput).
        pub fn build(self) -> crate::output::AdvertiseByoipCidrOutput {
            crate::output::AdvertiseByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
                _request_id: self._request_id,
            }
        }
    }
}
impl AdvertiseByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput).
    pub fn builder() -> crate::output::advertise_byoip_cidr_output::Builder {
        crate::output::advertise_byoip_cidr_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptVpcPeeringConnectionOutput {
    /// <p>Information about the VPC peering connection.</p>
    #[doc(hidden)]
    pub vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
    _request_id: Option<String>,
}
impl AcceptVpcPeeringConnectionOutput {
    /// <p>Information about the VPC peering connection.</p>
    pub fn vpc_peering_connection(
        &self,
    ) -> std::option::Option<&crate::model::VpcPeeringConnection> {
        self.vpc_peering_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for AcceptVpcPeeringConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput).
pub mod accept_vpc_peering_connection_output {

    /// A builder for [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the VPC peering connection.</p>
        pub fn vpc_peering_connection(mut self, input: crate::model::VpcPeeringConnection) -> Self {
            self.vpc_peering_connection = Some(input);
            self
        }
        /// <p>Information about the VPC peering connection.</p>
        pub fn set_vpc_peering_connection(
            mut self,
            input: std::option::Option<crate::model::VpcPeeringConnection>,
        ) -> Self {
            self.vpc_peering_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput).
        pub fn build(self) -> crate::output::AcceptVpcPeeringConnectionOutput {
            crate::output::AcceptVpcPeeringConnectionOutput {
                vpc_peering_connection: self.vpc_peering_connection,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput).
    pub fn builder() -> crate::output::accept_vpc_peering_connection_output::Builder {
        crate::output::accept_vpc_peering_connection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptVpcEndpointConnectionsOutput {
    /// <p>Information about the interface endpoints that were not accepted, if applicable.</p>
    #[doc(hidden)]
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    _request_id: Option<String>,
}
impl AcceptVpcEndpointConnectionsOutput {
    /// <p>Information about the interface endpoints that were not accepted, if applicable.</p>
    pub fn unsuccessful(&self) -> std::option::Option<&[crate::model::UnsuccessfulItem]> {
        self.unsuccessful.as_deref()
    }
}
impl aws_http::request_id::RequestId for AcceptVpcEndpointConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput).
pub mod accept_vpc_endpoint_connections_output {

    /// A builder for [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unsuccessful`.
        ///
        /// To override the contents of this collection use [`set_unsuccessful`](Self::set_unsuccessful).
        ///
        /// <p>Information about the interface endpoints that were not accepted, if applicable.</p>
        pub fn unsuccessful(mut self, input: crate::model::UnsuccessfulItem) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(input);
            self.unsuccessful = Some(v);
            self
        }
        /// <p>Information about the interface endpoints that were not accepted, if applicable.</p>
        pub fn set_unsuccessful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput).
        pub fn build(self) -> crate::output::AcceptVpcEndpointConnectionsOutput {
            crate::output::AcceptVpcEndpointConnectionsOutput {
                unsuccessful: self.unsuccessful,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptVpcEndpointConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput).
    pub fn builder() -> crate::output::accept_vpc_endpoint_connections_output::Builder {
        crate::output::accept_vpc_endpoint_connections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptTransitGatewayVpcAttachmentOutput {
    /// <p>The VPC attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    _request_id: Option<String>,
}
impl AcceptTransitGatewayVpcAttachmentOutput {
    /// <p>The VPC attachment.</p>
    pub fn transit_gateway_vpc_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayVpcAttachment> {
        self.transit_gateway_vpc_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for AcceptTransitGatewayVpcAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput).
pub mod accept_transit_gateway_vpc_attachment_output {

    /// A builder for [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The VPC attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            input: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(input);
            self
        }
        /// <p>The VPC attachment.</p>
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput).
        pub fn build(self) -> crate::output::AcceptTransitGatewayVpcAttachmentOutput {
            crate::output::AcceptTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput).
    pub fn builder() -> crate::output::accept_transit_gateway_vpc_attachment_output::Builder {
        crate::output::accept_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    _request_id: Option<String>,
}
impl AcceptTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub fn transit_gateway_peering_attachment(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayPeeringAttachment> {
        self.transit_gateway_peering_attachment.as_ref()
    }
}
impl aws_http::request_id::RequestId for AcceptTransitGatewayPeeringAttachmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput).
pub mod accept_transit_gateway_peering_attachment_output {

    /// A builder for [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            input: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(input);
            self
        }
        /// <p>The transit gateway peering attachment.</p>
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput).
        pub fn build(self) -> crate::output::AcceptTransitGatewayPeeringAttachmentOutput {
            crate::output::AcceptTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput).
    pub fn builder() -> crate::output::accept_transit_gateway_peering_attachment_output::Builder {
        crate::output::accept_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    #[doc(hidden)]
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    _request_id: Option<String>,
}
impl AcceptTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    pub fn associations(
        &self,
    ) -> std::option::Option<&crate::model::TransitGatewayMulticastDomainAssociations> {
        self.associations.as_ref()
    }
}
impl aws_http::request_id::RequestId for AcceptTransitGatewayMulticastDomainAssociationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput).
pub mod accept_transit_gateway_multicast_domain_associations_output {

    /// A builder for [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the multicast domain associations.</p>
        pub fn associations(
            mut self,
            input: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(input);
            self
        }
        /// <p>Information about the multicast domain associations.</p>
        pub fn set_associations(
            mut self,
            input: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput).
        pub fn build(self) -> crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput {
            crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput {
                associations: self.associations,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptTransitGatewayMulticastDomainAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput).
    pub fn builder(
    ) -> crate::output::accept_transit_gateway_multicast_domain_associations_output::Builder {
        crate::output::accept_transit_gateway_multicast_domain_associations_output::Builder::default(
        )
    }
}

/// <p>The result of the exchange and whether it was <code>successful</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptReservedInstancesExchangeQuoteOutput {
    /// <p>The ID of the successful exchange.</p>
    #[doc(hidden)]
    pub exchange_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl AcceptReservedInstancesExchangeQuoteOutput {
    /// <p>The ID of the successful exchange.</p>
    pub fn exchange_id(&self) -> std::option::Option<&str> {
        self.exchange_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for AcceptReservedInstancesExchangeQuoteOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput).
pub mod accept_reserved_instances_exchange_quote_output {

    /// A builder for [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) exchange_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ID of the successful exchange.</p>
        pub fn exchange_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.exchange_id = Some(input.into());
            self
        }
        /// <p>The ID of the successful exchange.</p>
        pub fn set_exchange_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.exchange_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput).
        pub fn build(self) -> crate::output::AcceptReservedInstancesExchangeQuoteOutput {
            crate::output::AcceptReservedInstancesExchangeQuoteOutput {
                exchange_id: self.exchange_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptReservedInstancesExchangeQuoteOutput {
    /// Creates a new builder-style object to manufacture [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput).
    pub fn builder() -> crate::output::accept_reserved_instances_exchange_quote_output::Builder {
        crate::output::accept_reserved_instances_exchange_quote_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptAddressTransferOutput {
    /// <p>An Elastic IP address transfer.</p>
    #[doc(hidden)]
    pub address_transfer: std::option::Option<crate::model::AddressTransfer>,
    _request_id: Option<String>,
}
impl AcceptAddressTransferOutput {
    /// <p>An Elastic IP address transfer.</p>
    pub fn address_transfer(&self) -> std::option::Option<&crate::model::AddressTransfer> {
        self.address_transfer.as_ref()
    }
}
impl aws_http::request_id::RequestId for AcceptAddressTransferOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptAddressTransferOutput`](crate::output::AcceptAddressTransferOutput).
pub mod accept_address_transfer_output {

    /// A builder for [`AcceptAddressTransferOutput`](crate::output::AcceptAddressTransferOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address_transfer: std::option::Option<crate::model::AddressTransfer>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An Elastic IP address transfer.</p>
        pub fn address_transfer(mut self, input: crate::model::AddressTransfer) -> Self {
            self.address_transfer = Some(input);
            self
        }
        /// <p>An Elastic IP address transfer.</p>
        pub fn set_address_transfer(
            mut self,
            input: std::option::Option<crate::model::AddressTransfer>,
        ) -> Self {
            self.address_transfer = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptAddressTransferOutput`](crate::output::AcceptAddressTransferOutput).
        pub fn build(self) -> crate::output::AcceptAddressTransferOutput {
            crate::output::AcceptAddressTransferOutput {
                address_transfer: self.address_transfer,
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptAddressTransferOutput {
    /// Creates a new builder-style object to manufacture [`AcceptAddressTransferOutput`](crate::output::AcceptAddressTransferOutput).
    pub fn builder() -> crate::output::accept_address_transfer_output::Builder {
        crate::output::accept_address_transfer_output::Builder::default()
    }
}
