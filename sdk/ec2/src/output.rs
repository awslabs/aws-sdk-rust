// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct WithdrawByoipCidrOutput {
    /// <p>Information about the address pool.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl std::fmt::Debug for WithdrawByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("WithdrawByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
pub mod withdraw_byoip_cidr_output {
    /// A builder for [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address pool.</p>
        pub fn byoip_cidr(mut self, inp: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(inp);
            self
        }
        pub fn set_byoip_cidr(mut self, inp: std::option::Option<crate::model::ByoipCidr>) -> Self {
            self.byoip_cidr = inp;
            self
        }
        /// Consumes the builder and constructs a [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
        pub fn build(self) -> crate::output::WithdrawByoipCidrOutput {
            crate::output::WithdrawByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl WithdrawByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`WithdrawByoipCidrOutput`](crate::output::WithdrawByoipCidrOutput)
    pub fn builder() -> crate::output::withdraw_byoip_cidr_output::Builder {
        crate::output::withdraw_byoip_cidr_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSecurityGroupRuleDescriptionsIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for UpdateSecurityGroupRuleDescriptionsIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSecurityGroupRuleDescriptionsIngressOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput)
pub mod update_security_group_rule_descriptions_ingress_output {
    /// A builder for [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput)
        pub fn build(self) -> crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput {
            crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl UpdateSecurityGroupRuleDescriptionsIngressOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsIngressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsIngressOutput)
    pub fn builder(
    ) -> crate::output::update_security_group_rule_descriptions_ingress_output::Builder {
        crate::output::update_security_group_rule_descriptions_ingress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSecurityGroupRuleDescriptionsEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for UpdateSecurityGroupRuleDescriptionsEgressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSecurityGroupRuleDescriptionsEgressOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput)
pub mod update_security_group_rule_descriptions_egress_output {
    /// A builder for [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput)
        pub fn build(self) -> crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput {
            crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl UpdateSecurityGroupRuleDescriptionsEgressOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsEgressOutput`](crate::output::UpdateSecurityGroupRuleDescriptionsEgressOutput)
    pub fn builder() -> crate::output::update_security_group_rule_descriptions_egress_output::Builder
    {
        crate::output::update_security_group_rule_descriptions_egress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnmonitorInstancesOutput {
    /// <p>The monitoring information.</p>
    pub instance_monitorings: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
}
impl std::fmt::Debug for UnmonitorInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnmonitorInstancesOutput");
        formatter.field("instance_monitorings", &self.instance_monitorings);
        formatter.finish()
    }
}
/// See [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput)
pub mod unmonitor_instances_output {
    /// A builder for [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_monitorings:
            std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
    }
    impl Builder {
        pub fn instance_monitorings(
            mut self,
            inp: impl Into<crate::model::InstanceMonitoring>,
        ) -> Self {
            let mut v = self.instance_monitorings.unwrap_or_default();
            v.push(inp.into());
            self.instance_monitorings = Some(v);
            self
        }
        pub fn set_instance_monitorings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
        ) -> Self {
            self.instance_monitorings = inp;
            self
        }
        /// Consumes the builder and constructs a [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput)
        pub fn build(self) -> crate::output::UnmonitorInstancesOutput {
            crate::output::UnmonitorInstancesOutput {
                instance_monitorings: self.instance_monitorings,
            }
        }
    }
}
impl UnmonitorInstancesOutput {
    /// Creates a new builder-style object to manufacture [`UnmonitorInstancesOutput`](crate::output::UnmonitorInstancesOutput)
    pub fn builder() -> crate::output::unmonitor_instances_output::Builder {
        crate::output::unmonitor_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnassignPrivateIpAddressesOutput {}
impl std::fmt::Debug for UnassignPrivateIpAddressesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnassignPrivateIpAddressesOutput");
        formatter.finish()
    }
}
/// See [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput)
pub mod unassign_private_ip_addresses_output {
    /// A builder for [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput)
        pub fn build(self) -> crate::output::UnassignPrivateIpAddressesOutput {
            crate::output::UnassignPrivateIpAddressesOutput {}
        }
    }
}
impl UnassignPrivateIpAddressesOutput {
    /// Creates a new builder-style object to manufacture [`UnassignPrivateIpAddressesOutput`](crate::output::UnassignPrivateIpAddressesOutput)
    pub fn builder() -> crate::output::unassign_private_ip_addresses_output::Builder {
        crate::output::unassign_private_ip_addresses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnassignIpv6AddressesOutput {
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    pub unassigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for UnassignIpv6AddressesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnassignIpv6AddressesOutput");
        formatter.field("network_interface_id", &self.network_interface_id);
        formatter.field("unassigned_ipv6_addresses", &self.unassigned_ipv6_addresses);
        formatter.finish()
    }
}
/// See [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput)
pub mod unassign_ipv6_addresses_output {
    /// A builder for [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        pub(crate) unassigned_ipv6_addresses:
            std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(inp.into());
            self
        }
        pub fn set_network_interface_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = inp;
            self
        }
        pub fn unassigned_ipv6_addresses(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.unassigned_ipv6_addresses.unwrap_or_default();
            v.push(inp.into());
            self.unassigned_ipv6_addresses = Some(v);
            self
        }
        pub fn set_unassigned_ipv6_addresses(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.unassigned_ipv6_addresses = inp;
            self
        }
        /// Consumes the builder and constructs a [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput)
        pub fn build(self) -> crate::output::UnassignIpv6AddressesOutput {
            crate::output::UnassignIpv6AddressesOutput {
                network_interface_id: self.network_interface_id,
                unassigned_ipv6_addresses: self.unassigned_ipv6_addresses,
            }
        }
    }
}
impl UnassignIpv6AddressesOutput {
    /// Creates a new builder-style object to manufacture [`UnassignIpv6AddressesOutput`](crate::output::UnassignIpv6AddressesOutput)
    pub fn builder() -> crate::output::unassign_ipv6_addresses_output::Builder {
        crate::output::unassign_ipv6_addresses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TerminateInstancesOutput {
    /// <p>Information about the terminated instances.</p>
    pub terminating_instances:
        std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
}
impl std::fmt::Debug for TerminateInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateInstancesOutput");
        formatter.field("terminating_instances", &self.terminating_instances);
        formatter.finish()
    }
}
/// See [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput)
pub mod terminate_instances_output {
    /// A builder for [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) terminating_instances:
            std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
    }
    impl Builder {
        pub fn terminating_instances(
            mut self,
            inp: impl Into<crate::model::InstanceStateChange>,
        ) -> Self {
            let mut v = self.terminating_instances.unwrap_or_default();
            v.push(inp.into());
            self.terminating_instances = Some(v);
            self
        }
        pub fn set_terminating_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        ) -> Self {
            self.terminating_instances = inp;
            self
        }
        /// Consumes the builder and constructs a [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput)
        pub fn build(self) -> crate::output::TerminateInstancesOutput {
            crate::output::TerminateInstancesOutput {
                terminating_instances: self.terminating_instances,
            }
        }
    }
}
impl TerminateInstancesOutput {
    /// Creates a new builder-style object to manufacture [`TerminateInstancesOutput`](crate::output::TerminateInstancesOutput)
    pub fn builder() -> crate::output::terminate_instances_output::Builder {
        crate::output::terminate_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TerminateClientVpnConnectionsOutput {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The user who established the terminated client connections.</p>
    pub username: std::option::Option<std::string::String>,
    /// <p>The current state of the client connections.</p>
    pub connection_statuses:
        std::option::Option<std::vec::Vec<crate::model::TerminateConnectionStatus>>,
}
impl std::fmt::Debug for TerminateClientVpnConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateClientVpnConnectionsOutput");
        formatter.field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id);
        formatter.field("username", &self.username);
        formatter.field("connection_statuses", &self.connection_statuses);
        formatter.finish()
    }
}
/// See [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput)
pub mod terminate_client_vpn_connections_output {
    /// A builder for [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_endpoint_id: std::option::Option<std::string::String>,
        pub(crate) username: std::option::Option<std::string::String>,
        pub(crate) connection_statuses:
            std::option::Option<std::vec::Vec<crate::model::TerminateConnectionStatus>>,
    }
    impl Builder {
        /// <p>The ID of the Client VPN endpoint.</p>
        pub fn client_vpn_endpoint_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_vpn_endpoint_id = Some(inp.into());
            self
        }
        pub fn set_client_vpn_endpoint_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.client_vpn_endpoint_id = inp;
            self
        }
        /// <p>The user who established the terminated client connections.</p>
        pub fn username(mut self, inp: impl Into<std::string::String>) -> Self {
            self.username = Some(inp.into());
            self
        }
        pub fn set_username(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.username = inp;
            self
        }
        pub fn connection_statuses(
            mut self,
            inp: impl Into<crate::model::TerminateConnectionStatus>,
        ) -> Self {
            let mut v = self.connection_statuses.unwrap_or_default();
            v.push(inp.into());
            self.connection_statuses = Some(v);
            self
        }
        pub fn set_connection_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TerminateConnectionStatus>>,
        ) -> Self {
            self.connection_statuses = inp;
            self
        }
        /// Consumes the builder and constructs a [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput)
        pub fn build(self) -> crate::output::TerminateClientVpnConnectionsOutput {
            crate::output::TerminateClientVpnConnectionsOutput {
                client_vpn_endpoint_id: self.client_vpn_endpoint_id,
                username: self.username,
                connection_statuses: self.connection_statuses,
            }
        }
    }
}
impl TerminateClientVpnConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`TerminateClientVpnConnectionsOutput`](crate::output::TerminateClientVpnConnectionsOutput)
    pub fn builder() -> crate::output::terminate_client_vpn_connections_output::Builder {
        crate::output::terminate_client_vpn_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopInstancesOutput {
    /// <p>Information about the stopped instances.</p>
    pub stopping_instances: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
}
impl std::fmt::Debug for StopInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopInstancesOutput");
        formatter.field("stopping_instances", &self.stopping_instances);
        formatter.finish()
    }
}
/// See [`StopInstancesOutput`](crate::output::StopInstancesOutput)
pub mod stop_instances_output {
    /// A builder for [`StopInstancesOutput`](crate::output::StopInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stopping_instances:
            std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
    }
    impl Builder {
        pub fn stopping_instances(
            mut self,
            inp: impl Into<crate::model::InstanceStateChange>,
        ) -> Self {
            let mut v = self.stopping_instances.unwrap_or_default();
            v.push(inp.into());
            self.stopping_instances = Some(v);
            self
        }
        pub fn set_stopping_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        ) -> Self {
            self.stopping_instances = inp;
            self
        }
        /// Consumes the builder and constructs a [`StopInstancesOutput`](crate::output::StopInstancesOutput)
        pub fn build(self) -> crate::output::StopInstancesOutput {
            crate::output::StopInstancesOutput {
                stopping_instances: self.stopping_instances,
            }
        }
    }
}
impl StopInstancesOutput {
    /// Creates a new builder-style object to manufacture [`StopInstancesOutput`](crate::output::StopInstancesOutput)
    pub fn builder() -> crate::output::stop_instances_output::Builder {
        crate::output::stop_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartVpcEndpointServicePrivateDnsVerificationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_value: std::option::Option<bool>,
}
impl std::fmt::Debug for StartVpcEndpointServicePrivateDnsVerificationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartVpcEndpointServicePrivateDnsVerificationOutput");
        formatter.field("return_value", &self.return_value);
        formatter.finish()
    }
}
/// See [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput)
pub mod start_vpc_endpoint_service_private_dns_verification_output {
    /// A builder for [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, inp: bool) -> Self {
            self.return_value = Some(inp);
            self
        }
        pub fn set_return_value(mut self, inp: std::option::Option<bool>) -> Self {
            self.return_value = inp;
            self
        }
        /// Consumes the builder and constructs a [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput)
        pub fn build(self) -> crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput {
            crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput {
                return_value: self.return_value,
            }
        }
    }
}
impl StartVpcEndpointServicePrivateDnsVerificationOutput {
    /// Creates a new builder-style object to manufacture [`StartVpcEndpointServicePrivateDnsVerificationOutput`](crate::output::StartVpcEndpointServicePrivateDnsVerificationOutput)
    pub fn builder(
    ) -> crate::output::start_vpc_endpoint_service_private_dns_verification_output::Builder {
        crate::output::start_vpc_endpoint_service_private_dns_verification_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartNetworkInsightsAnalysisOutput {
    /// <p>Information about the network insights analysis.</p>
    pub network_insights_analysis: std::option::Option<crate::model::NetworkInsightsAnalysis>,
}
impl std::fmt::Debug for StartNetworkInsightsAnalysisOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartNetworkInsightsAnalysisOutput");
        formatter.field("network_insights_analysis", &self.network_insights_analysis);
        formatter.finish()
    }
}
/// See [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput)
pub mod start_network_insights_analysis_output {
    /// A builder for [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_analysis:
            std::option::Option<crate::model::NetworkInsightsAnalysis>,
    }
    impl Builder {
        /// <p>Information about the network insights analysis.</p>
        pub fn network_insights_analysis(
            mut self,
            inp: crate::model::NetworkInsightsAnalysis,
        ) -> Self {
            self.network_insights_analysis = Some(inp);
            self
        }
        pub fn set_network_insights_analysis(
            mut self,
            inp: std::option::Option<crate::model::NetworkInsightsAnalysis>,
        ) -> Self {
            self.network_insights_analysis = inp;
            self
        }
        /// Consumes the builder and constructs a [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput)
        pub fn build(self) -> crate::output::StartNetworkInsightsAnalysisOutput {
            crate::output::StartNetworkInsightsAnalysisOutput {
                network_insights_analysis: self.network_insights_analysis,
            }
        }
    }
}
impl StartNetworkInsightsAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`StartNetworkInsightsAnalysisOutput`](crate::output::StartNetworkInsightsAnalysisOutput)
    pub fn builder() -> crate::output::start_network_insights_analysis_output::Builder {
        crate::output::start_network_insights_analysis_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartInstancesOutput {
    /// <p>Information about the started instances.</p>
    pub starting_instances: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
}
impl std::fmt::Debug for StartInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartInstancesOutput");
        formatter.field("starting_instances", &self.starting_instances);
        formatter.finish()
    }
}
/// See [`StartInstancesOutput`](crate::output::StartInstancesOutput)
pub mod start_instances_output {
    /// A builder for [`StartInstancesOutput`](crate::output::StartInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) starting_instances:
            std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
    }
    impl Builder {
        pub fn starting_instances(
            mut self,
            inp: impl Into<crate::model::InstanceStateChange>,
        ) -> Self {
            let mut v = self.starting_instances.unwrap_or_default();
            v.push(inp.into());
            self.starting_instances = Some(v);
            self
        }
        pub fn set_starting_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceStateChange>>,
        ) -> Self {
            self.starting_instances = inp;
            self
        }
        /// Consumes the builder and constructs a [`StartInstancesOutput`](crate::output::StartInstancesOutput)
        pub fn build(self) -> crate::output::StartInstancesOutput {
            crate::output::StartInstancesOutput {
                starting_instances: self.starting_instances,
            }
        }
    }
}
impl StartInstancesOutput {
    /// Creates a new builder-style object to manufacture [`StartInstancesOutput`](crate::output::StartInstancesOutput)
    pub fn builder() -> crate::output::start_instances_output::Builder {
        crate::output::start_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendDiagnosticInterruptOutput {}
impl std::fmt::Debug for SendDiagnosticInterruptOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendDiagnosticInterruptOutput");
        formatter.finish()
    }
}
/// See [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput)
pub mod send_diagnostic_interrupt_output {
    /// A builder for [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput)
        pub fn build(self) -> crate::output::SendDiagnosticInterruptOutput {
            crate::output::SendDiagnosticInterruptOutput {}
        }
    }
}
impl SendDiagnosticInterruptOutput {
    /// Creates a new builder-style object to manufacture [`SendDiagnosticInterruptOutput`](crate::output::SendDiagnosticInterruptOutput)
    pub fn builder() -> crate::output::send_diagnostic_interrupt_output::Builder {
        crate::output::send_diagnostic_interrupt_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchTransitGatewayRoutesOutput {
    /// <p>Information about the routes.</p>
    pub routes: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRoute>>,
    /// <p>Indicates whether there are additional routes available.</p>
    pub additional_routes_available: std::option::Option<bool>,
}
impl std::fmt::Debug for SearchTransitGatewayRoutesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SearchTransitGatewayRoutesOutput");
        formatter.field("routes", &self.routes);
        formatter.field(
            "additional_routes_available",
            &self.additional_routes_available,
        );
        formatter.finish()
    }
}
/// See [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput)
pub mod search_transit_gateway_routes_output {
    /// A builder for [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRoute>>,
        pub(crate) additional_routes_available: std::option::Option<bool>,
    }
    impl Builder {
        pub fn routes(mut self, inp: impl Into<crate::model::TransitGatewayRoute>) -> Self {
            let mut v = self.routes.unwrap_or_default();
            v.push(inp.into());
            self.routes = Some(v);
            self
        }
        pub fn set_routes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRoute>>,
        ) -> Self {
            self.routes = inp;
            self
        }
        /// <p>Indicates whether there are additional routes available.</p>
        pub fn additional_routes_available(mut self, inp: bool) -> Self {
            self.additional_routes_available = Some(inp);
            self
        }
        pub fn set_additional_routes_available(mut self, inp: std::option::Option<bool>) -> Self {
            self.additional_routes_available = inp;
            self
        }
        /// Consumes the builder and constructs a [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput)
        pub fn build(self) -> crate::output::SearchTransitGatewayRoutesOutput {
            crate::output::SearchTransitGatewayRoutesOutput {
                routes: self.routes,
                additional_routes_available: self.additional_routes_available,
            }
        }
    }
}
impl SearchTransitGatewayRoutesOutput {
    /// Creates a new builder-style object to manufacture [`SearchTransitGatewayRoutesOutput`](crate::output::SearchTransitGatewayRoutesOutput)
    pub fn builder() -> crate::output::search_transit_gateway_routes_output::Builder {
        crate::output::search_transit_gateway_routes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchTransitGatewayMulticastGroupsOutput {
    /// <p>Information about the  transit gateway multicast group.</p>
    pub multicast_groups:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for SearchTransitGatewayMulticastGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SearchTransitGatewayMulticastGroupsOutput");
        formatter.field("multicast_groups", &self.multicast_groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput)
pub mod search_transit_gateway_multicast_groups_output {
    /// A builder for [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) multicast_groups:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn multicast_groups(
            mut self,
            inp: impl Into<crate::model::TransitGatewayMulticastGroup>,
        ) -> Self {
            let mut v = self.multicast_groups.unwrap_or_default();
            v.push(inp.into());
            self.multicast_groups = Some(v);
            self
        }
        pub fn set_multicast_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastGroup>>,
        ) -> Self {
            self.multicast_groups = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput)
        pub fn build(self) -> crate::output::SearchTransitGatewayMulticastGroupsOutput {
            crate::output::SearchTransitGatewayMulticastGroupsOutput {
                multicast_groups: self.multicast_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl SearchTransitGatewayMulticastGroupsOutput {
    /// Creates a new builder-style object to manufacture [`SearchTransitGatewayMulticastGroupsOutput`](crate::output::SearchTransitGatewayMulticastGroupsOutput)
    pub fn builder() -> crate::output::search_transit_gateway_multicast_groups_output::Builder {
        crate::output::search_transit_gateway_multicast_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchLocalGatewayRoutesOutput {
    /// <p>Information about the routes.</p>
    pub routes: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRoute>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for SearchLocalGatewayRoutesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SearchLocalGatewayRoutesOutput");
        formatter.field("routes", &self.routes);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput)
pub mod search_local_gateway_routes_output {
    /// A builder for [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRoute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn routes(mut self, inp: impl Into<crate::model::LocalGatewayRoute>) -> Self {
            let mut v = self.routes.unwrap_or_default();
            v.push(inp.into());
            self.routes = Some(v);
            self
        }
        pub fn set_routes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRoute>>,
        ) -> Self {
            self.routes = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput)
        pub fn build(self) -> crate::output::SearchLocalGatewayRoutesOutput {
            crate::output::SearchLocalGatewayRoutesOutput {
                routes: self.routes,
                next_token: self.next_token,
            }
        }
    }
}
impl SearchLocalGatewayRoutesOutput {
    /// Creates a new builder-style object to manufacture [`SearchLocalGatewayRoutesOutput`](crate::output::SearchLocalGatewayRoutesOutput)
    pub fn builder() -> crate::output::search_local_gateway_routes_output::Builder {
        crate::output::search_local_gateway_routes_output::Builder::default()
    }
}

/// <p>Contains the output of RunScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RunScheduledInstancesOutput {
    /// <p>The IDs of the newly launched instances.</p>
    pub instance_id_set: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for RunScheduledInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RunScheduledInstancesOutput");
        formatter.field("instance_id_set", &self.instance_id_set);
        formatter.finish()
    }
}
/// See [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput)
pub mod run_scheduled_instances_output {
    /// A builder for [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id_set: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        pub fn instance_id_set(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.instance_id_set.unwrap_or_default();
            v.push(inp.into());
            self.instance_id_set = Some(v);
            self
        }
        pub fn set_instance_id_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.instance_id_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput)
        pub fn build(self) -> crate::output::RunScheduledInstancesOutput {
            crate::output::RunScheduledInstancesOutput {
                instance_id_set: self.instance_id_set,
            }
        }
    }
}
impl RunScheduledInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RunScheduledInstancesOutput`](crate::output::RunScheduledInstancesOutput)
    pub fn builder() -> crate::output::run_scheduled_instances_output::Builder {
        crate::output::run_scheduled_instances_output::Builder::default()
    }
}

/// <p>Describes a launch request for one or more instances, and includes
/// owner, requester, and security group information that applies to all
/// instances in the launch request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RunInstancesOutput {
    /// <p>[EC2-Classic only] The security groups.</p>
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
    /// <p>The instances.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    /// <p>The ID of the AWS account that owns the reservation.</p>
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The ID of the requester that launched the instances on your behalf (for example, AWS
    /// Management Console or Auto Scaling).</p>
    pub requester_id: std::option::Option<std::string::String>,
    /// <p>The ID of the reservation.</p>
    pub reservation_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RunInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RunInstancesOutput");
        formatter.field("groups", &self.groups);
        formatter.field("instances", &self.instances);
        formatter.field("owner_id", &self.owner_id);
        formatter.field("requester_id", &self.requester_id);
        formatter.field("reservation_id", &self.reservation_id);
        formatter.finish()
    }
}
/// See [`RunInstancesOutput`](crate::output::RunInstancesOutput)
pub mod run_instances_output {
    /// A builder for [`RunInstancesOutput`](crate::output::RunInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) requester_id: std::option::Option<std::string::String>,
        pub(crate) reservation_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn groups(mut self, inp: impl Into<crate::model::GroupIdentifier>) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(inp.into());
            self.groups = Some(v);
            self
        }
        pub fn set_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        ) -> Self {
            self.groups = inp;
            self
        }
        pub fn instances(mut self, inp: impl Into<crate::model::Instance>) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(inp.into());
            self.instances = Some(v);
            self
        }
        pub fn set_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = inp;
            self
        }
        /// <p>The ID of the AWS account that owns the reservation.</p>
        pub fn owner_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(inp.into());
            self
        }
        pub fn set_owner_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.owner_id = inp;
            self
        }
        /// <p>The ID of the requester that launched the instances on your behalf (for example, AWS
        /// Management Console or Auto Scaling).</p>
        pub fn requester_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.requester_id = Some(inp.into());
            self
        }
        pub fn set_requester_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.requester_id = inp;
            self
        }
        /// <p>The ID of the reservation.</p>
        pub fn reservation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.reservation_id = Some(inp.into());
            self
        }
        pub fn set_reservation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.reservation_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`RunInstancesOutput`](crate::output::RunInstancesOutput)
        pub fn build(self) -> crate::output::RunInstancesOutput {
            crate::output::RunInstancesOutput {
                groups: self.groups,
                instances: self.instances,
                owner_id: self.owner_id,
                requester_id: self.requester_id,
                reservation_id: self.reservation_id,
            }
        }
    }
}
impl RunInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RunInstancesOutput`](crate::output::RunInstancesOutput)
    pub fn builder() -> crate::output::run_instances_output::Builder {
        crate::output::run_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeSecurityGroupIngressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub r#return: std::option::Option<bool>,
    /// <p>The inbound rules that were unknown to the service. In some cases,
    /// <code>unknownIpPermissionSet</code> might be in a different format from the request
    /// parameter. </p>
    pub unknown_ip_permissions: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
}
impl std::fmt::Debug for RevokeSecurityGroupIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeSecurityGroupIngressOutput");
        formatter.field("r#return", &self.r#return);
        formatter.field("unknown_ip_permissions", &self.unknown_ip_permissions);
        formatter.finish()
    }
}
/// See [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput)
pub mod revoke_security_group_ingress_output {
    /// A builder for [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) unknown_ip_permissions:
            std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        pub fn unknown_ip_permissions(
            mut self,
            inp: impl Into<crate::model::IpPermission>,
        ) -> Self {
            let mut v = self.unknown_ip_permissions.unwrap_or_default();
            v.push(inp.into());
            self.unknown_ip_permissions = Some(v);
            self
        }
        pub fn set_unknown_ip_permissions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
        ) -> Self {
            self.unknown_ip_permissions = inp;
            self
        }
        /// Consumes the builder and constructs a [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput)
        pub fn build(self) -> crate::output::RevokeSecurityGroupIngressOutput {
            crate::output::RevokeSecurityGroupIngressOutput {
                r#return: self.r#return,
                unknown_ip_permissions: self.unknown_ip_permissions,
            }
        }
    }
}
impl RevokeSecurityGroupIngressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeSecurityGroupIngressOutput`](crate::output::RevokeSecurityGroupIngressOutput)
    pub fn builder() -> crate::output::revoke_security_group_ingress_output::Builder {
        crate::output::revoke_security_group_ingress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeSecurityGroupEgressOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub r#return: std::option::Option<bool>,
    /// <p>The outbound rules that were unknown to the service. In some cases,
    /// <code>unknownIpPermissionSet</code> might be in a different format from the request
    /// parameter. </p>
    pub unknown_ip_permissions: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
}
impl std::fmt::Debug for RevokeSecurityGroupEgressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeSecurityGroupEgressOutput");
        formatter.field("r#return", &self.r#return);
        formatter.field("unknown_ip_permissions", &self.unknown_ip_permissions);
        formatter.finish()
    }
}
/// See [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput)
pub mod revoke_security_group_egress_output {
    /// A builder for [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
        pub(crate) unknown_ip_permissions:
            std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        pub fn unknown_ip_permissions(
            mut self,
            inp: impl Into<crate::model::IpPermission>,
        ) -> Self {
            let mut v = self.unknown_ip_permissions.unwrap_or_default();
            v.push(inp.into());
            self.unknown_ip_permissions = Some(v);
            self
        }
        pub fn set_unknown_ip_permissions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::IpPermission>>,
        ) -> Self {
            self.unknown_ip_permissions = inp;
            self
        }
        /// Consumes the builder and constructs a [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput)
        pub fn build(self) -> crate::output::RevokeSecurityGroupEgressOutput {
            crate::output::RevokeSecurityGroupEgressOutput {
                r#return: self.r#return,
                unknown_ip_permissions: self.unknown_ip_permissions,
            }
        }
    }
}
impl RevokeSecurityGroupEgressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeSecurityGroupEgressOutput`](crate::output::RevokeSecurityGroupEgressOutput)
    pub fn builder() -> crate::output::revoke_security_group_egress_output::Builder {
        crate::output::revoke_security_group_egress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeClientVpnIngressOutput {
    /// <p>The current state of the authorization rule.</p>
    pub status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
}
impl std::fmt::Debug for RevokeClientVpnIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeClientVpnIngressOutput");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput)
pub mod revoke_client_vpn_ingress_output {
    /// A builder for [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
    }
    impl Builder {
        /// <p>The current state of the authorization rule.</p>
        pub fn status(mut self, inp: crate::model::ClientVpnAuthorizationRuleStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput)
        pub fn build(self) -> crate::output::RevokeClientVpnIngressOutput {
            crate::output::RevokeClientVpnIngressOutput {
                status: self.status,
            }
        }
    }
}
impl RevokeClientVpnIngressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeClientVpnIngressOutput`](crate::output::RevokeClientVpnIngressOutput)
    pub fn builder() -> crate::output::revoke_client_vpn_ingress_output::Builder {
        crate::output::revoke_client_vpn_ingress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreManagedPrefixListVersionOutput {
    /// <p>Information about the prefix list.</p>
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
}
impl std::fmt::Debug for RestoreManagedPrefixListVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreManagedPrefixListVersionOutput");
        formatter.field("prefix_list", &self.prefix_list);
        formatter.finish()
    }
}
/// See [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput)
pub mod restore_managed_prefix_list_version_output {
    /// A builder for [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, inp: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(inp);
            self
        }
        pub fn set_prefix_list(
            mut self,
            inp: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = inp;
            self
        }
        /// Consumes the builder and constructs a [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput)
        pub fn build(self) -> crate::output::RestoreManagedPrefixListVersionOutput {
            crate::output::RestoreManagedPrefixListVersionOutput {
                prefix_list: self.prefix_list,
            }
        }
    }
}
impl RestoreManagedPrefixListVersionOutput {
    /// Creates a new builder-style object to manufacture [`RestoreManagedPrefixListVersionOutput`](crate::output::RestoreManagedPrefixListVersionOutput)
    pub fn builder() -> crate::output::restore_managed_prefix_list_version_output::Builder {
        crate::output::restore_managed_prefix_list_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreAddressToClassicOutput {
    /// <p>The Elastic IP address.</p>
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>The move status for the IP address.</p>
    pub status: std::option::Option<crate::model::Status>,
}
impl std::fmt::Debug for RestoreAddressToClassicOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreAddressToClassicOutput");
        formatter.field("public_ip", &self.public_ip);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput)
pub mod restore_address_to_classic_output {
    /// A builder for [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) public_ip: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::Status>,
    }
    impl Builder {
        /// <p>The Elastic IP address.</p>
        pub fn public_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.public_ip = Some(inp.into());
            self
        }
        pub fn set_public_ip(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.public_ip = inp;
            self
        }
        /// <p>The move status for the IP address.</p>
        pub fn status(mut self, inp: crate::model::Status) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(mut self, inp: std::option::Option<crate::model::Status>) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput)
        pub fn build(self) -> crate::output::RestoreAddressToClassicOutput {
            crate::output::RestoreAddressToClassicOutput {
                public_ip: self.public_ip,
                status: self.status,
            }
        }
    }
}
impl RestoreAddressToClassicOutput {
    /// Creates a new builder-style object to manufacture [`RestoreAddressToClassicOutput`](crate::output::RestoreAddressToClassicOutput)
    pub fn builder() -> crate::output::restore_address_to_classic_output::Builder {
        crate::output::restore_address_to_classic_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetSnapshotAttributeOutput {}
impl std::fmt::Debug for ResetSnapshotAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetSnapshotAttributeOutput");
        formatter.finish()
    }
}
/// See [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput)
pub mod reset_snapshot_attribute_output {
    /// A builder for [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput)
        pub fn build(self) -> crate::output::ResetSnapshotAttributeOutput {
            crate::output::ResetSnapshotAttributeOutput {}
        }
    }
}
impl ResetSnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetSnapshotAttributeOutput`](crate::output::ResetSnapshotAttributeOutput)
    pub fn builder() -> crate::output::reset_snapshot_attribute_output::Builder {
        crate::output::reset_snapshot_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetNetworkInterfaceAttributeOutput {}
impl std::fmt::Debug for ResetNetworkInterfaceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetNetworkInterfaceAttributeOutput");
        formatter.finish()
    }
}
/// See [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput)
pub mod reset_network_interface_attribute_output {
    /// A builder for [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput)
        pub fn build(self) -> crate::output::ResetNetworkInterfaceAttributeOutput {
            crate::output::ResetNetworkInterfaceAttributeOutput {}
        }
    }
}
impl ResetNetworkInterfaceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetNetworkInterfaceAttributeOutput`](crate::output::ResetNetworkInterfaceAttributeOutput)
    pub fn builder() -> crate::output::reset_network_interface_attribute_output::Builder {
        crate::output::reset_network_interface_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetInstanceAttributeOutput {}
impl std::fmt::Debug for ResetInstanceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetInstanceAttributeOutput");
        formatter.finish()
    }
}
/// See [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput)
pub mod reset_instance_attribute_output {
    /// A builder for [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput)
        pub fn build(self) -> crate::output::ResetInstanceAttributeOutput {
            crate::output::ResetInstanceAttributeOutput {}
        }
    }
}
impl ResetInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetInstanceAttributeOutput`](crate::output::ResetInstanceAttributeOutput)
    pub fn builder() -> crate::output::reset_instance_attribute_output::Builder {
        crate::output::reset_instance_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetImageAttributeOutput {}
impl std::fmt::Debug for ResetImageAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetImageAttributeOutput");
        formatter.finish()
    }
}
/// See [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput)
pub mod reset_image_attribute_output {
    /// A builder for [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput)
        pub fn build(self) -> crate::output::ResetImageAttributeOutput {
            crate::output::ResetImageAttributeOutput {}
        }
    }
}
impl ResetImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetImageAttributeOutput`](crate::output::ResetImageAttributeOutput)
    pub fn builder() -> crate::output::reset_image_attribute_output::Builder {
        crate::output::reset_image_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetFpgaImageAttributeOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ResetFpgaImageAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetFpgaImageAttributeOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput)
pub mod reset_fpga_image_attribute_output {
    /// A builder for [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput)
        pub fn build(self) -> crate::output::ResetFpgaImageAttributeOutput {
            crate::output::ResetFpgaImageAttributeOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ResetFpgaImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetFpgaImageAttributeOutput`](crate::output::ResetFpgaImageAttributeOutput)
    pub fn builder() -> crate::output::reset_fpga_image_attribute_output::Builder {
        crate::output::reset_fpga_image_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default CMK for EBS encryption by default.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResetEbsDefaultKmsKeyIdOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetEbsDefaultKmsKeyIdOutput");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.finish()
    }
}
/// See [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput)
pub mod reset_ebs_default_kms_key_id_output {
    /// A builder for [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the default CMK for EBS encryption by default.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(inp.into());
            self
        }
        pub fn set_kms_key_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput)
        pub fn build(self) -> crate::output::ResetEbsDefaultKmsKeyIdOutput {
            crate::output::ResetEbsDefaultKmsKeyIdOutput {
                kms_key_id: self.kms_key_id,
            }
        }
    }
}
impl ResetEbsDefaultKmsKeyIdOutput {
    /// Creates a new builder-style object to manufacture [`ResetEbsDefaultKmsKeyIdOutput`](crate::output::ResetEbsDefaultKmsKeyIdOutput)
    pub fn builder() -> crate::output::reset_ebs_default_kms_key_id_output::Builder {
        crate::output::reset_ebs_default_kms_key_id_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetAddressAttributeOutput {
    /// <p>Information about the IP address.</p>
    pub address: std::option::Option<crate::model::AddressAttribute>,
}
impl std::fmt::Debug for ResetAddressAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetAddressAttributeOutput");
        formatter.field("address", &self.address);
        formatter.finish()
    }
}
/// See [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput)
pub mod reset_address_attribute_output {
    /// A builder for [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address: std::option::Option<crate::model::AddressAttribute>,
    }
    impl Builder {
        /// <p>Information about the IP address.</p>
        pub fn address(mut self, inp: crate::model::AddressAttribute) -> Self {
            self.address = Some(inp);
            self
        }
        pub fn set_address(
            mut self,
            inp: std::option::Option<crate::model::AddressAttribute>,
        ) -> Self {
            self.address = inp;
            self
        }
        /// Consumes the builder and constructs a [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput)
        pub fn build(self) -> crate::output::ResetAddressAttributeOutput {
            crate::output::ResetAddressAttributeOutput {
                address: self.address,
            }
        }
    }
}
impl ResetAddressAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ResetAddressAttributeOutput`](crate::output::ResetAddressAttributeOutput)
    pub fn builder() -> crate::output::reset_address_attribute_output::Builder {
        crate::output::reset_address_attribute_output::Builder::default()
    }
}

/// <p>Contains the output of RequestSpotInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RequestSpotInstancesOutput {
    /// <p>One or more Spot Instance requests.</p>
    pub spot_instance_requests:
        std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
}
impl std::fmt::Debug for RequestSpotInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RequestSpotInstancesOutput");
        formatter.field("spot_instance_requests", &self.spot_instance_requests);
        formatter.finish()
    }
}
/// See [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput)
pub mod request_spot_instances_output {
    /// A builder for [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_instance_requests:
            std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
    }
    impl Builder {
        pub fn spot_instance_requests(
            mut self,
            inp: impl Into<crate::model::SpotInstanceRequest>,
        ) -> Self {
            let mut v = self.spot_instance_requests.unwrap_or_default();
            v.push(inp.into());
            self.spot_instance_requests = Some(v);
            self
        }
        pub fn set_spot_instance_requests(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        ) -> Self {
            self.spot_instance_requests = inp;
            self
        }
        /// Consumes the builder and constructs a [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput)
        pub fn build(self) -> crate::output::RequestSpotInstancesOutput {
            crate::output::RequestSpotInstancesOutput {
                spot_instance_requests: self.spot_instance_requests,
            }
        }
    }
}
impl RequestSpotInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RequestSpotInstancesOutput`](crate::output::RequestSpotInstancesOutput)
    pub fn builder() -> crate::output::request_spot_instances_output::Builder {
        crate::output::request_spot_instances_output::Builder::default()
    }
}

/// <p>Contains the output of RequestSpotFleet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RequestSpotFleetOutput {
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RequestSpotFleetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RequestSpotFleetOutput");
        formatter.field("spot_fleet_request_id", &self.spot_fleet_request_id);
        formatter.finish()
    }
}
/// See [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput)
pub mod request_spot_fleet_output {
    /// A builder for [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_fleet_request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn spot_fleet_request_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.spot_fleet_request_id = Some(inp.into());
            self
        }
        pub fn set_spot_fleet_request_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.spot_fleet_request_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput)
        pub fn build(self) -> crate::output::RequestSpotFleetOutput {
            crate::output::RequestSpotFleetOutput {
                spot_fleet_request_id: self.spot_fleet_request_id,
            }
        }
    }
}
impl RequestSpotFleetOutput {
    /// Creates a new builder-style object to manufacture [`RequestSpotFleetOutput`](crate::output::RequestSpotFleetOutput)
    pub fn builder() -> crate::output::request_spot_fleet_output::Builder {
        crate::output::request_spot_fleet_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReportInstanceStatusOutput {}
impl std::fmt::Debug for ReportInstanceStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReportInstanceStatusOutput");
        formatter.finish()
    }
}
/// See [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput)
pub mod report_instance_status_output {
    /// A builder for [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput)
        pub fn build(self) -> crate::output::ReportInstanceStatusOutput {
            crate::output::ReportInstanceStatusOutput {}
        }
    }
}
impl ReportInstanceStatusOutput {
    /// Creates a new builder-style object to manufacture [`ReportInstanceStatusOutput`](crate::output::ReportInstanceStatusOutput)
    pub fn builder() -> crate::output::report_instance_status_output::Builder {
        crate::output::report_instance_status_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReplaceTransitGatewayRouteOutput {
    /// <p>Information about the modified route.</p>
    pub route: std::option::Option<crate::model::TransitGatewayRoute>,
}
impl std::fmt::Debug for ReplaceTransitGatewayRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReplaceTransitGatewayRouteOutput");
        formatter.field("route", &self.route);
        formatter.finish()
    }
}
/// See [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput)
pub mod replace_transit_gateway_route_output {
    /// A builder for [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::TransitGatewayRoute>,
    }
    impl Builder {
        /// <p>Information about the modified route.</p>
        pub fn route(mut self, inp: crate::model::TransitGatewayRoute) -> Self {
            self.route = Some(inp);
            self
        }
        pub fn set_route(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayRoute>,
        ) -> Self {
            self.route = inp;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput)
        pub fn build(self) -> crate::output::ReplaceTransitGatewayRouteOutput {
            crate::output::ReplaceTransitGatewayRouteOutput { route: self.route }
        }
    }
}
impl ReplaceTransitGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceTransitGatewayRouteOutput`](crate::output::ReplaceTransitGatewayRouteOutput)
    pub fn builder() -> crate::output::replace_transit_gateway_route_output::Builder {
        crate::output::replace_transit_gateway_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReplaceRouteTableAssociationOutput {
    /// <p>The ID of the new association.</p>
    pub new_association_id: std::option::Option<std::string::String>,
    /// <p>The state of the association.</p>
    pub association_state: std::option::Option<crate::model::RouteTableAssociationState>,
}
impl std::fmt::Debug for ReplaceRouteTableAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReplaceRouteTableAssociationOutput");
        formatter.field("new_association_id", &self.new_association_id);
        formatter.field("association_state", &self.association_state);
        formatter.finish()
    }
}
/// See [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput)
pub mod replace_route_table_association_output {
    /// A builder for [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) new_association_id: std::option::Option<std::string::String>,
        pub(crate) association_state: std::option::Option<crate::model::RouteTableAssociationState>,
    }
    impl Builder {
        /// <p>The ID of the new association.</p>
        pub fn new_association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.new_association_id = Some(inp.into());
            self
        }
        pub fn set_new_association_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_association_id = inp;
            self
        }
        /// <p>The state of the association.</p>
        pub fn association_state(mut self, inp: crate::model::RouteTableAssociationState) -> Self {
            self.association_state = Some(inp);
            self
        }
        pub fn set_association_state(
            mut self,
            inp: std::option::Option<crate::model::RouteTableAssociationState>,
        ) -> Self {
            self.association_state = inp;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput)
        pub fn build(self) -> crate::output::ReplaceRouteTableAssociationOutput {
            crate::output::ReplaceRouteTableAssociationOutput {
                new_association_id: self.new_association_id,
                association_state: self.association_state,
            }
        }
    }
}
impl ReplaceRouteTableAssociationOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceRouteTableAssociationOutput`](crate::output::ReplaceRouteTableAssociationOutput)
    pub fn builder() -> crate::output::replace_route_table_association_output::Builder {
        crate::output::replace_route_table_association_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReplaceRouteOutput {}
impl std::fmt::Debug for ReplaceRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReplaceRouteOutput");
        formatter.finish()
    }
}
/// See [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput)
pub mod replace_route_output {
    /// A builder for [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput)
        pub fn build(self) -> crate::output::ReplaceRouteOutput {
            crate::output::ReplaceRouteOutput {}
        }
    }
}
impl ReplaceRouteOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceRouteOutput`](crate::output::ReplaceRouteOutput)
    pub fn builder() -> crate::output::replace_route_output::Builder {
        crate::output::replace_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReplaceNetworkAclEntryOutput {}
impl std::fmt::Debug for ReplaceNetworkAclEntryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReplaceNetworkAclEntryOutput");
        formatter.finish()
    }
}
/// See [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput)
pub mod replace_network_acl_entry_output {
    /// A builder for [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput)
        pub fn build(self) -> crate::output::ReplaceNetworkAclEntryOutput {
            crate::output::ReplaceNetworkAclEntryOutput {}
        }
    }
}
impl ReplaceNetworkAclEntryOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceNetworkAclEntryOutput`](crate::output::ReplaceNetworkAclEntryOutput)
    pub fn builder() -> crate::output::replace_network_acl_entry_output::Builder {
        crate::output::replace_network_acl_entry_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReplaceNetworkAclAssociationOutput {
    /// <p>The ID of the new association.</p>
    pub new_association_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ReplaceNetworkAclAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReplaceNetworkAclAssociationOutput");
        formatter.field("new_association_id", &self.new_association_id);
        formatter.finish()
    }
}
/// See [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput)
pub mod replace_network_acl_association_output {
    /// A builder for [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) new_association_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the new association.</p>
        pub fn new_association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.new_association_id = Some(inp.into());
            self
        }
        pub fn set_new_association_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_association_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput)
        pub fn build(self) -> crate::output::ReplaceNetworkAclAssociationOutput {
            crate::output::ReplaceNetworkAclAssociationOutput {
                new_association_id: self.new_association_id,
            }
        }
    }
}
impl ReplaceNetworkAclAssociationOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceNetworkAclAssociationOutput`](crate::output::ReplaceNetworkAclAssociationOutput)
    pub fn builder() -> crate::output::replace_network_acl_association_output::Builder {
        crate::output::replace_network_acl_association_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReplaceIamInstanceProfileAssociationOutput {
    /// <p>Information about the IAM instance profile association.</p>
    pub iam_instance_profile_association:
        std::option::Option<crate::model::IamInstanceProfileAssociation>,
}
impl std::fmt::Debug for ReplaceIamInstanceProfileAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReplaceIamInstanceProfileAssociationOutput");
        formatter.field(
            "iam_instance_profile_association",
            &self.iam_instance_profile_association,
        );
        formatter.finish()
    }
}
/// See [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput)
pub mod replace_iam_instance_profile_association_output {
    /// A builder for [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_association:
            std::option::Option<crate::model::IamInstanceProfileAssociation>,
    }
    impl Builder {
        /// <p>Information about the IAM instance profile association.</p>
        pub fn iam_instance_profile_association(
            mut self,
            inp: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            self.iam_instance_profile_association = Some(inp);
            self
        }
        pub fn set_iam_instance_profile_association(
            mut self,
            inp: std::option::Option<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            self.iam_instance_profile_association = inp;
            self
        }
        /// Consumes the builder and constructs a [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput)
        pub fn build(self) -> crate::output::ReplaceIamInstanceProfileAssociationOutput {
            crate::output::ReplaceIamInstanceProfileAssociationOutput {
                iam_instance_profile_association: self.iam_instance_profile_association,
            }
        }
    }
}
impl ReplaceIamInstanceProfileAssociationOutput {
    /// Creates a new builder-style object to manufacture [`ReplaceIamInstanceProfileAssociationOutput`](crate::output::ReplaceIamInstanceProfileAssociationOutput)
    pub fn builder() -> crate::output::replace_iam_instance_profile_association_output::Builder {
        crate::output::replace_iam_instance_profile_association_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReleaseHostsOutput {
    /// <p>The IDs of the Dedicated Hosts that were successfully released.</p>
    pub successful: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IDs of the Dedicated Hosts that could not be released, including an error
    /// message.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for ReleaseHostsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReleaseHostsOutput");
        formatter.field("successful", &self.successful);
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput)
pub mod release_hosts_output {
    /// A builder for [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn successful(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(inp.into());
            self.successful = Some(v);
            self
        }
        pub fn set_successful(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.successful = inp;
            self
        }
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput)
        pub fn build(self) -> crate::output::ReleaseHostsOutput {
            crate::output::ReleaseHostsOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl ReleaseHostsOutput {
    /// Creates a new builder-style object to manufacture [`ReleaseHostsOutput`](crate::output::ReleaseHostsOutput)
    pub fn builder() -> crate::output::release_hosts_output::Builder {
        crate::output::release_hosts_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReleaseAddressOutput {}
impl std::fmt::Debug for ReleaseAddressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReleaseAddressOutput");
        formatter.finish()
    }
}
/// See [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput)
pub mod release_address_output {
    /// A builder for [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput)
        pub fn build(self) -> crate::output::ReleaseAddressOutput {
            crate::output::ReleaseAddressOutput {}
        }
    }
}
impl ReleaseAddressOutput {
    /// Creates a new builder-style object to manufacture [`ReleaseAddressOutput`](crate::output::ReleaseAddressOutput)
    pub fn builder() -> crate::output::release_address_output::Builder {
        crate::output::release_address_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RejectVpcPeeringConnectionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for RejectVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RejectVpcPeeringConnectionOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput)
pub mod reject_vpc_peering_connection_output {
    /// A builder for [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput)
        pub fn build(self) -> crate::output::RejectVpcPeeringConnectionOutput {
            crate::output::RejectVpcPeeringConnectionOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl RejectVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`RejectVpcPeeringConnectionOutput`](crate::output::RejectVpcPeeringConnectionOutput)
    pub fn builder() -> crate::output::reject_vpc_peering_connection_output::Builder {
        crate::output::reject_vpc_peering_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RejectVpcEndpointConnectionsOutput {
    /// <p>Information about the endpoints that were not rejected, if applicable.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for RejectVpcEndpointConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RejectVpcEndpointConnectionsOutput");
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput)
pub mod reject_vpc_endpoint_connections_output {
    /// A builder for [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput)
        pub fn build(self) -> crate::output::RejectVpcEndpointConnectionsOutput {
            crate::output::RejectVpcEndpointConnectionsOutput {
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl RejectVpcEndpointConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`RejectVpcEndpointConnectionsOutput`](crate::output::RejectVpcEndpointConnectionsOutput)
    pub fn builder() -> crate::output::reject_vpc_endpoint_connections_output::Builder {
        crate::output::reject_vpc_endpoint_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RejectTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the attachment.</p>
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
}
impl std::fmt::Debug for RejectTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RejectTransitGatewayVpcAttachmentOutput");
        formatter.field(
            "transit_gateway_vpc_attachment",
            &self.transit_gateway_vpc_attachment,
        );
        formatter.finish()
    }
}
/// See [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput)
pub mod reject_transit_gateway_vpc_attachment_output {
    /// A builder for [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    }
    impl Builder {
        /// <p>Information about the attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            inp: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput)
        pub fn build(self) -> crate::output::RejectTransitGatewayVpcAttachmentOutput {
            crate::output::RejectTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
            }
        }
    }
}
impl RejectTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayVpcAttachmentOutput`](crate::output::RejectTransitGatewayVpcAttachmentOutput)
    pub fn builder() -> crate::output::reject_transit_gateway_vpc_attachment_output::Builder {
        crate::output::reject_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RejectTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
}
impl std::fmt::Debug for RejectTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RejectTransitGatewayPeeringAttachmentOutput");
        formatter.field(
            "transit_gateway_peering_attachment",
            &self.transit_gateway_peering_attachment,
        );
        formatter.finish()
    }
}
/// See [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput)
pub mod reject_transit_gateway_peering_attachment_output {
    /// A builder for [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            inp: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput)
        pub fn build(self) -> crate::output::RejectTransitGatewayPeeringAttachmentOutput {
            crate::output::RejectTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
            }
        }
    }
}
impl RejectTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayPeeringAttachmentOutput`](crate::output::RejectTransitGatewayPeeringAttachmentOutput)
    pub fn builder() -> crate::output::reject_transit_gateway_peering_attachment_output::Builder {
        crate::output::reject_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RejectTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Describes the multicast domain associations.</p>
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
}
impl std::fmt::Debug for RejectTransitGatewayMulticastDomainAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RejectTransitGatewayMulticastDomainAssociationsOutput");
        formatter.field("associations", &self.associations);
        formatter.finish()
    }
}
/// See [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput)
pub mod reject_transit_gateway_multicast_domain_associations_output {
    /// A builder for [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    }
    impl Builder {
        /// <p>Describes the multicast domain associations.</p>
        pub fn associations(
            mut self,
            inp: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(inp);
            self
        }
        pub fn set_associations(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = inp;
            self
        }
        /// Consumes the builder and constructs a [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput)
        pub fn build(self) -> crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput {
            crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput {
                associations: self.associations,
            }
        }
    }
}
impl RejectTransitGatewayMulticastDomainAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`RejectTransitGatewayMulticastDomainAssociationsOutput`](crate::output::RejectTransitGatewayMulticastDomainAssociationsOutput)
    pub fn builder(
    ) -> crate::output::reject_transit_gateway_multicast_domain_associations_output::Builder {
        crate::output::reject_transit_gateway_multicast_domain_associations_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterTransitGatewayMulticastGroupSourcesOutput {
    /// <p>Information about the  transit gateway multicast group sources.</p>
    pub registered_multicast_group_sources:
        std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupSources>,
}
impl std::fmt::Debug for RegisterTransitGatewayMulticastGroupSourcesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterTransitGatewayMulticastGroupSourcesOutput");
        formatter.field(
            "registered_multicast_group_sources",
            &self.registered_multicast_group_sources,
        );
        formatter.finish()
    }
}
/// See [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput)
pub mod register_transit_gateway_multicast_group_sources_output {
    /// A builder for [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) registered_multicast_group_sources:
            std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupSources>,
    }
    impl Builder {
        /// <p>Information about the  transit gateway multicast group sources.</p>
        pub fn registered_multicast_group_sources(
            mut self,
            inp: crate::model::TransitGatewayMulticastRegisteredGroupSources,
        ) -> Self {
            self.registered_multicast_group_sources = Some(inp);
            self
        }
        pub fn set_registered_multicast_group_sources(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupSources>,
        ) -> Self {
            self.registered_multicast_group_sources = inp;
            self
        }
        /// Consumes the builder and constructs a [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput)
        pub fn build(self) -> crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput {
            crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput {
                registered_multicast_group_sources: self.registered_multicast_group_sources,
            }
        }
    }
}
impl RegisterTransitGatewayMulticastGroupSourcesOutput {
    /// Creates a new builder-style object to manufacture [`RegisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::RegisterTransitGatewayMulticastGroupSourcesOutput)
    pub fn builder(
    ) -> crate::output::register_transit_gateway_multicast_group_sources_output::Builder {
        crate::output::register_transit_gateway_multicast_group_sources_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterTransitGatewayMulticastGroupMembersOutput {
    /// <p>Information about the registered  transit gateway multicast group members.</p>
    pub registered_multicast_group_members:
        std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupMembers>,
}
impl std::fmt::Debug for RegisterTransitGatewayMulticastGroupMembersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterTransitGatewayMulticastGroupMembersOutput");
        formatter.field(
            "registered_multicast_group_members",
            &self.registered_multicast_group_members,
        );
        formatter.finish()
    }
}
/// See [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput)
pub mod register_transit_gateway_multicast_group_members_output {
    /// A builder for [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) registered_multicast_group_members:
            std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupMembers>,
    }
    impl Builder {
        /// <p>Information about the registered  transit gateway multicast group members.</p>
        pub fn registered_multicast_group_members(
            mut self,
            inp: crate::model::TransitGatewayMulticastRegisteredGroupMembers,
        ) -> Self {
            self.registered_multicast_group_members = Some(inp);
            self
        }
        pub fn set_registered_multicast_group_members(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastRegisteredGroupMembers>,
        ) -> Self {
            self.registered_multicast_group_members = inp;
            self
        }
        /// Consumes the builder and constructs a [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput)
        pub fn build(self) -> crate::output::RegisterTransitGatewayMulticastGroupMembersOutput {
            crate::output::RegisterTransitGatewayMulticastGroupMembersOutput {
                registered_multicast_group_members: self.registered_multicast_group_members,
            }
        }
    }
}
impl RegisterTransitGatewayMulticastGroupMembersOutput {
    /// Creates a new builder-style object to manufacture [`RegisterTransitGatewayMulticastGroupMembersOutput`](crate::output::RegisterTransitGatewayMulticastGroupMembersOutput)
    pub fn builder(
    ) -> crate::output::register_transit_gateway_multicast_group_members_output::Builder {
        crate::output::register_transit_gateway_multicast_group_members_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterInstanceEventNotificationAttributesOutput {
    /// <p>The resulting set of tag keys.</p>
    pub instance_tag_attribute: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
}
impl std::fmt::Debug for RegisterInstanceEventNotificationAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterInstanceEventNotificationAttributesOutput");
        formatter.field("instance_tag_attribute", &self.instance_tag_attribute);
        formatter.finish()
    }
}
/// See [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput)
pub mod register_instance_event_notification_attributes_output {
    /// A builder for [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_tag_attribute:
            std::option::Option<crate::model::InstanceTagNotificationAttribute>,
    }
    impl Builder {
        /// <p>The resulting set of tag keys.</p>
        pub fn instance_tag_attribute(
            mut self,
            inp: crate::model::InstanceTagNotificationAttribute,
        ) -> Self {
            self.instance_tag_attribute = Some(inp);
            self
        }
        pub fn set_instance_tag_attribute(
            mut self,
            inp: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        ) -> Self {
            self.instance_tag_attribute = inp;
            self
        }
        /// Consumes the builder and constructs a [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput)
        pub fn build(self) -> crate::output::RegisterInstanceEventNotificationAttributesOutput {
            crate::output::RegisterInstanceEventNotificationAttributesOutput {
                instance_tag_attribute: self.instance_tag_attribute,
            }
        }
    }
}
impl RegisterInstanceEventNotificationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`RegisterInstanceEventNotificationAttributesOutput`](crate::output::RegisterInstanceEventNotificationAttributesOutput)
    pub fn builder(
    ) -> crate::output::register_instance_event_notification_attributes_output::Builder {
        crate::output::register_instance_event_notification_attributes_output::Builder::default()
    }
}

/// <p>Contains the output of RegisterImage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterImageOutput {
    /// <p>The ID of the newly registered AMI.</p>
    pub image_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RegisterImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterImageOutput");
        formatter.field("image_id", &self.image_id);
        formatter.finish()
    }
}
/// See [`RegisterImageOutput`](crate::output::RegisterImageOutput)
pub mod register_image_output {
    /// A builder for [`RegisterImageOutput`](crate::output::RegisterImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the newly registered AMI.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`RegisterImageOutput`](crate::output::RegisterImageOutput)
        pub fn build(self) -> crate::output::RegisterImageOutput {
            crate::output::RegisterImageOutput {
                image_id: self.image_id,
            }
        }
    }
}
impl RegisterImageOutput {
    /// Creates a new builder-style object to manufacture [`RegisterImageOutput`](crate::output::RegisterImageOutput)
    pub fn builder() -> crate::output::register_image_output::Builder {
        crate::output::register_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RebootInstancesOutput {}
impl std::fmt::Debug for RebootInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RebootInstancesOutput");
        formatter.finish()
    }
}
/// See [`RebootInstancesOutput`](crate::output::RebootInstancesOutput)
pub mod reboot_instances_output {
    /// A builder for [`RebootInstancesOutput`](crate::output::RebootInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RebootInstancesOutput`](crate::output::RebootInstancesOutput)
        pub fn build(self) -> crate::output::RebootInstancesOutput {
            crate::output::RebootInstancesOutput {}
        }
    }
}
impl RebootInstancesOutput {
    /// Creates a new builder-style object to manufacture [`RebootInstancesOutput`](crate::output::RebootInstancesOutput)
    pub fn builder() -> crate::output::reboot_instances_output::Builder {
        crate::output::reboot_instances_output::Builder::default()
    }
}

/// <p>Contains the output of PurchaseScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PurchaseScheduledInstancesOutput {
    /// <p>Information about the Scheduled Instances.</p>
    pub scheduled_instance_set: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
}
impl std::fmt::Debug for PurchaseScheduledInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PurchaseScheduledInstancesOutput");
        formatter.field("scheduled_instance_set", &self.scheduled_instance_set);
        formatter.finish()
    }
}
/// See [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput)
pub mod purchase_scheduled_instances_output {
    /// A builder for [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scheduled_instance_set:
            std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
    }
    impl Builder {
        pub fn scheduled_instance_set(
            mut self,
            inp: impl Into<crate::model::ScheduledInstance>,
        ) -> Self {
            let mut v = self.scheduled_instance_set.unwrap_or_default();
            v.push(inp.into());
            self.scheduled_instance_set = Some(v);
            self
        }
        pub fn set_scheduled_instance_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
        ) -> Self {
            self.scheduled_instance_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput)
        pub fn build(self) -> crate::output::PurchaseScheduledInstancesOutput {
            crate::output::PurchaseScheduledInstancesOutput {
                scheduled_instance_set: self.scheduled_instance_set,
            }
        }
    }
}
impl PurchaseScheduledInstancesOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseScheduledInstancesOutput`](crate::output::PurchaseScheduledInstancesOutput)
    pub fn builder() -> crate::output::purchase_scheduled_instances_output::Builder {
        crate::output::purchase_scheduled_instances_output::Builder::default()
    }
}

/// <p>Contains the output of PurchaseReservedInstancesOffering.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PurchaseReservedInstancesOfferingOutput {
    /// <p>The IDs of the purchased Reserved Instances.</p>
    pub reserved_instances_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for PurchaseReservedInstancesOfferingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PurchaseReservedInstancesOfferingOutput");
        formatter.field("reserved_instances_id", &self.reserved_instances_id);
        formatter.finish()
    }
}
/// See [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput)
pub mod purchase_reserved_instances_offering_output {
    /// A builder for [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The IDs of the purchased Reserved Instances.</p>
        pub fn reserved_instances_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.reserved_instances_id = Some(inp.into());
            self
        }
        pub fn set_reserved_instances_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_instances_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput)
        pub fn build(self) -> crate::output::PurchaseReservedInstancesOfferingOutput {
            crate::output::PurchaseReservedInstancesOfferingOutput {
                reserved_instances_id: self.reserved_instances_id,
            }
        }
    }
}
impl PurchaseReservedInstancesOfferingOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedInstancesOfferingOutput`](crate::output::PurchaseReservedInstancesOfferingOutput)
    pub fn builder() -> crate::output::purchase_reserved_instances_offering_output::Builder {
        crate::output::purchase_reserved_instances_offering_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PurchaseHostReservationOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and
    /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
    /// supported currency is <code>USD</code>.</p>
    pub currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
    /// <p>Describes the details of the purchase.</p>
    pub purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
    /// <p>The total hourly price of the reservation calculated per hour.</p>
    pub total_hourly_price: std::option::Option<std::string::String>,
    /// <p>The total amount charged to your account when you purchase the reservation.</p>
    pub total_upfront_price: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for PurchaseHostReservationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PurchaseHostReservationOutput");
        formatter.field("client_token", &self.client_token);
        formatter.field("currency_code", &self.currency_code);
        formatter.field("purchase", &self.purchase);
        formatter.field("total_hourly_price", &self.total_hourly_price);
        formatter.field("total_upfront_price", &self.total_upfront_price);
        formatter.finish()
    }
}
/// See [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput)
pub mod purchase_host_reservation_output {
    /// A builder for [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
        pub(crate) purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        pub(crate) total_hourly_price: std::option::Option<std::string::String>,
        pub(crate) total_upfront_price: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// <p>The currency in which the <code>totalUpfrontPrice</code> and
        /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
        /// supported currency is <code>USD</code>.</p>
        pub fn currency_code(mut self, inp: crate::model::CurrencyCodeValues) -> Self {
            self.currency_code = Some(inp);
            self
        }
        pub fn set_currency_code(
            mut self,
            inp: std::option::Option<crate::model::CurrencyCodeValues>,
        ) -> Self {
            self.currency_code = inp;
            self
        }
        pub fn purchase(mut self, inp: impl Into<crate::model::Purchase>) -> Self {
            let mut v = self.purchase.unwrap_or_default();
            v.push(inp.into());
            self.purchase = Some(v);
            self
        }
        pub fn set_purchase(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        ) -> Self {
            self.purchase = inp;
            self
        }
        /// <p>The total hourly price of the reservation calculated per hour.</p>
        pub fn total_hourly_price(mut self, inp: impl Into<std::string::String>) -> Self {
            self.total_hourly_price = Some(inp.into());
            self
        }
        pub fn set_total_hourly_price(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_hourly_price = inp;
            self
        }
        /// <p>The total amount charged to your account when you purchase the reservation.</p>
        pub fn total_upfront_price(mut self, inp: impl Into<std::string::String>) -> Self {
            self.total_upfront_price = Some(inp.into());
            self
        }
        pub fn set_total_upfront_price(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_upfront_price = inp;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput)
        pub fn build(self) -> crate::output::PurchaseHostReservationOutput {
            crate::output::PurchaseHostReservationOutput {
                client_token: self.client_token,
                currency_code: self.currency_code,
                purchase: self.purchase,
                total_hourly_price: self.total_hourly_price,
                total_upfront_price: self.total_upfront_price,
            }
        }
    }
}
impl PurchaseHostReservationOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseHostReservationOutput`](crate::output::PurchaseHostReservationOutput)
    pub fn builder() -> crate::output::purchase_host_reservation_output::Builder {
        crate::output::purchase_host_reservation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ProvisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl std::fmt::Debug for ProvisionByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ProvisionByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
pub mod provision_byoip_cidr_output {
    /// A builder for [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, inp: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(inp);
            self
        }
        pub fn set_byoip_cidr(mut self, inp: std::option::Option<crate::model::ByoipCidr>) -> Self {
            self.byoip_cidr = inp;
            self
        }
        /// Consumes the builder and constructs a [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
        pub fn build(self) -> crate::output::ProvisionByoipCidrOutput {
            crate::output::ProvisionByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl ProvisionByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`ProvisionByoipCidrOutput`](crate::output::ProvisionByoipCidrOutput)
    pub fn builder() -> crate::output::provision_byoip_cidr_output::Builder {
        crate::output::provision_byoip_cidr_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MoveAddressToVpcOutput {
    /// <p>The allocation ID for the Elastic IP address.</p>
    pub allocation_id: std::option::Option<std::string::String>,
    /// <p>The status of the move of the IP address.</p>
    pub status: std::option::Option<crate::model::Status>,
}
impl std::fmt::Debug for MoveAddressToVpcOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MoveAddressToVpcOutput");
        formatter.field("allocation_id", &self.allocation_id);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput)
pub mod move_address_to_vpc_output {
    /// A builder for [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) allocation_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::Status>,
    }
    impl Builder {
        /// <p>The allocation ID for the Elastic IP address.</p>
        pub fn allocation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.allocation_id = Some(inp.into());
            self
        }
        pub fn set_allocation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.allocation_id = inp;
            self
        }
        /// <p>The status of the move of the IP address.</p>
        pub fn status(mut self, inp: crate::model::Status) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(mut self, inp: std::option::Option<crate::model::Status>) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput)
        pub fn build(self) -> crate::output::MoveAddressToVpcOutput {
            crate::output::MoveAddressToVpcOutput {
                allocation_id: self.allocation_id,
                status: self.status,
            }
        }
    }
}
impl MoveAddressToVpcOutput {
    /// Creates a new builder-style object to manufacture [`MoveAddressToVpcOutput`](crate::output::MoveAddressToVpcOutput)
    pub fn builder() -> crate::output::move_address_to_vpc_output::Builder {
        crate::output::move_address_to_vpc_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MonitorInstancesOutput {
    /// <p>The monitoring information.</p>
    pub instance_monitorings: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
}
impl std::fmt::Debug for MonitorInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MonitorInstancesOutput");
        formatter.field("instance_monitorings", &self.instance_monitorings);
        formatter.finish()
    }
}
/// See [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput)
pub mod monitor_instances_output {
    /// A builder for [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_monitorings:
            std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
    }
    impl Builder {
        pub fn instance_monitorings(
            mut self,
            inp: impl Into<crate::model::InstanceMonitoring>,
        ) -> Self {
            let mut v = self.instance_monitorings.unwrap_or_default();
            v.push(inp.into());
            self.instance_monitorings = Some(v);
            self
        }
        pub fn set_instance_monitorings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceMonitoring>>,
        ) -> Self {
            self.instance_monitorings = inp;
            self
        }
        /// Consumes the builder and constructs a [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput)
        pub fn build(self) -> crate::output::MonitorInstancesOutput {
            crate::output::MonitorInstancesOutput {
                instance_monitorings: self.instance_monitorings,
            }
        }
    }
}
impl MonitorInstancesOutput {
    /// Creates a new builder-style object to manufacture [`MonitorInstancesOutput`](crate::output::MonitorInstancesOutput)
    pub fn builder() -> crate::output::monitor_instances_output::Builder {
        crate::output::monitor_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpnTunnelOptionsOutput {
    /// <p>Describes a VPN connection.</p>
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
}
impl std::fmt::Debug for ModifyVpnTunnelOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpnTunnelOptionsOutput");
        formatter.field("vpn_connection", &self.vpn_connection);
        formatter.finish()
    }
}
/// See [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput)
pub mod modify_vpn_tunnel_options_output {
    /// A builder for [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
    }
    impl Builder {
        /// <p>Describes a VPN connection.</p>
        pub fn vpn_connection(mut self, inp: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(inp);
            self
        }
        pub fn set_vpn_connection(
            mut self,
            inp: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput)
        pub fn build(self) -> crate::output::ModifyVpnTunnelOptionsOutput {
            crate::output::ModifyVpnTunnelOptionsOutput {
                vpn_connection: self.vpn_connection,
            }
        }
    }
}
impl ModifyVpnTunnelOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnTunnelOptionsOutput`](crate::output::ModifyVpnTunnelOptionsOutput)
    pub fn builder() -> crate::output::modify_vpn_tunnel_options_output::Builder {
        crate::output::modify_vpn_tunnel_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpnTunnelCertificateOutput {
    /// <p>Describes a VPN connection.</p>
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
}
impl std::fmt::Debug for ModifyVpnTunnelCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpnTunnelCertificateOutput");
        formatter.field("vpn_connection", &self.vpn_connection);
        formatter.finish()
    }
}
/// See [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput)
pub mod modify_vpn_tunnel_certificate_output {
    /// A builder for [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
    }
    impl Builder {
        /// <p>Describes a VPN connection.</p>
        pub fn vpn_connection(mut self, inp: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(inp);
            self
        }
        pub fn set_vpn_connection(
            mut self,
            inp: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput)
        pub fn build(self) -> crate::output::ModifyVpnTunnelCertificateOutput {
            crate::output::ModifyVpnTunnelCertificateOutput {
                vpn_connection: self.vpn_connection,
            }
        }
    }
}
impl ModifyVpnTunnelCertificateOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnTunnelCertificateOutput`](crate::output::ModifyVpnTunnelCertificateOutput)
    pub fn builder() -> crate::output::modify_vpn_tunnel_certificate_output::Builder {
        crate::output::modify_vpn_tunnel_certificate_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpnConnectionOptionsOutput {
    /// <p>Describes a VPN connection.</p>
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
}
impl std::fmt::Debug for ModifyVpnConnectionOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpnConnectionOptionsOutput");
        formatter.field("vpn_connection", &self.vpn_connection);
        formatter.finish()
    }
}
/// See [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput)
pub mod modify_vpn_connection_options_output {
    /// A builder for [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
    }
    impl Builder {
        /// <p>Describes a VPN connection.</p>
        pub fn vpn_connection(mut self, inp: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(inp);
            self
        }
        pub fn set_vpn_connection(
            mut self,
            inp: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput)
        pub fn build(self) -> crate::output::ModifyVpnConnectionOptionsOutput {
            crate::output::ModifyVpnConnectionOptionsOutput {
                vpn_connection: self.vpn_connection,
            }
        }
    }
}
impl ModifyVpnConnectionOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnConnectionOptionsOutput`](crate::output::ModifyVpnConnectionOptionsOutput)
    pub fn builder() -> crate::output::modify_vpn_connection_options_output::Builder {
        crate::output::modify_vpn_connection_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpnConnectionOutput {
    /// <p>Describes a VPN connection.</p>
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
}
impl std::fmt::Debug for ModifyVpnConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpnConnectionOutput");
        formatter.field("vpn_connection", &self.vpn_connection);
        formatter.finish()
    }
}
/// See [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput)
pub mod modify_vpn_connection_output {
    /// A builder for [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
    }
    impl Builder {
        /// <p>Describes a VPN connection.</p>
        pub fn vpn_connection(mut self, inp: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(inp);
            self
        }
        pub fn set_vpn_connection(
            mut self,
            inp: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput)
        pub fn build(self) -> crate::output::ModifyVpnConnectionOutput {
            crate::output::ModifyVpnConnectionOutput {
                vpn_connection: self.vpn_connection,
            }
        }
    }
}
impl ModifyVpnConnectionOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpnConnectionOutput`](crate::output::ModifyVpnConnectionOutput)
    pub fn builder() -> crate::output::modify_vpn_connection_output::Builder {
        crate::output::modify_vpn_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcTenancyOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an
    /// error.</p>
    pub return_value: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyVpcTenancyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcTenancyOutput");
        formatter.field("return_value", &self.return_value);
        formatter.finish()
    }
}
/// See [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput)
pub mod modify_vpc_tenancy_output {
    /// A builder for [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an
        /// error.</p>
        pub fn return_value(mut self, inp: bool) -> Self {
            self.return_value = Some(inp);
            self
        }
        pub fn set_return_value(mut self, inp: std::option::Option<bool>) -> Self {
            self.return_value = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput)
        pub fn build(self) -> crate::output::ModifyVpcTenancyOutput {
            crate::output::ModifyVpcTenancyOutput {
                return_value: self.return_value,
            }
        }
    }
}
impl ModifyVpcTenancyOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcTenancyOutput`](crate::output::ModifyVpcTenancyOutput)
    pub fn builder() -> crate::output::modify_vpc_tenancy_output::Builder {
        crate::output::modify_vpc_tenancy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcPeeringConnectionOptionsOutput {
    /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
    pub accepter_peering_connection_options:
        std::option::Option<crate::model::PeeringConnectionOptions>,
    /// <p>Information about the VPC peering connection options for the requester VPC.</p>
    pub requester_peering_connection_options:
        std::option::Option<crate::model::PeeringConnectionOptions>,
}
impl std::fmt::Debug for ModifyVpcPeeringConnectionOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcPeeringConnectionOptionsOutput");
        formatter.field(
            "accepter_peering_connection_options",
            &self.accepter_peering_connection_options,
        );
        formatter.field(
            "requester_peering_connection_options",
            &self.requester_peering_connection_options,
        );
        formatter.finish()
    }
}
/// See [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput)
pub mod modify_vpc_peering_connection_options_output {
    /// A builder for [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) accepter_peering_connection_options:
            std::option::Option<crate::model::PeeringConnectionOptions>,
        pub(crate) requester_peering_connection_options:
            std::option::Option<crate::model::PeeringConnectionOptions>,
    }
    impl Builder {
        /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
        pub fn accepter_peering_connection_options(
            mut self,
            inp: crate::model::PeeringConnectionOptions,
        ) -> Self {
            self.accepter_peering_connection_options = Some(inp);
            self
        }
        pub fn set_accepter_peering_connection_options(
            mut self,
            inp: std::option::Option<crate::model::PeeringConnectionOptions>,
        ) -> Self {
            self.accepter_peering_connection_options = inp;
            self
        }
        /// <p>Information about the VPC peering connection options for the requester VPC.</p>
        pub fn requester_peering_connection_options(
            mut self,
            inp: crate::model::PeeringConnectionOptions,
        ) -> Self {
            self.requester_peering_connection_options = Some(inp);
            self
        }
        pub fn set_requester_peering_connection_options(
            mut self,
            inp: std::option::Option<crate::model::PeeringConnectionOptions>,
        ) -> Self {
            self.requester_peering_connection_options = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput)
        pub fn build(self) -> crate::output::ModifyVpcPeeringConnectionOptionsOutput {
            crate::output::ModifyVpcPeeringConnectionOptionsOutput {
                accepter_peering_connection_options: self.accepter_peering_connection_options,
                requester_peering_connection_options: self.requester_peering_connection_options,
            }
        }
    }
}
impl ModifyVpcPeeringConnectionOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcPeeringConnectionOptionsOutput`](crate::output::ModifyVpcPeeringConnectionOptionsOutput)
    pub fn builder() -> crate::output::modify_vpc_peering_connection_options_output::Builder {
        crate::output::modify_vpc_peering_connection_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcEndpointServicePermissionsOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_value: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyVpcEndpointServicePermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcEndpointServicePermissionsOutput");
        formatter.field("return_value", &self.return_value);
        formatter.finish()
    }
}
/// See [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput)
pub mod modify_vpc_endpoint_service_permissions_output {
    /// A builder for [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, inp: bool) -> Self {
            self.return_value = Some(inp);
            self
        }
        pub fn set_return_value(mut self, inp: std::option::Option<bool>) -> Self {
            self.return_value = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput)
        pub fn build(self) -> crate::output::ModifyVpcEndpointServicePermissionsOutput {
            crate::output::ModifyVpcEndpointServicePermissionsOutput {
                return_value: self.return_value,
            }
        }
    }
}
impl ModifyVpcEndpointServicePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServicePermissionsOutput`](crate::output::ModifyVpcEndpointServicePermissionsOutput)
    pub fn builder() -> crate::output::modify_vpc_endpoint_service_permissions_output::Builder {
        crate::output::modify_vpc_endpoint_service_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcEndpointServiceConfigurationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyVpcEndpointServiceConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcEndpointServiceConfigurationOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput)
pub mod modify_vpc_endpoint_service_configuration_output {
    /// A builder for [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput)
        pub fn build(self) -> crate::output::ModifyVpcEndpointServiceConfigurationOutput {
            crate::output::ModifyVpcEndpointServiceConfigurationOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyVpcEndpointServiceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointServiceConfigurationOutput`](crate::output::ModifyVpcEndpointServiceConfigurationOutput)
    pub fn builder() -> crate::output::modify_vpc_endpoint_service_configuration_output::Builder {
        crate::output::modify_vpc_endpoint_service_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcEndpointConnectionNotificationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_value: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyVpcEndpointConnectionNotificationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcEndpointConnectionNotificationOutput");
        formatter.field("return_value", &self.return_value);
        formatter.finish()
    }
}
/// See [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput)
pub mod modify_vpc_endpoint_connection_notification_output {
    /// A builder for [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_value: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_value(mut self, inp: bool) -> Self {
            self.return_value = Some(inp);
            self
        }
        pub fn set_return_value(mut self, inp: std::option::Option<bool>) -> Self {
            self.return_value = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput)
        pub fn build(self) -> crate::output::ModifyVpcEndpointConnectionNotificationOutput {
            crate::output::ModifyVpcEndpointConnectionNotificationOutput {
                return_value: self.return_value,
            }
        }
    }
}
impl ModifyVpcEndpointConnectionNotificationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointConnectionNotificationOutput`](crate::output::ModifyVpcEndpointConnectionNotificationOutput)
    pub fn builder() -> crate::output::modify_vpc_endpoint_connection_notification_output::Builder {
        crate::output::modify_vpc_endpoint_connection_notification_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcEndpointOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyVpcEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcEndpointOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput)
pub mod modify_vpc_endpoint_output {
    /// A builder for [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput)
        pub fn build(self) -> crate::output::ModifyVpcEndpointOutput {
            crate::output::ModifyVpcEndpointOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcEndpointOutput`](crate::output::ModifyVpcEndpointOutput)
    pub fn builder() -> crate::output::modify_vpc_endpoint_output::Builder {
        crate::output::modify_vpc_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVpcAttributeOutput {}
impl std::fmt::Debug for ModifyVpcAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVpcAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput)
pub mod modify_vpc_attribute_output {
    /// A builder for [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput)
        pub fn build(self) -> crate::output::ModifyVpcAttributeOutput {
            crate::output::ModifyVpcAttributeOutput {}
        }
    }
}
impl ModifyVpcAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVpcAttributeOutput`](crate::output::ModifyVpcAttributeOutput)
    pub fn builder() -> crate::output::modify_vpc_attribute_output::Builder {
        crate::output::modify_vpc_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVolumeAttributeOutput {}
impl std::fmt::Debug for ModifyVolumeAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVolumeAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput)
pub mod modify_volume_attribute_output {
    /// A builder for [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput)
        pub fn build(self) -> crate::output::ModifyVolumeAttributeOutput {
            crate::output::ModifyVolumeAttributeOutput {}
        }
    }
}
impl ModifyVolumeAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVolumeAttributeOutput`](crate::output::ModifyVolumeAttributeOutput)
    pub fn builder() -> crate::output::modify_volume_attribute_output::Builder {
        crate::output::modify_volume_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyVolumeOutput {
    /// <p>Information about the volume modification.</p>
    pub volume_modification: std::option::Option<crate::model::VolumeModification>,
}
impl std::fmt::Debug for ModifyVolumeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyVolumeOutput");
        formatter.field("volume_modification", &self.volume_modification);
        formatter.finish()
    }
}
/// See [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput)
pub mod modify_volume_output {
    /// A builder for [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) volume_modification: std::option::Option<crate::model::VolumeModification>,
    }
    impl Builder {
        /// <p>Information about the volume modification.</p>
        pub fn volume_modification(mut self, inp: crate::model::VolumeModification) -> Self {
            self.volume_modification = Some(inp);
            self
        }
        pub fn set_volume_modification(
            mut self,
            inp: std::option::Option<crate::model::VolumeModification>,
        ) -> Self {
            self.volume_modification = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput)
        pub fn build(self) -> crate::output::ModifyVolumeOutput {
            crate::output::ModifyVolumeOutput {
                volume_modification: self.volume_modification,
            }
        }
    }
}
impl ModifyVolumeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyVolumeOutput`](crate::output::ModifyVolumeOutput)
    pub fn builder() -> crate::output::modify_volume_output::Builder {
        crate::output::modify_volume_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the modified attachment.</p>
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
}
impl std::fmt::Debug for ModifyTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTransitGatewayVpcAttachmentOutput");
        formatter.field(
            "transit_gateway_vpc_attachment",
            &self.transit_gateway_vpc_attachment,
        );
        formatter.finish()
    }
}
/// See [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput)
pub mod modify_transit_gateway_vpc_attachment_output {
    /// A builder for [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    }
    impl Builder {
        /// <p>Information about the modified attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            inp: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput)
        pub fn build(self) -> crate::output::ModifyTransitGatewayVpcAttachmentOutput {
            crate::output::ModifyTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
            }
        }
    }
}
impl ModifyTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayVpcAttachmentOutput`](crate::output::ModifyTransitGatewayVpcAttachmentOutput)
    pub fn builder() -> crate::output::modify_transit_gateway_vpc_attachment_output::Builder {
        crate::output::modify_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the prefix list reference.</p>
    pub transit_gateway_prefix_list_reference:
        std::option::Option<crate::model::TransitGatewayPrefixListReference>,
}
impl std::fmt::Debug for ModifyTransitGatewayPrefixListReferenceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTransitGatewayPrefixListReferenceOutput");
        formatter.field(
            "transit_gateway_prefix_list_reference",
            &self.transit_gateway_prefix_list_reference,
        );
        formatter.finish()
    }
}
/// See [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput)
pub mod modify_transit_gateway_prefix_list_reference_output {
    /// A builder for [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_reference:
            std::option::Option<crate::model::TransitGatewayPrefixListReference>,
    }
    impl Builder {
        /// <p>Information about the prefix list reference.</p>
        pub fn transit_gateway_prefix_list_reference(
            mut self,
            inp: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = Some(inp);
            self
        }
        pub fn set_transit_gateway_prefix_list_reference(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput)
        pub fn build(self) -> crate::output::ModifyTransitGatewayPrefixListReferenceOutput {
            crate::output::ModifyTransitGatewayPrefixListReferenceOutput {
                transit_gateway_prefix_list_reference: self.transit_gateway_prefix_list_reference,
            }
        }
    }
}
impl ModifyTransitGatewayPrefixListReferenceOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayPrefixListReferenceOutput`](crate::output::ModifyTransitGatewayPrefixListReferenceOutput)
    pub fn builder() -> crate::output::modify_transit_gateway_prefix_list_reference_output::Builder
    {
        crate::output::modify_transit_gateway_prefix_list_reference_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyTransitGatewayOutput {
    /// <p>Describes a transit gateway.</p>
    pub transit_gateway: std::option::Option<crate::model::TransitGateway>,
}
impl std::fmt::Debug for ModifyTransitGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTransitGatewayOutput");
        formatter.field("transit_gateway", &self.transit_gateway);
        formatter.finish()
    }
}
/// See [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput)
pub mod modify_transit_gateway_output {
    /// A builder for [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway: std::option::Option<crate::model::TransitGateway>,
    }
    impl Builder {
        /// <p>Describes a transit gateway.</p>
        pub fn transit_gateway(mut self, inp: crate::model::TransitGateway) -> Self {
            self.transit_gateway = Some(inp);
            self
        }
        pub fn set_transit_gateway(
            mut self,
            inp: std::option::Option<crate::model::TransitGateway>,
        ) -> Self {
            self.transit_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput)
        pub fn build(self) -> crate::output::ModifyTransitGatewayOutput {
            crate::output::ModifyTransitGatewayOutput {
                transit_gateway: self.transit_gateway,
            }
        }
    }
}
impl ModifyTransitGatewayOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTransitGatewayOutput`](crate::output::ModifyTransitGatewayOutput)
    pub fn builder() -> crate::output::modify_transit_gateway_output::Builder {
        crate::output::modify_transit_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyTrafficMirrorSessionOutput {
    /// <p>Information about the Traffic Mirror session.</p>
    pub traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
}
impl std::fmt::Debug for ModifyTrafficMirrorSessionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTrafficMirrorSessionOutput");
        formatter.field("traffic_mirror_session", &self.traffic_mirror_session);
        formatter.finish()
    }
}
/// See [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput)
pub mod modify_traffic_mirror_session_output {
    /// A builder for [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror session.</p>
        pub fn traffic_mirror_session(mut self, inp: crate::model::TrafficMirrorSession) -> Self {
            self.traffic_mirror_session = Some(inp);
            self
        }
        pub fn set_traffic_mirror_session(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorSession>,
        ) -> Self {
            self.traffic_mirror_session = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput)
        pub fn build(self) -> crate::output::ModifyTrafficMirrorSessionOutput {
            crate::output::ModifyTrafficMirrorSessionOutput {
                traffic_mirror_session: self.traffic_mirror_session,
            }
        }
    }
}
impl ModifyTrafficMirrorSessionOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorSessionOutput`](crate::output::ModifyTrafficMirrorSessionOutput)
    pub fn builder() -> crate::output::modify_traffic_mirror_session_output::Builder {
        crate::output::modify_traffic_mirror_session_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyTrafficMirrorFilterRuleOutput {
    /// <p>Modifies a Traffic Mirror rule.</p>
    pub traffic_mirror_filter_rule: std::option::Option<crate::model::TrafficMirrorFilterRule>,
}
impl std::fmt::Debug for ModifyTrafficMirrorFilterRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTrafficMirrorFilterRuleOutput");
        formatter.field(
            "traffic_mirror_filter_rule",
            &self.traffic_mirror_filter_rule,
        );
        formatter.finish()
    }
}
/// See [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput)
pub mod modify_traffic_mirror_filter_rule_output {
    /// A builder for [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_rule:
            std::option::Option<crate::model::TrafficMirrorFilterRule>,
    }
    impl Builder {
        /// <p>Modifies a Traffic Mirror rule.</p>
        pub fn traffic_mirror_filter_rule(
            mut self,
            inp: crate::model::TrafficMirrorFilterRule,
        ) -> Self {
            self.traffic_mirror_filter_rule = Some(inp);
            self
        }
        pub fn set_traffic_mirror_filter_rule(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorFilterRule>,
        ) -> Self {
            self.traffic_mirror_filter_rule = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput)
        pub fn build(self) -> crate::output::ModifyTrafficMirrorFilterRuleOutput {
            crate::output::ModifyTrafficMirrorFilterRuleOutput {
                traffic_mirror_filter_rule: self.traffic_mirror_filter_rule,
            }
        }
    }
}
impl ModifyTrafficMirrorFilterRuleOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorFilterRuleOutput`](crate::output::ModifyTrafficMirrorFilterRuleOutput)
    pub fn builder() -> crate::output::modify_traffic_mirror_filter_rule_output::Builder {
        crate::output::modify_traffic_mirror_filter_rule_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyTrafficMirrorFilterNetworkServicesOutput {
    /// <p>The Traffic Mirror filter that the network service is associated with.</p>
    pub traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
}
impl std::fmt::Debug for ModifyTrafficMirrorFilterNetworkServicesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyTrafficMirrorFilterNetworkServicesOutput");
        formatter.field("traffic_mirror_filter", &self.traffic_mirror_filter);
        formatter.finish()
    }
}
/// See [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput)
pub mod modify_traffic_mirror_filter_network_services_output {
    /// A builder for [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
    }
    impl Builder {
        /// <p>The Traffic Mirror filter that the network service is associated with.</p>
        pub fn traffic_mirror_filter(mut self, inp: crate::model::TrafficMirrorFilter) -> Self {
            self.traffic_mirror_filter = Some(inp);
            self
        }
        pub fn set_traffic_mirror_filter(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorFilter>,
        ) -> Self {
            self.traffic_mirror_filter = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput)
        pub fn build(self) -> crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput {
            crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput {
                traffic_mirror_filter: self.traffic_mirror_filter,
            }
        }
    }
}
impl ModifyTrafficMirrorFilterNetworkServicesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyTrafficMirrorFilterNetworkServicesOutput`](crate::output::ModifyTrafficMirrorFilterNetworkServicesOutput)
    pub fn builder() -> crate::output::modify_traffic_mirror_filter_network_services_output::Builder
    {
        crate::output::modify_traffic_mirror_filter_network_services_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifySubnetAttributeOutput {}
impl std::fmt::Debug for ModifySubnetAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifySubnetAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput)
pub mod modify_subnet_attribute_output {
    /// A builder for [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput)
        pub fn build(self) -> crate::output::ModifySubnetAttributeOutput {
            crate::output::ModifySubnetAttributeOutput {}
        }
    }
}
impl ModifySubnetAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifySubnetAttributeOutput`](crate::output::ModifySubnetAttributeOutput)
    pub fn builder() -> crate::output::modify_subnet_attribute_output::Builder {
        crate::output::modify_subnet_attribute_output::Builder::default()
    }
}

/// <p>Contains the output of ModifySpotFleetRequest.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifySpotFleetRequestOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifySpotFleetRequestOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifySpotFleetRequestOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput)
pub mod modify_spot_fleet_request_output {
    /// A builder for [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput)
        pub fn build(self) -> crate::output::ModifySpotFleetRequestOutput {
            crate::output::ModifySpotFleetRequestOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifySpotFleetRequestOutput {
    /// Creates a new builder-style object to manufacture [`ModifySpotFleetRequestOutput`](crate::output::ModifySpotFleetRequestOutput)
    pub fn builder() -> crate::output::modify_spot_fleet_request_output::Builder {
        crate::output::modify_spot_fleet_request_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifySnapshotAttributeOutput {}
impl std::fmt::Debug for ModifySnapshotAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifySnapshotAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput)
pub mod modify_snapshot_attribute_output {
    /// A builder for [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput)
        pub fn build(self) -> crate::output::ModifySnapshotAttributeOutput {
            crate::output::ModifySnapshotAttributeOutput {}
        }
    }
}
impl ModifySnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifySnapshotAttributeOutput`](crate::output::ModifySnapshotAttributeOutput)
    pub fn builder() -> crate::output::modify_snapshot_attribute_output::Builder {
        crate::output::modify_snapshot_attribute_output::Builder::default()
    }
}

/// <p>Contains the output of ModifyReservedInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyReservedInstancesOutput {
    /// <p>The ID for the modification.</p>
    pub reserved_instances_modification_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyReservedInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyReservedInstancesOutput");
        formatter.field(
            "reserved_instances_modification_id",
            &self.reserved_instances_modification_id,
        );
        formatter.finish()
    }
}
/// See [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput)
pub mod modify_reserved_instances_output {
    /// A builder for [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_modification_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID for the modification.</p>
        pub fn reserved_instances_modification_id(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.reserved_instances_modification_id = Some(inp.into());
            self
        }
        pub fn set_reserved_instances_modification_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_instances_modification_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput)
        pub fn build(self) -> crate::output::ModifyReservedInstancesOutput {
            crate::output::ModifyReservedInstancesOutput {
                reserved_instances_modification_id: self.reserved_instances_modification_id,
            }
        }
    }
}
impl ModifyReservedInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyReservedInstancesOutput`](crate::output::ModifyReservedInstancesOutput)
    pub fn builder() -> crate::output::modify_reserved_instances_output::Builder {
        crate::output::modify_reserved_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyNetworkInterfaceAttributeOutput {}
impl std::fmt::Debug for ModifyNetworkInterfaceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyNetworkInterfaceAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput)
pub mod modify_network_interface_attribute_output {
    /// A builder for [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput)
        pub fn build(self) -> crate::output::ModifyNetworkInterfaceAttributeOutput {
            crate::output::ModifyNetworkInterfaceAttributeOutput {}
        }
    }
}
impl ModifyNetworkInterfaceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyNetworkInterfaceAttributeOutput`](crate::output::ModifyNetworkInterfaceAttributeOutput)
    pub fn builder() -> crate::output::modify_network_interface_attribute_output::Builder {
        crate::output::modify_network_interface_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
}
impl std::fmt::Debug for ModifyManagedPrefixListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyManagedPrefixListOutput");
        formatter.field("prefix_list", &self.prefix_list);
        formatter.finish()
    }
}
/// See [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput)
pub mod modify_managed_prefix_list_output {
    /// A builder for [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, inp: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(inp);
            self
        }
        pub fn set_prefix_list(
            mut self,
            inp: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput)
        pub fn build(self) -> crate::output::ModifyManagedPrefixListOutput {
            crate::output::ModifyManagedPrefixListOutput {
                prefix_list: self.prefix_list,
            }
        }
    }
}
impl ModifyManagedPrefixListOutput {
    /// Creates a new builder-style object to manufacture [`ModifyManagedPrefixListOutput`](crate::output::ModifyManagedPrefixListOutput)
    pub fn builder() -> crate::output::modify_managed_prefix_list_output::Builder {
        crate::output::modify_managed_prefix_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    pub launch_template: std::option::Option<crate::model::LaunchTemplate>,
}
impl std::fmt::Debug for ModifyLaunchTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyLaunchTemplateOutput");
        formatter.field("launch_template", &self.launch_template);
        formatter.finish()
    }
}
/// See [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput)
pub mod modify_launch_template_output {
    /// A builder for [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplate>,
    }
    impl Builder {
        /// <p>Information about the launch template.</p>
        pub fn launch_template(mut self, inp: crate::model::LaunchTemplate) -> Self {
            self.launch_template = Some(inp);
            self
        }
        pub fn set_launch_template(
            mut self,
            inp: std::option::Option<crate::model::LaunchTemplate>,
        ) -> Self {
            self.launch_template = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput)
        pub fn build(self) -> crate::output::ModifyLaunchTemplateOutput {
            crate::output::ModifyLaunchTemplateOutput {
                launch_template: self.launch_template,
            }
        }
    }
}
impl ModifyLaunchTemplateOutput {
    /// Creates a new builder-style object to manufacture [`ModifyLaunchTemplateOutput`](crate::output::ModifyLaunchTemplateOutput)
    pub fn builder() -> crate::output::modify_launch_template_output::Builder {
        crate::output::modify_launch_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstancePlacementOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyInstancePlacementOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstancePlacementOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput)
pub mod modify_instance_placement_output {
    /// A builder for [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput)
        pub fn build(self) -> crate::output::ModifyInstancePlacementOutput {
            crate::output::ModifyInstancePlacementOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyInstancePlacementOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstancePlacementOutput`](crate::output::ModifyInstancePlacementOutput)
    pub fn builder() -> crate::output::modify_instance_placement_output::Builder {
        crate::output::modify_instance_placement_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceMetadataOptionsOutput {
    /// <p>The ID of the instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The metadata options for the instance.</p>
    pub instance_metadata_options:
        std::option::Option<crate::model::InstanceMetadataOptionsResponse>,
}
impl std::fmt::Debug for ModifyInstanceMetadataOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceMetadataOptionsOutput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("instance_metadata_options", &self.instance_metadata_options);
        formatter.finish()
    }
}
/// See [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput)
pub mod modify_instance_metadata_options_output {
    /// A builder for [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) instance_metadata_options:
            std::option::Option<crate::model::InstanceMetadataOptionsResponse>,
    }
    impl Builder {
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// <p>The metadata options for the instance.</p>
        pub fn instance_metadata_options(
            mut self,
            inp: crate::model::InstanceMetadataOptionsResponse,
        ) -> Self {
            self.instance_metadata_options = Some(inp);
            self
        }
        pub fn set_instance_metadata_options(
            mut self,
            inp: std::option::Option<crate::model::InstanceMetadataOptionsResponse>,
        ) -> Self {
            self.instance_metadata_options = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput)
        pub fn build(self) -> crate::output::ModifyInstanceMetadataOptionsOutput {
            crate::output::ModifyInstanceMetadataOptionsOutput {
                instance_id: self.instance_id,
                instance_metadata_options: self.instance_metadata_options,
            }
        }
    }
}
impl ModifyInstanceMetadataOptionsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceMetadataOptionsOutput`](crate::output::ModifyInstanceMetadataOptionsOutput)
    pub fn builder() -> crate::output::modify_instance_metadata_options_output::Builder {
        crate::output::modify_instance_metadata_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceEventStartTimeOutput {
    /// <p>Describes a scheduled event for an instance.</p>
    pub event: std::option::Option<crate::model::InstanceStatusEvent>,
}
impl std::fmt::Debug for ModifyInstanceEventStartTimeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceEventStartTimeOutput");
        formatter.field("event", &self.event);
        formatter.finish()
    }
}
/// See [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput)
pub mod modify_instance_event_start_time_output {
    /// A builder for [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event: std::option::Option<crate::model::InstanceStatusEvent>,
    }
    impl Builder {
        /// <p>Describes a scheduled event for an instance.</p>
        pub fn event(mut self, inp: crate::model::InstanceStatusEvent) -> Self {
            self.event = Some(inp);
            self
        }
        pub fn set_event(
            mut self,
            inp: std::option::Option<crate::model::InstanceStatusEvent>,
        ) -> Self {
            self.event = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput)
        pub fn build(self) -> crate::output::ModifyInstanceEventStartTimeOutput {
            crate::output::ModifyInstanceEventStartTimeOutput { event: self.event }
        }
    }
}
impl ModifyInstanceEventStartTimeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceEventStartTimeOutput`](crate::output::ModifyInstanceEventStartTimeOutput)
    pub fn builder() -> crate::output::modify_instance_event_start_time_output::Builder {
        crate::output::modify_instance_event_start_time_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceCreditSpecificationOutput {
    /// <p>Information about the instances whose credit option for CPU usage was successfully
    /// modified.</p>
    pub successful_instance_credit_specifications:
        std::option::Option<std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>>,
    /// <p>Information about the instances whose credit option for CPU usage was not
    /// modified.</p>
    pub unsuccessful_instance_credit_specifications: std::option::Option<
        std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
    >,
}
impl std::fmt::Debug for ModifyInstanceCreditSpecificationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceCreditSpecificationOutput");
        formatter.field(
            "successful_instance_credit_specifications",
            &self.successful_instance_credit_specifications,
        );
        formatter.field(
            "unsuccessful_instance_credit_specifications",
            &self.unsuccessful_instance_credit_specifications,
        );
        formatter.finish()
    }
}
/// See [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput)
pub mod modify_instance_credit_specification_output {
    /// A builder for [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_instance_credit_specifications: std::option::Option<
            std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>,
        >,
        pub(crate) unsuccessful_instance_credit_specifications: std::option::Option<
            std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
        >,
    }
    impl Builder {
        pub fn successful_instance_credit_specifications(
            mut self,
            inp: impl Into<crate::model::SuccessfulInstanceCreditSpecificationItem>,
        ) -> Self {
            let mut v = self
                .successful_instance_credit_specifications
                .unwrap_or_default();
            v.push(inp.into());
            self.successful_instance_credit_specifications = Some(v);
            self
        }
        pub fn set_successful_instance_credit_specifications(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::SuccessfulInstanceCreditSpecificationItem>,
            >,
        ) -> Self {
            self.successful_instance_credit_specifications = inp;
            self
        }
        pub fn unsuccessful_instance_credit_specifications(
            mut self,
            inp: impl Into<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
        ) -> Self {
            let mut v = self
                .unsuccessful_instance_credit_specifications
                .unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful_instance_credit_specifications = Some(v);
            self
        }
        pub fn set_unsuccessful_instance_credit_specifications(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::UnsuccessfulInstanceCreditSpecificationItem>,
            >,
        ) -> Self {
            self.unsuccessful_instance_credit_specifications = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput)
        pub fn build(self) -> crate::output::ModifyInstanceCreditSpecificationOutput {
            crate::output::ModifyInstanceCreditSpecificationOutput {
                successful_instance_credit_specifications: self
                    .successful_instance_credit_specifications,
                unsuccessful_instance_credit_specifications: self
                    .unsuccessful_instance_credit_specifications,
            }
        }
    }
}
impl ModifyInstanceCreditSpecificationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCreditSpecificationOutput`](crate::output::ModifyInstanceCreditSpecificationOutput)
    pub fn builder() -> crate::output::modify_instance_credit_specification_output::Builder {
        crate::output::modify_instance_credit_specification_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceCapacityReservationAttributesOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyInstanceCapacityReservationAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceCapacityReservationAttributesOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput)
pub mod modify_instance_capacity_reservation_attributes_output {
    /// A builder for [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput)
        pub fn build(self) -> crate::output::ModifyInstanceCapacityReservationAttributesOutput {
            crate::output::ModifyInstanceCapacityReservationAttributesOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyInstanceCapacityReservationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceCapacityReservationAttributesOutput`](crate::output::ModifyInstanceCapacityReservationAttributesOutput)
    pub fn builder(
    ) -> crate::output::modify_instance_capacity_reservation_attributes_output::Builder {
        crate::output::modify_instance_capacity_reservation_attributes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyInstanceAttributeOutput {}
impl std::fmt::Debug for ModifyInstanceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyInstanceAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput)
pub mod modify_instance_attribute_output {
    /// A builder for [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput)
        pub fn build(self) -> crate::output::ModifyInstanceAttributeOutput {
            crate::output::ModifyInstanceAttributeOutput {}
        }
    }
}
impl ModifyInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceAttributeOutput`](crate::output::ModifyInstanceAttributeOutput)
    pub fn builder() -> crate::output::modify_instance_attribute_output::Builder {
        crate::output::modify_instance_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyImageAttributeOutput {}
impl std::fmt::Debug for ModifyImageAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyImageAttributeOutput");
        formatter.finish()
    }
}
/// See [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput)
pub mod modify_image_attribute_output {
    /// A builder for [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput)
        pub fn build(self) -> crate::output::ModifyImageAttributeOutput {
            crate::output::ModifyImageAttributeOutput {}
        }
    }
}
impl ModifyImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyImageAttributeOutput`](crate::output::ModifyImageAttributeOutput)
    pub fn builder() -> crate::output::modify_image_attribute_output::Builder {
        crate::output::modify_image_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyIdFormatOutput {}
impl std::fmt::Debug for ModifyIdFormatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyIdFormatOutput");
        formatter.finish()
    }
}
/// See [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput)
pub mod modify_id_format_output {
    /// A builder for [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput)
        pub fn build(self) -> crate::output::ModifyIdFormatOutput {
            crate::output::ModifyIdFormatOutput {}
        }
    }
}
impl ModifyIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIdFormatOutput`](crate::output::ModifyIdFormatOutput)
    pub fn builder() -> crate::output::modify_id_format_output::Builder {
        crate::output::modify_id_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyIdentityIdFormatOutput {}
impl std::fmt::Debug for ModifyIdentityIdFormatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyIdentityIdFormatOutput");
        formatter.finish()
    }
}
/// See [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput)
pub mod modify_identity_id_format_output {
    /// A builder for [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput)
        pub fn build(self) -> crate::output::ModifyIdentityIdFormatOutput {
            crate::output::ModifyIdentityIdFormatOutput {}
        }
    }
}
impl ModifyIdentityIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`ModifyIdentityIdFormatOutput`](crate::output::ModifyIdentityIdFormatOutput)
    pub fn builder() -> crate::output::modify_identity_id_format_output::Builder {
        crate::output::modify_identity_id_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyHostsOutput {
    /// <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
    pub successful: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the
    /// setting you requested can be used.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for ModifyHostsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyHostsOutput");
        formatter.field("successful", &self.successful);
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`ModifyHostsOutput`](crate::output::ModifyHostsOutput)
pub mod modify_hosts_output {
    /// A builder for [`ModifyHostsOutput`](crate::output::ModifyHostsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn successful(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(inp.into());
            self.successful = Some(v);
            self
        }
        pub fn set_successful(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.successful = inp;
            self
        }
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyHostsOutput`](crate::output::ModifyHostsOutput)
        pub fn build(self) -> crate::output::ModifyHostsOutput {
            crate::output::ModifyHostsOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl ModifyHostsOutput {
    /// Creates a new builder-style object to manufacture [`ModifyHostsOutput`](crate::output::ModifyHostsOutput)
    pub fn builder() -> crate::output::modify_hosts_output::Builder {
        crate::output::modify_hosts_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyFpgaImageAttributeOutput {
    /// <p>Information about the attribute.</p>
    pub fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
}
impl std::fmt::Debug for ModifyFpgaImageAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyFpgaImageAttributeOutput");
        formatter.field("fpga_image_attribute", &self.fpga_image_attribute);
        formatter.finish()
    }
}
/// See [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput)
pub mod modify_fpga_image_attribute_output {
    /// A builder for [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
    }
    impl Builder {
        /// <p>Information about the attribute.</p>
        pub fn fpga_image_attribute(mut self, inp: crate::model::FpgaImageAttribute) -> Self {
            self.fpga_image_attribute = Some(inp);
            self
        }
        pub fn set_fpga_image_attribute(
            mut self,
            inp: std::option::Option<crate::model::FpgaImageAttribute>,
        ) -> Self {
            self.fpga_image_attribute = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput)
        pub fn build(self) -> crate::output::ModifyFpgaImageAttributeOutput {
            crate::output::ModifyFpgaImageAttributeOutput {
                fpga_image_attribute: self.fpga_image_attribute,
            }
        }
    }
}
impl ModifyFpgaImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyFpgaImageAttributeOutput`](crate::output::ModifyFpgaImageAttributeOutput)
    pub fn builder() -> crate::output::modify_fpga_image_attribute_output::Builder {
        crate::output::modify_fpga_image_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyFleetOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyFleetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyFleetOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyFleetOutput`](crate::output::ModifyFleetOutput)
pub mod modify_fleet_output {
    /// A builder for [`ModifyFleetOutput`](crate::output::ModifyFleetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyFleetOutput`](crate::output::ModifyFleetOutput)
        pub fn build(self) -> crate::output::ModifyFleetOutput {
            crate::output::ModifyFleetOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyFleetOutput {
    /// Creates a new builder-style object to manufacture [`ModifyFleetOutput`](crate::output::ModifyFleetOutput)
    pub fn builder() -> crate::output::modify_fleet_output::Builder {
        crate::output::modify_fleet_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default CMK for encryption by default.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyEbsDefaultKmsKeyIdOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyEbsDefaultKmsKeyIdOutput");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.finish()
    }
}
/// See [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput)
pub mod modify_ebs_default_kms_key_id_output {
    /// A builder for [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the default CMK for encryption by default.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(inp.into());
            self
        }
        pub fn set_kms_key_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput)
        pub fn build(self) -> crate::output::ModifyEbsDefaultKmsKeyIdOutput {
            crate::output::ModifyEbsDefaultKmsKeyIdOutput {
                kms_key_id: self.kms_key_id,
            }
        }
    }
}
impl ModifyEbsDefaultKmsKeyIdOutput {
    /// Creates a new builder-style object to manufacture [`ModifyEbsDefaultKmsKeyIdOutput`](crate::output::ModifyEbsDefaultKmsKeyIdOutput)
    pub fn builder() -> crate::output::modify_ebs_default_kms_key_id_output::Builder {
        crate::output::modify_ebs_default_kms_key_id_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDefaultCreditSpecificationOutput {
    /// <p>The default credit option for CPU usage of the instance family.</p>
    pub instance_family_credit_specification:
        std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
}
impl std::fmt::Debug for ModifyDefaultCreditSpecificationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDefaultCreditSpecificationOutput");
        formatter.field(
            "instance_family_credit_specification",
            &self.instance_family_credit_specification,
        );
        formatter.finish()
    }
}
/// See [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput)
pub mod modify_default_credit_specification_output {
    /// A builder for [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_family_credit_specification:
            std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
    }
    impl Builder {
        /// <p>The default credit option for CPU usage of the instance family.</p>
        pub fn instance_family_credit_specification(
            mut self,
            inp: crate::model::InstanceFamilyCreditSpecification,
        ) -> Self {
            self.instance_family_credit_specification = Some(inp);
            self
        }
        pub fn set_instance_family_credit_specification(
            mut self,
            inp: std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
        ) -> Self {
            self.instance_family_credit_specification = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput)
        pub fn build(self) -> crate::output::ModifyDefaultCreditSpecificationOutput {
            crate::output::ModifyDefaultCreditSpecificationOutput {
                instance_family_credit_specification: self.instance_family_credit_specification,
            }
        }
    }
}
impl ModifyDefaultCreditSpecificationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDefaultCreditSpecificationOutput`](crate::output::ModifyDefaultCreditSpecificationOutput)
    pub fn builder() -> crate::output::modify_default_credit_specification_output::Builder {
        crate::output::modify_default_credit_specification_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyClientVpnEndpointOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyClientVpnEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyClientVpnEndpointOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput)
pub mod modify_client_vpn_endpoint_output {
    /// A builder for [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput)
        pub fn build(self) -> crate::output::ModifyClientVpnEndpointOutput {
            crate::output::ModifyClientVpnEndpointOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyClientVpnEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyClientVpnEndpointOutput`](crate::output::ModifyClientVpnEndpointOutput)
    pub fn builder() -> crate::output::modify_client_vpn_endpoint_output::Builder {
        crate::output::modify_client_vpn_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyCapacityReservationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyCapacityReservationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyCapacityReservationOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput)
pub mod modify_capacity_reservation_output {
    /// A builder for [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput)
        pub fn build(self) -> crate::output::ModifyCapacityReservationOutput {
            crate::output::ModifyCapacityReservationOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCapacityReservationOutput`](crate::output::ModifyCapacityReservationOutput)
    pub fn builder() -> crate::output::modify_capacity_reservation_output::Builder {
        crate::output::modify_capacity_reservation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyAvailabilityZoneGroupOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyAvailabilityZoneGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyAvailabilityZoneGroupOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput)
pub mod modify_availability_zone_group_output {
    /// A builder for [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput)
        pub fn build(self) -> crate::output::ModifyAvailabilityZoneGroupOutput {
            crate::output::ModifyAvailabilityZoneGroupOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ModifyAvailabilityZoneGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyAvailabilityZoneGroupOutput`](crate::output::ModifyAvailabilityZoneGroupOutput)
    pub fn builder() -> crate::output::modify_availability_zone_group_output::Builder {
        crate::output::modify_availability_zone_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyAddressAttributeOutput {
    /// <p>Information about the Elastic IP address.</p>
    pub address: std::option::Option<crate::model::AddressAttribute>,
}
impl std::fmt::Debug for ModifyAddressAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyAddressAttributeOutput");
        formatter.field("address", &self.address);
        formatter.finish()
    }
}
/// See [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput)
pub mod modify_address_attribute_output {
    /// A builder for [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) address: std::option::Option<crate::model::AddressAttribute>,
    }
    impl Builder {
        /// <p>Information about the Elastic IP address.</p>
        pub fn address(mut self, inp: crate::model::AddressAttribute) -> Self {
            self.address = Some(inp);
            self
        }
        pub fn set_address(
            mut self,
            inp: std::option::Option<crate::model::AddressAttribute>,
        ) -> Self {
            self.address = inp;
            self
        }
        /// Consumes the builder and constructs a [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput)
        pub fn build(self) -> crate::output::ModifyAddressAttributeOutput {
            crate::output::ModifyAddressAttributeOutput {
                address: self.address,
            }
        }
    }
}
impl ModifyAddressAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyAddressAttributeOutput`](crate::output::ModifyAddressAttributeOutput)
    pub fn builder() -> crate::output::modify_address_attribute_output::Builder {
        crate::output::modify_address_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportVolumeOutput {
    /// <p>Information about the conversion task.</p>
    pub conversion_task: std::option::Option<crate::model::ConversionTask>,
}
impl std::fmt::Debug for ImportVolumeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportVolumeOutput");
        formatter.field("conversion_task", &self.conversion_task);
        formatter.finish()
    }
}
/// See [`ImportVolumeOutput`](crate::output::ImportVolumeOutput)
pub mod import_volume_output {
    /// A builder for [`ImportVolumeOutput`](crate::output::ImportVolumeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) conversion_task: std::option::Option<crate::model::ConversionTask>,
    }
    impl Builder {
        /// <p>Information about the conversion task.</p>
        pub fn conversion_task(mut self, inp: crate::model::ConversionTask) -> Self {
            self.conversion_task = Some(inp);
            self
        }
        pub fn set_conversion_task(
            mut self,
            inp: std::option::Option<crate::model::ConversionTask>,
        ) -> Self {
            self.conversion_task = inp;
            self
        }
        /// Consumes the builder and constructs a [`ImportVolumeOutput`](crate::output::ImportVolumeOutput)
        pub fn build(self) -> crate::output::ImportVolumeOutput {
            crate::output::ImportVolumeOutput {
                conversion_task: self.conversion_task,
            }
        }
    }
}
impl ImportVolumeOutput {
    /// Creates a new builder-style object to manufacture [`ImportVolumeOutput`](crate::output::ImportVolumeOutput)
    pub fn builder() -> crate::output::import_volume_output::Builder {
        crate::output::import_volume_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportSnapshotOutput {
    /// <p>A description of the import snapshot task.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ID of the import snapshot task.</p>
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>Information about the import snapshot task.</p>
    pub snapshot_task_detail: std::option::Option<crate::model::SnapshotTaskDetail>,
    /// <p>Any tags assigned to the import snapshot task.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ImportSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportSnapshotOutput");
        formatter.field("description", &self.description);
        formatter.field("import_task_id", &self.import_task_id);
        formatter.field("snapshot_task_detail", &self.snapshot_task_detail);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput)
pub mod import_snapshot_output {
    /// A builder for [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) import_task_id: std::option::Option<std::string::String>,
        pub(crate) snapshot_task_detail: std::option::Option<crate::model::SnapshotTaskDetail>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>A description of the import snapshot task.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.description = inp;
            self
        }
        /// <p>The ID of the import snapshot task.</p>
        pub fn import_task_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.import_task_id = Some(inp.into());
            self
        }
        pub fn set_import_task_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.import_task_id = inp;
            self
        }
        /// <p>Information about the import snapshot task.</p>
        pub fn snapshot_task_detail(mut self, inp: crate::model::SnapshotTaskDetail) -> Self {
            self.snapshot_task_detail = Some(inp);
            self
        }
        pub fn set_snapshot_task_detail(
            mut self,
            inp: std::option::Option<crate::model::SnapshotTaskDetail>,
        ) -> Self {
            self.snapshot_task_detail = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput)
        pub fn build(self) -> crate::output::ImportSnapshotOutput {
            crate::output::ImportSnapshotOutput {
                description: self.description,
                import_task_id: self.import_task_id,
                snapshot_task_detail: self.snapshot_task_detail,
                tags: self.tags,
            }
        }
    }
}
impl ImportSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`ImportSnapshotOutput`](crate::output::ImportSnapshotOutput)
    pub fn builder() -> crate::output::import_snapshot_output::Builder {
        crate::output::import_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportKeyPairOutput {
    /// <p>The MD5 public key fingerprint as specified in section 4 of RFC 4716.</p>
    pub key_fingerprint: std::option::Option<std::string::String>,
    /// <p>The key pair name you provided.</p>
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The ID of the resulting key pair.</p>
    pub key_pair_id: std::option::Option<std::string::String>,
    /// <p>The tags applied to the imported key pair.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ImportKeyPairOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportKeyPairOutput");
        formatter.field("key_fingerprint", &self.key_fingerprint);
        formatter.field("key_name", &self.key_name);
        formatter.field("key_pair_id", &self.key_pair_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput)
pub mod import_key_pair_output {
    /// A builder for [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_fingerprint: std::option::Option<std::string::String>,
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) key_pair_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The MD5 public key fingerprint as specified in section 4 of RFC 4716.</p>
        pub fn key_fingerprint(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_fingerprint = Some(inp.into());
            self
        }
        pub fn set_key_fingerprint(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.key_fingerprint = inp;
            self
        }
        /// <p>The key pair name you provided.</p>
        pub fn key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_name = Some(inp.into());
            self
        }
        pub fn set_key_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.key_name = inp;
            self
        }
        /// <p>The ID of the resulting key pair.</p>
        pub fn key_pair_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_pair_id = Some(inp.into());
            self
        }
        pub fn set_key_pair_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.key_pair_id = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput)
        pub fn build(self) -> crate::output::ImportKeyPairOutput {
            crate::output::ImportKeyPairOutput {
                key_fingerprint: self.key_fingerprint,
                key_name: self.key_name,
                key_pair_id: self.key_pair_id,
                tags: self.tags,
            }
        }
    }
}
impl ImportKeyPairOutput {
    /// Creates a new builder-style object to manufacture [`ImportKeyPairOutput`](crate::output::ImportKeyPairOutput)
    pub fn builder() -> crate::output::import_key_pair_output::Builder {
        crate::output::import_key_pair_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportInstanceOutput {
    /// <p>Information about the conversion task.</p>
    pub conversion_task: std::option::Option<crate::model::ConversionTask>,
}
impl std::fmt::Debug for ImportInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportInstanceOutput");
        formatter.field("conversion_task", &self.conversion_task);
        formatter.finish()
    }
}
/// See [`ImportInstanceOutput`](crate::output::ImportInstanceOutput)
pub mod import_instance_output {
    /// A builder for [`ImportInstanceOutput`](crate::output::ImportInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) conversion_task: std::option::Option<crate::model::ConversionTask>,
    }
    impl Builder {
        /// <p>Information about the conversion task.</p>
        pub fn conversion_task(mut self, inp: crate::model::ConversionTask) -> Self {
            self.conversion_task = Some(inp);
            self
        }
        pub fn set_conversion_task(
            mut self,
            inp: std::option::Option<crate::model::ConversionTask>,
        ) -> Self {
            self.conversion_task = inp;
            self
        }
        /// Consumes the builder and constructs a [`ImportInstanceOutput`](crate::output::ImportInstanceOutput)
        pub fn build(self) -> crate::output::ImportInstanceOutput {
            crate::output::ImportInstanceOutput {
                conversion_task: self.conversion_task,
            }
        }
    }
}
impl ImportInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ImportInstanceOutput`](crate::output::ImportInstanceOutput)
    pub fn builder() -> crate::output::import_instance_output::Builder {
        crate::output::import_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportImageOutput {
    /// <p>The architecture of the virtual machine.</p>
    pub architecture: std::option::Option<std::string::String>,
    /// <p>A description of the import task.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates whether the AMI is encrypted.</p>
    pub encrypted: std::option::Option<bool>,
    /// <p>The target hypervisor of the import task.</p>
    pub hypervisor: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The task ID of the import image task.</p>
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key
    /// (CMK) that was used to create the encrypted AMI.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The license type of the virtual machine.</p>
    pub license_type: std::option::Option<std::string::String>,
    /// <p>The operating system of the virtual machine.</p>
    pub platform: std::option::Option<std::string::String>,
    /// <p>The progress of the task.</p>
    pub progress: std::option::Option<std::string::String>,
    /// <p>Information about the snapshots.</p>
    pub snapshot_details: std::option::Option<std::vec::Vec<crate::model::SnapshotDetail>>,
    /// <p>A brief status of the task.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>A detailed status message of the import task.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The ARNs of the license configurations.</p>
    pub license_specifications:
        std::option::Option<std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>>,
    /// <p>Any tags assigned to the import image task.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ImportImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportImageOutput");
        formatter.field("architecture", &self.architecture);
        formatter.field("description", &self.description);
        formatter.field("encrypted", &self.encrypted);
        formatter.field("hypervisor", &self.hypervisor);
        formatter.field("image_id", &self.image_id);
        formatter.field("import_task_id", &self.import_task_id);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("license_type", &self.license_type);
        formatter.field("platform", &self.platform);
        formatter.field("progress", &self.progress);
        formatter.field("snapshot_details", &self.snapshot_details);
        formatter.field("status", &self.status);
        formatter.field("status_message", &self.status_message);
        formatter.field("license_specifications", &self.license_specifications);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ImportImageOutput`](crate::output::ImportImageOutput)
pub mod import_image_output {
    /// A builder for [`ImportImageOutput`](crate::output::ImportImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) architecture: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) hypervisor: std::option::Option<std::string::String>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) import_task_id: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) license_type: std::option::Option<std::string::String>,
        pub(crate) platform: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) snapshot_details:
            std::option::Option<std::vec::Vec<crate::model::SnapshotDetail>>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) license_specifications: std::option::Option<
            std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>,
        >,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The architecture of the virtual machine.</p>
        pub fn architecture(mut self, inp: impl Into<std::string::String>) -> Self {
            self.architecture = Some(inp.into());
            self
        }
        pub fn set_architecture(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.architecture = inp;
            self
        }
        /// <p>A description of the import task.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.description = inp;
            self
        }
        /// <p>Indicates whether the AMI is encrypted.</p>
        pub fn encrypted(mut self, inp: bool) -> Self {
            self.encrypted = Some(inp);
            self
        }
        pub fn set_encrypted(mut self, inp: std::option::Option<bool>) -> Self {
            self.encrypted = inp;
            self
        }
        /// <p>The target hypervisor of the import task.</p>
        pub fn hypervisor(mut self, inp: impl Into<std::string::String>) -> Self {
            self.hypervisor = Some(inp.into());
            self
        }
        pub fn set_hypervisor(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.hypervisor = inp;
            self
        }
        /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        /// <p>The task ID of the import image task.</p>
        pub fn import_task_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.import_task_id = Some(inp.into());
            self
        }
        pub fn set_import_task_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.import_task_id = inp;
            self
        }
        /// <p>The identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key
        /// (CMK) that was used to create the encrypted AMI.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(inp.into());
            self
        }
        pub fn set_kms_key_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = inp;
            self
        }
        /// <p>The license type of the virtual machine.</p>
        pub fn license_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.license_type = Some(inp.into());
            self
        }
        pub fn set_license_type(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.license_type = inp;
            self
        }
        /// <p>The operating system of the virtual machine.</p>
        pub fn platform(mut self, inp: impl Into<std::string::String>) -> Self {
            self.platform = Some(inp.into());
            self
        }
        pub fn set_platform(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.platform = inp;
            self
        }
        /// <p>The progress of the task.</p>
        pub fn progress(mut self, inp: impl Into<std::string::String>) -> Self {
            self.progress = Some(inp.into());
            self
        }
        pub fn set_progress(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.progress = inp;
            self
        }
        pub fn snapshot_details(mut self, inp: impl Into<crate::model::SnapshotDetail>) -> Self {
            let mut v = self.snapshot_details.unwrap_or_default();
            v.push(inp.into());
            self.snapshot_details = Some(v);
            self
        }
        pub fn set_snapshot_details(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SnapshotDetail>>,
        ) -> Self {
            self.snapshot_details = inp;
            self
        }
        /// <p>A brief status of the task.</p>
        pub fn status(mut self, inp: impl Into<std::string::String>) -> Self {
            self.status = Some(inp.into());
            self
        }
        pub fn set_status(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.status = inp;
            self
        }
        /// <p>A detailed status message of the import task.</p>
        pub fn status_message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.status_message = Some(inp.into());
            self
        }
        pub fn set_status_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.status_message = inp;
            self
        }
        pub fn license_specifications(
            mut self,
            inp: impl Into<crate::model::ImportImageLicenseConfigurationResponse>,
        ) -> Self {
            let mut v = self.license_specifications.unwrap_or_default();
            v.push(inp.into());
            self.license_specifications = Some(v);
            self
        }
        pub fn set_license_specifications(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::ImportImageLicenseConfigurationResponse>,
            >,
        ) -> Self {
            self.license_specifications = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`ImportImageOutput`](crate::output::ImportImageOutput)
        pub fn build(self) -> crate::output::ImportImageOutput {
            crate::output::ImportImageOutput {
                architecture: self.architecture,
                description: self.description,
                encrypted: self.encrypted,
                hypervisor: self.hypervisor,
                image_id: self.image_id,
                import_task_id: self.import_task_id,
                kms_key_id: self.kms_key_id,
                license_type: self.license_type,
                platform: self.platform,
                progress: self.progress,
                snapshot_details: self.snapshot_details,
                status: self.status,
                status_message: self.status_message,
                license_specifications: self.license_specifications,
                tags: self.tags,
            }
        }
    }
}
impl ImportImageOutput {
    /// Creates a new builder-style object to manufacture [`ImportImageOutput`](crate::output::ImportImageOutput)
    pub fn builder() -> crate::output::import_image_output::Builder {
        crate::output::import_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportClientVpnClientCertificateRevocationListOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ImportClientVpnClientCertificateRevocationListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportClientVpnClientCertificateRevocationListOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput)
pub mod import_client_vpn_client_certificate_revocation_list_output {
    /// A builder for [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput)
        pub fn build(self) -> crate::output::ImportClientVpnClientCertificateRevocationListOutput {
            crate::output::ImportClientVpnClientCertificateRevocationListOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl ImportClientVpnClientCertificateRevocationListOutput {
    /// Creates a new builder-style object to manufacture [`ImportClientVpnClientCertificateRevocationListOutput`](crate::output::ImportClientVpnClientCertificateRevocationListOutput)
    pub fn builder(
    ) -> crate::output::import_client_vpn_client_certificate_revocation_list_output::Builder {
        crate::output::import_client_vpn_client_certificate_revocation_list_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTransitGatewayRouteTablePropagationsOutput {
    /// <p>Information about the route table propagations.</p>
    pub transit_gateway_route_table_propagations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetTransitGatewayRouteTablePropagationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTransitGatewayRouteTablePropagationsOutput");
        formatter.field(
            "transit_gateway_route_table_propagations",
            &self.transit_gateway_route_table_propagations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput)
pub mod get_transit_gateway_route_table_propagations_output {
    /// A builder for [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table_propagations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_route_table_propagations(
            mut self,
            inp: impl Into<crate::model::TransitGatewayRouteTablePropagation>,
        ) -> Self {
            let mut v = self
                .transit_gateway_route_table_propagations
                .unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_route_table_propagations = Some(v);
            self
        }
        pub fn set_transit_gateway_route_table_propagations(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayRouteTablePropagation>,
            >,
        ) -> Self {
            self.transit_gateway_route_table_propagations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput)
        pub fn build(self) -> crate::output::GetTransitGatewayRouteTablePropagationsOutput {
            crate::output::GetTransitGatewayRouteTablePropagationsOutput {
                transit_gateway_route_table_propagations: self
                    .transit_gateway_route_table_propagations,
                next_token: self.next_token,
            }
        }
    }
}
impl GetTransitGatewayRouteTablePropagationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayRouteTablePropagationsOutput`](crate::output::GetTransitGatewayRouteTablePropagationsOutput)
    pub fn builder() -> crate::output::get_transit_gateway_route_table_propagations_output::Builder
    {
        crate::output::get_transit_gateway_route_table_propagations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTransitGatewayRouteTableAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub associations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetTransitGatewayRouteTableAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTransitGatewayRouteTableAssociationsOutput");
        formatter.field("associations", &self.associations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput)
pub mod get_transit_gateway_route_table_associations_output {
    /// A builder for [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn associations(
            mut self,
            inp: impl Into<crate::model::TransitGatewayRouteTableAssociation>,
        ) -> Self {
            let mut v = self.associations.unwrap_or_default();
            v.push(inp.into());
            self.associations = Some(v);
            self
        }
        pub fn set_associations(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayRouteTableAssociation>,
            >,
        ) -> Self {
            self.associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput)
        pub fn build(self) -> crate::output::GetTransitGatewayRouteTableAssociationsOutput {
            crate::output::GetTransitGatewayRouteTableAssociationsOutput {
                associations: self.associations,
                next_token: self.next_token,
            }
        }
    }
}
impl GetTransitGatewayRouteTableAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayRouteTableAssociationsOutput`](crate::output::GetTransitGatewayRouteTableAssociationsOutput)
    pub fn builder() -> crate::output::get_transit_gateway_route_table_associations_output::Builder
    {
        crate::output::get_transit_gateway_route_table_associations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTransitGatewayPrefixListReferencesOutput {
    /// <p>Information about the prefix list references.</p>
    pub transit_gateway_prefix_list_references:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPrefixListReference>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetTransitGatewayPrefixListReferencesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTransitGatewayPrefixListReferencesOutput");
        formatter.field(
            "transit_gateway_prefix_list_references",
            &self.transit_gateway_prefix_list_references,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput)
pub mod get_transit_gateway_prefix_list_references_output {
    /// A builder for [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_references:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPrefixListReference>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_prefix_list_references(
            mut self,
            inp: impl Into<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            let mut v = self
                .transit_gateway_prefix_list_references
                .unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_prefix_list_references = Some(v);
            self
        }
        pub fn set_transit_gateway_prefix_list_references(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayPrefixListReference>,
            >,
        ) -> Self {
            self.transit_gateway_prefix_list_references = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput)
        pub fn build(self) -> crate::output::GetTransitGatewayPrefixListReferencesOutput {
            crate::output::GetTransitGatewayPrefixListReferencesOutput {
                transit_gateway_prefix_list_references: self.transit_gateway_prefix_list_references,
                next_token: self.next_token,
            }
        }
    }
}
impl GetTransitGatewayPrefixListReferencesOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayPrefixListReferencesOutput`](crate::output::GetTransitGatewayPrefixListReferencesOutput)
    pub fn builder() -> crate::output::get_transit_gateway_prefix_list_references_output::Builder {
        crate::output::get_transit_gateway_prefix_list_references_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Information about the multicast domain associations.</p>
    pub multicast_domain_associations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetTransitGatewayMulticastDomainAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTransitGatewayMulticastDomainAssociationsOutput");
        formatter.field(
            "multicast_domain_associations",
            &self.multicast_domain_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput)
pub mod get_transit_gateway_multicast_domain_associations_output {
    /// A builder for [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) multicast_domain_associations: std::option::Option<
            std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn multicast_domain_associations(
            mut self,
            inp: impl Into<crate::model::TransitGatewayMulticastDomainAssociation>,
        ) -> Self {
            let mut v = self.multicast_domain_associations.unwrap_or_default();
            v.push(inp.into());
            self.multicast_domain_associations = Some(v);
            self
        }
        pub fn set_multicast_domain_associations(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayMulticastDomainAssociation>,
            >,
        ) -> Self {
            self.multicast_domain_associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput)
        pub fn build(self) -> crate::output::GetTransitGatewayMulticastDomainAssociationsOutput {
            crate::output::GetTransitGatewayMulticastDomainAssociationsOutput {
                multicast_domain_associations: self.multicast_domain_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl GetTransitGatewayMulticastDomainAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayMulticastDomainAssociationsOutput`](crate::output::GetTransitGatewayMulticastDomainAssociationsOutput)
    pub fn builder(
    ) -> crate::output::get_transit_gateway_multicast_domain_associations_output::Builder {
        crate::output::get_transit_gateway_multicast_domain_associations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTransitGatewayAttachmentPropagationsOutput {
    /// <p>Information about the propagation route tables.</p>
    pub transit_gateway_attachment_propagations:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetTransitGatewayAttachmentPropagationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTransitGatewayAttachmentPropagationsOutput");
        formatter.field(
            "transit_gateway_attachment_propagations",
            &self.transit_gateway_attachment_propagations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput)
pub mod get_transit_gateway_attachment_propagations_output {
    /// A builder for [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_attachment_propagations:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_attachment_propagations(
            mut self,
            inp: impl Into<crate::model::TransitGatewayAttachmentPropagation>,
        ) -> Self {
            let mut v = self
                .transit_gateway_attachment_propagations
                .unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_attachment_propagations = Some(v);
            self
        }
        pub fn set_transit_gateway_attachment_propagations(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::TransitGatewayAttachmentPropagation>,
            >,
        ) -> Self {
            self.transit_gateway_attachment_propagations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput)
        pub fn build(self) -> crate::output::GetTransitGatewayAttachmentPropagationsOutput {
            crate::output::GetTransitGatewayAttachmentPropagationsOutput {
                transit_gateway_attachment_propagations: self
                    .transit_gateway_attachment_propagations,
                next_token: self.next_token,
            }
        }
    }
}
impl GetTransitGatewayAttachmentPropagationsOutput {
    /// Creates a new builder-style object to manufacture [`GetTransitGatewayAttachmentPropagationsOutput`](crate::output::GetTransitGatewayAttachmentPropagationsOutput)
    pub fn builder() -> crate::output::get_transit_gateway_attachment_propagations_output::Builder {
        crate::output::get_transit_gateway_attachment_propagations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSerialConsoleAccessStatusOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
    /// your account. If <code>false</code>, access to the EC2 serial console of all instances
    /// is disabled for your account.</p>
    pub serial_console_access_enabled: std::option::Option<bool>,
}
impl std::fmt::Debug for GetSerialConsoleAccessStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSerialConsoleAccessStatusOutput");
        formatter.field(
            "serial_console_access_enabled",
            &self.serial_console_access_enabled,
        );
        formatter.finish()
    }
}
/// See [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput)
pub mod get_serial_console_access_status_output {
    /// A builder for [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) serial_console_access_enabled: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
        /// your account. If <code>false</code>, access to the EC2 serial console of all instances
        /// is disabled for your account.</p>
        pub fn serial_console_access_enabled(mut self, inp: bool) -> Self {
            self.serial_console_access_enabled = Some(inp);
            self
        }
        pub fn set_serial_console_access_enabled(mut self, inp: std::option::Option<bool>) -> Self {
            self.serial_console_access_enabled = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput)
        pub fn build(self) -> crate::output::GetSerialConsoleAccessStatusOutput {
            crate::output::GetSerialConsoleAccessStatusOutput {
                serial_console_access_enabled: self.serial_console_access_enabled,
            }
        }
    }
}
impl GetSerialConsoleAccessStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetSerialConsoleAccessStatusOutput`](crate::output::GetSerialConsoleAccessStatusOutput)
    pub fn builder() -> crate::output::get_serial_console_access_status_output::Builder {
        crate::output::get_serial_console_access_status_output::Builder::default()
    }
}

/// <p>Contains the output of GetReservedInstancesExchangeQuote.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetReservedInstancesExchangeQuoteOutput {
    /// <p>The currency of the transaction.</p>
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
    pub is_valid_exchange: std::option::Option<bool>,
    /// <p>The new end date of the reservation term.</p>
    pub output_reserved_instances_will_expire_at: std::option::Option<smithy_types::Instant>,
    /// <p>The total true upfront charge for the exchange.</p>
    pub payment_due: std::option::Option<std::string::String>,
    /// <p>The cost associated with the Reserved Instance.</p>
    pub reserved_instance_value_rollup: std::option::Option<crate::model::ReservationValue>,
    /// <p>The configuration of your Convertible Reserved Instances.</p>
    pub reserved_instance_value_set:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstanceReservationValue>>,
    /// <p>The cost associated with the Reserved Instance.</p>
    pub target_configuration_value_rollup: std::option::Option<crate::model::ReservationValue>,
    /// <p>The values of the target Convertible Reserved Instances.</p>
    pub target_configuration_value_set:
        std::option::Option<std::vec::Vec<crate::model::TargetReservationValue>>,
    /// <p>Describes the reason why the exchange cannot be completed.</p>
    pub validation_failure_reason: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetReservedInstancesExchangeQuoteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetReservedInstancesExchangeQuoteOutput");
        formatter.field("currency_code", &self.currency_code);
        formatter.field("is_valid_exchange", &self.is_valid_exchange);
        formatter.field(
            "output_reserved_instances_will_expire_at",
            &self.output_reserved_instances_will_expire_at,
        );
        formatter.field("payment_due", &self.payment_due);
        formatter.field(
            "reserved_instance_value_rollup",
            &self.reserved_instance_value_rollup,
        );
        formatter.field(
            "reserved_instance_value_set",
            &self.reserved_instance_value_set,
        );
        formatter.field(
            "target_configuration_value_rollup",
            &self.target_configuration_value_rollup,
        );
        formatter.field(
            "target_configuration_value_set",
            &self.target_configuration_value_set,
        );
        formatter.field("validation_failure_reason", &self.validation_failure_reason);
        formatter.finish()
    }
}
/// See [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput)
pub mod get_reserved_instances_exchange_quote_output {
    /// A builder for [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) currency_code: std::option::Option<std::string::String>,
        pub(crate) is_valid_exchange: std::option::Option<bool>,
        pub(crate) output_reserved_instances_will_expire_at:
            std::option::Option<smithy_types::Instant>,
        pub(crate) payment_due: std::option::Option<std::string::String>,
        pub(crate) reserved_instance_value_rollup:
            std::option::Option<crate::model::ReservationValue>,
        pub(crate) reserved_instance_value_set:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstanceReservationValue>>,
        pub(crate) target_configuration_value_rollup:
            std::option::Option<crate::model::ReservationValue>,
        pub(crate) target_configuration_value_set:
            std::option::Option<std::vec::Vec<crate::model::TargetReservationValue>>,
        pub(crate) validation_failure_reason: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The currency of the transaction.</p>
        pub fn currency_code(mut self, inp: impl Into<std::string::String>) -> Self {
            self.currency_code = Some(inp.into());
            self
        }
        pub fn set_currency_code(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.currency_code = inp;
            self
        }
        /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
        pub fn is_valid_exchange(mut self, inp: bool) -> Self {
            self.is_valid_exchange = Some(inp);
            self
        }
        pub fn set_is_valid_exchange(mut self, inp: std::option::Option<bool>) -> Self {
            self.is_valid_exchange = inp;
            self
        }
        /// <p>The new end date of the reservation term.</p>
        pub fn output_reserved_instances_will_expire_at(
            mut self,
            inp: smithy_types::Instant,
        ) -> Self {
            self.output_reserved_instances_will_expire_at = Some(inp);
            self
        }
        pub fn set_output_reserved_instances_will_expire_at(
            mut self,
            inp: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.output_reserved_instances_will_expire_at = inp;
            self
        }
        /// <p>The total true upfront charge for the exchange.</p>
        pub fn payment_due(mut self, inp: impl Into<std::string::String>) -> Self {
            self.payment_due = Some(inp.into());
            self
        }
        pub fn set_payment_due(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.payment_due = inp;
            self
        }
        /// <p>The cost associated with the Reserved Instance.</p>
        pub fn reserved_instance_value_rollup(
            mut self,
            inp: crate::model::ReservationValue,
        ) -> Self {
            self.reserved_instance_value_rollup = Some(inp);
            self
        }
        pub fn set_reserved_instance_value_rollup(
            mut self,
            inp: std::option::Option<crate::model::ReservationValue>,
        ) -> Self {
            self.reserved_instance_value_rollup = inp;
            self
        }
        pub fn reserved_instance_value_set(
            mut self,
            inp: impl Into<crate::model::ReservedInstanceReservationValue>,
        ) -> Self {
            let mut v = self.reserved_instance_value_set.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instance_value_set = Some(v);
            self
        }
        pub fn set_reserved_instance_value_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstanceReservationValue>>,
        ) -> Self {
            self.reserved_instance_value_set = inp;
            self
        }
        /// <p>The cost associated with the Reserved Instance.</p>
        pub fn target_configuration_value_rollup(
            mut self,
            inp: crate::model::ReservationValue,
        ) -> Self {
            self.target_configuration_value_rollup = Some(inp);
            self
        }
        pub fn set_target_configuration_value_rollup(
            mut self,
            inp: std::option::Option<crate::model::ReservationValue>,
        ) -> Self {
            self.target_configuration_value_rollup = inp;
            self
        }
        pub fn target_configuration_value_set(
            mut self,
            inp: impl Into<crate::model::TargetReservationValue>,
        ) -> Self {
            let mut v = self.target_configuration_value_set.unwrap_or_default();
            v.push(inp.into());
            self.target_configuration_value_set = Some(v);
            self
        }
        pub fn set_target_configuration_value_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TargetReservationValue>>,
        ) -> Self {
            self.target_configuration_value_set = inp;
            self
        }
        /// <p>Describes the reason why the exchange cannot be completed.</p>
        pub fn validation_failure_reason(mut self, inp: impl Into<std::string::String>) -> Self {
            self.validation_failure_reason = Some(inp.into());
            self
        }
        pub fn set_validation_failure_reason(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.validation_failure_reason = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput)
        pub fn build(self) -> crate::output::GetReservedInstancesExchangeQuoteOutput {
            crate::output::GetReservedInstancesExchangeQuoteOutput {
                currency_code: self.currency_code,
                is_valid_exchange: self.is_valid_exchange,
                output_reserved_instances_will_expire_at: self
                    .output_reserved_instances_will_expire_at,
                payment_due: self.payment_due,
                reserved_instance_value_rollup: self.reserved_instance_value_rollup,
                reserved_instance_value_set: self.reserved_instance_value_set,
                target_configuration_value_rollup: self.target_configuration_value_rollup,
                target_configuration_value_set: self.target_configuration_value_set,
                validation_failure_reason: self.validation_failure_reason,
            }
        }
    }
}
impl GetReservedInstancesExchangeQuoteOutput {
    /// Creates a new builder-style object to manufacture [`GetReservedInstancesExchangeQuoteOutput`](crate::output::GetReservedInstancesExchangeQuoteOutput)
    pub fn builder() -> crate::output::get_reserved_instances_exchange_quote_output::Builder {
        crate::output::get_reserved_instances_exchange_quote_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPasswordDataOutput {
    /// <p>The ID of the Windows instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The password of the instance. Returns an empty string if the password is not
    /// available.</p>
    pub password_data: std::option::Option<std::string::String>,
    /// <p>The time the data was last updated.</p>
    pub timestamp: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for GetPasswordDataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPasswordDataOutput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("password_data", &self.password_data);
        formatter.field("timestamp", &self.timestamp);
        formatter.finish()
    }
}
/// See [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput)
pub mod get_password_data_output {
    /// A builder for [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) password_data: std::option::Option<std::string::String>,
        pub(crate) timestamp: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The ID of the Windows instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// <p>The password of the instance. Returns an empty string if the password is not
        /// available.</p>
        pub fn password_data(mut self, inp: impl Into<std::string::String>) -> Self {
            self.password_data = Some(inp.into());
            self
        }
        pub fn set_password_data(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.password_data = inp;
            self
        }
        /// <p>The time the data was last updated.</p>
        pub fn timestamp(mut self, inp: smithy_types::Instant) -> Self {
            self.timestamp = Some(inp);
            self
        }
        pub fn set_timestamp(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.timestamp = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput)
        pub fn build(self) -> crate::output::GetPasswordDataOutput {
            crate::output::GetPasswordDataOutput {
                instance_id: self.instance_id,
                password_data: self.password_data,
                timestamp: self.timestamp,
            }
        }
    }
}
impl GetPasswordDataOutput {
    /// Creates a new builder-style object to manufacture [`GetPasswordDataOutput`](crate::output::GetPasswordDataOutput)
    pub fn builder() -> crate::output::get_password_data_output::Builder {
        crate::output::get_password_data_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetManagedPrefixListEntriesOutput {
    /// <p>Information about the prefix list entries.</p>
    pub entries: std::option::Option<std::vec::Vec<crate::model::PrefixListEntry>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetManagedPrefixListEntriesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetManagedPrefixListEntriesOutput");
        formatter.field("entries", &self.entries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput)
pub mod get_managed_prefix_list_entries_output {
    /// A builder for [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entries: std::option::Option<std::vec::Vec<crate::model::PrefixListEntry>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn entries(mut self, inp: impl Into<crate::model::PrefixListEntry>) -> Self {
            let mut v = self.entries.unwrap_or_default();
            v.push(inp.into());
            self.entries = Some(v);
            self
        }
        pub fn set_entries(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::PrefixListEntry>>,
        ) -> Self {
            self.entries = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput)
        pub fn build(self) -> crate::output::GetManagedPrefixListEntriesOutput {
            crate::output::GetManagedPrefixListEntriesOutput {
                entries: self.entries,
                next_token: self.next_token,
            }
        }
    }
}
impl GetManagedPrefixListEntriesOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedPrefixListEntriesOutput`](crate::output::GetManagedPrefixListEntriesOutput)
    pub fn builder() -> crate::output::get_managed_prefix_list_entries_output::Builder {
        crate::output::get_managed_prefix_list_entries_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetManagedPrefixListAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub prefix_list_associations:
        std::option::Option<std::vec::Vec<crate::model::PrefixListAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetManagedPrefixListAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetManagedPrefixListAssociationsOutput");
        formatter.field("prefix_list_associations", &self.prefix_list_associations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput)
pub mod get_managed_prefix_list_associations_output {
    /// A builder for [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list_associations:
            std::option::Option<std::vec::Vec<crate::model::PrefixListAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn prefix_list_associations(
            mut self,
            inp: impl Into<crate::model::PrefixListAssociation>,
        ) -> Self {
            let mut v = self.prefix_list_associations.unwrap_or_default();
            v.push(inp.into());
            self.prefix_list_associations = Some(v);
            self
        }
        pub fn set_prefix_list_associations(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::PrefixListAssociation>>,
        ) -> Self {
            self.prefix_list_associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput)
        pub fn build(self) -> crate::output::GetManagedPrefixListAssociationsOutput {
            crate::output::GetManagedPrefixListAssociationsOutput {
                prefix_list_associations: self.prefix_list_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl GetManagedPrefixListAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`GetManagedPrefixListAssociationsOutput`](crate::output::GetManagedPrefixListAssociationsOutput)
    pub fn builder() -> crate::output::get_managed_prefix_list_associations_output::Builder {
        crate::output::get_managed_prefix_list_associations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLaunchTemplateDataOutput {
    /// <p>The instance data.</p>
    pub launch_template_data: std::option::Option<crate::model::ResponseLaunchTemplateData>,
}
impl std::fmt::Debug for GetLaunchTemplateDataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLaunchTemplateDataOutput");
        formatter.field("launch_template_data", &self.launch_template_data);
        formatter.finish()
    }
}
/// See [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput)
pub mod get_launch_template_data_output {
    /// A builder for [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template_data:
            std::option::Option<crate::model::ResponseLaunchTemplateData>,
    }
    impl Builder {
        /// <p>The instance data.</p>
        pub fn launch_template_data(
            mut self,
            inp: crate::model::ResponseLaunchTemplateData,
        ) -> Self {
            self.launch_template_data = Some(inp);
            self
        }
        pub fn set_launch_template_data(
            mut self,
            inp: std::option::Option<crate::model::ResponseLaunchTemplateData>,
        ) -> Self {
            self.launch_template_data = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput)
        pub fn build(self) -> crate::output::GetLaunchTemplateDataOutput {
            crate::output::GetLaunchTemplateDataOutput {
                launch_template_data: self.launch_template_data,
            }
        }
    }
}
impl GetLaunchTemplateDataOutput {
    /// Creates a new builder-style object to manufacture [`GetLaunchTemplateDataOutput`](crate::output::GetLaunchTemplateDataOutput)
    pub fn builder() -> crate::output::get_launch_template_data_output::Builder {
        crate::output::get_launch_template_data_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetHostReservationPurchasePreviewOutput {
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and
    /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
    /// supported currency is <code>USD</code>.</p>
    pub currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
    /// <p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts
    /// associated with it.</p>
    pub purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
    /// <p>The potential total hourly price of the reservation per hour.</p>
    pub total_hourly_price: std::option::Option<std::string::String>,
    /// <p>The potential total upfront price. This is billed immediately.</p>
    pub total_upfront_price: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetHostReservationPurchasePreviewOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetHostReservationPurchasePreviewOutput");
        formatter.field("currency_code", &self.currency_code);
        formatter.field("purchase", &self.purchase);
        formatter.field("total_hourly_price", &self.total_hourly_price);
        formatter.field("total_upfront_price", &self.total_upfront_price);
        formatter.finish()
    }
}
/// See [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput)
pub mod get_host_reservation_purchase_preview_output {
    /// A builder for [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) currency_code: std::option::Option<crate::model::CurrencyCodeValues>,
        pub(crate) purchase: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        pub(crate) total_hourly_price: std::option::Option<std::string::String>,
        pub(crate) total_upfront_price: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The currency in which the <code>totalUpfrontPrice</code> and
        /// <code>totalHourlyPrice</code> amounts are specified. At this time, the only
        /// supported currency is <code>USD</code>.</p>
        pub fn currency_code(mut self, inp: crate::model::CurrencyCodeValues) -> Self {
            self.currency_code = Some(inp);
            self
        }
        pub fn set_currency_code(
            mut self,
            inp: std::option::Option<crate::model::CurrencyCodeValues>,
        ) -> Self {
            self.currency_code = inp;
            self
        }
        pub fn purchase(mut self, inp: impl Into<crate::model::Purchase>) -> Self {
            let mut v = self.purchase.unwrap_or_default();
            v.push(inp.into());
            self.purchase = Some(v);
            self
        }
        pub fn set_purchase(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Purchase>>,
        ) -> Self {
            self.purchase = inp;
            self
        }
        /// <p>The potential total hourly price of the reservation per hour.</p>
        pub fn total_hourly_price(mut self, inp: impl Into<std::string::String>) -> Self {
            self.total_hourly_price = Some(inp.into());
            self
        }
        pub fn set_total_hourly_price(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_hourly_price = inp;
            self
        }
        /// <p>The potential total upfront price. This is billed immediately.</p>
        pub fn total_upfront_price(mut self, inp: impl Into<std::string::String>) -> Self {
            self.total_upfront_price = Some(inp.into());
            self
        }
        pub fn set_total_upfront_price(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.total_upfront_price = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput)
        pub fn build(self) -> crate::output::GetHostReservationPurchasePreviewOutput {
            crate::output::GetHostReservationPurchasePreviewOutput {
                currency_code: self.currency_code,
                purchase: self.purchase,
                total_hourly_price: self.total_hourly_price,
                total_upfront_price: self.total_upfront_price,
            }
        }
    }
}
impl GetHostReservationPurchasePreviewOutput {
    /// Creates a new builder-style object to manufacture [`GetHostReservationPurchasePreviewOutput`](crate::output::GetHostReservationPurchasePreviewOutput)
    pub fn builder() -> crate::output::get_host_reservation_purchase_preview_output::Builder {
        crate::output::get_host_reservation_purchase_preview_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupsForCapacityReservationOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the resource groups to which the Capacity Reservation has been added.</p>
    pub capacity_reservation_groups:
        std::option::Option<std::vec::Vec<crate::model::CapacityReservationGroup>>,
}
impl std::fmt::Debug for GetGroupsForCapacityReservationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetGroupsForCapacityReservationOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "capacity_reservation_groups",
            &self.capacity_reservation_groups,
        );
        formatter.finish()
    }
}
/// See [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput)
pub mod get_groups_for_capacity_reservation_output {
    /// A builder for [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) capacity_reservation_groups:
            std::option::Option<std::vec::Vec<crate::model::CapacityReservationGroup>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn capacity_reservation_groups(
            mut self,
            inp: impl Into<crate::model::CapacityReservationGroup>,
        ) -> Self {
            let mut v = self.capacity_reservation_groups.unwrap_or_default();
            v.push(inp.into());
            self.capacity_reservation_groups = Some(v);
            self
        }
        pub fn set_capacity_reservation_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CapacityReservationGroup>>,
        ) -> Self {
            self.capacity_reservation_groups = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput)
        pub fn build(self) -> crate::output::GetGroupsForCapacityReservationOutput {
            crate::output::GetGroupsForCapacityReservationOutput {
                next_token: self.next_token,
                capacity_reservation_groups: self.capacity_reservation_groups,
            }
        }
    }
}
impl GetGroupsForCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`GetGroupsForCapacityReservationOutput`](crate::output::GetGroupsForCapacityReservationOutput)
    pub fn builder() -> crate::output::get_groups_for_capacity_reservation_output::Builder {
        crate::output::get_groups_for_capacity_reservation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetFlowLogsIntegrationTemplateOutput {
    /// <p>The generated CloudFormation template.</p>
    pub result: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetFlowLogsIntegrationTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetFlowLogsIntegrationTemplateOutput");
        formatter.field("result", &self.result);
        formatter.finish()
    }
}
/// See [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput)
pub mod get_flow_logs_integration_template_output {
    /// A builder for [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) result: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The generated CloudFormation template.</p>
        pub fn result(mut self, inp: impl Into<std::string::String>) -> Self {
            self.result = Some(inp.into());
            self
        }
        pub fn set_result(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.result = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput)
        pub fn build(self) -> crate::output::GetFlowLogsIntegrationTemplateOutput {
            crate::output::GetFlowLogsIntegrationTemplateOutput {
                result: self.result,
            }
        }
    }
}
impl GetFlowLogsIntegrationTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetFlowLogsIntegrationTemplateOutput`](crate::output::GetFlowLogsIntegrationTemplateOutput)
    pub fn builder() -> crate::output::get_flow_logs_integration_template_output::Builder {
        crate::output::get_flow_logs_integration_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEbsEncryptionByDefaultOutput {
    /// <p>Indicates whether encryption by default is enabled.</p>
    pub ebs_encryption_by_default: std::option::Option<bool>,
}
impl std::fmt::Debug for GetEbsEncryptionByDefaultOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEbsEncryptionByDefaultOutput");
        formatter.field("ebs_encryption_by_default", &self.ebs_encryption_by_default);
        formatter.finish()
    }
}
/// See [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput)
pub mod get_ebs_encryption_by_default_output {
    /// A builder for [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ebs_encryption_by_default: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Indicates whether encryption by default is enabled.</p>
        pub fn ebs_encryption_by_default(mut self, inp: bool) -> Self {
            self.ebs_encryption_by_default = Some(inp);
            self
        }
        pub fn set_ebs_encryption_by_default(mut self, inp: std::option::Option<bool>) -> Self {
            self.ebs_encryption_by_default = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput)
        pub fn build(self) -> crate::output::GetEbsEncryptionByDefaultOutput {
            crate::output::GetEbsEncryptionByDefaultOutput {
                ebs_encryption_by_default: self.ebs_encryption_by_default,
            }
        }
    }
}
impl GetEbsEncryptionByDefaultOutput {
    /// Creates a new builder-style object to manufacture [`GetEbsEncryptionByDefaultOutput`](crate::output::GetEbsEncryptionByDefaultOutput)
    pub fn builder() -> crate::output::get_ebs_encryption_by_default_output::Builder {
        crate::output::get_ebs_encryption_by_default_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEbsDefaultKmsKeyIdOutput {
    /// <p>The Amazon Resource Name (ARN) of the default CMK for encryption by default.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetEbsDefaultKmsKeyIdOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEbsDefaultKmsKeyIdOutput");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.finish()
    }
}
/// See [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput)
pub mod get_ebs_default_kms_key_id_output {
    /// A builder for [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the default CMK for encryption by default.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(inp.into());
            self
        }
        pub fn set_kms_key_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput)
        pub fn build(self) -> crate::output::GetEbsDefaultKmsKeyIdOutput {
            crate::output::GetEbsDefaultKmsKeyIdOutput {
                kms_key_id: self.kms_key_id,
            }
        }
    }
}
impl GetEbsDefaultKmsKeyIdOutput {
    /// Creates a new builder-style object to manufacture [`GetEbsDefaultKmsKeyIdOutput`](crate::output::GetEbsDefaultKmsKeyIdOutput)
    pub fn builder() -> crate::output::get_ebs_default_kms_key_id_output::Builder {
        crate::output::get_ebs_default_kms_key_id_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDefaultCreditSpecificationOutput {
    /// <p>The default credit option for CPU usage of the instance family.</p>
    pub instance_family_credit_specification:
        std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
}
impl std::fmt::Debug for GetDefaultCreditSpecificationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDefaultCreditSpecificationOutput");
        formatter.field(
            "instance_family_credit_specification",
            &self.instance_family_credit_specification,
        );
        formatter.finish()
    }
}
/// See [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput)
pub mod get_default_credit_specification_output {
    /// A builder for [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_family_credit_specification:
            std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
    }
    impl Builder {
        /// <p>The default credit option for CPU usage of the instance family.</p>
        pub fn instance_family_credit_specification(
            mut self,
            inp: crate::model::InstanceFamilyCreditSpecification,
        ) -> Self {
            self.instance_family_credit_specification = Some(inp);
            self
        }
        pub fn set_instance_family_credit_specification(
            mut self,
            inp: std::option::Option<crate::model::InstanceFamilyCreditSpecification>,
        ) -> Self {
            self.instance_family_credit_specification = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput)
        pub fn build(self) -> crate::output::GetDefaultCreditSpecificationOutput {
            crate::output::GetDefaultCreditSpecificationOutput {
                instance_family_credit_specification: self.instance_family_credit_specification,
            }
        }
    }
}
impl GetDefaultCreditSpecificationOutput {
    /// Creates a new builder-style object to manufacture [`GetDefaultCreditSpecificationOutput`](crate::output::GetDefaultCreditSpecificationOutput)
    pub fn builder() -> crate::output::get_default_credit_specification_output::Builder {
        crate::output::get_default_credit_specification_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetConsoleScreenshotOutput {
    /// <p>The data that comprises the image.</p>
    pub image_data: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetConsoleScreenshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetConsoleScreenshotOutput");
        formatter.field("image_data", &self.image_data);
        formatter.field("instance_id", &self.instance_id);
        formatter.finish()
    }
}
/// See [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput)
pub mod get_console_screenshot_output {
    /// A builder for [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_data: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The data that comprises the image.</p>
        pub fn image_data(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_data = Some(inp.into());
            self
        }
        pub fn set_image_data(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_data = inp;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput)
        pub fn build(self) -> crate::output::GetConsoleScreenshotOutput {
            crate::output::GetConsoleScreenshotOutput {
                image_data: self.image_data,
                instance_id: self.instance_id,
            }
        }
    }
}
impl GetConsoleScreenshotOutput {
    /// Creates a new builder-style object to manufacture [`GetConsoleScreenshotOutput`](crate::output::GetConsoleScreenshotOutput)
    pub fn builder() -> crate::output::get_console_screenshot_output::Builder {
        crate::output::get_console_screenshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetConsoleOutputOutput {
    /// <p>The ID of the instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The console output, base64-encoded. If you are using a command line tool, the tool
    /// decodes the output for you.</p>
    pub output: std::option::Option<std::string::String>,
    /// <p>The time at which the output was last updated.</p>
    pub timestamp: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for GetConsoleOutputOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetConsoleOutputOutput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("output", &self.output);
        formatter.field("timestamp", &self.timestamp);
        formatter.finish()
    }
}
/// See [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput)
pub mod get_console_output_output {
    /// A builder for [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) output: std::option::Option<std::string::String>,
        pub(crate) timestamp: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// <p>The console output, base64-encoded. If you are using a command line tool, the tool
        /// decodes the output for you.</p>
        pub fn output(mut self, inp: impl Into<std::string::String>) -> Self {
            self.output = Some(inp.into());
            self
        }
        pub fn set_output(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.output = inp;
            self
        }
        /// <p>The time at which the output was last updated.</p>
        pub fn timestamp(mut self, inp: smithy_types::Instant) -> Self {
            self.timestamp = Some(inp);
            self
        }
        pub fn set_timestamp(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.timestamp = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput)
        pub fn build(self) -> crate::output::GetConsoleOutputOutput {
            crate::output::GetConsoleOutputOutput {
                instance_id: self.instance_id,
                output: self.output,
                timestamp: self.timestamp,
            }
        }
    }
}
impl GetConsoleOutputOutput {
    /// Creates a new builder-style object to manufacture [`GetConsoleOutputOutput`](crate::output::GetConsoleOutputOutput)
    pub fn builder() -> crate::output::get_console_output_output::Builder {
        crate::output::get_console_output_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCoipPoolUsageOutput {
    /// <p>The ID of the customer-owned address pool.</p>
    pub coip_pool_id: std::option::Option<std::string::String>,
    /// <p>Information about the address usage.</p>
    pub coip_address_usages: std::option::Option<std::vec::Vec<crate::model::CoipAddressUsage>>,
    /// <p>The ID of the local gateway route table.</p>
    pub local_gateway_route_table_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetCoipPoolUsageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCoipPoolUsageOutput");
        formatter.field("coip_pool_id", &self.coip_pool_id);
        formatter.field("coip_address_usages", &self.coip_address_usages);
        formatter.field(
            "local_gateway_route_table_id",
            &self.local_gateway_route_table_id,
        );
        formatter.finish()
    }
}
/// See [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput)
pub mod get_coip_pool_usage_output {
    /// A builder for [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_pool_id: std::option::Option<std::string::String>,
        pub(crate) coip_address_usages:
            std::option::Option<std::vec::Vec<crate::model::CoipAddressUsage>>,
        pub(crate) local_gateway_route_table_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the customer-owned address pool.</p>
        pub fn coip_pool_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.coip_pool_id = Some(inp.into());
            self
        }
        pub fn set_coip_pool_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.coip_pool_id = inp;
            self
        }
        pub fn coip_address_usages(
            mut self,
            inp: impl Into<crate::model::CoipAddressUsage>,
        ) -> Self {
            let mut v = self.coip_address_usages.unwrap_or_default();
            v.push(inp.into());
            self.coip_address_usages = Some(v);
            self
        }
        pub fn set_coip_address_usages(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CoipAddressUsage>>,
        ) -> Self {
            self.coip_address_usages = inp;
            self
        }
        /// <p>The ID of the local gateway route table.</p>
        pub fn local_gateway_route_table_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.local_gateway_route_table_id = Some(inp.into());
            self
        }
        pub fn set_local_gateway_route_table_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.local_gateway_route_table_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput)
        pub fn build(self) -> crate::output::GetCoipPoolUsageOutput {
            crate::output::GetCoipPoolUsageOutput {
                coip_pool_id: self.coip_pool_id,
                coip_address_usages: self.coip_address_usages,
                local_gateway_route_table_id: self.local_gateway_route_table_id,
            }
        }
    }
}
impl GetCoipPoolUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetCoipPoolUsageOutput`](crate::output::GetCoipPoolUsageOutput)
    pub fn builder() -> crate::output::get_coip_pool_usage_output::Builder {
        crate::output::get_coip_pool_usage_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCapacityReservationUsageOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: std::option::Option<std::string::String>,
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub total_instance_count: std::option::Option<i32>,
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub available_instance_count: std::option::Option<i32>,
    /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified
    /// in your request. The reserved capacity is no longer available for your use.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no
    /// longer available for your use.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>pending</code> - The Capacity Reservation request was successful but the capacity
    /// provisioning is still pending.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>failed</code> - The Capacity Reservation request has failed. A request might fail
    /// due to invalid request parameters, capacity constraints, or instance limit constraints.
    /// Failed requests are retained for 60 minutes.</p>
    /// </li>
    /// </ul>
    pub state: std::option::Option<crate::model::CapacityReservationState>,
    /// <p>Information about the Capacity Reservation usage.</p>
    pub instance_usages: std::option::Option<std::vec::Vec<crate::model::InstanceUsage>>,
}
impl std::fmt::Debug for GetCapacityReservationUsageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCapacityReservationUsageOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("capacity_reservation_id", &self.capacity_reservation_id);
        formatter.field("instance_type", &self.instance_type);
        formatter.field("total_instance_count", &self.total_instance_count);
        formatter.field("available_instance_count", &self.available_instance_count);
        formatter.field("state", &self.state);
        formatter.field("instance_usages", &self.instance_usages);
        formatter.finish()
    }
}
/// See [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput)
pub mod get_capacity_reservation_usage_output {
    /// A builder for [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) capacity_reservation_id: std::option::Option<std::string::String>,
        pub(crate) instance_type: std::option::Option<std::string::String>,
        pub(crate) total_instance_count: std::option::Option<i32>,
        pub(crate) available_instance_count: std::option::Option<i32>,
        pub(crate) state: std::option::Option<crate::model::CapacityReservationState>,
        pub(crate) instance_usages: std::option::Option<std::vec::Vec<crate::model::InstanceUsage>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// <p>The ID of the Capacity Reservation.</p>
        pub fn capacity_reservation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.capacity_reservation_id = Some(inp.into());
            self
        }
        pub fn set_capacity_reservation_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.capacity_reservation_id = inp;
            self
        }
        /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
        pub fn instance_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_type = Some(inp.into());
            self
        }
        pub fn set_instance_type(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_type = inp;
            self
        }
        /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
        pub fn total_instance_count(mut self, inp: i32) -> Self {
            self.total_instance_count = Some(inp);
            self
        }
        pub fn set_total_instance_count(mut self, inp: std::option::Option<i32>) -> Self {
            self.total_instance_count = inp;
            self
        }
        /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
        pub fn available_instance_count(mut self, inp: i32) -> Self {
            self.available_instance_count = Some(inp);
            self
        }
        pub fn set_available_instance_count(mut self, inp: std::option::Option<i32>) -> Self {
            self.available_instance_count = inp;
            self
        }
        /// <p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified
        /// in your request. The reserved capacity is no longer available for your use.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cancelled</code> - The Capacity Reservation was cancelled. The reserved capacity is no
        /// longer available for your use.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>pending</code> - The Capacity Reservation request was successful but the capacity
        /// provisioning is still pending.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>failed</code> - The Capacity Reservation request has failed. A request might fail
        /// due to invalid request parameters, capacity constraints, or instance limit constraints.
        /// Failed requests are retained for 60 minutes.</p>
        /// </li>
        /// </ul>
        pub fn state(mut self, inp: crate::model::CapacityReservationState) -> Self {
            self.state = Some(inp);
            self
        }
        pub fn set_state(
            mut self,
            inp: std::option::Option<crate::model::CapacityReservationState>,
        ) -> Self {
            self.state = inp;
            self
        }
        pub fn instance_usages(mut self, inp: impl Into<crate::model::InstanceUsage>) -> Self {
            let mut v = self.instance_usages.unwrap_or_default();
            v.push(inp.into());
            self.instance_usages = Some(v);
            self
        }
        pub fn set_instance_usages(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceUsage>>,
        ) -> Self {
            self.instance_usages = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput)
        pub fn build(self) -> crate::output::GetCapacityReservationUsageOutput {
            crate::output::GetCapacityReservationUsageOutput {
                next_token: self.next_token,
                capacity_reservation_id: self.capacity_reservation_id,
                instance_type: self.instance_type,
                total_instance_count: self.total_instance_count,
                available_instance_count: self.available_instance_count,
                state: self.state,
                instance_usages: self.instance_usages,
            }
        }
    }
}
impl GetCapacityReservationUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetCapacityReservationUsageOutput`](crate::output::GetCapacityReservationUsageOutput)
    pub fn builder() -> crate::output::get_capacity_reservation_usage_output::Builder {
        crate::output::get_capacity_reservation_usage_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAssociatedIpv6PoolCidrsOutput {
    /// <p>Information about the IPv6 CIDR block associations.</p>
    pub ipv6_cidr_associations:
        std::option::Option<std::vec::Vec<crate::model::Ipv6CidrAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetAssociatedIpv6PoolCidrsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAssociatedIpv6PoolCidrsOutput");
        formatter.field("ipv6_cidr_associations", &self.ipv6_cidr_associations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput)
pub mod get_associated_ipv6_pool_cidrs_output {
    /// A builder for [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_associations:
            std::option::Option<std::vec::Vec<crate::model::Ipv6CidrAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn ipv6_cidr_associations(
            mut self,
            inp: impl Into<crate::model::Ipv6CidrAssociation>,
        ) -> Self {
            let mut v = self.ipv6_cidr_associations.unwrap_or_default();
            v.push(inp.into());
            self.ipv6_cidr_associations = Some(v);
            self
        }
        pub fn set_ipv6_cidr_associations(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Ipv6CidrAssociation>>,
        ) -> Self {
            self.ipv6_cidr_associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput)
        pub fn build(self) -> crate::output::GetAssociatedIpv6PoolCidrsOutput {
            crate::output::GetAssociatedIpv6PoolCidrsOutput {
                ipv6_cidr_associations: self.ipv6_cidr_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl GetAssociatedIpv6PoolCidrsOutput {
    /// Creates a new builder-style object to manufacture [`GetAssociatedIpv6PoolCidrsOutput`](crate::output::GetAssociatedIpv6PoolCidrsOutput)
    pub fn builder() -> crate::output::get_associated_ipv6_pool_cidrs_output::Builder {
        crate::output::get_associated_ipv6_pool_cidrs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAssociatedEnclaveCertificateIamRolesOutput {
    /// <p>Information about the associated IAM roles.</p>
    pub associated_roles: std::option::Option<std::vec::Vec<crate::model::AssociatedRole>>,
}
impl std::fmt::Debug for GetAssociatedEnclaveCertificateIamRolesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAssociatedEnclaveCertificateIamRolesOutput");
        formatter.field("associated_roles", &self.associated_roles);
        formatter.finish()
    }
}
/// See [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput)
pub mod get_associated_enclave_certificate_iam_roles_output {
    /// A builder for [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associated_roles:
            std::option::Option<std::vec::Vec<crate::model::AssociatedRole>>,
    }
    impl Builder {
        pub fn associated_roles(mut self, inp: impl Into<crate::model::AssociatedRole>) -> Self {
            let mut v = self.associated_roles.unwrap_or_default();
            v.push(inp.into());
            self.associated_roles = Some(v);
            self
        }
        pub fn set_associated_roles(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AssociatedRole>>,
        ) -> Self {
            self.associated_roles = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput)
        pub fn build(self) -> crate::output::GetAssociatedEnclaveCertificateIamRolesOutput {
            crate::output::GetAssociatedEnclaveCertificateIamRolesOutput {
                associated_roles: self.associated_roles,
            }
        }
    }
}
impl GetAssociatedEnclaveCertificateIamRolesOutput {
    /// Creates a new builder-style object to manufacture [`GetAssociatedEnclaveCertificateIamRolesOutput`](crate::output::GetAssociatedEnclaveCertificateIamRolesOutput)
    pub fn builder() -> crate::output::get_associated_enclave_certificate_iam_roles_output::Builder
    {
        crate::output::get_associated_enclave_certificate_iam_roles_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportTransitGatewayRoutesOutput {
    /// <p>The URL of the exported file in Amazon S3. For example,
    /// s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
    pub s3_location: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ExportTransitGatewayRoutesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExportTransitGatewayRoutesOutput");
        formatter.field("s3_location", &self.s3_location);
        formatter.finish()
    }
}
/// See [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput)
pub mod export_transit_gateway_routes_output {
    /// A builder for [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_location: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The URL of the exported file in Amazon S3. For example,
        /// s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
        pub fn s3_location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.s3_location = Some(inp.into());
            self
        }
        pub fn set_s3_location(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.s3_location = inp;
            self
        }
        /// Consumes the builder and constructs a [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput)
        pub fn build(self) -> crate::output::ExportTransitGatewayRoutesOutput {
            crate::output::ExportTransitGatewayRoutesOutput {
                s3_location: self.s3_location,
            }
        }
    }
}
impl ExportTransitGatewayRoutesOutput {
    /// Creates a new builder-style object to manufacture [`ExportTransitGatewayRoutesOutput`](crate::output::ExportTransitGatewayRoutesOutput)
    pub fn builder() -> crate::output::export_transit_gateway_routes_output::Builder {
        crate::output::export_transit_gateway_routes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportImageOutput {
    /// <p>A description of the image being exported.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The disk image format for the exported image.</p>
    pub disk_image_format: std::option::Option<crate::model::DiskImageFormat>,
    /// <p>The ID of the export image task.</p>
    pub export_image_task_id: std::option::Option<std::string::String>,
    /// <p>The ID of the image.</p>
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The name of the role that grants VM Import/Export permission to export images to your Amazon
    /// S3 bucket.</p>
    pub role_name: std::option::Option<std::string::String>,
    /// <p>The percent complete of the export image task.</p>
    pub progress: std::option::Option<std::string::String>,
    /// <p>Information about the destination Amazon S3 bucket.</p>
    pub s3_export_location: std::option::Option<crate::model::ExportTaskS3Location>,
    /// <p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>,
    /// <code>deleting</code>, and <code>deleted</code>.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>The status message for the export image task.</p>
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Any tags assigned to the export image task.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ExportImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExportImageOutput");
        formatter.field("description", &self.description);
        formatter.field("disk_image_format", &self.disk_image_format);
        formatter.field("export_image_task_id", &self.export_image_task_id);
        formatter.field("image_id", &self.image_id);
        formatter.field("role_name", &self.role_name);
        formatter.field("progress", &self.progress);
        formatter.field("s3_export_location", &self.s3_export_location);
        formatter.field("status", &self.status);
        formatter.field("status_message", &self.status_message);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ExportImageOutput`](crate::output::ExportImageOutput)
pub mod export_image_output {
    /// A builder for [`ExportImageOutput`](crate::output::ExportImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) disk_image_format: std::option::Option<crate::model::DiskImageFormat>,
        pub(crate) export_image_task_id: std::option::Option<std::string::String>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) role_name: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) s3_export_location: std::option::Option<crate::model::ExportTaskS3Location>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>A description of the image being exported.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.description = inp;
            self
        }
        /// <p>The disk image format for the exported image.</p>
        pub fn disk_image_format(mut self, inp: crate::model::DiskImageFormat) -> Self {
            self.disk_image_format = Some(inp);
            self
        }
        pub fn set_disk_image_format(
            mut self,
            inp: std::option::Option<crate::model::DiskImageFormat>,
        ) -> Self {
            self.disk_image_format = inp;
            self
        }
        /// <p>The ID of the export image task.</p>
        pub fn export_image_task_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.export_image_task_id = Some(inp.into());
            self
        }
        pub fn set_export_image_task_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_image_task_id = inp;
            self
        }
        /// <p>The ID of the image.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        /// <p>The name of the role that grants VM Import/Export permission to export images to your Amazon
        /// S3 bucket.</p>
        pub fn role_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.role_name = Some(inp.into());
            self
        }
        pub fn set_role_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.role_name = inp;
            self
        }
        /// <p>The percent complete of the export image task.</p>
        pub fn progress(mut self, inp: impl Into<std::string::String>) -> Self {
            self.progress = Some(inp.into());
            self
        }
        pub fn set_progress(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.progress = inp;
            self
        }
        /// <p>Information about the destination Amazon S3 bucket.</p>
        pub fn s3_export_location(mut self, inp: crate::model::ExportTaskS3Location) -> Self {
            self.s3_export_location = Some(inp);
            self
        }
        pub fn set_s3_export_location(
            mut self,
            inp: std::option::Option<crate::model::ExportTaskS3Location>,
        ) -> Self {
            self.s3_export_location = inp;
            self
        }
        /// <p>The status of the export image task. The possible values are <code>active</code>, <code>completed</code>,
        /// <code>deleting</code>, and <code>deleted</code>.</p>
        pub fn status(mut self, inp: impl Into<std::string::String>) -> Self {
            self.status = Some(inp.into());
            self
        }
        pub fn set_status(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.status = inp;
            self
        }
        /// <p>The status message for the export image task.</p>
        pub fn status_message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.status_message = Some(inp.into());
            self
        }
        pub fn set_status_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.status_message = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`ExportImageOutput`](crate::output::ExportImageOutput)
        pub fn build(self) -> crate::output::ExportImageOutput {
            crate::output::ExportImageOutput {
                description: self.description,
                disk_image_format: self.disk_image_format,
                export_image_task_id: self.export_image_task_id,
                image_id: self.image_id,
                role_name: self.role_name,
                progress: self.progress,
                s3_export_location: self.s3_export_location,
                status: self.status,
                status_message: self.status_message,
                tags: self.tags,
            }
        }
    }
}
impl ExportImageOutput {
    /// Creates a new builder-style object to manufacture [`ExportImageOutput`](crate::output::ExportImageOutput)
    pub fn builder() -> crate::output::export_image_output::Builder {
        crate::output::export_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportClientVpnClientConfigurationOutput {
    /// <p>The contents of the Client VPN endpoint configuration file.</p>
    pub client_configuration: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ExportClientVpnClientConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExportClientVpnClientConfigurationOutput");
        formatter.field("client_configuration", &self.client_configuration);
        formatter.finish()
    }
}
/// See [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput)
pub mod export_client_vpn_client_configuration_output {
    /// A builder for [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_configuration: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The contents of the Client VPN endpoint configuration file.</p>
        pub fn client_configuration(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_configuration = Some(inp.into());
            self
        }
        pub fn set_client_configuration(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.client_configuration = inp;
            self
        }
        /// Consumes the builder and constructs a [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput)
        pub fn build(self) -> crate::output::ExportClientVpnClientConfigurationOutput {
            crate::output::ExportClientVpnClientConfigurationOutput {
                client_configuration: self.client_configuration,
            }
        }
    }
}
impl ExportClientVpnClientConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ExportClientVpnClientConfigurationOutput`](crate::output::ExportClientVpnClientConfigurationOutput)
    pub fn builder() -> crate::output::export_client_vpn_client_configuration_output::Builder {
        crate::output::export_client_vpn_client_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportClientVpnClientCertificateRevocationListOutput {
    /// <p>Information about the client certificate revocation list.</p>
    pub certificate_revocation_list: std::option::Option<std::string::String>,
    /// <p>The current state of the client certificate revocation list.</p>
    pub status: std::option::Option<crate::model::ClientCertificateRevocationListStatus>,
}
impl std::fmt::Debug for ExportClientVpnClientCertificateRevocationListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExportClientVpnClientCertificateRevocationListOutput");
        formatter.field(
            "certificate_revocation_list",
            &self.certificate_revocation_list,
        );
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput)
pub mod export_client_vpn_client_certificate_revocation_list_output {
    /// A builder for [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_revocation_list: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ClientCertificateRevocationListStatus>,
    }
    impl Builder {
        /// <p>Information about the client certificate revocation list.</p>
        pub fn certificate_revocation_list(mut self, inp: impl Into<std::string::String>) -> Self {
            self.certificate_revocation_list = Some(inp.into());
            self
        }
        pub fn set_certificate_revocation_list(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_revocation_list = inp;
            self
        }
        /// <p>The current state of the client certificate revocation list.</p>
        pub fn status(mut self, inp: crate::model::ClientCertificateRevocationListStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientCertificateRevocationListStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput)
        pub fn build(self) -> crate::output::ExportClientVpnClientCertificateRevocationListOutput {
            crate::output::ExportClientVpnClientCertificateRevocationListOutput {
                certificate_revocation_list: self.certificate_revocation_list,
                status: self.status,
            }
        }
    }
}
impl ExportClientVpnClientCertificateRevocationListOutput {
    /// Creates a new builder-style object to manufacture [`ExportClientVpnClientCertificateRevocationListOutput`](crate::output::ExportClientVpnClientCertificateRevocationListOutput)
    pub fn builder(
    ) -> crate::output::export_client_vpn_client_certificate_revocation_list_output::Builder {
        crate::output::export_client_vpn_client_certificate_revocation_list_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableVpcClassicLinkDnsSupportOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for EnableVpcClassicLinkDnsSupportOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableVpcClassicLinkDnsSupportOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput)
pub mod enable_vpc_classic_link_dns_support_output {
    /// A builder for [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput)
        pub fn build(self) -> crate::output::EnableVpcClassicLinkDnsSupportOutput {
            crate::output::EnableVpcClassicLinkDnsSupportOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl EnableVpcClassicLinkDnsSupportOutput {
    /// Creates a new builder-style object to manufacture [`EnableVpcClassicLinkDnsSupportOutput`](crate::output::EnableVpcClassicLinkDnsSupportOutput)
    pub fn builder() -> crate::output::enable_vpc_classic_link_dns_support_output::Builder {
        crate::output::enable_vpc_classic_link_dns_support_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableVpcClassicLinkOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for EnableVpcClassicLinkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableVpcClassicLinkOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput)
pub mod enable_vpc_classic_link_output {
    /// A builder for [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput)
        pub fn build(self) -> crate::output::EnableVpcClassicLinkOutput {
            crate::output::EnableVpcClassicLinkOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl EnableVpcClassicLinkOutput {
    /// Creates a new builder-style object to manufacture [`EnableVpcClassicLinkOutput`](crate::output::EnableVpcClassicLinkOutput)
    pub fn builder() -> crate::output::enable_vpc_classic_link_output::Builder {
        crate::output::enable_vpc_classic_link_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableVolumeIOOutput {}
impl std::fmt::Debug for EnableVolumeIOOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableVolumeIOOutput");
        formatter.finish()
    }
}
/// See [`EnableVolumeIOOutput`](crate::output::EnableVolumeIOOutput)
pub mod enable_volume_io_output {
    /// A builder for [`EnableVolumeIOOutput`](crate::output::EnableVolumeIOOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableVolumeIOOutput`](crate::output::EnableVolumeIOOutput)
        pub fn build(self) -> crate::output::EnableVolumeIOOutput {
            crate::output::EnableVolumeIOOutput {}
        }
    }
}
impl EnableVolumeIOOutput {
    /// Creates a new builder-style object to manufacture [`EnableVolumeIOOutput`](crate::output::EnableVolumeIOOutput)
    pub fn builder() -> crate::output::enable_volume_io_output::Builder {
        crate::output::enable_volume_io_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableVgwRoutePropagationOutput {}
impl std::fmt::Debug for EnableVgwRoutePropagationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableVgwRoutePropagationOutput");
        formatter.finish()
    }
}
/// See [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput)
pub mod enable_vgw_route_propagation_output {
    /// A builder for [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput)
        pub fn build(self) -> crate::output::EnableVgwRoutePropagationOutput {
            crate::output::EnableVgwRoutePropagationOutput {}
        }
    }
}
impl EnableVgwRoutePropagationOutput {
    /// Creates a new builder-style object to manufacture [`EnableVgwRoutePropagationOutput`](crate::output::EnableVgwRoutePropagationOutput)
    pub fn builder() -> crate::output::enable_vgw_route_propagation_output::Builder {
        crate::output::enable_vgw_route_propagation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableTransitGatewayRouteTablePropagationOutput {
    /// <p>Information about route propagation.</p>
    pub propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
}
impl std::fmt::Debug for EnableTransitGatewayRouteTablePropagationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableTransitGatewayRouteTablePropagationOutput");
        formatter.field("propagation", &self.propagation);
        formatter.finish()
    }
}
/// See [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput)
pub mod enable_transit_gateway_route_table_propagation_output {
    /// A builder for [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
    }
    impl Builder {
        /// <p>Information about route propagation.</p>
        pub fn propagation(mut self, inp: crate::model::TransitGatewayPropagation) -> Self {
            self.propagation = Some(inp);
            self
        }
        pub fn set_propagation(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPropagation>,
        ) -> Self {
            self.propagation = inp;
            self
        }
        /// Consumes the builder and constructs a [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput)
        pub fn build(self) -> crate::output::EnableTransitGatewayRouteTablePropagationOutput {
            crate::output::EnableTransitGatewayRouteTablePropagationOutput {
                propagation: self.propagation,
            }
        }
    }
}
impl EnableTransitGatewayRouteTablePropagationOutput {
    /// Creates a new builder-style object to manufacture [`EnableTransitGatewayRouteTablePropagationOutput`](crate::output::EnableTransitGatewayRouteTablePropagationOutput)
    pub fn builder() -> crate::output::enable_transit_gateway_route_table_propagation_output::Builder
    {
        crate::output::enable_transit_gateway_route_table_propagation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableSerialConsoleAccessOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
    /// your account. If <code>false</code>, access to the EC2 serial console of all instances
    /// is disabled for your account.</p>
    pub serial_console_access_enabled: std::option::Option<bool>,
}
impl std::fmt::Debug for EnableSerialConsoleAccessOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableSerialConsoleAccessOutput");
        formatter.field(
            "serial_console_access_enabled",
            &self.serial_console_access_enabled,
        );
        formatter.finish()
    }
}
/// See [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput)
pub mod enable_serial_console_access_output {
    /// A builder for [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) serial_console_access_enabled: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
        /// your account. If <code>false</code>, access to the EC2 serial console of all instances
        /// is disabled for your account.</p>
        pub fn serial_console_access_enabled(mut self, inp: bool) -> Self {
            self.serial_console_access_enabled = Some(inp);
            self
        }
        pub fn set_serial_console_access_enabled(mut self, inp: std::option::Option<bool>) -> Self {
            self.serial_console_access_enabled = inp;
            self
        }
        /// Consumes the builder and constructs a [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput)
        pub fn build(self) -> crate::output::EnableSerialConsoleAccessOutput {
            crate::output::EnableSerialConsoleAccessOutput {
                serial_console_access_enabled: self.serial_console_access_enabled,
            }
        }
    }
}
impl EnableSerialConsoleAccessOutput {
    /// Creates a new builder-style object to manufacture [`EnableSerialConsoleAccessOutput`](crate::output::EnableSerialConsoleAccessOutput)
    pub fn builder() -> crate::output::enable_serial_console_access_output::Builder {
        crate::output::enable_serial_console_access_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableFastSnapshotRestoresOutput {
    /// <p>Information about the snapshots for which fast snapshot restores were successfully enabled.</p>
    pub successful:
        std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>>,
    /// <p>Information about the snapshots for which fast snapshot restores could not be enabled.</p>
    pub unsuccessful:
        std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>>,
}
impl std::fmt::Debug for EnableFastSnapshotRestoresOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableFastSnapshotRestoresOutput");
        formatter.field("successful", &self.successful);
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput)
pub mod enable_fast_snapshot_restores_output {
    /// A builder for [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful:
            std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>>,
        pub(crate) unsuccessful:
            std::option::Option<std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>>,
    }
    impl Builder {
        pub fn successful(
            mut self,
            inp: impl Into<crate::model::EnableFastSnapshotRestoreSuccessItem>,
        ) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(inp.into());
            self.successful = Some(v);
            self
        }
        pub fn set_successful(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::EnableFastSnapshotRestoreSuccessItem>,
            >,
        ) -> Self {
            self.successful = inp;
            self
        }
        pub fn unsuccessful(
            mut self,
            inp: impl Into<crate::model::EnableFastSnapshotRestoreErrorItem>,
        ) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::EnableFastSnapshotRestoreErrorItem>,
            >,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput)
        pub fn build(self) -> crate::output::EnableFastSnapshotRestoresOutput {
            crate::output::EnableFastSnapshotRestoresOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl EnableFastSnapshotRestoresOutput {
    /// Creates a new builder-style object to manufacture [`EnableFastSnapshotRestoresOutput`](crate::output::EnableFastSnapshotRestoresOutput)
    pub fn builder() -> crate::output::enable_fast_snapshot_restores_output::Builder {
        crate::output::enable_fast_snapshot_restores_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableEbsEncryptionByDefaultOutput {
    /// <p>The updated status of encryption by default.</p>
    pub ebs_encryption_by_default: std::option::Option<bool>,
}
impl std::fmt::Debug for EnableEbsEncryptionByDefaultOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableEbsEncryptionByDefaultOutput");
        formatter.field("ebs_encryption_by_default", &self.ebs_encryption_by_default);
        formatter.finish()
    }
}
/// See [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput)
pub mod enable_ebs_encryption_by_default_output {
    /// A builder for [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ebs_encryption_by_default: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The updated status of encryption by default.</p>
        pub fn ebs_encryption_by_default(mut self, inp: bool) -> Self {
            self.ebs_encryption_by_default = Some(inp);
            self
        }
        pub fn set_ebs_encryption_by_default(mut self, inp: std::option::Option<bool>) -> Self {
            self.ebs_encryption_by_default = inp;
            self
        }
        /// Consumes the builder and constructs a [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput)
        pub fn build(self) -> crate::output::EnableEbsEncryptionByDefaultOutput {
            crate::output::EnableEbsEncryptionByDefaultOutput {
                ebs_encryption_by_default: self.ebs_encryption_by_default,
            }
        }
    }
}
impl EnableEbsEncryptionByDefaultOutput {
    /// Creates a new builder-style object to manufacture [`EnableEbsEncryptionByDefaultOutput`](crate::output::EnableEbsEncryptionByDefaultOutput)
    pub fn builder() -> crate::output::enable_ebs_encryption_by_default_output::Builder {
        crate::output::enable_ebs_encryption_by_default_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateVpcCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv6_cidr_block_association: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
    /// <p>Information about the IPv4 CIDR block association.</p>
    pub cidr_block_association: std::option::Option<crate::model::VpcCidrBlockAssociation>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DisassociateVpcCidrBlockOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateVpcCidrBlockOutput");
        formatter.field(
            "ipv6_cidr_block_association",
            &self.ipv6_cidr_block_association,
        );
        formatter.field("cidr_block_association", &self.cidr_block_association);
        formatter.field("vpc_id", &self.vpc_id);
        formatter.finish()
    }
}
/// See [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput)
pub mod disassociate_vpc_cidr_block_output {
    /// A builder for [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        pub(crate) cidr_block_association:
            std::option::Option<crate::model::VpcCidrBlockAssociation>,
        pub(crate) vpc_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            inp: crate::model::VpcIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(inp);
            self
        }
        pub fn set_ipv6_cidr_block_association(
            mut self,
            inp: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = inp;
            self
        }
        /// <p>Information about the IPv4 CIDR block association.</p>
        pub fn cidr_block_association(
            mut self,
            inp: crate::model::VpcCidrBlockAssociation,
        ) -> Self {
            self.cidr_block_association = Some(inp);
            self
        }
        pub fn set_cidr_block_association(
            mut self,
            inp: std::option::Option<crate::model::VpcCidrBlockAssociation>,
        ) -> Self {
            self.cidr_block_association = inp;
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn vpc_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(inp.into());
            self
        }
        pub fn set_vpc_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput)
        pub fn build(self) -> crate::output::DisassociateVpcCidrBlockOutput {
            crate::output::DisassociateVpcCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                cidr_block_association: self.cidr_block_association,
                vpc_id: self.vpc_id,
            }
        }
    }
}
impl DisassociateVpcCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateVpcCidrBlockOutput`](crate::output::DisassociateVpcCidrBlockOutput)
    pub fn builder() -> crate::output::disassociate_vpc_cidr_block_output::Builder {
        crate::output::disassociate_vpc_cidr_block_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateTransitGatewayRouteTableOutput {
    /// <p>Information about the association.</p>
    pub association: std::option::Option<crate::model::TransitGatewayAssociation>,
}
impl std::fmt::Debug for DisassociateTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateTransitGatewayRouteTableOutput");
        formatter.field("association", &self.association);
        formatter.finish()
    }
}
/// See [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput)
pub mod disassociate_transit_gateway_route_table_output {
    /// A builder for [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association: std::option::Option<crate::model::TransitGatewayAssociation>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn association(mut self, inp: crate::model::TransitGatewayAssociation) -> Self {
            self.association = Some(inp);
            self
        }
        pub fn set_association(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayAssociation>,
        ) -> Self {
            self.association = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput)
        pub fn build(self) -> crate::output::DisassociateTransitGatewayRouteTableOutput {
            crate::output::DisassociateTransitGatewayRouteTableOutput {
                association: self.association,
            }
        }
    }
}
impl DisassociateTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayRouteTableOutput`](crate::output::DisassociateTransitGatewayRouteTableOutput)
    pub fn builder() -> crate::output::disassociate_transit_gateway_route_table_output::Builder {
        crate::output::disassociate_transit_gateway_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the association.</p>
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
}
impl std::fmt::Debug for DisassociateTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateTransitGatewayMulticastDomainOutput");
        formatter.field("associations", &self.associations);
        formatter.finish()
    }
}
/// See [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput)
pub mod disassociate_transit_gateway_multicast_domain_output {
    /// A builder for [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn associations(
            mut self,
            inp: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(inp);
            self
        }
        pub fn set_associations(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput)
        pub fn build(self) -> crate::output::DisassociateTransitGatewayMulticastDomainOutput {
            crate::output::DisassociateTransitGatewayMulticastDomainOutput {
                associations: self.associations,
            }
        }
    }
}
impl DisassociateTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTransitGatewayMulticastDomainOutput`](crate::output::DisassociateTransitGatewayMulticastDomainOutput)
    pub fn builder() -> crate::output::disassociate_transit_gateway_multicast_domain_output::Builder
    {
        crate::output::disassociate_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateSubnetCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv6_cidr_block_association:
        std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DisassociateSubnetCidrBlockOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateSubnetCidrBlockOutput");
        formatter.field(
            "ipv6_cidr_block_association",
            &self.ipv6_cidr_block_association,
        );
        formatter.field("subnet_id", &self.subnet_id);
        formatter.finish()
    }
}
/// See [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput)
pub mod disassociate_subnet_cidr_block_output {
    /// A builder for [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        pub(crate) subnet_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            inp: crate::model::SubnetIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(inp);
            self
        }
        pub fn set_ipv6_cidr_block_association(
            mut self,
            inp: std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = inp;
            self
        }
        /// <p>The ID of the subnet.</p>
        pub fn subnet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.subnet_id = Some(inp.into());
            self
        }
        pub fn set_subnet_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.subnet_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput)
        pub fn build(self) -> crate::output::DisassociateSubnetCidrBlockOutput {
            crate::output::DisassociateSubnetCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                subnet_id: self.subnet_id,
            }
        }
    }
}
impl DisassociateSubnetCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateSubnetCidrBlockOutput`](crate::output::DisassociateSubnetCidrBlockOutput)
    pub fn builder() -> crate::output::disassociate_subnet_cidr_block_output::Builder {
        crate::output::disassociate_subnet_cidr_block_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateRouteTableOutput {}
impl std::fmt::Debug for DisassociateRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateRouteTableOutput");
        formatter.finish()
    }
}
/// See [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput)
pub mod disassociate_route_table_output {
    /// A builder for [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput)
        pub fn build(self) -> crate::output::DisassociateRouteTableOutput {
            crate::output::DisassociateRouteTableOutput {}
        }
    }
}
impl DisassociateRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateRouteTableOutput`](crate::output::DisassociateRouteTableOutput)
    pub fn builder() -> crate::output::disassociate_route_table_output::Builder {
        crate::output::disassociate_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateIamInstanceProfileOutput {
    /// <p>Information about the IAM instance profile association.</p>
    pub iam_instance_profile_association:
        std::option::Option<crate::model::IamInstanceProfileAssociation>,
}
impl std::fmt::Debug for DisassociateIamInstanceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateIamInstanceProfileOutput");
        formatter.field(
            "iam_instance_profile_association",
            &self.iam_instance_profile_association,
        );
        formatter.finish()
    }
}
/// See [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput)
pub mod disassociate_iam_instance_profile_output {
    /// A builder for [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_association:
            std::option::Option<crate::model::IamInstanceProfileAssociation>,
    }
    impl Builder {
        /// <p>Information about the IAM instance profile association.</p>
        pub fn iam_instance_profile_association(
            mut self,
            inp: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            self.iam_instance_profile_association = Some(inp);
            self
        }
        pub fn set_iam_instance_profile_association(
            mut self,
            inp: std::option::Option<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            self.iam_instance_profile_association = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput)
        pub fn build(self) -> crate::output::DisassociateIamInstanceProfileOutput {
            crate::output::DisassociateIamInstanceProfileOutput {
                iam_instance_profile_association: self.iam_instance_profile_association,
            }
        }
    }
}
impl DisassociateIamInstanceProfileOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateIamInstanceProfileOutput`](crate::output::DisassociateIamInstanceProfileOutput)
    pub fn builder() -> crate::output::disassociate_iam_instance_profile_output::Builder {
        crate::output::disassociate_iam_instance_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateEnclaveCertificateIamRoleOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DisassociateEnclaveCertificateIamRoleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateEnclaveCertificateIamRoleOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput)
pub mod disassociate_enclave_certificate_iam_role_output {
    /// A builder for [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput)
        pub fn build(self) -> crate::output::DisassociateEnclaveCertificateIamRoleOutput {
            crate::output::DisassociateEnclaveCertificateIamRoleOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DisassociateEnclaveCertificateIamRoleOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateEnclaveCertificateIamRoleOutput`](crate::output::DisassociateEnclaveCertificateIamRoleOutput)
    pub fn builder() -> crate::output::disassociate_enclave_certificate_iam_role_output::Builder {
        crate::output::disassociate_enclave_certificate_iam_role_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateClientVpnTargetNetworkOutput {
    /// <p>The ID of the target network association.</p>
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The current state of the target network association.</p>
    pub status: std::option::Option<crate::model::AssociationStatus>,
}
impl std::fmt::Debug for DisassociateClientVpnTargetNetworkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateClientVpnTargetNetworkOutput");
        formatter.field("association_id", &self.association_id);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput)
pub mod disassociate_client_vpn_target_network_output {
    /// A builder for [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::AssociationStatus>,
    }
    impl Builder {
        /// <p>The ID of the target network association.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.association_id = Some(inp.into());
            self
        }
        pub fn set_association_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.association_id = inp;
            self
        }
        /// <p>The current state of the target network association.</p>
        pub fn status(mut self, inp: crate::model::AssociationStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::AssociationStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput)
        pub fn build(self) -> crate::output::DisassociateClientVpnTargetNetworkOutput {
            crate::output::DisassociateClientVpnTargetNetworkOutput {
                association_id: self.association_id,
                status: self.status,
            }
        }
    }
}
impl DisassociateClientVpnTargetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateClientVpnTargetNetworkOutput`](crate::output::DisassociateClientVpnTargetNetworkOutput)
    pub fn builder() -> crate::output::disassociate_client_vpn_target_network_output::Builder {
        crate::output::disassociate_client_vpn_target_network_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateAddressOutput {}
impl std::fmt::Debug for DisassociateAddressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateAddressOutput");
        formatter.finish()
    }
}
/// See [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput)
pub mod disassociate_address_output {
    /// A builder for [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput)
        pub fn build(self) -> crate::output::DisassociateAddressOutput {
            crate::output::DisassociateAddressOutput {}
        }
    }
}
impl DisassociateAddressOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateAddressOutput`](crate::output::DisassociateAddressOutput)
    pub fn builder() -> crate::output::disassociate_address_output::Builder {
        crate::output::disassociate_address_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableVpcClassicLinkDnsSupportOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DisableVpcClassicLinkDnsSupportOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableVpcClassicLinkDnsSupportOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput)
pub mod disable_vpc_classic_link_dns_support_output {
    /// A builder for [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput)
        pub fn build(self) -> crate::output::DisableVpcClassicLinkDnsSupportOutput {
            crate::output::DisableVpcClassicLinkDnsSupportOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DisableVpcClassicLinkDnsSupportOutput {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkDnsSupportOutput`](crate::output::DisableVpcClassicLinkDnsSupportOutput)
    pub fn builder() -> crate::output::disable_vpc_classic_link_dns_support_output::Builder {
        crate::output::disable_vpc_classic_link_dns_support_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableVpcClassicLinkOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DisableVpcClassicLinkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableVpcClassicLinkOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput)
pub mod disable_vpc_classic_link_output {
    /// A builder for [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput)
        pub fn build(self) -> crate::output::DisableVpcClassicLinkOutput {
            crate::output::DisableVpcClassicLinkOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DisableVpcClassicLinkOutput {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkOutput`](crate::output::DisableVpcClassicLinkOutput)
    pub fn builder() -> crate::output::disable_vpc_classic_link_output::Builder {
        crate::output::disable_vpc_classic_link_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableVgwRoutePropagationOutput {}
impl std::fmt::Debug for DisableVgwRoutePropagationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableVgwRoutePropagationOutput");
        formatter.finish()
    }
}
/// See [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput)
pub mod disable_vgw_route_propagation_output {
    /// A builder for [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput)
        pub fn build(self) -> crate::output::DisableVgwRoutePropagationOutput {
            crate::output::DisableVgwRoutePropagationOutput {}
        }
    }
}
impl DisableVgwRoutePropagationOutput {
    /// Creates a new builder-style object to manufacture [`DisableVgwRoutePropagationOutput`](crate::output::DisableVgwRoutePropagationOutput)
    pub fn builder() -> crate::output::disable_vgw_route_propagation_output::Builder {
        crate::output::disable_vgw_route_propagation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableTransitGatewayRouteTablePropagationOutput {
    /// <p>Information about route propagation.</p>
    pub propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
}
impl std::fmt::Debug for DisableTransitGatewayRouteTablePropagationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableTransitGatewayRouteTablePropagationOutput");
        formatter.field("propagation", &self.propagation);
        formatter.finish()
    }
}
/// See [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput)
pub mod disable_transit_gateway_route_table_propagation_output {
    /// A builder for [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) propagation: std::option::Option<crate::model::TransitGatewayPropagation>,
    }
    impl Builder {
        /// <p>Information about route propagation.</p>
        pub fn propagation(mut self, inp: crate::model::TransitGatewayPropagation) -> Self {
            self.propagation = Some(inp);
            self
        }
        pub fn set_propagation(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPropagation>,
        ) -> Self {
            self.propagation = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput)
        pub fn build(self) -> crate::output::DisableTransitGatewayRouteTablePropagationOutput {
            crate::output::DisableTransitGatewayRouteTablePropagationOutput {
                propagation: self.propagation,
            }
        }
    }
}
impl DisableTransitGatewayRouteTablePropagationOutput {
    /// Creates a new builder-style object to manufacture [`DisableTransitGatewayRouteTablePropagationOutput`](crate::output::DisableTransitGatewayRouteTablePropagationOutput)
    pub fn builder(
    ) -> crate::output::disable_transit_gateway_route_table_propagation_output::Builder {
        crate::output::disable_transit_gateway_route_table_propagation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableSerialConsoleAccessOutput {
    /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
    /// your account. If <code>false</code>, access to the EC2 serial console of all instances
    /// is disabled for your account.</p>
    pub serial_console_access_enabled: std::option::Option<bool>,
}
impl std::fmt::Debug for DisableSerialConsoleAccessOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableSerialConsoleAccessOutput");
        formatter.field(
            "serial_console_access_enabled",
            &self.serial_console_access_enabled,
        );
        formatter.finish()
    }
}
/// See [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput)
pub mod disable_serial_console_access_output {
    /// A builder for [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) serial_console_access_enabled: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>If <code>true</code>, access to the EC2 serial console of all instances is enabled for
        /// your account. If <code>false</code>, access to the EC2 serial console of all instances
        /// is disabled for your account.</p>
        pub fn serial_console_access_enabled(mut self, inp: bool) -> Self {
            self.serial_console_access_enabled = Some(inp);
            self
        }
        pub fn set_serial_console_access_enabled(mut self, inp: std::option::Option<bool>) -> Self {
            self.serial_console_access_enabled = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput)
        pub fn build(self) -> crate::output::DisableSerialConsoleAccessOutput {
            crate::output::DisableSerialConsoleAccessOutput {
                serial_console_access_enabled: self.serial_console_access_enabled,
            }
        }
    }
}
impl DisableSerialConsoleAccessOutput {
    /// Creates a new builder-style object to manufacture [`DisableSerialConsoleAccessOutput`](crate::output::DisableSerialConsoleAccessOutput)
    pub fn builder() -> crate::output::disable_serial_console_access_output::Builder {
        crate::output::disable_serial_console_access_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableFastSnapshotRestoresOutput {
    /// <p>Information about the snapshots for which fast snapshot restores were successfully disabled.</p>
    pub successful:
        std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>>,
    /// <p>Information about the snapshots for which fast snapshot restores could not be disabled.</p>
    pub unsuccessful:
        std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>>,
}
impl std::fmt::Debug for DisableFastSnapshotRestoresOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableFastSnapshotRestoresOutput");
        formatter.field("successful", &self.successful);
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput)
pub mod disable_fast_snapshot_restores_output {
    /// A builder for [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful:
            std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>>,
        pub(crate) unsuccessful:
            std::option::Option<std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>>,
    }
    impl Builder {
        pub fn successful(
            mut self,
            inp: impl Into<crate::model::DisableFastSnapshotRestoreSuccessItem>,
        ) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(inp.into());
            self.successful = Some(v);
            self
        }
        pub fn set_successful(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::DisableFastSnapshotRestoreSuccessItem>,
            >,
        ) -> Self {
            self.successful = inp;
            self
        }
        pub fn unsuccessful(
            mut self,
            inp: impl Into<crate::model::DisableFastSnapshotRestoreErrorItem>,
        ) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::DisableFastSnapshotRestoreErrorItem>,
            >,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput)
        pub fn build(self) -> crate::output::DisableFastSnapshotRestoresOutput {
            crate::output::DisableFastSnapshotRestoresOutput {
                successful: self.successful,
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl DisableFastSnapshotRestoresOutput {
    /// Creates a new builder-style object to manufacture [`DisableFastSnapshotRestoresOutput`](crate::output::DisableFastSnapshotRestoresOutput)
    pub fn builder() -> crate::output::disable_fast_snapshot_restores_output::Builder {
        crate::output::disable_fast_snapshot_restores_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableEbsEncryptionByDefaultOutput {
    /// <p>The updated status of encryption by default.</p>
    pub ebs_encryption_by_default: std::option::Option<bool>,
}
impl std::fmt::Debug for DisableEbsEncryptionByDefaultOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableEbsEncryptionByDefaultOutput");
        formatter.field("ebs_encryption_by_default", &self.ebs_encryption_by_default);
        formatter.finish()
    }
}
/// See [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput)
pub mod disable_ebs_encryption_by_default_output {
    /// A builder for [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ebs_encryption_by_default: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The updated status of encryption by default.</p>
        pub fn ebs_encryption_by_default(mut self, inp: bool) -> Self {
            self.ebs_encryption_by_default = Some(inp);
            self
        }
        pub fn set_ebs_encryption_by_default(mut self, inp: std::option::Option<bool>) -> Self {
            self.ebs_encryption_by_default = inp;
            self
        }
        /// Consumes the builder and constructs a [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput)
        pub fn build(self) -> crate::output::DisableEbsEncryptionByDefaultOutput {
            crate::output::DisableEbsEncryptionByDefaultOutput {
                ebs_encryption_by_default: self.ebs_encryption_by_default,
            }
        }
    }
}
impl DisableEbsEncryptionByDefaultOutput {
    /// Creates a new builder-style object to manufacture [`DisableEbsEncryptionByDefaultOutput`](crate::output::DisableEbsEncryptionByDefaultOutput)
    pub fn builder() -> crate::output::disable_ebs_encryption_by_default_output::Builder {
        crate::output::disable_ebs_encryption_by_default_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachVpnGatewayOutput {}
impl std::fmt::Debug for DetachVpnGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachVpnGatewayOutput");
        formatter.finish()
    }
}
/// See [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput)
pub mod detach_vpn_gateway_output {
    /// A builder for [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput)
        pub fn build(self) -> crate::output::DetachVpnGatewayOutput {
            crate::output::DetachVpnGatewayOutput {}
        }
    }
}
impl DetachVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DetachVpnGatewayOutput`](crate::output::DetachVpnGatewayOutput)
    pub fn builder() -> crate::output::detach_vpn_gateway_output::Builder {
        crate::output::detach_vpn_gateway_output::Builder::default()
    }
}

/// <p>Describes volume attachment details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachVolumeOutput {
    /// <p>The time stamp when the attachment initiated.</p>
    pub attach_time: std::option::Option<smithy_types::Instant>,
    /// <p>The device name.</p>
    pub device: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The attachment state of the volume.</p>
    pub state: std::option::Option<crate::model::VolumeAttachmentState>,
    /// <p>The ID of the volume.</p>
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub delete_on_termination: std::option::Option<bool>,
}
impl std::fmt::Debug for DetachVolumeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachVolumeOutput");
        formatter.field("attach_time", &self.attach_time);
        formatter.field("device", &self.device);
        formatter.field("instance_id", &self.instance_id);
        formatter.field("state", &self.state);
        formatter.field("volume_id", &self.volume_id);
        formatter.field("delete_on_termination", &self.delete_on_termination);
        formatter.finish()
    }
}
/// See [`DetachVolumeOutput`](crate::output::DetachVolumeOutput)
pub mod detach_volume_output {
    /// A builder for [`DetachVolumeOutput`](crate::output::DetachVolumeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attach_time: std::option::Option<smithy_types::Instant>,
        pub(crate) device: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::VolumeAttachmentState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) delete_on_termination: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The time stamp when the attachment initiated.</p>
        pub fn attach_time(mut self, inp: smithy_types::Instant) -> Self {
            self.attach_time = Some(inp);
            self
        }
        pub fn set_attach_time(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.attach_time = inp;
            self
        }
        /// <p>The device name.</p>
        pub fn device(mut self, inp: impl Into<std::string::String>) -> Self {
            self.device = Some(inp.into());
            self
        }
        pub fn set_device(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.device = inp;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// <p>The attachment state of the volume.</p>
        pub fn state(mut self, inp: crate::model::VolumeAttachmentState) -> Self {
            self.state = Some(inp);
            self
        }
        pub fn set_state(
            mut self,
            inp: std::option::Option<crate::model::VolumeAttachmentState>,
        ) -> Self {
            self.state = inp;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(inp.into());
            self
        }
        pub fn set_volume_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.volume_id = inp;
            self
        }
        /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
        pub fn delete_on_termination(mut self, inp: bool) -> Self {
            self.delete_on_termination = Some(inp);
            self
        }
        pub fn set_delete_on_termination(mut self, inp: std::option::Option<bool>) -> Self {
            self.delete_on_termination = inp;
            self
        }
        /// Consumes the builder and constructs a [`DetachVolumeOutput`](crate::output::DetachVolumeOutput)
        pub fn build(self) -> crate::output::DetachVolumeOutput {
            crate::output::DetachVolumeOutput {
                attach_time: self.attach_time,
                device: self.device,
                instance_id: self.instance_id,
                state: self.state,
                volume_id: self.volume_id,
                delete_on_termination: self.delete_on_termination,
            }
        }
    }
}
impl DetachVolumeOutput {
    /// Creates a new builder-style object to manufacture [`DetachVolumeOutput`](crate::output::DetachVolumeOutput)
    pub fn builder() -> crate::output::detach_volume_output::Builder {
        crate::output::detach_volume_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachNetworkInterfaceOutput {}
impl std::fmt::Debug for DetachNetworkInterfaceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachNetworkInterfaceOutput");
        formatter.finish()
    }
}
/// See [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput)
pub mod detach_network_interface_output {
    /// A builder for [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput)
        pub fn build(self) -> crate::output::DetachNetworkInterfaceOutput {
            crate::output::DetachNetworkInterfaceOutput {}
        }
    }
}
impl DetachNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`DetachNetworkInterfaceOutput`](crate::output::DetachNetworkInterfaceOutput)
    pub fn builder() -> crate::output::detach_network_interface_output::Builder {
        crate::output::detach_network_interface_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachInternetGatewayOutput {}
impl std::fmt::Debug for DetachInternetGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachInternetGatewayOutput");
        formatter.finish()
    }
}
/// See [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput)
pub mod detach_internet_gateway_output {
    /// A builder for [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput)
        pub fn build(self) -> crate::output::DetachInternetGatewayOutput {
            crate::output::DetachInternetGatewayOutput {}
        }
    }
}
impl DetachInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DetachInternetGatewayOutput`](crate::output::DetachInternetGatewayOutput)
    pub fn builder() -> crate::output::detach_internet_gateway_output::Builder {
        crate::output::detach_internet_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DetachClassicLinkVpcOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DetachClassicLinkVpcOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DetachClassicLinkVpcOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput)
pub mod detach_classic_link_vpc_output {
    /// A builder for [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput)
        pub fn build(self) -> crate::output::DetachClassicLinkVpcOutput {
            crate::output::DetachClassicLinkVpcOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DetachClassicLinkVpcOutput {
    /// Creates a new builder-style object to manufacture [`DetachClassicLinkVpcOutput`](crate::output::DetachClassicLinkVpcOutput)
    pub fn builder() -> crate::output::detach_classic_link_vpc_output::Builder {
        crate::output::detach_classic_link_vpc_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeVpnGateways.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpnGatewaysOutput {
    /// <p>Information about one or more virtual private gateways.</p>
    pub vpn_gateways: std::option::Option<std::vec::Vec<crate::model::VpnGateway>>,
}
impl std::fmt::Debug for DescribeVpnGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpnGatewaysOutput");
        formatter.field("vpn_gateways", &self.vpn_gateways);
        formatter.finish()
    }
}
/// See [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput)
pub mod describe_vpn_gateways_output {
    /// A builder for [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_gateways: std::option::Option<std::vec::Vec<crate::model::VpnGateway>>,
    }
    impl Builder {
        pub fn vpn_gateways(mut self, inp: impl Into<crate::model::VpnGateway>) -> Self {
            let mut v = self.vpn_gateways.unwrap_or_default();
            v.push(inp.into());
            self.vpn_gateways = Some(v);
            self
        }
        pub fn set_vpn_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VpnGateway>>,
        ) -> Self {
            self.vpn_gateways = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeVpnGatewaysOutput {
            crate::output::DescribeVpnGatewaysOutput {
                vpn_gateways: self.vpn_gateways,
            }
        }
    }
}
impl DescribeVpnGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpnGatewaysOutput`](crate::output::DescribeVpnGatewaysOutput)
    pub fn builder() -> crate::output::describe_vpn_gateways_output::Builder {
        crate::output::describe_vpn_gateways_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeVpnConnections.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpnConnectionsOutput {
    /// <p>Information about one or more VPN connections.</p>
    pub vpn_connections: std::option::Option<std::vec::Vec<crate::model::VpnConnection>>,
}
impl std::fmt::Debug for DescribeVpnConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpnConnectionsOutput");
        formatter.field("vpn_connections", &self.vpn_connections);
        formatter.finish()
    }
}
/// See [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput)
pub mod describe_vpn_connections_output {
    /// A builder for [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connections: std::option::Option<std::vec::Vec<crate::model::VpnConnection>>,
    }
    impl Builder {
        pub fn vpn_connections(mut self, inp: impl Into<crate::model::VpnConnection>) -> Self {
            let mut v = self.vpn_connections.unwrap_or_default();
            v.push(inp.into());
            self.vpn_connections = Some(v);
            self
        }
        pub fn set_vpn_connections(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VpnConnection>>,
        ) -> Self {
            self.vpn_connections = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput)
        pub fn build(self) -> crate::output::DescribeVpnConnectionsOutput {
            crate::output::DescribeVpnConnectionsOutput {
                vpn_connections: self.vpn_connections,
            }
        }
    }
}
impl DescribeVpnConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpnConnectionsOutput`](crate::output::DescribeVpnConnectionsOutput)
    pub fn builder() -> crate::output::describe_vpn_connections_output::Builder {
        crate::output::describe_vpn_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcsOutput {
    /// <p>Information about one or more VPCs.</p>
    pub vpcs: std::option::Option<std::vec::Vec<crate::model::Vpc>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcsOutput");
        formatter.field("vpcs", &self.vpcs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput)
pub mod describe_vpcs_output {
    /// A builder for [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpcs: std::option::Option<std::vec::Vec<crate::model::Vpc>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn vpcs(mut self, inp: impl Into<crate::model::Vpc>) -> Self {
            let mut v = self.vpcs.unwrap_or_default();
            v.push(inp.into());
            self.vpcs = Some(v);
            self
        }
        pub fn set_vpcs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Vpc>>,
        ) -> Self {
            self.vpcs = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput)
        pub fn build(self) -> crate::output::DescribeVpcsOutput {
            crate::output::DescribeVpcsOutput {
                vpcs: self.vpcs,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcsOutput`](crate::output::DescribeVpcsOutput)
    pub fn builder() -> crate::output::describe_vpcs_output::Builder {
        crate::output::describe_vpcs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcPeeringConnectionsOutput {
    /// <p>Information about the VPC peering connections.</p>
    pub vpc_peering_connections:
        std::option::Option<std::vec::Vec<crate::model::VpcPeeringConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcPeeringConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcPeeringConnectionsOutput");
        formatter.field("vpc_peering_connections", &self.vpc_peering_connections);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput)
pub mod describe_vpc_peering_connections_output {
    /// A builder for [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_peering_connections:
            std::option::Option<std::vec::Vec<crate::model::VpcPeeringConnection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn vpc_peering_connections(
            mut self,
            inp: impl Into<crate::model::VpcPeeringConnection>,
        ) -> Self {
            let mut v = self.vpc_peering_connections.unwrap_or_default();
            v.push(inp.into());
            self.vpc_peering_connections = Some(v);
            self
        }
        pub fn set_vpc_peering_connections(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VpcPeeringConnection>>,
        ) -> Self {
            self.vpc_peering_connections = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput)
        pub fn build(self) -> crate::output::DescribeVpcPeeringConnectionsOutput {
            crate::output::DescribeVpcPeeringConnectionsOutput {
                vpc_peering_connections: self.vpc_peering_connections,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcPeeringConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcPeeringConnectionsOutput`](crate::output::DescribeVpcPeeringConnectionsOutput)
    pub fn builder() -> crate::output::describe_vpc_peering_connections_output::Builder {
        crate::output::describe_vpc_peering_connections_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeVpcEndpointServices.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcEndpointServicesOutput {
    /// <p>A list of supported services.</p>
    pub service_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the service.</p>
    pub service_details: std::option::Option<std::vec::Vec<crate::model::ServiceDetail>>,
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcEndpointServicesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcEndpointServicesOutput");
        formatter.field("service_names", &self.service_names);
        formatter.field("service_details", &self.service_details);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput)
pub mod describe_vpc_endpoint_services_output {
    /// A builder for [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_names: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) service_details: std::option::Option<std::vec::Vec<crate::model::ServiceDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn service_names(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.service_names.unwrap_or_default();
            v.push(inp.into());
            self.service_names = Some(v);
            self
        }
        pub fn set_service_names(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.service_names = inp;
            self
        }
        pub fn service_details(mut self, inp: impl Into<crate::model::ServiceDetail>) -> Self {
            let mut v = self.service_details.unwrap_or_default();
            v.push(inp.into());
            self.service_details = Some(v);
            self
        }
        pub fn set_service_details(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ServiceDetail>>,
        ) -> Self {
            self.service_details = inp;
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput)
        pub fn build(self) -> crate::output::DescribeVpcEndpointServicesOutput {
            crate::output::DescribeVpcEndpointServicesOutput {
                service_names: self.service_names,
                service_details: self.service_details,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcEndpointServicesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServicesOutput`](crate::output::DescribeVpcEndpointServicesOutput)
    pub fn builder() -> crate::output::describe_vpc_endpoint_services_output::Builder {
        crate::output::describe_vpc_endpoint_services_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcEndpointServicePermissionsOutput {
    /// <p>Information about one or more allowed principals.</p>
    pub allowed_principals: std::option::Option<std::vec::Vec<crate::model::AllowedPrincipal>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcEndpointServicePermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcEndpointServicePermissionsOutput");
        formatter.field("allowed_principals", &self.allowed_principals);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput)
pub mod describe_vpc_endpoint_service_permissions_output {
    /// A builder for [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) allowed_principals:
            std::option::Option<std::vec::Vec<crate::model::AllowedPrincipal>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn allowed_principals(
            mut self,
            inp: impl Into<crate::model::AllowedPrincipal>,
        ) -> Self {
            let mut v = self.allowed_principals.unwrap_or_default();
            v.push(inp.into());
            self.allowed_principals = Some(v);
            self
        }
        pub fn set_allowed_principals(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AllowedPrincipal>>,
        ) -> Self {
            self.allowed_principals = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput)
        pub fn build(self) -> crate::output::DescribeVpcEndpointServicePermissionsOutput {
            crate::output::DescribeVpcEndpointServicePermissionsOutput {
                allowed_principals: self.allowed_principals,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcEndpointServicePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServicePermissionsOutput`](crate::output::DescribeVpcEndpointServicePermissionsOutput)
    pub fn builder() -> crate::output::describe_vpc_endpoint_service_permissions_output::Builder {
        crate::output::describe_vpc_endpoint_service_permissions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcEndpointServiceConfigurationsOutput {
    /// <p>Information about one or more services.</p>
    pub service_configurations:
        std::option::Option<std::vec::Vec<crate::model::ServiceConfiguration>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcEndpointServiceConfigurationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcEndpointServiceConfigurationsOutput");
        formatter.field("service_configurations", &self.service_configurations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput)
pub mod describe_vpc_endpoint_service_configurations_output {
    /// A builder for [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_configurations:
            std::option::Option<std::vec::Vec<crate::model::ServiceConfiguration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn service_configurations(
            mut self,
            inp: impl Into<crate::model::ServiceConfiguration>,
        ) -> Self {
            let mut v = self.service_configurations.unwrap_or_default();
            v.push(inp.into());
            self.service_configurations = Some(v);
            self
        }
        pub fn set_service_configurations(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ServiceConfiguration>>,
        ) -> Self {
            self.service_configurations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput)
        pub fn build(self) -> crate::output::DescribeVpcEndpointServiceConfigurationsOutput {
            crate::output::DescribeVpcEndpointServiceConfigurationsOutput {
                service_configurations: self.service_configurations,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcEndpointServiceConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointServiceConfigurationsOutput`](crate::output::DescribeVpcEndpointServiceConfigurationsOutput)
    pub fn builder() -> crate::output::describe_vpc_endpoint_service_configurations_output::Builder
    {
        crate::output::describe_vpc_endpoint_service_configurations_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeVpcEndpoints.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcEndpointsOutput {
    /// <p>Information about the endpoints.</p>
    pub vpc_endpoints: std::option::Option<std::vec::Vec<crate::model::VpcEndpoint>>,
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcEndpointsOutput");
        formatter.field("vpc_endpoints", &self.vpc_endpoints);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput)
pub mod describe_vpc_endpoints_output {
    /// A builder for [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoints: std::option::Option<std::vec::Vec<crate::model::VpcEndpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn vpc_endpoints(mut self, inp: impl Into<crate::model::VpcEndpoint>) -> Self {
            let mut v = self.vpc_endpoints.unwrap_or_default();
            v.push(inp.into());
            self.vpc_endpoints = Some(v);
            self
        }
        pub fn set_vpc_endpoints(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VpcEndpoint>>,
        ) -> Self {
            self.vpc_endpoints = inp;
            self
        }
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput)
        pub fn build(self) -> crate::output::DescribeVpcEndpointsOutput {
            crate::output::DescribeVpcEndpointsOutput {
                vpc_endpoints: self.vpc_endpoints,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput)
    pub fn builder() -> crate::output::describe_vpc_endpoints_output::Builder {
        crate::output::describe_vpc_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcEndpointConnectionsOutput {
    /// <p>Information about one or more VPC endpoint connections.</p>
    pub vpc_endpoint_connections:
        std::option::Option<std::vec::Vec<crate::model::VpcEndpointConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcEndpointConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcEndpointConnectionsOutput");
        formatter.field("vpc_endpoint_connections", &self.vpc_endpoint_connections);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput)
pub mod describe_vpc_endpoint_connections_output {
    /// A builder for [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoint_connections:
            std::option::Option<std::vec::Vec<crate::model::VpcEndpointConnection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn vpc_endpoint_connections(
            mut self,
            inp: impl Into<crate::model::VpcEndpointConnection>,
        ) -> Self {
            let mut v = self.vpc_endpoint_connections.unwrap_or_default();
            v.push(inp.into());
            self.vpc_endpoint_connections = Some(v);
            self
        }
        pub fn set_vpc_endpoint_connections(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VpcEndpointConnection>>,
        ) -> Self {
            self.vpc_endpoint_connections = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput)
        pub fn build(self) -> crate::output::DescribeVpcEndpointConnectionsOutput {
            crate::output::DescribeVpcEndpointConnectionsOutput {
                vpc_endpoint_connections: self.vpc_endpoint_connections,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcEndpointConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointConnectionsOutput`](crate::output::DescribeVpcEndpointConnectionsOutput)
    pub fn builder() -> crate::output::describe_vpc_endpoint_connections_output::Builder {
        crate::output::describe_vpc_endpoint_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcEndpointConnectionNotificationsOutput {
    /// <p>One or more notifications.</p>
    pub connection_notification_set:
        std::option::Option<std::vec::Vec<crate::model::ConnectionNotification>>,
    /// <p>The token to use to retrieve the next page of results. This value is
    /// <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVpcEndpointConnectionNotificationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcEndpointConnectionNotificationsOutput");
        formatter.field(
            "connection_notification_set",
            &self.connection_notification_set,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput)
pub mod describe_vpc_endpoint_connection_notifications_output {
    /// A builder for [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_notification_set:
            std::option::Option<std::vec::Vec<crate::model::ConnectionNotification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn connection_notification_set(
            mut self,
            inp: impl Into<crate::model::ConnectionNotification>,
        ) -> Self {
            let mut v = self.connection_notification_set.unwrap_or_default();
            v.push(inp.into());
            self.connection_notification_set = Some(v);
            self
        }
        pub fn set_connection_notification_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ConnectionNotification>>,
        ) -> Self {
            self.connection_notification_set = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is
        /// <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput)
        pub fn build(self) -> crate::output::DescribeVpcEndpointConnectionNotificationsOutput {
            crate::output::DescribeVpcEndpointConnectionNotificationsOutput {
                connection_notification_set: self.connection_notification_set,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVpcEndpointConnectionNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcEndpointConnectionNotificationsOutput`](crate::output::DescribeVpcEndpointConnectionNotificationsOutput)
    pub fn builder() -> crate::output::describe_vpc_endpoint_connection_notifications_output::Builder
    {
        crate::output::describe_vpc_endpoint_connection_notifications_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcClassicLinkDnsSupportOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the ClassicLink DNS support status of the VPCs.</p>
    pub vpcs: std::option::Option<std::vec::Vec<crate::model::ClassicLinkDnsSupport>>,
}
impl std::fmt::Debug for DescribeVpcClassicLinkDnsSupportOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcClassicLinkDnsSupportOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("vpcs", &self.vpcs);
        formatter.finish()
    }
}
/// See [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput)
pub mod describe_vpc_classic_link_dns_support_output {
    /// A builder for [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) vpcs: std::option::Option<std::vec::Vec<crate::model::ClassicLinkDnsSupport>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn vpcs(mut self, inp: impl Into<crate::model::ClassicLinkDnsSupport>) -> Self {
            let mut v = self.vpcs.unwrap_or_default();
            v.push(inp.into());
            self.vpcs = Some(v);
            self
        }
        pub fn set_vpcs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ClassicLinkDnsSupport>>,
        ) -> Self {
            self.vpcs = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput)
        pub fn build(self) -> crate::output::DescribeVpcClassicLinkDnsSupportOutput {
            crate::output::DescribeVpcClassicLinkDnsSupportOutput {
                next_token: self.next_token,
                vpcs: self.vpcs,
            }
        }
    }
}
impl DescribeVpcClassicLinkDnsSupportOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcClassicLinkDnsSupportOutput`](crate::output::DescribeVpcClassicLinkDnsSupportOutput)
    pub fn builder() -> crate::output::describe_vpc_classic_link_dns_support_output::Builder {
        crate::output::describe_vpc_classic_link_dns_support_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcClassicLinkOutput {
    /// <p>The ClassicLink status of one or more VPCs.</p>
    pub vpcs: std::option::Option<std::vec::Vec<crate::model::VpcClassicLink>>,
}
impl std::fmt::Debug for DescribeVpcClassicLinkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcClassicLinkOutput");
        formatter.field("vpcs", &self.vpcs);
        formatter.finish()
    }
}
/// See [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput)
pub mod describe_vpc_classic_link_output {
    /// A builder for [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpcs: std::option::Option<std::vec::Vec<crate::model::VpcClassicLink>>,
    }
    impl Builder {
        pub fn vpcs(mut self, inp: impl Into<crate::model::VpcClassicLink>) -> Self {
            let mut v = self.vpcs.unwrap_or_default();
            v.push(inp.into());
            self.vpcs = Some(v);
            self
        }
        pub fn set_vpcs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VpcClassicLink>>,
        ) -> Self {
            self.vpcs = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput)
        pub fn build(self) -> crate::output::DescribeVpcClassicLinkOutput {
            crate::output::DescribeVpcClassicLinkOutput { vpcs: self.vpcs }
        }
    }
}
impl DescribeVpcClassicLinkOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcClassicLinkOutput`](crate::output::DescribeVpcClassicLinkOutput)
    pub fn builder() -> crate::output::describe_vpc_classic_link_output::Builder {
        crate::output::describe_vpc_classic_link_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVpcAttributeOutput {
    /// <p>The ID of the VPC.</p>
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames.
    /// If this attribute is <code>true</code>, instances in the VPC get DNS hostnames;
    /// otherwise, they do not.</p>
    pub enable_dns_hostnames: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether DNS resolution is enabled for
    /// the VPC. If this attribute is <code>true</code>, the Amazon DNS server
    /// resolves DNS hostnames for your instances to their corresponding
    /// IP addresses; otherwise, it does not.</p>
    pub enable_dns_support: std::option::Option<crate::model::AttributeBooleanValue>,
}
impl std::fmt::Debug for DescribeVpcAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVpcAttributeOutput");
        formatter.field("vpc_id", &self.vpc_id);
        formatter.field("enable_dns_hostnames", &self.enable_dns_hostnames);
        formatter.field("enable_dns_support", &self.enable_dns_support);
        formatter.finish()
    }
}
/// See [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput)
pub mod describe_vpc_attribute_output {
    /// A builder for [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_id: std::option::Option<std::string::String>,
        pub(crate) enable_dns_hostnames: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) enable_dns_support: std::option::Option<crate::model::AttributeBooleanValue>,
    }
    impl Builder {
        /// <p>The ID of the VPC.</p>
        pub fn vpc_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(inp.into());
            self
        }
        pub fn set_vpc_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = inp;
            self
        }
        /// <p>Indicates whether the instances launched in the VPC get DNS hostnames.
        /// If this attribute is <code>true</code>, instances in the VPC get DNS hostnames;
        /// otherwise, they do not.</p>
        pub fn enable_dns_hostnames(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.enable_dns_hostnames = Some(inp);
            self
        }
        pub fn set_enable_dns_hostnames(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.enable_dns_hostnames = inp;
            self
        }
        /// <p>Indicates whether DNS resolution is enabled for
        /// the VPC. If this attribute is <code>true</code>, the Amazon DNS server
        /// resolves DNS hostnames for your instances to their corresponding
        /// IP addresses; otherwise, it does not.</p>
        pub fn enable_dns_support(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.enable_dns_support = Some(inp);
            self
        }
        pub fn set_enable_dns_support(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.enable_dns_support = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput)
        pub fn build(self) -> crate::output::DescribeVpcAttributeOutput {
            crate::output::DescribeVpcAttributeOutput {
                vpc_id: self.vpc_id,
                enable_dns_hostnames: self.enable_dns_hostnames,
                enable_dns_support: self.enable_dns_support,
            }
        }
    }
}
impl DescribeVpcAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcAttributeOutput`](crate::output::DescribeVpcAttributeOutput)
    pub fn builder() -> crate::output::describe_vpc_attribute_output::Builder {
        crate::output::describe_vpc_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVolumeStatusOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
    /// when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the status of the volumes.</p>
    pub volume_statuses: std::option::Option<std::vec::Vec<crate::model::VolumeStatusItem>>,
}
impl std::fmt::Debug for DescribeVolumeStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVolumeStatusOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("volume_statuses", &self.volume_statuses);
        formatter.finish()
    }
}
/// See [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput)
pub mod describe_volume_status_output {
    /// A builder for [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) volume_statuses:
            std::option::Option<std::vec::Vec<crate::model::VolumeStatusItem>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
        /// when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn volume_statuses(mut self, inp: impl Into<crate::model::VolumeStatusItem>) -> Self {
            let mut v = self.volume_statuses.unwrap_or_default();
            v.push(inp.into());
            self.volume_statuses = Some(v);
            self
        }
        pub fn set_volume_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VolumeStatusItem>>,
        ) -> Self {
            self.volume_statuses = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput)
        pub fn build(self) -> crate::output::DescribeVolumeStatusOutput {
            crate::output::DescribeVolumeStatusOutput {
                next_token: self.next_token,
                volume_statuses: self.volume_statuses,
            }
        }
    }
}
impl DescribeVolumeStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumeStatusOutput`](crate::output::DescribeVolumeStatusOutput)
    pub fn builder() -> crate::output::describe_volume_status_output::Builder {
        crate::output::describe_volume_status_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVolumesModificationsOutput {
    /// <p>Information about the volume modifications.</p>
    pub volumes_modifications: std::option::Option<std::vec::Vec<crate::model::VolumeModification>>,
    /// <p>Token for pagination, null if there are no more results </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVolumesModificationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVolumesModificationsOutput");
        formatter.field("volumes_modifications", &self.volumes_modifications);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput)
pub mod describe_volumes_modifications_output {
    /// A builder for [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) volumes_modifications:
            std::option::Option<std::vec::Vec<crate::model::VolumeModification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn volumes_modifications(
            mut self,
            inp: impl Into<crate::model::VolumeModification>,
        ) -> Self {
            let mut v = self.volumes_modifications.unwrap_or_default();
            v.push(inp.into());
            self.volumes_modifications = Some(v);
            self
        }
        pub fn set_volumes_modifications(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VolumeModification>>,
        ) -> Self {
            self.volumes_modifications = inp;
            self
        }
        /// <p>Token for pagination, null if there are no more results </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput)
        pub fn build(self) -> crate::output::DescribeVolumesModificationsOutput {
            crate::output::DescribeVolumesModificationsOutput {
                volumes_modifications: self.volumes_modifications,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVolumesModificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesModificationsOutput`](crate::output::DescribeVolumesModificationsOutput)
    pub fn builder() -> crate::output::describe_volumes_modifications_output::Builder {
        crate::output::describe_volumes_modifications_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVolumesOutput {
    /// <p>Information about the volumes.</p>
    pub volumes: std::option::Option<std::vec::Vec<crate::model::Volume>>,
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code>
    /// request. When the results of a <code>DescribeVolumes</code> request exceed
    /// <code>MaxResults</code>, this value can be used to retrieve the next page of results. This
    /// value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVolumesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVolumesOutput");
        formatter.field("volumes", &self.volumes);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput)
pub mod describe_volumes_output {
    /// A builder for [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) volumes: std::option::Option<std::vec::Vec<crate::model::Volume>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn volumes(mut self, inp: impl Into<crate::model::Volume>) -> Self {
            let mut v = self.volumes.unwrap_or_default();
            v.push(inp.into());
            self.volumes = Some(v);
            self
        }
        pub fn set_volumes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Volume>>,
        ) -> Self {
            self.volumes = inp;
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code>
        /// request. When the results of a <code>DescribeVolumes</code> request exceed
        /// <code>MaxResults</code>, this value can be used to retrieve the next page of results. This
        /// value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput)
        pub fn build(self) -> crate::output::DescribeVolumesOutput {
            crate::output::DescribeVolumesOutput {
                volumes: self.volumes,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeVolumesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumesOutput`](crate::output::DescribeVolumesOutput)
    pub fn builder() -> crate::output::describe_volumes_output::Builder {
        crate::output::describe_volumes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVolumeAttributeOutput {
    /// <p>The state of <code>autoEnableIO</code> attribute.</p>
    pub auto_enable_io: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>A list of product codes.</p>
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>The ID of the volume.</p>
    pub volume_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeVolumeAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVolumeAttributeOutput");
        formatter.field("auto_enable_io", &self.auto_enable_io);
        formatter.field("product_codes", &self.product_codes);
        formatter.field("volume_id", &self.volume_id);
        formatter.finish()
    }
}
/// See [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput)
pub mod describe_volume_attribute_output {
    /// A builder for [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_enable_io: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The state of <code>autoEnableIO</code> attribute.</p>
        pub fn auto_enable_io(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.auto_enable_io = Some(inp);
            self
        }
        pub fn set_auto_enable_io(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.auto_enable_io = inp;
            self
        }
        pub fn product_codes(mut self, inp: impl Into<crate::model::ProductCode>) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(inp.into());
            self.product_codes = Some(v);
            self
        }
        pub fn set_product_codes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = inp;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(inp.into());
            self
        }
        pub fn set_volume_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.volume_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput)
        pub fn build(self) -> crate::output::DescribeVolumeAttributeOutput {
            crate::output::DescribeVolumeAttributeOutput {
                auto_enable_io: self.auto_enable_io,
                product_codes: self.product_codes,
                volume_id: self.volume_id,
            }
        }
    }
}
impl DescribeVolumeAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVolumeAttributeOutput`](crate::output::DescribeVolumeAttributeOutput)
    pub fn builder() -> crate::output::describe_volume_attribute_output::Builder {
        crate::output::describe_volume_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayVpcAttachmentsOutput {
    /// <p>Information about the VPC attachments.</p>
    pub transit_gateway_vpc_attachments:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayVpcAttachment>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayVpcAttachmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayVpcAttachmentsOutput");
        formatter.field(
            "transit_gateway_vpc_attachments",
            &self.transit_gateway_vpc_attachments,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput)
pub mod describe_transit_gateway_vpc_attachments_output {
    /// A builder for [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachments:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayVpcAttachment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_vpc_attachments(
            mut self,
            inp: impl Into<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            let mut v = self.transit_gateway_vpc_attachments.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_vpc_attachments = Some(v);
            self
        }
        pub fn set_transit_gateway_vpc_attachments(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayVpcAttachment>>,
        ) -> Self {
            self.transit_gateway_vpc_attachments = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayVpcAttachmentsOutput {
            crate::output::DescribeTransitGatewayVpcAttachmentsOutput {
                transit_gateway_vpc_attachments: self.transit_gateway_vpc_attachments,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayVpcAttachmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayVpcAttachmentsOutput`](crate::output::DescribeTransitGatewayVpcAttachmentsOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_vpc_attachments_output::Builder {
        crate::output::describe_transit_gateway_vpc_attachments_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewaysOutput {
    /// <p>Information about the transit gateways.</p>
    pub transit_gateways: std::option::Option<std::vec::Vec<crate::model::TransitGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewaysOutput");
        formatter.field("transit_gateways", &self.transit_gateways);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput)
pub mod describe_transit_gateways_output {
    /// A builder for [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateways:
            std::option::Option<std::vec::Vec<crate::model::TransitGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateways(mut self, inp: impl Into<crate::model::TransitGateway>) -> Self {
            let mut v = self.transit_gateways.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateways = Some(v);
            self
        }
        pub fn set_transit_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGateway>>,
        ) -> Self {
            self.transit_gateways = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewaysOutput {
            crate::output::DescribeTransitGatewaysOutput {
                transit_gateways: self.transit_gateways,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewaysOutput`](crate::output::DescribeTransitGatewaysOutput)
    pub fn builder() -> crate::output::describe_transit_gateways_output::Builder {
        crate::output::describe_transit_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayRouteTablesOutput {
    /// <p>Information about the transit gateway route tables.</p>
    pub transit_gateway_route_tables:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTable>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayRouteTablesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayRouteTablesOutput");
        formatter.field(
            "transit_gateway_route_tables",
            &self.transit_gateway_route_tables,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput)
pub mod describe_transit_gateway_route_tables_output {
    /// A builder for [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_tables:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_route_tables(
            mut self,
            inp: impl Into<crate::model::TransitGatewayRouteTable>,
        ) -> Self {
            let mut v = self.transit_gateway_route_tables.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_route_tables = Some(v);
            self
        }
        pub fn set_transit_gateway_route_tables(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayRouteTable>>,
        ) -> Self {
            self.transit_gateway_route_tables = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayRouteTablesOutput {
            crate::output::DescribeTransitGatewayRouteTablesOutput {
                transit_gateway_route_tables: self.transit_gateway_route_tables,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayRouteTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayRouteTablesOutput`](crate::output::DescribeTransitGatewayRouteTablesOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_route_tables_output::Builder {
        crate::output::describe_transit_gateway_route_tables_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayPeeringAttachmentsOutput {
    /// <p>The transit gateway peering attachments.</p>
    pub transit_gateway_peering_attachments:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayPeeringAttachmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayPeeringAttachmentsOutput");
        formatter.field(
            "transit_gateway_peering_attachments",
            &self.transit_gateway_peering_attachments,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput)
pub mod describe_transit_gateway_peering_attachments_output {
    /// A builder for [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachments:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_peering_attachments(
            mut self,
            inp: impl Into<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            let mut v = self.transit_gateway_peering_attachments.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_peering_attachments = Some(v);
            self
        }
        pub fn set_transit_gateway_peering_attachments(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayPeeringAttachment>>,
        ) -> Self {
            self.transit_gateway_peering_attachments = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayPeeringAttachmentsOutput {
            crate::output::DescribeTransitGatewayPeeringAttachmentsOutput {
                transit_gateway_peering_attachments: self.transit_gateway_peering_attachments,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayPeeringAttachmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayPeeringAttachmentsOutput`](crate::output::DescribeTransitGatewayPeeringAttachmentsOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_peering_attachments_output::Builder
    {
        crate::output::describe_transit_gateway_peering_attachments_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayMulticastDomainsOutput {
    /// <p>Information about the transit gateway multicast domains.</p>
    pub transit_gateway_multicast_domains:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomain>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayMulticastDomainsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayMulticastDomainsOutput");
        formatter.field(
            "transit_gateway_multicast_domains",
            &self.transit_gateway_multicast_domains,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput)
pub mod describe_transit_gateway_multicast_domains_output {
    /// A builder for [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_multicast_domains:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomain>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_multicast_domains(
            mut self,
            inp: impl Into<crate::model::TransitGatewayMulticastDomain>,
        ) -> Self {
            let mut v = self.transit_gateway_multicast_domains.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_multicast_domains = Some(v);
            self
        }
        pub fn set_transit_gateway_multicast_domains(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayMulticastDomain>>,
        ) -> Self {
            self.transit_gateway_multicast_domains = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayMulticastDomainsOutput {
            crate::output::DescribeTransitGatewayMulticastDomainsOutput {
                transit_gateway_multicast_domains: self.transit_gateway_multicast_domains,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayMulticastDomainsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayMulticastDomainsOutput`](crate::output::DescribeTransitGatewayMulticastDomainsOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_multicast_domains_output::Builder {
        crate::output::describe_transit_gateway_multicast_domains_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayConnectsOutput {
    /// <p>Information about the Connect attachments.</p>
    pub transit_gateway_connects:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnect>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayConnectsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayConnectsOutput");
        formatter.field("transit_gateway_connects", &self.transit_gateway_connects);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput)
pub mod describe_transit_gateway_connects_output {
    /// A builder for [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connects:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnect>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_connects(
            mut self,
            inp: impl Into<crate::model::TransitGatewayConnect>,
        ) -> Self {
            let mut v = self.transit_gateway_connects.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_connects = Some(v);
            self
        }
        pub fn set_transit_gateway_connects(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnect>>,
        ) -> Self {
            self.transit_gateway_connects = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayConnectsOutput {
            crate::output::DescribeTransitGatewayConnectsOutput {
                transit_gateway_connects: self.transit_gateway_connects,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayConnectsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayConnectsOutput`](crate::output::DescribeTransitGatewayConnectsOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_connects_output::Builder {
        crate::output::describe_transit_gateway_connects_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayConnectPeersOutput {
    /// <p>Information about the Connect peers.</p>
    pub transit_gateway_connect_peers:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnectPeer>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayConnectPeersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayConnectPeersOutput");
        formatter.field(
            "transit_gateway_connect_peers",
            &self.transit_gateway_connect_peers,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput)
pub mod describe_transit_gateway_connect_peers_output {
    /// A builder for [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect_peers:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnectPeer>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_connect_peers(
            mut self,
            inp: impl Into<crate::model::TransitGatewayConnectPeer>,
        ) -> Self {
            let mut v = self.transit_gateway_connect_peers.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_connect_peers = Some(v);
            self
        }
        pub fn set_transit_gateway_connect_peers(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayConnectPeer>>,
        ) -> Self {
            self.transit_gateway_connect_peers = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayConnectPeersOutput {
            crate::output::DescribeTransitGatewayConnectPeersOutput {
                transit_gateway_connect_peers: self.transit_gateway_connect_peers,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayConnectPeersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayConnectPeersOutput`](crate::output::DescribeTransitGatewayConnectPeersOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_connect_peers_output::Builder {
        crate::output::describe_transit_gateway_connect_peers_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTransitGatewayAttachmentsOutput {
    /// <p>Information about the attachments.</p>
    pub transit_gateway_attachments:
        std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachment>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTransitGatewayAttachmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTransitGatewayAttachmentsOutput");
        formatter.field(
            "transit_gateway_attachments",
            &self.transit_gateway_attachments,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput)
pub mod describe_transit_gateway_attachments_output {
    /// A builder for [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_attachments:
            std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachment>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn transit_gateway_attachments(
            mut self,
            inp: impl Into<crate::model::TransitGatewayAttachment>,
        ) -> Self {
            let mut v = self.transit_gateway_attachments.unwrap_or_default();
            v.push(inp.into());
            self.transit_gateway_attachments = Some(v);
            self
        }
        pub fn set_transit_gateway_attachments(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TransitGatewayAttachment>>,
        ) -> Self {
            self.transit_gateway_attachments = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput)
        pub fn build(self) -> crate::output::DescribeTransitGatewayAttachmentsOutput {
            crate::output::DescribeTransitGatewayAttachmentsOutput {
                transit_gateway_attachments: self.transit_gateway_attachments,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTransitGatewayAttachmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTransitGatewayAttachmentsOutput`](crate::output::DescribeTransitGatewayAttachmentsOutput)
    pub fn builder() -> crate::output::describe_transit_gateway_attachments_output::Builder {
        crate::output::describe_transit_gateway_attachments_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTrafficMirrorTargetsOutput {
    /// <p>Information about one or more Traffic Mirror targets.</p>
    pub traffic_mirror_targets:
        std::option::Option<std::vec::Vec<crate::model::TrafficMirrorTarget>>,
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTrafficMirrorTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTrafficMirrorTargetsOutput");
        formatter.field("traffic_mirror_targets", &self.traffic_mirror_targets);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput)
pub mod describe_traffic_mirror_targets_output {
    /// A builder for [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_targets:
            std::option::Option<std::vec::Vec<crate::model::TrafficMirrorTarget>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn traffic_mirror_targets(
            mut self,
            inp: impl Into<crate::model::TrafficMirrorTarget>,
        ) -> Self {
            let mut v = self.traffic_mirror_targets.unwrap_or_default();
            v.push(inp.into());
            self.traffic_mirror_targets = Some(v);
            self
        }
        pub fn set_traffic_mirror_targets(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TrafficMirrorTarget>>,
        ) -> Self {
            self.traffic_mirror_targets = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput)
        pub fn build(self) -> crate::output::DescribeTrafficMirrorTargetsOutput {
            crate::output::DescribeTrafficMirrorTargetsOutput {
                traffic_mirror_targets: self.traffic_mirror_targets,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTrafficMirrorTargetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorTargetsOutput`](crate::output::DescribeTrafficMirrorTargetsOutput)
    pub fn builder() -> crate::output::describe_traffic_mirror_targets_output::Builder {
        crate::output::describe_traffic_mirror_targets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTrafficMirrorSessionsOutput {
    /// <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
    pub traffic_mirror_sessions:
        std::option::Option<std::vec::Vec<crate::model::TrafficMirrorSession>>,
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTrafficMirrorSessionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTrafficMirrorSessionsOutput");
        formatter.field("traffic_mirror_sessions", &self.traffic_mirror_sessions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput)
pub mod describe_traffic_mirror_sessions_output {
    /// A builder for [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_sessions:
            std::option::Option<std::vec::Vec<crate::model::TrafficMirrorSession>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn traffic_mirror_sessions(
            mut self,
            inp: impl Into<crate::model::TrafficMirrorSession>,
        ) -> Self {
            let mut v = self.traffic_mirror_sessions.unwrap_or_default();
            v.push(inp.into());
            self.traffic_mirror_sessions = Some(v);
            self
        }
        pub fn set_traffic_mirror_sessions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TrafficMirrorSession>>,
        ) -> Self {
            self.traffic_mirror_sessions = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput)
        pub fn build(self) -> crate::output::DescribeTrafficMirrorSessionsOutput {
            crate::output::DescribeTrafficMirrorSessionsOutput {
                traffic_mirror_sessions: self.traffic_mirror_sessions,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTrafficMirrorSessionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorSessionsOutput`](crate::output::DescribeTrafficMirrorSessionsOutput)
    pub fn builder() -> crate::output::describe_traffic_mirror_sessions_output::Builder {
        crate::output::describe_traffic_mirror_sessions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTrafficMirrorFiltersOutput {
    /// <p>Information about one or more Traffic Mirror filters.</p>
    pub traffic_mirror_filters:
        std::option::Option<std::vec::Vec<crate::model::TrafficMirrorFilter>>,
    /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeTrafficMirrorFiltersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTrafficMirrorFiltersOutput");
        formatter.field("traffic_mirror_filters", &self.traffic_mirror_filters);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput)
pub mod describe_traffic_mirror_filters_output {
    /// A builder for [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filters:
            std::option::Option<std::vec::Vec<crate::model::TrafficMirrorFilter>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn traffic_mirror_filters(
            mut self,
            inp: impl Into<crate::model::TrafficMirrorFilter>,
        ) -> Self {
            let mut v = self.traffic_mirror_filters.unwrap_or_default();
            v.push(inp.into());
            self.traffic_mirror_filters = Some(v);
            self
        }
        pub fn set_traffic_mirror_filters(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TrafficMirrorFilter>>,
        ) -> Self {
            self.traffic_mirror_filters = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput)
        pub fn build(self) -> crate::output::DescribeTrafficMirrorFiltersOutput {
            crate::output::DescribeTrafficMirrorFiltersOutput {
                traffic_mirror_filters: self.traffic_mirror_filters,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeTrafficMirrorFiltersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficMirrorFiltersOutput`](crate::output::DescribeTrafficMirrorFiltersOutput)
    pub fn builder() -> crate::output::describe_traffic_mirror_filters_output::Builder {
        crate::output::describe_traffic_mirror_filters_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTagsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is
    /// <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The tags.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
}
impl std::fmt::Debug for DescribeTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTagsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
pub mod describe_tags_output {
    /// A builder for [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is
        /// <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::TagDescription>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
        pub fn build(self) -> crate::output::DescribeTagsOutput {
            crate::output::DescribeTagsOutput {
                next_token: self.next_token,
                tags: self.tags,
            }
        }
    }
}
impl DescribeTagsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTagsOutput`](crate::output::DescribeTagsOutput)
    pub fn builder() -> crate::output::describe_tags_output::Builder {
        crate::output::describe_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSubnetsOutput {
    /// <p>Information about one or more subnets.</p>
    pub subnets: std::option::Option<std::vec::Vec<crate::model::Subnet>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeSubnetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSubnetsOutput");
        formatter.field("subnets", &self.subnets);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput)
pub mod describe_subnets_output {
    /// A builder for [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnets: std::option::Option<std::vec::Vec<crate::model::Subnet>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn subnets(mut self, inp: impl Into<crate::model::Subnet>) -> Self {
            let mut v = self.subnets.unwrap_or_default();
            v.push(inp.into());
            self.subnets = Some(v);
            self
        }
        pub fn set_subnets(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Subnet>>,
        ) -> Self {
            self.subnets = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput)
        pub fn build(self) -> crate::output::DescribeSubnetsOutput {
            crate::output::DescribeSubnetsOutput {
                subnets: self.subnets,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeSubnetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSubnetsOutput`](crate::output::DescribeSubnetsOutput)
    pub fn builder() -> crate::output::describe_subnets_output::Builder {
        crate::output::describe_subnets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeStoreImageTasksOutput {
    /// <p>The information about the AMI store tasks.</p>
    pub store_image_task_results:
        std::option::Option<std::vec::Vec<crate::model::StoreImageTaskResult>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
    /// when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeStoreImageTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeStoreImageTasksOutput");
        formatter.field("store_image_task_results", &self.store_image_task_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput)
pub mod describe_store_image_tasks_output {
    /// A builder for [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) store_image_task_results:
            std::option::Option<std::vec::Vec<crate::model::StoreImageTaskResult>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn store_image_task_results(
            mut self,
            inp: impl Into<crate::model::StoreImageTaskResult>,
        ) -> Self {
            let mut v = self.store_image_task_results.unwrap_or_default();
            v.push(inp.into());
            self.store_image_task_results = Some(v);
            self
        }
        pub fn set_store_image_task_results(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::StoreImageTaskResult>>,
        ) -> Self {
            self.store_image_task_results = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
        /// when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput)
        pub fn build(self) -> crate::output::DescribeStoreImageTasksOutput {
            crate::output::DescribeStoreImageTasksOutput {
                store_image_task_results: self.store_image_task_results,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeStoreImageTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStoreImageTasksOutput`](crate::output::DescribeStoreImageTasksOutput)
    pub fn builder() -> crate::output::describe_store_image_tasks_output::Builder {
        crate::output::describe_store_image_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeStaleSecurityGroupsOutput {
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the stale security groups.</p>
    pub stale_security_group_set:
        std::option::Option<std::vec::Vec<crate::model::StaleSecurityGroup>>,
}
impl std::fmt::Debug for DescribeStaleSecurityGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeStaleSecurityGroupsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("stale_security_group_set", &self.stale_security_group_set);
        formatter.finish()
    }
}
/// See [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput)
pub mod describe_stale_security_groups_output {
    /// A builder for [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) stale_security_group_set:
            std::option::Option<std::vec::Vec<crate::model::StaleSecurityGroup>>,
    }
    impl Builder {
        /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn stale_security_group_set(
            mut self,
            inp: impl Into<crate::model::StaleSecurityGroup>,
        ) -> Self {
            let mut v = self.stale_security_group_set.unwrap_or_default();
            v.push(inp.into());
            self.stale_security_group_set = Some(v);
            self
        }
        pub fn set_stale_security_group_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::StaleSecurityGroup>>,
        ) -> Self {
            self.stale_security_group_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput)
        pub fn build(self) -> crate::output::DescribeStaleSecurityGroupsOutput {
            crate::output::DescribeStaleSecurityGroupsOutput {
                next_token: self.next_token,
                stale_security_group_set: self.stale_security_group_set,
            }
        }
    }
}
impl DescribeStaleSecurityGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStaleSecurityGroupsOutput`](crate::output::DescribeStaleSecurityGroupsOutput)
    pub fn builder() -> crate::output::describe_stale_security_groups_output::Builder {
        crate::output::describe_stale_security_groups_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotPriceHistory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSpotPriceHistoryOutput {
    /// <p>The token required to retrieve the next set of results. This value is null or an empty
    /// string when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The historical Spot prices.</p>
    pub spot_price_history: std::option::Option<std::vec::Vec<crate::model::SpotPrice>>,
}
impl std::fmt::Debug for DescribeSpotPriceHistoryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSpotPriceHistoryOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("spot_price_history", &self.spot_price_history);
        formatter.finish()
    }
}
/// See [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput)
pub mod describe_spot_price_history_output {
    /// A builder for [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_price_history: std::option::Option<std::vec::Vec<crate::model::SpotPrice>>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is null or an empty
        /// string when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn spot_price_history(mut self, inp: impl Into<crate::model::SpotPrice>) -> Self {
            let mut v = self.spot_price_history.unwrap_or_default();
            v.push(inp.into());
            self.spot_price_history = Some(v);
            self
        }
        pub fn set_spot_price_history(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SpotPrice>>,
        ) -> Self {
            self.spot_price_history = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput)
        pub fn build(self) -> crate::output::DescribeSpotPriceHistoryOutput {
            crate::output::DescribeSpotPriceHistoryOutput {
                next_token: self.next_token,
                spot_price_history: self.spot_price_history,
            }
        }
    }
}
impl DescribeSpotPriceHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotPriceHistoryOutput`](crate::output::DescribeSpotPriceHistoryOutput)
    pub fn builder() -> crate::output::describe_spot_price_history_output::Builder {
        crate::output::describe_spot_price_history_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotInstanceRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSpotInstanceRequestsOutput {
    /// <p>One or more Spot Instance requests.</p>
    pub spot_instance_requests:
        std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
    /// <p>The token to use to retrieve the next set of results. This value is <code>null</code>
    /// when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeSpotInstanceRequestsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSpotInstanceRequestsOutput");
        formatter.field("spot_instance_requests", &self.spot_instance_requests);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput)
pub mod describe_spot_instance_requests_output {
    /// A builder for [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_instance_requests:
            std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn spot_instance_requests(
            mut self,
            inp: impl Into<crate::model::SpotInstanceRequest>,
        ) -> Self {
            let mut v = self.spot_instance_requests.unwrap_or_default();
            v.push(inp.into());
            self.spot_instance_requests = Some(v);
            self
        }
        pub fn set_spot_instance_requests(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SpotInstanceRequest>>,
        ) -> Self {
            self.spot_instance_requests = inp;
            self
        }
        /// <p>The token to use to retrieve the next set of results. This value is <code>null</code>
        /// when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput)
        pub fn build(self) -> crate::output::DescribeSpotInstanceRequestsOutput {
            crate::output::DescribeSpotInstanceRequestsOutput {
                spot_instance_requests: self.spot_instance_requests,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeSpotInstanceRequestsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotInstanceRequestsOutput`](crate::output::DescribeSpotInstanceRequestsOutput)
    pub fn builder() -> crate::output::describe_spot_instance_requests_output::Builder {
        crate::output::describe_spot_instance_requests_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotFleetRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSpotFleetRequestsOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the configuration of your Spot Fleet.</p>
    pub spot_fleet_request_configs:
        std::option::Option<std::vec::Vec<crate::model::SpotFleetRequestConfig>>,
}
impl std::fmt::Debug for DescribeSpotFleetRequestsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSpotFleetRequestsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "spot_fleet_request_configs",
            &self.spot_fleet_request_configs,
        );
        formatter.finish()
    }
}
/// See [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput)
pub mod describe_spot_fleet_requests_output {
    /// A builder for [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_fleet_request_configs:
            std::option::Option<std::vec::Vec<crate::model::SpotFleetRequestConfig>>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn spot_fleet_request_configs(
            mut self,
            inp: impl Into<crate::model::SpotFleetRequestConfig>,
        ) -> Self {
            let mut v = self.spot_fleet_request_configs.unwrap_or_default();
            v.push(inp.into());
            self.spot_fleet_request_configs = Some(v);
            self
        }
        pub fn set_spot_fleet_request_configs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SpotFleetRequestConfig>>,
        ) -> Self {
            self.spot_fleet_request_configs = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput)
        pub fn build(self) -> crate::output::DescribeSpotFleetRequestsOutput {
            crate::output::DescribeSpotFleetRequestsOutput {
                next_token: self.next_token,
                spot_fleet_request_configs: self.spot_fleet_request_configs,
            }
        }
    }
}
impl DescribeSpotFleetRequestsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetRequestsOutput`](crate::output::DescribeSpotFleetRequestsOutput)
    pub fn builder() -> crate::output::describe_spot_fleet_requests_output::Builder {
        crate::output::describe_spot_fleet_requests_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotFleetRequestHistory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSpotFleetRequestHistoryOutput {
    /// <p>Information about the events in the history of the Spot Fleet request.</p>
    pub history_records: std::option::Option<std::vec::Vec<crate::model::HistoryRecord>>,
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    /// All records up to this time were retrieved.</p>
    /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    pub last_evaluated_time: std::option::Option<smithy_types::Instant>,
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: std::option::Option<std::string::String>,
    /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeSpotFleetRequestHistoryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSpotFleetRequestHistoryOutput");
        formatter.field("history_records", &self.history_records);
        formatter.field("last_evaluated_time", &self.last_evaluated_time);
        formatter.field("next_token", &self.next_token);
        formatter.field("spot_fleet_request_id", &self.spot_fleet_request_id);
        formatter.field("start_time", &self.start_time);
        formatter.finish()
    }
}
/// See [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput)
pub mod describe_spot_fleet_request_history_output {
    /// A builder for [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) history_records: std::option::Option<std::vec::Vec<crate::model::HistoryRecord>>,
        pub(crate) last_evaluated_time: std::option::Option<smithy_types::Instant>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_fleet_request_id: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        pub fn history_records(mut self, inp: impl Into<crate::model::HistoryRecord>) -> Self {
            let mut v = self.history_records.unwrap_or_default();
            v.push(inp.into());
            self.history_records = Some(v);
            self
        }
        pub fn set_history_records(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::HistoryRecord>>,
        ) -> Self {
            self.history_records = inp;
            self
        }
        /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
        /// All records up to this time were retrieved.</p>
        /// <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
        pub fn last_evaluated_time(mut self, inp: smithy_types::Instant) -> Self {
            self.last_evaluated_time = Some(inp);
            self
        }
        pub fn set_last_evaluated_time(
            mut self,
            inp: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_evaluated_time = inp;
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn spot_fleet_request_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.spot_fleet_request_id = Some(inp.into());
            self
        }
        pub fn set_spot_fleet_request_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.spot_fleet_request_id = inp;
            self
        }
        /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        pub fn start_time(mut self, inp: smithy_types::Instant) -> Self {
            self.start_time = Some(inp);
            self
        }
        pub fn set_start_time(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.start_time = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput)
        pub fn build(self) -> crate::output::DescribeSpotFleetRequestHistoryOutput {
            crate::output::DescribeSpotFleetRequestHistoryOutput {
                history_records: self.history_records,
                last_evaluated_time: self.last_evaluated_time,
                next_token: self.next_token,
                spot_fleet_request_id: self.spot_fleet_request_id,
                start_time: self.start_time,
            }
        }
    }
}
impl DescribeSpotFleetRequestHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetRequestHistoryOutput`](crate::output::DescribeSpotFleetRequestHistoryOutput)
    pub fn builder() -> crate::output::describe_spot_fleet_request_history_output::Builder {
        crate::output::describe_spot_fleet_request_history_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotFleetInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSpotFleetInstancesOutput {
    /// <p>The running instances. This list is refreshed periodically and might be out of
    /// date.</p>
    pub active_instances: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeSpotFleetInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSpotFleetInstancesOutput");
        formatter.field("active_instances", &self.active_instances);
        formatter.field("next_token", &self.next_token);
        formatter.field("spot_fleet_request_id", &self.spot_fleet_request_id);
        formatter.finish()
    }
}
/// See [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput)
pub mod describe_spot_fleet_instances_output {
    /// A builder for [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) active_instances:
            std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) spot_fleet_request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn active_instances(mut self, inp: impl Into<crate::model::ActiveInstance>) -> Self {
            let mut v = self.active_instances.unwrap_or_default();
            v.push(inp.into());
            self.active_instances = Some(v);
            self
        }
        pub fn set_active_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        ) -> Self {
            self.active_instances = inp;
            self
        }
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// <p>The ID of the Spot Fleet request.</p>
        pub fn spot_fleet_request_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.spot_fleet_request_id = Some(inp.into());
            self
        }
        pub fn set_spot_fleet_request_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.spot_fleet_request_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput)
        pub fn build(self) -> crate::output::DescribeSpotFleetInstancesOutput {
            crate::output::DescribeSpotFleetInstancesOutput {
                active_instances: self.active_instances,
                next_token: self.next_token,
                spot_fleet_request_id: self.spot_fleet_request_id,
            }
        }
    }
}
impl DescribeSpotFleetInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotFleetInstancesOutput`](crate::output::DescribeSpotFleetInstancesOutput)
    pub fn builder() -> crate::output::describe_spot_fleet_instances_output::Builder {
        crate::output::describe_spot_fleet_instances_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeSpotDatafeedSubscription.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSpotDatafeedSubscriptionOutput {
    /// <p>The Spot Instance data feed subscription.</p>
    pub spot_datafeed_subscription: std::option::Option<crate::model::SpotDatafeedSubscription>,
}
impl std::fmt::Debug for DescribeSpotDatafeedSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSpotDatafeedSubscriptionOutput");
        formatter.field(
            "spot_datafeed_subscription",
            &self.spot_datafeed_subscription,
        );
        formatter.finish()
    }
}
/// See [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput)
pub mod describe_spot_datafeed_subscription_output {
    /// A builder for [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_datafeed_subscription:
            std::option::Option<crate::model::SpotDatafeedSubscription>,
    }
    impl Builder {
        /// <p>The Spot Instance data feed subscription.</p>
        pub fn spot_datafeed_subscription(
            mut self,
            inp: crate::model::SpotDatafeedSubscription,
        ) -> Self {
            self.spot_datafeed_subscription = Some(inp);
            self
        }
        pub fn set_spot_datafeed_subscription(
            mut self,
            inp: std::option::Option<crate::model::SpotDatafeedSubscription>,
        ) -> Self {
            self.spot_datafeed_subscription = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput)
        pub fn build(self) -> crate::output::DescribeSpotDatafeedSubscriptionOutput {
            crate::output::DescribeSpotDatafeedSubscriptionOutput {
                spot_datafeed_subscription: self.spot_datafeed_subscription,
            }
        }
    }
}
impl DescribeSpotDatafeedSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotDatafeedSubscriptionOutput`](crate::output::DescribeSpotDatafeedSubscriptionOutput)
    pub fn builder() -> crate::output::describe_spot_datafeed_subscription_output::Builder {
        crate::output::describe_spot_datafeed_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSnapshotsOutput {
    /// <p>Information about the snapshots.</p>
    pub snapshots: std::option::Option<std::vec::Vec<crate::model::Snapshot>>,
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code>
    /// request. When the results of a <code>DescribeSnapshots</code> request exceed
    /// <code>MaxResults</code>, this value can be used to retrieve the next page of results. This
    /// value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeSnapshotsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSnapshotsOutput");
        formatter.field("snapshots", &self.snapshots);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput)
pub mod describe_snapshots_output {
    /// A builder for [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshots: std::option::Option<std::vec::Vec<crate::model::Snapshot>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn snapshots(mut self, inp: impl Into<crate::model::Snapshot>) -> Self {
            let mut v = self.snapshots.unwrap_or_default();
            v.push(inp.into());
            self.snapshots = Some(v);
            self
        }
        pub fn set_snapshots(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Snapshot>>,
        ) -> Self {
            self.snapshots = inp;
            self
        }
        /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code>
        /// request. When the results of a <code>DescribeSnapshots</code> request exceed
        /// <code>MaxResults</code>, this value can be used to retrieve the next page of results. This
        /// value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput)
        pub fn build(self) -> crate::output::DescribeSnapshotsOutput {
            crate::output::DescribeSnapshotsOutput {
                snapshots: self.snapshots,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput)
    pub fn builder() -> crate::output::describe_snapshots_output::Builder {
        crate::output::describe_snapshots_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSnapshotAttributeOutput {
    /// <p>The users and groups that have the permissions for creating volumes from the
    /// snapshot.</p>
    pub create_volume_permissions:
        std::option::Option<std::vec::Vec<crate::model::CreateVolumePermission>>,
    /// <p>The product codes.</p>
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>The ID of the EBS snapshot.</p>
    pub snapshot_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeSnapshotAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSnapshotAttributeOutput");
        formatter.field("create_volume_permissions", &self.create_volume_permissions);
        formatter.field("product_codes", &self.product_codes);
        formatter.field("snapshot_id", &self.snapshot_id);
        formatter.finish()
    }
}
/// See [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput)
pub mod describe_snapshot_attribute_output {
    /// A builder for [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) create_volume_permissions:
            std::option::Option<std::vec::Vec<crate::model::CreateVolumePermission>>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn create_volume_permissions(
            mut self,
            inp: impl Into<crate::model::CreateVolumePermission>,
        ) -> Self {
            let mut v = self.create_volume_permissions.unwrap_or_default();
            v.push(inp.into());
            self.create_volume_permissions = Some(v);
            self
        }
        pub fn set_create_volume_permissions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CreateVolumePermission>>,
        ) -> Self {
            self.create_volume_permissions = inp;
            self
        }
        pub fn product_codes(mut self, inp: impl Into<crate::model::ProductCode>) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(inp.into());
            self.product_codes = Some(v);
            self
        }
        pub fn set_product_codes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = inp;
            self
        }
        /// <p>The ID of the EBS snapshot.</p>
        pub fn snapshot_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        pub fn set_snapshot_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput)
        pub fn build(self) -> crate::output::DescribeSnapshotAttributeOutput {
            crate::output::DescribeSnapshotAttributeOutput {
                create_volume_permissions: self.create_volume_permissions,
                product_codes: self.product_codes,
                snapshot_id: self.snapshot_id,
            }
        }
    }
}
impl DescribeSnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotAttributeOutput`](crate::output::DescribeSnapshotAttributeOutput)
    pub fn builder() -> crate::output::describe_snapshot_attribute_output::Builder {
        crate::output::describe_snapshot_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSecurityGroupsOutput {
    /// <p>Information about the security groups.</p>
    pub security_groups: std::option::Option<std::vec::Vec<crate::model::SecurityGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeSecurityGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSecurityGroupsOutput");
        formatter.field("security_groups", &self.security_groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput)
pub mod describe_security_groups_output {
    /// A builder for [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_groups: std::option::Option<std::vec::Vec<crate::model::SecurityGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn security_groups(mut self, inp: impl Into<crate::model::SecurityGroup>) -> Self {
            let mut v = self.security_groups.unwrap_or_default();
            v.push(inp.into());
            self.security_groups = Some(v);
            self
        }
        pub fn set_security_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SecurityGroup>>,
        ) -> Self {
            self.security_groups = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput)
        pub fn build(self) -> crate::output::DescribeSecurityGroupsOutput {
            crate::output::DescribeSecurityGroupsOutput {
                security_groups: self.security_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeSecurityGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupsOutput`](crate::output::DescribeSecurityGroupsOutput)
    pub fn builder() -> crate::output::describe_security_groups_output::Builder {
        crate::output::describe_security_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSecurityGroupReferencesOutput {
    /// <p>Information about the VPCs with the referencing security groups.</p>
    pub security_group_reference_set:
        std::option::Option<std::vec::Vec<crate::model::SecurityGroupReference>>,
}
impl std::fmt::Debug for DescribeSecurityGroupReferencesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSecurityGroupReferencesOutput");
        formatter.field(
            "security_group_reference_set",
            &self.security_group_reference_set,
        );
        formatter.finish()
    }
}
/// See [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput)
pub mod describe_security_group_references_output {
    /// A builder for [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_group_reference_set:
            std::option::Option<std::vec::Vec<crate::model::SecurityGroupReference>>,
    }
    impl Builder {
        pub fn security_group_reference_set(
            mut self,
            inp: impl Into<crate::model::SecurityGroupReference>,
        ) -> Self {
            let mut v = self.security_group_reference_set.unwrap_or_default();
            v.push(inp.into());
            self.security_group_reference_set = Some(v);
            self
        }
        pub fn set_security_group_reference_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SecurityGroupReference>>,
        ) -> Self {
            self.security_group_reference_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput)
        pub fn build(self) -> crate::output::DescribeSecurityGroupReferencesOutput {
            crate::output::DescribeSecurityGroupReferencesOutput {
                security_group_reference_set: self.security_group_reference_set,
            }
        }
    }
}
impl DescribeSecurityGroupReferencesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSecurityGroupReferencesOutput`](crate::output::DescribeSecurityGroupReferencesOutput)
    pub fn builder() -> crate::output::describe_security_group_references_output::Builder {
        crate::output::describe_security_group_references_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeScheduledInstancesOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the Scheduled Instances.</p>
    pub scheduled_instance_set: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
}
impl std::fmt::Debug for DescribeScheduledInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeScheduledInstancesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("scheduled_instance_set", &self.scheduled_instance_set);
        formatter.finish()
    }
}
/// See [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput)
pub mod describe_scheduled_instances_output {
    /// A builder for [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) scheduled_instance_set:
            std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn scheduled_instance_set(
            mut self,
            inp: impl Into<crate::model::ScheduledInstance>,
        ) -> Self {
            let mut v = self.scheduled_instance_set.unwrap_or_default();
            v.push(inp.into());
            self.scheduled_instance_set = Some(v);
            self
        }
        pub fn set_scheduled_instance_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ScheduledInstance>>,
        ) -> Self {
            self.scheduled_instance_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput)
        pub fn build(self) -> crate::output::DescribeScheduledInstancesOutput {
            crate::output::DescribeScheduledInstancesOutput {
                next_token: self.next_token,
                scheduled_instance_set: self.scheduled_instance_set,
            }
        }
    }
}
impl DescribeScheduledInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledInstancesOutput`](crate::output::DescribeScheduledInstancesOutput)
    pub fn builder() -> crate::output::describe_scheduled_instances_output::Builder {
        crate::output::describe_scheduled_instances_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeScheduledInstanceAvailability.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeScheduledInstanceAvailabilityOutput {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the available Scheduled Instances.</p>
    pub scheduled_instance_availability_set:
        std::option::Option<std::vec::Vec<crate::model::ScheduledInstanceAvailability>>,
}
impl std::fmt::Debug for DescribeScheduledInstanceAvailabilityOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeScheduledInstanceAvailabilityOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "scheduled_instance_availability_set",
            &self.scheduled_instance_availability_set,
        );
        formatter.finish()
    }
}
/// See [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput)
pub mod describe_scheduled_instance_availability_output {
    /// A builder for [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) scheduled_instance_availability_set:
            std::option::Option<std::vec::Vec<crate::model::ScheduledInstanceAvailability>>,
    }
    impl Builder {
        /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn scheduled_instance_availability_set(
            mut self,
            inp: impl Into<crate::model::ScheduledInstanceAvailability>,
        ) -> Self {
            let mut v = self.scheduled_instance_availability_set.unwrap_or_default();
            v.push(inp.into());
            self.scheduled_instance_availability_set = Some(v);
            self
        }
        pub fn set_scheduled_instance_availability_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ScheduledInstanceAvailability>>,
        ) -> Self {
            self.scheduled_instance_availability_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput)
        pub fn build(self) -> crate::output::DescribeScheduledInstanceAvailabilityOutput {
            crate::output::DescribeScheduledInstanceAvailabilityOutput {
                next_token: self.next_token,
                scheduled_instance_availability_set: self.scheduled_instance_availability_set,
            }
        }
    }
}
impl DescribeScheduledInstanceAvailabilityOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledInstanceAvailabilityOutput`](crate::output::DescribeScheduledInstanceAvailabilityOutput)
    pub fn builder() -> crate::output::describe_scheduled_instance_availability_output::Builder {
        crate::output::describe_scheduled_instance_availability_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeRouteTables.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeRouteTablesOutput {
    /// <p>Information about one or more route tables.</p>
    pub route_tables: std::option::Option<std::vec::Vec<crate::model::RouteTable>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeRouteTablesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeRouteTablesOutput");
        formatter.field("route_tables", &self.route_tables);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput)
pub mod describe_route_tables_output {
    /// A builder for [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route_tables: std::option::Option<std::vec::Vec<crate::model::RouteTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn route_tables(mut self, inp: impl Into<crate::model::RouteTable>) -> Self {
            let mut v = self.route_tables.unwrap_or_default();
            v.push(inp.into());
            self.route_tables = Some(v);
            self
        }
        pub fn set_route_tables(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::RouteTable>>,
        ) -> Self {
            self.route_tables = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput)
        pub fn build(self) -> crate::output::DescribeRouteTablesOutput {
            crate::output::DescribeRouteTablesOutput {
                route_tables: self.route_tables,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeRouteTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRouteTablesOutput`](crate::output::DescribeRouteTablesOutput)
    pub fn builder() -> crate::output::describe_route_tables_output::Builder {
        crate::output::describe_route_tables_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeReservedInstancesOfferings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedInstancesOfferingsOutput {
    /// <p>A list of Reserved Instances offerings.</p>
    pub reserved_instances_offerings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesOffering>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when
    /// there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeReservedInstancesOfferingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedInstancesOfferingsOutput");
        formatter.field(
            "reserved_instances_offerings",
            &self.reserved_instances_offerings,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput)
pub mod describe_reserved_instances_offerings_output {
    /// A builder for [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_offerings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesOffering>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn reserved_instances_offerings(
            mut self,
            inp: impl Into<crate::model::ReservedInstancesOffering>,
        ) -> Self {
            let mut v = self.reserved_instances_offerings.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instances_offerings = Some(v);
            self
        }
        pub fn set_reserved_instances_offerings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesOffering>>,
        ) -> Self {
            self.reserved_instances_offerings = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when
        /// there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput)
        pub fn build(self) -> crate::output::DescribeReservedInstancesOfferingsOutput {
            crate::output::DescribeReservedInstancesOfferingsOutput {
                reserved_instances_offerings: self.reserved_instances_offerings,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeReservedInstancesOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesOfferingsOutput`](crate::output::DescribeReservedInstancesOfferingsOutput)
    pub fn builder() -> crate::output::describe_reserved_instances_offerings_output::Builder {
        crate::output::describe_reserved_instances_offerings_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeReservedInstancesModifications.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedInstancesModificationsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when
    /// there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The Reserved Instance modification information.</p>
    pub reserved_instances_modifications:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesModification>>,
}
impl std::fmt::Debug for DescribeReservedInstancesModificationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedInstancesModificationsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "reserved_instances_modifications",
            &self.reserved_instances_modifications,
        );
        formatter.finish()
    }
}
/// See [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput)
pub mod describe_reserved_instances_modifications_output {
    /// A builder for [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) reserved_instances_modifications:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesModification>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when
        /// there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn reserved_instances_modifications(
            mut self,
            inp: impl Into<crate::model::ReservedInstancesModification>,
        ) -> Self {
            let mut v = self.reserved_instances_modifications.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instances_modifications = Some(v);
            self
        }
        pub fn set_reserved_instances_modifications(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesModification>>,
        ) -> Self {
            self.reserved_instances_modifications = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput)
        pub fn build(self) -> crate::output::DescribeReservedInstancesModificationsOutput {
            crate::output::DescribeReservedInstancesModificationsOutput {
                next_token: self.next_token,
                reserved_instances_modifications: self.reserved_instances_modifications,
            }
        }
    }
}
impl DescribeReservedInstancesModificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesModificationsOutput`](crate::output::DescribeReservedInstancesModificationsOutput)
    pub fn builder() -> crate::output::describe_reserved_instances_modifications_output::Builder {
        crate::output::describe_reserved_instances_modifications_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeReservedInstancesListings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedInstancesListingsOutput {
    /// <p>Information about the Reserved Instance listing.</p>
    pub reserved_instances_listings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
}
impl std::fmt::Debug for DescribeReservedInstancesListingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedInstancesListingsOutput");
        formatter.field(
            "reserved_instances_listings",
            &self.reserved_instances_listings,
        );
        formatter.finish()
    }
}
/// See [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput)
pub mod describe_reserved_instances_listings_output {
    /// A builder for [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_listings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
    }
    impl Builder {
        pub fn reserved_instances_listings(
            mut self,
            inp: impl Into<crate::model::ReservedInstancesListing>,
        ) -> Self {
            let mut v = self.reserved_instances_listings.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instances_listings = Some(v);
            self
        }
        pub fn set_reserved_instances_listings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        ) -> Self {
            self.reserved_instances_listings = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput)
        pub fn build(self) -> crate::output::DescribeReservedInstancesListingsOutput {
            crate::output::DescribeReservedInstancesListingsOutput {
                reserved_instances_listings: self.reserved_instances_listings,
            }
        }
    }
}
impl DescribeReservedInstancesListingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesListingsOutput`](crate::output::DescribeReservedInstancesListingsOutput)
    pub fn builder() -> crate::output::describe_reserved_instances_listings_output::Builder {
        crate::output::describe_reserved_instances_listings_output::Builder::default()
    }
}

/// <p>Contains the output for DescribeReservedInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedInstancesOutput {
    /// <p>A list of Reserved Instances.</p>
    pub reserved_instances: std::option::Option<std::vec::Vec<crate::model::ReservedInstances>>,
}
impl std::fmt::Debug for DescribeReservedInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedInstancesOutput");
        formatter.field("reserved_instances", &self.reserved_instances);
        formatter.finish()
    }
}
/// See [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput)
pub mod describe_reserved_instances_output {
    /// A builder for [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstances>>,
    }
    impl Builder {
        pub fn reserved_instances(
            mut self,
            inp: impl Into<crate::model::ReservedInstances>,
        ) -> Self {
            let mut v = self.reserved_instances.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instances = Some(v);
            self
        }
        pub fn set_reserved_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstances>>,
        ) -> Self {
            self.reserved_instances = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput)
        pub fn build(self) -> crate::output::DescribeReservedInstancesOutput {
            crate::output::DescribeReservedInstancesOutput {
                reserved_instances: self.reserved_instances,
            }
        }
    }
}
impl DescribeReservedInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedInstancesOutput`](crate::output::DescribeReservedInstancesOutput)
    pub fn builder() -> crate::output::describe_reserved_instances_output::Builder {
        crate::output::describe_reserved_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReplaceRootVolumeTasksOutput {
    /// <p>Information about the root volume replacement task.</p>
    pub replace_root_volume_tasks:
        std::option::Option<std::vec::Vec<crate::model::ReplaceRootVolumeTask>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no
    /// more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeReplaceRootVolumeTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReplaceRootVolumeTasksOutput");
        formatter.field("replace_root_volume_tasks", &self.replace_root_volume_tasks);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput)
pub mod describe_replace_root_volume_tasks_output {
    /// A builder for [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replace_root_volume_tasks:
            std::option::Option<std::vec::Vec<crate::model::ReplaceRootVolumeTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn replace_root_volume_tasks(
            mut self,
            inp: impl Into<crate::model::ReplaceRootVolumeTask>,
        ) -> Self {
            let mut v = self.replace_root_volume_tasks.unwrap_or_default();
            v.push(inp.into());
            self.replace_root_volume_tasks = Some(v);
            self
        }
        pub fn set_replace_root_volume_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReplaceRootVolumeTask>>,
        ) -> Self {
            self.replace_root_volume_tasks = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no
        /// more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput)
        pub fn build(self) -> crate::output::DescribeReplaceRootVolumeTasksOutput {
            crate::output::DescribeReplaceRootVolumeTasksOutput {
                replace_root_volume_tasks: self.replace_root_volume_tasks,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeReplaceRootVolumeTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReplaceRootVolumeTasksOutput`](crate::output::DescribeReplaceRootVolumeTasksOutput)
    pub fn builder() -> crate::output::describe_replace_root_volume_tasks_output::Builder {
        crate::output::describe_replace_root_volume_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeRegionsOutput {
    /// <p>Information about the Regions.</p>
    pub regions: std::option::Option<std::vec::Vec<crate::model::Region>>,
}
impl std::fmt::Debug for DescribeRegionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeRegionsOutput");
        formatter.field("regions", &self.regions);
        formatter.finish()
    }
}
/// See [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput)
pub mod describe_regions_output {
    /// A builder for [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) regions: std::option::Option<std::vec::Vec<crate::model::Region>>,
    }
    impl Builder {
        pub fn regions(mut self, inp: impl Into<crate::model::Region>) -> Self {
            let mut v = self.regions.unwrap_or_default();
            v.push(inp.into());
            self.regions = Some(v);
            self
        }
        pub fn set_regions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Region>>,
        ) -> Self {
            self.regions = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput)
        pub fn build(self) -> crate::output::DescribeRegionsOutput {
            crate::output::DescribeRegionsOutput {
                regions: self.regions,
            }
        }
    }
}
impl DescribeRegionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRegionsOutput`](crate::output::DescribeRegionsOutput)
    pub fn builder() -> crate::output::describe_regions_output::Builder {
        crate::output::describe_regions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePublicIpv4PoolsOutput {
    /// <p>Information about the address pools.</p>
    pub public_ipv4_pools: std::option::Option<std::vec::Vec<crate::model::PublicIpv4Pool>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribePublicIpv4PoolsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePublicIpv4PoolsOutput");
        formatter.field("public_ipv4_pools", &self.public_ipv4_pools);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput)
pub mod describe_public_ipv4_pools_output {
    /// A builder for [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) public_ipv4_pools:
            std::option::Option<std::vec::Vec<crate::model::PublicIpv4Pool>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn public_ipv4_pools(mut self, inp: impl Into<crate::model::PublicIpv4Pool>) -> Self {
            let mut v = self.public_ipv4_pools.unwrap_or_default();
            v.push(inp.into());
            self.public_ipv4_pools = Some(v);
            self
        }
        pub fn set_public_ipv4_pools(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::PublicIpv4Pool>>,
        ) -> Self {
            self.public_ipv4_pools = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput)
        pub fn build(self) -> crate::output::DescribePublicIpv4PoolsOutput {
            crate::output::DescribePublicIpv4PoolsOutput {
                public_ipv4_pools: self.public_ipv4_pools,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribePublicIpv4PoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePublicIpv4PoolsOutput`](crate::output::DescribePublicIpv4PoolsOutput)
    pub fn builder() -> crate::output::describe_public_ipv4_pools_output::Builder {
        crate::output::describe_public_ipv4_pools_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePrincipalIdFormatOutput {
    /// <p>Information about the ID format settings for the ARN.</p>
    pub principals: std::option::Option<std::vec::Vec<crate::model::PrincipalIdFormat>>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribePrincipalIdFormatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePrincipalIdFormatOutput");
        formatter.field("principals", &self.principals);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput)
pub mod describe_principal_id_format_output {
    /// A builder for [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) principals: std::option::Option<std::vec::Vec<crate::model::PrincipalIdFormat>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn principals(mut self, inp: impl Into<crate::model::PrincipalIdFormat>) -> Self {
            let mut v = self.principals.unwrap_or_default();
            v.push(inp.into());
            self.principals = Some(v);
            self
        }
        pub fn set_principals(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::PrincipalIdFormat>>,
        ) -> Self {
            self.principals = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput)
        pub fn build(self) -> crate::output::DescribePrincipalIdFormatOutput {
            crate::output::DescribePrincipalIdFormatOutput {
                principals: self.principals,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribePrincipalIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribePrincipalIdFormatOutput`](crate::output::DescribePrincipalIdFormatOutput)
    pub fn builder() -> crate::output::describe_principal_id_format_output::Builder {
        crate::output::describe_principal_id_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePrefixListsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>All available prefix lists.</p>
    pub prefix_lists: std::option::Option<std::vec::Vec<crate::model::PrefixList>>,
}
impl std::fmt::Debug for DescribePrefixListsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePrefixListsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("prefix_lists", &self.prefix_lists);
        formatter.finish()
    }
}
/// See [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput)
pub mod describe_prefix_lists_output {
    /// A builder for [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) prefix_lists: std::option::Option<std::vec::Vec<crate::model::PrefixList>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn prefix_lists(mut self, inp: impl Into<crate::model::PrefixList>) -> Self {
            let mut v = self.prefix_lists.unwrap_or_default();
            v.push(inp.into());
            self.prefix_lists = Some(v);
            self
        }
        pub fn set_prefix_lists(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::PrefixList>>,
        ) -> Self {
            self.prefix_lists = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput)
        pub fn build(self) -> crate::output::DescribePrefixListsOutput {
            crate::output::DescribePrefixListsOutput {
                next_token: self.next_token,
                prefix_lists: self.prefix_lists,
            }
        }
    }
}
impl DescribePrefixListsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePrefixListsOutput`](crate::output::DescribePrefixListsOutput)
    pub fn builder() -> crate::output::describe_prefix_lists_output::Builder {
        crate::output::describe_prefix_lists_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePlacementGroupsOutput {
    /// <p>Information about the placement groups.</p>
    pub placement_groups: std::option::Option<std::vec::Vec<crate::model::PlacementGroup>>,
}
impl std::fmt::Debug for DescribePlacementGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePlacementGroupsOutput");
        formatter.field("placement_groups", &self.placement_groups);
        formatter.finish()
    }
}
/// See [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput)
pub mod describe_placement_groups_output {
    /// A builder for [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) placement_groups:
            std::option::Option<std::vec::Vec<crate::model::PlacementGroup>>,
    }
    impl Builder {
        pub fn placement_groups(mut self, inp: impl Into<crate::model::PlacementGroup>) -> Self {
            let mut v = self.placement_groups.unwrap_or_default();
            v.push(inp.into());
            self.placement_groups = Some(v);
            self
        }
        pub fn set_placement_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::PlacementGroup>>,
        ) -> Self {
            self.placement_groups = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput)
        pub fn build(self) -> crate::output::DescribePlacementGroupsOutput {
            crate::output::DescribePlacementGroupsOutput {
                placement_groups: self.placement_groups,
            }
        }
    }
}
impl DescribePlacementGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePlacementGroupsOutput`](crate::output::DescribePlacementGroupsOutput)
    pub fn builder() -> crate::output::describe_placement_groups_output::Builder {
        crate::output::describe_placement_groups_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeNetworkInterfaces.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNetworkInterfacesOutput {
    /// <p>Information about one or more network interfaces.</p>
    pub network_interfaces: std::option::Option<std::vec::Vec<crate::model::NetworkInterface>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeNetworkInterfacesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNetworkInterfacesOutput");
        formatter.field("network_interfaces", &self.network_interfaces);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput)
pub mod describe_network_interfaces_output {
    /// A builder for [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interfaces:
            std::option::Option<std::vec::Vec<crate::model::NetworkInterface>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn network_interfaces(
            mut self,
            inp: impl Into<crate::model::NetworkInterface>,
        ) -> Self {
            let mut v = self.network_interfaces.unwrap_or_default();
            v.push(inp.into());
            self.network_interfaces = Some(v);
            self
        }
        pub fn set_network_interfaces(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::NetworkInterface>>,
        ) -> Self {
            self.network_interfaces = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput)
        pub fn build(self) -> crate::output::DescribeNetworkInterfacesOutput {
            crate::output::DescribeNetworkInterfacesOutput {
                network_interfaces: self.network_interfaces,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeNetworkInterfacesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfacesOutput`](crate::output::DescribeNetworkInterfacesOutput)
    pub fn builder() -> crate::output::describe_network_interfaces_output::Builder {
        crate::output::describe_network_interfaces_output::Builder::default()
    }
}

/// <p>Contains the output for DescribeNetworkInterfacePermissions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNetworkInterfacePermissionsOutput {
    /// <p>The network interface permissions.</p>
    pub network_interface_permissions:
        std::option::Option<std::vec::Vec<crate::model::NetworkInterfacePermission>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeNetworkInterfacePermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNetworkInterfacePermissionsOutput");
        formatter.field(
            "network_interface_permissions",
            &self.network_interface_permissions,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput)
pub mod describe_network_interface_permissions_output {
    /// A builder for [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface_permissions:
            std::option::Option<std::vec::Vec<crate::model::NetworkInterfacePermission>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn network_interface_permissions(
            mut self,
            inp: impl Into<crate::model::NetworkInterfacePermission>,
        ) -> Self {
            let mut v = self.network_interface_permissions.unwrap_or_default();
            v.push(inp.into());
            self.network_interface_permissions = Some(v);
            self
        }
        pub fn set_network_interface_permissions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::NetworkInterfacePermission>>,
        ) -> Self {
            self.network_interface_permissions = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput)
        pub fn build(self) -> crate::output::DescribeNetworkInterfacePermissionsOutput {
            crate::output::DescribeNetworkInterfacePermissionsOutput {
                network_interface_permissions: self.network_interface_permissions,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeNetworkInterfacePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfacePermissionsOutput`](crate::output::DescribeNetworkInterfacePermissionsOutput)
    pub fn builder() -> crate::output::describe_network_interface_permissions_output::Builder {
        crate::output::describe_network_interface_permissions_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeNetworkInterfaceAttribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNetworkInterfaceAttributeOutput {
    /// <p>The attachment (if any) of the network interface.</p>
    pub attachment: std::option::Option<crate::model::NetworkInterfaceAttachment>,
    /// <p>The description of the network interface.</p>
    pub description: std::option::Option<crate::model::AttributeValue>,
    /// <p>The security groups associated with the network interface.</p>
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether source/destination checking is enabled.</p>
    pub source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
}
impl std::fmt::Debug for DescribeNetworkInterfaceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNetworkInterfaceAttributeOutput");
        formatter.field("attachment", &self.attachment);
        formatter.field("description", &self.description);
        formatter.field("groups", &self.groups);
        formatter.field("network_interface_id", &self.network_interface_id);
        formatter.field("source_dest_check", &self.source_dest_check);
        formatter.finish()
    }
}
/// See [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput)
pub mod describe_network_interface_attribute_output {
    /// A builder for [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attachment: std::option::Option<crate::model::NetworkInterfaceAttachment>,
        pub(crate) description: std::option::Option<crate::model::AttributeValue>,
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        pub(crate) source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
    }
    impl Builder {
        /// <p>The attachment (if any) of the network interface.</p>
        pub fn attachment(mut self, inp: crate::model::NetworkInterfaceAttachment) -> Self {
            self.attachment = Some(inp);
            self
        }
        pub fn set_attachment(
            mut self,
            inp: std::option::Option<crate::model::NetworkInterfaceAttachment>,
        ) -> Self {
            self.attachment = inp;
            self
        }
        /// <p>The description of the network interface.</p>
        pub fn description(mut self, inp: crate::model::AttributeValue) -> Self {
            self.description = Some(inp);
            self
        }
        pub fn set_description(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.description = inp;
            self
        }
        pub fn groups(mut self, inp: impl Into<crate::model::GroupIdentifier>) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(inp.into());
            self.groups = Some(v);
            self
        }
        pub fn set_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        ) -> Self {
            self.groups = inp;
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(inp.into());
            self
        }
        pub fn set_network_interface_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = inp;
            self
        }
        /// <p>Indicates whether source/destination checking is enabled.</p>
        pub fn source_dest_check(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.source_dest_check = Some(inp);
            self
        }
        pub fn set_source_dest_check(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.source_dest_check = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput)
        pub fn build(self) -> crate::output::DescribeNetworkInterfaceAttributeOutput {
            crate::output::DescribeNetworkInterfaceAttributeOutput {
                attachment: self.attachment,
                description: self.description,
                groups: self.groups,
                network_interface_id: self.network_interface_id,
                source_dest_check: self.source_dest_check,
            }
        }
    }
}
impl DescribeNetworkInterfaceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfaceAttributeOutput`](crate::output::DescribeNetworkInterfaceAttributeOutput)
    pub fn builder() -> crate::output::describe_network_interface_attribute_output::Builder {
        crate::output::describe_network_interface_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNetworkInsightsPathsOutput {
    /// <p>Information about the paths.</p>
    pub network_insights_paths:
        std::option::Option<std::vec::Vec<crate::model::NetworkInsightsPath>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeNetworkInsightsPathsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNetworkInsightsPathsOutput");
        formatter.field("network_insights_paths", &self.network_insights_paths);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput)
pub mod describe_network_insights_paths_output {
    /// A builder for [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_paths:
            std::option::Option<std::vec::Vec<crate::model::NetworkInsightsPath>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn network_insights_paths(
            mut self,
            inp: impl Into<crate::model::NetworkInsightsPath>,
        ) -> Self {
            let mut v = self.network_insights_paths.unwrap_or_default();
            v.push(inp.into());
            self.network_insights_paths = Some(v);
            self
        }
        pub fn set_network_insights_paths(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::NetworkInsightsPath>>,
        ) -> Self {
            self.network_insights_paths = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput)
        pub fn build(self) -> crate::output::DescribeNetworkInsightsPathsOutput {
            crate::output::DescribeNetworkInsightsPathsOutput {
                network_insights_paths: self.network_insights_paths,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeNetworkInsightsPathsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsPathsOutput`](crate::output::DescribeNetworkInsightsPathsOutput)
    pub fn builder() -> crate::output::describe_network_insights_paths_output::Builder {
        crate::output::describe_network_insights_paths_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNetworkInsightsAnalysesOutput {
    /// <p>Information about the network insights analyses.</p>
    pub network_insights_analyses:
        std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAnalysis>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeNetworkInsightsAnalysesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNetworkInsightsAnalysesOutput");
        formatter.field("network_insights_analyses", &self.network_insights_analyses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput)
pub mod describe_network_insights_analyses_output {
    /// A builder for [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_analyses:
            std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAnalysis>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn network_insights_analyses(
            mut self,
            inp: impl Into<crate::model::NetworkInsightsAnalysis>,
        ) -> Self {
            let mut v = self.network_insights_analyses.unwrap_or_default();
            v.push(inp.into());
            self.network_insights_analyses = Some(v);
            self
        }
        pub fn set_network_insights_analyses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::NetworkInsightsAnalysis>>,
        ) -> Self {
            self.network_insights_analyses = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput)
        pub fn build(self) -> crate::output::DescribeNetworkInsightsAnalysesOutput {
            crate::output::DescribeNetworkInsightsAnalysesOutput {
                network_insights_analyses: self.network_insights_analyses,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeNetworkInsightsAnalysesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsAnalysesOutput`](crate::output::DescribeNetworkInsightsAnalysesOutput)
    pub fn builder() -> crate::output::describe_network_insights_analyses_output::Builder {
        crate::output::describe_network_insights_analyses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNetworkAclsOutput {
    /// <p>Information about one or more network ACLs.</p>
    pub network_acls: std::option::Option<std::vec::Vec<crate::model::NetworkAcl>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeNetworkAclsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNetworkAclsOutput");
        formatter.field("network_acls", &self.network_acls);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput)
pub mod describe_network_acls_output {
    /// A builder for [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_acls: std::option::Option<std::vec::Vec<crate::model::NetworkAcl>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn network_acls(mut self, inp: impl Into<crate::model::NetworkAcl>) -> Self {
            let mut v = self.network_acls.unwrap_or_default();
            v.push(inp.into());
            self.network_acls = Some(v);
            self
        }
        pub fn set_network_acls(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::NetworkAcl>>,
        ) -> Self {
            self.network_acls = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput)
        pub fn build(self) -> crate::output::DescribeNetworkAclsOutput {
            crate::output::DescribeNetworkAclsOutput {
                network_acls: self.network_acls,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeNetworkAclsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkAclsOutput`](crate::output::DescribeNetworkAclsOutput)
    pub fn builder() -> crate::output::describe_network_acls_output::Builder {
        crate::output::describe_network_acls_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeNatGatewaysOutput {
    /// <p>Information about the NAT gateways.</p>
    pub nat_gateways: std::option::Option<std::vec::Vec<crate::model::NatGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeNatGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeNatGatewaysOutput");
        formatter.field("nat_gateways", &self.nat_gateways);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput)
pub mod describe_nat_gateways_output {
    /// A builder for [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) nat_gateways: std::option::Option<std::vec::Vec<crate::model::NatGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn nat_gateways(mut self, inp: impl Into<crate::model::NatGateway>) -> Self {
            let mut v = self.nat_gateways.unwrap_or_default();
            v.push(inp.into());
            self.nat_gateways = Some(v);
            self
        }
        pub fn set_nat_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::NatGateway>>,
        ) -> Self {
            self.nat_gateways = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeNatGatewaysOutput {
            crate::output::DescribeNatGatewaysOutput {
                nat_gateways: self.nat_gateways,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeNatGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNatGatewaysOutput`](crate::output::DescribeNatGatewaysOutput)
    pub fn builder() -> crate::output::describe_nat_gateways_output::Builder {
        crate::output::describe_nat_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeMovingAddressesOutput {
    /// <p>The status for each Elastic IP address.</p>
    pub moving_address_statuses:
        std::option::Option<std::vec::Vec<crate::model::MovingAddressStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeMovingAddressesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeMovingAddressesOutput");
        formatter.field("moving_address_statuses", &self.moving_address_statuses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput)
pub mod describe_moving_addresses_output {
    /// A builder for [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) moving_address_statuses:
            std::option::Option<std::vec::Vec<crate::model::MovingAddressStatus>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn moving_address_statuses(
            mut self,
            inp: impl Into<crate::model::MovingAddressStatus>,
        ) -> Self {
            let mut v = self.moving_address_statuses.unwrap_or_default();
            v.push(inp.into());
            self.moving_address_statuses = Some(v);
            self
        }
        pub fn set_moving_address_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::MovingAddressStatus>>,
        ) -> Self {
            self.moving_address_statuses = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput)
        pub fn build(self) -> crate::output::DescribeMovingAddressesOutput {
            crate::output::DescribeMovingAddressesOutput {
                moving_address_statuses: self.moving_address_statuses,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeMovingAddressesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMovingAddressesOutput`](crate::output::DescribeMovingAddressesOutput)
    pub fn builder() -> crate::output::describe_moving_addresses_output::Builder {
        crate::output::describe_moving_addresses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeManagedPrefixListsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the prefix lists.</p>
    pub prefix_lists: std::option::Option<std::vec::Vec<crate::model::ManagedPrefixList>>,
}
impl std::fmt::Debug for DescribeManagedPrefixListsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeManagedPrefixListsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("prefix_lists", &self.prefix_lists);
        formatter.finish()
    }
}
/// See [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput)
pub mod describe_managed_prefix_lists_output {
    /// A builder for [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) prefix_lists:
            std::option::Option<std::vec::Vec<crate::model::ManagedPrefixList>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn prefix_lists(mut self, inp: impl Into<crate::model::ManagedPrefixList>) -> Self {
            let mut v = self.prefix_lists.unwrap_or_default();
            v.push(inp.into());
            self.prefix_lists = Some(v);
            self
        }
        pub fn set_prefix_lists(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ManagedPrefixList>>,
        ) -> Self {
            self.prefix_lists = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput)
        pub fn build(self) -> crate::output::DescribeManagedPrefixListsOutput {
            crate::output::DescribeManagedPrefixListsOutput {
                next_token: self.next_token,
                prefix_lists: self.prefix_lists,
            }
        }
    }
}
impl DescribeManagedPrefixListsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedPrefixListsOutput`](crate::output::DescribeManagedPrefixListsOutput)
    pub fn builder() -> crate::output::describe_managed_prefix_lists_output::Builder {
        crate::output::describe_managed_prefix_lists_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLocalGatewayVirtualInterfacesOutput {
    /// <p>Information about the virtual interfaces.</p>
    pub local_gateway_virtual_interfaces:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterface>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLocalGatewayVirtualInterfacesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLocalGatewayVirtualInterfacesOutput");
        formatter.field(
            "local_gateway_virtual_interfaces",
            &self.local_gateway_virtual_interfaces,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput)
pub mod describe_local_gateway_virtual_interfaces_output {
    /// A builder for [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_virtual_interfaces:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterface>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn local_gateway_virtual_interfaces(
            mut self,
            inp: impl Into<crate::model::LocalGatewayVirtualInterface>,
        ) -> Self {
            let mut v = self.local_gateway_virtual_interfaces.unwrap_or_default();
            v.push(inp.into());
            self.local_gateway_virtual_interfaces = Some(v);
            self
        }
        pub fn set_local_gateway_virtual_interfaces(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterface>>,
        ) -> Self {
            self.local_gateway_virtual_interfaces = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput)
        pub fn build(self) -> crate::output::DescribeLocalGatewayVirtualInterfacesOutput {
            crate::output::DescribeLocalGatewayVirtualInterfacesOutput {
                local_gateway_virtual_interfaces: self.local_gateway_virtual_interfaces,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLocalGatewayVirtualInterfacesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayVirtualInterfacesOutput`](crate::output::DescribeLocalGatewayVirtualInterfacesOutput)
    pub fn builder() -> crate::output::describe_local_gateway_virtual_interfaces_output::Builder {
        crate::output::describe_local_gateway_virtual_interfaces_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    /// <p>The virtual interface groups.</p>
    pub local_gateway_virtual_interface_groups:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLocalGatewayVirtualInterfaceGroupsOutput");
        formatter.field(
            "local_gateway_virtual_interface_groups",
            &self.local_gateway_virtual_interface_groups,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput)
pub mod describe_local_gateway_virtual_interface_groups_output {
    /// A builder for [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_virtual_interface_groups:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn local_gateway_virtual_interface_groups(
            mut self,
            inp: impl Into<crate::model::LocalGatewayVirtualInterfaceGroup>,
        ) -> Self {
            let mut v = self
                .local_gateway_virtual_interface_groups
                .unwrap_or_default();
            v.push(inp.into());
            self.local_gateway_virtual_interface_groups = Some(v);
            self
        }
        pub fn set_local_gateway_virtual_interface_groups(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayVirtualInterfaceGroup>,
            >,
        ) -> Self {
            self.local_gateway_virtual_interface_groups = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput)
        pub fn build(self) -> crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput {
            crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput {
                local_gateway_virtual_interface_groups: self.local_gateway_virtual_interface_groups,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayVirtualInterfaceGroupsOutput`](crate::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput)
    pub fn builder(
    ) -> crate::output::describe_local_gateway_virtual_interface_groups_output::Builder {
        crate::output::describe_local_gateway_virtual_interface_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLocalGatewaysOutput {
    /// <p>Information about the local gateways.</p>
    pub local_gateways: std::option::Option<std::vec::Vec<crate::model::LocalGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLocalGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLocalGatewaysOutput");
        formatter.field("local_gateways", &self.local_gateways);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput)
pub mod describe_local_gateways_output {
    /// A builder for [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateways: std::option::Option<std::vec::Vec<crate::model::LocalGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn local_gateways(mut self, inp: impl Into<crate::model::LocalGateway>) -> Self {
            let mut v = self.local_gateways.unwrap_or_default();
            v.push(inp.into());
            self.local_gateways = Some(v);
            self
        }
        pub fn set_local_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LocalGateway>>,
        ) -> Self {
            self.local_gateways = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeLocalGatewaysOutput {
            crate::output::DescribeLocalGatewaysOutput {
                local_gateways: self.local_gateways,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLocalGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewaysOutput`](crate::output::DescribeLocalGatewaysOutput)
    pub fn builder() -> crate::output::describe_local_gateways_output::Builder {
        crate::output::describe_local_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub local_gateway_route_table_vpc_associations:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLocalGatewayRouteTableVpcAssociationsOutput");
        formatter.field(
            "local_gateway_route_table_vpc_associations",
            &self.local_gateway_route_table_vpc_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput)
pub mod describe_local_gateway_route_table_vpc_associations_output {
    /// A builder for [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_vpc_associations:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn local_gateway_route_table_vpc_associations(
            mut self,
            inp: impl Into<crate::model::LocalGatewayRouteTableVpcAssociation>,
        ) -> Self {
            let mut v = self
                .local_gateway_route_table_vpc_associations
                .unwrap_or_default();
            v.push(inp.into());
            self.local_gateway_route_table_vpc_associations = Some(v);
            self
        }
        pub fn set_local_gateway_route_table_vpc_associations(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayRouteTableVpcAssociation>,
            >,
        ) -> Self {
            self.local_gateway_route_table_vpc_associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput)
        pub fn build(self) -> crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput {
            crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput {
                local_gateway_route_table_vpc_associations: self
                    .local_gateway_route_table_vpc_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTableVpcAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput)
    pub fn builder(
    ) -> crate::output::describe_local_gateway_route_table_vpc_associations_output::Builder {
        crate::output::describe_local_gateway_route_table_vpc_associations_output::Builder::default(
        )
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
    /// <p>Information about the associations.</p>
    pub local_gateway_route_table_virtual_interface_group_associations: std::option::Option<
        std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
    >,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter =
            f.debug_struct("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput");
        formatter.field(
            "local_gateway_route_table_virtual_interface_group_associations",
            &self.local_gateway_route_table_virtual_interface_group_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
pub mod describe_local_gateway_route_table_virtual_interface_group_associations_output {
    /// A builder for [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_virtual_interface_group_associations:
            std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
            >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn local_gateway_route_table_virtual_interface_group_associations(
            mut self,
            inp: impl Into<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
        ) -> Self {
            let mut v = self
                .local_gateway_route_table_virtual_interface_group_associations
                .unwrap_or_default();
            v.push(inp.into());
            self.local_gateway_route_table_virtual_interface_group_associations = Some(v);
            self
        }
        pub fn set_local_gateway_route_table_virtual_interface_group_associations(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation>,
            >,
        ) -> Self {
            self.local_gateway_route_table_virtual_interface_group_associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
        pub fn build(
            self,
        ) -> crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
        {
            crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
                local_gateway_route_table_virtual_interface_group_associations: self
                    .local_gateway_route_table_virtual_interface_group_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput`](crate::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
    pub fn builder() -> crate::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder{
        crate::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLocalGatewayRouteTablesOutput {
    /// <p>Information about the local gateway route tables.</p>
    pub local_gateway_route_tables:
        std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTable>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLocalGatewayRouteTablesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLocalGatewayRouteTablesOutput");
        formatter.field(
            "local_gateway_route_tables",
            &self.local_gateway_route_tables,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput)
pub mod describe_local_gateway_route_tables_output {
    /// A builder for [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_tables:
            std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTable>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn local_gateway_route_tables(
            mut self,
            inp: impl Into<crate::model::LocalGatewayRouteTable>,
        ) -> Self {
            let mut v = self.local_gateway_route_tables.unwrap_or_default();
            v.push(inp.into());
            self.local_gateway_route_tables = Some(v);
            self
        }
        pub fn set_local_gateway_route_tables(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LocalGatewayRouteTable>>,
        ) -> Self {
            self.local_gateway_route_tables = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput)
        pub fn build(self) -> crate::output::DescribeLocalGatewayRouteTablesOutput {
            crate::output::DescribeLocalGatewayRouteTablesOutput {
                local_gateway_route_tables: self.local_gateway_route_tables,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLocalGatewayRouteTablesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocalGatewayRouteTablesOutput`](crate::output::DescribeLocalGatewayRouteTablesOutput)
    pub fn builder() -> crate::output::describe_local_gateway_route_tables_output::Builder {
        crate::output::describe_local_gateway_route_tables_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLaunchTemplateVersionsOutput {
    /// <p>Information about the launch template versions.</p>
    pub launch_template_versions:
        std::option::Option<std::vec::Vec<crate::model::LaunchTemplateVersion>>,
    /// <p>The token to use to retrieve the next page of results. This value is
    /// <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLaunchTemplateVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLaunchTemplateVersionsOutput");
        formatter.field("launch_template_versions", &self.launch_template_versions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput)
pub mod describe_launch_template_versions_output {
    /// A builder for [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template_versions:
            std::option::Option<std::vec::Vec<crate::model::LaunchTemplateVersion>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn launch_template_versions(
            mut self,
            inp: impl Into<crate::model::LaunchTemplateVersion>,
        ) -> Self {
            let mut v = self.launch_template_versions.unwrap_or_default();
            v.push(inp.into());
            self.launch_template_versions = Some(v);
            self
        }
        pub fn set_launch_template_versions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LaunchTemplateVersion>>,
        ) -> Self {
            self.launch_template_versions = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is
        /// <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput)
        pub fn build(self) -> crate::output::DescribeLaunchTemplateVersionsOutput {
            crate::output::DescribeLaunchTemplateVersionsOutput {
                launch_template_versions: self.launch_template_versions,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLaunchTemplateVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplateVersionsOutput`](crate::output::DescribeLaunchTemplateVersionsOutput)
    pub fn builder() -> crate::output::describe_launch_template_versions_output::Builder {
        crate::output::describe_launch_template_versions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLaunchTemplatesOutput {
    /// <p>Information about the launch templates.</p>
    pub launch_templates: std::option::Option<std::vec::Vec<crate::model::LaunchTemplate>>,
    /// <p>The token to use to retrieve the next page of results. This value is
    /// <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeLaunchTemplatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLaunchTemplatesOutput");
        formatter.field("launch_templates", &self.launch_templates);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput)
pub mod describe_launch_templates_output {
    /// A builder for [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_templates:
            std::option::Option<std::vec::Vec<crate::model::LaunchTemplate>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn launch_templates(mut self, inp: impl Into<crate::model::LaunchTemplate>) -> Self {
            let mut v = self.launch_templates.unwrap_or_default();
            v.push(inp.into());
            self.launch_templates = Some(v);
            self
        }
        pub fn set_launch_templates(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LaunchTemplate>>,
        ) -> Self {
            self.launch_templates = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is
        /// <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput)
        pub fn build(self) -> crate::output::DescribeLaunchTemplatesOutput {
            crate::output::DescribeLaunchTemplatesOutput {
                launch_templates: self.launch_templates,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeLaunchTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplatesOutput`](crate::output::DescribeLaunchTemplatesOutput)
    pub fn builder() -> crate::output::describe_launch_templates_output::Builder {
        crate::output::describe_launch_templates_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeKeyPairsOutput {
    /// <p>Information about the key pairs.</p>
    pub key_pairs: std::option::Option<std::vec::Vec<crate::model::KeyPairInfo>>,
}
impl std::fmt::Debug for DescribeKeyPairsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeKeyPairsOutput");
        formatter.field("key_pairs", &self.key_pairs);
        formatter.finish()
    }
}
/// See [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput)
pub mod describe_key_pairs_output {
    /// A builder for [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_pairs: std::option::Option<std::vec::Vec<crate::model::KeyPairInfo>>,
    }
    impl Builder {
        pub fn key_pairs(mut self, inp: impl Into<crate::model::KeyPairInfo>) -> Self {
            let mut v = self.key_pairs.unwrap_or_default();
            v.push(inp.into());
            self.key_pairs = Some(v);
            self
        }
        pub fn set_key_pairs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::KeyPairInfo>>,
        ) -> Self {
            self.key_pairs = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput)
        pub fn build(self) -> crate::output::DescribeKeyPairsOutput {
            crate::output::DescribeKeyPairsOutput {
                key_pairs: self.key_pairs,
            }
        }
    }
}
impl DescribeKeyPairsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeKeyPairsOutput`](crate::output::DescribeKeyPairsOutput)
    pub fn builder() -> crate::output::describe_key_pairs_output::Builder {
        crate::output::describe_key_pairs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeIpv6PoolsOutput {
    /// <p>Information about the IPv6 address pools.</p>
    pub ipv6_pools: std::option::Option<std::vec::Vec<crate::model::Ipv6Pool>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeIpv6PoolsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeIpv6PoolsOutput");
        formatter.field("ipv6_pools", &self.ipv6_pools);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput)
pub mod describe_ipv6_pools_output {
    /// A builder for [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_pools: std::option::Option<std::vec::Vec<crate::model::Ipv6Pool>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn ipv6_pools(mut self, inp: impl Into<crate::model::Ipv6Pool>) -> Self {
            let mut v = self.ipv6_pools.unwrap_or_default();
            v.push(inp.into());
            self.ipv6_pools = Some(v);
            self
        }
        pub fn set_ipv6_pools(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Ipv6Pool>>,
        ) -> Self {
            self.ipv6_pools = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput)
        pub fn build(self) -> crate::output::DescribeIpv6PoolsOutput {
            crate::output::DescribeIpv6PoolsOutput {
                ipv6_pools: self.ipv6_pools,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeIpv6PoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIpv6PoolsOutput`](crate::output::DescribeIpv6PoolsOutput)
    pub fn builder() -> crate::output::describe_ipv6_pools_output::Builder {
        crate::output::describe_ipv6_pools_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInternetGatewaysOutput {
    /// <p>Information about one or more internet gateways.</p>
    pub internet_gateways: std::option::Option<std::vec::Vec<crate::model::InternetGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInternetGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInternetGatewaysOutput");
        formatter.field("internet_gateways", &self.internet_gateways);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput)
pub mod describe_internet_gateways_output {
    /// A builder for [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) internet_gateways:
            std::option::Option<std::vec::Vec<crate::model::InternetGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn internet_gateways(mut self, inp: impl Into<crate::model::InternetGateway>) -> Self {
            let mut v = self.internet_gateways.unwrap_or_default();
            v.push(inp.into());
            self.internet_gateways = Some(v);
            self
        }
        pub fn set_internet_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InternetGateway>>,
        ) -> Self {
            self.internet_gateways = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeInternetGatewaysOutput {
            crate::output::DescribeInternetGatewaysOutput {
                internet_gateways: self.internet_gateways,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeInternetGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInternetGatewaysOutput`](crate::output::DescribeInternetGatewaysOutput)
    pub fn builder() -> crate::output::describe_internet_gateways_output::Builder {
        crate::output::describe_internet_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceTypesOutput {
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub instance_types: std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfo>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there
    /// are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInstanceTypesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceTypesOutput");
        formatter.field("instance_types", &self.instance_types);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput)
pub mod describe_instance_types_output {
    /// A builder for [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_types:
            std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instance_types(mut self, inp: impl Into<crate::model::InstanceTypeInfo>) -> Self {
            let mut v = self.instance_types.unwrap_or_default();
            v.push(inp.into());
            self.instance_types = Some(v);
            self
        }
        pub fn set_instance_types(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceTypeInfo>>,
        ) -> Self {
            self.instance_types = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput)
        pub fn build(self) -> crate::output::DescribeInstanceTypesOutput {
            crate::output::DescribeInstanceTypesOutput {
                instance_types: self.instance_types,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeInstanceTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypesOutput`](crate::output::DescribeInstanceTypesOutput)
    pub fn builder() -> crate::output::describe_instance_types_output::Builder {
        crate::output::describe_instance_types_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceTypeOfferingsOutput {
    /// <p>The instance types offered.</p>
    pub instance_type_offerings:
        std::option::Option<std::vec::Vec<crate::model::InstanceTypeOffering>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there
    /// are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInstanceTypeOfferingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceTypeOfferingsOutput");
        formatter.field("instance_type_offerings", &self.instance_type_offerings);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput)
pub mod describe_instance_type_offerings_output {
    /// A builder for [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_type_offerings:
            std::option::Option<std::vec::Vec<crate::model::InstanceTypeOffering>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instance_type_offerings(
            mut self,
            inp: impl Into<crate::model::InstanceTypeOffering>,
        ) -> Self {
            let mut v = self.instance_type_offerings.unwrap_or_default();
            v.push(inp.into());
            self.instance_type_offerings = Some(v);
            self
        }
        pub fn set_instance_type_offerings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceTypeOffering>>,
        ) -> Self {
            self.instance_type_offerings = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput)
        pub fn build(self) -> crate::output::DescribeInstanceTypeOfferingsOutput {
            crate::output::DescribeInstanceTypeOfferingsOutput {
                instance_type_offerings: self.instance_type_offerings,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeInstanceTypeOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypeOfferingsOutput`](crate::output::DescribeInstanceTypeOfferingsOutput)
    pub fn builder() -> crate::output::describe_instance_type_offerings_output::Builder {
        crate::output::describe_instance_type_offerings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceStatusOutput {
    /// <p>Information about the status of the instances.</p>
    pub instance_statuses: std::option::Option<std::vec::Vec<crate::model::InstanceStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
    /// when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInstanceStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceStatusOutput");
        formatter.field("instance_statuses", &self.instance_statuses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput)
pub mod describe_instance_status_output {
    /// A builder for [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_statuses:
            std::option::Option<std::vec::Vec<crate::model::InstanceStatus>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instance_statuses(mut self, inp: impl Into<crate::model::InstanceStatus>) -> Self {
            let mut v = self.instance_statuses.unwrap_or_default();
            v.push(inp.into());
            self.instance_statuses = Some(v);
            self
        }
        pub fn set_instance_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceStatus>>,
        ) -> Self {
            self.instance_statuses = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
        /// when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput)
        pub fn build(self) -> crate::output::DescribeInstanceStatusOutput {
            crate::output::DescribeInstanceStatusOutput {
                instance_statuses: self.instance_statuses,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeInstanceStatusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceStatusOutput`](crate::output::DescribeInstanceStatusOutput)
    pub fn builder() -> crate::output::describe_instance_status_output::Builder {
        crate::output::describe_instance_status_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstancesOutput {
    /// <p>Information about the reservations.</p>
    pub reservations: std::option::Option<std::vec::Vec<crate::model::Reservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
    /// when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstancesOutput");
        formatter.field("reservations", &self.reservations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput)
pub mod describe_instances_output {
    /// A builder for [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reservations: std::option::Option<std::vec::Vec<crate::model::Reservation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn reservations(mut self, inp: impl Into<crate::model::Reservation>) -> Self {
            let mut v = self.reservations.unwrap_or_default();
            v.push(inp.into());
            self.reservations = Some(v);
            self
        }
        pub fn set_reservations(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Reservation>>,
        ) -> Self {
            self.reservations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
        /// when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput)
        pub fn build(self) -> crate::output::DescribeInstancesOutput {
            crate::output::DescribeInstancesOutput {
                reservations: self.reservations,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstancesOutput`](crate::output::DescribeInstancesOutput)
    pub fn builder() -> crate::output::describe_instances_output::Builder {
        crate::output::describe_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceEventNotificationAttributesOutput {
    /// <p>Information about the registered tag keys.</p>
    pub instance_tag_attribute: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
}
impl std::fmt::Debug for DescribeInstanceEventNotificationAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceEventNotificationAttributesOutput");
        formatter.field("instance_tag_attribute", &self.instance_tag_attribute);
        formatter.finish()
    }
}
/// See [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput)
pub mod describe_instance_event_notification_attributes_output {
    /// A builder for [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_tag_attribute:
            std::option::Option<crate::model::InstanceTagNotificationAttribute>,
    }
    impl Builder {
        /// <p>Information about the registered tag keys.</p>
        pub fn instance_tag_attribute(
            mut self,
            inp: crate::model::InstanceTagNotificationAttribute,
        ) -> Self {
            self.instance_tag_attribute = Some(inp);
            self
        }
        pub fn set_instance_tag_attribute(
            mut self,
            inp: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        ) -> Self {
            self.instance_tag_attribute = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput)
        pub fn build(self) -> crate::output::DescribeInstanceEventNotificationAttributesOutput {
            crate::output::DescribeInstanceEventNotificationAttributesOutput {
                instance_tag_attribute: self.instance_tag_attribute,
            }
        }
    }
}
impl DescribeInstanceEventNotificationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceEventNotificationAttributesOutput`](crate::output::DescribeInstanceEventNotificationAttributesOutput)
    pub fn builder(
    ) -> crate::output::describe_instance_event_notification_attributes_output::Builder {
        crate::output::describe_instance_event_notification_attributes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceCreditSpecificationsOutput {
    /// <p>Information about the credit option for CPU usage of an instance.</p>
    pub instance_credit_specifications:
        std::option::Option<std::vec::Vec<crate::model::InstanceCreditSpecification>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
    /// when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInstanceCreditSpecificationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceCreditSpecificationsOutput");
        formatter.field(
            "instance_credit_specifications",
            &self.instance_credit_specifications,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput)
pub mod describe_instance_credit_specifications_output {
    /// A builder for [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_credit_specifications:
            std::option::Option<std::vec::Vec<crate::model::InstanceCreditSpecification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instance_credit_specifications(
            mut self,
            inp: impl Into<crate::model::InstanceCreditSpecification>,
        ) -> Self {
            let mut v = self.instance_credit_specifications.unwrap_or_default();
            v.push(inp.into());
            self.instance_credit_specifications = Some(v);
            self
        }
        pub fn set_instance_credit_specifications(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceCreditSpecification>>,
        ) -> Self {
            self.instance_credit_specifications = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code>
        /// when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput)
        pub fn build(self) -> crate::output::DescribeInstanceCreditSpecificationsOutput {
            crate::output::DescribeInstanceCreditSpecificationsOutput {
                instance_credit_specifications: self.instance_credit_specifications,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeInstanceCreditSpecificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceCreditSpecificationsOutput`](crate::output::DescribeInstanceCreditSpecificationsOutput)
    pub fn builder() -> crate::output::describe_instance_credit_specifications_output::Builder {
        crate::output::describe_instance_credit_specifications_output::Builder::default()
    }
}

/// <p>Describes an instance attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstanceAttributeOutput {
    /// <p>The security groups associated with the instance.</p>
    pub groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
    /// <p>The block device mapping of the instance.</p>
    pub block_device_mappings:
        std::option::Option<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>>,
    /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon
    /// EC2 console, CLI, or API; otherwise, you can.</p>
    pub disable_api_termination: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
    pub ena_support: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>To enable the instance for AWS Nitro Enclaves, set this parameter to <code>true</code>; otherwise,
    /// set it to <code>false</code>.</p>
    pub enclave_options: std::option::Option<crate::model::EnclaveOptions>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
    pub ebs_optimized: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>The ID of the instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the
    /// instance (using the operating system command for system shutdown).</p>
    pub instance_initiated_shutdown_behavior: std::option::Option<crate::model::AttributeValue>,
    /// <p>The instance type.</p>
    pub instance_type: std::option::Option<crate::model::AttributeValue>,
    /// <p>The kernel ID.</p>
    pub kernel_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>A list of product codes.</p>
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>The RAM disk ID.</p>
    pub ramdisk_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>The device name of the root device volume (for example,
    /// <code>/dev/sda1</code>).</p>
    pub root_device_name: std::option::Option<crate::model::AttributeValue>,
    /// <p>Enable or disable source/destination checks, which ensure that the instance
    /// is either the source or the destination of any traffic that it receives.
    /// If the value is <code>true</code>, source/destination checks are enabled;
    /// otherwise, they are disabled. The default value is <code>true</code>.
    /// You must disable source/destination checks if the instance runs services
    /// such as network address translation, routing, or firewalls.</p>
    pub source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface
    /// is enabled.</p>
    pub sriov_net_support: std::option::Option<crate::model::AttributeValue>,
    /// <p>The user data.</p>
    pub user_data: std::option::Option<crate::model::AttributeValue>,
}
impl std::fmt::Debug for DescribeInstanceAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstanceAttributeOutput");
        formatter.field("groups", &self.groups);
        formatter.field("block_device_mappings", &self.block_device_mappings);
        formatter.field("disable_api_termination", &self.disable_api_termination);
        formatter.field("ena_support", &self.ena_support);
        formatter.field("enclave_options", &self.enclave_options);
        formatter.field("ebs_optimized", &self.ebs_optimized);
        formatter.field("instance_id", &self.instance_id);
        formatter.field(
            "instance_initiated_shutdown_behavior",
            &self.instance_initiated_shutdown_behavior,
        );
        formatter.field("instance_type", &self.instance_type);
        formatter.field("kernel_id", &self.kernel_id);
        formatter.field("product_codes", &self.product_codes);
        formatter.field("ramdisk_id", &self.ramdisk_id);
        formatter.field("root_device_name", &self.root_device_name);
        formatter.field("source_dest_check", &self.source_dest_check);
        formatter.field("sriov_net_support", &self.sriov_net_support);
        formatter.field("user_data", &self.user_data);
        formatter.finish()
    }
}
/// See [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
pub mod describe_instance_attribute_output {
    /// A builder for [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        pub(crate) block_device_mappings:
            std::option::Option<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>>,
        pub(crate) disable_api_termination:
            std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) ena_support: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) enclave_options: std::option::Option<crate::model::EnclaveOptions>,
        pub(crate) ebs_optimized: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) instance_initiated_shutdown_behavior:
            std::option::Option<crate::model::AttributeValue>,
        pub(crate) instance_type: std::option::Option<crate::model::AttributeValue>,
        pub(crate) kernel_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) ramdisk_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) root_device_name: std::option::Option<crate::model::AttributeValue>,
        pub(crate) source_dest_check: std::option::Option<crate::model::AttributeBooleanValue>,
        pub(crate) sriov_net_support: std::option::Option<crate::model::AttributeValue>,
        pub(crate) user_data: std::option::Option<crate::model::AttributeValue>,
    }
    impl Builder {
        pub fn groups(mut self, inp: impl Into<crate::model::GroupIdentifier>) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(inp.into());
            self.groups = Some(v);
            self
        }
        pub fn set_groups(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::GroupIdentifier>>,
        ) -> Self {
            self.groups = inp;
            self
        }
        pub fn block_device_mappings(
            mut self,
            inp: impl Into<crate::model::InstanceBlockDeviceMapping>,
        ) -> Self {
            let mut v = self.block_device_mappings.unwrap_or_default();
            v.push(inp.into());
            self.block_device_mappings = Some(v);
            self
        }
        pub fn set_block_device_mappings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::InstanceBlockDeviceMapping>>,
        ) -> Self {
            self.block_device_mappings = inp;
            self
        }
        /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon
        /// EC2 console, CLI, or API; otherwise, you can.</p>
        pub fn disable_api_termination(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.disable_api_termination = Some(inp);
            self
        }
        pub fn set_disable_api_termination(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.disable_api_termination = inp;
            self
        }
        /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
        pub fn ena_support(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.ena_support = Some(inp);
            self
        }
        pub fn set_ena_support(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.ena_support = inp;
            self
        }
        /// <p>To enable the instance for AWS Nitro Enclaves, set this parameter to <code>true</code>; otherwise,
        /// set it to <code>false</code>.</p>
        pub fn enclave_options(mut self, inp: crate::model::EnclaveOptions) -> Self {
            self.enclave_options = Some(inp);
            self
        }
        pub fn set_enclave_options(
            mut self,
            inp: std::option::Option<crate::model::EnclaveOptions>,
        ) -> Self {
            self.enclave_options = inp;
            self
        }
        /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
        pub fn ebs_optimized(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.ebs_optimized = Some(inp);
            self
        }
        pub fn set_ebs_optimized(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.ebs_optimized = inp;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the
        /// instance (using the operating system command for system shutdown).</p>
        pub fn instance_initiated_shutdown_behavior(
            mut self,
            inp: crate::model::AttributeValue,
        ) -> Self {
            self.instance_initiated_shutdown_behavior = Some(inp);
            self
        }
        pub fn set_instance_initiated_shutdown_behavior(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.instance_initiated_shutdown_behavior = inp;
            self
        }
        /// <p>The instance type.</p>
        pub fn instance_type(mut self, inp: crate::model::AttributeValue) -> Self {
            self.instance_type = Some(inp);
            self
        }
        pub fn set_instance_type(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.instance_type = inp;
            self
        }
        /// <p>The kernel ID.</p>
        pub fn kernel_id(mut self, inp: crate::model::AttributeValue) -> Self {
            self.kernel_id = Some(inp);
            self
        }
        pub fn set_kernel_id(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.kernel_id = inp;
            self
        }
        pub fn product_codes(mut self, inp: impl Into<crate::model::ProductCode>) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(inp.into());
            self.product_codes = Some(v);
            self
        }
        pub fn set_product_codes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = inp;
            self
        }
        /// <p>The RAM disk ID.</p>
        pub fn ramdisk_id(mut self, inp: crate::model::AttributeValue) -> Self {
            self.ramdisk_id = Some(inp);
            self
        }
        pub fn set_ramdisk_id(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.ramdisk_id = inp;
            self
        }
        /// <p>The device name of the root device volume (for example,
        /// <code>/dev/sda1</code>).</p>
        pub fn root_device_name(mut self, inp: crate::model::AttributeValue) -> Self {
            self.root_device_name = Some(inp);
            self
        }
        pub fn set_root_device_name(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.root_device_name = inp;
            self
        }
        /// <p>Enable or disable source/destination checks, which ensure that the instance
        /// is either the source or the destination of any traffic that it receives.
        /// If the value is <code>true</code>, source/destination checks are enabled;
        /// otherwise, they are disabled. The default value is <code>true</code>.
        /// You must disable source/destination checks if the instance runs services
        /// such as network address translation, routing, or firewalls.</p>
        pub fn source_dest_check(mut self, inp: crate::model::AttributeBooleanValue) -> Self {
            self.source_dest_check = Some(inp);
            self
        }
        pub fn set_source_dest_check(
            mut self,
            inp: std::option::Option<crate::model::AttributeBooleanValue>,
        ) -> Self {
            self.source_dest_check = inp;
            self
        }
        /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface
        /// is enabled.</p>
        pub fn sriov_net_support(mut self, inp: crate::model::AttributeValue) -> Self {
            self.sriov_net_support = Some(inp);
            self
        }
        pub fn set_sriov_net_support(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.sriov_net_support = inp;
            self
        }
        /// <p>The user data.</p>
        pub fn user_data(mut self, inp: crate::model::AttributeValue) -> Self {
            self.user_data = Some(inp);
            self
        }
        pub fn set_user_data(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.user_data = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
        pub fn build(self) -> crate::output::DescribeInstanceAttributeOutput {
            crate::output::DescribeInstanceAttributeOutput {
                groups: self.groups,
                block_device_mappings: self.block_device_mappings,
                disable_api_termination: self.disable_api_termination,
                ena_support: self.ena_support,
                enclave_options: self.enclave_options,
                ebs_optimized: self.ebs_optimized,
                instance_id: self.instance_id,
                instance_initiated_shutdown_behavior: self.instance_initiated_shutdown_behavior,
                instance_type: self.instance_type,
                kernel_id: self.kernel_id,
                product_codes: self.product_codes,
                ramdisk_id: self.ramdisk_id,
                root_device_name: self.root_device_name,
                source_dest_check: self.source_dest_check,
                sriov_net_support: self.sriov_net_support,
                user_data: self.user_data,
            }
        }
    }
}
impl DescribeInstanceAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceAttributeOutput`](crate::output::DescribeInstanceAttributeOutput)
    pub fn builder() -> crate::output::describe_instance_attribute_output::Builder {
        crate::output::describe_instance_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeImportSnapshotTasksOutput {
    /// <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the
    /// previous 7 days.</p>
    pub import_snapshot_tasks: std::option::Option<std::vec::Vec<crate::model::ImportSnapshotTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
    /// to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeImportSnapshotTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeImportSnapshotTasksOutput");
        formatter.field("import_snapshot_tasks", &self.import_snapshot_tasks);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput)
pub mod describe_import_snapshot_tasks_output {
    /// A builder for [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_snapshot_tasks:
            std::option::Option<std::vec::Vec<crate::model::ImportSnapshotTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn import_snapshot_tasks(
            mut self,
            inp: impl Into<crate::model::ImportSnapshotTask>,
        ) -> Self {
            let mut v = self.import_snapshot_tasks.unwrap_or_default();
            v.push(inp.into());
            self.import_snapshot_tasks = Some(v);
            self
        }
        pub fn set_import_snapshot_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ImportSnapshotTask>>,
        ) -> Self {
            self.import_snapshot_tasks = inp;
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
        /// to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput)
        pub fn build(self) -> crate::output::DescribeImportSnapshotTasksOutput {
            crate::output::DescribeImportSnapshotTasksOutput {
                import_snapshot_tasks: self.import_snapshot_tasks,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeImportSnapshotTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImportSnapshotTasksOutput`](crate::output::DescribeImportSnapshotTasksOutput)
    pub fn builder() -> crate::output::describe_import_snapshot_tasks_output::Builder {
        crate::output::describe_import_snapshot_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeImportImageTasksOutput {
    /// <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the
    /// previous 7 days.</p>
    pub import_image_tasks: std::option::Option<std::vec::Vec<crate::model::ImportImageTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
    /// to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeImportImageTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeImportImageTasksOutput");
        formatter.field("import_image_tasks", &self.import_image_tasks);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput)
pub mod describe_import_image_tasks_output {
    /// A builder for [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_image_tasks:
            std::option::Option<std::vec::Vec<crate::model::ImportImageTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn import_image_tasks(mut self, inp: impl Into<crate::model::ImportImageTask>) -> Self {
            let mut v = self.import_image_tasks.unwrap_or_default();
            v.push(inp.into());
            self.import_image_tasks = Some(v);
            self
        }
        pub fn set_import_image_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ImportImageTask>>,
        ) -> Self {
            self.import_image_tasks = inp;
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
        /// to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput)
        pub fn build(self) -> crate::output::DescribeImportImageTasksOutput {
            crate::output::DescribeImportImageTasksOutput {
                import_image_tasks: self.import_image_tasks,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeImportImageTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImportImageTasksOutput`](crate::output::DescribeImportImageTasksOutput)
    pub fn builder() -> crate::output::describe_import_image_tasks_output::Builder {
        crate::output::describe_import_image_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeImagesOutput {
    /// <p>Information about the images.</p>
    pub images: std::option::Option<std::vec::Vec<crate::model::Image>>,
}
impl std::fmt::Debug for DescribeImagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeImagesOutput");
        formatter.field("images", &self.images);
        formatter.finish()
    }
}
/// See [`DescribeImagesOutput`](crate::output::DescribeImagesOutput)
pub mod describe_images_output {
    /// A builder for [`DescribeImagesOutput`](crate::output::DescribeImagesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) images: std::option::Option<std::vec::Vec<crate::model::Image>>,
    }
    impl Builder {
        pub fn images(mut self, inp: impl Into<crate::model::Image>) -> Self {
            let mut v = self.images.unwrap_or_default();
            v.push(inp.into());
            self.images = Some(v);
            self
        }
        pub fn set_images(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Image>>,
        ) -> Self {
            self.images = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImagesOutput`](crate::output::DescribeImagesOutput)
        pub fn build(self) -> crate::output::DescribeImagesOutput {
            crate::output::DescribeImagesOutput {
                images: self.images,
            }
        }
    }
}
impl DescribeImagesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImagesOutput`](crate::output::DescribeImagesOutput)
    pub fn builder() -> crate::output::describe_images_output::Builder {
        crate::output::describe_images_output::Builder::default()
    }
}

/// <p>Describes an image attribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeImageAttributeOutput {
    /// <p>The block device mapping entries.</p>
    pub block_device_mappings: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
    /// <p>The ID of the AMI.</p>
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The launch permissions.</p>
    pub launch_permissions: std::option::Option<std::vec::Vec<crate::model::LaunchPermission>>,
    /// <p>The product codes.</p>
    pub product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
    /// <p>A description for the AMI.</p>
    pub description: std::option::Option<crate::model::AttributeValue>,
    /// <p>The kernel ID.</p>
    pub kernel_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>The RAM disk ID.</p>
    pub ramdisk_id: std::option::Option<crate::model::AttributeValue>,
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub sriov_net_support: std::option::Option<crate::model::AttributeValue>,
    /// <p>Describes a value for a resource attribute that is a String.</p>
    pub boot_mode: std::option::Option<crate::model::AttributeValue>,
}
impl std::fmt::Debug for DescribeImageAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeImageAttributeOutput");
        formatter.field("block_device_mappings", &self.block_device_mappings);
        formatter.field("image_id", &self.image_id);
        formatter.field("launch_permissions", &self.launch_permissions);
        formatter.field("product_codes", &self.product_codes);
        formatter.field("description", &self.description);
        formatter.field("kernel_id", &self.kernel_id);
        formatter.field("ramdisk_id", &self.ramdisk_id);
        formatter.field("sriov_net_support", &self.sriov_net_support);
        formatter.field("boot_mode", &self.boot_mode);
        formatter.finish()
    }
}
/// See [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput)
pub mod describe_image_attribute_output {
    /// A builder for [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) block_device_mappings:
            std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
        pub(crate) image_id: std::option::Option<std::string::String>,
        pub(crate) launch_permissions:
            std::option::Option<std::vec::Vec<crate::model::LaunchPermission>>,
        pub(crate) product_codes: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        pub(crate) description: std::option::Option<crate::model::AttributeValue>,
        pub(crate) kernel_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) ramdisk_id: std::option::Option<crate::model::AttributeValue>,
        pub(crate) sriov_net_support: std::option::Option<crate::model::AttributeValue>,
        pub(crate) boot_mode: std::option::Option<crate::model::AttributeValue>,
    }
    impl Builder {
        pub fn block_device_mappings(
            mut self,
            inp: impl Into<crate::model::BlockDeviceMapping>,
        ) -> Self {
            let mut v = self.block_device_mappings.unwrap_or_default();
            v.push(inp.into());
            self.block_device_mappings = Some(v);
            self
        }
        pub fn set_block_device_mappings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::BlockDeviceMapping>>,
        ) -> Self {
            self.block_device_mappings = inp;
            self
        }
        /// <p>The ID of the AMI.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        pub fn launch_permissions(
            mut self,
            inp: impl Into<crate::model::LaunchPermission>,
        ) -> Self {
            let mut v = self.launch_permissions.unwrap_or_default();
            v.push(inp.into());
            self.launch_permissions = Some(v);
            self
        }
        pub fn set_launch_permissions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::LaunchPermission>>,
        ) -> Self {
            self.launch_permissions = inp;
            self
        }
        pub fn product_codes(mut self, inp: impl Into<crate::model::ProductCode>) -> Self {
            let mut v = self.product_codes.unwrap_or_default();
            v.push(inp.into());
            self.product_codes = Some(v);
            self
        }
        pub fn set_product_codes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ProductCode>>,
        ) -> Self {
            self.product_codes = inp;
            self
        }
        /// <p>A description for the AMI.</p>
        pub fn description(mut self, inp: crate::model::AttributeValue) -> Self {
            self.description = Some(inp);
            self
        }
        pub fn set_description(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.description = inp;
            self
        }
        /// <p>The kernel ID.</p>
        pub fn kernel_id(mut self, inp: crate::model::AttributeValue) -> Self {
            self.kernel_id = Some(inp);
            self
        }
        pub fn set_kernel_id(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.kernel_id = inp;
            self
        }
        /// <p>The RAM disk ID.</p>
        pub fn ramdisk_id(mut self, inp: crate::model::AttributeValue) -> Self {
            self.ramdisk_id = Some(inp);
            self
        }
        pub fn set_ramdisk_id(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.ramdisk_id = inp;
            self
        }
        /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
        pub fn sriov_net_support(mut self, inp: crate::model::AttributeValue) -> Self {
            self.sriov_net_support = Some(inp);
            self
        }
        pub fn set_sriov_net_support(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.sriov_net_support = inp;
            self
        }
        /// <p>Describes a value for a resource attribute that is a String.</p>
        pub fn boot_mode(mut self, inp: crate::model::AttributeValue) -> Self {
            self.boot_mode = Some(inp);
            self
        }
        pub fn set_boot_mode(
            mut self,
            inp: std::option::Option<crate::model::AttributeValue>,
        ) -> Self {
            self.boot_mode = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput)
        pub fn build(self) -> crate::output::DescribeImageAttributeOutput {
            crate::output::DescribeImageAttributeOutput {
                block_device_mappings: self.block_device_mappings,
                image_id: self.image_id,
                launch_permissions: self.launch_permissions,
                product_codes: self.product_codes,
                description: self.description,
                kernel_id: self.kernel_id,
                ramdisk_id: self.ramdisk_id,
                sriov_net_support: self.sriov_net_support,
                boot_mode: self.boot_mode,
            }
        }
    }
}
impl DescribeImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImageAttributeOutput`](crate::output::DescribeImageAttributeOutput)
    pub fn builder() -> crate::output::describe_image_attribute_output::Builder {
        crate::output::describe_image_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeIdFormatOutput {
    /// <p>Information about the ID format for the resource.</p>
    pub statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
}
impl std::fmt::Debug for DescribeIdFormatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeIdFormatOutput");
        formatter.field("statuses", &self.statuses);
        formatter.finish()
    }
}
/// See [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput)
pub mod describe_id_format_output {
    /// A builder for [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
    }
    impl Builder {
        pub fn statuses(mut self, inp: impl Into<crate::model::IdFormat>) -> Self {
            let mut v = self.statuses.unwrap_or_default();
            v.push(inp.into());
            self.statuses = Some(v);
            self
        }
        pub fn set_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        ) -> Self {
            self.statuses = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput)
        pub fn build(self) -> crate::output::DescribeIdFormatOutput {
            crate::output::DescribeIdFormatOutput {
                statuses: self.statuses,
            }
        }
    }
}
impl DescribeIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIdFormatOutput`](crate::output::DescribeIdFormatOutput)
    pub fn builder() -> crate::output::describe_id_format_output::Builder {
        crate::output::describe_id_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeIdentityIdFormatOutput {
    /// <p>Information about the ID format for the resources.</p>
    pub statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
}
impl std::fmt::Debug for DescribeIdentityIdFormatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeIdentityIdFormatOutput");
        formatter.field("statuses", &self.statuses);
        formatter.finish()
    }
}
/// See [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput)
pub mod describe_identity_id_format_output {
    /// A builder for [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
    }
    impl Builder {
        pub fn statuses(mut self, inp: impl Into<crate::model::IdFormat>) -> Self {
            let mut v = self.statuses.unwrap_or_default();
            v.push(inp.into());
            self.statuses = Some(v);
            self
        }
        pub fn set_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        ) -> Self {
            self.statuses = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput)
        pub fn build(self) -> crate::output::DescribeIdentityIdFormatOutput {
            crate::output::DescribeIdentityIdFormatOutput {
                statuses: self.statuses,
            }
        }
    }
}
impl DescribeIdentityIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIdentityIdFormatOutput`](crate::output::DescribeIdentityIdFormatOutput)
    pub fn builder() -> crate::output::describe_identity_id_format_output::Builder {
        crate::output::describe_identity_id_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeIamInstanceProfileAssociationsOutput {
    /// <p>Information about the IAM instance profile associations.</p>
    pub iam_instance_profile_associations:
        std::option::Option<std::vec::Vec<crate::model::IamInstanceProfileAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeIamInstanceProfileAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeIamInstanceProfileAssociationsOutput");
        formatter.field(
            "iam_instance_profile_associations",
            &self.iam_instance_profile_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput)
pub mod describe_iam_instance_profile_associations_output {
    /// A builder for [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_associations:
            std::option::Option<std::vec::Vec<crate::model::IamInstanceProfileAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn iam_instance_profile_associations(
            mut self,
            inp: impl Into<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            let mut v = self.iam_instance_profile_associations.unwrap_or_default();
            v.push(inp.into());
            self.iam_instance_profile_associations = Some(v);
            self
        }
        pub fn set_iam_instance_profile_associations(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::IamInstanceProfileAssociation>>,
        ) -> Self {
            self.iam_instance_profile_associations = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput)
        pub fn build(self) -> crate::output::DescribeIamInstanceProfileAssociationsOutput {
            crate::output::DescribeIamInstanceProfileAssociationsOutput {
                iam_instance_profile_associations: self.iam_instance_profile_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeIamInstanceProfileAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeIamInstanceProfileAssociationsOutput`](crate::output::DescribeIamInstanceProfileAssociationsOutput)
    pub fn builder() -> crate::output::describe_iam_instance_profile_associations_output::Builder {
        crate::output::describe_iam_instance_profile_associations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeHostsOutput {
    /// <p>Information about the Dedicated Hosts.</p>
    pub hosts: std::option::Option<std::vec::Vec<crate::model::Host>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeHostsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeHostsOutput");
        formatter.field("hosts", &self.hosts);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeHostsOutput`](crate::output::DescribeHostsOutput)
pub mod describe_hosts_output {
    /// A builder for [`DescribeHostsOutput`](crate::output::DescribeHostsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) hosts: std::option::Option<std::vec::Vec<crate::model::Host>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn hosts(mut self, inp: impl Into<crate::model::Host>) -> Self {
            let mut v = self.hosts.unwrap_or_default();
            v.push(inp.into());
            self.hosts = Some(v);
            self
        }
        pub fn set_hosts(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Host>>,
        ) -> Self {
            self.hosts = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostsOutput`](crate::output::DescribeHostsOutput)
        pub fn build(self) -> crate::output::DescribeHostsOutput {
            crate::output::DescribeHostsOutput {
                hosts: self.hosts,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeHostsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostsOutput`](crate::output::DescribeHostsOutput)
    pub fn builder() -> crate::output::describe_hosts_output::Builder {
        crate::output::describe_hosts_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeHostReservationsOutput {
    /// <p>Details about the reservation's configuration.</p>
    pub host_reservation_set: std::option::Option<std::vec::Vec<crate::model::HostReservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeHostReservationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeHostReservationsOutput");
        formatter.field("host_reservation_set", &self.host_reservation_set);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput)
pub mod describe_host_reservations_output {
    /// A builder for [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) host_reservation_set:
            std::option::Option<std::vec::Vec<crate::model::HostReservation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn host_reservation_set(
            mut self,
            inp: impl Into<crate::model::HostReservation>,
        ) -> Self {
            let mut v = self.host_reservation_set.unwrap_or_default();
            v.push(inp.into());
            self.host_reservation_set = Some(v);
            self
        }
        pub fn set_host_reservation_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::HostReservation>>,
        ) -> Self {
            self.host_reservation_set = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput)
        pub fn build(self) -> crate::output::DescribeHostReservationsOutput {
            crate::output::DescribeHostReservationsOutput {
                host_reservation_set: self.host_reservation_set,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeHostReservationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostReservationsOutput`](crate::output::DescribeHostReservationsOutput)
    pub fn builder() -> crate::output::describe_host_reservations_output::Builder {
        crate::output::describe_host_reservations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeHostReservationOfferingsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the offerings.</p>
    pub offering_set: std::option::Option<std::vec::Vec<crate::model::HostOffering>>,
}
impl std::fmt::Debug for DescribeHostReservationOfferingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeHostReservationOfferingsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("offering_set", &self.offering_set);
        formatter.finish()
    }
}
/// See [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput)
pub mod describe_host_reservation_offerings_output {
    /// A builder for [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) offering_set: std::option::Option<std::vec::Vec<crate::model::HostOffering>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn offering_set(mut self, inp: impl Into<crate::model::HostOffering>) -> Self {
            let mut v = self.offering_set.unwrap_or_default();
            v.push(inp.into());
            self.offering_set = Some(v);
            self
        }
        pub fn set_offering_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::HostOffering>>,
        ) -> Self {
            self.offering_set = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput)
        pub fn build(self) -> crate::output::DescribeHostReservationOfferingsOutput {
            crate::output::DescribeHostReservationOfferingsOutput {
                next_token: self.next_token,
                offering_set: self.offering_set,
            }
        }
    }
}
impl DescribeHostReservationOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHostReservationOfferingsOutput`](crate::output::DescribeHostReservationOfferingsOutput)
    pub fn builder() -> crate::output::describe_host_reservation_offerings_output::Builder {
        crate::output::describe_host_reservation_offerings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFpgaImagesOutput {
    /// <p>Information about the FPGA images.</p>
    pub fpga_images: std::option::Option<std::vec::Vec<crate::model::FpgaImage>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeFpgaImagesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFpgaImagesOutput");
        formatter.field("fpga_images", &self.fpga_images);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput)
pub mod describe_fpga_images_output {
    /// A builder for [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_images: std::option::Option<std::vec::Vec<crate::model::FpgaImage>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn fpga_images(mut self, inp: impl Into<crate::model::FpgaImage>) -> Self {
            let mut v = self.fpga_images.unwrap_or_default();
            v.push(inp.into());
            self.fpga_images = Some(v);
            self
        }
        pub fn set_fpga_images(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::FpgaImage>>,
        ) -> Self {
            self.fpga_images = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput)
        pub fn build(self) -> crate::output::DescribeFpgaImagesOutput {
            crate::output::DescribeFpgaImagesOutput {
                fpga_images: self.fpga_images,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeFpgaImagesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFpgaImagesOutput`](crate::output::DescribeFpgaImagesOutput)
    pub fn builder() -> crate::output::describe_fpga_images_output::Builder {
        crate::output::describe_fpga_images_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFpgaImageAttributeOutput {
    /// <p>Information about the attribute.</p>
    pub fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
}
impl std::fmt::Debug for DescribeFpgaImageAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFpgaImageAttributeOutput");
        formatter.field("fpga_image_attribute", &self.fpga_image_attribute);
        formatter.finish()
    }
}
/// See [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput)
pub mod describe_fpga_image_attribute_output {
    /// A builder for [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_attribute: std::option::Option<crate::model::FpgaImageAttribute>,
    }
    impl Builder {
        /// <p>Information about the attribute.</p>
        pub fn fpga_image_attribute(mut self, inp: crate::model::FpgaImageAttribute) -> Self {
            self.fpga_image_attribute = Some(inp);
            self
        }
        pub fn set_fpga_image_attribute(
            mut self,
            inp: std::option::Option<crate::model::FpgaImageAttribute>,
        ) -> Self {
            self.fpga_image_attribute = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput)
        pub fn build(self) -> crate::output::DescribeFpgaImageAttributeOutput {
            crate::output::DescribeFpgaImageAttributeOutput {
                fpga_image_attribute: self.fpga_image_attribute,
            }
        }
    }
}
impl DescribeFpgaImageAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFpgaImageAttributeOutput`](crate::output::DescribeFpgaImageAttributeOutput)
    pub fn builder() -> crate::output::describe_fpga_image_attribute_output::Builder {
        crate::output::describe_fpga_image_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFlowLogsOutput {
    /// <p>Information about the flow logs.</p>
    pub flow_logs: std::option::Option<std::vec::Vec<crate::model::FlowLog>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeFlowLogsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFlowLogsOutput");
        formatter.field("flow_logs", &self.flow_logs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput)
pub mod describe_flow_logs_output {
    /// A builder for [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) flow_logs: std::option::Option<std::vec::Vec<crate::model::FlowLog>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn flow_logs(mut self, inp: impl Into<crate::model::FlowLog>) -> Self {
            let mut v = self.flow_logs.unwrap_or_default();
            v.push(inp.into());
            self.flow_logs = Some(v);
            self
        }
        pub fn set_flow_logs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::FlowLog>>,
        ) -> Self {
            self.flow_logs = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput)
        pub fn build(self) -> crate::output::DescribeFlowLogsOutput {
            crate::output::DescribeFlowLogsOutput {
                flow_logs: self.flow_logs,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeFlowLogsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFlowLogsOutput`](crate::output::DescribeFlowLogsOutput)
    pub fn builder() -> crate::output::describe_flow_logs_output::Builder {
        crate::output::describe_flow_logs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFleetsOutput {
    /// <p>The token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the EC2 Fleets.</p>
    pub fleets: std::option::Option<std::vec::Vec<crate::model::FleetData>>,
}
impl std::fmt::Debug for DescribeFleetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFleetsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("fleets", &self.fleets);
        formatter.finish()
    }
}
/// See [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput)
pub mod describe_fleets_output {
    /// A builder for [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) fleets: std::option::Option<std::vec::Vec<crate::model::FleetData>>,
    }
    impl Builder {
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn fleets(mut self, inp: impl Into<crate::model::FleetData>) -> Self {
            let mut v = self.fleets.unwrap_or_default();
            v.push(inp.into());
            self.fleets = Some(v);
            self
        }
        pub fn set_fleets(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::FleetData>>,
        ) -> Self {
            self.fleets = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput)
        pub fn build(self) -> crate::output::DescribeFleetsOutput {
            crate::output::DescribeFleetsOutput {
                next_token: self.next_token,
                fleets: self.fleets,
            }
        }
    }
}
impl DescribeFleetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetsOutput`](crate::output::DescribeFleetsOutput)
    pub fn builder() -> crate::output::describe_fleets_output::Builder {
        crate::output::describe_fleets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFleetInstancesOutput {
    /// <p>The running instances. This list is refreshed periodically and might be out of
    /// date.</p>
    pub active_instances: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
    /// <p>The token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeFleetInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFleetInstancesOutput");
        formatter.field("active_instances", &self.active_instances);
        formatter.field("next_token", &self.next_token);
        formatter.field("fleet_id", &self.fleet_id);
        formatter.finish()
    }
}
/// See [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput)
pub mod describe_fleet_instances_output {
    /// A builder for [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) active_instances:
            std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) fleet_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn active_instances(mut self, inp: impl Into<crate::model::ActiveInstance>) -> Self {
            let mut v = self.active_instances.unwrap_or_default();
            v.push(inp.into());
            self.active_instances = Some(v);
            self
        }
        pub fn set_active_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ActiveInstance>>,
        ) -> Self {
            self.active_instances = inp;
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// <p>The ID of the EC2 Fleet.</p>
        pub fn fleet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.fleet_id = Some(inp.into());
            self
        }
        pub fn set_fleet_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.fleet_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput)
        pub fn build(self) -> crate::output::DescribeFleetInstancesOutput {
            crate::output::DescribeFleetInstancesOutput {
                active_instances: self.active_instances,
                next_token: self.next_token,
                fleet_id: self.fleet_id,
            }
        }
    }
}
impl DescribeFleetInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetInstancesOutput`](crate::output::DescribeFleetInstancesOutput)
    pub fn builder() -> crate::output::describe_fleet_instances_output::Builder {
        crate::output::describe_fleet_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFleetHistoryOutput {
    /// <p>Information about the events in the history of the EC2 Fleet.</p>
    pub history_records: std::option::Option<std::vec::Vec<crate::model::HistoryRecordEntry>>,
    /// <p>The last date and time for the events, in UTC format (for example,
    /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    /// All records up to this time were retrieved.</p>
    /// <p>If <code>nextToken</code> indicates that there are more results, this value is not
    /// present.</p>
    pub last_evaluated_time: std::option::Option<smithy_types::Instant>,
    /// <p>The token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The ID of the EC Fleet.</p>
    pub fleet_id: std::option::Option<std::string::String>,
    /// <p>The start date and time for the events, in UTC format (for example,
    /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: std::option::Option<smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeFleetHistoryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFleetHistoryOutput");
        formatter.field("history_records", &self.history_records);
        formatter.field("last_evaluated_time", &self.last_evaluated_time);
        formatter.field("next_token", &self.next_token);
        formatter.field("fleet_id", &self.fleet_id);
        formatter.field("start_time", &self.start_time);
        formatter.finish()
    }
}
/// See [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput)
pub mod describe_fleet_history_output {
    /// A builder for [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) history_records:
            std::option::Option<std::vec::Vec<crate::model::HistoryRecordEntry>>,
        pub(crate) last_evaluated_time: std::option::Option<smithy_types::Instant>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) fleet_id: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<smithy_types::Instant>,
    }
    impl Builder {
        pub fn history_records(mut self, inp: impl Into<crate::model::HistoryRecordEntry>) -> Self {
            let mut v = self.history_records.unwrap_or_default();
            v.push(inp.into());
            self.history_records = Some(v);
            self
        }
        pub fn set_history_records(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::HistoryRecordEntry>>,
        ) -> Self {
            self.history_records = inp;
            self
        }
        /// <p>The last date and time for the events, in UTC format (for example,
        /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
        /// All records up to this time were retrieved.</p>
        /// <p>If <code>nextToken</code> indicates that there are more results, this value is not
        /// present.</p>
        pub fn last_evaluated_time(mut self, inp: smithy_types::Instant) -> Self {
            self.last_evaluated_time = Some(inp);
            self
        }
        pub fn set_last_evaluated_time(
            mut self,
            inp: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.last_evaluated_time = inp;
            self
        }
        /// <p>The token for the next set of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// <p>The ID of the EC Fleet.</p>
        pub fn fleet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.fleet_id = Some(inp.into());
            self
        }
        pub fn set_fleet_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.fleet_id = inp;
            self
        }
        /// <p>The start date and time for the events, in UTC format (for example,
        /// <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
        pub fn start_time(mut self, inp: smithy_types::Instant) -> Self {
            self.start_time = Some(inp);
            self
        }
        pub fn set_start_time(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.start_time = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput)
        pub fn build(self) -> crate::output::DescribeFleetHistoryOutput {
            crate::output::DescribeFleetHistoryOutput {
                history_records: self.history_records,
                last_evaluated_time: self.last_evaluated_time,
                next_token: self.next_token,
                fleet_id: self.fleet_id,
                start_time: self.start_time,
            }
        }
    }
}
impl DescribeFleetHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetHistoryOutput`](crate::output::DescribeFleetHistoryOutput)
    pub fn builder() -> crate::output::describe_fleet_history_output::Builder {
        crate::output::describe_fleet_history_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeFastSnapshotRestoresOutput {
    /// <p>Information about the state of fast snapshot restores.</p>
    pub fast_snapshot_restores:
        std::option::Option<std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeFastSnapshotRestoresOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeFastSnapshotRestoresOutput");
        formatter.field("fast_snapshot_restores", &self.fast_snapshot_restores);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput)
pub mod describe_fast_snapshot_restores_output {
    /// A builder for [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fast_snapshot_restores: std::option::Option<
            std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn fast_snapshot_restores(
            mut self,
            inp: impl Into<crate::model::DescribeFastSnapshotRestoreSuccessItem>,
        ) -> Self {
            let mut v = self.fast_snapshot_restores.unwrap_or_default();
            v.push(inp.into());
            self.fast_snapshot_restores = Some(v);
            self
        }
        pub fn set_fast_snapshot_restores(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::DescribeFastSnapshotRestoreSuccessItem>,
            >,
        ) -> Self {
            self.fast_snapshot_restores = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput)
        pub fn build(self) -> crate::output::DescribeFastSnapshotRestoresOutput {
            crate::output::DescribeFastSnapshotRestoresOutput {
                fast_snapshot_restores: self.fast_snapshot_restores,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeFastSnapshotRestoresOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFastSnapshotRestoresOutput`](crate::output::DescribeFastSnapshotRestoresOutput)
    pub fn builder() -> crate::output::describe_fast_snapshot_restores_output::Builder {
        crate::output::describe_fast_snapshot_restores_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExportTasksOutput {
    /// <p>Information about the export tasks.</p>
    pub export_tasks: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
}
impl std::fmt::Debug for DescribeExportTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExportTasksOutput");
        formatter.field("export_tasks", &self.export_tasks);
        formatter.finish()
    }
}
/// See [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
pub mod describe_export_tasks_output {
    /// A builder for [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_tasks: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
    }
    impl Builder {
        pub fn export_tasks(mut self, inp: impl Into<crate::model::ExportTask>) -> Self {
            let mut v = self.export_tasks.unwrap_or_default();
            v.push(inp.into());
            self.export_tasks = Some(v);
            self
        }
        pub fn set_export_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
        ) -> Self {
            self.export_tasks = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
        pub fn build(self) -> crate::output::DescribeExportTasksOutput {
            crate::output::DescribeExportTasksOutput {
                export_tasks: self.export_tasks,
            }
        }
    }
}
impl DescribeExportTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
    pub fn builder() -> crate::output::describe_export_tasks_output::Builder {
        crate::output::describe_export_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExportImageTasksOutput {
    /// <p>Information about the export image tasks.</p>
    pub export_image_tasks: std::option::Option<std::vec::Vec<crate::model::ExportImageTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
    /// to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeExportImageTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExportImageTasksOutput");
        formatter.field("export_image_tasks", &self.export_image_tasks);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput)
pub mod describe_export_image_tasks_output {
    /// A builder for [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_image_tasks:
            std::option::Option<std::vec::Vec<crate::model::ExportImageTask>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn export_image_tasks(mut self, inp: impl Into<crate::model::ExportImageTask>) -> Self {
            let mut v = self.export_image_tasks.unwrap_or_default();
            v.push(inp.into());
            self.export_image_tasks = Some(v);
            self
        }
        pub fn set_export_image_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ExportImageTask>>,
        ) -> Self {
            self.export_image_tasks = inp;
            self
        }
        /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results
        /// to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput)
        pub fn build(self) -> crate::output::DescribeExportImageTasksOutput {
            crate::output::DescribeExportImageTasksOutput {
                export_image_tasks: self.export_image_tasks,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeExportImageTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExportImageTasksOutput`](crate::output::DescribeExportImageTasksOutput)
    pub fn builder() -> crate::output::describe_export_image_tasks_output::Builder {
        crate::output::describe_export_image_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeElasticGpusOutput {
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub elastic_gpu_set: std::option::Option<std::vec::Vec<crate::model::ElasticGpus>>,
    /// <p>The total number of items to return. If the total number of items available is more
    /// than the value specified in max-items then a Next-Token will be provided in the output
    /// that you can use to resume pagination.</p>
    pub max_results: std::option::Option<i32>,
    /// <p>The token to use to retrieve the next page of results. This value is
    /// <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeElasticGpusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeElasticGpusOutput");
        formatter.field("elastic_gpu_set", &self.elastic_gpu_set);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput)
pub mod describe_elastic_gpus_output {
    /// A builder for [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) elastic_gpu_set: std::option::Option<std::vec::Vec<crate::model::ElasticGpus>>,
        pub(crate) max_results: std::option::Option<i32>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn elastic_gpu_set(mut self, inp: impl Into<crate::model::ElasticGpus>) -> Self {
            let mut v = self.elastic_gpu_set.unwrap_or_default();
            v.push(inp.into());
            self.elastic_gpu_set = Some(v);
            self
        }
        pub fn set_elastic_gpu_set(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ElasticGpus>>,
        ) -> Self {
            self.elastic_gpu_set = inp;
            self
        }
        /// <p>The total number of items to return. If the total number of items available is more
        /// than the value specified in max-items then a Next-Token will be provided in the output
        /// that you can use to resume pagination.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.max_results = Some(inp);
            self
        }
        pub fn set_max_results(mut self, inp: std::option::Option<i32>) -> Self {
            self.max_results = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is
        /// <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput)
        pub fn build(self) -> crate::output::DescribeElasticGpusOutput {
            crate::output::DescribeElasticGpusOutput {
                elastic_gpu_set: self.elastic_gpu_set,
                max_results: self.max_results,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeElasticGpusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeElasticGpusOutput`](crate::output::DescribeElasticGpusOutput)
    pub fn builder() -> crate::output::describe_elastic_gpus_output::Builder {
        crate::output::describe_elastic_gpus_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEgressOnlyInternetGatewaysOutput {
    /// <p>Information about the egress-only internet gateways.</p>
    pub egress_only_internet_gateways:
        std::option::Option<std::vec::Vec<crate::model::EgressOnlyInternetGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeEgressOnlyInternetGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEgressOnlyInternetGatewaysOutput");
        formatter.field(
            "egress_only_internet_gateways",
            &self.egress_only_internet_gateways,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput)
pub mod describe_egress_only_internet_gateways_output {
    /// A builder for [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) egress_only_internet_gateways:
            std::option::Option<std::vec::Vec<crate::model::EgressOnlyInternetGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn egress_only_internet_gateways(
            mut self,
            inp: impl Into<crate::model::EgressOnlyInternetGateway>,
        ) -> Self {
            let mut v = self.egress_only_internet_gateways.unwrap_or_default();
            v.push(inp.into());
            self.egress_only_internet_gateways = Some(v);
            self
        }
        pub fn set_egress_only_internet_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::EgressOnlyInternetGateway>>,
        ) -> Self {
            self.egress_only_internet_gateways = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeEgressOnlyInternetGatewaysOutput {
            crate::output::DescribeEgressOnlyInternetGatewaysOutput {
                egress_only_internet_gateways: self.egress_only_internet_gateways,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeEgressOnlyInternetGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEgressOnlyInternetGatewaysOutput`](crate::output::DescribeEgressOnlyInternetGatewaysOutput)
    pub fn builder() -> crate::output::describe_egress_only_internet_gateways_output::Builder {
        crate::output::describe_egress_only_internet_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDhcpOptionsOutput {
    /// <p>Information about one or more DHCP options sets.</p>
    pub dhcp_options: std::option::Option<std::vec::Vec<crate::model::DhcpOptions>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDhcpOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDhcpOptionsOutput");
        formatter.field("dhcp_options", &self.dhcp_options);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput)
pub mod describe_dhcp_options_output {
    /// A builder for [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dhcp_options: std::option::Option<std::vec::Vec<crate::model::DhcpOptions>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn dhcp_options(mut self, inp: impl Into<crate::model::DhcpOptions>) -> Self {
            let mut v = self.dhcp_options.unwrap_or_default();
            v.push(inp.into());
            self.dhcp_options = Some(v);
            self
        }
        pub fn set_dhcp_options(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::DhcpOptions>>,
        ) -> Self {
            self.dhcp_options = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput)
        pub fn build(self) -> crate::output::DescribeDhcpOptionsOutput {
            crate::output::DescribeDhcpOptionsOutput {
                dhcp_options: self.dhcp_options,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDhcpOptionsOutput`](crate::output::DescribeDhcpOptionsOutput)
    pub fn builder() -> crate::output::describe_dhcp_options_output::Builder {
        crate::output::describe_dhcp_options_output::Builder::default()
    }
}

/// <p>Contains the output of DescribeCustomerGateways.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomerGatewaysOutput {
    /// <p>Information about one or more customer gateways.</p>
    pub customer_gateways: std::option::Option<std::vec::Vec<crate::model::CustomerGateway>>,
}
impl std::fmt::Debug for DescribeCustomerGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomerGatewaysOutput");
        formatter.field("customer_gateways", &self.customer_gateways);
        formatter.finish()
    }
}
/// See [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput)
pub mod describe_customer_gateways_output {
    /// A builder for [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) customer_gateways:
            std::option::Option<std::vec::Vec<crate::model::CustomerGateway>>,
    }
    impl Builder {
        pub fn customer_gateways(mut self, inp: impl Into<crate::model::CustomerGateway>) -> Self {
            let mut v = self.customer_gateways.unwrap_or_default();
            v.push(inp.into());
            self.customer_gateways = Some(v);
            self
        }
        pub fn set_customer_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CustomerGateway>>,
        ) -> Self {
            self.customer_gateways = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeCustomerGatewaysOutput {
            crate::output::DescribeCustomerGatewaysOutput {
                customer_gateways: self.customer_gateways,
            }
        }
    }
}
impl DescribeCustomerGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomerGatewaysOutput`](crate::output::DescribeCustomerGatewaysOutput)
    pub fn builder() -> crate::output::describe_customer_gateways_output::Builder {
        crate::output::describe_customer_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeConversionTasksOutput {
    /// <p>Information about the conversion tasks.</p>
    pub conversion_tasks: std::option::Option<std::vec::Vec<crate::model::ConversionTask>>,
}
impl std::fmt::Debug for DescribeConversionTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConversionTasksOutput");
        formatter.field("conversion_tasks", &self.conversion_tasks);
        formatter.finish()
    }
}
/// See [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput)
pub mod describe_conversion_tasks_output {
    /// A builder for [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) conversion_tasks:
            std::option::Option<std::vec::Vec<crate::model::ConversionTask>>,
    }
    impl Builder {
        pub fn conversion_tasks(mut self, inp: impl Into<crate::model::ConversionTask>) -> Self {
            let mut v = self.conversion_tasks.unwrap_or_default();
            v.push(inp.into());
            self.conversion_tasks = Some(v);
            self
        }
        pub fn set_conversion_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ConversionTask>>,
        ) -> Self {
            self.conversion_tasks = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput)
        pub fn build(self) -> crate::output::DescribeConversionTasksOutput {
            crate::output::DescribeConversionTasksOutput {
                conversion_tasks: self.conversion_tasks,
            }
        }
    }
}
impl DescribeConversionTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConversionTasksOutput`](crate::output::DescribeConversionTasksOutput)
    pub fn builder() -> crate::output::describe_conversion_tasks_output::Builder {
        crate::output::describe_conversion_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCoipPoolsOutput {
    /// <p>Information about the address pools.</p>
    pub coip_pools: std::option::Option<std::vec::Vec<crate::model::CoipPool>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeCoipPoolsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCoipPoolsOutput");
        formatter.field("coip_pools", &self.coip_pools);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput)
pub mod describe_coip_pools_output {
    /// A builder for [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) coip_pools: std::option::Option<std::vec::Vec<crate::model::CoipPool>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn coip_pools(mut self, inp: impl Into<crate::model::CoipPool>) -> Self {
            let mut v = self.coip_pools.unwrap_or_default();
            v.push(inp.into());
            self.coip_pools = Some(v);
            self
        }
        pub fn set_coip_pools(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CoipPool>>,
        ) -> Self {
            self.coip_pools = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput)
        pub fn build(self) -> crate::output::DescribeCoipPoolsOutput {
            crate::output::DescribeCoipPoolsOutput {
                coip_pools: self.coip_pools,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeCoipPoolsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCoipPoolsOutput`](crate::output::DescribeCoipPoolsOutput)
    pub fn builder() -> crate::output::describe_coip_pools_output::Builder {
        crate::output::describe_coip_pools_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClientVpnTargetNetworksOutput {
    /// <p>Information about the associated target networks.</p>
    pub client_vpn_target_networks: std::option::Option<std::vec::Vec<crate::model::TargetNetwork>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeClientVpnTargetNetworksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClientVpnTargetNetworksOutput");
        formatter.field(
            "client_vpn_target_networks",
            &self.client_vpn_target_networks,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput)
pub mod describe_client_vpn_target_networks_output {
    /// A builder for [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_target_networks:
            std::option::Option<std::vec::Vec<crate::model::TargetNetwork>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn client_vpn_target_networks(
            mut self,
            inp: impl Into<crate::model::TargetNetwork>,
        ) -> Self {
            let mut v = self.client_vpn_target_networks.unwrap_or_default();
            v.push(inp.into());
            self.client_vpn_target_networks = Some(v);
            self
        }
        pub fn set_client_vpn_target_networks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::TargetNetwork>>,
        ) -> Self {
            self.client_vpn_target_networks = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput)
        pub fn build(self) -> crate::output::DescribeClientVpnTargetNetworksOutput {
            crate::output::DescribeClientVpnTargetNetworksOutput {
                client_vpn_target_networks: self.client_vpn_target_networks,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeClientVpnTargetNetworksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnTargetNetworksOutput`](crate::output::DescribeClientVpnTargetNetworksOutput)
    pub fn builder() -> crate::output::describe_client_vpn_target_networks_output::Builder {
        crate::output::describe_client_vpn_target_networks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClientVpnRoutesOutput {
    /// <p>Information about the Client VPN endpoint routes.</p>
    pub routes: std::option::Option<std::vec::Vec<crate::model::ClientVpnRoute>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeClientVpnRoutesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClientVpnRoutesOutput");
        formatter.field("routes", &self.routes);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput)
pub mod describe_client_vpn_routes_output {
    /// A builder for [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::ClientVpnRoute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn routes(mut self, inp: impl Into<crate::model::ClientVpnRoute>) -> Self {
            let mut v = self.routes.unwrap_or_default();
            v.push(inp.into());
            self.routes = Some(v);
            self
        }
        pub fn set_routes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ClientVpnRoute>>,
        ) -> Self {
            self.routes = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput)
        pub fn build(self) -> crate::output::DescribeClientVpnRoutesOutput {
            crate::output::DescribeClientVpnRoutesOutput {
                routes: self.routes,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeClientVpnRoutesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnRoutesOutput`](crate::output::DescribeClientVpnRoutesOutput)
    pub fn builder() -> crate::output::describe_client_vpn_routes_output::Builder {
        crate::output::describe_client_vpn_routes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClientVpnEndpointsOutput {
    /// <p>Information about the Client VPN endpoints.</p>
    pub client_vpn_endpoints: std::option::Option<std::vec::Vec<crate::model::ClientVpnEndpoint>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeClientVpnEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClientVpnEndpointsOutput");
        formatter.field("client_vpn_endpoints", &self.client_vpn_endpoints);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput)
pub mod describe_client_vpn_endpoints_output {
    /// A builder for [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_endpoints:
            std::option::Option<std::vec::Vec<crate::model::ClientVpnEndpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn client_vpn_endpoints(
            mut self,
            inp: impl Into<crate::model::ClientVpnEndpoint>,
        ) -> Self {
            let mut v = self.client_vpn_endpoints.unwrap_or_default();
            v.push(inp.into());
            self.client_vpn_endpoints = Some(v);
            self
        }
        pub fn set_client_vpn_endpoints(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ClientVpnEndpoint>>,
        ) -> Self {
            self.client_vpn_endpoints = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput)
        pub fn build(self) -> crate::output::DescribeClientVpnEndpointsOutput {
            crate::output::DescribeClientVpnEndpointsOutput {
                client_vpn_endpoints: self.client_vpn_endpoints,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeClientVpnEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnEndpointsOutput`](crate::output::DescribeClientVpnEndpointsOutput)
    pub fn builder() -> crate::output::describe_client_vpn_endpoints_output::Builder {
        crate::output::describe_client_vpn_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClientVpnConnectionsOutput {
    /// <p>Information about the active and terminated client connections.</p>
    pub connections: std::option::Option<std::vec::Vec<crate::model::ClientVpnConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeClientVpnConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClientVpnConnectionsOutput");
        formatter.field("connections", &self.connections);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput)
pub mod describe_client_vpn_connections_output {
    /// A builder for [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connections:
            std::option::Option<std::vec::Vec<crate::model::ClientVpnConnection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn connections(mut self, inp: impl Into<crate::model::ClientVpnConnection>) -> Self {
            let mut v = self.connections.unwrap_or_default();
            v.push(inp.into());
            self.connections = Some(v);
            self
        }
        pub fn set_connections(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ClientVpnConnection>>,
        ) -> Self {
            self.connections = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput)
        pub fn build(self) -> crate::output::DescribeClientVpnConnectionsOutput {
            crate::output::DescribeClientVpnConnectionsOutput {
                connections: self.connections,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeClientVpnConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnConnectionsOutput`](crate::output::DescribeClientVpnConnectionsOutput)
    pub fn builder() -> crate::output::describe_client_vpn_connections_output::Builder {
        crate::output::describe_client_vpn_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClientVpnAuthorizationRulesOutput {
    /// <p>Information about the authorization rules.</p>
    pub authorization_rules: std::option::Option<std::vec::Vec<crate::model::AuthorizationRule>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeClientVpnAuthorizationRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClientVpnAuthorizationRulesOutput");
        formatter.field("authorization_rules", &self.authorization_rules);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput)
pub mod describe_client_vpn_authorization_rules_output {
    /// A builder for [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) authorization_rules:
            std::option::Option<std::vec::Vec<crate::model::AuthorizationRule>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn authorization_rules(
            mut self,
            inp: impl Into<crate::model::AuthorizationRule>,
        ) -> Self {
            let mut v = self.authorization_rules.unwrap_or_default();
            v.push(inp.into());
            self.authorization_rules = Some(v);
            self
        }
        pub fn set_authorization_rules(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AuthorizationRule>>,
        ) -> Self {
            self.authorization_rules = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput)
        pub fn build(self) -> crate::output::DescribeClientVpnAuthorizationRulesOutput {
            crate::output::DescribeClientVpnAuthorizationRulesOutput {
                authorization_rules: self.authorization_rules,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeClientVpnAuthorizationRulesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClientVpnAuthorizationRulesOutput`](crate::output::DescribeClientVpnAuthorizationRulesOutput)
    pub fn builder() -> crate::output::describe_client_vpn_authorization_rules_output::Builder {
        crate::output::describe_client_vpn_authorization_rules_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClassicLinkInstancesOutput {
    /// <p>Information about one or more linked EC2-Classic instances.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::ClassicLinkInstance>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeClassicLinkInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClassicLinkInstancesOutput");
        formatter.field("instances", &self.instances);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput)
pub mod describe_classic_link_instances_output {
    /// A builder for [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::ClassicLinkInstance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn instances(mut self, inp: impl Into<crate::model::ClassicLinkInstance>) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(inp.into());
            self.instances = Some(v);
            self
        }
        pub fn set_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ClassicLinkInstance>>,
        ) -> Self {
            self.instances = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput)
        pub fn build(self) -> crate::output::DescribeClassicLinkInstancesOutput {
            crate::output::DescribeClassicLinkInstancesOutput {
                instances: self.instances,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeClassicLinkInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClassicLinkInstancesOutput`](crate::output::DescribeClassicLinkInstancesOutput)
    pub fn builder() -> crate::output::describe_classic_link_instances_output::Builder {
        crate::output::describe_classic_link_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCarrierGatewaysOutput {
    /// <p>Information about the carrier gateway.</p>
    pub carrier_gateways: std::option::Option<std::vec::Vec<crate::model::CarrierGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeCarrierGatewaysOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCarrierGatewaysOutput");
        formatter.field("carrier_gateways", &self.carrier_gateways);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput)
pub mod describe_carrier_gateways_output {
    /// A builder for [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) carrier_gateways:
            std::option::Option<std::vec::Vec<crate::model::CarrierGateway>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn carrier_gateways(mut self, inp: impl Into<crate::model::CarrierGateway>) -> Self {
            let mut v = self.carrier_gateways.unwrap_or_default();
            v.push(inp.into());
            self.carrier_gateways = Some(v);
            self
        }
        pub fn set_carrier_gateways(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CarrierGateway>>,
        ) -> Self {
            self.carrier_gateways = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput)
        pub fn build(self) -> crate::output::DescribeCarrierGatewaysOutput {
            crate::output::DescribeCarrierGatewaysOutput {
                carrier_gateways: self.carrier_gateways,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeCarrierGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCarrierGatewaysOutput`](crate::output::DescribeCarrierGatewaysOutput)
    pub fn builder() -> crate::output::describe_carrier_gateways_output::Builder {
        crate::output::describe_carrier_gateways_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCapacityReservationsOutput {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the Capacity Reservations.</p>
    pub capacity_reservations:
        std::option::Option<std::vec::Vec<crate::model::CapacityReservation>>,
}
impl std::fmt::Debug for DescribeCapacityReservationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCapacityReservationsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("capacity_reservations", &self.capacity_reservations);
        formatter.finish()
    }
}
/// See [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput)
pub mod describe_capacity_reservations_output {
    /// A builder for [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) capacity_reservations:
            std::option::Option<std::vec::Vec<crate::model::CapacityReservation>>,
    }
    impl Builder {
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        pub fn capacity_reservations(
            mut self,
            inp: impl Into<crate::model::CapacityReservation>,
        ) -> Self {
            let mut v = self.capacity_reservations.unwrap_or_default();
            v.push(inp.into());
            self.capacity_reservations = Some(v);
            self
        }
        pub fn set_capacity_reservations(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CapacityReservation>>,
        ) -> Self {
            self.capacity_reservations = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput)
        pub fn build(self) -> crate::output::DescribeCapacityReservationsOutput {
            crate::output::DescribeCapacityReservationsOutput {
                next_token: self.next_token,
                capacity_reservations: self.capacity_reservations,
            }
        }
    }
}
impl DescribeCapacityReservationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCapacityReservationsOutput`](crate::output::DescribeCapacityReservationsOutput)
    pub fn builder() -> crate::output::describe_capacity_reservations_output::Builder {
        crate::output::describe_capacity_reservations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeByoipCidrsOutput {
    /// <p>Information about your address ranges.</p>
    pub byoip_cidrs: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeByoipCidrsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeByoipCidrsOutput");
        formatter.field("byoip_cidrs", &self.byoip_cidrs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput)
pub mod describe_byoip_cidrs_output {
    /// A builder for [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidrs: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn byoip_cidrs(mut self, inp: impl Into<crate::model::ByoipCidr>) -> Self {
            let mut v = self.byoip_cidrs.unwrap_or_default();
            v.push(inp.into());
            self.byoip_cidrs = Some(v);
            self
        }
        pub fn set_byoip_cidrs(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ByoipCidr>>,
        ) -> Self {
            self.byoip_cidrs = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput)
        pub fn build(self) -> crate::output::DescribeByoipCidrsOutput {
            crate::output::DescribeByoipCidrsOutput {
                byoip_cidrs: self.byoip_cidrs,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeByoipCidrsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeByoipCidrsOutput`](crate::output::DescribeByoipCidrsOutput)
    pub fn builder() -> crate::output::describe_byoip_cidrs_output::Builder {
        crate::output::describe_byoip_cidrs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeBundleTasksOutput {
    /// <p>Information about the bundle tasks.</p>
    pub bundle_tasks: std::option::Option<std::vec::Vec<crate::model::BundleTask>>,
}
impl std::fmt::Debug for DescribeBundleTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeBundleTasksOutput");
        formatter.field("bundle_tasks", &self.bundle_tasks);
        formatter.finish()
    }
}
/// See [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput)
pub mod describe_bundle_tasks_output {
    /// A builder for [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bundle_tasks: std::option::Option<std::vec::Vec<crate::model::BundleTask>>,
    }
    impl Builder {
        pub fn bundle_tasks(mut self, inp: impl Into<crate::model::BundleTask>) -> Self {
            let mut v = self.bundle_tasks.unwrap_or_default();
            v.push(inp.into());
            self.bundle_tasks = Some(v);
            self
        }
        pub fn set_bundle_tasks(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::BundleTask>>,
        ) -> Self {
            self.bundle_tasks = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput)
        pub fn build(self) -> crate::output::DescribeBundleTasksOutput {
            crate::output::DescribeBundleTasksOutput {
                bundle_tasks: self.bundle_tasks,
            }
        }
    }
}
impl DescribeBundleTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBundleTasksOutput`](crate::output::DescribeBundleTasksOutput)
    pub fn builder() -> crate::output::describe_bundle_tasks_output::Builder {
        crate::output::describe_bundle_tasks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAvailabilityZonesOutput {
    /// <p>Information about the Availability Zones, Local Zones, and Wavelength Zones.</p>
    pub availability_zones: std::option::Option<std::vec::Vec<crate::model::AvailabilityZone>>,
}
impl std::fmt::Debug for DescribeAvailabilityZonesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAvailabilityZonesOutput");
        formatter.field("availability_zones", &self.availability_zones);
        formatter.finish()
    }
}
/// See [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput)
pub mod describe_availability_zones_output {
    /// A builder for [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones:
            std::option::Option<std::vec::Vec<crate::model::AvailabilityZone>>,
    }
    impl Builder {
        pub fn availability_zones(
            mut self,
            inp: impl Into<crate::model::AvailabilityZone>,
        ) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(inp.into());
            self.availability_zones = Some(v);
            self
        }
        pub fn set_availability_zones(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AvailabilityZone>>,
        ) -> Self {
            self.availability_zones = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput)
        pub fn build(self) -> crate::output::DescribeAvailabilityZonesOutput {
            crate::output::DescribeAvailabilityZonesOutput {
                availability_zones: self.availability_zones,
            }
        }
    }
}
impl DescribeAvailabilityZonesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAvailabilityZonesOutput`](crate::output::DescribeAvailabilityZonesOutput)
    pub fn builder() -> crate::output::describe_availability_zones_output::Builder {
        crate::output::describe_availability_zones_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAggregateIdFormatOutput {
    /// <p>Indicates whether all resource types in the Region are configured to use longer IDs.
    /// This value is only <code>true</code> if all users are configured to use longer IDs for
    /// all resources types in the Region.</p>
    pub use_long_ids_aggregated: std::option::Option<bool>,
    /// <p>Information about each resource's ID format.</p>
    pub statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
}
impl std::fmt::Debug for DescribeAggregateIdFormatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAggregateIdFormatOutput");
        formatter.field("use_long_ids_aggregated", &self.use_long_ids_aggregated);
        formatter.field("statuses", &self.statuses);
        formatter.finish()
    }
}
/// See [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput)
pub mod describe_aggregate_id_format_output {
    /// A builder for [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) use_long_ids_aggregated: std::option::Option<bool>,
        pub(crate) statuses: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
    }
    impl Builder {
        /// <p>Indicates whether all resource types in the Region are configured to use longer IDs.
        /// This value is only <code>true</code> if all users are configured to use longer IDs for
        /// all resources types in the Region.</p>
        pub fn use_long_ids_aggregated(mut self, inp: bool) -> Self {
            self.use_long_ids_aggregated = Some(inp);
            self
        }
        pub fn set_use_long_ids_aggregated(mut self, inp: std::option::Option<bool>) -> Self {
            self.use_long_ids_aggregated = inp;
            self
        }
        pub fn statuses(mut self, inp: impl Into<crate::model::IdFormat>) -> Self {
            let mut v = self.statuses.unwrap_or_default();
            v.push(inp.into());
            self.statuses = Some(v);
            self
        }
        pub fn set_statuses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::IdFormat>>,
        ) -> Self {
            self.statuses = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput)
        pub fn build(self) -> crate::output::DescribeAggregateIdFormatOutput {
            crate::output::DescribeAggregateIdFormatOutput {
                use_long_ids_aggregated: self.use_long_ids_aggregated,
                statuses: self.statuses,
            }
        }
    }
}
impl DescribeAggregateIdFormatOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAggregateIdFormatOutput`](crate::output::DescribeAggregateIdFormatOutput)
    pub fn builder() -> crate::output::describe_aggregate_id_format_output::Builder {
        crate::output::describe_aggregate_id_format_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAddressesAttributeOutput {
    /// <p>Information about the IP addresses.</p>
    pub addresses: std::option::Option<std::vec::Vec<crate::model::AddressAttribute>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeAddressesAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAddressesAttributeOutput");
        formatter.field("addresses", &self.addresses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput)
pub mod describe_addresses_attribute_output {
    /// A builder for [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) addresses: std::option::Option<std::vec::Vec<crate::model::AddressAttribute>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn addresses(mut self, inp: impl Into<crate::model::AddressAttribute>) -> Self {
            let mut v = self.addresses.unwrap_or_default();
            v.push(inp.into());
            self.addresses = Some(v);
            self
        }
        pub fn set_addresses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AddressAttribute>>,
        ) -> Self {
            self.addresses = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.next_token = Some(inp.into());
            self
        }
        pub fn set_next_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.next_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput)
        pub fn build(self) -> crate::output::DescribeAddressesAttributeOutput {
            crate::output::DescribeAddressesAttributeOutput {
                addresses: self.addresses,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeAddressesAttributeOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesAttributeOutput`](crate::output::DescribeAddressesAttributeOutput)
    pub fn builder() -> crate::output::describe_addresses_attribute_output::Builder {
        crate::output::describe_addresses_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAddressesOutput {
    /// <p>Information about the Elastic IP addresses.</p>
    pub addresses: std::option::Option<std::vec::Vec<crate::model::Address>>,
}
impl std::fmt::Debug for DescribeAddressesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAddressesOutput");
        formatter.field("addresses", &self.addresses);
        formatter.finish()
    }
}
/// See [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput)
pub mod describe_addresses_output {
    /// A builder for [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) addresses: std::option::Option<std::vec::Vec<crate::model::Address>>,
    }
    impl Builder {
        pub fn addresses(mut self, inp: impl Into<crate::model::Address>) -> Self {
            let mut v = self.addresses.unwrap_or_default();
            v.push(inp.into());
            self.addresses = Some(v);
            self
        }
        pub fn set_addresses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Address>>,
        ) -> Self {
            self.addresses = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput)
        pub fn build(self) -> crate::output::DescribeAddressesOutput {
            crate::output::DescribeAddressesOutput {
                addresses: self.addresses,
            }
        }
    }
}
impl DescribeAddressesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesOutput`](crate::output::DescribeAddressesOutput)
    pub fn builder() -> crate::output::describe_addresses_output::Builder {
        crate::output::describe_addresses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountAttributesOutput {
    /// <p>Information about the account attributes.</p>
    pub account_attributes: std::option::Option<std::vec::Vec<crate::model::AccountAttribute>>,
}
impl std::fmt::Debug for DescribeAccountAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountAttributesOutput");
        formatter.field("account_attributes", &self.account_attributes);
        formatter.finish()
    }
}
/// See [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
pub mod describe_account_attributes_output {
    /// A builder for [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_attributes:
            std::option::Option<std::vec::Vec<crate::model::AccountAttribute>>,
    }
    impl Builder {
        pub fn account_attributes(
            mut self,
            inp: impl Into<crate::model::AccountAttribute>,
        ) -> Self {
            let mut v = self.account_attributes.unwrap_or_default();
            v.push(inp.into());
            self.account_attributes = Some(v);
            self
        }
        pub fn set_account_attributes(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AccountAttribute>>,
        ) -> Self {
            self.account_attributes = inp;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
        pub fn build(self) -> crate::output::DescribeAccountAttributesOutput {
            crate::output::DescribeAccountAttributesOutput {
                account_attributes: self.account_attributes,
            }
        }
    }
}
impl DescribeAccountAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
    pub fn builder() -> crate::output::describe_account_attributes_output::Builder {
        crate::output::describe_account_attributes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterTransitGatewayMulticastGroupSourcesOutput {
    /// <p>Information about the deregistered group sources.</p>
    pub deregistered_multicast_group_sources:
        std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupSources>,
}
impl std::fmt::Debug for DeregisterTransitGatewayMulticastGroupSourcesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterTransitGatewayMulticastGroupSourcesOutput");
        formatter.field(
            "deregistered_multicast_group_sources",
            &self.deregistered_multicast_group_sources,
        );
        formatter.finish()
    }
}
/// See [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput)
pub mod deregister_transit_gateway_multicast_group_sources_output {
    /// A builder for [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) deregistered_multicast_group_sources:
            std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupSources>,
    }
    impl Builder {
        /// <p>Information about the deregistered group sources.</p>
        pub fn deregistered_multicast_group_sources(
            mut self,
            inp: crate::model::TransitGatewayMulticastDeregisteredGroupSources,
        ) -> Self {
            self.deregistered_multicast_group_sources = Some(inp);
            self
        }
        pub fn set_deregistered_multicast_group_sources(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupSources>,
        ) -> Self {
            self.deregistered_multicast_group_sources = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput)
        pub fn build(self) -> crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput {
            crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput {
                deregistered_multicast_group_sources: self.deregistered_multicast_group_sources,
            }
        }
    }
}
impl DeregisterTransitGatewayMulticastGroupSourcesOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterTransitGatewayMulticastGroupSourcesOutput`](crate::output::DeregisterTransitGatewayMulticastGroupSourcesOutput)
    pub fn builder(
    ) -> crate::output::deregister_transit_gateway_multicast_group_sources_output::Builder {
        crate::output::deregister_transit_gateway_multicast_group_sources_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterTransitGatewayMulticastGroupMembersOutput {
    /// <p>Information about the deregistered members.</p>
    pub deregistered_multicast_group_members:
        std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupMembers>,
}
impl std::fmt::Debug for DeregisterTransitGatewayMulticastGroupMembersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterTransitGatewayMulticastGroupMembersOutput");
        formatter.field(
            "deregistered_multicast_group_members",
            &self.deregistered_multicast_group_members,
        );
        formatter.finish()
    }
}
/// See [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput)
pub mod deregister_transit_gateway_multicast_group_members_output {
    /// A builder for [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) deregistered_multicast_group_members:
            std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupMembers>,
    }
    impl Builder {
        /// <p>Information about the deregistered members.</p>
        pub fn deregistered_multicast_group_members(
            mut self,
            inp: crate::model::TransitGatewayMulticastDeregisteredGroupMembers,
        ) -> Self {
            self.deregistered_multicast_group_members = Some(inp);
            self
        }
        pub fn set_deregistered_multicast_group_members(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDeregisteredGroupMembers>,
        ) -> Self {
            self.deregistered_multicast_group_members = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput)
        pub fn build(self) -> crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput {
            crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput {
                deregistered_multicast_group_members: self.deregistered_multicast_group_members,
            }
        }
    }
}
impl DeregisterTransitGatewayMulticastGroupMembersOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterTransitGatewayMulticastGroupMembersOutput`](crate::output::DeregisterTransitGatewayMulticastGroupMembersOutput)
    pub fn builder(
    ) -> crate::output::deregister_transit_gateway_multicast_group_members_output::Builder {
        crate::output::deregister_transit_gateway_multicast_group_members_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterInstanceEventNotificationAttributesOutput {
    /// <p>The resulting set of tag keys.</p>
    pub instance_tag_attribute: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
}
impl std::fmt::Debug for DeregisterInstanceEventNotificationAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterInstanceEventNotificationAttributesOutput");
        formatter.field("instance_tag_attribute", &self.instance_tag_attribute);
        formatter.finish()
    }
}
/// See [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput)
pub mod deregister_instance_event_notification_attributes_output {
    /// A builder for [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_tag_attribute:
            std::option::Option<crate::model::InstanceTagNotificationAttribute>,
    }
    impl Builder {
        /// <p>The resulting set of tag keys.</p>
        pub fn instance_tag_attribute(
            mut self,
            inp: crate::model::InstanceTagNotificationAttribute,
        ) -> Self {
            self.instance_tag_attribute = Some(inp);
            self
        }
        pub fn set_instance_tag_attribute(
            mut self,
            inp: std::option::Option<crate::model::InstanceTagNotificationAttribute>,
        ) -> Self {
            self.instance_tag_attribute = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput)
        pub fn build(self) -> crate::output::DeregisterInstanceEventNotificationAttributesOutput {
            crate::output::DeregisterInstanceEventNotificationAttributesOutput {
                instance_tag_attribute: self.instance_tag_attribute,
            }
        }
    }
}
impl DeregisterInstanceEventNotificationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterInstanceEventNotificationAttributesOutput`](crate::output::DeregisterInstanceEventNotificationAttributesOutput)
    pub fn builder(
    ) -> crate::output::deregister_instance_event_notification_attributes_output::Builder {
        crate::output::deregister_instance_event_notification_attributes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterImageOutput {}
impl std::fmt::Debug for DeregisterImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterImageOutput");
        formatter.finish()
    }
}
/// See [`DeregisterImageOutput`](crate::output::DeregisterImageOutput)
pub mod deregister_image_output {
    /// A builder for [`DeregisterImageOutput`](crate::output::DeregisterImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterImageOutput`](crate::output::DeregisterImageOutput)
        pub fn build(self) -> crate::output::DeregisterImageOutput {
            crate::output::DeregisterImageOutput {}
        }
    }
}
impl DeregisterImageOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterImageOutput`](crate::output::DeregisterImageOutput)
    pub fn builder() -> crate::output::deregister_image_output::Builder {
        crate::output::deregister_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeprovisionByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl std::fmt::Debug for DeprovisionByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeprovisionByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
pub mod deprovision_byoip_cidr_output {
    /// A builder for [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, inp: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(inp);
            self
        }
        pub fn set_byoip_cidr(mut self, inp: std::option::Option<crate::model::ByoipCidr>) -> Self {
            self.byoip_cidr = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
        pub fn build(self) -> crate::output::DeprovisionByoipCidrOutput {
            crate::output::DeprovisionByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl DeprovisionByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`DeprovisionByoipCidrOutput`](crate::output::DeprovisionByoipCidrOutput)
    pub fn builder() -> crate::output::deprovision_byoip_cidr_output::Builder {
        crate::output::deprovision_byoip_cidr_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpnGatewayOutput {}
impl std::fmt::Debug for DeleteVpnGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpnGatewayOutput");
        formatter.finish()
    }
}
/// See [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput)
pub mod delete_vpn_gateway_output {
    /// A builder for [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput)
        pub fn build(self) -> crate::output::DeleteVpnGatewayOutput {
            crate::output::DeleteVpnGatewayOutput {}
        }
    }
}
impl DeleteVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpnGatewayOutput`](crate::output::DeleteVpnGatewayOutput)
    pub fn builder() -> crate::output::delete_vpn_gateway_output::Builder {
        crate::output::delete_vpn_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpnConnectionRouteOutput {}
impl std::fmt::Debug for DeleteVpnConnectionRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpnConnectionRouteOutput");
        formatter.finish()
    }
}
/// See [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput)
pub mod delete_vpn_connection_route_output {
    /// A builder for [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput)
        pub fn build(self) -> crate::output::DeleteVpnConnectionRouteOutput {
            crate::output::DeleteVpnConnectionRouteOutput {}
        }
    }
}
impl DeleteVpnConnectionRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpnConnectionRouteOutput`](crate::output::DeleteVpnConnectionRouteOutput)
    pub fn builder() -> crate::output::delete_vpn_connection_route_output::Builder {
        crate::output::delete_vpn_connection_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpnConnectionOutput {}
impl std::fmt::Debug for DeleteVpnConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpnConnectionOutput");
        formatter.finish()
    }
}
/// See [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput)
pub mod delete_vpn_connection_output {
    /// A builder for [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput)
        pub fn build(self) -> crate::output::DeleteVpnConnectionOutput {
            crate::output::DeleteVpnConnectionOutput {}
        }
    }
}
impl DeleteVpnConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpnConnectionOutput`](crate::output::DeleteVpnConnectionOutput)
    pub fn builder() -> crate::output::delete_vpn_connection_output::Builder {
        crate::output::delete_vpn_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpcPeeringConnectionOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DeleteVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpcPeeringConnectionOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput)
pub mod delete_vpc_peering_connection_output {
    /// A builder for [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput)
        pub fn build(self) -> crate::output::DeleteVpcPeeringConnectionOutput {
            crate::output::DeleteVpcPeeringConnectionOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DeleteVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcPeeringConnectionOutput`](crate::output::DeleteVpcPeeringConnectionOutput)
    pub fn builder() -> crate::output::delete_vpc_peering_connection_output::Builder {
        crate::output::delete_vpc_peering_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpcEndpointServiceConfigurationsOutput {
    /// <p>Information about the service configurations that were not deleted, if
    /// applicable.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for DeleteVpcEndpointServiceConfigurationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpcEndpointServiceConfigurationsOutput");
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput)
pub mod delete_vpc_endpoint_service_configurations_output {
    /// A builder for [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput)
        pub fn build(self) -> crate::output::DeleteVpcEndpointServiceConfigurationsOutput {
            crate::output::DeleteVpcEndpointServiceConfigurationsOutput {
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl DeleteVpcEndpointServiceConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointServiceConfigurationsOutput`](crate::output::DeleteVpcEndpointServiceConfigurationsOutput)
    pub fn builder() -> crate::output::delete_vpc_endpoint_service_configurations_output::Builder {
        crate::output::delete_vpc_endpoint_service_configurations_output::Builder::default()
    }
}

/// <p>Contains the output of DeleteVpcEndpoints.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpcEndpointsOutput {
    /// <p>Information about the VPC endpoints that were not successfully deleted.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for DeleteVpcEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpcEndpointsOutput");
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput)
pub mod delete_vpc_endpoints_output {
    /// A builder for [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput)
        pub fn build(self) -> crate::output::DeleteVpcEndpointsOutput {
            crate::output::DeleteVpcEndpointsOutput {
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl DeleteVpcEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointsOutput`](crate::output::DeleteVpcEndpointsOutput)
    pub fn builder() -> crate::output::delete_vpc_endpoints_output::Builder {
        crate::output::delete_vpc_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpcEndpointConnectionNotificationsOutput {
    /// <p>Information about the notifications that could not be deleted
    /// successfully.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for DeleteVpcEndpointConnectionNotificationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpcEndpointConnectionNotificationsOutput");
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput)
pub mod delete_vpc_endpoint_connection_notifications_output {
    /// A builder for [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput)
        pub fn build(self) -> crate::output::DeleteVpcEndpointConnectionNotificationsOutput {
            crate::output::DeleteVpcEndpointConnectionNotificationsOutput {
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl DeleteVpcEndpointConnectionNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcEndpointConnectionNotificationsOutput`](crate::output::DeleteVpcEndpointConnectionNotificationsOutput)
    pub fn builder() -> crate::output::delete_vpc_endpoint_connection_notifications_output::Builder
    {
        crate::output::delete_vpc_endpoint_connection_notifications_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVpcOutput {}
impl std::fmt::Debug for DeleteVpcOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVpcOutput");
        formatter.finish()
    }
}
/// See [`DeleteVpcOutput`](crate::output::DeleteVpcOutput)
pub mod delete_vpc_output {
    /// A builder for [`DeleteVpcOutput`](crate::output::DeleteVpcOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVpcOutput`](crate::output::DeleteVpcOutput)
        pub fn build(self) -> crate::output::DeleteVpcOutput {
            crate::output::DeleteVpcOutput {}
        }
    }
}
impl DeleteVpcOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcOutput`](crate::output::DeleteVpcOutput)
    pub fn builder() -> crate::output::delete_vpc_output::Builder {
        crate::output::delete_vpc_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVolumeOutput {}
impl std::fmt::Debug for DeleteVolumeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVolumeOutput");
        formatter.finish()
    }
}
/// See [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput)
pub mod delete_volume_output {
    /// A builder for [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput)
        pub fn build(self) -> crate::output::DeleteVolumeOutput {
            crate::output::DeleteVolumeOutput {}
        }
    }
}
impl DeleteVolumeOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVolumeOutput`](crate::output::DeleteVolumeOutput)
    pub fn builder() -> crate::output::delete_volume_output::Builder {
        crate::output::delete_volume_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the deleted VPC attachment.</p>
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
}
impl std::fmt::Debug for DeleteTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayVpcAttachmentOutput");
        formatter.field(
            "transit_gateway_vpc_attachment",
            &self.transit_gateway_vpc_attachment,
        );
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput)
pub mod delete_transit_gateway_vpc_attachment_output {
    /// A builder for [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    }
    impl Builder {
        /// <p>Information about the deleted VPC attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            inp: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayVpcAttachmentOutput {
            crate::output::DeleteTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
            }
        }
    }
}
impl DeleteTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayVpcAttachmentOutput`](crate::output::DeleteTransitGatewayVpcAttachmentOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_vpc_attachment_output::Builder {
        crate::output::delete_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayRouteTableOutput {
    /// <p>Information about the deleted transit gateway route table.</p>
    pub transit_gateway_route_table: std::option::Option<crate::model::TransitGatewayRouteTable>,
}
impl std::fmt::Debug for DeleteTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayRouteTableOutput");
        formatter.field(
            "transit_gateway_route_table",
            &self.transit_gateway_route_table,
        );
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput)
pub mod delete_transit_gateway_route_table_output {
    /// A builder for [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table:
            std::option::Option<crate::model::TransitGatewayRouteTable>,
    }
    impl Builder {
        /// <p>Information about the deleted transit gateway route table.</p>
        pub fn transit_gateway_route_table(
            mut self,
            inp: crate::model::TransitGatewayRouteTable,
        ) -> Self {
            self.transit_gateway_route_table = Some(inp);
            self
        }
        pub fn set_transit_gateway_route_table(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayRouteTable>,
        ) -> Self {
            self.transit_gateway_route_table = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayRouteTableOutput {
            crate::output::DeleteTransitGatewayRouteTableOutput {
                transit_gateway_route_table: self.transit_gateway_route_table,
            }
        }
    }
}
impl DeleteTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteTableOutput`](crate::output::DeleteTransitGatewayRouteTableOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_route_table_output::Builder {
        crate::output::delete_transit_gateway_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub route: std::option::Option<crate::model::TransitGatewayRoute>,
}
impl std::fmt::Debug for DeleteTransitGatewayRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayRouteOutput");
        formatter.field("route", &self.route);
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput)
pub mod delete_transit_gateway_route_output {
    /// A builder for [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::TransitGatewayRoute>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, inp: crate::model::TransitGatewayRoute) -> Self {
            self.route = Some(inp);
            self
        }
        pub fn set_route(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayRoute>,
        ) -> Self {
            self.route = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayRouteOutput {
            crate::output::DeleteTransitGatewayRouteOutput { route: self.route }
        }
    }
}
impl DeleteTransitGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayRouteOutput`](crate::output::DeleteTransitGatewayRouteOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_route_output::Builder {
        crate::output::delete_transit_gateway_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the deleted prefix list reference.</p>
    pub transit_gateway_prefix_list_reference:
        std::option::Option<crate::model::TransitGatewayPrefixListReference>,
}
impl std::fmt::Debug for DeleteTransitGatewayPrefixListReferenceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayPrefixListReferenceOutput");
        formatter.field(
            "transit_gateway_prefix_list_reference",
            &self.transit_gateway_prefix_list_reference,
        );
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput)
pub mod delete_transit_gateway_prefix_list_reference_output {
    /// A builder for [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_reference:
            std::option::Option<crate::model::TransitGatewayPrefixListReference>,
    }
    impl Builder {
        /// <p>Information about the deleted prefix list reference.</p>
        pub fn transit_gateway_prefix_list_reference(
            mut self,
            inp: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = Some(inp);
            self
        }
        pub fn set_transit_gateway_prefix_list_reference(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayPrefixListReferenceOutput {
            crate::output::DeleteTransitGatewayPrefixListReferenceOutput {
                transit_gateway_prefix_list_reference: self.transit_gateway_prefix_list_reference,
            }
        }
    }
}
impl DeleteTransitGatewayPrefixListReferenceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPrefixListReferenceOutput`](crate::output::DeleteTransitGatewayPrefixListReferenceOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_prefix_list_reference_output::Builder
    {
        crate::output::delete_transit_gateway_prefix_list_reference_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
}
impl std::fmt::Debug for DeleteTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayPeeringAttachmentOutput");
        formatter.field(
            "transit_gateway_peering_attachment",
            &self.transit_gateway_peering_attachment,
        );
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput)
pub mod delete_transit_gateway_peering_attachment_output {
    /// A builder for [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            inp: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayPeeringAttachmentOutput {
            crate::output::DeleteTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
            }
        }
    }
}
impl DeleteTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayPeeringAttachmentOutput`](crate::output::DeleteTransitGatewayPeeringAttachmentOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_peering_attachment_output::Builder {
        crate::output::delete_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayMulticastDomainOutput {
    /// <p>Information about the deleted transit gateway multicast domain.</p>
    pub transit_gateway_multicast_domain:
        std::option::Option<crate::model::TransitGatewayMulticastDomain>,
}
impl std::fmt::Debug for DeleteTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayMulticastDomainOutput");
        formatter.field(
            "transit_gateway_multicast_domain",
            &self.transit_gateway_multicast_domain,
        );
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput)
pub mod delete_transit_gateway_multicast_domain_output {
    /// A builder for [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_multicast_domain:
            std::option::Option<crate::model::TransitGatewayMulticastDomain>,
    }
    impl Builder {
        /// <p>Information about the deleted transit gateway multicast domain.</p>
        pub fn transit_gateway_multicast_domain(
            mut self,
            inp: crate::model::TransitGatewayMulticastDomain,
        ) -> Self {
            self.transit_gateway_multicast_domain = Some(inp);
            self
        }
        pub fn set_transit_gateway_multicast_domain(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDomain>,
        ) -> Self {
            self.transit_gateway_multicast_domain = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayMulticastDomainOutput {
            crate::output::DeleteTransitGatewayMulticastDomainOutput {
                transit_gateway_multicast_domain: self.transit_gateway_multicast_domain,
            }
        }
    }
}
impl DeleteTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayMulticastDomainOutput`](crate::output::DeleteTransitGatewayMulticastDomainOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_multicast_domain_output::Builder {
        crate::output::delete_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayConnectPeerOutput {
    /// <p>Information about the deleted Connect peer.</p>
    pub transit_gateway_connect_peer: std::option::Option<crate::model::TransitGatewayConnectPeer>,
}
impl std::fmt::Debug for DeleteTransitGatewayConnectPeerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayConnectPeerOutput");
        formatter.field(
            "transit_gateway_connect_peer",
            &self.transit_gateway_connect_peer,
        );
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput)
pub mod delete_transit_gateway_connect_peer_output {
    /// A builder for [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect_peer:
            std::option::Option<crate::model::TransitGatewayConnectPeer>,
    }
    impl Builder {
        /// <p>Information about the deleted Connect peer.</p>
        pub fn transit_gateway_connect_peer(
            mut self,
            inp: crate::model::TransitGatewayConnectPeer,
        ) -> Self {
            self.transit_gateway_connect_peer = Some(inp);
            self
        }
        pub fn set_transit_gateway_connect_peer(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayConnectPeer>,
        ) -> Self {
            self.transit_gateway_connect_peer = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayConnectPeerOutput {
            crate::output::DeleteTransitGatewayConnectPeerOutput {
                transit_gateway_connect_peer: self.transit_gateway_connect_peer,
            }
        }
    }
}
impl DeleteTransitGatewayConnectPeerOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayConnectPeerOutput`](crate::output::DeleteTransitGatewayConnectPeerOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_connect_peer_output::Builder {
        crate::output::delete_transit_gateway_connect_peer_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayConnectOutput {
    /// <p>Information about the deleted Connect attachment.</p>
    pub transit_gateway_connect: std::option::Option<crate::model::TransitGatewayConnect>,
}
impl std::fmt::Debug for DeleteTransitGatewayConnectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayConnectOutput");
        formatter.field("transit_gateway_connect", &self.transit_gateway_connect);
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput)
pub mod delete_transit_gateway_connect_output {
    /// A builder for [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect:
            std::option::Option<crate::model::TransitGatewayConnect>,
    }
    impl Builder {
        /// <p>Information about the deleted Connect attachment.</p>
        pub fn transit_gateway_connect(mut self, inp: crate::model::TransitGatewayConnect) -> Self {
            self.transit_gateway_connect = Some(inp);
            self
        }
        pub fn set_transit_gateway_connect(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayConnect>,
        ) -> Self {
            self.transit_gateway_connect = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayConnectOutput {
            crate::output::DeleteTransitGatewayConnectOutput {
                transit_gateway_connect: self.transit_gateway_connect,
            }
        }
    }
}
impl DeleteTransitGatewayConnectOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayConnectOutput`](crate::output::DeleteTransitGatewayConnectOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_connect_output::Builder {
        crate::output::delete_transit_gateway_connect_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTransitGatewayOutput {
    /// <p>Information about the deleted transit gateway.</p>
    pub transit_gateway: std::option::Option<crate::model::TransitGateway>,
}
impl std::fmt::Debug for DeleteTransitGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTransitGatewayOutput");
        formatter.field("transit_gateway", &self.transit_gateway);
        formatter.finish()
    }
}
/// See [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput)
pub mod delete_transit_gateway_output {
    /// A builder for [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway: std::option::Option<crate::model::TransitGateway>,
    }
    impl Builder {
        /// <p>Information about the deleted transit gateway.</p>
        pub fn transit_gateway(mut self, inp: crate::model::TransitGateway) -> Self {
            self.transit_gateway = Some(inp);
            self
        }
        pub fn set_transit_gateway(
            mut self,
            inp: std::option::Option<crate::model::TransitGateway>,
        ) -> Self {
            self.transit_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput)
        pub fn build(self) -> crate::output::DeleteTransitGatewayOutput {
            crate::output::DeleteTransitGatewayOutput {
                transit_gateway: self.transit_gateway,
            }
        }
    }
}
impl DeleteTransitGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTransitGatewayOutput`](crate::output::DeleteTransitGatewayOutput)
    pub fn builder() -> crate::output::delete_transit_gateway_output::Builder {
        crate::output::delete_transit_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTrafficMirrorTargetOutput {
    /// <p>The ID of the deleted Traffic Mirror target.</p>
    pub traffic_mirror_target_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteTrafficMirrorTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTrafficMirrorTargetOutput");
        formatter.field("traffic_mirror_target_id", &self.traffic_mirror_target_id);
        formatter.finish()
    }
}
/// See [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput)
pub mod delete_traffic_mirror_target_output {
    /// A builder for [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_target_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the deleted Traffic Mirror target.</p>
        pub fn traffic_mirror_target_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.traffic_mirror_target_id = Some(inp.into());
            self
        }
        pub fn set_traffic_mirror_target_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_target_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput)
        pub fn build(self) -> crate::output::DeleteTrafficMirrorTargetOutput {
            crate::output::DeleteTrafficMirrorTargetOutput {
                traffic_mirror_target_id: self.traffic_mirror_target_id,
            }
        }
    }
}
impl DeleteTrafficMirrorTargetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorTargetOutput`](crate::output::DeleteTrafficMirrorTargetOutput)
    pub fn builder() -> crate::output::delete_traffic_mirror_target_output::Builder {
        crate::output::delete_traffic_mirror_target_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTrafficMirrorSessionOutput {
    /// <p>The ID of the deleted Traffic Mirror session.</p>
    pub traffic_mirror_session_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteTrafficMirrorSessionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTrafficMirrorSessionOutput");
        formatter.field("traffic_mirror_session_id", &self.traffic_mirror_session_id);
        formatter.finish()
    }
}
/// See [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput)
pub mod delete_traffic_mirror_session_output {
    /// A builder for [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_session_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the deleted Traffic Mirror session.</p>
        pub fn traffic_mirror_session_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.traffic_mirror_session_id = Some(inp.into());
            self
        }
        pub fn set_traffic_mirror_session_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_session_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput)
        pub fn build(self) -> crate::output::DeleteTrafficMirrorSessionOutput {
            crate::output::DeleteTrafficMirrorSessionOutput {
                traffic_mirror_session_id: self.traffic_mirror_session_id,
            }
        }
    }
}
impl DeleteTrafficMirrorSessionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorSessionOutput`](crate::output::DeleteTrafficMirrorSessionOutput)
    pub fn builder() -> crate::output::delete_traffic_mirror_session_output::Builder {
        crate::output::delete_traffic_mirror_session_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTrafficMirrorFilterRuleOutput {
    /// <p>The ID of the deleted Traffic Mirror rule.</p>
    pub traffic_mirror_filter_rule_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteTrafficMirrorFilterRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTrafficMirrorFilterRuleOutput");
        formatter.field(
            "traffic_mirror_filter_rule_id",
            &self.traffic_mirror_filter_rule_id,
        );
        formatter.finish()
    }
}
/// See [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput)
pub mod delete_traffic_mirror_filter_rule_output {
    /// A builder for [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_rule_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the deleted Traffic Mirror rule.</p>
        pub fn traffic_mirror_filter_rule_id(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.traffic_mirror_filter_rule_id = Some(inp.into());
            self
        }
        pub fn set_traffic_mirror_filter_rule_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_filter_rule_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput)
        pub fn build(self) -> crate::output::DeleteTrafficMirrorFilterRuleOutput {
            crate::output::DeleteTrafficMirrorFilterRuleOutput {
                traffic_mirror_filter_rule_id: self.traffic_mirror_filter_rule_id,
            }
        }
    }
}
impl DeleteTrafficMirrorFilterRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorFilterRuleOutput`](crate::output::DeleteTrafficMirrorFilterRuleOutput)
    pub fn builder() -> crate::output::delete_traffic_mirror_filter_rule_output::Builder {
        crate::output::delete_traffic_mirror_filter_rule_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTrafficMirrorFilterOutput {
    /// <p>The ID of the Traffic Mirror filter.</p>
    pub traffic_mirror_filter_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteTrafficMirrorFilterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTrafficMirrorFilterOutput");
        formatter.field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id);
        formatter.finish()
    }
}
/// See [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput)
pub mod delete_traffic_mirror_filter_output {
    /// A builder for [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the Traffic Mirror filter.</p>
        pub fn traffic_mirror_filter_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.traffic_mirror_filter_id = Some(inp.into());
            self
        }
        pub fn set_traffic_mirror_filter_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.traffic_mirror_filter_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput)
        pub fn build(self) -> crate::output::DeleteTrafficMirrorFilterOutput {
            crate::output::DeleteTrafficMirrorFilterOutput {
                traffic_mirror_filter_id: self.traffic_mirror_filter_id,
            }
        }
    }
}
impl DeleteTrafficMirrorFilterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrafficMirrorFilterOutput`](crate::output::DeleteTrafficMirrorFilterOutput)
    pub fn builder() -> crate::output::delete_traffic_mirror_filter_output::Builder {
        crate::output::delete_traffic_mirror_filter_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTagsOutput {}
impl std::fmt::Debug for DeleteTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTagsOutput");
        formatter.finish()
    }
}
/// See [`DeleteTagsOutput`](crate::output::DeleteTagsOutput)
pub mod delete_tags_output {
    /// A builder for [`DeleteTagsOutput`](crate::output::DeleteTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteTagsOutput`](crate::output::DeleteTagsOutput)
        pub fn build(self) -> crate::output::DeleteTagsOutput {
            crate::output::DeleteTagsOutput {}
        }
    }
}
impl DeleteTagsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTagsOutput`](crate::output::DeleteTagsOutput)
    pub fn builder() -> crate::output::delete_tags_output::Builder {
        crate::output::delete_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSubnetOutput {}
impl std::fmt::Debug for DeleteSubnetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSubnetOutput");
        formatter.finish()
    }
}
/// See [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput)
pub mod delete_subnet_output {
    /// A builder for [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput)
        pub fn build(self) -> crate::output::DeleteSubnetOutput {
            crate::output::DeleteSubnetOutput {}
        }
    }
}
impl DeleteSubnetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSubnetOutput`](crate::output::DeleteSubnetOutput)
    pub fn builder() -> crate::output::delete_subnet_output::Builder {
        crate::output::delete_subnet_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSpotDatafeedSubscriptionOutput {}
impl std::fmt::Debug for DeleteSpotDatafeedSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSpotDatafeedSubscriptionOutput");
        formatter.finish()
    }
}
/// See [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput)
pub mod delete_spot_datafeed_subscription_output {
    /// A builder for [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput)
        pub fn build(self) -> crate::output::DeleteSpotDatafeedSubscriptionOutput {
            crate::output::DeleteSpotDatafeedSubscriptionOutput {}
        }
    }
}
impl DeleteSpotDatafeedSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSpotDatafeedSubscriptionOutput`](crate::output::DeleteSpotDatafeedSubscriptionOutput)
    pub fn builder() -> crate::output::delete_spot_datafeed_subscription_output::Builder {
        crate::output::delete_spot_datafeed_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSnapshotOutput {}
impl std::fmt::Debug for DeleteSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSnapshotOutput");
        formatter.finish()
    }
}
/// See [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput)
pub mod delete_snapshot_output {
    /// A builder for [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput)
        pub fn build(self) -> crate::output::DeleteSnapshotOutput {
            crate::output::DeleteSnapshotOutput {}
        }
    }
}
impl DeleteSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput)
    pub fn builder() -> crate::output::delete_snapshot_output::Builder {
        crate::output::delete_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSecurityGroupOutput {}
impl std::fmt::Debug for DeleteSecurityGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSecurityGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput)
pub mod delete_security_group_output {
    /// A builder for [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput)
        pub fn build(self) -> crate::output::DeleteSecurityGroupOutput {
            crate::output::DeleteSecurityGroupOutput {}
        }
    }
}
impl DeleteSecurityGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSecurityGroupOutput`](crate::output::DeleteSecurityGroupOutput)
    pub fn builder() -> crate::output::delete_security_group_output::Builder {
        crate::output::delete_security_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteRouteTableOutput {}
impl std::fmt::Debug for DeleteRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteRouteTableOutput");
        formatter.finish()
    }
}
/// See [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput)
pub mod delete_route_table_output {
    /// A builder for [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput)
        pub fn build(self) -> crate::output::DeleteRouteTableOutput {
            crate::output::DeleteRouteTableOutput {}
        }
    }
}
impl DeleteRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRouteTableOutput`](crate::output::DeleteRouteTableOutput)
    pub fn builder() -> crate::output::delete_route_table_output::Builder {
        crate::output::delete_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteRouteOutput {}
impl std::fmt::Debug for DeleteRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteRouteOutput");
        formatter.finish()
    }
}
/// See [`DeleteRouteOutput`](crate::output::DeleteRouteOutput)
pub mod delete_route_output {
    /// A builder for [`DeleteRouteOutput`](crate::output::DeleteRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteRouteOutput`](crate::output::DeleteRouteOutput)
        pub fn build(self) -> crate::output::DeleteRouteOutput {
            crate::output::DeleteRouteOutput {}
        }
    }
}
impl DeleteRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRouteOutput`](crate::output::DeleteRouteOutput)
    pub fn builder() -> crate::output::delete_route_output::Builder {
        crate::output::delete_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteQueuedReservedInstancesOutput {
    /// <p>Information about the queued purchases that were successfully deleted.</p>
    pub successful_queued_purchase_deletions:
        std::option::Option<std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>>,
    /// <p>Information about the queued purchases that could not be deleted.</p>
    pub failed_queued_purchase_deletions:
        std::option::Option<std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>>,
}
impl std::fmt::Debug for DeleteQueuedReservedInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteQueuedReservedInstancesOutput");
        formatter.field(
            "successful_queued_purchase_deletions",
            &self.successful_queued_purchase_deletions,
        );
        formatter.field(
            "failed_queued_purchase_deletions",
            &self.failed_queued_purchase_deletions,
        );
        formatter.finish()
    }
}
/// See [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput)
pub mod delete_queued_reserved_instances_output {
    /// A builder for [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_queued_purchase_deletions:
            std::option::Option<std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>>,
        pub(crate) failed_queued_purchase_deletions:
            std::option::Option<std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>>,
    }
    impl Builder {
        pub fn successful_queued_purchase_deletions(
            mut self,
            inp: impl Into<crate::model::SuccessfulQueuedPurchaseDeletion>,
        ) -> Self {
            let mut v = self
                .successful_queued_purchase_deletions
                .unwrap_or_default();
            v.push(inp.into());
            self.successful_queued_purchase_deletions = Some(v);
            self
        }
        pub fn set_successful_queued_purchase_deletions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SuccessfulQueuedPurchaseDeletion>>,
        ) -> Self {
            self.successful_queued_purchase_deletions = inp;
            self
        }
        pub fn failed_queued_purchase_deletions(
            mut self,
            inp: impl Into<crate::model::FailedQueuedPurchaseDeletion>,
        ) -> Self {
            let mut v = self.failed_queued_purchase_deletions.unwrap_or_default();
            v.push(inp.into());
            self.failed_queued_purchase_deletions = Some(v);
            self
        }
        pub fn set_failed_queued_purchase_deletions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::FailedQueuedPurchaseDeletion>>,
        ) -> Self {
            self.failed_queued_purchase_deletions = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput)
        pub fn build(self) -> crate::output::DeleteQueuedReservedInstancesOutput {
            crate::output::DeleteQueuedReservedInstancesOutput {
                successful_queued_purchase_deletions: self.successful_queued_purchase_deletions,
                failed_queued_purchase_deletions: self.failed_queued_purchase_deletions,
            }
        }
    }
}
impl DeleteQueuedReservedInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DeleteQueuedReservedInstancesOutput`](crate::output::DeleteQueuedReservedInstancesOutput)
    pub fn builder() -> crate::output::delete_queued_reserved_instances_output::Builder {
        crate::output::delete_queued_reserved_instances_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePlacementGroupOutput {}
impl std::fmt::Debug for DeletePlacementGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePlacementGroupOutput");
        formatter.finish()
    }
}
/// See [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput)
pub mod delete_placement_group_output {
    /// A builder for [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput)
        pub fn build(self) -> crate::output::DeletePlacementGroupOutput {
            crate::output::DeletePlacementGroupOutput {}
        }
    }
}
impl DeletePlacementGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeletePlacementGroupOutput`](crate::output::DeletePlacementGroupOutput)
    pub fn builder() -> crate::output::delete_placement_group_output::Builder {
        crate::output::delete_placement_group_output::Builder::default()
    }
}

/// <p>Contains the output for DeleteNetworkInterfacePermission.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkInterfacePermissionOutput {
    /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DeleteNetworkInterfacePermissionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkInterfacePermissionOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput)
pub mod delete_network_interface_permission_output {
    /// A builder for [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput)
        pub fn build(self) -> crate::output::DeleteNetworkInterfacePermissionOutput {
            crate::output::DeleteNetworkInterfacePermissionOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DeleteNetworkInterfacePermissionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInterfacePermissionOutput`](crate::output::DeleteNetworkInterfacePermissionOutput)
    pub fn builder() -> crate::output::delete_network_interface_permission_output::Builder {
        crate::output::delete_network_interface_permission_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkInterfaceOutput {}
impl std::fmt::Debug for DeleteNetworkInterfaceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkInterfaceOutput");
        formatter.finish()
    }
}
/// See [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput)
pub mod delete_network_interface_output {
    /// A builder for [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput)
        pub fn build(self) -> crate::output::DeleteNetworkInterfaceOutput {
            crate::output::DeleteNetworkInterfaceOutput {}
        }
    }
}
impl DeleteNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInterfaceOutput`](crate::output::DeleteNetworkInterfaceOutput)
    pub fn builder() -> crate::output::delete_network_interface_output::Builder {
        crate::output::delete_network_interface_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkInsightsPathOutput {
    /// <p>The ID of the path.</p>
    pub network_insights_path_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteNetworkInsightsPathOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkInsightsPathOutput");
        formatter.field("network_insights_path_id", &self.network_insights_path_id);
        formatter.finish()
    }
}
/// See [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput)
pub mod delete_network_insights_path_output {
    /// A builder for [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_path_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the path.</p>
        pub fn network_insights_path_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_insights_path_id = Some(inp.into());
            self
        }
        pub fn set_network_insights_path_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_path_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput)
        pub fn build(self) -> crate::output::DeleteNetworkInsightsPathOutput {
            crate::output::DeleteNetworkInsightsPathOutput {
                network_insights_path_id: self.network_insights_path_id,
            }
        }
    }
}
impl DeleteNetworkInsightsPathOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsPathOutput`](crate::output::DeleteNetworkInsightsPathOutput)
    pub fn builder() -> crate::output::delete_network_insights_path_output::Builder {
        crate::output::delete_network_insights_path_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkInsightsAnalysisOutput {
    /// <p>The ID of the network insights analysis.</p>
    pub network_insights_analysis_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteNetworkInsightsAnalysisOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkInsightsAnalysisOutput");
        formatter.field(
            "network_insights_analysis_id",
            &self.network_insights_analysis_id,
        );
        formatter.finish()
    }
}
/// See [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput)
pub mod delete_network_insights_analysis_output {
    /// A builder for [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_analysis_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the network insights analysis.</p>
        pub fn network_insights_analysis_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_insights_analysis_id = Some(inp.into());
            self
        }
        pub fn set_network_insights_analysis_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_insights_analysis_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput)
        pub fn build(self) -> crate::output::DeleteNetworkInsightsAnalysisOutput {
            crate::output::DeleteNetworkInsightsAnalysisOutput {
                network_insights_analysis_id: self.network_insights_analysis_id,
            }
        }
    }
}
impl DeleteNetworkInsightsAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkInsightsAnalysisOutput`](crate::output::DeleteNetworkInsightsAnalysisOutput)
    pub fn builder() -> crate::output::delete_network_insights_analysis_output::Builder {
        crate::output::delete_network_insights_analysis_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkAclEntryOutput {}
impl std::fmt::Debug for DeleteNetworkAclEntryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkAclEntryOutput");
        formatter.finish()
    }
}
/// See [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput)
pub mod delete_network_acl_entry_output {
    /// A builder for [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput)
        pub fn build(self) -> crate::output::DeleteNetworkAclEntryOutput {
            crate::output::DeleteNetworkAclEntryOutput {}
        }
    }
}
impl DeleteNetworkAclEntryOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclEntryOutput`](crate::output::DeleteNetworkAclEntryOutput)
    pub fn builder() -> crate::output::delete_network_acl_entry_output::Builder {
        crate::output::delete_network_acl_entry_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkAclOutput {}
impl std::fmt::Debug for DeleteNetworkAclOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkAclOutput");
        formatter.finish()
    }
}
/// See [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput)
pub mod delete_network_acl_output {
    /// A builder for [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput)
        pub fn build(self) -> crate::output::DeleteNetworkAclOutput {
            crate::output::DeleteNetworkAclOutput {}
        }
    }
}
impl DeleteNetworkAclOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclOutput`](crate::output::DeleteNetworkAclOutput)
    pub fn builder() -> crate::output::delete_network_acl_output::Builder {
        crate::output::delete_network_acl_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNatGatewayOutput {
    /// <p>The ID of the NAT gateway.</p>
    pub nat_gateway_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteNatGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNatGatewayOutput");
        formatter.field("nat_gateway_id", &self.nat_gateway_id);
        formatter.finish()
    }
}
/// See [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput)
pub mod delete_nat_gateway_output {
    /// A builder for [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) nat_gateway_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the NAT gateway.</p>
        pub fn nat_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.nat_gateway_id = Some(inp.into());
            self
        }
        pub fn set_nat_gateway_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.nat_gateway_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput)
        pub fn build(self) -> crate::output::DeleteNatGatewayOutput {
            crate::output::DeleteNatGatewayOutput {
                nat_gateway_id: self.nat_gateway_id,
            }
        }
    }
}
impl DeleteNatGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNatGatewayOutput`](crate::output::DeleteNatGatewayOutput)
    pub fn builder() -> crate::output::delete_nat_gateway_output::Builder {
        crate::output::delete_nat_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
}
impl std::fmt::Debug for DeleteManagedPrefixListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteManagedPrefixListOutput");
        formatter.field("prefix_list", &self.prefix_list);
        formatter.finish()
    }
}
/// See [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput)
pub mod delete_managed_prefix_list_output {
    /// A builder for [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, inp: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(inp);
            self
        }
        pub fn set_prefix_list(
            mut self,
            inp: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput)
        pub fn build(self) -> crate::output::DeleteManagedPrefixListOutput {
            crate::output::DeleteManagedPrefixListOutput {
                prefix_list: self.prefix_list,
            }
        }
    }
}
impl DeleteManagedPrefixListOutput {
    /// Creates a new builder-style object to manufacture [`DeleteManagedPrefixListOutput`](crate::output::DeleteManagedPrefixListOutput)
    pub fn builder() -> crate::output::delete_managed_prefix_list_output::Builder {
        crate::output::delete_managed_prefix_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLocalGatewayRouteTableVpcAssociationOutput {
    /// <p>Information about the association.</p>
    pub local_gateway_route_table_vpc_association:
        std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
}
impl std::fmt::Debug for DeleteLocalGatewayRouteTableVpcAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLocalGatewayRouteTableVpcAssociationOutput");
        formatter.field(
            "local_gateway_route_table_vpc_association",
            &self.local_gateway_route_table_vpc_association,
        );
        formatter.finish()
    }
}
/// See [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput)
pub mod delete_local_gateway_route_table_vpc_association_output {
    /// A builder for [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_vpc_association:
            std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn local_gateway_route_table_vpc_association(
            mut self,
            inp: crate::model::LocalGatewayRouteTableVpcAssociation,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = Some(inp);
            self
        }
        pub fn set_local_gateway_route_table_vpc_association(
            mut self,
            inp: std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput)
        pub fn build(self) -> crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput {
            crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput {
                local_gateway_route_table_vpc_association: self
                    .local_gateway_route_table_vpc_association,
            }
        }
    }
}
impl DeleteLocalGatewayRouteTableVpcAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteTableVpcAssociationOutput`](crate::output::DeleteLocalGatewayRouteTableVpcAssociationOutput)
    pub fn builder(
    ) -> crate::output::delete_local_gateway_route_table_vpc_association_output::Builder {
        crate::output::delete_local_gateway_route_table_vpc_association_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLocalGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub route: std::option::Option<crate::model::LocalGatewayRoute>,
}
impl std::fmt::Debug for DeleteLocalGatewayRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLocalGatewayRouteOutput");
        formatter.field("route", &self.route);
        formatter.finish()
    }
}
/// See [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput)
pub mod delete_local_gateway_route_output {
    /// A builder for [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::LocalGatewayRoute>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, inp: crate::model::LocalGatewayRoute) -> Self {
            self.route = Some(inp);
            self
        }
        pub fn set_route(
            mut self,
            inp: std::option::Option<crate::model::LocalGatewayRoute>,
        ) -> Self {
            self.route = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput)
        pub fn build(self) -> crate::output::DeleteLocalGatewayRouteOutput {
            crate::output::DeleteLocalGatewayRouteOutput { route: self.route }
        }
    }
}
impl DeleteLocalGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLocalGatewayRouteOutput`](crate::output::DeleteLocalGatewayRouteOutput)
    pub fn builder() -> crate::output::delete_local_gateway_route_output::Builder {
        crate::output::delete_local_gateway_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLaunchTemplateVersionsOutput {
    /// <p>Information about the launch template versions that were successfully
    /// deleted.</p>
    pub successfully_deleted_launch_template_versions: std::option::Option<
        std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
    >,
    /// <p>Information about the launch template versions that could not be deleted.</p>
    pub unsuccessfully_deleted_launch_template_versions: std::option::Option<
        std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
    >,
}
impl std::fmt::Debug for DeleteLaunchTemplateVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLaunchTemplateVersionsOutput");
        formatter.field(
            "successfully_deleted_launch_template_versions",
            &self.successfully_deleted_launch_template_versions,
        );
        formatter.field(
            "unsuccessfully_deleted_launch_template_versions",
            &self.unsuccessfully_deleted_launch_template_versions,
        );
        formatter.finish()
    }
}
/// See [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput)
pub mod delete_launch_template_versions_output {
    /// A builder for [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successfully_deleted_launch_template_versions: std::option::Option<
            std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
        >,
        pub(crate) unsuccessfully_deleted_launch_template_versions: std::option::Option<
            std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
        >,
    }
    impl Builder {
        pub fn successfully_deleted_launch_template_versions(
            mut self,
            inp: impl Into<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
        ) -> Self {
            let mut v = self
                .successfully_deleted_launch_template_versions
                .unwrap_or_default();
            v.push(inp.into());
            self.successfully_deleted_launch_template_versions = Some(v);
            self
        }
        pub fn set_successfully_deleted_launch_template_versions(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseSuccessItem>,
            >,
        ) -> Self {
            self.successfully_deleted_launch_template_versions = inp;
            self
        }
        pub fn unsuccessfully_deleted_launch_template_versions(
            mut self,
            inp: impl Into<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
        ) -> Self {
            let mut v = self
                .unsuccessfully_deleted_launch_template_versions
                .unwrap_or_default();
            v.push(inp.into());
            self.unsuccessfully_deleted_launch_template_versions = Some(v);
            self
        }
        pub fn set_unsuccessfully_deleted_launch_template_versions(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::DeleteLaunchTemplateVersionsResponseErrorItem>,
            >,
        ) -> Self {
            self.unsuccessfully_deleted_launch_template_versions = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput)
        pub fn build(self) -> crate::output::DeleteLaunchTemplateVersionsOutput {
            crate::output::DeleteLaunchTemplateVersionsOutput {
                successfully_deleted_launch_template_versions: self
                    .successfully_deleted_launch_template_versions,
                unsuccessfully_deleted_launch_template_versions: self
                    .unsuccessfully_deleted_launch_template_versions,
            }
        }
    }
}
impl DeleteLaunchTemplateVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchTemplateVersionsOutput`](crate::output::DeleteLaunchTemplateVersionsOutput)
    pub fn builder() -> crate::output::delete_launch_template_versions_output::Builder {
        crate::output::delete_launch_template_versions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    pub launch_template: std::option::Option<crate::model::LaunchTemplate>,
}
impl std::fmt::Debug for DeleteLaunchTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLaunchTemplateOutput");
        formatter.field("launch_template", &self.launch_template);
        formatter.finish()
    }
}
/// See [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput)
pub mod delete_launch_template_output {
    /// A builder for [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplate>,
    }
    impl Builder {
        /// <p>Information about the launch template.</p>
        pub fn launch_template(mut self, inp: crate::model::LaunchTemplate) -> Self {
            self.launch_template = Some(inp);
            self
        }
        pub fn set_launch_template(
            mut self,
            inp: std::option::Option<crate::model::LaunchTemplate>,
        ) -> Self {
            self.launch_template = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput)
        pub fn build(self) -> crate::output::DeleteLaunchTemplateOutput {
            crate::output::DeleteLaunchTemplateOutput {
                launch_template: self.launch_template,
            }
        }
    }
}
impl DeleteLaunchTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchTemplateOutput`](crate::output::DeleteLaunchTemplateOutput)
    pub fn builder() -> crate::output::delete_launch_template_output::Builder {
        crate::output::delete_launch_template_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteKeyPairOutput {}
impl std::fmt::Debug for DeleteKeyPairOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteKeyPairOutput");
        formatter.finish()
    }
}
/// See [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput)
pub mod delete_key_pair_output {
    /// A builder for [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput)
        pub fn build(self) -> crate::output::DeleteKeyPairOutput {
            crate::output::DeleteKeyPairOutput {}
        }
    }
}
impl DeleteKeyPairOutput {
    /// Creates a new builder-style object to manufacture [`DeleteKeyPairOutput`](crate::output::DeleteKeyPairOutput)
    pub fn builder() -> crate::output::delete_key_pair_output::Builder {
        crate::output::delete_key_pair_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInternetGatewayOutput {}
impl std::fmt::Debug for DeleteInternetGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInternetGatewayOutput");
        formatter.finish()
    }
}
/// See [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput)
pub mod delete_internet_gateway_output {
    /// A builder for [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput)
        pub fn build(self) -> crate::output::DeleteInternetGatewayOutput {
            crate::output::DeleteInternetGatewayOutput {}
        }
    }
}
impl DeleteInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInternetGatewayOutput`](crate::output::DeleteInternetGatewayOutput)
    pub fn builder() -> crate::output::delete_internet_gateway_output::Builder {
        crate::output::delete_internet_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteFpgaImageOutput {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for DeleteFpgaImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteFpgaImageOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput)
pub mod delete_fpga_image_output {
    /// A builder for [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput)
        pub fn build(self) -> crate::output::DeleteFpgaImageOutput {
            crate::output::DeleteFpgaImageOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl DeleteFpgaImageOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFpgaImageOutput`](crate::output::DeleteFpgaImageOutput)
    pub fn builder() -> crate::output::delete_fpga_image_output::Builder {
        crate::output::delete_fpga_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteFlowLogsOutput {
    /// <p>Information about the flow logs that could not be deleted successfully.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for DeleteFlowLogsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteFlowLogsOutput");
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput)
pub mod delete_flow_logs_output {
    /// A builder for [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput)
        pub fn build(self) -> crate::output::DeleteFlowLogsOutput {
            crate::output::DeleteFlowLogsOutput {
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl DeleteFlowLogsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFlowLogsOutput`](crate::output::DeleteFlowLogsOutput)
    pub fn builder() -> crate::output::delete_flow_logs_output::Builder {
        crate::output::delete_flow_logs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteFleetsOutput {
    /// <p>Information about the EC2 Fleets that are successfully deleted.</p>
    pub successful_fleet_deletions:
        std::option::Option<std::vec::Vec<crate::model::DeleteFleetSuccessItem>>,
    /// <p>Information about the EC2 Fleets that are not successfully deleted.</p>
    pub unsuccessful_fleet_deletions:
        std::option::Option<std::vec::Vec<crate::model::DeleteFleetErrorItem>>,
}
impl std::fmt::Debug for DeleteFleetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteFleetsOutput");
        formatter.field(
            "successful_fleet_deletions",
            &self.successful_fleet_deletions,
        );
        formatter.field(
            "unsuccessful_fleet_deletions",
            &self.unsuccessful_fleet_deletions,
        );
        formatter.finish()
    }
}
/// See [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput)
pub mod delete_fleets_output {
    /// A builder for [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_fleet_deletions:
            std::option::Option<std::vec::Vec<crate::model::DeleteFleetSuccessItem>>,
        pub(crate) unsuccessful_fleet_deletions:
            std::option::Option<std::vec::Vec<crate::model::DeleteFleetErrorItem>>,
    }
    impl Builder {
        pub fn successful_fleet_deletions(
            mut self,
            inp: impl Into<crate::model::DeleteFleetSuccessItem>,
        ) -> Self {
            let mut v = self.successful_fleet_deletions.unwrap_or_default();
            v.push(inp.into());
            self.successful_fleet_deletions = Some(v);
            self
        }
        pub fn set_successful_fleet_deletions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::DeleteFleetSuccessItem>>,
        ) -> Self {
            self.successful_fleet_deletions = inp;
            self
        }
        pub fn unsuccessful_fleet_deletions(
            mut self,
            inp: impl Into<crate::model::DeleteFleetErrorItem>,
        ) -> Self {
            let mut v = self.unsuccessful_fleet_deletions.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful_fleet_deletions = Some(v);
            self
        }
        pub fn set_unsuccessful_fleet_deletions(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::DeleteFleetErrorItem>>,
        ) -> Self {
            self.unsuccessful_fleet_deletions = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput)
        pub fn build(self) -> crate::output::DeleteFleetsOutput {
            crate::output::DeleteFleetsOutput {
                successful_fleet_deletions: self.successful_fleet_deletions,
                unsuccessful_fleet_deletions: self.unsuccessful_fleet_deletions,
            }
        }
    }
}
impl DeleteFleetsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFleetsOutput`](crate::output::DeleteFleetsOutput)
    pub fn builder() -> crate::output::delete_fleets_output::Builder {
        crate::output::delete_fleets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEgressOnlyInternetGatewayOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_code: std::option::Option<bool>,
}
impl std::fmt::Debug for DeleteEgressOnlyInternetGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEgressOnlyInternetGatewayOutput");
        formatter.field("return_code", &self.return_code);
        formatter.finish()
    }
}
/// See [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput)
pub mod delete_egress_only_internet_gateway_output {
    /// A builder for [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) return_code: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn return_code(mut self, inp: bool) -> Self {
            self.return_code = Some(inp);
            self
        }
        pub fn set_return_code(mut self, inp: std::option::Option<bool>) -> Self {
            self.return_code = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput)
        pub fn build(self) -> crate::output::DeleteEgressOnlyInternetGatewayOutput {
            crate::output::DeleteEgressOnlyInternetGatewayOutput {
                return_code: self.return_code,
            }
        }
    }
}
impl DeleteEgressOnlyInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEgressOnlyInternetGatewayOutput`](crate::output::DeleteEgressOnlyInternetGatewayOutput)
    pub fn builder() -> crate::output::delete_egress_only_internet_gateway_output::Builder {
        crate::output::delete_egress_only_internet_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDhcpOptionsOutput {}
impl std::fmt::Debug for DeleteDhcpOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDhcpOptionsOutput");
        formatter.finish()
    }
}
/// See [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput)
pub mod delete_dhcp_options_output {
    /// A builder for [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput)
        pub fn build(self) -> crate::output::DeleteDhcpOptionsOutput {
            crate::output::DeleteDhcpOptionsOutput {}
        }
    }
}
impl DeleteDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDhcpOptionsOutput`](crate::output::DeleteDhcpOptionsOutput)
    pub fn builder() -> crate::output::delete_dhcp_options_output::Builder {
        crate::output::delete_dhcp_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomerGatewayOutput {}
impl std::fmt::Debug for DeleteCustomerGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomerGatewayOutput");
        formatter.finish()
    }
}
/// See [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput)
pub mod delete_customer_gateway_output {
    /// A builder for [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput)
        pub fn build(self) -> crate::output::DeleteCustomerGatewayOutput {
            crate::output::DeleteCustomerGatewayOutput {}
        }
    }
}
impl DeleteCustomerGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomerGatewayOutput`](crate::output::DeleteCustomerGatewayOutput)
    pub fn builder() -> crate::output::delete_customer_gateway_output::Builder {
        crate::output::delete_customer_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteClientVpnRouteOutput {
    /// <p>The current state of the route.</p>
    pub status: std::option::Option<crate::model::ClientVpnRouteStatus>,
}
impl std::fmt::Debug for DeleteClientVpnRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteClientVpnRouteOutput");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput)
pub mod delete_client_vpn_route_output {
    /// A builder for [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnRouteStatus>,
    }
    impl Builder {
        /// <p>The current state of the route.</p>
        pub fn status(mut self, inp: crate::model::ClientVpnRouteStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientVpnRouteStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput)
        pub fn build(self) -> crate::output::DeleteClientVpnRouteOutput {
            crate::output::DeleteClientVpnRouteOutput {
                status: self.status,
            }
        }
    }
}
impl DeleteClientVpnRouteOutput {
    /// Creates a new builder-style object to manufacture [`DeleteClientVpnRouteOutput`](crate::output::DeleteClientVpnRouteOutput)
    pub fn builder() -> crate::output::delete_client_vpn_route_output::Builder {
        crate::output::delete_client_vpn_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteClientVpnEndpointOutput {
    /// <p>The current state of the Client VPN endpoint.</p>
    pub status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
}
impl std::fmt::Debug for DeleteClientVpnEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteClientVpnEndpointOutput");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput)
pub mod delete_client_vpn_endpoint_output {
    /// A builder for [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
    }
    impl Builder {
        /// <p>The current state of the Client VPN endpoint.</p>
        pub fn status(mut self, inp: crate::model::ClientVpnEndpointStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput)
        pub fn build(self) -> crate::output::DeleteClientVpnEndpointOutput {
            crate::output::DeleteClientVpnEndpointOutput {
                status: self.status,
            }
        }
    }
}
impl DeleteClientVpnEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteClientVpnEndpointOutput`](crate::output::DeleteClientVpnEndpointOutput)
    pub fn builder() -> crate::output::delete_client_vpn_endpoint_output::Builder {
        crate::output::delete_client_vpn_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCarrierGatewayOutput {
    /// <p>Information about the carrier gateway.</p>
    pub carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
}
impl std::fmt::Debug for DeleteCarrierGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCarrierGatewayOutput");
        formatter.field("carrier_gateway", &self.carrier_gateway);
        formatter.finish()
    }
}
/// See [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput)
pub mod delete_carrier_gateway_output {
    /// A builder for [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
    }
    impl Builder {
        /// <p>Information about the carrier gateway.</p>
        pub fn carrier_gateway(mut self, inp: crate::model::CarrierGateway) -> Self {
            self.carrier_gateway = Some(inp);
            self
        }
        pub fn set_carrier_gateway(
            mut self,
            inp: std::option::Option<crate::model::CarrierGateway>,
        ) -> Self {
            self.carrier_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput)
        pub fn build(self) -> crate::output::DeleteCarrierGatewayOutput {
            crate::output::DeleteCarrierGatewayOutput {
                carrier_gateway: self.carrier_gateway,
            }
        }
    }
}
impl DeleteCarrierGatewayOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCarrierGatewayOutput`](crate::output::DeleteCarrierGatewayOutput)
    pub fn builder() -> crate::output::delete_carrier_gateway_output::Builder {
        crate::output::delete_carrier_gateway_output::Builder::default()
    }
}

/// <p>Contains the output of CreateVpnGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpnGatewayOutput {
    /// <p>Information about the virtual private gateway.</p>
    pub vpn_gateway: std::option::Option<crate::model::VpnGateway>,
}
impl std::fmt::Debug for CreateVpnGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpnGatewayOutput");
        formatter.field("vpn_gateway", &self.vpn_gateway);
        formatter.finish()
    }
}
/// See [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput)
pub mod create_vpn_gateway_output {
    /// A builder for [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_gateway: std::option::Option<crate::model::VpnGateway>,
    }
    impl Builder {
        /// <p>Information about the virtual private gateway.</p>
        pub fn vpn_gateway(mut self, inp: crate::model::VpnGateway) -> Self {
            self.vpn_gateway = Some(inp);
            self
        }
        pub fn set_vpn_gateway(
            mut self,
            inp: std::option::Option<crate::model::VpnGateway>,
        ) -> Self {
            self.vpn_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput)
        pub fn build(self) -> crate::output::CreateVpnGatewayOutput {
            crate::output::CreateVpnGatewayOutput {
                vpn_gateway: self.vpn_gateway,
            }
        }
    }
}
impl CreateVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpnGatewayOutput`](crate::output::CreateVpnGatewayOutput)
    pub fn builder() -> crate::output::create_vpn_gateway_output::Builder {
        crate::output::create_vpn_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpnConnectionRouteOutput {}
impl std::fmt::Debug for CreateVpnConnectionRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpnConnectionRouteOutput");
        formatter.finish()
    }
}
/// See [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput)
pub mod create_vpn_connection_route_output {
    /// A builder for [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput)
        pub fn build(self) -> crate::output::CreateVpnConnectionRouteOutput {
            crate::output::CreateVpnConnectionRouteOutput {}
        }
    }
}
impl CreateVpnConnectionRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpnConnectionRouteOutput`](crate::output::CreateVpnConnectionRouteOutput)
    pub fn builder() -> crate::output::create_vpn_connection_route_output::Builder {
        crate::output::create_vpn_connection_route_output::Builder::default()
    }
}

/// <p>Contains the output of CreateVpnConnection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpnConnectionOutput {
    /// <p>Information about the VPN connection.</p>
    pub vpn_connection: std::option::Option<crate::model::VpnConnection>,
}
impl std::fmt::Debug for CreateVpnConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpnConnectionOutput");
        formatter.field("vpn_connection", &self.vpn_connection);
        formatter.finish()
    }
}
/// See [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput)
pub mod create_vpn_connection_output {
    /// A builder for [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpn_connection: std::option::Option<crate::model::VpnConnection>,
    }
    impl Builder {
        /// <p>Information about the VPN connection.</p>
        pub fn vpn_connection(mut self, inp: crate::model::VpnConnection) -> Self {
            self.vpn_connection = Some(inp);
            self
        }
        pub fn set_vpn_connection(
            mut self,
            inp: std::option::Option<crate::model::VpnConnection>,
        ) -> Self {
            self.vpn_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput)
        pub fn build(self) -> crate::output::CreateVpnConnectionOutput {
            crate::output::CreateVpnConnectionOutput {
                vpn_connection: self.vpn_connection,
            }
        }
    }
}
impl CreateVpnConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpnConnectionOutput`](crate::output::CreateVpnConnectionOutput)
    pub fn builder() -> crate::output::create_vpn_connection_output::Builder {
        crate::output::create_vpn_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpcPeeringConnectionOutput {
    /// <p>Information about the VPC peering connection.</p>
    pub vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
}
impl std::fmt::Debug for CreateVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpcPeeringConnectionOutput");
        formatter.field("vpc_peering_connection", &self.vpc_peering_connection);
        formatter.finish()
    }
}
/// See [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput)
pub mod create_vpc_peering_connection_output {
    /// A builder for [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
    }
    impl Builder {
        /// <p>Information about the VPC peering connection.</p>
        pub fn vpc_peering_connection(mut self, inp: crate::model::VpcPeeringConnection) -> Self {
            self.vpc_peering_connection = Some(inp);
            self
        }
        pub fn set_vpc_peering_connection(
            mut self,
            inp: std::option::Option<crate::model::VpcPeeringConnection>,
        ) -> Self {
            self.vpc_peering_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput)
        pub fn build(self) -> crate::output::CreateVpcPeeringConnectionOutput {
            crate::output::CreateVpcPeeringConnectionOutput {
                vpc_peering_connection: self.vpc_peering_connection,
            }
        }
    }
}
impl CreateVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcPeeringConnectionOutput`](crate::output::CreateVpcPeeringConnectionOutput)
    pub fn builder() -> crate::output::create_vpc_peering_connection_output::Builder {
        crate::output::create_vpc_peering_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpcEndpointServiceConfigurationOutput {
    /// <p>Information about the service configuration.</p>
    pub service_configuration: std::option::Option<crate::model::ServiceConfiguration>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateVpcEndpointServiceConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpcEndpointServiceConfigurationOutput");
        formatter.field("service_configuration", &self.service_configuration);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput)
pub mod create_vpc_endpoint_service_configuration_output {
    /// A builder for [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_configuration: std::option::Option<crate::model::ServiceConfiguration>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the service configuration.</p>
        pub fn service_configuration(mut self, inp: crate::model::ServiceConfiguration) -> Self {
            self.service_configuration = Some(inp);
            self
        }
        pub fn set_service_configuration(
            mut self,
            inp: std::option::Option<crate::model::ServiceConfiguration>,
        ) -> Self {
            self.service_configuration = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput)
        pub fn build(self) -> crate::output::CreateVpcEndpointServiceConfigurationOutput {
            crate::output::CreateVpcEndpointServiceConfigurationOutput {
                service_configuration: self.service_configuration,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateVpcEndpointServiceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointServiceConfigurationOutput`](crate::output::CreateVpcEndpointServiceConfigurationOutput)
    pub fn builder() -> crate::output::create_vpc_endpoint_service_configuration_output::Builder {
        crate::output::create_vpc_endpoint_service_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpcEndpointConnectionNotificationOutput {
    /// <p>Information about the notification.</p>
    pub connection_notification: std::option::Option<crate::model::ConnectionNotification>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateVpcEndpointConnectionNotificationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpcEndpointConnectionNotificationOutput");
        formatter.field("connection_notification", &self.connection_notification);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput)
pub mod create_vpc_endpoint_connection_notification_output {
    /// A builder for [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_notification:
            std::option::Option<crate::model::ConnectionNotification>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the notification.</p>
        pub fn connection_notification(
            mut self,
            inp: crate::model::ConnectionNotification,
        ) -> Self {
            self.connection_notification = Some(inp);
            self
        }
        pub fn set_connection_notification(
            mut self,
            inp: std::option::Option<crate::model::ConnectionNotification>,
        ) -> Self {
            self.connection_notification = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput)
        pub fn build(self) -> crate::output::CreateVpcEndpointConnectionNotificationOutput {
            crate::output::CreateVpcEndpointConnectionNotificationOutput {
                connection_notification: self.connection_notification,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateVpcEndpointConnectionNotificationOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointConnectionNotificationOutput`](crate::output::CreateVpcEndpointConnectionNotificationOutput)
    pub fn builder() -> crate::output::create_vpc_endpoint_connection_notification_output::Builder {
        crate::output::create_vpc_endpoint_connection_notification_output::Builder::default()
    }
}

/// <p>Contains the output of CreateVpcEndpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpcEndpointOutput {
    /// <p>Information about the endpoint.</p>
    pub vpc_endpoint: std::option::Option<crate::model::VpcEndpoint>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateVpcEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpcEndpointOutput");
        formatter.field("vpc_endpoint", &self.vpc_endpoint);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput)
pub mod create_vpc_endpoint_output {
    /// A builder for [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_endpoint: std::option::Option<crate::model::VpcEndpoint>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the endpoint.</p>
        pub fn vpc_endpoint(mut self, inp: crate::model::VpcEndpoint) -> Self {
            self.vpc_endpoint = Some(inp);
            self
        }
        pub fn set_vpc_endpoint(
            mut self,
            inp: std::option::Option<crate::model::VpcEndpoint>,
        ) -> Self {
            self.vpc_endpoint = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput)
        pub fn build(self) -> crate::output::CreateVpcEndpointOutput {
            crate::output::CreateVpcEndpointOutput {
                vpc_endpoint: self.vpc_endpoint,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateVpcEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput)
    pub fn builder() -> crate::output::create_vpc_endpoint_output::Builder {
        crate::output::create_vpc_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVpcOutput {
    /// <p>Information about the VPC.</p>
    pub vpc: std::option::Option<crate::model::Vpc>,
}
impl std::fmt::Debug for CreateVpcOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVpcOutput");
        formatter.field("vpc", &self.vpc);
        formatter.finish()
    }
}
/// See [`CreateVpcOutput`](crate::output::CreateVpcOutput)
pub mod create_vpc_output {
    /// A builder for [`CreateVpcOutput`](crate::output::CreateVpcOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc: std::option::Option<crate::model::Vpc>,
    }
    impl Builder {
        /// <p>Information about the VPC.</p>
        pub fn vpc(mut self, inp: crate::model::Vpc) -> Self {
            self.vpc = Some(inp);
            self
        }
        pub fn set_vpc(mut self, inp: std::option::Option<crate::model::Vpc>) -> Self {
            self.vpc = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcOutput`](crate::output::CreateVpcOutput)
        pub fn build(self) -> crate::output::CreateVpcOutput {
            crate::output::CreateVpcOutput { vpc: self.vpc }
        }
    }
}
impl CreateVpcOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcOutput`](crate::output::CreateVpcOutput)
    pub fn builder() -> crate::output::create_vpc_output::Builder {
        crate::output::create_vpc_output::Builder::default()
    }
}

/// <p>Describes a volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVolumeOutput {
    /// <p>Information about the volume attachments.</p>
    pub attachments: std::option::Option<std::vec::Vec<crate::model::VolumeAttachment>>,
    /// <p>The Availability Zone for the volume.</p>
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The time stamp when volume creation was initiated.</p>
    pub create_time: std::option::Option<smithy_types::Instant>,
    /// <p>Indicates whether the volume is encrypted.</p>
    pub encrypted: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the
    /// volume encryption key for the volume.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiBs.</p>
    pub size: std::option::Option<i32>,
    /// <p>The snapshot from which the volume was created, if applicable.</p>
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The volume state.</p>
    pub state: std::option::Option<crate::model::VolumeState>,
    /// <p>The ID of the volume.</p>
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents
    /// the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline
    /// performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
    pub iops: std::option::Option<i32>,
    /// <p>Any tags assigned to the volume.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The volume type.</p>
    pub volume_type: std::option::Option<crate::model::VolumeType>,
    /// <p>Indicates whether the volume was created using fast snapshot restore.</p>
    pub fast_restored: std::option::Option<bool>,
    /// <p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>
    pub multi_attach_enabled: std::option::Option<bool>,
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    pub throughput: std::option::Option<i32>,
}
impl std::fmt::Debug for CreateVolumeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVolumeOutput");
        formatter.field("attachments", &self.attachments);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("create_time", &self.create_time);
        formatter.field("encrypted", &self.encrypted);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("outpost_arn", &self.outpost_arn);
        formatter.field("size", &self.size);
        formatter.field("snapshot_id", &self.snapshot_id);
        formatter.field("state", &self.state);
        formatter.field("volume_id", &self.volume_id);
        formatter.field("iops", &self.iops);
        formatter.field("tags", &self.tags);
        formatter.field("volume_type", &self.volume_type);
        formatter.field("fast_restored", &self.fast_restored);
        formatter.field("multi_attach_enabled", &self.multi_attach_enabled);
        formatter.field("throughput", &self.throughput);
        formatter.finish()
    }
}
/// See [`CreateVolumeOutput`](crate::output::CreateVolumeOutput)
pub mod create_volume_output {
    /// A builder for [`CreateVolumeOutput`](crate::output::CreateVolumeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attachments: std::option::Option<std::vec::Vec<crate::model::VolumeAttachment>>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) create_time: std::option::Option<smithy_types::Instant>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
        pub(crate) size: std::option::Option<i32>,
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::VolumeState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) volume_type: std::option::Option<crate::model::VolumeType>,
        pub(crate) fast_restored: std::option::Option<bool>,
        pub(crate) multi_attach_enabled: std::option::Option<bool>,
        pub(crate) throughput: std::option::Option<i32>,
    }
    impl Builder {
        pub fn attachments(mut self, inp: impl Into<crate::model::VolumeAttachment>) -> Self {
            let mut v = self.attachments.unwrap_or_default();
            v.push(inp.into());
            self.attachments = Some(v);
            self
        }
        pub fn set_attachments(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::VolumeAttachment>>,
        ) -> Self {
            self.attachments = inp;
            self
        }
        /// <p>The Availability Zone for the volume.</p>
        pub fn availability_zone(mut self, inp: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(inp.into());
            self
        }
        pub fn set_availability_zone(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = inp;
            self
        }
        /// <p>The time stamp when volume creation was initiated.</p>
        pub fn create_time(mut self, inp: smithy_types::Instant) -> Self {
            self.create_time = Some(inp);
            self
        }
        pub fn set_create_time(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.create_time = inp;
            self
        }
        /// <p>Indicates whether the volume is encrypted.</p>
        pub fn encrypted(mut self, inp: bool) -> Self {
            self.encrypted = Some(inp);
            self
        }
        pub fn set_encrypted(mut self, inp: std::option::Option<bool>) -> Self {
            self.encrypted = inp;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the
        /// volume encryption key for the volume.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(inp.into());
            self
        }
        pub fn set_kms_key_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = inp;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
        pub fn outpost_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(inp.into());
            self
        }
        pub fn set_outpost_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = inp;
            self
        }
        /// <p>The size of the volume, in GiBs.</p>
        pub fn size(mut self, inp: i32) -> Self {
            self.size = Some(inp);
            self
        }
        pub fn set_size(mut self, inp: std::option::Option<i32>) -> Self {
            self.size = inp;
            self
        }
        /// <p>The snapshot from which the volume was created, if applicable.</p>
        pub fn snapshot_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        pub fn set_snapshot_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = inp;
            self
        }
        /// <p>The volume state.</p>
        pub fn state(mut self, inp: crate::model::VolumeState) -> Self {
            self.state = Some(inp);
            self
        }
        pub fn set_state(mut self, inp: std::option::Option<crate::model::VolumeState>) -> Self {
            self.state = inp;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(inp.into());
            self
        }
        pub fn set_volume_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.volume_id = inp;
            self
        }
        /// <p>The number of I/O operations per second (IOPS). For <code>gp3</code>, <code>io1</code>, and <code>io2</code> volumes, this represents
        /// the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline
        /// performance of the volume and the rate at which the volume accumulates I/O credits for bursting.</p>
        pub fn iops(mut self, inp: i32) -> Self {
            self.iops = Some(inp);
            self
        }
        pub fn set_iops(mut self, inp: std::option::Option<i32>) -> Self {
            self.iops = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// <p>The volume type.</p>
        pub fn volume_type(mut self, inp: crate::model::VolumeType) -> Self {
            self.volume_type = Some(inp);
            self
        }
        pub fn set_volume_type(
            mut self,
            inp: std::option::Option<crate::model::VolumeType>,
        ) -> Self {
            self.volume_type = inp;
            self
        }
        /// <p>Indicates whether the volume was created using fast snapshot restore.</p>
        pub fn fast_restored(mut self, inp: bool) -> Self {
            self.fast_restored = Some(inp);
            self
        }
        pub fn set_fast_restored(mut self, inp: std::option::Option<bool>) -> Self {
            self.fast_restored = inp;
            self
        }
        /// <p>Indicates whether Amazon EBS Multi-Attach is enabled.</p>
        pub fn multi_attach_enabled(mut self, inp: bool) -> Self {
            self.multi_attach_enabled = Some(inp);
            self
        }
        pub fn set_multi_attach_enabled(mut self, inp: std::option::Option<bool>) -> Self {
            self.multi_attach_enabled = inp;
            self
        }
        /// <p>The throughput that the volume supports, in MiB/s.</p>
        pub fn throughput(mut self, inp: i32) -> Self {
            self.throughput = Some(inp);
            self
        }
        pub fn set_throughput(mut self, inp: std::option::Option<i32>) -> Self {
            self.throughput = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateVolumeOutput`](crate::output::CreateVolumeOutput)
        pub fn build(self) -> crate::output::CreateVolumeOutput {
            crate::output::CreateVolumeOutput {
                attachments: self.attachments,
                availability_zone: self.availability_zone,
                create_time: self.create_time,
                encrypted: self.encrypted,
                kms_key_id: self.kms_key_id,
                outpost_arn: self.outpost_arn,
                size: self.size,
                snapshot_id: self.snapshot_id,
                state: self.state,
                volume_id: self.volume_id,
                iops: self.iops,
                tags: self.tags,
                volume_type: self.volume_type,
                fast_restored: self.fast_restored,
                multi_attach_enabled: self.multi_attach_enabled,
                throughput: self.throughput,
            }
        }
    }
}
impl CreateVolumeOutput {
    /// Creates a new builder-style object to manufacture [`CreateVolumeOutput`](crate::output::CreateVolumeOutput)
    pub fn builder() -> crate::output::create_volume_output::Builder {
        crate::output::create_volume_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayVpcAttachmentOutput {
    /// <p>Information about the VPC attachment.</p>
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
}
impl std::fmt::Debug for CreateTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayVpcAttachmentOutput");
        formatter.field(
            "transit_gateway_vpc_attachment",
            &self.transit_gateway_vpc_attachment,
        );
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput)
pub mod create_transit_gateway_vpc_attachment_output {
    /// A builder for [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    }
    impl Builder {
        /// <p>Information about the VPC attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            inp: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayVpcAttachmentOutput {
            crate::output::CreateTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
            }
        }
    }
}
impl CreateTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayVpcAttachmentOutput`](crate::output::CreateTransitGatewayVpcAttachmentOutput)
    pub fn builder() -> crate::output::create_transit_gateway_vpc_attachment_output::Builder {
        crate::output::create_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayRouteTableOutput {
    /// <p>Information about the transit gateway route table.</p>
    pub transit_gateway_route_table: std::option::Option<crate::model::TransitGatewayRouteTable>,
}
impl std::fmt::Debug for CreateTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayRouteTableOutput");
        formatter.field(
            "transit_gateway_route_table",
            &self.transit_gateway_route_table,
        );
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput)
pub mod create_transit_gateway_route_table_output {
    /// A builder for [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_route_table:
            std::option::Option<crate::model::TransitGatewayRouteTable>,
    }
    impl Builder {
        /// <p>Information about the transit gateway route table.</p>
        pub fn transit_gateway_route_table(
            mut self,
            inp: crate::model::TransitGatewayRouteTable,
        ) -> Self {
            self.transit_gateway_route_table = Some(inp);
            self
        }
        pub fn set_transit_gateway_route_table(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayRouteTable>,
        ) -> Self {
            self.transit_gateway_route_table = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayRouteTableOutput {
            crate::output::CreateTransitGatewayRouteTableOutput {
                transit_gateway_route_table: self.transit_gateway_route_table,
            }
        }
    }
}
impl CreateTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteTableOutput`](crate::output::CreateTransitGatewayRouteTableOutput)
    pub fn builder() -> crate::output::create_transit_gateway_route_table_output::Builder {
        crate::output::create_transit_gateway_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub route: std::option::Option<crate::model::TransitGatewayRoute>,
}
impl std::fmt::Debug for CreateTransitGatewayRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayRouteOutput");
        formatter.field("route", &self.route);
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput)
pub mod create_transit_gateway_route_output {
    /// A builder for [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::TransitGatewayRoute>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, inp: crate::model::TransitGatewayRoute) -> Self {
            self.route = Some(inp);
            self
        }
        pub fn set_route(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayRoute>,
        ) -> Self {
            self.route = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayRouteOutput {
            crate::output::CreateTransitGatewayRouteOutput { route: self.route }
        }
    }
}
impl CreateTransitGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayRouteOutput`](crate::output::CreateTransitGatewayRouteOutput)
    pub fn builder() -> crate::output::create_transit_gateway_route_output::Builder {
        crate::output::create_transit_gateway_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayPrefixListReferenceOutput {
    /// <p>Information about the prefix list reference.</p>
    pub transit_gateway_prefix_list_reference:
        std::option::Option<crate::model::TransitGatewayPrefixListReference>,
}
impl std::fmt::Debug for CreateTransitGatewayPrefixListReferenceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayPrefixListReferenceOutput");
        formatter.field(
            "transit_gateway_prefix_list_reference",
            &self.transit_gateway_prefix_list_reference,
        );
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput)
pub mod create_transit_gateway_prefix_list_reference_output {
    /// A builder for [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_prefix_list_reference:
            std::option::Option<crate::model::TransitGatewayPrefixListReference>,
    }
    impl Builder {
        /// <p>Information about the prefix list reference.</p>
        pub fn transit_gateway_prefix_list_reference(
            mut self,
            inp: crate::model::TransitGatewayPrefixListReference,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = Some(inp);
            self
        }
        pub fn set_transit_gateway_prefix_list_reference(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPrefixListReference>,
        ) -> Self {
            self.transit_gateway_prefix_list_reference = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayPrefixListReferenceOutput {
            crate::output::CreateTransitGatewayPrefixListReferenceOutput {
                transit_gateway_prefix_list_reference: self.transit_gateway_prefix_list_reference,
            }
        }
    }
}
impl CreateTransitGatewayPrefixListReferenceOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPrefixListReferenceOutput`](crate::output::CreateTransitGatewayPrefixListReferenceOutput)
    pub fn builder() -> crate::output::create_transit_gateway_prefix_list_reference_output::Builder
    {
        crate::output::create_transit_gateway_prefix_list_reference_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
}
impl std::fmt::Debug for CreateTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayPeeringAttachmentOutput");
        formatter.field(
            "transit_gateway_peering_attachment",
            &self.transit_gateway_peering_attachment,
        );
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput)
pub mod create_transit_gateway_peering_attachment_output {
    /// A builder for [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            inp: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayPeeringAttachmentOutput {
            crate::output::CreateTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
            }
        }
    }
}
impl CreateTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayPeeringAttachmentOutput`](crate::output::CreateTransitGatewayPeeringAttachmentOutput)
    pub fn builder() -> crate::output::create_transit_gateway_peering_attachment_output::Builder {
        crate::output::create_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the transit gateway multicast domain.</p>
    pub transit_gateway_multicast_domain:
        std::option::Option<crate::model::TransitGatewayMulticastDomain>,
}
impl std::fmt::Debug for CreateTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayMulticastDomainOutput");
        formatter.field(
            "transit_gateway_multicast_domain",
            &self.transit_gateway_multicast_domain,
        );
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput)
pub mod create_transit_gateway_multicast_domain_output {
    /// A builder for [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_multicast_domain:
            std::option::Option<crate::model::TransitGatewayMulticastDomain>,
    }
    impl Builder {
        /// <p>Information about the transit gateway multicast domain.</p>
        pub fn transit_gateway_multicast_domain(
            mut self,
            inp: crate::model::TransitGatewayMulticastDomain,
        ) -> Self {
            self.transit_gateway_multicast_domain = Some(inp);
            self
        }
        pub fn set_transit_gateway_multicast_domain(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDomain>,
        ) -> Self {
            self.transit_gateway_multicast_domain = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayMulticastDomainOutput {
            crate::output::CreateTransitGatewayMulticastDomainOutput {
                transit_gateway_multicast_domain: self.transit_gateway_multicast_domain,
            }
        }
    }
}
impl CreateTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayMulticastDomainOutput`](crate::output::CreateTransitGatewayMulticastDomainOutput)
    pub fn builder() -> crate::output::create_transit_gateway_multicast_domain_output::Builder {
        crate::output::create_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayConnectPeerOutput {
    /// <p>Information about the Connect peer.</p>
    pub transit_gateway_connect_peer: std::option::Option<crate::model::TransitGatewayConnectPeer>,
}
impl std::fmt::Debug for CreateTransitGatewayConnectPeerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayConnectPeerOutput");
        formatter.field(
            "transit_gateway_connect_peer",
            &self.transit_gateway_connect_peer,
        );
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput)
pub mod create_transit_gateway_connect_peer_output {
    /// A builder for [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect_peer:
            std::option::Option<crate::model::TransitGatewayConnectPeer>,
    }
    impl Builder {
        /// <p>Information about the Connect peer.</p>
        pub fn transit_gateway_connect_peer(
            mut self,
            inp: crate::model::TransitGatewayConnectPeer,
        ) -> Self {
            self.transit_gateway_connect_peer = Some(inp);
            self
        }
        pub fn set_transit_gateway_connect_peer(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayConnectPeer>,
        ) -> Self {
            self.transit_gateway_connect_peer = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayConnectPeerOutput {
            crate::output::CreateTransitGatewayConnectPeerOutput {
                transit_gateway_connect_peer: self.transit_gateway_connect_peer,
            }
        }
    }
}
impl CreateTransitGatewayConnectPeerOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayConnectPeerOutput`](crate::output::CreateTransitGatewayConnectPeerOutput)
    pub fn builder() -> crate::output::create_transit_gateway_connect_peer_output::Builder {
        crate::output::create_transit_gateway_connect_peer_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayConnectOutput {
    /// <p>Information about the Connect attachment.</p>
    pub transit_gateway_connect: std::option::Option<crate::model::TransitGatewayConnect>,
}
impl std::fmt::Debug for CreateTransitGatewayConnectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayConnectOutput");
        formatter.field("transit_gateway_connect", &self.transit_gateway_connect);
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput)
pub mod create_transit_gateway_connect_output {
    /// A builder for [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_connect:
            std::option::Option<crate::model::TransitGatewayConnect>,
    }
    impl Builder {
        /// <p>Information about the Connect attachment.</p>
        pub fn transit_gateway_connect(mut self, inp: crate::model::TransitGatewayConnect) -> Self {
            self.transit_gateway_connect = Some(inp);
            self
        }
        pub fn set_transit_gateway_connect(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayConnect>,
        ) -> Self {
            self.transit_gateway_connect = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayConnectOutput {
            crate::output::CreateTransitGatewayConnectOutput {
                transit_gateway_connect: self.transit_gateway_connect,
            }
        }
    }
}
impl CreateTransitGatewayConnectOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayConnectOutput`](crate::output::CreateTransitGatewayConnectOutput)
    pub fn builder() -> crate::output::create_transit_gateway_connect_output::Builder {
        crate::output::create_transit_gateway_connect_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTransitGatewayOutput {
    /// <p>Information about the transit gateway.</p>
    pub transit_gateway: std::option::Option<crate::model::TransitGateway>,
}
impl std::fmt::Debug for CreateTransitGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTransitGatewayOutput");
        formatter.field("transit_gateway", &self.transit_gateway);
        formatter.finish()
    }
}
/// See [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput)
pub mod create_transit_gateway_output {
    /// A builder for [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway: std::option::Option<crate::model::TransitGateway>,
    }
    impl Builder {
        /// <p>Information about the transit gateway.</p>
        pub fn transit_gateway(mut self, inp: crate::model::TransitGateway) -> Self {
            self.transit_gateway = Some(inp);
            self
        }
        pub fn set_transit_gateway(
            mut self,
            inp: std::option::Option<crate::model::TransitGateway>,
        ) -> Self {
            self.transit_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput)
        pub fn build(self) -> crate::output::CreateTransitGatewayOutput {
            crate::output::CreateTransitGatewayOutput {
                transit_gateway: self.transit_gateway,
            }
        }
    }
}
impl CreateTransitGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayOutput`](crate::output::CreateTransitGatewayOutput)
    pub fn builder() -> crate::output::create_transit_gateway_output::Builder {
        crate::output::create_transit_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTrafficMirrorTargetOutput {
    /// <p>Information about the Traffic Mirror target.</p>
    pub traffic_mirror_target: std::option::Option<crate::model::TrafficMirrorTarget>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateTrafficMirrorTargetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTrafficMirrorTargetOutput");
        formatter.field("traffic_mirror_target", &self.traffic_mirror_target);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput)
pub mod create_traffic_mirror_target_output {
    /// A builder for [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_target: std::option::Option<crate::model::TrafficMirrorTarget>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror target.</p>
        pub fn traffic_mirror_target(mut self, inp: crate::model::TrafficMirrorTarget) -> Self {
            self.traffic_mirror_target = Some(inp);
            self
        }
        pub fn set_traffic_mirror_target(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorTarget>,
        ) -> Self {
            self.traffic_mirror_target = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput)
        pub fn build(self) -> crate::output::CreateTrafficMirrorTargetOutput {
            crate::output::CreateTrafficMirrorTargetOutput {
                traffic_mirror_target: self.traffic_mirror_target,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateTrafficMirrorTargetOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorTargetOutput`](crate::output::CreateTrafficMirrorTargetOutput)
    pub fn builder() -> crate::output::create_traffic_mirror_target_output::Builder {
        crate::output::create_traffic_mirror_target_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTrafficMirrorSessionOutput {
    /// <p>Information about the Traffic Mirror session.</p>
    pub traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateTrafficMirrorSessionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTrafficMirrorSessionOutput");
        formatter.field("traffic_mirror_session", &self.traffic_mirror_session);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput)
pub mod create_traffic_mirror_session_output {
    /// A builder for [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_session: std::option::Option<crate::model::TrafficMirrorSession>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror session.</p>
        pub fn traffic_mirror_session(mut self, inp: crate::model::TrafficMirrorSession) -> Self {
            self.traffic_mirror_session = Some(inp);
            self
        }
        pub fn set_traffic_mirror_session(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorSession>,
        ) -> Self {
            self.traffic_mirror_session = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput)
        pub fn build(self) -> crate::output::CreateTrafficMirrorSessionOutput {
            crate::output::CreateTrafficMirrorSessionOutput {
                traffic_mirror_session: self.traffic_mirror_session,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateTrafficMirrorSessionOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorSessionOutput`](crate::output::CreateTrafficMirrorSessionOutput)
    pub fn builder() -> crate::output::create_traffic_mirror_session_output::Builder {
        crate::output::create_traffic_mirror_session_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTrafficMirrorFilterRuleOutput {
    /// <p>The Traffic Mirror rule.</p>
    pub traffic_mirror_filter_rule: std::option::Option<crate::model::TrafficMirrorFilterRule>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateTrafficMirrorFilterRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTrafficMirrorFilterRuleOutput");
        formatter.field(
            "traffic_mirror_filter_rule",
            &self.traffic_mirror_filter_rule,
        );
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput)
pub mod create_traffic_mirror_filter_rule_output {
    /// A builder for [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter_rule:
            std::option::Option<crate::model::TrafficMirrorFilterRule>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Traffic Mirror rule.</p>
        pub fn traffic_mirror_filter_rule(
            mut self,
            inp: crate::model::TrafficMirrorFilterRule,
        ) -> Self {
            self.traffic_mirror_filter_rule = Some(inp);
            self
        }
        pub fn set_traffic_mirror_filter_rule(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorFilterRule>,
        ) -> Self {
            self.traffic_mirror_filter_rule = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput)
        pub fn build(self) -> crate::output::CreateTrafficMirrorFilterRuleOutput {
            crate::output::CreateTrafficMirrorFilterRuleOutput {
                traffic_mirror_filter_rule: self.traffic_mirror_filter_rule,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateTrafficMirrorFilterRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorFilterRuleOutput`](crate::output::CreateTrafficMirrorFilterRuleOutput)
    pub fn builder() -> crate::output::create_traffic_mirror_filter_rule_output::Builder {
        crate::output::create_traffic_mirror_filter_rule_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTrafficMirrorFilterOutput {
    /// <p>Information about the Traffic Mirror filter.</p>
    pub traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateTrafficMirrorFilterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTrafficMirrorFilterOutput");
        formatter.field("traffic_mirror_filter", &self.traffic_mirror_filter);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput)
pub mod create_traffic_mirror_filter_output {
    /// A builder for [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_mirror_filter: std::option::Option<crate::model::TrafficMirrorFilter>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the Traffic Mirror filter.</p>
        pub fn traffic_mirror_filter(mut self, inp: crate::model::TrafficMirrorFilter) -> Self {
            self.traffic_mirror_filter = Some(inp);
            self
        }
        pub fn set_traffic_mirror_filter(
            mut self,
            inp: std::option::Option<crate::model::TrafficMirrorFilter>,
        ) -> Self {
            self.traffic_mirror_filter = inp;
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput)
        pub fn build(self) -> crate::output::CreateTrafficMirrorFilterOutput {
            crate::output::CreateTrafficMirrorFilterOutput {
                traffic_mirror_filter: self.traffic_mirror_filter,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateTrafficMirrorFilterOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrafficMirrorFilterOutput`](crate::output::CreateTrafficMirrorFilterOutput)
    pub fn builder() -> crate::output::create_traffic_mirror_filter_output::Builder {
        crate::output::create_traffic_mirror_filter_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTagsOutput {}
impl std::fmt::Debug for CreateTagsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTagsOutput");
        formatter.finish()
    }
}
/// See [`CreateTagsOutput`](crate::output::CreateTagsOutput)
pub mod create_tags_output {
    /// A builder for [`CreateTagsOutput`](crate::output::CreateTagsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateTagsOutput`](crate::output::CreateTagsOutput)
        pub fn build(self) -> crate::output::CreateTagsOutput {
            crate::output::CreateTagsOutput {}
        }
    }
}
impl CreateTagsOutput {
    /// Creates a new builder-style object to manufacture [`CreateTagsOutput`](crate::output::CreateTagsOutput)
    pub fn builder() -> crate::output::create_tags_output::Builder {
        crate::output::create_tags_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSubnetOutput {
    /// <p>Information about the subnet.</p>
    pub subnet: std::option::Option<crate::model::Subnet>,
}
impl std::fmt::Debug for CreateSubnetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSubnetOutput");
        formatter.field("subnet", &self.subnet);
        formatter.finish()
    }
}
/// See [`CreateSubnetOutput`](crate::output::CreateSubnetOutput)
pub mod create_subnet_output {
    /// A builder for [`CreateSubnetOutput`](crate::output::CreateSubnetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet: std::option::Option<crate::model::Subnet>,
    }
    impl Builder {
        /// <p>Information about the subnet.</p>
        pub fn subnet(mut self, inp: crate::model::Subnet) -> Self {
            self.subnet = Some(inp);
            self
        }
        pub fn set_subnet(mut self, inp: std::option::Option<crate::model::Subnet>) -> Self {
            self.subnet = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateSubnetOutput`](crate::output::CreateSubnetOutput)
        pub fn build(self) -> crate::output::CreateSubnetOutput {
            crate::output::CreateSubnetOutput {
                subnet: self.subnet,
            }
        }
    }
}
impl CreateSubnetOutput {
    /// Creates a new builder-style object to manufacture [`CreateSubnetOutput`](crate::output::CreateSubnetOutput)
    pub fn builder() -> crate::output::create_subnet_output::Builder {
        crate::output::create_subnet_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateStoreImageTaskOutput {
    /// <p>The name of the stored AMI object in the S3 bucket.</p>
    pub object_key: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateStoreImageTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateStoreImageTaskOutput");
        formatter.field("object_key", &self.object_key);
        formatter.finish()
    }
}
/// See [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput)
pub mod create_store_image_task_output {
    /// A builder for [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) object_key: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the stored AMI object in the S3 bucket.</p>
        pub fn object_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.object_key = Some(inp.into());
            self
        }
        pub fn set_object_key(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.object_key = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput)
        pub fn build(self) -> crate::output::CreateStoreImageTaskOutput {
            crate::output::CreateStoreImageTaskOutput {
                object_key: self.object_key,
            }
        }
    }
}
impl CreateStoreImageTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateStoreImageTaskOutput`](crate::output::CreateStoreImageTaskOutput)
    pub fn builder() -> crate::output::create_store_image_task_output::Builder {
        crate::output::create_store_image_task_output::Builder::default()
    }
}

/// <p>Contains the output of CreateSpotDatafeedSubscription.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSpotDatafeedSubscriptionOutput {
    /// <p>The Spot Instance data feed subscription.</p>
    pub spot_datafeed_subscription: std::option::Option<crate::model::SpotDatafeedSubscription>,
}
impl std::fmt::Debug for CreateSpotDatafeedSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSpotDatafeedSubscriptionOutput");
        formatter.field(
            "spot_datafeed_subscription",
            &self.spot_datafeed_subscription,
        );
        formatter.finish()
    }
}
/// See [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput)
pub mod create_spot_datafeed_subscription_output {
    /// A builder for [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) spot_datafeed_subscription:
            std::option::Option<crate::model::SpotDatafeedSubscription>,
    }
    impl Builder {
        /// <p>The Spot Instance data feed subscription.</p>
        pub fn spot_datafeed_subscription(
            mut self,
            inp: crate::model::SpotDatafeedSubscription,
        ) -> Self {
            self.spot_datafeed_subscription = Some(inp);
            self
        }
        pub fn set_spot_datafeed_subscription(
            mut self,
            inp: std::option::Option<crate::model::SpotDatafeedSubscription>,
        ) -> Self {
            self.spot_datafeed_subscription = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput)
        pub fn build(self) -> crate::output::CreateSpotDatafeedSubscriptionOutput {
            crate::output::CreateSpotDatafeedSubscriptionOutput {
                spot_datafeed_subscription: self.spot_datafeed_subscription,
            }
        }
    }
}
impl CreateSpotDatafeedSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateSpotDatafeedSubscriptionOutput`](crate::output::CreateSpotDatafeedSubscriptionOutput)
    pub fn builder() -> crate::output::create_spot_datafeed_subscription_output::Builder {
        crate::output::create_spot_datafeed_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSnapshotsOutput {
    /// <p>List of snapshots.</p>
    pub snapshots: std::option::Option<std::vec::Vec<crate::model::SnapshotInfo>>,
}
impl std::fmt::Debug for CreateSnapshotsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSnapshotsOutput");
        formatter.field("snapshots", &self.snapshots);
        formatter.finish()
    }
}
/// See [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput)
pub mod create_snapshots_output {
    /// A builder for [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshots: std::option::Option<std::vec::Vec<crate::model::SnapshotInfo>>,
    }
    impl Builder {
        pub fn snapshots(mut self, inp: impl Into<crate::model::SnapshotInfo>) -> Self {
            let mut v = self.snapshots.unwrap_or_default();
            v.push(inp.into());
            self.snapshots = Some(v);
            self
        }
        pub fn set_snapshots(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::SnapshotInfo>>,
        ) -> Self {
            self.snapshots = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput)
        pub fn build(self) -> crate::output::CreateSnapshotsOutput {
            crate::output::CreateSnapshotsOutput {
                snapshots: self.snapshots,
            }
        }
    }
}
impl CreateSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotsOutput`](crate::output::CreateSnapshotsOutput)
    pub fn builder() -> crate::output::create_snapshots_output::Builder {
        crate::output::create_snapshots_output::Builder::default()
    }
}

/// <p>Describes a snapshot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSnapshotOutput {
    /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier
    /// that corresponds to the data encryption key that was used to encrypt the original volume or
    /// snapshot copy. Because data encryption keys are inherited by volumes created from snapshots,
    /// and vice versa, if snapshots share the same data encryption key identifier, then they belong
    /// to the same volume/snapshot lineage. This parameter is only returned by <a>DescribeSnapshots</a>.</p>
    pub data_encryption_key_id: std::option::Option<std::string::String>,
    /// <p>The description for the snapshot.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub encrypted: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the
    /// volume encryption key for the parent volume.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The AWS account ID of the EBS snapshot owner.</p>
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The progress of the snapshot, as a percentage.</p>
    pub progress: std::option::Option<std::string::String>,
    /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is
    /// created.</p>
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The time stamp when the snapshot was initiated.</p>
    pub start_time: std::option::Option<smithy_types::Instant>,
    /// <p>The snapshot state.</p>
    pub state: std::option::Option<crate::model::SnapshotState>,
    /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails
    /// (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error
    /// state details to help you diagnose why the error occurred. This parameter is only returned by
    /// <a>DescribeSnapshots</a>.</p>
    pub state_message: std::option::Option<std::string::String>,
    /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action have an arbitrary volume ID that should not be used for any
    /// purpose.</p>
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    pub volume_size: std::option::Option<i32>,
    /// <p>The AWS owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not  
    /// the user-configured AWS account alias set using the IAM console.</p>
    pub owner_alias: std::option::Option<std::string::String>,
    /// <p>The ARN of the AWS Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">EBS Local Snapshot on Outposts</a> in the
    /// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>Any tags assigned to the snapshot.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSnapshotOutput");
        formatter.field("data_encryption_key_id", &self.data_encryption_key_id);
        formatter.field("description", &self.description);
        formatter.field("encrypted", &self.encrypted);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("owner_id", &self.owner_id);
        formatter.field("progress", &self.progress);
        formatter.field("snapshot_id", &self.snapshot_id);
        formatter.field("start_time", &self.start_time);
        formatter.field("state", &self.state);
        formatter.field("state_message", &self.state_message);
        formatter.field("volume_id", &self.volume_id);
        formatter.field("volume_size", &self.volume_size);
        formatter.field("owner_alias", &self.owner_alias);
        formatter.field("outpost_arn", &self.outpost_arn);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput)
pub mod create_snapshot_output {
    /// A builder for [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_encryption_key_id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) progress: std::option::Option<std::string::String>,
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<smithy_types::Instant>,
        pub(crate) state: std::option::Option<crate::model::SnapshotState>,
        pub(crate) state_message: std::option::Option<std::string::String>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) volume_size: std::option::Option<i32>,
        pub(crate) owner_alias: std::option::Option<std::string::String>,
        pub(crate) outpost_arn: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier
        /// that corresponds to the data encryption key that was used to encrypt the original volume or
        /// snapshot copy. Because data encryption keys are inherited by volumes created from snapshots,
        /// and vice versa, if snapshots share the same data encryption key identifier, then they belong
        /// to the same volume/snapshot lineage. This parameter is only returned by <a>DescribeSnapshots</a>.</p>
        pub fn data_encryption_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.data_encryption_key_id = Some(inp.into());
            self
        }
        pub fn set_data_encryption_key_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.data_encryption_key_id = inp;
            self
        }
        /// <p>The description for the snapshot.</p>
        pub fn description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.description = Some(inp.into());
            self
        }
        pub fn set_description(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.description = inp;
            self
        }
        /// <p>Indicates whether the snapshot is encrypted.</p>
        pub fn encrypted(mut self, inp: bool) -> Self {
            self.encrypted = Some(inp);
            self
        }
        pub fn set_encrypted(mut self, inp: std::option::Option<bool>) -> Self {
            self.encrypted = inp;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the
        /// volume encryption key for the parent volume.</p>
        pub fn kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(inp.into());
            self
        }
        pub fn set_kms_key_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = inp;
            self
        }
        /// <p>The AWS account ID of the EBS snapshot owner.</p>
        pub fn owner_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(inp.into());
            self
        }
        pub fn set_owner_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.owner_id = inp;
            self
        }
        /// <p>The progress of the snapshot, as a percentage.</p>
        pub fn progress(mut self, inp: impl Into<std::string::String>) -> Self {
            self.progress = Some(inp.into());
            self
        }
        pub fn set_progress(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.progress = inp;
            self
        }
        /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is
        /// created.</p>
        pub fn snapshot_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        pub fn set_snapshot_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = inp;
            self
        }
        /// <p>The time stamp when the snapshot was initiated.</p>
        pub fn start_time(mut self, inp: smithy_types::Instant) -> Self {
            self.start_time = Some(inp);
            self
        }
        pub fn set_start_time(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.start_time = inp;
            self
        }
        /// <p>The snapshot state.</p>
        pub fn state(mut self, inp: crate::model::SnapshotState) -> Self {
            self.state = Some(inp);
            self
        }
        pub fn set_state(mut self, inp: std::option::Option<crate::model::SnapshotState>) -> Self {
            self.state = inp;
            self
        }
        /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails
        /// (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error
        /// state details to help you diagnose why the error occurred. This parameter is only returned by
        /// <a>DescribeSnapshots</a>.</p>
        pub fn state_message(mut self, inp: impl Into<std::string::String>) -> Self {
            self.state_message = Some(inp.into());
            self
        }
        pub fn set_state_message(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.state_message = inp;
            self
        }
        /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action have an arbitrary volume ID that should not be used for any
        /// purpose.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(inp.into());
            self
        }
        pub fn set_volume_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.volume_id = inp;
            self
        }
        /// <p>The size of the volume, in GiB.</p>
        pub fn volume_size(mut self, inp: i32) -> Self {
            self.volume_size = Some(inp);
            self
        }
        pub fn set_volume_size(mut self, inp: std::option::Option<i32>) -> Self {
            self.volume_size = inp;
            self
        }
        /// <p>The AWS owner alias, from an Amazon-maintained list (<code>amazon</code>). This is not  
        /// the user-configured AWS account alias set using the IAM console.</p>
        pub fn owner_alias(mut self, inp: impl Into<std::string::String>) -> Self {
            self.owner_alias = Some(inp.into());
            self
        }
        pub fn set_owner_alias(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.owner_alias = inp;
            self
        }
        /// <p>The ARN of the AWS Outpost on which the snapshot is stored. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html">EBS Local Snapshot on Outposts</a> in the
        /// <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
        pub fn outpost_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.outpost_arn = Some(inp.into());
            self
        }
        pub fn set_outpost_arn(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.outpost_arn = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput)
        pub fn build(self) -> crate::output::CreateSnapshotOutput {
            crate::output::CreateSnapshotOutput {
                data_encryption_key_id: self.data_encryption_key_id,
                description: self.description,
                encrypted: self.encrypted,
                kms_key_id: self.kms_key_id,
                owner_id: self.owner_id,
                progress: self.progress,
                snapshot_id: self.snapshot_id,
                start_time: self.start_time,
                state: self.state,
                state_message: self.state_message,
                volume_id: self.volume_id,
                volume_size: self.volume_size,
                owner_alias: self.owner_alias,
                outpost_arn: self.outpost_arn,
                tags: self.tags,
            }
        }
    }
}
impl CreateSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput)
    pub fn builder() -> crate::output::create_snapshot_output::Builder {
        crate::output::create_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSecurityGroupOutput {
    /// <p>The ID of the security group.</p>
    pub group_id: std::option::Option<std::string::String>,
    /// <p>The tags assigned to the security group.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateSecurityGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSecurityGroupOutput");
        formatter.field("group_id", &self.group_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput)
pub mod create_security_group_output {
    /// A builder for [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) group_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The ID of the security group.</p>
        pub fn group_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.group_id = Some(inp.into());
            self
        }
        pub fn set_group_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.group_id = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput)
        pub fn build(self) -> crate::output::CreateSecurityGroupOutput {
            crate::output::CreateSecurityGroupOutput {
                group_id: self.group_id,
                tags: self.tags,
            }
        }
    }
}
impl CreateSecurityGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateSecurityGroupOutput`](crate::output::CreateSecurityGroupOutput)
    pub fn builder() -> crate::output::create_security_group_output::Builder {
        crate::output::create_security_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRouteTableOutput {
    /// <p>Information about the route table.</p>
    pub route_table: std::option::Option<crate::model::RouteTable>,
}
impl std::fmt::Debug for CreateRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRouteTableOutput");
        formatter.field("route_table", &self.route_table);
        formatter.finish()
    }
}
/// See [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput)
pub mod create_route_table_output {
    /// A builder for [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route_table: std::option::Option<crate::model::RouteTable>,
    }
    impl Builder {
        /// <p>Information about the route table.</p>
        pub fn route_table(mut self, inp: crate::model::RouteTable) -> Self {
            self.route_table = Some(inp);
            self
        }
        pub fn set_route_table(
            mut self,
            inp: std::option::Option<crate::model::RouteTable>,
        ) -> Self {
            self.route_table = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput)
        pub fn build(self) -> crate::output::CreateRouteTableOutput {
            crate::output::CreateRouteTableOutput {
                route_table: self.route_table,
            }
        }
    }
}
impl CreateRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateRouteTableOutput`](crate::output::CreateRouteTableOutput)
    pub fn builder() -> crate::output::create_route_table_output::Builder {
        crate::output::create_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRouteOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for CreateRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRouteOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`CreateRouteOutput`](crate::output::CreateRouteOutput)
pub mod create_route_output {
    /// A builder for [`CreateRouteOutput`](crate::output::CreateRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateRouteOutput`](crate::output::CreateRouteOutput)
        pub fn build(self) -> crate::output::CreateRouteOutput {
            crate::output::CreateRouteOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl CreateRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateRouteOutput`](crate::output::CreateRouteOutput)
    pub fn builder() -> crate::output::create_route_output::Builder {
        crate::output::create_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateRestoreImageTaskOutput {
    /// <p>The AMI ID.</p>
    pub image_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateRestoreImageTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateRestoreImageTaskOutput");
        formatter.field("image_id", &self.image_id);
        formatter.finish()
    }
}
/// See [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput)
pub mod create_restore_image_task_output {
    /// A builder for [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The AMI ID.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput)
        pub fn build(self) -> crate::output::CreateRestoreImageTaskOutput {
            crate::output::CreateRestoreImageTaskOutput {
                image_id: self.image_id,
            }
        }
    }
}
impl CreateRestoreImageTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateRestoreImageTaskOutput`](crate::output::CreateRestoreImageTaskOutput)
    pub fn builder() -> crate::output::create_restore_image_task_output::Builder {
        crate::output::create_restore_image_task_output::Builder::default()
    }
}

/// <p>Contains the output of CreateReservedInstancesListing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateReservedInstancesListingOutput {
    /// <p>Information about the Standard Reserved Instance listing.</p>
    pub reserved_instances_listings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
}
impl std::fmt::Debug for CreateReservedInstancesListingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateReservedInstancesListingOutput");
        formatter.field(
            "reserved_instances_listings",
            &self.reserved_instances_listings,
        );
        formatter.finish()
    }
}
/// See [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput)
pub mod create_reserved_instances_listing_output {
    /// A builder for [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_listings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
    }
    impl Builder {
        pub fn reserved_instances_listings(
            mut self,
            inp: impl Into<crate::model::ReservedInstancesListing>,
        ) -> Self {
            let mut v = self.reserved_instances_listings.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instances_listings = Some(v);
            self
        }
        pub fn set_reserved_instances_listings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        ) -> Self {
            self.reserved_instances_listings = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput)
        pub fn build(self) -> crate::output::CreateReservedInstancesListingOutput {
            crate::output::CreateReservedInstancesListingOutput {
                reserved_instances_listings: self.reserved_instances_listings,
            }
        }
    }
}
impl CreateReservedInstancesListingOutput {
    /// Creates a new builder-style object to manufacture [`CreateReservedInstancesListingOutput`](crate::output::CreateReservedInstancesListingOutput)
    pub fn builder() -> crate::output::create_reserved_instances_listing_output::Builder {
        crate::output::create_reserved_instances_listing_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateReplaceRootVolumeTaskOutput {
    /// <p>Information about the root volume replacement task.</p>
    pub replace_root_volume_task: std::option::Option<crate::model::ReplaceRootVolumeTask>,
}
impl std::fmt::Debug for CreateReplaceRootVolumeTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateReplaceRootVolumeTaskOutput");
        formatter.field("replace_root_volume_task", &self.replace_root_volume_task);
        formatter.finish()
    }
}
/// See [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput)
pub mod create_replace_root_volume_task_output {
    /// A builder for [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replace_root_volume_task:
            std::option::Option<crate::model::ReplaceRootVolumeTask>,
    }
    impl Builder {
        /// <p>Information about the root volume replacement task.</p>
        pub fn replace_root_volume_task(
            mut self,
            inp: crate::model::ReplaceRootVolumeTask,
        ) -> Self {
            self.replace_root_volume_task = Some(inp);
            self
        }
        pub fn set_replace_root_volume_task(
            mut self,
            inp: std::option::Option<crate::model::ReplaceRootVolumeTask>,
        ) -> Self {
            self.replace_root_volume_task = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput)
        pub fn build(self) -> crate::output::CreateReplaceRootVolumeTaskOutput {
            crate::output::CreateReplaceRootVolumeTaskOutput {
                replace_root_volume_task: self.replace_root_volume_task,
            }
        }
    }
}
impl CreateReplaceRootVolumeTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateReplaceRootVolumeTaskOutput`](crate::output::CreateReplaceRootVolumeTaskOutput)
    pub fn builder() -> crate::output::create_replace_root_volume_task_output::Builder {
        crate::output::create_replace_root_volume_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePlacementGroupOutput {
    /// <p>Describes a placement group.</p>
    pub placement_group: std::option::Option<crate::model::PlacementGroup>,
}
impl std::fmt::Debug for CreatePlacementGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePlacementGroupOutput");
        formatter.field("placement_group", &self.placement_group);
        formatter.finish()
    }
}
/// See [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput)
pub mod create_placement_group_output {
    /// A builder for [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) placement_group: std::option::Option<crate::model::PlacementGroup>,
    }
    impl Builder {
        /// <p>Describes a placement group.</p>
        pub fn placement_group(mut self, inp: crate::model::PlacementGroup) -> Self {
            self.placement_group = Some(inp);
            self
        }
        pub fn set_placement_group(
            mut self,
            inp: std::option::Option<crate::model::PlacementGroup>,
        ) -> Self {
            self.placement_group = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput)
        pub fn build(self) -> crate::output::CreatePlacementGroupOutput {
            crate::output::CreatePlacementGroupOutput {
                placement_group: self.placement_group,
            }
        }
    }
}
impl CreatePlacementGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreatePlacementGroupOutput`](crate::output::CreatePlacementGroupOutput)
    pub fn builder() -> crate::output::create_placement_group_output::Builder {
        crate::output::create_placement_group_output::Builder::default()
    }
}

/// <p>Contains the output of CreateNetworkInterfacePermission.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkInterfacePermissionOutput {
    /// <p>Information about the permission for the network interface.</p>
    pub interface_permission: std::option::Option<crate::model::NetworkInterfacePermission>,
}
impl std::fmt::Debug for CreateNetworkInterfacePermissionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkInterfacePermissionOutput");
        formatter.field("interface_permission", &self.interface_permission);
        formatter.finish()
    }
}
/// See [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput)
pub mod create_network_interface_permission_output {
    /// A builder for [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) interface_permission:
            std::option::Option<crate::model::NetworkInterfacePermission>,
    }
    impl Builder {
        /// <p>Information about the permission for the network interface.</p>
        pub fn interface_permission(
            mut self,
            inp: crate::model::NetworkInterfacePermission,
        ) -> Self {
            self.interface_permission = Some(inp);
            self
        }
        pub fn set_interface_permission(
            mut self,
            inp: std::option::Option<crate::model::NetworkInterfacePermission>,
        ) -> Self {
            self.interface_permission = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput)
        pub fn build(self) -> crate::output::CreateNetworkInterfacePermissionOutput {
            crate::output::CreateNetworkInterfacePermissionOutput {
                interface_permission: self.interface_permission,
            }
        }
    }
}
impl CreateNetworkInterfacePermissionOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfacePermissionOutput`](crate::output::CreateNetworkInterfacePermissionOutput)
    pub fn builder() -> crate::output::create_network_interface_permission_output::Builder {
        crate::output::create_network_interface_permission_output::Builder::default()
    }
}

/// <p>Contains the output of CreateNetworkInterface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkInterfaceOutput {
    /// <p>Information about the network interface.</p>
    pub network_interface: std::option::Option<crate::model::NetworkInterface>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub client_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateNetworkInterfaceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkInterfaceOutput");
        formatter.field("network_interface", &self.network_interface);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
/// See [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput)
pub mod create_network_interface_output {
    /// A builder for [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface: std::option::Option<crate::model::NetworkInterface>,
        pub(crate) client_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the network interface.</p>
        pub fn network_interface(mut self, inp: crate::model::NetworkInterface) -> Self {
            self.network_interface = Some(inp);
            self
        }
        pub fn set_network_interface(
            mut self,
            inp: std::option::Option<crate::model::NetworkInterface>,
        ) -> Self {
            self.network_interface = inp;
            self
        }
        /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput)
        pub fn build(self) -> crate::output::CreateNetworkInterfaceOutput {
            crate::output::CreateNetworkInterfaceOutput {
                network_interface: self.network_interface,
                client_token: self.client_token,
            }
        }
    }
}
impl CreateNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfaceOutput`](crate::output::CreateNetworkInterfaceOutput)
    pub fn builder() -> crate::output::create_network_interface_output::Builder {
        crate::output::create_network_interface_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkInsightsPathOutput {
    /// <p>Information about the path.</p>
    pub network_insights_path: std::option::Option<crate::model::NetworkInsightsPath>,
}
impl std::fmt::Debug for CreateNetworkInsightsPathOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkInsightsPathOutput");
        formatter.field("network_insights_path", &self.network_insights_path);
        formatter.finish()
    }
}
/// See [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput)
pub mod create_network_insights_path_output {
    /// A builder for [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_insights_path: std::option::Option<crate::model::NetworkInsightsPath>,
    }
    impl Builder {
        /// <p>Information about the path.</p>
        pub fn network_insights_path(mut self, inp: crate::model::NetworkInsightsPath) -> Self {
            self.network_insights_path = Some(inp);
            self
        }
        pub fn set_network_insights_path(
            mut self,
            inp: std::option::Option<crate::model::NetworkInsightsPath>,
        ) -> Self {
            self.network_insights_path = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput)
        pub fn build(self) -> crate::output::CreateNetworkInsightsPathOutput {
            crate::output::CreateNetworkInsightsPathOutput {
                network_insights_path: self.network_insights_path,
            }
        }
    }
}
impl CreateNetworkInsightsPathOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInsightsPathOutput`](crate::output::CreateNetworkInsightsPathOutput)
    pub fn builder() -> crate::output::create_network_insights_path_output::Builder {
        crate::output::create_network_insights_path_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkAclEntryOutput {}
impl std::fmt::Debug for CreateNetworkAclEntryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkAclEntryOutput");
        formatter.finish()
    }
}
/// See [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput)
pub mod create_network_acl_entry_output {
    /// A builder for [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput)
        pub fn build(self) -> crate::output::CreateNetworkAclEntryOutput {
            crate::output::CreateNetworkAclEntryOutput {}
        }
    }
}
impl CreateNetworkAclEntryOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkAclEntryOutput`](crate::output::CreateNetworkAclEntryOutput)
    pub fn builder() -> crate::output::create_network_acl_entry_output::Builder {
        crate::output::create_network_acl_entry_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkAclOutput {
    /// <p>Information about the network ACL.</p>
    pub network_acl: std::option::Option<crate::model::NetworkAcl>,
}
impl std::fmt::Debug for CreateNetworkAclOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkAclOutput");
        formatter.field("network_acl", &self.network_acl);
        formatter.finish()
    }
}
/// See [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput)
pub mod create_network_acl_output {
    /// A builder for [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_acl: std::option::Option<crate::model::NetworkAcl>,
    }
    impl Builder {
        /// <p>Information about the network ACL.</p>
        pub fn network_acl(mut self, inp: crate::model::NetworkAcl) -> Self {
            self.network_acl = Some(inp);
            self
        }
        pub fn set_network_acl(
            mut self,
            inp: std::option::Option<crate::model::NetworkAcl>,
        ) -> Self {
            self.network_acl = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput)
        pub fn build(self) -> crate::output::CreateNetworkAclOutput {
            crate::output::CreateNetworkAclOutput {
                network_acl: self.network_acl,
            }
        }
    }
}
impl CreateNetworkAclOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkAclOutput`](crate::output::CreateNetworkAclOutput)
    pub fn builder() -> crate::output::create_network_acl_output::Builder {
        crate::output::create_network_acl_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNatGatewayOutput {
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Information about the NAT gateway.</p>
    pub nat_gateway: std::option::Option<crate::model::NatGateway>,
}
impl std::fmt::Debug for CreateNatGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNatGatewayOutput");
        formatter.field("client_token", &self.client_token);
        formatter.field("nat_gateway", &self.nat_gateway);
        formatter.finish()
    }
}
/// See [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput)
pub mod create_nat_gateway_output {
    /// A builder for [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) nat_gateway: std::option::Option<crate::model::NatGateway>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// <p>Information about the NAT gateway.</p>
        pub fn nat_gateway(mut self, inp: crate::model::NatGateway) -> Self {
            self.nat_gateway = Some(inp);
            self
        }
        pub fn set_nat_gateway(
            mut self,
            inp: std::option::Option<crate::model::NatGateway>,
        ) -> Self {
            self.nat_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput)
        pub fn build(self) -> crate::output::CreateNatGatewayOutput {
            crate::output::CreateNatGatewayOutput {
                client_token: self.client_token,
                nat_gateway: self.nat_gateway,
            }
        }
    }
}
impl CreateNatGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateNatGatewayOutput`](crate::output::CreateNatGatewayOutput)
    pub fn builder() -> crate::output::create_nat_gateway_output::Builder {
        crate::output::create_nat_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateManagedPrefixListOutput {
    /// <p>Information about the prefix list.</p>
    pub prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
}
impl std::fmt::Debug for CreateManagedPrefixListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateManagedPrefixListOutput");
        formatter.field("prefix_list", &self.prefix_list);
        formatter.finish()
    }
}
/// See [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput)
pub mod create_managed_prefix_list_output {
    /// A builder for [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) prefix_list: std::option::Option<crate::model::ManagedPrefixList>,
    }
    impl Builder {
        /// <p>Information about the prefix list.</p>
        pub fn prefix_list(mut self, inp: crate::model::ManagedPrefixList) -> Self {
            self.prefix_list = Some(inp);
            self
        }
        pub fn set_prefix_list(
            mut self,
            inp: std::option::Option<crate::model::ManagedPrefixList>,
        ) -> Self {
            self.prefix_list = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput)
        pub fn build(self) -> crate::output::CreateManagedPrefixListOutput {
            crate::output::CreateManagedPrefixListOutput {
                prefix_list: self.prefix_list,
            }
        }
    }
}
impl CreateManagedPrefixListOutput {
    /// Creates a new builder-style object to manufacture [`CreateManagedPrefixListOutput`](crate::output::CreateManagedPrefixListOutput)
    pub fn builder() -> crate::output::create_managed_prefix_list_output::Builder {
        crate::output::create_managed_prefix_list_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLocalGatewayRouteTableVpcAssociationOutput {
    /// <p>Information about the association.</p>
    pub local_gateway_route_table_vpc_association:
        std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
}
impl std::fmt::Debug for CreateLocalGatewayRouteTableVpcAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLocalGatewayRouteTableVpcAssociationOutput");
        formatter.field(
            "local_gateway_route_table_vpc_association",
            &self.local_gateway_route_table_vpc_association,
        );
        formatter.finish()
    }
}
/// See [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput)
pub mod create_local_gateway_route_table_vpc_association_output {
    /// A builder for [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) local_gateway_route_table_vpc_association:
            std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
    }
    impl Builder {
        /// <p>Information about the association.</p>
        pub fn local_gateway_route_table_vpc_association(
            mut self,
            inp: crate::model::LocalGatewayRouteTableVpcAssociation,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = Some(inp);
            self
        }
        pub fn set_local_gateway_route_table_vpc_association(
            mut self,
            inp: std::option::Option<crate::model::LocalGatewayRouteTableVpcAssociation>,
        ) -> Self {
            self.local_gateway_route_table_vpc_association = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput)
        pub fn build(self) -> crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput {
            crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput {
                local_gateway_route_table_vpc_association: self
                    .local_gateway_route_table_vpc_association,
            }
        }
    }
}
impl CreateLocalGatewayRouteTableVpcAssociationOutput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteTableVpcAssociationOutput`](crate::output::CreateLocalGatewayRouteTableVpcAssociationOutput)
    pub fn builder(
    ) -> crate::output::create_local_gateway_route_table_vpc_association_output::Builder {
        crate::output::create_local_gateway_route_table_vpc_association_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLocalGatewayRouteOutput {
    /// <p>Information about the route.</p>
    pub route: std::option::Option<crate::model::LocalGatewayRoute>,
}
impl std::fmt::Debug for CreateLocalGatewayRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLocalGatewayRouteOutput");
        formatter.field("route", &self.route);
        formatter.finish()
    }
}
/// See [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput)
pub mod create_local_gateway_route_output {
    /// A builder for [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) route: std::option::Option<crate::model::LocalGatewayRoute>,
    }
    impl Builder {
        /// <p>Information about the route.</p>
        pub fn route(mut self, inp: crate::model::LocalGatewayRoute) -> Self {
            self.route = Some(inp);
            self
        }
        pub fn set_route(
            mut self,
            inp: std::option::Option<crate::model::LocalGatewayRoute>,
        ) -> Self {
            self.route = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput)
        pub fn build(self) -> crate::output::CreateLocalGatewayRouteOutput {
            crate::output::CreateLocalGatewayRouteOutput { route: self.route }
        }
    }
}
impl CreateLocalGatewayRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateLocalGatewayRouteOutput`](crate::output::CreateLocalGatewayRouteOutput)
    pub fn builder() -> crate::output::create_local_gateway_route_output::Builder {
        crate::output::create_local_gateway_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLaunchTemplateVersionOutput {
    /// <p>Information about the launch template version.</p>
    pub launch_template_version: std::option::Option<crate::model::LaunchTemplateVersion>,
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub warning: std::option::Option<crate::model::ValidationWarning>,
}
impl std::fmt::Debug for CreateLaunchTemplateVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLaunchTemplateVersionOutput");
        formatter.field("launch_template_version", &self.launch_template_version);
        formatter.field("warning", &self.warning);
        formatter.finish()
    }
}
/// See [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput)
pub mod create_launch_template_version_output {
    /// A builder for [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template_version:
            std::option::Option<crate::model::LaunchTemplateVersion>,
        pub(crate) warning: std::option::Option<crate::model::ValidationWarning>,
    }
    impl Builder {
        /// <p>Information about the launch template version.</p>
        pub fn launch_template_version(mut self, inp: crate::model::LaunchTemplateVersion) -> Self {
            self.launch_template_version = Some(inp);
            self
        }
        pub fn set_launch_template_version(
            mut self,
            inp: std::option::Option<crate::model::LaunchTemplateVersion>,
        ) -> Self {
            self.launch_template_version = inp;
            self
        }
        /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
        pub fn warning(mut self, inp: crate::model::ValidationWarning) -> Self {
            self.warning = Some(inp);
            self
        }
        pub fn set_warning(
            mut self,
            inp: std::option::Option<crate::model::ValidationWarning>,
        ) -> Self {
            self.warning = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput)
        pub fn build(self) -> crate::output::CreateLaunchTemplateVersionOutput {
            crate::output::CreateLaunchTemplateVersionOutput {
                launch_template_version: self.launch_template_version,
                warning: self.warning,
            }
        }
    }
}
impl CreateLaunchTemplateVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateVersionOutput`](crate::output::CreateLaunchTemplateVersionOutput)
    pub fn builder() -> crate::output::create_launch_template_version_output::Builder {
        crate::output::create_launch_template_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLaunchTemplateOutput {
    /// <p>Information about the launch template.</p>
    pub launch_template: std::option::Option<crate::model::LaunchTemplate>,
    /// <p>If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub warning: std::option::Option<crate::model::ValidationWarning>,
}
impl std::fmt::Debug for CreateLaunchTemplateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLaunchTemplateOutput");
        formatter.field("launch_template", &self.launch_template);
        formatter.field("warning", &self.warning);
        formatter.finish()
    }
}
/// See [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput)
pub mod create_launch_template_output {
    /// A builder for [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_template: std::option::Option<crate::model::LaunchTemplate>,
        pub(crate) warning: std::option::Option<crate::model::ValidationWarning>,
    }
    impl Builder {
        /// <p>Information about the launch template.</p>
        pub fn launch_template(mut self, inp: crate::model::LaunchTemplate) -> Self {
            self.launch_template = Some(inp);
            self
        }
        pub fn set_launch_template(
            mut self,
            inp: std::option::Option<crate::model::LaunchTemplate>,
        ) -> Self {
            self.launch_template = inp;
            self
        }
        /// <p>If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
        pub fn warning(mut self, inp: crate::model::ValidationWarning) -> Self {
            self.warning = Some(inp);
            self
        }
        pub fn set_warning(
            mut self,
            inp: std::option::Option<crate::model::ValidationWarning>,
        ) -> Self {
            self.warning = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput)
        pub fn build(self) -> crate::output::CreateLaunchTemplateOutput {
            crate::output::CreateLaunchTemplateOutput {
                launch_template: self.launch_template,
                warning: self.warning,
            }
        }
    }
}
impl CreateLaunchTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateOutput`](crate::output::CreateLaunchTemplateOutput)
    pub fn builder() -> crate::output::create_launch_template_output::Builder {
        crate::output::create_launch_template_output::Builder::default()
    }
}

/// <p>Describes a key pair.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateKeyPairOutput {
    /// <p>The SHA-1 digest of the DER encoded private key.</p>
    pub key_fingerprint: std::option::Option<std::string::String>,
    /// <p>An unencrypted PEM encoded RSA private key.</p>
    pub key_material: std::option::Option<std::string::String>,
    /// <p>The name of the key pair.</p>
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The ID of the key pair.</p>
    pub key_pair_id: std::option::Option<std::string::String>,
    /// <p>Any tags applied to the key pair.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateKeyPairOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateKeyPairOutput");
        formatter.field("key_fingerprint", &self.key_fingerprint);
        formatter.field("key_material", &"*** Sensitive Data Redacted ***");
        formatter.field("key_name", &self.key_name);
        formatter.field("key_pair_id", &self.key_pair_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput)
pub mod create_key_pair_output {
    /// A builder for [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_fingerprint: std::option::Option<std::string::String>,
        pub(crate) key_material: std::option::Option<std::string::String>,
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) key_pair_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The SHA-1 digest of the DER encoded private key.</p>
        pub fn key_fingerprint(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_fingerprint = Some(inp.into());
            self
        }
        pub fn set_key_fingerprint(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.key_fingerprint = inp;
            self
        }
        /// <p>An unencrypted PEM encoded RSA private key.</p>
        pub fn key_material(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_material = Some(inp.into());
            self
        }
        pub fn set_key_material(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.key_material = inp;
            self
        }
        /// <p>The name of the key pair.</p>
        pub fn key_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_name = Some(inp.into());
            self
        }
        pub fn set_key_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.key_name = inp;
            self
        }
        /// <p>The ID of the key pair.</p>
        pub fn key_pair_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.key_pair_id = Some(inp.into());
            self
        }
        pub fn set_key_pair_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.key_pair_id = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput)
        pub fn build(self) -> crate::output::CreateKeyPairOutput {
            crate::output::CreateKeyPairOutput {
                key_fingerprint: self.key_fingerprint,
                key_material: self.key_material,
                key_name: self.key_name,
                key_pair_id: self.key_pair_id,
                tags: self.tags,
            }
        }
    }
}
impl CreateKeyPairOutput {
    /// Creates a new builder-style object to manufacture [`CreateKeyPairOutput`](crate::output::CreateKeyPairOutput)
    pub fn builder() -> crate::output::create_key_pair_output::Builder {
        crate::output::create_key_pair_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateInternetGatewayOutput {
    /// <p>Information about the internet gateway.</p>
    pub internet_gateway: std::option::Option<crate::model::InternetGateway>,
}
impl std::fmt::Debug for CreateInternetGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInternetGatewayOutput");
        formatter.field("internet_gateway", &self.internet_gateway);
        formatter.finish()
    }
}
/// See [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput)
pub mod create_internet_gateway_output {
    /// A builder for [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) internet_gateway: std::option::Option<crate::model::InternetGateway>,
    }
    impl Builder {
        /// <p>Information about the internet gateway.</p>
        pub fn internet_gateway(mut self, inp: crate::model::InternetGateway) -> Self {
            self.internet_gateway = Some(inp);
            self
        }
        pub fn set_internet_gateway(
            mut self,
            inp: std::option::Option<crate::model::InternetGateway>,
        ) -> Self {
            self.internet_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput)
        pub fn build(self) -> crate::output::CreateInternetGatewayOutput {
            crate::output::CreateInternetGatewayOutput {
                internet_gateway: self.internet_gateway,
            }
        }
    }
}
impl CreateInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateInternetGatewayOutput`](crate::output::CreateInternetGatewayOutput)
    pub fn builder() -> crate::output::create_internet_gateway_output::Builder {
        crate::output::create_internet_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateInstanceExportTaskOutput {
    /// <p>Information about the export instance task.</p>
    pub export_task: std::option::Option<crate::model::ExportTask>,
}
impl std::fmt::Debug for CreateInstanceExportTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateInstanceExportTaskOutput");
        formatter.field("export_task", &self.export_task);
        formatter.finish()
    }
}
/// See [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput)
pub mod create_instance_export_task_output {
    /// A builder for [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task: std::option::Option<crate::model::ExportTask>,
    }
    impl Builder {
        /// <p>Information about the export instance task.</p>
        pub fn export_task(mut self, inp: crate::model::ExportTask) -> Self {
            self.export_task = Some(inp);
            self
        }
        pub fn set_export_task(
            mut self,
            inp: std::option::Option<crate::model::ExportTask>,
        ) -> Self {
            self.export_task = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput)
        pub fn build(self) -> crate::output::CreateInstanceExportTaskOutput {
            crate::output::CreateInstanceExportTaskOutput {
                export_task: self.export_task,
            }
        }
    }
}
impl CreateInstanceExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceExportTaskOutput`](crate::output::CreateInstanceExportTaskOutput)
    pub fn builder() -> crate::output::create_instance_export_task_output::Builder {
        crate::output::create_instance_export_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateImageOutput {
    /// <p>The ID of the new AMI.</p>
    pub image_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateImageOutput");
        formatter.field("image_id", &self.image_id);
        formatter.finish()
    }
}
/// See [`CreateImageOutput`](crate::output::CreateImageOutput)
pub mod create_image_output {
    /// A builder for [`CreateImageOutput`](crate::output::CreateImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the new AMI.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateImageOutput`](crate::output::CreateImageOutput)
        pub fn build(self) -> crate::output::CreateImageOutput {
            crate::output::CreateImageOutput {
                image_id: self.image_id,
            }
        }
    }
}
impl CreateImageOutput {
    /// Creates a new builder-style object to manufacture [`CreateImageOutput`](crate::output::CreateImageOutput)
    pub fn builder() -> crate::output::create_image_output::Builder {
        crate::output::create_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateFpgaImageOutput {
    /// <p>The FPGA image identifier (AFI ID).</p>
    pub fpga_image_id: std::option::Option<std::string::String>,
    /// <p>The global FPGA image identifier (AGFI ID).</p>
    pub fpga_image_global_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateFpgaImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFpgaImageOutput");
        formatter.field("fpga_image_id", &self.fpga_image_id);
        formatter.field("fpga_image_global_id", &self.fpga_image_global_id);
        formatter.finish()
    }
}
/// See [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput)
pub mod create_fpga_image_output {
    /// A builder for [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_id: std::option::Option<std::string::String>,
        pub(crate) fpga_image_global_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The FPGA image identifier (AFI ID).</p>
        pub fn fpga_image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.fpga_image_id = Some(inp.into());
            self
        }
        pub fn set_fpga_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.fpga_image_id = inp;
            self
        }
        /// <p>The global FPGA image identifier (AGFI ID).</p>
        pub fn fpga_image_global_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.fpga_image_global_id = Some(inp.into());
            self
        }
        pub fn set_fpga_image_global_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.fpga_image_global_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput)
        pub fn build(self) -> crate::output::CreateFpgaImageOutput {
            crate::output::CreateFpgaImageOutput {
                fpga_image_id: self.fpga_image_id,
                fpga_image_global_id: self.fpga_image_global_id,
            }
        }
    }
}
impl CreateFpgaImageOutput {
    /// Creates a new builder-style object to manufacture [`CreateFpgaImageOutput`](crate::output::CreateFpgaImageOutput)
    pub fn builder() -> crate::output::create_fpga_image_output::Builder {
        crate::output::create_fpga_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateFlowLogsOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request.</p>
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The IDs of the flow logs.</p>
    pub flow_log_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the flow logs that could not be created successfully.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for CreateFlowLogsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFlowLogsOutput");
        formatter.field("client_token", &self.client_token);
        formatter.field("flow_log_ids", &self.flow_log_ids);
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput)
pub mod create_flow_logs_output {
    /// A builder for [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) flow_log_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        pub fn flow_log_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.flow_log_ids.unwrap_or_default();
            v.push(inp.into());
            self.flow_log_ids = Some(v);
            self
        }
        pub fn set_flow_log_ids(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.flow_log_ids = inp;
            self
        }
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput)
        pub fn build(self) -> crate::output::CreateFlowLogsOutput {
            crate::output::CreateFlowLogsOutput {
                client_token: self.client_token,
                flow_log_ids: self.flow_log_ids,
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl CreateFlowLogsOutput {
    /// Creates a new builder-style object to manufacture [`CreateFlowLogsOutput`](crate::output::CreateFlowLogsOutput)
    pub fn builder() -> crate::output::create_flow_logs_output::Builder {
        crate::output::create_flow_logs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateFleetOutput {
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: std::option::Option<std::string::String>,
    /// <p>Information about the instances that could not be launched by the fleet. Valid only when
    /// <b>Type</b> is set to <code>instant</code>.</p>
    pub errors: std::option::Option<std::vec::Vec<crate::model::CreateFleetError>>,
    /// <p>Information about the instances that were launched by the fleet. Valid only when
    /// <b>Type</b> is set to <code>instant</code>.</p>
    pub instances: std::option::Option<std::vec::Vec<crate::model::CreateFleetInstance>>,
}
impl std::fmt::Debug for CreateFleetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateFleetOutput");
        formatter.field("fleet_id", &self.fleet_id);
        formatter.field("errors", &self.errors);
        formatter.field("instances", &self.instances);
        formatter.finish()
    }
}
/// See [`CreateFleetOutput`](crate::output::CreateFleetOutput)
pub mod create_fleet_output {
    /// A builder for [`CreateFleetOutput`](crate::output::CreateFleetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fleet_id: std::option::Option<std::string::String>,
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::CreateFleetError>>,
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::CreateFleetInstance>>,
    }
    impl Builder {
        /// <p>The ID of the EC2 Fleet.</p>
        pub fn fleet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.fleet_id = Some(inp.into());
            self
        }
        pub fn set_fleet_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.fleet_id = inp;
            self
        }
        pub fn errors(mut self, inp: impl Into<crate::model::CreateFleetError>) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(inp.into());
            self.errors = Some(v);
            self
        }
        pub fn set_errors(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CreateFleetError>>,
        ) -> Self {
            self.errors = inp;
            self
        }
        pub fn instances(mut self, inp: impl Into<crate::model::CreateFleetInstance>) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(inp.into());
            self.instances = Some(v);
            self
        }
        pub fn set_instances(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CreateFleetInstance>>,
        ) -> Self {
            self.instances = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateFleetOutput`](crate::output::CreateFleetOutput)
        pub fn build(self) -> crate::output::CreateFleetOutput {
            crate::output::CreateFleetOutput {
                fleet_id: self.fleet_id,
                errors: self.errors,
                instances: self.instances,
            }
        }
    }
}
impl CreateFleetOutput {
    /// Creates a new builder-style object to manufacture [`CreateFleetOutput`](crate::output::CreateFleetOutput)
    pub fn builder() -> crate::output::create_fleet_output::Builder {
        crate::output::create_fleet_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEgressOnlyInternetGatewayOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    /// request.</p>
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Information about the egress-only internet gateway.</p>
    pub egress_only_internet_gateway: std::option::Option<crate::model::EgressOnlyInternetGateway>,
}
impl std::fmt::Debug for CreateEgressOnlyInternetGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEgressOnlyInternetGatewayOutput");
        formatter.field("client_token", &self.client_token);
        formatter.field(
            "egress_only_internet_gateway",
            &self.egress_only_internet_gateway,
        );
        formatter.finish()
    }
}
/// See [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput)
pub mod create_egress_only_internet_gateway_output {
    /// A builder for [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) egress_only_internet_gateway:
            std::option::Option<crate::model::EgressOnlyInternetGateway>,
    }
    impl Builder {
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request.</p>
        pub fn client_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_token = Some(inp.into());
            self
        }
        pub fn set_client_token(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.client_token = inp;
            self
        }
        /// <p>Information about the egress-only internet gateway.</p>
        pub fn egress_only_internet_gateway(
            mut self,
            inp: crate::model::EgressOnlyInternetGateway,
        ) -> Self {
            self.egress_only_internet_gateway = Some(inp);
            self
        }
        pub fn set_egress_only_internet_gateway(
            mut self,
            inp: std::option::Option<crate::model::EgressOnlyInternetGateway>,
        ) -> Self {
            self.egress_only_internet_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput)
        pub fn build(self) -> crate::output::CreateEgressOnlyInternetGatewayOutput {
            crate::output::CreateEgressOnlyInternetGatewayOutput {
                client_token: self.client_token,
                egress_only_internet_gateway: self.egress_only_internet_gateway,
            }
        }
    }
}
impl CreateEgressOnlyInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateEgressOnlyInternetGatewayOutput`](crate::output::CreateEgressOnlyInternetGatewayOutput)
    pub fn builder() -> crate::output::create_egress_only_internet_gateway_output::Builder {
        crate::output::create_egress_only_internet_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDhcpOptionsOutput {
    /// <p>A set of DHCP options.</p>
    pub dhcp_options: std::option::Option<crate::model::DhcpOptions>,
}
impl std::fmt::Debug for CreateDhcpOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDhcpOptionsOutput");
        formatter.field("dhcp_options", &self.dhcp_options);
        formatter.finish()
    }
}
/// See [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput)
pub mod create_dhcp_options_output {
    /// A builder for [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dhcp_options: std::option::Option<crate::model::DhcpOptions>,
    }
    impl Builder {
        /// <p>A set of DHCP options.</p>
        pub fn dhcp_options(mut self, inp: crate::model::DhcpOptions) -> Self {
            self.dhcp_options = Some(inp);
            self
        }
        pub fn set_dhcp_options(
            mut self,
            inp: std::option::Option<crate::model::DhcpOptions>,
        ) -> Self {
            self.dhcp_options = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput)
        pub fn build(self) -> crate::output::CreateDhcpOptionsOutput {
            crate::output::CreateDhcpOptionsOutput {
                dhcp_options: self.dhcp_options,
            }
        }
    }
}
impl CreateDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`CreateDhcpOptionsOutput`](crate::output::CreateDhcpOptionsOutput)
    pub fn builder() -> crate::output::create_dhcp_options_output::Builder {
        crate::output::create_dhcp_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDefaultVpcOutput {
    /// <p>Information about the VPC.</p>
    pub vpc: std::option::Option<crate::model::Vpc>,
}
impl std::fmt::Debug for CreateDefaultVpcOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDefaultVpcOutput");
        formatter.field("vpc", &self.vpc);
        formatter.finish()
    }
}
/// See [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput)
pub mod create_default_vpc_output {
    /// A builder for [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc: std::option::Option<crate::model::Vpc>,
    }
    impl Builder {
        /// <p>Information about the VPC.</p>
        pub fn vpc(mut self, inp: crate::model::Vpc) -> Self {
            self.vpc = Some(inp);
            self
        }
        pub fn set_vpc(mut self, inp: std::option::Option<crate::model::Vpc>) -> Self {
            self.vpc = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput)
        pub fn build(self) -> crate::output::CreateDefaultVpcOutput {
            crate::output::CreateDefaultVpcOutput { vpc: self.vpc }
        }
    }
}
impl CreateDefaultVpcOutput {
    /// Creates a new builder-style object to manufacture [`CreateDefaultVpcOutput`](crate::output::CreateDefaultVpcOutput)
    pub fn builder() -> crate::output::create_default_vpc_output::Builder {
        crate::output::create_default_vpc_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDefaultSubnetOutput {
    /// <p>Information about the subnet.</p>
    pub subnet: std::option::Option<crate::model::Subnet>,
}
impl std::fmt::Debug for CreateDefaultSubnetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDefaultSubnetOutput");
        formatter.field("subnet", &self.subnet);
        formatter.finish()
    }
}
/// See [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput)
pub mod create_default_subnet_output {
    /// A builder for [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subnet: std::option::Option<crate::model::Subnet>,
    }
    impl Builder {
        /// <p>Information about the subnet.</p>
        pub fn subnet(mut self, inp: crate::model::Subnet) -> Self {
            self.subnet = Some(inp);
            self
        }
        pub fn set_subnet(mut self, inp: std::option::Option<crate::model::Subnet>) -> Self {
            self.subnet = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput)
        pub fn build(self) -> crate::output::CreateDefaultSubnetOutput {
            crate::output::CreateDefaultSubnetOutput {
                subnet: self.subnet,
            }
        }
    }
}
impl CreateDefaultSubnetOutput {
    /// Creates a new builder-style object to manufacture [`CreateDefaultSubnetOutput`](crate::output::CreateDefaultSubnetOutput)
    pub fn builder() -> crate::output::create_default_subnet_output::Builder {
        crate::output::create_default_subnet_output::Builder::default()
    }
}

/// <p>Contains the output of CreateCustomerGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomerGatewayOutput {
    /// <p>Information about the customer gateway.</p>
    pub customer_gateway: std::option::Option<crate::model::CustomerGateway>,
}
impl std::fmt::Debug for CreateCustomerGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomerGatewayOutput");
        formatter.field("customer_gateway", &self.customer_gateway);
        formatter.finish()
    }
}
/// See [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput)
pub mod create_customer_gateway_output {
    /// A builder for [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) customer_gateway: std::option::Option<crate::model::CustomerGateway>,
    }
    impl Builder {
        /// <p>Information about the customer gateway.</p>
        pub fn customer_gateway(mut self, inp: crate::model::CustomerGateway) -> Self {
            self.customer_gateway = Some(inp);
            self
        }
        pub fn set_customer_gateway(
            mut self,
            inp: std::option::Option<crate::model::CustomerGateway>,
        ) -> Self {
            self.customer_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput)
        pub fn build(self) -> crate::output::CreateCustomerGatewayOutput {
            crate::output::CreateCustomerGatewayOutput {
                customer_gateway: self.customer_gateway,
            }
        }
    }
}
impl CreateCustomerGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomerGatewayOutput`](crate::output::CreateCustomerGatewayOutput)
    pub fn builder() -> crate::output::create_customer_gateway_output::Builder {
        crate::output::create_customer_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateClientVpnRouteOutput {
    /// <p>The current state of the route.</p>
    pub status: std::option::Option<crate::model::ClientVpnRouteStatus>,
}
impl std::fmt::Debug for CreateClientVpnRouteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateClientVpnRouteOutput");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput)
pub mod create_client_vpn_route_output {
    /// A builder for [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnRouteStatus>,
    }
    impl Builder {
        /// <p>The current state of the route.</p>
        pub fn status(mut self, inp: crate::model::ClientVpnRouteStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientVpnRouteStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput)
        pub fn build(self) -> crate::output::CreateClientVpnRouteOutput {
            crate::output::CreateClientVpnRouteOutput {
                status: self.status,
            }
        }
    }
}
impl CreateClientVpnRouteOutput {
    /// Creates a new builder-style object to manufacture [`CreateClientVpnRouteOutput`](crate::output::CreateClientVpnRouteOutput)
    pub fn builder() -> crate::output::create_client_vpn_route_output::Builder {
        crate::output::create_client_vpn_route_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateClientVpnEndpointOutput {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The current state of the Client VPN endpoint.</p>
    pub status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
    /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
    pub dns_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateClientVpnEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateClientVpnEndpointOutput");
        formatter.field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id);
        formatter.field("status", &self.status);
        formatter.field("dns_name", &self.dns_name);
        formatter.finish()
    }
}
/// See [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput)
pub mod create_client_vpn_endpoint_output {
    /// A builder for [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) client_vpn_endpoint_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        pub(crate) dns_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the Client VPN endpoint.</p>
        pub fn client_vpn_endpoint_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.client_vpn_endpoint_id = Some(inp.into());
            self
        }
        pub fn set_client_vpn_endpoint_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.client_vpn_endpoint_id = inp;
            self
        }
        /// <p>The current state of the Client VPN endpoint.</p>
        pub fn status(mut self, inp: crate::model::ClientVpnEndpointStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientVpnEndpointStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
        pub fn dns_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.dns_name = Some(inp.into());
            self
        }
        pub fn set_dns_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.dns_name = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput)
        pub fn build(self) -> crate::output::CreateClientVpnEndpointOutput {
            crate::output::CreateClientVpnEndpointOutput {
                client_vpn_endpoint_id: self.client_vpn_endpoint_id,
                status: self.status,
                dns_name: self.dns_name,
            }
        }
    }
}
impl CreateClientVpnEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateClientVpnEndpointOutput`](crate::output::CreateClientVpnEndpointOutput)
    pub fn builder() -> crate::output::create_client_vpn_endpoint_output::Builder {
        crate::output::create_client_vpn_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCarrierGatewayOutput {
    /// <p>Information about the carrier gateway.</p>
    pub carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
}
impl std::fmt::Debug for CreateCarrierGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCarrierGatewayOutput");
        formatter.field("carrier_gateway", &self.carrier_gateway);
        formatter.finish()
    }
}
/// See [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput)
pub mod create_carrier_gateway_output {
    /// A builder for [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) carrier_gateway: std::option::Option<crate::model::CarrierGateway>,
    }
    impl Builder {
        /// <p>Information about the carrier gateway.</p>
        pub fn carrier_gateway(mut self, inp: crate::model::CarrierGateway) -> Self {
            self.carrier_gateway = Some(inp);
            self
        }
        pub fn set_carrier_gateway(
            mut self,
            inp: std::option::Option<crate::model::CarrierGateway>,
        ) -> Self {
            self.carrier_gateway = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput)
        pub fn build(self) -> crate::output::CreateCarrierGatewayOutput {
            crate::output::CreateCarrierGatewayOutput {
                carrier_gateway: self.carrier_gateway,
            }
        }
    }
}
impl CreateCarrierGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateCarrierGatewayOutput`](crate::output::CreateCarrierGatewayOutput)
    pub fn builder() -> crate::output::create_carrier_gateway_output::Builder {
        crate::output::create_carrier_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCapacityReservationOutput {
    /// <p>Information about the Capacity Reservation.</p>
    pub capacity_reservation: std::option::Option<crate::model::CapacityReservation>,
}
impl std::fmt::Debug for CreateCapacityReservationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCapacityReservationOutput");
        formatter.field("capacity_reservation", &self.capacity_reservation);
        formatter.finish()
    }
}
/// See [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput)
pub mod create_capacity_reservation_output {
    /// A builder for [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) capacity_reservation: std::option::Option<crate::model::CapacityReservation>,
    }
    impl Builder {
        /// <p>Information about the Capacity Reservation.</p>
        pub fn capacity_reservation(mut self, inp: crate::model::CapacityReservation) -> Self {
            self.capacity_reservation = Some(inp);
            self
        }
        pub fn set_capacity_reservation(
            mut self,
            inp: std::option::Option<crate::model::CapacityReservation>,
        ) -> Self {
            self.capacity_reservation = inp;
            self
        }
        /// Consumes the builder and constructs a [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput)
        pub fn build(self) -> crate::output::CreateCapacityReservationOutput {
            crate::output::CreateCapacityReservationOutput {
                capacity_reservation: self.capacity_reservation,
            }
        }
    }
}
impl CreateCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`CreateCapacityReservationOutput`](crate::output::CreateCapacityReservationOutput)
    pub fn builder() -> crate::output::create_capacity_reservation_output::Builder {
        crate::output::create_capacity_reservation_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopySnapshotOutput {
    /// <p>The ID of the new snapshot.</p>
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>Any tags applied to the new snapshot.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CopySnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopySnapshotOutput");
        formatter.field("snapshot_id", &self.snapshot_id);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`CopySnapshotOutput`](crate::output::CopySnapshotOutput)
pub mod copy_snapshot_output {
    /// A builder for [`CopySnapshotOutput`](crate::output::CopySnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The ID of the new snapshot.</p>
        pub fn snapshot_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.snapshot_id = Some(inp.into());
            self
        }
        pub fn set_snapshot_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.snapshot_id = inp;
            self
        }
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(inp.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = inp;
            self
        }
        /// Consumes the builder and constructs a [`CopySnapshotOutput`](crate::output::CopySnapshotOutput)
        pub fn build(self) -> crate::output::CopySnapshotOutput {
            crate::output::CopySnapshotOutput {
                snapshot_id: self.snapshot_id,
                tags: self.tags,
            }
        }
    }
}
impl CopySnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CopySnapshotOutput`](crate::output::CopySnapshotOutput)
    pub fn builder() -> crate::output::copy_snapshot_output::Builder {
        crate::output::copy_snapshot_output::Builder::default()
    }
}

/// <p>Contains the output of CopyImage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyImageOutput {
    /// <p>The ID of the new AMI.</p>
    pub image_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CopyImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyImageOutput");
        formatter.field("image_id", &self.image_id);
        formatter.finish()
    }
}
/// See [`CopyImageOutput`](crate::output::CopyImageOutput)
pub mod copy_image_output {
    /// A builder for [`CopyImageOutput`](crate::output::CopyImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the new AMI.</p>
        pub fn image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.image_id = Some(inp.into());
            self
        }
        pub fn set_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.image_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`CopyImageOutput`](crate::output::CopyImageOutput)
        pub fn build(self) -> crate::output::CopyImageOutput {
            crate::output::CopyImageOutput {
                image_id: self.image_id,
            }
        }
    }
}
impl CopyImageOutput {
    /// Creates a new builder-style object to manufacture [`CopyImageOutput`](crate::output::CopyImageOutput)
    pub fn builder() -> crate::output::copy_image_output::Builder {
        crate::output::copy_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyFpgaImageOutput {
    /// <p>The ID of the new AFI.</p>
    pub fpga_image_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CopyFpgaImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyFpgaImageOutput");
        formatter.field("fpga_image_id", &self.fpga_image_id);
        formatter.finish()
    }
}
/// See [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput)
pub mod copy_fpga_image_output {
    /// A builder for [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) fpga_image_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the new AFI.</p>
        pub fn fpga_image_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.fpga_image_id = Some(inp.into());
            self
        }
        pub fn set_fpga_image_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.fpga_image_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput)
        pub fn build(self) -> crate::output::CopyFpgaImageOutput {
            crate::output::CopyFpgaImageOutput {
                fpga_image_id: self.fpga_image_id,
            }
        }
    }
}
impl CopyFpgaImageOutput {
    /// Creates a new builder-style object to manufacture [`CopyFpgaImageOutput`](crate::output::CopyFpgaImageOutput)
    pub fn builder() -> crate::output::copy_fpga_image_output::Builder {
        crate::output::copy_fpga_image_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConfirmProductInstanceOutput {
    /// <p>The AWS account ID of the instance owner. This is only present if the product code is
    /// attached to the instance.</p>
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The return value of the request. Returns <code>true</code> if the specified product
    /// code is owned by the requester and associated with the specified instance.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for ConfirmProductInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfirmProductInstanceOutput");
        formatter.field("owner_id", &self.owner_id);
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput)
pub mod confirm_product_instance_output {
    /// A builder for [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) owner_id: std::option::Option<std::string::String>,
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The AWS account ID of the instance owner. This is only present if the product code is
        /// attached to the instance.</p>
        pub fn owner_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.owner_id = Some(inp.into());
            self
        }
        pub fn set_owner_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.owner_id = inp;
            self
        }
        /// <p>The return value of the request. Returns <code>true</code> if the specified product
        /// code is owned by the requester and associated with the specified instance.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput)
        pub fn build(self) -> crate::output::ConfirmProductInstanceOutput {
            crate::output::ConfirmProductInstanceOutput {
                owner_id: self.owner_id,
                r#return: self.r#return,
            }
        }
    }
}
impl ConfirmProductInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmProductInstanceOutput`](crate::output::ConfirmProductInstanceOutput)
    pub fn builder() -> crate::output::confirm_product_instance_output::Builder {
        crate::output::confirm_product_instance_output::Builder::default()
    }
}

/// <p>Contains the output of CancelSpotInstanceRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelSpotInstanceRequestsOutput {
    /// <p>One or more Spot Instance requests.</p>
    pub cancelled_spot_instance_requests:
        std::option::Option<std::vec::Vec<crate::model::CancelledSpotInstanceRequest>>,
}
impl std::fmt::Debug for CancelSpotInstanceRequestsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelSpotInstanceRequestsOutput");
        formatter.field(
            "cancelled_spot_instance_requests",
            &self.cancelled_spot_instance_requests,
        );
        formatter.finish()
    }
}
/// See [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput)
pub mod cancel_spot_instance_requests_output {
    /// A builder for [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cancelled_spot_instance_requests:
            std::option::Option<std::vec::Vec<crate::model::CancelledSpotInstanceRequest>>,
    }
    impl Builder {
        pub fn cancelled_spot_instance_requests(
            mut self,
            inp: impl Into<crate::model::CancelledSpotInstanceRequest>,
        ) -> Self {
            let mut v = self.cancelled_spot_instance_requests.unwrap_or_default();
            v.push(inp.into());
            self.cancelled_spot_instance_requests = Some(v);
            self
        }
        pub fn set_cancelled_spot_instance_requests(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CancelledSpotInstanceRequest>>,
        ) -> Self {
            self.cancelled_spot_instance_requests = inp;
            self
        }
        /// Consumes the builder and constructs a [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput)
        pub fn build(self) -> crate::output::CancelSpotInstanceRequestsOutput {
            crate::output::CancelSpotInstanceRequestsOutput {
                cancelled_spot_instance_requests: self.cancelled_spot_instance_requests,
            }
        }
    }
}
impl CancelSpotInstanceRequestsOutput {
    /// Creates a new builder-style object to manufacture [`CancelSpotInstanceRequestsOutput`](crate::output::CancelSpotInstanceRequestsOutput)
    pub fn builder() -> crate::output::cancel_spot_instance_requests_output::Builder {
        crate::output::cancel_spot_instance_requests_output::Builder::default()
    }
}

/// <p>Contains the output of CancelSpotFleetRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelSpotFleetRequestsOutput {
    /// <p>Information about the Spot Fleet requests that are successfully canceled.</p>
    pub successful_fleet_requests:
        std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>>,
    /// <p>Information about the Spot Fleet requests that are not successfully canceled.</p>
    pub unsuccessful_fleet_requests:
        std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>>,
}
impl std::fmt::Debug for CancelSpotFleetRequestsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelSpotFleetRequestsOutput");
        formatter.field("successful_fleet_requests", &self.successful_fleet_requests);
        formatter.field(
            "unsuccessful_fleet_requests",
            &self.unsuccessful_fleet_requests,
        );
        formatter.finish()
    }
}
/// See [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput)
pub mod cancel_spot_fleet_requests_output {
    /// A builder for [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful_fleet_requests:
            std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>>,
        pub(crate) unsuccessful_fleet_requests:
            std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>>,
    }
    impl Builder {
        pub fn successful_fleet_requests(
            mut self,
            inp: impl Into<crate::model::CancelSpotFleetRequestsSuccessItem>,
        ) -> Self {
            let mut v = self.successful_fleet_requests.unwrap_or_default();
            v.push(inp.into());
            self.successful_fleet_requests = Some(v);
            self
        }
        pub fn set_successful_fleet_requests(
            mut self,
            inp: std::option::Option<
                std::vec::Vec<crate::model::CancelSpotFleetRequestsSuccessItem>,
            >,
        ) -> Self {
            self.successful_fleet_requests = inp;
            self
        }
        pub fn unsuccessful_fleet_requests(
            mut self,
            inp: impl Into<crate::model::CancelSpotFleetRequestsErrorItem>,
        ) -> Self {
            let mut v = self.unsuccessful_fleet_requests.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful_fleet_requests = Some(v);
            self
        }
        pub fn set_unsuccessful_fleet_requests(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::CancelSpotFleetRequestsErrorItem>>,
        ) -> Self {
            self.unsuccessful_fleet_requests = inp;
            self
        }
        /// Consumes the builder and constructs a [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput)
        pub fn build(self) -> crate::output::CancelSpotFleetRequestsOutput {
            crate::output::CancelSpotFleetRequestsOutput {
                successful_fleet_requests: self.successful_fleet_requests,
                unsuccessful_fleet_requests: self.unsuccessful_fleet_requests,
            }
        }
    }
}
impl CancelSpotFleetRequestsOutput {
    /// Creates a new builder-style object to manufacture [`CancelSpotFleetRequestsOutput`](crate::output::CancelSpotFleetRequestsOutput)
    pub fn builder() -> crate::output::cancel_spot_fleet_requests_output::Builder {
        crate::output::cancel_spot_fleet_requests_output::Builder::default()
    }
}

/// <p>Contains the output of CancelReservedInstancesListing.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelReservedInstancesListingOutput {
    /// <p>The Reserved Instance listing.</p>
    pub reserved_instances_listings:
        std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
}
impl std::fmt::Debug for CancelReservedInstancesListingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelReservedInstancesListingOutput");
        formatter.field(
            "reserved_instances_listings",
            &self.reserved_instances_listings,
        );
        formatter.finish()
    }
}
/// See [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput)
pub mod cancel_reserved_instances_listing_output {
    /// A builder for [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_instances_listings:
            std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
    }
    impl Builder {
        pub fn reserved_instances_listings(
            mut self,
            inp: impl Into<crate::model::ReservedInstancesListing>,
        ) -> Self {
            let mut v = self.reserved_instances_listings.unwrap_or_default();
            v.push(inp.into());
            self.reserved_instances_listings = Some(v);
            self
        }
        pub fn set_reserved_instances_listings(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::ReservedInstancesListing>>,
        ) -> Self {
            self.reserved_instances_listings = inp;
            self
        }
        /// Consumes the builder and constructs a [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput)
        pub fn build(self) -> crate::output::CancelReservedInstancesListingOutput {
            crate::output::CancelReservedInstancesListingOutput {
                reserved_instances_listings: self.reserved_instances_listings,
            }
        }
    }
}
impl CancelReservedInstancesListingOutput {
    /// Creates a new builder-style object to manufacture [`CancelReservedInstancesListingOutput`](crate::output::CancelReservedInstancesListingOutput)
    pub fn builder() -> crate::output::cancel_reserved_instances_listing_output::Builder {
        crate::output::cancel_reserved_instances_listing_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelImportTaskOutput {
    /// <p>The ID of the task being canceled.</p>
    pub import_task_id: std::option::Option<std::string::String>,
    /// <p>The current state of the task being canceled.</p>
    pub previous_state: std::option::Option<std::string::String>,
    /// <p>The current state of the task being canceled.</p>
    pub state: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CancelImportTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelImportTaskOutput");
        formatter.field("import_task_id", &self.import_task_id);
        formatter.field("previous_state", &self.previous_state);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput)
pub mod cancel_import_task_output {
    /// A builder for [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) import_task_id: std::option::Option<std::string::String>,
        pub(crate) previous_state: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the task being canceled.</p>
        pub fn import_task_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.import_task_id = Some(inp.into());
            self
        }
        pub fn set_import_task_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.import_task_id = inp;
            self
        }
        /// <p>The current state of the task being canceled.</p>
        pub fn previous_state(mut self, inp: impl Into<std::string::String>) -> Self {
            self.previous_state = Some(inp.into());
            self
        }
        pub fn set_previous_state(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.previous_state = inp;
            self
        }
        /// <p>The current state of the task being canceled.</p>
        pub fn state(mut self, inp: impl Into<std::string::String>) -> Self {
            self.state = Some(inp.into());
            self
        }
        pub fn set_state(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.state = inp;
            self
        }
        /// Consumes the builder and constructs a [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput)
        pub fn build(self) -> crate::output::CancelImportTaskOutput {
            crate::output::CancelImportTaskOutput {
                import_task_id: self.import_task_id,
                previous_state: self.previous_state,
                state: self.state,
            }
        }
    }
}
impl CancelImportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelImportTaskOutput`](crate::output::CancelImportTaskOutput)
    pub fn builder() -> crate::output::cancel_import_task_output::Builder {
        crate::output::cancel_import_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelExportTaskOutput {}
impl std::fmt::Debug for CancelExportTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelExportTaskOutput");
        formatter.finish()
    }
}
/// See [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
pub mod cancel_export_task_output {
    /// A builder for [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
        pub fn build(self) -> crate::output::CancelExportTaskOutput {
            crate::output::CancelExportTaskOutput {}
        }
    }
}
impl CancelExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
    pub fn builder() -> crate::output::cancel_export_task_output::Builder {
        crate::output::cancel_export_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelConversionTaskOutput {}
impl std::fmt::Debug for CancelConversionTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelConversionTaskOutput");
        formatter.finish()
    }
}
/// See [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput)
pub mod cancel_conversion_task_output {
    /// A builder for [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput)
        pub fn build(self) -> crate::output::CancelConversionTaskOutput {
            crate::output::CancelConversionTaskOutput {}
        }
    }
}
impl CancelConversionTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelConversionTaskOutput`](crate::output::CancelConversionTaskOutput)
    pub fn builder() -> crate::output::cancel_conversion_task_output::Builder {
        crate::output::cancel_conversion_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelCapacityReservationOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for CancelCapacityReservationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelCapacityReservationOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput)
pub mod cancel_capacity_reservation_output {
    /// A builder for [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput)
        pub fn build(self) -> crate::output::CancelCapacityReservationOutput {
            crate::output::CancelCapacityReservationOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl CancelCapacityReservationOutput {
    /// Creates a new builder-style object to manufacture [`CancelCapacityReservationOutput`](crate::output::CancelCapacityReservationOutput)
    pub fn builder() -> crate::output::cancel_capacity_reservation_output::Builder {
        crate::output::cancel_capacity_reservation_output::Builder::default()
    }
}

/// <p>Contains the output of CancelBundleTask.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelBundleTaskOutput {
    /// <p>Information about the bundle task.</p>
    pub bundle_task: std::option::Option<crate::model::BundleTask>,
}
impl std::fmt::Debug for CancelBundleTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelBundleTaskOutput");
        formatter.field("bundle_task", &self.bundle_task);
        formatter.finish()
    }
}
/// See [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput)
pub mod cancel_bundle_task_output {
    /// A builder for [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bundle_task: std::option::Option<crate::model::BundleTask>,
    }
    impl Builder {
        /// <p>Information about the bundle task.</p>
        pub fn bundle_task(mut self, inp: crate::model::BundleTask) -> Self {
            self.bundle_task = Some(inp);
            self
        }
        pub fn set_bundle_task(
            mut self,
            inp: std::option::Option<crate::model::BundleTask>,
        ) -> Self {
            self.bundle_task = inp;
            self
        }
        /// Consumes the builder and constructs a [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput)
        pub fn build(self) -> crate::output::CancelBundleTaskOutput {
            crate::output::CancelBundleTaskOutput {
                bundle_task: self.bundle_task,
            }
        }
    }
}
impl CancelBundleTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelBundleTaskOutput`](crate::output::CancelBundleTaskOutput)
    pub fn builder() -> crate::output::cancel_bundle_task_output::Builder {
        crate::output::cancel_bundle_task_output::Builder::default()
    }
}

/// <p>Contains the output of BundleInstance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BundleInstanceOutput {
    /// <p>Information about the bundle task.</p>
    pub bundle_task: std::option::Option<crate::model::BundleTask>,
}
impl std::fmt::Debug for BundleInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BundleInstanceOutput");
        formatter.field("bundle_task", &self.bundle_task);
        formatter.finish()
    }
}
/// See [`BundleInstanceOutput`](crate::output::BundleInstanceOutput)
pub mod bundle_instance_output {
    /// A builder for [`BundleInstanceOutput`](crate::output::BundleInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bundle_task: std::option::Option<crate::model::BundleTask>,
    }
    impl Builder {
        /// <p>Information about the bundle task.</p>
        pub fn bundle_task(mut self, inp: crate::model::BundleTask) -> Self {
            self.bundle_task = Some(inp);
            self
        }
        pub fn set_bundle_task(
            mut self,
            inp: std::option::Option<crate::model::BundleTask>,
        ) -> Self {
            self.bundle_task = inp;
            self
        }
        /// Consumes the builder and constructs a [`BundleInstanceOutput`](crate::output::BundleInstanceOutput)
        pub fn build(self) -> crate::output::BundleInstanceOutput {
            crate::output::BundleInstanceOutput {
                bundle_task: self.bundle_task,
            }
        }
    }
}
impl BundleInstanceOutput {
    /// Creates a new builder-style object to manufacture [`BundleInstanceOutput`](crate::output::BundleInstanceOutput)
    pub fn builder() -> crate::output::bundle_instance_output::Builder {
        crate::output::bundle_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthorizeSecurityGroupIngressOutput {}
impl std::fmt::Debug for AuthorizeSecurityGroupIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizeSecurityGroupIngressOutput");
        formatter.finish()
    }
}
/// See [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput)
pub mod authorize_security_group_ingress_output {
    /// A builder for [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput)
        pub fn build(self) -> crate::output::AuthorizeSecurityGroupIngressOutput {
            crate::output::AuthorizeSecurityGroupIngressOutput {}
        }
    }
}
impl AuthorizeSecurityGroupIngressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeSecurityGroupIngressOutput`](crate::output::AuthorizeSecurityGroupIngressOutput)
    pub fn builder() -> crate::output::authorize_security_group_ingress_output::Builder {
        crate::output::authorize_security_group_ingress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthorizeSecurityGroupEgressOutput {}
impl std::fmt::Debug for AuthorizeSecurityGroupEgressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizeSecurityGroupEgressOutput");
        formatter.finish()
    }
}
/// See [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput)
pub mod authorize_security_group_egress_output {
    /// A builder for [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput)
        pub fn build(self) -> crate::output::AuthorizeSecurityGroupEgressOutput {
            crate::output::AuthorizeSecurityGroupEgressOutput {}
        }
    }
}
impl AuthorizeSecurityGroupEgressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeSecurityGroupEgressOutput`](crate::output::AuthorizeSecurityGroupEgressOutput)
    pub fn builder() -> crate::output::authorize_security_group_egress_output::Builder {
        crate::output::authorize_security_group_egress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthorizeClientVpnIngressOutput {
    /// <p>The current state of the authorization rule.</p>
    pub status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
}
impl std::fmt::Debug for AuthorizeClientVpnIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizeClientVpnIngressOutput");
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput)
pub mod authorize_client_vpn_ingress_output {
    /// A builder for [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
    }
    impl Builder {
        /// <p>The current state of the authorization rule.</p>
        pub fn status(mut self, inp: crate::model::ClientVpnAuthorizationRuleStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::ClientVpnAuthorizationRuleStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput)
        pub fn build(self) -> crate::output::AuthorizeClientVpnIngressOutput {
            crate::output::AuthorizeClientVpnIngressOutput {
                status: self.status,
            }
        }
    }
}
impl AuthorizeClientVpnIngressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeClientVpnIngressOutput`](crate::output::AuthorizeClientVpnIngressOutput)
    pub fn builder() -> crate::output::authorize_client_vpn_ingress_output::Builder {
        crate::output::authorize_client_vpn_ingress_output::Builder::default()
    }
}

/// <p>Contains the output of AttachVpnGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachVpnGatewayOutput {
    /// <p>Information about the attachment.</p>
    pub vpc_attachment: std::option::Option<crate::model::VpcAttachment>,
}
impl std::fmt::Debug for AttachVpnGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachVpnGatewayOutput");
        formatter.field("vpc_attachment", &self.vpc_attachment);
        formatter.finish()
    }
}
/// See [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput)
pub mod attach_vpn_gateway_output {
    /// A builder for [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_attachment: std::option::Option<crate::model::VpcAttachment>,
    }
    impl Builder {
        /// <p>Information about the attachment.</p>
        pub fn vpc_attachment(mut self, inp: crate::model::VpcAttachment) -> Self {
            self.vpc_attachment = Some(inp);
            self
        }
        pub fn set_vpc_attachment(
            mut self,
            inp: std::option::Option<crate::model::VpcAttachment>,
        ) -> Self {
            self.vpc_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput)
        pub fn build(self) -> crate::output::AttachVpnGatewayOutput {
            crate::output::AttachVpnGatewayOutput {
                vpc_attachment: self.vpc_attachment,
            }
        }
    }
}
impl AttachVpnGatewayOutput {
    /// Creates a new builder-style object to manufacture [`AttachVpnGatewayOutput`](crate::output::AttachVpnGatewayOutput)
    pub fn builder() -> crate::output::attach_vpn_gateway_output::Builder {
        crate::output::attach_vpn_gateway_output::Builder::default()
    }
}

/// <p>Describes volume attachment details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachVolumeOutput {
    /// <p>The time stamp when the attachment initiated.</p>
    pub attach_time: std::option::Option<smithy_types::Instant>,
    /// <p>The device name.</p>
    pub device: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The attachment state of the volume.</p>
    pub state: std::option::Option<crate::model::VolumeAttachmentState>,
    /// <p>The ID of the volume.</p>
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub delete_on_termination: std::option::Option<bool>,
}
impl std::fmt::Debug for AttachVolumeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachVolumeOutput");
        formatter.field("attach_time", &self.attach_time);
        formatter.field("device", &self.device);
        formatter.field("instance_id", &self.instance_id);
        formatter.field("state", &self.state);
        formatter.field("volume_id", &self.volume_id);
        formatter.field("delete_on_termination", &self.delete_on_termination);
        formatter.finish()
    }
}
/// See [`AttachVolumeOutput`](crate::output::AttachVolumeOutput)
pub mod attach_volume_output {
    /// A builder for [`AttachVolumeOutput`](crate::output::AttachVolumeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attach_time: std::option::Option<smithy_types::Instant>,
        pub(crate) device: std::option::Option<std::string::String>,
        pub(crate) instance_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::VolumeAttachmentState>,
        pub(crate) volume_id: std::option::Option<std::string::String>,
        pub(crate) delete_on_termination: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The time stamp when the attachment initiated.</p>
        pub fn attach_time(mut self, inp: smithy_types::Instant) -> Self {
            self.attach_time = Some(inp);
            self
        }
        pub fn set_attach_time(mut self, inp: std::option::Option<smithy_types::Instant>) -> Self {
            self.attach_time = inp;
            self
        }
        /// <p>The device name.</p>
        pub fn device(mut self, inp: impl Into<std::string::String>) -> Self {
            self.device = Some(inp.into());
            self
        }
        pub fn set_device(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.device = inp;
            self
        }
        /// <p>The ID of the instance.</p>
        pub fn instance_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.instance_id = Some(inp.into());
            self
        }
        pub fn set_instance_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.instance_id = inp;
            self
        }
        /// <p>The attachment state of the volume.</p>
        pub fn state(mut self, inp: crate::model::VolumeAttachmentState) -> Self {
            self.state = Some(inp);
            self
        }
        pub fn set_state(
            mut self,
            inp: std::option::Option<crate::model::VolumeAttachmentState>,
        ) -> Self {
            self.state = inp;
            self
        }
        /// <p>The ID of the volume.</p>
        pub fn volume_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.volume_id = Some(inp.into());
            self
        }
        pub fn set_volume_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.volume_id = inp;
            self
        }
        /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
        pub fn delete_on_termination(mut self, inp: bool) -> Self {
            self.delete_on_termination = Some(inp);
            self
        }
        pub fn set_delete_on_termination(mut self, inp: std::option::Option<bool>) -> Self {
            self.delete_on_termination = inp;
            self
        }
        /// Consumes the builder and constructs a [`AttachVolumeOutput`](crate::output::AttachVolumeOutput)
        pub fn build(self) -> crate::output::AttachVolumeOutput {
            crate::output::AttachVolumeOutput {
                attach_time: self.attach_time,
                device: self.device,
                instance_id: self.instance_id,
                state: self.state,
                volume_id: self.volume_id,
                delete_on_termination: self.delete_on_termination,
            }
        }
    }
}
impl AttachVolumeOutput {
    /// Creates a new builder-style object to manufacture [`AttachVolumeOutput`](crate::output::AttachVolumeOutput)
    pub fn builder() -> crate::output::attach_volume_output::Builder {
        crate::output::attach_volume_output::Builder::default()
    }
}

/// <p>Contains the output of AttachNetworkInterface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachNetworkInterfaceOutput {
    /// <p>The ID of the network interface attachment.</p>
    pub attachment_id: std::option::Option<std::string::String>,
    /// <p>The index of the network card.</p>
    pub network_card_index: std::option::Option<i32>,
}
impl std::fmt::Debug for AttachNetworkInterfaceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachNetworkInterfaceOutput");
        formatter.field("attachment_id", &self.attachment_id);
        formatter.field("network_card_index", &self.network_card_index);
        formatter.finish()
    }
}
/// See [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput)
pub mod attach_network_interface_output {
    /// A builder for [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attachment_id: std::option::Option<std::string::String>,
        pub(crate) network_card_index: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The ID of the network interface attachment.</p>
        pub fn attachment_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.attachment_id = Some(inp.into());
            self
        }
        pub fn set_attachment_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.attachment_id = inp;
            self
        }
        /// <p>The index of the network card.</p>
        pub fn network_card_index(mut self, inp: i32) -> Self {
            self.network_card_index = Some(inp);
            self
        }
        pub fn set_network_card_index(mut self, inp: std::option::Option<i32>) -> Self {
            self.network_card_index = inp;
            self
        }
        /// Consumes the builder and constructs a [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput)
        pub fn build(self) -> crate::output::AttachNetworkInterfaceOutput {
            crate::output::AttachNetworkInterfaceOutput {
                attachment_id: self.attachment_id,
                network_card_index: self.network_card_index,
            }
        }
    }
}
impl AttachNetworkInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`AttachNetworkInterfaceOutput`](crate::output::AttachNetworkInterfaceOutput)
    pub fn builder() -> crate::output::attach_network_interface_output::Builder {
        crate::output::attach_network_interface_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachInternetGatewayOutput {}
impl std::fmt::Debug for AttachInternetGatewayOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachInternetGatewayOutput");
        formatter.finish()
    }
}
/// See [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput)
pub mod attach_internet_gateway_output {
    /// A builder for [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput)
        pub fn build(self) -> crate::output::AttachInternetGatewayOutput {
            crate::output::AttachInternetGatewayOutput {}
        }
    }
}
impl AttachInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`AttachInternetGatewayOutput`](crate::output::AttachInternetGatewayOutput)
    pub fn builder() -> crate::output::attach_internet_gateway_output::Builder {
        crate::output::attach_internet_gateway_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AttachClassicLinkVpcOutput {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub r#return: std::option::Option<bool>,
}
impl std::fmt::Debug for AttachClassicLinkVpcOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AttachClassicLinkVpcOutput");
        formatter.field("r#return", &self.r#return);
        formatter.finish()
    }
}
/// See [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput)
pub mod attach_classic_link_vpc_output {
    /// A builder for [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#return: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
        pub fn r#return(mut self, inp: bool) -> Self {
            self.r#return = Some(inp);
            self
        }
        pub fn set_return(mut self, inp: std::option::Option<bool>) -> Self {
            self.r#return = inp;
            self
        }
        /// Consumes the builder and constructs a [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput)
        pub fn build(self) -> crate::output::AttachClassicLinkVpcOutput {
            crate::output::AttachClassicLinkVpcOutput {
                r#return: self.r#return,
            }
        }
    }
}
impl AttachClassicLinkVpcOutput {
    /// Creates a new builder-style object to manufacture [`AttachClassicLinkVpcOutput`](crate::output::AttachClassicLinkVpcOutput)
    pub fn builder() -> crate::output::attach_classic_link_vpc_output::Builder {
        crate::output::attach_classic_link_vpc_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateVpcCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv6_cidr_block_association: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
    /// <p>Information about the IPv4 CIDR block association.</p>
    pub cidr_block_association: std::option::Option<crate::model::VpcCidrBlockAssociation>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssociateVpcCidrBlockOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateVpcCidrBlockOutput");
        formatter.field(
            "ipv6_cidr_block_association",
            &self.ipv6_cidr_block_association,
        );
        formatter.field("cidr_block_association", &self.cidr_block_association);
        formatter.field("vpc_id", &self.vpc_id);
        formatter.finish()
    }
}
/// See [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput)
pub mod associate_vpc_cidr_block_output {
    /// A builder for [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        pub(crate) cidr_block_association:
            std::option::Option<crate::model::VpcCidrBlockAssociation>,
        pub(crate) vpc_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            inp: crate::model::VpcIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(inp);
            self
        }
        pub fn set_ipv6_cidr_block_association(
            mut self,
            inp: std::option::Option<crate::model::VpcIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = inp;
            self
        }
        /// <p>Information about the IPv4 CIDR block association.</p>
        pub fn cidr_block_association(
            mut self,
            inp: crate::model::VpcCidrBlockAssociation,
        ) -> Self {
            self.cidr_block_association = Some(inp);
            self
        }
        pub fn set_cidr_block_association(
            mut self,
            inp: std::option::Option<crate::model::VpcCidrBlockAssociation>,
        ) -> Self {
            self.cidr_block_association = inp;
            self
        }
        /// <p>The ID of the VPC.</p>
        pub fn vpc_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.vpc_id = Some(inp.into());
            self
        }
        pub fn set_vpc_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.vpc_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput)
        pub fn build(self) -> crate::output::AssociateVpcCidrBlockOutput {
            crate::output::AssociateVpcCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                cidr_block_association: self.cidr_block_association,
                vpc_id: self.vpc_id,
            }
        }
    }
}
impl AssociateVpcCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`AssociateVpcCidrBlockOutput`](crate::output::AssociateVpcCidrBlockOutput)
    pub fn builder() -> crate::output::associate_vpc_cidr_block_output::Builder {
        crate::output::associate_vpc_cidr_block_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateTransitGatewayRouteTableOutput {
    /// <p>The ID of the association.</p>
    pub association: std::option::Option<crate::model::TransitGatewayAssociation>,
}
impl std::fmt::Debug for AssociateTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateTransitGatewayRouteTableOutput");
        formatter.field("association", &self.association);
        formatter.finish()
    }
}
/// See [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput)
pub mod associate_transit_gateway_route_table_output {
    /// A builder for [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association: std::option::Option<crate::model::TransitGatewayAssociation>,
    }
    impl Builder {
        /// <p>The ID of the association.</p>
        pub fn association(mut self, inp: crate::model::TransitGatewayAssociation) -> Self {
            self.association = Some(inp);
            self
        }
        pub fn set_association(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayAssociation>,
        ) -> Self {
            self.association = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput)
        pub fn build(self) -> crate::output::AssociateTransitGatewayRouteTableOutput {
            crate::output::AssociateTransitGatewayRouteTableOutput {
                association: self.association,
            }
        }
    }
}
impl AssociateTransitGatewayRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayRouteTableOutput`](crate::output::AssociateTransitGatewayRouteTableOutput)
    pub fn builder() -> crate::output::associate_transit_gateway_route_table_output::Builder {
        crate::output::associate_transit_gateway_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateTransitGatewayMulticastDomainOutput {
    /// <p>Information about the transit gateway multicast domain associations.</p>
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
}
impl std::fmt::Debug for AssociateTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateTransitGatewayMulticastDomainOutput");
        formatter.field("associations", &self.associations);
        formatter.finish()
    }
}
/// See [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput)
pub mod associate_transit_gateway_multicast_domain_output {
    /// A builder for [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    }
    impl Builder {
        /// <p>Information about the transit gateway multicast domain associations.</p>
        pub fn associations(
            mut self,
            inp: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(inp);
            self
        }
        pub fn set_associations(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput)
        pub fn build(self) -> crate::output::AssociateTransitGatewayMulticastDomainOutput {
            crate::output::AssociateTransitGatewayMulticastDomainOutput {
                associations: self.associations,
            }
        }
    }
}
impl AssociateTransitGatewayMulticastDomainOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTransitGatewayMulticastDomainOutput`](crate::output::AssociateTransitGatewayMulticastDomainOutput)
    pub fn builder() -> crate::output::associate_transit_gateway_multicast_domain_output::Builder {
        crate::output::associate_transit_gateway_multicast_domain_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateSubnetCidrBlockOutput {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv6_cidr_block_association:
        std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssociateSubnetCidrBlockOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateSubnetCidrBlockOutput");
        formatter.field(
            "ipv6_cidr_block_association",
            &self.ipv6_cidr_block_association,
        );
        formatter.field("subnet_id", &self.subnet_id);
        formatter.finish()
    }
}
/// See [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput)
pub mod associate_subnet_cidr_block_output {
    /// A builder for [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) ipv6_cidr_block_association:
            std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        pub(crate) subnet_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the IPv6 CIDR block association.</p>
        pub fn ipv6_cidr_block_association(
            mut self,
            inp: crate::model::SubnetIpv6CidrBlockAssociation,
        ) -> Self {
            self.ipv6_cidr_block_association = Some(inp);
            self
        }
        pub fn set_ipv6_cidr_block_association(
            mut self,
            inp: std::option::Option<crate::model::SubnetIpv6CidrBlockAssociation>,
        ) -> Self {
            self.ipv6_cidr_block_association = inp;
            self
        }
        /// <p>The ID of the subnet.</p>
        pub fn subnet_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.subnet_id = Some(inp.into());
            self
        }
        pub fn set_subnet_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.subnet_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput)
        pub fn build(self) -> crate::output::AssociateSubnetCidrBlockOutput {
            crate::output::AssociateSubnetCidrBlockOutput {
                ipv6_cidr_block_association: self.ipv6_cidr_block_association,
                subnet_id: self.subnet_id,
            }
        }
    }
}
impl AssociateSubnetCidrBlockOutput {
    /// Creates a new builder-style object to manufacture [`AssociateSubnetCidrBlockOutput`](crate::output::AssociateSubnetCidrBlockOutput)
    pub fn builder() -> crate::output::associate_subnet_cidr_block_output::Builder {
        crate::output::associate_subnet_cidr_block_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateRouteTableOutput {
    /// <p>The route table association ID. This ID is required for disassociating the route
    /// table.</p>
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The state of the association.</p>
    pub association_state: std::option::Option<crate::model::RouteTableAssociationState>,
}
impl std::fmt::Debug for AssociateRouteTableOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateRouteTableOutput");
        formatter.field("association_id", &self.association_id);
        formatter.field("association_state", &self.association_state);
        formatter.finish()
    }
}
/// See [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput)
pub mod associate_route_table_output {
    /// A builder for [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        pub(crate) association_state: std::option::Option<crate::model::RouteTableAssociationState>,
    }
    impl Builder {
        /// <p>The route table association ID. This ID is required for disassociating the route
        /// table.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.association_id = Some(inp.into());
            self
        }
        pub fn set_association_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.association_id = inp;
            self
        }
        /// <p>The state of the association.</p>
        pub fn association_state(mut self, inp: crate::model::RouteTableAssociationState) -> Self {
            self.association_state = Some(inp);
            self
        }
        pub fn set_association_state(
            mut self,
            inp: std::option::Option<crate::model::RouteTableAssociationState>,
        ) -> Self {
            self.association_state = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput)
        pub fn build(self) -> crate::output::AssociateRouteTableOutput {
            crate::output::AssociateRouteTableOutput {
                association_id: self.association_id,
                association_state: self.association_state,
            }
        }
    }
}
impl AssociateRouteTableOutput {
    /// Creates a new builder-style object to manufacture [`AssociateRouteTableOutput`](crate::output::AssociateRouteTableOutput)
    pub fn builder() -> crate::output::associate_route_table_output::Builder {
        crate::output::associate_route_table_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateIamInstanceProfileOutput {
    /// <p>Information about the IAM instance profile association.</p>
    pub iam_instance_profile_association:
        std::option::Option<crate::model::IamInstanceProfileAssociation>,
}
impl std::fmt::Debug for AssociateIamInstanceProfileOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateIamInstanceProfileOutput");
        formatter.field(
            "iam_instance_profile_association",
            &self.iam_instance_profile_association,
        );
        formatter.finish()
    }
}
/// See [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput)
pub mod associate_iam_instance_profile_output {
    /// A builder for [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) iam_instance_profile_association:
            std::option::Option<crate::model::IamInstanceProfileAssociation>,
    }
    impl Builder {
        /// <p>Information about the IAM instance profile association.</p>
        pub fn iam_instance_profile_association(
            mut self,
            inp: crate::model::IamInstanceProfileAssociation,
        ) -> Self {
            self.iam_instance_profile_association = Some(inp);
            self
        }
        pub fn set_iam_instance_profile_association(
            mut self,
            inp: std::option::Option<crate::model::IamInstanceProfileAssociation>,
        ) -> Self {
            self.iam_instance_profile_association = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput)
        pub fn build(self) -> crate::output::AssociateIamInstanceProfileOutput {
            crate::output::AssociateIamInstanceProfileOutput {
                iam_instance_profile_association: self.iam_instance_profile_association,
            }
        }
    }
}
impl AssociateIamInstanceProfileOutput {
    /// Creates a new builder-style object to manufacture [`AssociateIamInstanceProfileOutput`](crate::output::AssociateIamInstanceProfileOutput)
    pub fn builder() -> crate::output::associate_iam_instance_profile_output::Builder {
        crate::output::associate_iam_instance_profile_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateEnclaveCertificateIamRoleOutput {
    /// <p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>
    pub certificate_s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The
    /// object key is formatted as follows:  <code>role_arn</code>/<code>certificate_arn</code>.</p>
    pub certificate_s3_object_key: std::option::Option<std::string::String>,
    /// <p>The ID of the AWS KMS CMK used to encrypt the private key of the certificate.</p>
    pub encryption_kms_key_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssociateEnclaveCertificateIamRoleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateEnclaveCertificateIamRoleOutput");
        formatter.field(
            "certificate_s3_bucket_name",
            &self.certificate_s3_bucket_name,
        );
        formatter.field("certificate_s3_object_key", &self.certificate_s3_object_key);
        formatter.field("encryption_kms_key_id", &self.encryption_kms_key_id);
        formatter.finish()
    }
}
/// See [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput)
pub mod associate_enclave_certificate_iam_role_output {
    /// A builder for [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_s3_bucket_name: std::option::Option<std::string::String>,
        pub(crate) certificate_s3_object_key: std::option::Option<std::string::String>,
        pub(crate) encryption_kms_key_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the Amazon S3 bucket to which the certificate was uploaded.</p>
        pub fn certificate_s3_bucket_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.certificate_s3_bucket_name = Some(inp.into());
            self
        }
        pub fn set_certificate_s3_bucket_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_s3_bucket_name = inp;
            self
        }
        /// <p>The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The
        /// object key is formatted as follows:  <code>role_arn</code>/<code>certificate_arn</code>.</p>
        pub fn certificate_s3_object_key(mut self, inp: impl Into<std::string::String>) -> Self {
            self.certificate_s3_object_key = Some(inp.into());
            self
        }
        pub fn set_certificate_s3_object_key(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_s3_object_key = inp;
            self
        }
        /// <p>The ID of the AWS KMS CMK used to encrypt the private key of the certificate.</p>
        pub fn encryption_kms_key_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.encryption_kms_key_id = Some(inp.into());
            self
        }
        pub fn set_encryption_kms_key_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.encryption_kms_key_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput)
        pub fn build(self) -> crate::output::AssociateEnclaveCertificateIamRoleOutput {
            crate::output::AssociateEnclaveCertificateIamRoleOutput {
                certificate_s3_bucket_name: self.certificate_s3_bucket_name,
                certificate_s3_object_key: self.certificate_s3_object_key,
                encryption_kms_key_id: self.encryption_kms_key_id,
            }
        }
    }
}
impl AssociateEnclaveCertificateIamRoleOutput {
    /// Creates a new builder-style object to manufacture [`AssociateEnclaveCertificateIamRoleOutput`](crate::output::AssociateEnclaveCertificateIamRoleOutput)
    pub fn builder() -> crate::output::associate_enclave_certificate_iam_role_output::Builder {
        crate::output::associate_enclave_certificate_iam_role_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateDhcpOptionsOutput {}
impl std::fmt::Debug for AssociateDhcpOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateDhcpOptionsOutput");
        formatter.finish()
    }
}
/// See [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput)
pub mod associate_dhcp_options_output {
    /// A builder for [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput)
        pub fn build(self) -> crate::output::AssociateDhcpOptionsOutput {
            crate::output::AssociateDhcpOptionsOutput {}
        }
    }
}
impl AssociateDhcpOptionsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDhcpOptionsOutput`](crate::output::AssociateDhcpOptionsOutput)
    pub fn builder() -> crate::output::associate_dhcp_options_output::Builder {
        crate::output::associate_dhcp_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateClientVpnTargetNetworkOutput {
    /// <p>The unique ID of the target network association.</p>
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The current state of the target network association.</p>
    pub status: std::option::Option<crate::model::AssociationStatus>,
}
impl std::fmt::Debug for AssociateClientVpnTargetNetworkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateClientVpnTargetNetworkOutput");
        formatter.field("association_id", &self.association_id);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput)
pub mod associate_client_vpn_target_network_output {
    /// A builder for [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::AssociationStatus>,
    }
    impl Builder {
        /// <p>The unique ID of the target network association.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.association_id = Some(inp.into());
            self
        }
        pub fn set_association_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.association_id = inp;
            self
        }
        /// <p>The current state of the target network association.</p>
        pub fn status(mut self, inp: crate::model::AssociationStatus) -> Self {
            self.status = Some(inp);
            self
        }
        pub fn set_status(
            mut self,
            inp: std::option::Option<crate::model::AssociationStatus>,
        ) -> Self {
            self.status = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput)
        pub fn build(self) -> crate::output::AssociateClientVpnTargetNetworkOutput {
            crate::output::AssociateClientVpnTargetNetworkOutput {
                association_id: self.association_id,
                status: self.status,
            }
        }
    }
}
impl AssociateClientVpnTargetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`AssociateClientVpnTargetNetworkOutput`](crate::output::AssociateClientVpnTargetNetworkOutput)
    pub fn builder() -> crate::output::associate_client_vpn_target_network_output::Builder {
        crate::output::associate_client_vpn_target_network_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateAddressOutput {
    /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
    pub association_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssociateAddressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateAddressOutput");
        formatter.field("association_id", &self.association_id);
        formatter.finish()
    }
}
/// See [`AssociateAddressOutput`](crate::output::AssociateAddressOutput)
pub mod associate_address_output {
    /// A builder for [`AssociateAddressOutput`](crate::output::AssociateAddressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) association_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.association_id = Some(inp.into());
            self
        }
        pub fn set_association_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.association_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssociateAddressOutput`](crate::output::AssociateAddressOutput)
        pub fn build(self) -> crate::output::AssociateAddressOutput {
            crate::output::AssociateAddressOutput {
                association_id: self.association_id,
            }
        }
    }
}
impl AssociateAddressOutput {
    /// Creates a new builder-style object to manufacture [`AssociateAddressOutput`](crate::output::AssociateAddressOutput)
    pub fn builder() -> crate::output::associate_address_output::Builder {
        crate::output::associate_address_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssignPrivateIpAddressesOutput {
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The private IP addresses assigned to the network interface.</p>
    pub assigned_private_ip_addresses:
        std::option::Option<std::vec::Vec<crate::model::AssignedPrivateIpAddress>>,
}
impl std::fmt::Debug for AssignPrivateIpAddressesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssignPrivateIpAddressesOutput");
        formatter.field("network_interface_id", &self.network_interface_id);
        formatter.field(
            "assigned_private_ip_addresses",
            &self.assigned_private_ip_addresses,
        );
        formatter.finish()
    }
}
/// See [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput)
pub mod assign_private_ip_addresses_output {
    /// A builder for [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
        pub(crate) assigned_private_ip_addresses:
            std::option::Option<std::vec::Vec<crate::model::AssignedPrivateIpAddress>>,
    }
    impl Builder {
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(inp.into());
            self
        }
        pub fn set_network_interface_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = inp;
            self
        }
        pub fn assigned_private_ip_addresses(
            mut self,
            inp: impl Into<crate::model::AssignedPrivateIpAddress>,
        ) -> Self {
            let mut v = self.assigned_private_ip_addresses.unwrap_or_default();
            v.push(inp.into());
            self.assigned_private_ip_addresses = Some(v);
            self
        }
        pub fn set_assigned_private_ip_addresses(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::AssignedPrivateIpAddress>>,
        ) -> Self {
            self.assigned_private_ip_addresses = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput)
        pub fn build(self) -> crate::output::AssignPrivateIpAddressesOutput {
            crate::output::AssignPrivateIpAddressesOutput {
                network_interface_id: self.network_interface_id,
                assigned_private_ip_addresses: self.assigned_private_ip_addresses,
            }
        }
    }
}
impl AssignPrivateIpAddressesOutput {
    /// Creates a new builder-style object to manufacture [`AssignPrivateIpAddressesOutput`](crate::output::AssignPrivateIpAddressesOutput)
    pub fn builder() -> crate::output::assign_private_ip_addresses_output::Builder {
        crate::output::assign_private_ip_addresses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssignIpv6AddressesOutput {
    /// <p>The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses
    /// that were assigned to the network interface before the request are not included.</p>
    pub assigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AssignIpv6AddressesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssignIpv6AddressesOutput");
        formatter.field("assigned_ipv6_addresses", &self.assigned_ipv6_addresses);
        formatter.field("network_interface_id", &self.network_interface_id);
        formatter.finish()
    }
}
/// See [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput)
pub mod assign_ipv6_addresses_output {
    /// A builder for [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) network_interface_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn assigned_ipv6_addresses(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.assigned_ipv6_addresses.unwrap_or_default();
            v.push(inp.into());
            self.assigned_ipv6_addresses = Some(v);
            self
        }
        pub fn set_assigned_ipv6_addresses(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.assigned_ipv6_addresses = inp;
            self
        }
        /// <p>The ID of the network interface.</p>
        pub fn network_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_interface_id = Some(inp.into());
            self
        }
        pub fn set_network_interface_id(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_interface_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput)
        pub fn build(self) -> crate::output::AssignIpv6AddressesOutput {
            crate::output::AssignIpv6AddressesOutput {
                assigned_ipv6_addresses: self.assigned_ipv6_addresses,
                network_interface_id: self.network_interface_id,
            }
        }
    }
}
impl AssignIpv6AddressesOutput {
    /// Creates a new builder-style object to manufacture [`AssignIpv6AddressesOutput`](crate::output::AssignIpv6AddressesOutput)
    pub fn builder() -> crate::output::assign_ipv6_addresses_output::Builder {
        crate::output::assign_ipv6_addresses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    /// <p>The IDs of the applied security groups.</p>
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplySecurityGroupsToClientVpnTargetNetworkOutput");
        formatter.field("security_group_ids", &self.security_group_ids);
        formatter.finish()
    }
}
/// See [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput)
pub mod apply_security_groups_to_client_vpn_target_network_output {
    /// A builder for [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        pub fn security_group_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.security_group_ids.unwrap_or_default();
            v.push(inp.into());
            self.security_group_ids = Some(v);
            self
        }
        pub fn set_security_group_ids(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_group_ids = inp;
            self
        }
        /// Consumes the builder and constructs a [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput)
        pub fn build(self) -> crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput {
            crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput {
                security_group_ids: self.security_group_ids,
            }
        }
    }
}
impl ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    /// Creates a new builder-style object to manufacture [`ApplySecurityGroupsToClientVpnTargetNetworkOutput`](crate::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput)
    pub fn builder(
    ) -> crate::output::apply_security_groups_to_client_vpn_target_network_output::Builder {
        crate::output::apply_security_groups_to_client_vpn_target_network_output::Builder::default()
    }
}

/// <p>Contains the output of AllocateHosts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AllocateHostsOutput {
    /// <p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a
    /// specific host.</p>
    pub host_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for AllocateHostsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AllocateHostsOutput");
        formatter.field("host_ids", &self.host_ids);
        formatter.finish()
    }
}
/// See [`AllocateHostsOutput`](crate::output::AllocateHostsOutput)
pub mod allocate_hosts_output {
    /// A builder for [`AllocateHostsOutput`](crate::output::AllocateHostsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) host_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        pub fn host_ids(mut self, inp: impl Into<std::string::String>) -> Self {
            let mut v = self.host_ids.unwrap_or_default();
            v.push(inp.into());
            self.host_ids = Some(v);
            self
        }
        pub fn set_host_ids(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.host_ids = inp;
            self
        }
        /// Consumes the builder and constructs a [`AllocateHostsOutput`](crate::output::AllocateHostsOutput)
        pub fn build(self) -> crate::output::AllocateHostsOutput {
            crate::output::AllocateHostsOutput {
                host_ids: self.host_ids,
            }
        }
    }
}
impl AllocateHostsOutput {
    /// Creates a new builder-style object to manufacture [`AllocateHostsOutput`](crate::output::AllocateHostsOutput)
    pub fn builder() -> crate::output::allocate_hosts_output::Builder {
        crate::output::allocate_hosts_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AllocateAddressOutput {
    /// <p>The Elastic IP address.</p>
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>[EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
    pub allocation_id: std::option::Option<std::string::String>,
    /// <p>The ID of an address pool.</p>
    pub public_ipv4_pool: std::option::Option<std::string::String>,
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises
    /// IP addresses.</p>
    pub network_border_group: std::option::Option<std::string::String>,
    /// <p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or
    /// instances in EC2-Classic (<code>standard</code>).</p>
    pub domain: std::option::Option<crate::model::DomainType>,
    /// <p>The customer-owned IP address.</p>
    pub customer_owned_ip: std::option::Option<std::string::String>,
    /// <p>The ID of the customer-owned address pool.</p>
    pub customer_owned_ipv4_pool: std::option::Option<std::string::String>,
    /// <p>The carrier IP address. This option is only available for network interfaces which  reside
    /// in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
    pub carrier_ip: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AllocateAddressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AllocateAddressOutput");
        formatter.field("public_ip", &self.public_ip);
        formatter.field("allocation_id", &self.allocation_id);
        formatter.field("public_ipv4_pool", &self.public_ipv4_pool);
        formatter.field("network_border_group", &self.network_border_group);
        formatter.field("domain", &self.domain);
        formatter.field("customer_owned_ip", &self.customer_owned_ip);
        formatter.field("customer_owned_ipv4_pool", &self.customer_owned_ipv4_pool);
        formatter.field("carrier_ip", &self.carrier_ip);
        formatter.finish()
    }
}
/// See [`AllocateAddressOutput`](crate::output::AllocateAddressOutput)
pub mod allocate_address_output {
    /// A builder for [`AllocateAddressOutput`](crate::output::AllocateAddressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) public_ip: std::option::Option<std::string::String>,
        pub(crate) allocation_id: std::option::Option<std::string::String>,
        pub(crate) public_ipv4_pool: std::option::Option<std::string::String>,
        pub(crate) network_border_group: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<crate::model::DomainType>,
        pub(crate) customer_owned_ip: std::option::Option<std::string::String>,
        pub(crate) customer_owned_ipv4_pool: std::option::Option<std::string::String>,
        pub(crate) carrier_ip: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Elastic IP address.</p>
        pub fn public_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.public_ip = Some(inp.into());
            self
        }
        pub fn set_public_ip(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.public_ip = inp;
            self
        }
        /// <p>[EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
        pub fn allocation_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.allocation_id = Some(inp.into());
            self
        }
        pub fn set_allocation_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.allocation_id = inp;
            self
        }
        /// <p>The ID of an address pool.</p>
        pub fn public_ipv4_pool(mut self, inp: impl Into<std::string::String>) -> Self {
            self.public_ipv4_pool = Some(inp.into());
            self
        }
        pub fn set_public_ipv4_pool(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.public_ipv4_pool = inp;
            self
        }
        /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises
        /// IP addresses.</p>
        pub fn network_border_group(mut self, inp: impl Into<std::string::String>) -> Self {
            self.network_border_group = Some(inp.into());
            self
        }
        pub fn set_network_border_group(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_border_group = inp;
            self
        }
        /// <p>Indicates whether the Elastic IP address is for use with instances in a VPC (<code>vpc</code>) or
        /// instances in EC2-Classic (<code>standard</code>).</p>
        pub fn domain(mut self, inp: crate::model::DomainType) -> Self {
            self.domain = Some(inp);
            self
        }
        pub fn set_domain(mut self, inp: std::option::Option<crate::model::DomainType>) -> Self {
            self.domain = inp;
            self
        }
        /// <p>The customer-owned IP address.</p>
        pub fn customer_owned_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.customer_owned_ip = Some(inp.into());
            self
        }
        pub fn set_customer_owned_ip(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.customer_owned_ip = inp;
            self
        }
        /// <p>The ID of the customer-owned address pool.</p>
        pub fn customer_owned_ipv4_pool(mut self, inp: impl Into<std::string::String>) -> Self {
            self.customer_owned_ipv4_pool = Some(inp.into());
            self
        }
        pub fn set_customer_owned_ipv4_pool(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.customer_owned_ipv4_pool = inp;
            self
        }
        /// <p>The carrier IP address. This option is only available for network interfaces which  reside
        /// in a subnet in a Wavelength Zone (for example an EC2 instance). </p>
        pub fn carrier_ip(mut self, inp: impl Into<std::string::String>) -> Self {
            self.carrier_ip = Some(inp.into());
            self
        }
        pub fn set_carrier_ip(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.carrier_ip = inp;
            self
        }
        /// Consumes the builder and constructs a [`AllocateAddressOutput`](crate::output::AllocateAddressOutput)
        pub fn build(self) -> crate::output::AllocateAddressOutput {
            crate::output::AllocateAddressOutput {
                public_ip: self.public_ip,
                allocation_id: self.allocation_id,
                public_ipv4_pool: self.public_ipv4_pool,
                network_border_group: self.network_border_group,
                domain: self.domain,
                customer_owned_ip: self.customer_owned_ip,
                customer_owned_ipv4_pool: self.customer_owned_ipv4_pool,
                carrier_ip: self.carrier_ip,
            }
        }
    }
}
impl AllocateAddressOutput {
    /// Creates a new builder-style object to manufacture [`AllocateAddressOutput`](crate::output::AllocateAddressOutput)
    pub fn builder() -> crate::output::allocate_address_output::Builder {
        crate::output::allocate_address_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AdvertiseByoipCidrOutput {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
}
impl std::fmt::Debug for AdvertiseByoipCidrOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdvertiseByoipCidrOutput");
        formatter.field("byoip_cidr", &self.byoip_cidr);
        formatter.finish()
    }
}
/// See [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
pub mod advertise_byoip_cidr_output {
    /// A builder for [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) byoip_cidr: std::option::Option<crate::model::ByoipCidr>,
    }
    impl Builder {
        /// <p>Information about the address range.</p>
        pub fn byoip_cidr(mut self, inp: crate::model::ByoipCidr) -> Self {
            self.byoip_cidr = Some(inp);
            self
        }
        pub fn set_byoip_cidr(mut self, inp: std::option::Option<crate::model::ByoipCidr>) -> Self {
            self.byoip_cidr = inp;
            self
        }
        /// Consumes the builder and constructs a [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
        pub fn build(self) -> crate::output::AdvertiseByoipCidrOutput {
            crate::output::AdvertiseByoipCidrOutput {
                byoip_cidr: self.byoip_cidr,
            }
        }
    }
}
impl AdvertiseByoipCidrOutput {
    /// Creates a new builder-style object to manufacture [`AdvertiseByoipCidrOutput`](crate::output::AdvertiseByoipCidrOutput)
    pub fn builder() -> crate::output::advertise_byoip_cidr_output::Builder {
        crate::output::advertise_byoip_cidr_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptVpcPeeringConnectionOutput {
    /// <p>Information about the VPC peering connection.</p>
    pub vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
}
impl std::fmt::Debug for AcceptVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptVpcPeeringConnectionOutput");
        formatter.field("vpc_peering_connection", &self.vpc_peering_connection);
        formatter.finish()
    }
}
/// See [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput)
pub mod accept_vpc_peering_connection_output {
    /// A builder for [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_peering_connection: std::option::Option<crate::model::VpcPeeringConnection>,
    }
    impl Builder {
        /// <p>Information about the VPC peering connection.</p>
        pub fn vpc_peering_connection(mut self, inp: crate::model::VpcPeeringConnection) -> Self {
            self.vpc_peering_connection = Some(inp);
            self
        }
        pub fn set_vpc_peering_connection(
            mut self,
            inp: std::option::Option<crate::model::VpcPeeringConnection>,
        ) -> Self {
            self.vpc_peering_connection = inp;
            self
        }
        /// Consumes the builder and constructs a [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput)
        pub fn build(self) -> crate::output::AcceptVpcPeeringConnectionOutput {
            crate::output::AcceptVpcPeeringConnectionOutput {
                vpc_peering_connection: self.vpc_peering_connection,
            }
        }
    }
}
impl AcceptVpcPeeringConnectionOutput {
    /// Creates a new builder-style object to manufacture [`AcceptVpcPeeringConnectionOutput`](crate::output::AcceptVpcPeeringConnectionOutput)
    pub fn builder() -> crate::output::accept_vpc_peering_connection_output::Builder {
        crate::output::accept_vpc_peering_connection_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptVpcEndpointConnectionsOutput {
    /// <p>Information about the interface endpoints that were not accepted, if
    /// applicable.</p>
    pub unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
}
impl std::fmt::Debug for AcceptVpcEndpointConnectionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptVpcEndpointConnectionsOutput");
        formatter.field("unsuccessful", &self.unsuccessful);
        formatter.finish()
    }
}
/// See [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput)
pub mod accept_vpc_endpoint_connections_output {
    /// A builder for [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unsuccessful: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
    }
    impl Builder {
        pub fn unsuccessful(mut self, inp: impl Into<crate::model::UnsuccessfulItem>) -> Self {
            let mut v = self.unsuccessful.unwrap_or_default();
            v.push(inp.into());
            self.unsuccessful = Some(v);
            self
        }
        pub fn set_unsuccessful(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::UnsuccessfulItem>>,
        ) -> Self {
            self.unsuccessful = inp;
            self
        }
        /// Consumes the builder and constructs a [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput)
        pub fn build(self) -> crate::output::AcceptVpcEndpointConnectionsOutput {
            crate::output::AcceptVpcEndpointConnectionsOutput {
                unsuccessful: self.unsuccessful,
            }
        }
    }
}
impl AcceptVpcEndpointConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`AcceptVpcEndpointConnectionsOutput`](crate::output::AcceptVpcEndpointConnectionsOutput)
    pub fn builder() -> crate::output::accept_vpc_endpoint_connections_output::Builder {
        crate::output::accept_vpc_endpoint_connections_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptTransitGatewayVpcAttachmentOutput {
    /// <p>The VPC attachment.</p>
    pub transit_gateway_vpc_attachment:
        std::option::Option<crate::model::TransitGatewayVpcAttachment>,
}
impl std::fmt::Debug for AcceptTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptTransitGatewayVpcAttachmentOutput");
        formatter.field(
            "transit_gateway_vpc_attachment",
            &self.transit_gateway_vpc_attachment,
        );
        formatter.finish()
    }
}
/// See [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput)
pub mod accept_transit_gateway_vpc_attachment_output {
    /// A builder for [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_vpc_attachment:
            std::option::Option<crate::model::TransitGatewayVpcAttachment>,
    }
    impl Builder {
        /// <p>The VPC attachment.</p>
        pub fn transit_gateway_vpc_attachment(
            mut self,
            inp: crate::model::TransitGatewayVpcAttachment,
        ) -> Self {
            self.transit_gateway_vpc_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_vpc_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayVpcAttachment>,
        ) -> Self {
            self.transit_gateway_vpc_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput)
        pub fn build(self) -> crate::output::AcceptTransitGatewayVpcAttachmentOutput {
            crate::output::AcceptTransitGatewayVpcAttachmentOutput {
                transit_gateway_vpc_attachment: self.transit_gateway_vpc_attachment,
            }
        }
    }
}
impl AcceptTransitGatewayVpcAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayVpcAttachmentOutput`](crate::output::AcceptTransitGatewayVpcAttachmentOutput)
    pub fn builder() -> crate::output::accept_transit_gateway_vpc_attachment_output::Builder {
        crate::output::accept_transit_gateway_vpc_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptTransitGatewayPeeringAttachmentOutput {
    /// <p>The transit gateway peering attachment.</p>
    pub transit_gateway_peering_attachment:
        std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
}
impl std::fmt::Debug for AcceptTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptTransitGatewayPeeringAttachmentOutput");
        formatter.field(
            "transit_gateway_peering_attachment",
            &self.transit_gateway_peering_attachment,
        );
        formatter.finish()
    }
}
/// See [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput)
pub mod accept_transit_gateway_peering_attachment_output {
    /// A builder for [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) transit_gateway_peering_attachment:
            std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
    }
    impl Builder {
        /// <p>The transit gateway peering attachment.</p>
        pub fn transit_gateway_peering_attachment(
            mut self,
            inp: crate::model::TransitGatewayPeeringAttachment,
        ) -> Self {
            self.transit_gateway_peering_attachment = Some(inp);
            self
        }
        pub fn set_transit_gateway_peering_attachment(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayPeeringAttachment>,
        ) -> Self {
            self.transit_gateway_peering_attachment = inp;
            self
        }
        /// Consumes the builder and constructs a [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput)
        pub fn build(self) -> crate::output::AcceptTransitGatewayPeeringAttachmentOutput {
            crate::output::AcceptTransitGatewayPeeringAttachmentOutput {
                transit_gateway_peering_attachment: self.transit_gateway_peering_attachment,
            }
        }
    }
}
impl AcceptTransitGatewayPeeringAttachmentOutput {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayPeeringAttachmentOutput`](crate::output::AcceptTransitGatewayPeeringAttachmentOutput)
    pub fn builder() -> crate::output::accept_transit_gateway_peering_attachment_output::Builder {
        crate::output::accept_transit_gateway_peering_attachment_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptTransitGatewayMulticastDomainAssociationsOutput {
    /// <p>Describes the multicast domain associations.</p>
    pub associations: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
}
impl std::fmt::Debug for AcceptTransitGatewayMulticastDomainAssociationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptTransitGatewayMulticastDomainAssociationsOutput");
        formatter.field("associations", &self.associations);
        formatter.finish()
    }
}
/// See [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput)
pub mod accept_transit_gateway_multicast_domain_associations_output {
    /// A builder for [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) associations:
            std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
    }
    impl Builder {
        /// <p>Describes the multicast domain associations.</p>
        pub fn associations(
            mut self,
            inp: crate::model::TransitGatewayMulticastDomainAssociations,
        ) -> Self {
            self.associations = Some(inp);
            self
        }
        pub fn set_associations(
            mut self,
            inp: std::option::Option<crate::model::TransitGatewayMulticastDomainAssociations>,
        ) -> Self {
            self.associations = inp;
            self
        }
        /// Consumes the builder and constructs a [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput)
        pub fn build(self) -> crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput {
            crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput {
                associations: self.associations,
            }
        }
    }
}
impl AcceptTransitGatewayMulticastDomainAssociationsOutput {
    /// Creates a new builder-style object to manufacture [`AcceptTransitGatewayMulticastDomainAssociationsOutput`](crate::output::AcceptTransitGatewayMulticastDomainAssociationsOutput)
    pub fn builder(
    ) -> crate::output::accept_transit_gateway_multicast_domain_associations_output::Builder {
        crate::output::accept_transit_gateway_multicast_domain_associations_output::Builder::default(
        )
    }
}

/// <p>The result of the exchange and whether it was <code>successful</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptReservedInstancesExchangeQuoteOutput {
    /// <p>The ID of the successful exchange.</p>
    pub exchange_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AcceptReservedInstancesExchangeQuoteOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptReservedInstancesExchangeQuoteOutput");
        formatter.field("exchange_id", &self.exchange_id);
        formatter.finish()
    }
}
/// See [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput)
pub mod accept_reserved_instances_exchange_quote_output {
    /// A builder for [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) exchange_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the successful exchange.</p>
        pub fn exchange_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.exchange_id = Some(inp.into());
            self
        }
        pub fn set_exchange_id(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.exchange_id = inp;
            self
        }
        /// Consumes the builder and constructs a [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput)
        pub fn build(self) -> crate::output::AcceptReservedInstancesExchangeQuoteOutput {
            crate::output::AcceptReservedInstancesExchangeQuoteOutput {
                exchange_id: self.exchange_id,
            }
        }
    }
}
impl AcceptReservedInstancesExchangeQuoteOutput {
    /// Creates a new builder-style object to manufacture [`AcceptReservedInstancesExchangeQuoteOutput`](crate::output::AcceptReservedInstancesExchangeQuoteOutput)
    pub fn builder() -> crate::output::accept_reserved_instances_exchange_quote_output::Builder {
        crate::output::accept_reserved_instances_exchange_quote_output::Builder::default()
    }
}
