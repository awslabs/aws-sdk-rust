// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the private DNS name for the service endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PrivateDnsNameConfiguration {
    /// <p>The verification state of the VPC endpoint service.</p>
    /// <p>&gt;Consumers of the endpoint service can use the private name only when the state is <code>verified</code>.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::DnsNameState>,
    /// <p>The endpoint service verification type, for example TXT.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The value the service provider adds to the private DNS name domain record before verification.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The name of the record subdomain the service provider needs to create. The service provider adds the <code>value</code> text to the <code>name</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl PrivateDnsNameConfiguration {
    /// <p>The verification state of the VPC endpoint service.</p>
    /// <p>&gt;Consumers of the endpoint service can use the private name only when the state is <code>verified</code>.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::DnsNameState> {
        self.state.as_ref()
    }
    /// <p>The endpoint service verification type, for example TXT.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The value the service provider adds to the private DNS name domain record before verification.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The name of the record subdomain the service provider needs to create. The service provider adds the <code>value</code> text to the <code>name</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl PrivateDnsNameConfiguration {
    /// Creates a new builder-style object to manufacture [`PrivateDnsNameConfiguration`](crate::types::PrivateDnsNameConfiguration).
    pub fn builder() -> crate::types::builders::PrivateDnsNameConfigurationBuilder {
        crate::types::builders::PrivateDnsNameConfigurationBuilder::default()
    }
}

/// A builder for [`PrivateDnsNameConfiguration`](crate::types::PrivateDnsNameConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrivateDnsNameConfigurationBuilder {
    pub(crate) state: std::option::Option<crate::types::DnsNameState>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl PrivateDnsNameConfigurationBuilder {
    /// <p>The verification state of the VPC endpoint service.</p>
    /// <p>&gt;Consumers of the endpoint service can use the private name only when the state is <code>verified</code>.</p>
    pub fn state(mut self, input: crate::types::DnsNameState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The verification state of the VPC endpoint service.</p>
    /// <p>&gt;Consumers of the endpoint service can use the private name only when the state is <code>verified</code>.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::DnsNameState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The endpoint service verification type, for example TXT.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The endpoint service verification type, for example TXT.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The value the service provider adds to the private DNS name domain record before verification.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value the service provider adds to the private DNS name domain record before verification.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The name of the record subdomain the service provider needs to create. The service provider adds the <code>value</code> text to the <code>name</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the record subdomain the service provider needs to create. The service provider adds the <code>value</code> text to the <code>name</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`PrivateDnsNameConfiguration`](crate::types::PrivateDnsNameConfiguration).
    pub fn build(self) -> crate::types::PrivateDnsNameConfiguration {
        crate::types::PrivateDnsNameConfiguration {
            state: self.state,
            r#type: self.r#type,
            value: self.value,
            name: self.name,
        }
    }
}
