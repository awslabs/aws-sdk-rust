// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these target groups.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetGroupsConfig {
    /// <p>One or more target groups.</p>
    pub target_groups: ::std::option::Option<::std::vec::Vec<crate::types::TargetGroup>>,
}
impl TargetGroupsConfig {
    /// <p>One or more target groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_groups.is_none()`.
    pub fn target_groups(&self) -> &[crate::types::TargetGroup] {
        self.target_groups.as_deref().unwrap_or_default()
    }
}
impl TargetGroupsConfig {
    /// Creates a new builder-style object to manufacture [`TargetGroupsConfig`](crate::types::TargetGroupsConfig).
    pub fn builder() -> crate::types::builders::TargetGroupsConfigBuilder {
        crate::types::builders::TargetGroupsConfigBuilder::default()
    }
}

/// A builder for [`TargetGroupsConfig`](crate::types::TargetGroupsConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TargetGroupsConfigBuilder {
    pub(crate) target_groups: ::std::option::Option<::std::vec::Vec<crate::types::TargetGroup>>,
}
impl TargetGroupsConfigBuilder {
    /// Appends an item to `target_groups`.
    ///
    /// To override the contents of this collection use [`set_target_groups`](Self::set_target_groups).
    ///
    /// <p>One or more target groups.</p>
    pub fn target_groups(mut self, input: crate::types::TargetGroup) -> Self {
        let mut v = self.target_groups.unwrap_or_default();
        v.push(input);
        self.target_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more target groups.</p>
    pub fn set_target_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TargetGroup>>) -> Self {
        self.target_groups = input;
        self
    }
    /// <p>One or more target groups.</p>
    pub fn get_target_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TargetGroup>> {
        &self.target_groups
    }
    /// Consumes the builder and constructs a [`TargetGroupsConfig`](crate::types::TargetGroupsConfig).
    pub fn build(self) -> crate::types::TargetGroupsConfig {
        crate::types::TargetGroupsConfig {
            target_groups: self.target_groups,
        }
    }
}
