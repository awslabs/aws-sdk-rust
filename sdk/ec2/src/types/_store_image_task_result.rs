// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information about the AMI store task, including the progress of the task.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StoreImageTaskResult {
    /// <p>The ID of the AMI that is being stored.</p>
    #[doc(hidden)]
    pub ami_id: std::option::Option<std::string::String>,
    /// <p>The time the task started.</p>
    #[doc(hidden)]
    pub task_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The name of the stored AMI object in the bucket.</p>
    #[doc(hidden)]
    pub s3object_key: std::option::Option<std::string::String>,
    /// <p>The progress of the task as a percentage.</p>
    #[doc(hidden)]
    pub progress_percentage: std::option::Option<i32>,
    /// <p>The state of the store task (<code>InProgress</code>, <code>Completed</code>, or <code>Failed</code>).</p>
    #[doc(hidden)]
    pub store_task_state: std::option::Option<std::string::String>,
    /// <p>If the tasks fails, the reason for the failure is returned. If the task succeeds, <code>null</code> is returned.</p>
    #[doc(hidden)]
    pub store_task_failure_reason: std::option::Option<std::string::String>,
}
impl StoreImageTaskResult {
    /// <p>The ID of the AMI that is being stored.</p>
    pub fn ami_id(&self) -> std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The time the task started.</p>
    pub fn task_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.task_start_time.as_ref()
    }
    /// <p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The name of the stored AMI object in the bucket.</p>
    pub fn s3object_key(&self) -> std::option::Option<&str> {
        self.s3object_key.as_deref()
    }
    /// <p>The progress of the task as a percentage.</p>
    pub fn progress_percentage(&self) -> std::option::Option<i32> {
        self.progress_percentage
    }
    /// <p>The state of the store task (<code>InProgress</code>, <code>Completed</code>, or <code>Failed</code>).</p>
    pub fn store_task_state(&self) -> std::option::Option<&str> {
        self.store_task_state.as_deref()
    }
    /// <p>If the tasks fails, the reason for the failure is returned. If the task succeeds, <code>null</code> is returned.</p>
    pub fn store_task_failure_reason(&self) -> std::option::Option<&str> {
        self.store_task_failure_reason.as_deref()
    }
}
impl StoreImageTaskResult {
    /// Creates a new builder-style object to manufacture [`StoreImageTaskResult`](crate::types::StoreImageTaskResult).
    pub fn builder() -> crate::types::builders::StoreImageTaskResultBuilder {
        crate::types::builders::StoreImageTaskResultBuilder::default()
    }
}

/// A builder for [`StoreImageTaskResult`](crate::types::StoreImageTaskResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StoreImageTaskResultBuilder {
    pub(crate) ami_id: std::option::Option<std::string::String>,
    pub(crate) task_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) s3object_key: std::option::Option<std::string::String>,
    pub(crate) progress_percentage: std::option::Option<i32>,
    pub(crate) store_task_state: std::option::Option<std::string::String>,
    pub(crate) store_task_failure_reason: std::option::Option<std::string::String>,
}
impl StoreImageTaskResultBuilder {
    /// <p>The ID of the AMI that is being stored.</p>
    pub fn ami_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ami_id = Some(input.into());
        self
    }
    /// <p>The ID of the AMI that is being stored.</p>
    pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The time the task started.</p>
    pub fn task_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.task_start_time = Some(input);
        self
    }
    /// <p>The time the task started.</p>
    pub fn set_task_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.task_start_time = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket that contains the stored AMI object.</p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The name of the stored AMI object in the bucket.</p>
    pub fn s3object_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3object_key = Some(input.into());
        self
    }
    /// <p>The name of the stored AMI object in the bucket.</p>
    pub fn set_s3object_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3object_key = input;
        self
    }
    /// <p>The progress of the task as a percentage.</p>
    pub fn progress_percentage(mut self, input: i32) -> Self {
        self.progress_percentage = Some(input);
        self
    }
    /// <p>The progress of the task as a percentage.</p>
    pub fn set_progress_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.progress_percentage = input;
        self
    }
    /// <p>The state of the store task (<code>InProgress</code>, <code>Completed</code>, or <code>Failed</code>).</p>
    pub fn store_task_state(mut self, input: impl Into<std::string::String>) -> Self {
        self.store_task_state = Some(input.into());
        self
    }
    /// <p>The state of the store task (<code>InProgress</code>, <code>Completed</code>, or <code>Failed</code>).</p>
    pub fn set_store_task_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.store_task_state = input;
        self
    }
    /// <p>If the tasks fails, the reason for the failure is returned. If the task succeeds, <code>null</code> is returned.</p>
    pub fn store_task_failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.store_task_failure_reason = Some(input.into());
        self
    }
    /// <p>If the tasks fails, the reason for the failure is returned. If the task succeeds, <code>null</code> is returned.</p>
    pub fn set_store_task_failure_reason(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.store_task_failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`StoreImageTaskResult`](crate::types::StoreImageTaskResult).
    pub fn build(self) -> crate::types::StoreImageTaskResult {
        crate::types::StoreImageTaskResult {
            ami_id: self.ami_id,
            task_start_time: self.task_start_time,
            bucket: self.bucket,
            s3object_key: self.s3object_key,
            progress_percentage: self.progress_percentage,
            store_task_state: self.store_task_state,
            store_task_failure_reason: self.store_task_failure_reason,
        }
    }
}
