// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for CloudWatch Logs as a logging destination.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifiedAccessLogCloudWatchLogsDestinationOptions {
    /// <p>Indicates whether logging is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub log_group: ::std::option::Option<::std::string::String>,
}
impl VerifiedAccessLogCloudWatchLogsDestinationOptions {
    /// <p>Indicates whether logging is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn log_group(&self) -> ::std::option::Option<&str> {
        self.log_group.as_deref()
    }
}
impl VerifiedAccessLogCloudWatchLogsDestinationOptions {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessLogCloudWatchLogsDestinationOptions`](crate::types::VerifiedAccessLogCloudWatchLogsDestinationOptions).
    pub fn builder() -> crate::types::builders::VerifiedAccessLogCloudWatchLogsDestinationOptionsBuilder {
        crate::types::builders::VerifiedAccessLogCloudWatchLogsDestinationOptionsBuilder::default()
    }
}

/// A builder for [`VerifiedAccessLogCloudWatchLogsDestinationOptions`](crate::types::VerifiedAccessLogCloudWatchLogsDestinationOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VerifiedAccessLogCloudWatchLogsDestinationOptionsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) log_group: ::std::option::Option<::std::string::String>,
}
impl VerifiedAccessLogCloudWatchLogsDestinationOptionsBuilder {
    /// <p>Indicates whether logging is enabled.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether logging is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether logging is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn log_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn set_log_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group = input;
        self
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn get_log_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group
    }
    /// Consumes the builder and constructs a [`VerifiedAccessLogCloudWatchLogsDestinationOptions`](crate::types::VerifiedAccessLogCloudWatchLogsDestinationOptions).
    pub fn build(self) -> crate::types::VerifiedAccessLogCloudWatchLogsDestinationOptions {
        crate::types::VerifiedAccessLogCloudWatchLogsDestinationOptions {
            enabled: self.enabled,
            log_group: self.log_group,
        }
    }
}
