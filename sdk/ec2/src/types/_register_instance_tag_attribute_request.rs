// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the tag keys to register for the current Region. You can either specify individual tag keys or register all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisterInstanceTagAttributeRequest {
    /// <p>Indicates whether to register all tag keys in the current Region. Specify <code>true</code> to register all tag keys.</p>
    pub include_all_tags_of_instance: ::std::option::Option<bool>,
    /// <p>The tag keys to register.</p>
    pub instance_tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RegisterInstanceTagAttributeRequest {
    /// <p>Indicates whether to register all tag keys in the current Region. Specify <code>true</code> to register all tag keys.</p>
    pub fn include_all_tags_of_instance(&self) -> ::std::option::Option<bool> {
        self.include_all_tags_of_instance
    }
    /// <p>The tag keys to register.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_tag_keys.is_none()`.
    pub fn instance_tag_keys(&self) -> &[::std::string::String] {
        self.instance_tag_keys.as_deref().unwrap_or_default()
    }
}
impl RegisterInstanceTagAttributeRequest {
    /// Creates a new builder-style object to manufacture [`RegisterInstanceTagAttributeRequest`](crate::types::RegisterInstanceTagAttributeRequest).
    pub fn builder() -> crate::types::builders::RegisterInstanceTagAttributeRequestBuilder {
        crate::types::builders::RegisterInstanceTagAttributeRequestBuilder::default()
    }
}

/// A builder for [`RegisterInstanceTagAttributeRequest`](crate::types::RegisterInstanceTagAttributeRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegisterInstanceTagAttributeRequestBuilder {
    pub(crate) include_all_tags_of_instance: ::std::option::Option<bool>,
    pub(crate) instance_tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RegisterInstanceTagAttributeRequestBuilder {
    /// <p>Indicates whether to register all tag keys in the current Region. Specify <code>true</code> to register all tag keys.</p>
    pub fn include_all_tags_of_instance(mut self, input: bool) -> Self {
        self.include_all_tags_of_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to register all tag keys in the current Region. Specify <code>true</code> to register all tag keys.</p>
    pub fn set_include_all_tags_of_instance(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_all_tags_of_instance = input;
        self
    }
    /// <p>Indicates whether to register all tag keys in the current Region. Specify <code>true</code> to register all tag keys.</p>
    pub fn get_include_all_tags_of_instance(&self) -> &::std::option::Option<bool> {
        &self.include_all_tags_of_instance
    }
    /// Appends an item to `instance_tag_keys`.
    ///
    /// To override the contents of this collection use [`set_instance_tag_keys`](Self::set_instance_tag_keys).
    ///
    /// <p>The tag keys to register.</p>
    pub fn instance_tag_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_tag_keys.unwrap_or_default();
        v.push(input.into());
        self.instance_tag_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag keys to register.</p>
    pub fn set_instance_tag_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_tag_keys = input;
        self
    }
    /// <p>The tag keys to register.</p>
    pub fn get_instance_tag_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_tag_keys
    }
    /// Consumes the builder and constructs a [`RegisterInstanceTagAttributeRequest`](crate::types::RegisterInstanceTagAttributeRequest).
    pub fn build(self) -> crate::types::RegisterInstanceTagAttributeRequest {
        crate::types::RegisterInstanceTagAttributeRequest {
            include_all_tags_of_instance: self.include_all_tags_of_instance,
            instance_tag_keys: self.instance_tag_keys,
        }
    }
}
