// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the volume initialization. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/initalize-volume.html">Initialize Amazon EBS volumes</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InitializationStatusDetails {
    /// <p>The method used for volume initialization. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>default</code> - Volume initialized using the default volume initialization rate or fast snapshot restore.</p></li>
    /// <li>
    /// <p><code>provisioned-rate</code> - Volume initialized using an Amazon EBS Provisioned Rate for Volume Initialization.</p></li>
    /// <li>
    /// <p><code>volume-copy</code> - Volume copy initialized at the rate for volume copies.</p></li>
    /// </ul>
    pub initialization_type: ::std::option::Option<crate::types::InitializationType>,
    /// <p>The current volume initialization progress as a percentage (0-100). Returns <code>100</code> when volume initialization has completed.</p>
    pub progress: ::std::option::Option<i64>,
    /// <p>The estimated remaining time, in seconds, for volume initialization to complete. Returns <code>0</code> when volume initialization has completed.</p>
    /// <p>Only available for volumes created with Amazon EBS Provisioned Rate for Volume Initialization.</p>
    pub estimated_time_to_complete_in_seconds: ::std::option::Option<i64>,
}
impl InitializationStatusDetails {
    /// <p>The method used for volume initialization. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>default</code> - Volume initialized using the default volume initialization rate or fast snapshot restore.</p></li>
    /// <li>
    /// <p><code>provisioned-rate</code> - Volume initialized using an Amazon EBS Provisioned Rate for Volume Initialization.</p></li>
    /// <li>
    /// <p><code>volume-copy</code> - Volume copy initialized at the rate for volume copies.</p></li>
    /// </ul>
    pub fn initialization_type(&self) -> ::std::option::Option<&crate::types::InitializationType> {
        self.initialization_type.as_ref()
    }
    /// <p>The current volume initialization progress as a percentage (0-100). Returns <code>100</code> when volume initialization has completed.</p>
    pub fn progress(&self) -> ::std::option::Option<i64> {
        self.progress
    }
    /// <p>The estimated remaining time, in seconds, for volume initialization to complete. Returns <code>0</code> when volume initialization has completed.</p>
    /// <p>Only available for volumes created with Amazon EBS Provisioned Rate for Volume Initialization.</p>
    pub fn estimated_time_to_complete_in_seconds(&self) -> ::std::option::Option<i64> {
        self.estimated_time_to_complete_in_seconds
    }
}
impl InitializationStatusDetails {
    /// Creates a new builder-style object to manufacture [`InitializationStatusDetails`](crate::types::InitializationStatusDetails).
    pub fn builder() -> crate::types::builders::InitializationStatusDetailsBuilder {
        crate::types::builders::InitializationStatusDetailsBuilder::default()
    }
}

/// A builder for [`InitializationStatusDetails`](crate::types::InitializationStatusDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InitializationStatusDetailsBuilder {
    pub(crate) initialization_type: ::std::option::Option<crate::types::InitializationType>,
    pub(crate) progress: ::std::option::Option<i64>,
    pub(crate) estimated_time_to_complete_in_seconds: ::std::option::Option<i64>,
}
impl InitializationStatusDetailsBuilder {
    /// <p>The method used for volume initialization. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>default</code> - Volume initialized using the default volume initialization rate or fast snapshot restore.</p></li>
    /// <li>
    /// <p><code>provisioned-rate</code> - Volume initialized using an Amazon EBS Provisioned Rate for Volume Initialization.</p></li>
    /// <li>
    /// <p><code>volume-copy</code> - Volume copy initialized at the rate for volume copies.</p></li>
    /// </ul>
    pub fn initialization_type(mut self, input: crate::types::InitializationType) -> Self {
        self.initialization_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method used for volume initialization. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>default</code> - Volume initialized using the default volume initialization rate or fast snapshot restore.</p></li>
    /// <li>
    /// <p><code>provisioned-rate</code> - Volume initialized using an Amazon EBS Provisioned Rate for Volume Initialization.</p></li>
    /// <li>
    /// <p><code>volume-copy</code> - Volume copy initialized at the rate for volume copies.</p></li>
    /// </ul>
    pub fn set_initialization_type(mut self, input: ::std::option::Option<crate::types::InitializationType>) -> Self {
        self.initialization_type = input;
        self
    }
    /// <p>The method used for volume initialization. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>default</code> - Volume initialized using the default volume initialization rate or fast snapshot restore.</p></li>
    /// <li>
    /// <p><code>provisioned-rate</code> - Volume initialized using an Amazon EBS Provisioned Rate for Volume Initialization.</p></li>
    /// <li>
    /// <p><code>volume-copy</code> - Volume copy initialized at the rate for volume copies.</p></li>
    /// </ul>
    pub fn get_initialization_type(&self) -> &::std::option::Option<crate::types::InitializationType> {
        &self.initialization_type
    }
    /// <p>The current volume initialization progress as a percentage (0-100). Returns <code>100</code> when volume initialization has completed.</p>
    pub fn progress(mut self, input: i64) -> Self {
        self.progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current volume initialization progress as a percentage (0-100). Returns <code>100</code> when volume initialization has completed.</p>
    pub fn set_progress(mut self, input: ::std::option::Option<i64>) -> Self {
        self.progress = input;
        self
    }
    /// <p>The current volume initialization progress as a percentage (0-100). Returns <code>100</code> when volume initialization has completed.</p>
    pub fn get_progress(&self) -> &::std::option::Option<i64> {
        &self.progress
    }
    /// <p>The estimated remaining time, in seconds, for volume initialization to complete. Returns <code>0</code> when volume initialization has completed.</p>
    /// <p>Only available for volumes created with Amazon EBS Provisioned Rate for Volume Initialization.</p>
    pub fn estimated_time_to_complete_in_seconds(mut self, input: i64) -> Self {
        self.estimated_time_to_complete_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated remaining time, in seconds, for volume initialization to complete. Returns <code>0</code> when volume initialization has completed.</p>
    /// <p>Only available for volumes created with Amazon EBS Provisioned Rate for Volume Initialization.</p>
    pub fn set_estimated_time_to_complete_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_time_to_complete_in_seconds = input;
        self
    }
    /// <p>The estimated remaining time, in seconds, for volume initialization to complete. Returns <code>0</code> when volume initialization has completed.</p>
    /// <p>Only available for volumes created with Amazon EBS Provisioned Rate for Volume Initialization.</p>
    pub fn get_estimated_time_to_complete_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.estimated_time_to_complete_in_seconds
    }
    /// Consumes the builder and constructs a [`InitializationStatusDetails`](crate::types::InitializationStatusDetails).
    pub fn build(self) -> crate::types::InitializationStatusDetails {
        crate::types::InitializationStatusDetails {
            initialization_type: self.initialization_type,
            progress: self.progress,
            estimated_time_to_complete_in_seconds: self.estimated_time_to_complete_in_seconds,
        }
    }
}
