// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a prefix list reference.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransitGatewayPrefixListReference {
    /// <p>The ID of the transit gateway route table.</p>
    #[doc(hidden)]
    pub transit_gateway_route_table_id: std::option::Option<std::string::String>,
    /// <p>The ID of the prefix list.</p>
    #[doc(hidden)]
    pub prefix_list_id: std::option::Option<std::string::String>,
    /// <p>The ID of the prefix list owner.</p>
    #[doc(hidden)]
    pub prefix_list_owner_id: std::option::Option<std::string::String>,
    /// <p>The state of the prefix list reference.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::TransitGatewayPrefixListReferenceState>,
    /// <p>Indicates whether traffic that matches this route is dropped.</p>
    #[doc(hidden)]
    pub blackhole: std::option::Option<bool>,
    /// <p>Information about the transit gateway attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_attachment:
        std::option::Option<crate::types::TransitGatewayPrefixListAttachment>,
}
impl TransitGatewayPrefixListReference {
    /// <p>The ID of the transit gateway route table.</p>
    pub fn transit_gateway_route_table_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_route_table_id.as_deref()
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(&self) -> std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The ID of the prefix list owner.</p>
    pub fn prefix_list_owner_id(&self) -> std::option::Option<&str> {
        self.prefix_list_owner_id.as_deref()
    }
    /// <p>The state of the prefix list reference.</p>
    pub fn state(
        &self,
    ) -> std::option::Option<&crate::types::TransitGatewayPrefixListReferenceState> {
        self.state.as_ref()
    }
    /// <p>Indicates whether traffic that matches this route is dropped.</p>
    pub fn blackhole(&self) -> std::option::Option<bool> {
        self.blackhole
    }
    /// <p>Information about the transit gateway attachment.</p>
    pub fn transit_gateway_attachment(
        &self,
    ) -> std::option::Option<&crate::types::TransitGatewayPrefixListAttachment> {
        self.transit_gateway_attachment.as_ref()
    }
}
impl TransitGatewayPrefixListReference {
    /// Creates a new builder-style object to manufacture [`TransitGatewayPrefixListReference`](crate::types::TransitGatewayPrefixListReference).
    pub fn builder() -> crate::types::builders::TransitGatewayPrefixListReferenceBuilder {
        crate::types::builders::TransitGatewayPrefixListReferenceBuilder::default()
    }
}

/// A builder for [`TransitGatewayPrefixListReference`](crate::types::TransitGatewayPrefixListReference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransitGatewayPrefixListReferenceBuilder {
    pub(crate) transit_gateway_route_table_id: std::option::Option<std::string::String>,
    pub(crate) prefix_list_id: std::option::Option<std::string::String>,
    pub(crate) prefix_list_owner_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::TransitGatewayPrefixListReferenceState>,
    pub(crate) blackhole: std::option::Option<bool>,
    pub(crate) transit_gateway_attachment:
        std::option::Option<crate::types::TransitGatewayPrefixListAttachment>,
}
impl TransitGatewayPrefixListReferenceBuilder {
    /// <p>The ID of the transit gateway route table.</p>
    pub fn transit_gateway_route_table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_route_table_id = Some(input.into());
        self
    }
    /// <p>The ID of the transit gateway route table.</p>
    pub fn set_transit_gateway_route_table_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_route_table_id = input;
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix_list_id = Some(input.into());
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn set_prefix_list_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the prefix list owner.</p>
    pub fn prefix_list_owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix_list_owner_id = Some(input.into());
        self
    }
    /// <p>The ID of the prefix list owner.</p>
    pub fn set_prefix_list_owner_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.prefix_list_owner_id = input;
        self
    }
    /// <p>The state of the prefix list reference.</p>
    pub fn state(mut self, input: crate::types::TransitGatewayPrefixListReferenceState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the prefix list reference.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::TransitGatewayPrefixListReferenceState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>Indicates whether traffic that matches this route is dropped.</p>
    pub fn blackhole(mut self, input: bool) -> Self {
        self.blackhole = Some(input);
        self
    }
    /// <p>Indicates whether traffic that matches this route is dropped.</p>
    pub fn set_blackhole(mut self, input: std::option::Option<bool>) -> Self {
        self.blackhole = input;
        self
    }
    /// <p>Information about the transit gateway attachment.</p>
    pub fn transit_gateway_attachment(
        mut self,
        input: crate::types::TransitGatewayPrefixListAttachment,
    ) -> Self {
        self.transit_gateway_attachment = Some(input);
        self
    }
    /// <p>Information about the transit gateway attachment.</p>
    pub fn set_transit_gateway_attachment(
        mut self,
        input: std::option::Option<crate::types::TransitGatewayPrefixListAttachment>,
    ) -> Self {
        self.transit_gateway_attachment = input;
        self
    }
    /// Consumes the builder and constructs a [`TransitGatewayPrefixListReference`](crate::types::TransitGatewayPrefixListReference).
    pub fn build(self) -> crate::types::TransitGatewayPrefixListReference {
        crate::types::TransitGatewayPrefixListReference {
            transit_gateway_route_table_id: self.transit_gateway_route_table_id,
            prefix_list_id: self.prefix_list_id,
            prefix_list_owner_id: self.prefix_list_owner_id,
            state: self.state,
            blackhole: self.blackhole,
            transit_gateway_attachment: self.transit_gateway_attachment,
        }
    }
}
