// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a resource statement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceStatementRequest {
    /// <p>The resources.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The resource types.</p>
    #[doc(hidden)]
    pub resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResourceStatementRequest {
    /// <p>The resources.</p>
    pub fn resources(&self) -> std::option::Option<&[std::string::String]> {
        self.resources.as_deref()
    }
    /// <p>The resource types.</p>
    pub fn resource_types(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_types.as_deref()
    }
}
impl ResourceStatementRequest {
    /// Creates a new builder-style object to manufacture [`ResourceStatementRequest`](crate::types::ResourceStatementRequest).
    pub fn builder() -> crate::types::builders::ResourceStatementRequestBuilder {
        crate::types::builders::ResourceStatementRequestBuilder::default()
    }
}

/// A builder for [`ResourceStatementRequest`](crate::types::ResourceStatementRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceStatementRequestBuilder {
    pub(crate) resources: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) resource_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResourceStatementRequestBuilder {
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources.</p>
    pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = Some(v);
        self
    }
    /// <p>The resources.</p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resources = input;
        self
    }
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>The resource types.</p>
    pub fn resource_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input.into());
        self.resource_types = Some(v);
        self
    }
    /// <p>The resource types.</p>
    pub fn set_resource_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_types = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceStatementRequest`](crate::types::ResourceStatementRequest).
    pub fn build(self) -> crate::types::ResourceStatementRequest {
        crate::types::ResourceStatementRequest {
            resources: self.resources,
            resource_types: self.resource_types,
        }
    }
}
