// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>Deprecated.</p>
/// </note>
/// <p>Describes whether a VPC is enabled for ClassicLink.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcClassicLink {
    /// <p>Indicates whether the VPC is enabled for ClassicLink.</p>
    pub classic_link_enabled: ::std::option::Option<bool>,
    /// <p>Any tags assigned to the VPC.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
}
impl VpcClassicLink {
    /// <p>Indicates whether the VPC is enabled for ClassicLink.</p>
    pub fn classic_link_enabled(&self) -> ::std::option::Option<bool> {
        self.classic_link_enabled
    }
    /// <p>Any tags assigned to the VPC.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl VpcClassicLink {
    /// Creates a new builder-style object to manufacture [`VpcClassicLink`](crate::types::VpcClassicLink).
    pub fn builder() -> crate::types::builders::VpcClassicLinkBuilder {
        crate::types::builders::VpcClassicLinkBuilder::default()
    }
}

/// A builder for [`VpcClassicLink`](crate::types::VpcClassicLink).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcClassicLinkBuilder {
    pub(crate) classic_link_enabled: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
}
impl VpcClassicLinkBuilder {
    /// <p>Indicates whether the VPC is enabled for ClassicLink.</p>
    pub fn classic_link_enabled(mut self, input: bool) -> Self {
        self.classic_link_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the VPC is enabled for ClassicLink.</p>
    pub fn set_classic_link_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.classic_link_enabled = input;
        self
    }
    /// <p>Indicates whether the VPC is enabled for ClassicLink.</p>
    pub fn get_classic_link_enabled(&self) -> &::std::option::Option<bool> {
        &self.classic_link_enabled
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the VPC.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the VPC.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the VPC.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Consumes the builder and constructs a [`VpcClassicLink`](crate::types::VpcClassicLink).
    pub fn build(self) -> crate::types::VpcClassicLink {
        crate::types::VpcClassicLink {
            classic_link_enabled: self.classic_link_enabled,
            tags: self.tags,
            vpc_id: self.vpc_id,
        }
    }
}
