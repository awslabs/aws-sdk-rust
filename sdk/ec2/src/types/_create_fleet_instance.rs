// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the instances that were launched by the fleet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFleetInstance {
    /// <p>The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.</p>
    #[doc(hidden)]
    pub launch_template_and_overrides:
        std::option::Option<crate::types::LaunchTemplateAndOverridesResponse>,
    /// <p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>
    #[doc(hidden)]
    pub lifecycle: std::option::Option<crate::types::InstanceLifecycle>,
    /// <p>The IDs of the instances.</p>
    #[doc(hidden)]
    pub instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The instance type.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::InstanceType>,
    /// <p>The value is <code>Windows</code> for Windows instances. Otherwise, the value is blank.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<crate::types::PlatformValues>,
}
impl CreateFleetInstance {
    /// <p>The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.</p>
    pub fn launch_template_and_overrides(
        &self,
    ) -> std::option::Option<&crate::types::LaunchTemplateAndOverridesResponse> {
        self.launch_template_and_overrides.as_ref()
    }
    /// <p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>
    pub fn lifecycle(&self) -> std::option::Option<&crate::types::InstanceLifecycle> {
        self.lifecycle.as_ref()
    }
    /// <p>The IDs of the instances.</p>
    pub fn instance_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.instance_ids.as_deref()
    }
    /// <p>The instance type.</p>
    pub fn instance_type(&self) -> std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The value is <code>Windows</code> for Windows instances. Otherwise, the value is blank.</p>
    pub fn platform(&self) -> std::option::Option<&crate::types::PlatformValues> {
        self.platform.as_ref()
    }
}
impl CreateFleetInstance {
    /// Creates a new builder-style object to manufacture [`CreateFleetInstance`](crate::types::CreateFleetInstance).
    pub fn builder() -> crate::types::builders::CreateFleetInstanceBuilder {
        crate::types::builders::CreateFleetInstanceBuilder::default()
    }
}

/// A builder for [`CreateFleetInstance`](crate::types::CreateFleetInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateFleetInstanceBuilder {
    pub(crate) launch_template_and_overrides:
        std::option::Option<crate::types::LaunchTemplateAndOverridesResponse>,
    pub(crate) lifecycle: std::option::Option<crate::types::InstanceLifecycle>,
    pub(crate) instance_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) instance_type: std::option::Option<crate::types::InstanceType>,
    pub(crate) platform: std::option::Option<crate::types::PlatformValues>,
}
impl CreateFleetInstanceBuilder {
    /// <p>The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.</p>
    pub fn launch_template_and_overrides(
        mut self,
        input: crate::types::LaunchTemplateAndOverridesResponse,
    ) -> Self {
        self.launch_template_and_overrides = Some(input);
        self
    }
    /// <p>The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.</p>
    pub fn set_launch_template_and_overrides(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateAndOverridesResponse>,
    ) -> Self {
        self.launch_template_and_overrides = input;
        self
    }
    /// <p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>
    pub fn lifecycle(mut self, input: crate::types::InstanceLifecycle) -> Self {
        self.lifecycle = Some(input);
        self
    }
    /// <p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>
    pub fn set_lifecycle(
        mut self,
        input: std::option::Option<crate::types::InstanceLifecycle>,
    ) -> Self {
        self.lifecycle = input;
        self
    }
    /// Appends an item to `instance_ids`.
    ///
    /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
    ///
    /// <p>The IDs of the instances.</p>
    pub fn instance_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.instance_ids.unwrap_or_default();
        v.push(input.into());
        self.instance_ids = Some(v);
        self
    }
    /// <p>The IDs of the instances.</p>
    pub fn set_instance_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.instance_ids = input;
        self
    }
    /// <p>The instance type.</p>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>The instance type.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::InstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The value is <code>Windows</code> for Windows instances. Otherwise, the value is blank.</p>
    pub fn platform(mut self, input: crate::types::PlatformValues) -> Self {
        self.platform = Some(input);
        self
    }
    /// <p>The value is <code>Windows</code> for Windows instances. Otherwise, the value is blank.</p>
    pub fn set_platform(
        mut self,
        input: std::option::Option<crate::types::PlatformValues>,
    ) -> Self {
        self.platform = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateFleetInstance`](crate::types::CreateFleetInstance).
    pub fn build(self) -> crate::types::CreateFleetInstance {
        crate::types::CreateFleetInstance {
            launch_template_and_overrides: self.launch_template_and_overrides,
            lifecycle: self.lifecycle,
            instance_ids: self.instance_ids,
            instance_type: self.instance_type,
            platform: self.platform,
        }
    }
}
