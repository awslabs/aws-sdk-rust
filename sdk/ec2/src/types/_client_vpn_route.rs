// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Client VPN endpoint route.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClientVpnRoute {
    /// <p>The ID of the Client VPN endpoint with which the route is associated.</p>
    #[doc(hidden)]
    pub client_vpn_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The IPv4 address range, in CIDR notation, of the route destination.</p>
    #[doc(hidden)]
    pub destination_cidr: std::option::Option<std::string::String>,
    /// <p>The ID of the subnet through which traffic is routed.</p>
    #[doc(hidden)]
    pub target_subnet: std::option::Option<std::string::String>,
    /// <p>The route type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>Indicates how the route was associated with the Client VPN endpoint. <code>associate</code> indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. <code>add-route</code> indicates that the route was manually added using the <b>CreateClientVpnRoute</b> action.</p>
    #[doc(hidden)]
    pub origin: std::option::Option<std::string::String>,
    /// <p>The current state of the route.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ClientVpnRouteStatus>,
    /// <p>A brief description of the route.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl ClientVpnRoute {
    /// <p>The ID of the Client VPN endpoint with which the route is associated.</p>
    pub fn client_vpn_endpoint_id(&self) -> std::option::Option<&str> {
        self.client_vpn_endpoint_id.as_deref()
    }
    /// <p>The IPv4 address range, in CIDR notation, of the route destination.</p>
    pub fn destination_cidr(&self) -> std::option::Option<&str> {
        self.destination_cidr.as_deref()
    }
    /// <p>The ID of the subnet through which traffic is routed.</p>
    pub fn target_subnet(&self) -> std::option::Option<&str> {
        self.target_subnet.as_deref()
    }
    /// <p>The route type.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Indicates how the route was associated with the Client VPN endpoint. <code>associate</code> indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. <code>add-route</code> indicates that the route was manually added using the <b>CreateClientVpnRoute</b> action.</p>
    pub fn origin(&self) -> std::option::Option<&str> {
        self.origin.as_deref()
    }
    /// <p>The current state of the route.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ClientVpnRouteStatus> {
        self.status.as_ref()
    }
    /// <p>A brief description of the route.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ClientVpnRoute {
    /// Creates a new builder-style object to manufacture [`ClientVpnRoute`](crate::types::ClientVpnRoute).
    pub fn builder() -> crate::types::builders::ClientVpnRouteBuilder {
        crate::types::builders::ClientVpnRouteBuilder::default()
    }
}

/// A builder for [`ClientVpnRoute`](crate::types::ClientVpnRoute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClientVpnRouteBuilder {
    pub(crate) client_vpn_endpoint_id: std::option::Option<std::string::String>,
    pub(crate) destination_cidr: std::option::Option<std::string::String>,
    pub(crate) target_subnet: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) origin: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ClientVpnRouteStatus>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl ClientVpnRouteBuilder {
    /// <p>The ID of the Client VPN endpoint with which the route is associated.</p>
    pub fn client_vpn_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_vpn_endpoint_id = Some(input.into());
        self
    }
    /// <p>The ID of the Client VPN endpoint with which the route is associated.</p>
    pub fn set_client_vpn_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_vpn_endpoint_id = input;
        self
    }
    /// <p>The IPv4 address range, in CIDR notation, of the route destination.</p>
    pub fn destination_cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_cidr = Some(input.into());
        self
    }
    /// <p>The IPv4 address range, in CIDR notation, of the route destination.</p>
    pub fn set_destination_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_cidr = input;
        self
    }
    /// <p>The ID of the subnet through which traffic is routed.</p>
    pub fn target_subnet(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_subnet = Some(input.into());
        self
    }
    /// <p>The ID of the subnet through which traffic is routed.</p>
    pub fn set_target_subnet(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_subnet = input;
        self
    }
    /// <p>The route type.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The route type.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates how the route was associated with the Client VPN endpoint. <code>associate</code> indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. <code>add-route</code> indicates that the route was manually added using the <b>CreateClientVpnRoute</b> action.</p>
    pub fn origin(mut self, input: impl Into<std::string::String>) -> Self {
        self.origin = Some(input.into());
        self
    }
    /// <p>Indicates how the route was associated with the Client VPN endpoint. <code>associate</code> indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. <code>add-route</code> indicates that the route was manually added using the <b>CreateClientVpnRoute</b> action.</p>
    pub fn set_origin(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The current state of the route.</p>
    pub fn status(mut self, input: crate::types::ClientVpnRouteStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current state of the route.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ClientVpnRouteStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A brief description of the route.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A brief description of the route.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`ClientVpnRoute`](crate::types::ClientVpnRoute).
    pub fn build(self) -> crate::types::ClientVpnRoute {
        crate::types::ClientVpnRoute {
            client_vpn_endpoint_id: self.client_vpn_endpoint_id,
            destination_cidr: self.destination_cidr,
            target_subnet: self.target_subnet,
            r#type: self.r#type,
            origin: self.origin,
            status: self.status,
            description: self.description,
        }
    }
}
