// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The total value of the Convertible Reserved Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservedInstanceReservationValue {
    /// <p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
    #[doc(hidden)]
    pub reservation_value: std::option::Option<crate::types::ReservationValue>,
    /// <p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
    #[doc(hidden)]
    pub reserved_instance_id: std::option::Option<std::string::String>,
}
impl ReservedInstanceReservationValue {
    /// <p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
    pub fn reservation_value(&self) -> std::option::Option<&crate::types::ReservationValue> {
        self.reservation_value.as_ref()
    }
    /// <p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
    pub fn reserved_instance_id(&self) -> std::option::Option<&str> {
        self.reserved_instance_id.as_deref()
    }
}
impl ReservedInstanceReservationValue {
    /// Creates a new builder-style object to manufacture [`ReservedInstanceReservationValue`](crate::types::ReservedInstanceReservationValue).
    pub fn builder() -> crate::types::builders::ReservedInstanceReservationValueBuilder {
        crate::types::builders::ReservedInstanceReservationValueBuilder::default()
    }
}

/// A builder for [`ReservedInstanceReservationValue`](crate::types::ReservedInstanceReservationValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservedInstanceReservationValueBuilder {
    pub(crate) reservation_value: std::option::Option<crate::types::ReservationValue>,
    pub(crate) reserved_instance_id: std::option::Option<std::string::String>,
}
impl ReservedInstanceReservationValueBuilder {
    /// <p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
    pub fn reservation_value(mut self, input: crate::types::ReservationValue) -> Self {
        self.reservation_value = Some(input);
        self
    }
    /// <p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
    pub fn set_reservation_value(
        mut self,
        input: std::option::Option<crate::types::ReservationValue>,
    ) -> Self {
        self.reservation_value = input;
        self
    }
    /// <p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
    pub fn reserved_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
    pub fn set_reserved_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_instance_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservedInstanceReservationValue`](crate::types::ReservedInstanceReservationValue).
    pub fn build(self) -> crate::types::ReservedInstanceReservationValue {
        crate::types::ReservedInstanceReservationValue {
            reservation_value: self.reservation_value,
            reserved_instance_id: self.reserved_instance_id,
        }
    }
}
