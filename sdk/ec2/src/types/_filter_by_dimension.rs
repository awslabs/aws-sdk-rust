// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `FilterByDimension`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let filterbydimension = unimplemented!();
/// match filterbydimension {
///     FilterByDimension::AccountId => { /* ... */ },
///     FilterByDimension::AvailabilityZoneId => { /* ... */ },
///     FilterByDimension::InstanceFamily => { /* ... */ },
///     FilterByDimension::InstancePlatform => { /* ... */ },
///     FilterByDimension::InstanceType => { /* ... */ },
///     FilterByDimension::ReservationArn => { /* ... */ },
///     FilterByDimension::ReservationCreateTimestamp => { /* ... */ },
///     FilterByDimension::ReservationEndDateType => { /* ... */ },
///     FilterByDimension::ReservationEndTimestamp => { /* ... */ },
///     FilterByDimension::ReservationId => { /* ... */ },
///     FilterByDimension::ReservationInstanceMatchCriteria => { /* ... */ },
///     FilterByDimension::ReservationStartTimestamp => { /* ... */ },
///     FilterByDimension::ReservationState => { /* ... */ },
///     FilterByDimension::ReservationType => { /* ... */ },
///     FilterByDimension::ReservationUnusedFinancialOwner => { /* ... */ },
///     FilterByDimension::ResourceRegion => { /* ... */ },
///     FilterByDimension::Tenancy => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `filterbydimension` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `FilterByDimension::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `FilterByDimension::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `FilterByDimension::NewFeature` is defined.
/// Specifically, when `filterbydimension` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `FilterByDimension::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum FilterByDimension {
    #[allow(missing_docs)] // documentation missing in model
    AccountId,
    #[allow(missing_docs)] // documentation missing in model
    AvailabilityZoneId,
    #[allow(missing_docs)] // documentation missing in model
    InstanceFamily,
    #[allow(missing_docs)] // documentation missing in model
    InstancePlatform,
    #[allow(missing_docs)] // documentation missing in model
    InstanceType,
    #[allow(missing_docs)] // documentation missing in model
    ReservationArn,
    #[allow(missing_docs)] // documentation missing in model
    ReservationCreateTimestamp,
    #[allow(missing_docs)] // documentation missing in model
    ReservationEndDateType,
    #[allow(missing_docs)] // documentation missing in model
    ReservationEndTimestamp,
    #[allow(missing_docs)] // documentation missing in model
    ReservationId,
    #[allow(missing_docs)] // documentation missing in model
    ReservationInstanceMatchCriteria,
    #[allow(missing_docs)] // documentation missing in model
    ReservationStartTimestamp,
    #[allow(missing_docs)] // documentation missing in model
    ReservationState,
    #[allow(missing_docs)] // documentation missing in model
    ReservationType,
    #[allow(missing_docs)] // documentation missing in model
    ReservationUnusedFinancialOwner,
    #[allow(missing_docs)] // documentation missing in model
    ResourceRegion,
    #[allow(missing_docs)] // documentation missing in model
    Tenancy,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for FilterByDimension {
    fn from(s: &str) -> Self {
        match s {
            "account-id" => FilterByDimension::AccountId,
            "availability-zone-id" => FilterByDimension::AvailabilityZoneId,
            "instance-family" => FilterByDimension::InstanceFamily,
            "instance-platform" => FilterByDimension::InstancePlatform,
            "instance-type" => FilterByDimension::InstanceType,
            "reservation-arn" => FilterByDimension::ReservationArn,
            "reservation-create-timestamp" => FilterByDimension::ReservationCreateTimestamp,
            "reservation-end-date-type" => FilterByDimension::ReservationEndDateType,
            "reservation-end-timestamp" => FilterByDimension::ReservationEndTimestamp,
            "reservation-id" => FilterByDimension::ReservationId,
            "reservation-instance-match-criteria" => FilterByDimension::ReservationInstanceMatchCriteria,
            "reservation-start-timestamp" => FilterByDimension::ReservationStartTimestamp,
            "reservation-state" => FilterByDimension::ReservationState,
            "reservation-type" => FilterByDimension::ReservationType,
            "reservation-unused-financial-owner" => FilterByDimension::ReservationUnusedFinancialOwner,
            "resource-region" => FilterByDimension::ResourceRegion,
            "tenancy" => FilterByDimension::Tenancy,
            other => FilterByDimension::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for FilterByDimension {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(FilterByDimension::from(s))
    }
}
impl FilterByDimension {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            FilterByDimension::AccountId => "account-id",
            FilterByDimension::AvailabilityZoneId => "availability-zone-id",
            FilterByDimension::InstanceFamily => "instance-family",
            FilterByDimension::InstancePlatform => "instance-platform",
            FilterByDimension::InstanceType => "instance-type",
            FilterByDimension::ReservationArn => "reservation-arn",
            FilterByDimension::ReservationCreateTimestamp => "reservation-create-timestamp",
            FilterByDimension::ReservationEndDateType => "reservation-end-date-type",
            FilterByDimension::ReservationEndTimestamp => "reservation-end-timestamp",
            FilterByDimension::ReservationId => "reservation-id",
            FilterByDimension::ReservationInstanceMatchCriteria => "reservation-instance-match-criteria",
            FilterByDimension::ReservationStartTimestamp => "reservation-start-timestamp",
            FilterByDimension::ReservationState => "reservation-state",
            FilterByDimension::ReservationType => "reservation-type",
            FilterByDimension::ReservationUnusedFinancialOwner => "reservation-unused-financial-owner",
            FilterByDimension::ResourceRegion => "resource-region",
            FilterByDimension::Tenancy => "tenancy",
            FilterByDimension::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "account-id",
            "availability-zone-id",
            "instance-family",
            "instance-platform",
            "instance-type",
            "reservation-arn",
            "reservation-create-timestamp",
            "reservation-end-date-type",
            "reservation-end-timestamp",
            "reservation-id",
            "reservation-instance-match-criteria",
            "reservation-start-timestamp",
            "reservation-state",
            "reservation-type",
            "reservation-unused-financial-owner",
            "resource-region",
            "tenancy",
        ]
    }
}
impl ::std::convert::AsRef<str> for FilterByDimension {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl FilterByDimension {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for FilterByDimension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            FilterByDimension::AccountId => write!(f, "account-id"),
            FilterByDimension::AvailabilityZoneId => write!(f, "availability-zone-id"),
            FilterByDimension::InstanceFamily => write!(f, "instance-family"),
            FilterByDimension::InstancePlatform => write!(f, "instance-platform"),
            FilterByDimension::InstanceType => write!(f, "instance-type"),
            FilterByDimension::ReservationArn => write!(f, "reservation-arn"),
            FilterByDimension::ReservationCreateTimestamp => write!(f, "reservation-create-timestamp"),
            FilterByDimension::ReservationEndDateType => write!(f, "reservation-end-date-type"),
            FilterByDimension::ReservationEndTimestamp => write!(f, "reservation-end-timestamp"),
            FilterByDimension::ReservationId => write!(f, "reservation-id"),
            FilterByDimension::ReservationInstanceMatchCriteria => write!(f, "reservation-instance-match-criteria"),
            FilterByDimension::ReservationStartTimestamp => write!(f, "reservation-start-timestamp"),
            FilterByDimension::ReservationState => write!(f, "reservation-state"),
            FilterByDimension::ReservationType => write!(f, "reservation-type"),
            FilterByDimension::ReservationUnusedFinancialOwner => write!(f, "reservation-unused-financial-owner"),
            FilterByDimension::ResourceRegion => write!(f, "resource-region"),
            FilterByDimension::Tenancy => write!(f, "tenancy"),
            FilterByDimension::Unknown(value) => write!(f, "{value}"),
        }
    }
}
