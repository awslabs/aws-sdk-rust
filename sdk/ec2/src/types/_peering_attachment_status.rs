// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the transit gateway peering attachment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PeeringAttachmentStatus {
    /// <p>The status code.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>The status message, if applicable.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl PeeringAttachmentStatus {
    /// <p>The status code.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The status message, if applicable.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl PeeringAttachmentStatus {
    /// Creates a new builder-style object to manufacture [`PeeringAttachmentStatus`](crate::types::PeeringAttachmentStatus).
    pub fn builder() -> crate::types::builders::PeeringAttachmentStatusBuilder {
        crate::types::builders::PeeringAttachmentStatusBuilder::default()
    }
}

/// A builder for [`PeeringAttachmentStatus`](crate::types::PeeringAttachmentStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PeeringAttachmentStatusBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl PeeringAttachmentStatusBuilder {
    /// <p>The status code.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The status code.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The status message, if applicable.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>The status message, if applicable.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`PeeringAttachmentStatus`](crate::types::PeeringAttachmentStatus).
    pub fn build(self) -> crate::types::PeeringAttachmentStatus {
        crate::types::PeeringAttachmentStatus {
            code: self.code,
            message: self.message,
        }
    }
}
