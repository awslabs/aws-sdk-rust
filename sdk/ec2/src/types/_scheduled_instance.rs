// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Scheduled Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduledInstance {
    /// <p>The Availability Zone.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The date when the Scheduled Instance was purchased.</p>
    #[doc(hidden)]
    pub create_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The hourly price for a single instance.</p>
    #[doc(hidden)]
    pub hourly_price: std::option::Option<std::string::String>,
    /// <p>The number of instances.</p>
    #[doc(hidden)]
    pub instance_count: std::option::Option<i32>,
    /// <p>The instance type.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    #[doc(hidden)]
    pub network_platform: std::option::Option<std::string::String>,
    /// <p>The time for the next schedule to start.</p>
    #[doc(hidden)]
    pub next_slot_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The time that the previous schedule ended or will end.</p>
    #[doc(hidden)]
    pub previous_slot_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The schedule recurrence.</p>
    #[doc(hidden)]
    pub recurrence: std::option::Option<crate::types::ScheduledInstanceRecurrence>,
    /// <p>The Scheduled Instance ID.</p>
    #[doc(hidden)]
    pub scheduled_instance_id: std::option::Option<std::string::String>,
    /// <p>The number of hours in the schedule.</p>
    #[doc(hidden)]
    pub slot_duration_in_hours: std::option::Option<i32>,
    /// <p>The end date for the Scheduled Instance.</p>
    #[doc(hidden)]
    pub term_end_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The start date for the Scheduled Instance.</p>
    #[doc(hidden)]
    pub term_start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The total number of hours for a single instance for the entire term.</p>
    #[doc(hidden)]
    pub total_scheduled_instance_hours: std::option::Option<i32>,
}
impl ScheduledInstance {
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The date when the Scheduled Instance was purchased.</p>
    pub fn create_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_date.as_ref()
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn hourly_price(&self) -> std::option::Option<&str> {
        self.hourly_price.as_deref()
    }
    /// <p>The number of instances.</p>
    pub fn instance_count(&self) -> std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The instance type.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    pub fn network_platform(&self) -> std::option::Option<&str> {
        self.network_platform.as_deref()
    }
    /// <p>The time for the next schedule to start.</p>
    pub fn next_slot_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.next_slot_start_time.as_ref()
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The time that the previous schedule ended or will end.</p>
    pub fn previous_slot_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.previous_slot_end_time.as_ref()
    }
    /// <p>The schedule recurrence.</p>
    pub fn recurrence(&self) -> std::option::Option<&crate::types::ScheduledInstanceRecurrence> {
        self.recurrence.as_ref()
    }
    /// <p>The Scheduled Instance ID.</p>
    pub fn scheduled_instance_id(&self) -> std::option::Option<&str> {
        self.scheduled_instance_id.as_deref()
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn slot_duration_in_hours(&self) -> std::option::Option<i32> {
        self.slot_duration_in_hours
    }
    /// <p>The end date for the Scheduled Instance.</p>
    pub fn term_end_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.term_end_date.as_ref()
    }
    /// <p>The start date for the Scheduled Instance.</p>
    pub fn term_start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.term_start_date.as_ref()
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn total_scheduled_instance_hours(&self) -> std::option::Option<i32> {
        self.total_scheduled_instance_hours
    }
}
impl ScheduledInstance {
    /// Creates a new builder-style object to manufacture [`ScheduledInstance`](crate::types::ScheduledInstance).
    pub fn builder() -> crate::types::builders::ScheduledInstanceBuilder {
        crate::types::builders::ScheduledInstanceBuilder::default()
    }
}

/// A builder for [`ScheduledInstance`](crate::types::ScheduledInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduledInstanceBuilder {
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) create_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) hourly_price: std::option::Option<std::string::String>,
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) network_platform: std::option::Option<std::string::String>,
    pub(crate) next_slot_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) previous_slot_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) recurrence: std::option::Option<crate::types::ScheduledInstanceRecurrence>,
    pub(crate) scheduled_instance_id: std::option::Option<std::string::String>,
    pub(crate) slot_duration_in_hours: std::option::Option<i32>,
    pub(crate) term_end_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) term_start_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) total_scheduled_instance_hours: std::option::Option<i32>,
}
impl ScheduledInstanceBuilder {
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The date when the Scheduled Instance was purchased.</p>
    pub fn create_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_date = Some(input);
        self
    }
    /// <p>The date when the Scheduled Instance was purchased.</p>
    pub fn set_create_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_date = input;
        self
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn hourly_price(mut self, input: impl Into<std::string::String>) -> Self {
        self.hourly_price = Some(input.into());
        self
    }
    /// <p>The hourly price for a single instance.</p>
    pub fn set_hourly_price(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hourly_price = input;
        self
    }
    /// <p>The number of instances.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of instances.</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The instance type.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    pub fn network_platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_platform = Some(input.into());
        self
    }
    /// <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    pub fn set_network_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_platform = input;
        self
    }
    /// <p>The time for the next schedule to start.</p>
    pub fn next_slot_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.next_slot_start_time = Some(input);
        self
    }
    /// <p>The time for the next schedule to start.</p>
    pub fn set_next_slot_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.next_slot_start_time = input;
        self
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The time that the previous schedule ended or will end.</p>
    pub fn previous_slot_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.previous_slot_end_time = Some(input);
        self
    }
    /// <p>The time that the previous schedule ended or will end.</p>
    pub fn set_previous_slot_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.previous_slot_end_time = input;
        self
    }
    /// <p>The schedule recurrence.</p>
    pub fn recurrence(mut self, input: crate::types::ScheduledInstanceRecurrence) -> Self {
        self.recurrence = Some(input);
        self
    }
    /// <p>The schedule recurrence.</p>
    pub fn set_recurrence(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstanceRecurrence>,
    ) -> Self {
        self.recurrence = input;
        self
    }
    /// <p>The Scheduled Instance ID.</p>
    pub fn scheduled_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.scheduled_instance_id = Some(input.into());
        self
    }
    /// <p>The Scheduled Instance ID.</p>
    pub fn set_scheduled_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.scheduled_instance_id = input;
        self
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn slot_duration_in_hours(mut self, input: i32) -> Self {
        self.slot_duration_in_hours = Some(input);
        self
    }
    /// <p>The number of hours in the schedule.</p>
    pub fn set_slot_duration_in_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.slot_duration_in_hours = input;
        self
    }
    /// <p>The end date for the Scheduled Instance.</p>
    pub fn term_end_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.term_end_date = Some(input);
        self
    }
    /// <p>The end date for the Scheduled Instance.</p>
    pub fn set_term_end_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.term_end_date = input;
        self
    }
    /// <p>The start date for the Scheduled Instance.</p>
    pub fn term_start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.term_start_date = Some(input);
        self
    }
    /// <p>The start date for the Scheduled Instance.</p>
    pub fn set_term_start_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.term_start_date = input;
        self
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn total_scheduled_instance_hours(mut self, input: i32) -> Self {
        self.total_scheduled_instance_hours = Some(input);
        self
    }
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub fn set_total_scheduled_instance_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.total_scheduled_instance_hours = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduledInstance`](crate::types::ScheduledInstance).
    pub fn build(self) -> crate::types::ScheduledInstance {
        crate::types::ScheduledInstance {
            availability_zone: self.availability_zone,
            create_date: self.create_date,
            hourly_price: self.hourly_price,
            instance_count: self.instance_count,
            instance_type: self.instance_type,
            network_platform: self.network_platform,
            next_slot_start_time: self.next_slot_start_time,
            platform: self.platform,
            previous_slot_end_time: self.previous_slot_end_time,
            recurrence: self.recurrence,
            scheduled_instance_id: self.scheduled_instance_id,
            slot_duration_in_hours: self.slot_duration_in_hours,
            term_end_date: self.term_end_date,
            term_start_date: self.term_start_date,
            total_scheduled_instance_hours: self.total_scheduled_instance_hours,
        }
    }
}
