// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a disk image.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DiskImageDetail {
    /// <p>The size of the disk image, in GiB.</p>
    #[doc(hidden)]
    pub bytes: std::option::Option<i64>,
    /// <p>The disk image format.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::DiskImageFormat>,
    /// <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    /// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    #[doc(hidden)]
    pub import_manifest_url: std::option::Option<std::string::String>,
}
impl DiskImageDetail {
    /// <p>The size of the disk image, in GiB.</p>
    pub fn bytes(&self) -> std::option::Option<i64> {
        self.bytes
    }
    /// <p>The disk image format.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::DiskImageFormat> {
        self.format.as_ref()
    }
    /// <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    /// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    pub fn import_manifest_url(&self) -> std::option::Option<&str> {
        self.import_manifest_url.as_deref()
    }
}
impl DiskImageDetail {
    /// Creates a new builder-style object to manufacture [`DiskImageDetail`](crate::types::DiskImageDetail).
    pub fn builder() -> crate::types::builders::DiskImageDetailBuilder {
        crate::types::builders::DiskImageDetailBuilder::default()
    }
}

/// A builder for [`DiskImageDetail`](crate::types::DiskImageDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DiskImageDetailBuilder {
    pub(crate) bytes: std::option::Option<i64>,
    pub(crate) format: std::option::Option<crate::types::DiskImageFormat>,
    pub(crate) import_manifest_url: std::option::Option<std::string::String>,
}
impl DiskImageDetailBuilder {
    /// <p>The size of the disk image, in GiB.</p>
    pub fn bytes(mut self, input: i64) -> Self {
        self.bytes = Some(input);
        self
    }
    /// <p>The size of the disk image, in GiB.</p>
    pub fn set_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes = input;
        self
    }
    /// <p>The disk image format.</p>
    pub fn format(mut self, input: crate::types::DiskImageFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The disk image format.</p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::DiskImageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    /// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    pub fn import_manifest_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.import_manifest_url = Some(input.into());
        self
    }
    /// <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
    /// <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    pub fn set_import_manifest_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.import_manifest_url = input;
        self
    }
    /// Consumes the builder and constructs a [`DiskImageDetail`](crate::types::DiskImageDetail).
    pub fn build(self) -> crate::types::DiskImageDetail {
        crate::types::DiskImageDetail {
            bytes: self.bytes,
            format: self.format,
            import_manifest_url: self.import_manifest_url,
        }
    }
}
