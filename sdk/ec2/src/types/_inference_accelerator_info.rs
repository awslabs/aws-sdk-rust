// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Inference accelerators for the instance type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InferenceAcceleratorInfo {
    /// <p>Describes the Inference accelerators for the instance type.</p>
    #[doc(hidden)]
    pub accelerators: std::option::Option<std::vec::Vec<crate::types::InferenceDeviceInfo>>,
}
impl InferenceAcceleratorInfo {
    /// <p>Describes the Inference accelerators for the instance type.</p>
    pub fn accelerators(&self) -> std::option::Option<&[crate::types::InferenceDeviceInfo]> {
        self.accelerators.as_deref()
    }
}
impl InferenceAcceleratorInfo {
    /// Creates a new builder-style object to manufacture [`InferenceAcceleratorInfo`](crate::types::InferenceAcceleratorInfo).
    pub fn builder() -> crate::types::builders::InferenceAcceleratorInfoBuilder {
        crate::types::builders::InferenceAcceleratorInfoBuilder::default()
    }
}

/// A builder for [`InferenceAcceleratorInfo`](crate::types::InferenceAcceleratorInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InferenceAcceleratorInfoBuilder {
    pub(crate) accelerators: std::option::Option<std::vec::Vec<crate::types::InferenceDeviceInfo>>,
}
impl InferenceAcceleratorInfoBuilder {
    /// Appends an item to `accelerators`.
    ///
    /// To override the contents of this collection use [`set_accelerators`](Self::set_accelerators).
    ///
    /// <p>Describes the Inference accelerators for the instance type.</p>
    pub fn accelerators(mut self, input: crate::types::InferenceDeviceInfo) -> Self {
        let mut v = self.accelerators.unwrap_or_default();
        v.push(input);
        self.accelerators = Some(v);
        self
    }
    /// <p>Describes the Inference accelerators for the instance type.</p>
    pub fn set_accelerators(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InferenceDeviceInfo>>,
    ) -> Self {
        self.accelerators = input;
        self
    }
    /// Consumes the builder and constructs a [`InferenceAcceleratorInfo`](crate::types::InferenceAcceleratorInfo).
    pub fn build(self) -> crate::types::InferenceAcceleratorInfo {
        crate::types::InferenceAcceleratorInfo {
            accelerators: self.accelerators,
        }
    }
}
