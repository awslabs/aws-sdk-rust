// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an association between a subnet and an IPv6 CIDR block.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubnetIpv6CidrBlockAssociation {
    /// <p>The ID of the association.</p>
    #[doc(hidden)]
    pub association_id: std::option::Option<std::string::String>,
    /// <p>The IPv6 CIDR block.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block: std::option::Option<std::string::String>,
    /// <p>The state of the CIDR block.</p>
    #[doc(hidden)]
    pub ipv6_cidr_block_state: std::option::Option<crate::types::SubnetCidrBlockState>,
}
impl SubnetIpv6CidrBlockAssociation {
    /// <p>The ID of the association.</p>
    pub fn association_id(&self) -> std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The IPv6 CIDR block.</p>
    pub fn ipv6_cidr_block(&self) -> std::option::Option<&str> {
        self.ipv6_cidr_block.as_deref()
    }
    /// <p>The state of the CIDR block.</p>
    pub fn ipv6_cidr_block_state(
        &self,
    ) -> std::option::Option<&crate::types::SubnetCidrBlockState> {
        self.ipv6_cidr_block_state.as_ref()
    }
}
impl SubnetIpv6CidrBlockAssociation {
    /// Creates a new builder-style object to manufacture [`SubnetIpv6CidrBlockAssociation`](crate::types::SubnetIpv6CidrBlockAssociation).
    pub fn builder() -> crate::types::builders::SubnetIpv6CidrBlockAssociationBuilder {
        crate::types::builders::SubnetIpv6CidrBlockAssociationBuilder::default()
    }
}

/// A builder for [`SubnetIpv6CidrBlockAssociation`](crate::types::SubnetIpv6CidrBlockAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubnetIpv6CidrBlockAssociationBuilder {
    pub(crate) association_id: std::option::Option<std::string::String>,
    pub(crate) ipv6_cidr_block: std::option::Option<std::string::String>,
    pub(crate) ipv6_cidr_block_state: std::option::Option<crate::types::SubnetCidrBlockState>,
}
impl SubnetIpv6CidrBlockAssociationBuilder {
    /// <p>The ID of the association.</p>
    pub fn association_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.association_id = Some(input.into());
        self
    }
    /// <p>The ID of the association.</p>
    pub fn set_association_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The IPv6 CIDR block.</p>
    pub fn ipv6_cidr_block(mut self, input: impl Into<std::string::String>) -> Self {
        self.ipv6_cidr_block = Some(input.into());
        self
    }
    /// <p>The IPv6 CIDR block.</p>
    pub fn set_ipv6_cidr_block(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ipv6_cidr_block = input;
        self
    }
    /// <p>The state of the CIDR block.</p>
    pub fn ipv6_cidr_block_state(mut self, input: crate::types::SubnetCidrBlockState) -> Self {
        self.ipv6_cidr_block_state = Some(input);
        self
    }
    /// <p>The state of the CIDR block.</p>
    pub fn set_ipv6_cidr_block_state(
        mut self,
        input: std::option::Option<crate::types::SubnetCidrBlockState>,
    ) -> Self {
        self.ipv6_cidr_block_state = input;
        self
    }
    /// Consumes the builder and constructs a [`SubnetIpv6CidrBlockAssociation`](crate::types::SubnetIpv6CidrBlockAssociation).
    pub fn build(self) -> crate::types::SubnetIpv6CidrBlockAssociation {
        crate::types::SubnetIpv6CidrBlockAssociation {
            association_id: self.association_id,
            ipv6_cidr_block: self.ipv6_cidr_block,
            ipv6_cidr_block_state: self.ipv6_cidr_block_state,
        }
    }
}
