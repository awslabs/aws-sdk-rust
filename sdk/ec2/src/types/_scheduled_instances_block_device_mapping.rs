// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a block device mapping for a Scheduled Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduledInstancesBlockDeviceMapping {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
    #[doc(hidden)]
    pub ebs: std::option::Option<crate::types::ScheduledInstancesEbs>,
    /// <p>To omit the device from the block device mapping, specify an empty string.</p>
    #[doc(hidden)]
    pub no_device: std::option::Option<std::string::String>,
    /// <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p>
    /// <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
    #[doc(hidden)]
    pub virtual_name: std::option::Option<std::string::String>,
}
impl ScheduledInstancesBlockDeviceMapping {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
    pub fn ebs(&self) -> std::option::Option<&crate::types::ScheduledInstancesEbs> {
        self.ebs.as_ref()
    }
    /// <p>To omit the device from the block device mapping, specify an empty string.</p>
    pub fn no_device(&self) -> std::option::Option<&str> {
        self.no_device.as_deref()
    }
    /// <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p>
    /// <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
    pub fn virtual_name(&self) -> std::option::Option<&str> {
        self.virtual_name.as_deref()
    }
}
impl ScheduledInstancesBlockDeviceMapping {
    /// Creates a new builder-style object to manufacture [`ScheduledInstancesBlockDeviceMapping`](crate::types::ScheduledInstancesBlockDeviceMapping).
    pub fn builder() -> crate::types::builders::ScheduledInstancesBlockDeviceMappingBuilder {
        crate::types::builders::ScheduledInstancesBlockDeviceMappingBuilder::default()
    }
}

/// A builder for [`ScheduledInstancesBlockDeviceMapping`](crate::types::ScheduledInstancesBlockDeviceMapping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduledInstancesBlockDeviceMappingBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) ebs: std::option::Option<crate::types::ScheduledInstancesEbs>,
    pub(crate) no_device: std::option::Option<std::string::String>,
    pub(crate) virtual_name: std::option::Option<std::string::String>,
}
impl ScheduledInstancesBlockDeviceMappingBuilder {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
    pub fn ebs(mut self, input: crate::types::ScheduledInstancesEbs) -> Self {
        self.ebs = Some(input);
        self
    }
    /// <p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
    pub fn set_ebs(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstancesEbs>,
    ) -> Self {
        self.ebs = input;
        self
    }
    /// <p>To omit the device from the block device mapping, specify an empty string.</p>
    pub fn no_device(mut self, input: impl Into<std::string::String>) -> Self {
        self.no_device = Some(input.into());
        self
    }
    /// <p>To omit the device from the block device mapping, specify an empty string.</p>
    pub fn set_no_device(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.no_device = input;
        self
    }
    /// <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p>
    /// <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
    pub fn virtual_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_name = Some(input.into());
        self
    }
    /// <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p>
    /// <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
    pub fn set_virtual_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.virtual_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduledInstancesBlockDeviceMapping`](crate::types::ScheduledInstancesBlockDeviceMapping).
    pub fn build(self) -> crate::types::ScheduledInstancesBlockDeviceMapping {
        crate::types::ScheduledInstancesBlockDeviceMapping {
            device_name: self.device_name,
            ebs: self.ebs,
            no_device: self.no_device,
            virtual_name: self.virtual_name,
        }
    }
}
