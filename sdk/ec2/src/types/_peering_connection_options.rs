// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// </note>
/// <p>Describes the VPC peering connection options.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PeeringConnectionOptions {
    /// <p>If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.</p>
    #[doc(hidden)]
    pub allow_dns_resolution_from_remote_vpc: std::option::Option<bool>,
    /// <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.</p>
    #[doc(hidden)]
    pub allow_egress_from_local_classic_link_to_remote_vpc: std::option::Option<bool>,
    /// <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>
    #[doc(hidden)]
    pub allow_egress_from_local_vpc_to_remote_classic_link: std::option::Option<bool>,
}
impl PeeringConnectionOptions {
    /// <p>If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn allow_dns_resolution_from_remote_vpc(&self) -> std::option::Option<bool> {
        self.allow_dns_resolution_from_remote_vpc
    }
    /// <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.</p>
    pub fn allow_egress_from_local_classic_link_to_remote_vpc(&self) -> std::option::Option<bool> {
        self.allow_egress_from_local_classic_link_to_remote_vpc
    }
    /// <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>
    pub fn allow_egress_from_local_vpc_to_remote_classic_link(&self) -> std::option::Option<bool> {
        self.allow_egress_from_local_vpc_to_remote_classic_link
    }
}
impl PeeringConnectionOptions {
    /// Creates a new builder-style object to manufacture [`PeeringConnectionOptions`](crate::types::PeeringConnectionOptions).
    pub fn builder() -> crate::types::builders::PeeringConnectionOptionsBuilder {
        crate::types::builders::PeeringConnectionOptionsBuilder::default()
    }
}

/// A builder for [`PeeringConnectionOptions`](crate::types::PeeringConnectionOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PeeringConnectionOptionsBuilder {
    pub(crate) allow_dns_resolution_from_remote_vpc: std::option::Option<bool>,
    pub(crate) allow_egress_from_local_classic_link_to_remote_vpc: std::option::Option<bool>,
    pub(crate) allow_egress_from_local_vpc_to_remote_classic_link: std::option::Option<bool>,
}
impl PeeringConnectionOptionsBuilder {
    /// <p>If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn allow_dns_resolution_from_remote_vpc(mut self, input: bool) -> Self {
        self.allow_dns_resolution_from_remote_vpc = Some(input);
        self
    }
    /// <p>If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.</p>
    pub fn set_allow_dns_resolution_from_remote_vpc(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_dns_resolution_from_remote_vpc = input;
        self
    }
    /// <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.</p>
    pub fn allow_egress_from_local_classic_link_to_remote_vpc(mut self, input: bool) -> Self {
        self.allow_egress_from_local_classic_link_to_remote_vpc = Some(input);
        self
    }
    /// <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.</p>
    pub fn set_allow_egress_from_local_classic_link_to_remote_vpc(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_egress_from_local_classic_link_to_remote_vpc = input;
        self
    }
    /// <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>
    pub fn allow_egress_from_local_vpc_to_remote_classic_link(mut self, input: bool) -> Self {
        self.allow_egress_from_local_vpc_to_remote_classic_link = Some(input);
        self
    }
    /// <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>
    pub fn set_allow_egress_from_local_vpc_to_remote_classic_link(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allow_egress_from_local_vpc_to_remote_classic_link = input;
        self
    }
    /// Consumes the builder and constructs a [`PeeringConnectionOptions`](crate::types::PeeringConnectionOptions).
    pub fn build(self) -> crate::types::PeeringConnectionOptions {
        crate::types::PeeringConnectionOptions {
            allow_dns_resolution_from_remote_vpc: self.allow_dns_resolution_from_remote_vpc,
            allow_egress_from_local_classic_link_to_remote_vpc: self
                .allow_egress_from_local_classic_link_to_remote_vpc,
            allow_egress_from_local_vpc_to_remote_classic_link: self
                .allow_egress_from_local_vpc_to_remote_classic_link,
        }
    }
}
