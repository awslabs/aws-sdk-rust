// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The event window.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceEventWindow {
    /// <p>The ID of the event window.</p>
    #[doc(hidden)]
    pub instance_event_window_id: std::option::Option<std::string::String>,
    /// <p>One or more time ranges defined for the event window.</p>
    #[doc(hidden)]
    pub time_ranges: std::option::Option<std::vec::Vec<crate::types::InstanceEventWindowTimeRange>>,
    /// <p>The name of the event window.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The cron expression defined for the event window.</p>
    #[doc(hidden)]
    pub cron_expression: std::option::Option<std::string::String>,
    /// <p>One or more targets associated with the event window.</p>
    #[doc(hidden)]
    pub association_target: std::option::Option<crate::types::InstanceEventWindowAssociationTarget>,
    /// <p>The current state of the event window.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::InstanceEventWindowState>,
    /// <p>The instance tags associated with the event window.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl InstanceEventWindow {
    /// <p>The ID of the event window.</p>
    pub fn instance_event_window_id(&self) -> std::option::Option<&str> {
        self.instance_event_window_id.as_deref()
    }
    /// <p>One or more time ranges defined for the event window.</p>
    pub fn time_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::InstanceEventWindowTimeRange]> {
        self.time_ranges.as_deref()
    }
    /// <p>The name of the event window.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The cron expression defined for the event window.</p>
    pub fn cron_expression(&self) -> std::option::Option<&str> {
        self.cron_expression.as_deref()
    }
    /// <p>One or more targets associated with the event window.</p>
    pub fn association_target(
        &self,
    ) -> std::option::Option<&crate::types::InstanceEventWindowAssociationTarget> {
        self.association_target.as_ref()
    }
    /// <p>The current state of the event window.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::InstanceEventWindowState> {
        self.state.as_ref()
    }
    /// <p>The instance tags associated with the event window.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl InstanceEventWindow {
    /// Creates a new builder-style object to manufacture [`InstanceEventWindow`](crate::types::InstanceEventWindow).
    pub fn builder() -> crate::types::builders::InstanceEventWindowBuilder {
        crate::types::builders::InstanceEventWindowBuilder::default()
    }
}

/// A builder for [`InstanceEventWindow`](crate::types::InstanceEventWindow).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceEventWindowBuilder {
    pub(crate) instance_event_window_id: std::option::Option<std::string::String>,
    pub(crate) time_ranges:
        std::option::Option<std::vec::Vec<crate::types::InstanceEventWindowTimeRange>>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) cron_expression: std::option::Option<std::string::String>,
    pub(crate) association_target:
        std::option::Option<crate::types::InstanceEventWindowAssociationTarget>,
    pub(crate) state: std::option::Option<crate::types::InstanceEventWindowState>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl InstanceEventWindowBuilder {
    /// <p>The ID of the event window.</p>
    pub fn instance_event_window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_event_window_id = Some(input.into());
        self
    }
    /// <p>The ID of the event window.</p>
    pub fn set_instance_event_window_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_event_window_id = input;
        self
    }
    /// Appends an item to `time_ranges`.
    ///
    /// To override the contents of this collection use [`set_time_ranges`](Self::set_time_ranges).
    ///
    /// <p>One or more time ranges defined for the event window.</p>
    pub fn time_ranges(mut self, input: crate::types::InstanceEventWindowTimeRange) -> Self {
        let mut v = self.time_ranges.unwrap_or_default();
        v.push(input);
        self.time_ranges = Some(v);
        self
    }
    /// <p>One or more time ranges defined for the event window.</p>
    pub fn set_time_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceEventWindowTimeRange>>,
    ) -> Self {
        self.time_ranges = input;
        self
    }
    /// <p>The name of the event window.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the event window.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The cron expression defined for the event window.</p>
    pub fn cron_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.cron_expression = Some(input.into());
        self
    }
    /// <p>The cron expression defined for the event window.</p>
    pub fn set_cron_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cron_expression = input;
        self
    }
    /// <p>One or more targets associated with the event window.</p>
    pub fn association_target(
        mut self,
        input: crate::types::InstanceEventWindowAssociationTarget,
    ) -> Self {
        self.association_target = Some(input);
        self
    }
    /// <p>One or more targets associated with the event window.</p>
    pub fn set_association_target(
        mut self,
        input: std::option::Option<crate::types::InstanceEventWindowAssociationTarget>,
    ) -> Self {
        self.association_target = input;
        self
    }
    /// <p>The current state of the event window.</p>
    pub fn state(mut self, input: crate::types::InstanceEventWindowState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The current state of the event window.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::InstanceEventWindowState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The instance tags associated with the event window.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The instance tags associated with the event window.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceEventWindow`](crate::types::InstanceEventWindow).
    pub fn build(self) -> crate::types::InstanceEventWindow {
        crate::types::InstanceEventWindow {
            instance_event_window_id: self.instance_event_window_id,
            time_ranges: self.time_ranges,
            name: self.name,
            cron_expression: self.cron_expression,
            association_target: self.association_target,
            state: self.state,
            tags: self.tags,
        }
    }
}
