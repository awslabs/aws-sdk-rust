// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a route table route.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalysisRouteTableRoute {
    /// <p>The destination IPv4 address, in CIDR notation.</p>
    #[doc(hidden)]
    pub destination_cidr: std::option::Option<std::string::String>,
    /// <p>The prefix of the Amazon Web Service.</p>
    #[doc(hidden)]
    pub destination_prefix_list_id: std::option::Option<std::string::String>,
    /// <p>The ID of an egress-only internet gateway.</p>
    #[doc(hidden)]
    pub egress_only_internet_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the gateway, such as an internet gateway or virtual private gateway.</p>
    #[doc(hidden)]
    pub gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the instance, such as a NAT instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The ID of a NAT gateway.</p>
    #[doc(hidden)]
    pub nat_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of a network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>Describes how the route was created. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>CreateRouteTable - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p>CreateRoute - The route was manually added to the route table.</p> </li>
    /// <li> <p>EnableVgwRoutePropagation - The route was propagated by route propagation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub origin: std::option::Option<std::string::String>,
    /// <p>The ID of a transit gateway.</p>
    #[doc(hidden)]
    pub transit_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of a VPC peering connection.</p>
    #[doc(hidden)]
    pub vpc_peering_connection_id: std::option::Option<std::string::String>,
    /// <p>The state. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>active</p> </li>
    /// <li> <p>blackhole</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
}
impl AnalysisRouteTableRoute {
    /// <p>The destination IPv4 address, in CIDR notation.</p>
    pub fn destination_cidr(&self) -> std::option::Option<&str> {
        self.destination_cidr.as_deref()
    }
    /// <p>The prefix of the Amazon Web Service.</p>
    pub fn destination_prefix_list_id(&self) -> std::option::Option<&str> {
        self.destination_prefix_list_id.as_deref()
    }
    /// <p>The ID of an egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway_id(&self) -> std::option::Option<&str> {
        self.egress_only_internet_gateway_id.as_deref()
    }
    /// <p>The ID of the gateway, such as an internet gateway or virtual private gateway.</p>
    pub fn gateway_id(&self) -> std::option::Option<&str> {
        self.gateway_id.as_deref()
    }
    /// <p>The ID of the instance, such as a NAT instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The ID of a NAT gateway.</p>
    pub fn nat_gateway_id(&self) -> std::option::Option<&str> {
        self.nat_gateway_id.as_deref()
    }
    /// <p>The ID of a network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>Describes how the route was created. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>CreateRouteTable - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p>CreateRoute - The route was manually added to the route table.</p> </li>
    /// <li> <p>EnableVgwRoutePropagation - The route was propagated by route propagation.</p> </li>
    /// </ul>
    pub fn origin(&self) -> std::option::Option<&str> {
        self.origin.as_deref()
    }
    /// <p>The ID of a transit gateway.</p>
    pub fn transit_gateway_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
    /// <p>The ID of a VPC peering connection.</p>
    pub fn vpc_peering_connection_id(&self) -> std::option::Option<&str> {
        self.vpc_peering_connection_id.as_deref()
    }
    /// <p>The state. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>active</p> </li>
    /// <li> <p>blackhole</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl AnalysisRouteTableRoute {
    /// Creates a new builder-style object to manufacture [`AnalysisRouteTableRoute`](crate::types::AnalysisRouteTableRoute).
    pub fn builder() -> crate::types::builders::AnalysisRouteTableRouteBuilder {
        crate::types::builders::AnalysisRouteTableRouteBuilder::default()
    }
}

/// A builder for [`AnalysisRouteTableRoute`](crate::types::AnalysisRouteTableRoute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalysisRouteTableRouteBuilder {
    pub(crate) destination_cidr: std::option::Option<std::string::String>,
    pub(crate) destination_prefix_list_id: std::option::Option<std::string::String>,
    pub(crate) egress_only_internet_gateway_id: std::option::Option<std::string::String>,
    pub(crate) gateway_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) nat_gateway_id: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) origin: std::option::Option<std::string::String>,
    pub(crate) transit_gateway_id: std::option::Option<std::string::String>,
    pub(crate) vpc_peering_connection_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
}
impl AnalysisRouteTableRouteBuilder {
    /// <p>The destination IPv4 address, in CIDR notation.</p>
    pub fn destination_cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_cidr = Some(input.into());
        self
    }
    /// <p>The destination IPv4 address, in CIDR notation.</p>
    pub fn set_destination_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_cidr = input;
        self
    }
    /// <p>The prefix of the Amazon Web Service.</p>
    pub fn destination_prefix_list_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_prefix_list_id = Some(input.into());
        self
    }
    /// <p>The prefix of the Amazon Web Service.</p>
    pub fn set_destination_prefix_list_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_prefix_list_id = input;
        self
    }
    /// <p>The ID of an egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.egress_only_internet_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of an egress-only internet gateway.</p>
    pub fn set_egress_only_internet_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.egress_only_internet_gateway_id = input;
        self
    }
    /// <p>The ID of the gateway, such as an internet gateway or virtual private gateway.</p>
    pub fn gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the gateway, such as an internet gateway or virtual private gateway.</p>
    pub fn set_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The ID of the instance, such as a NAT instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the instance, such as a NAT instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of a NAT gateway.</p>
    pub fn nat_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.nat_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of a NAT gateway.</p>
    pub fn set_nat_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.nat_gateway_id = input;
        self
    }
    /// <p>The ID of a network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of a network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>Describes how the route was created. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>CreateRouteTable - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p>CreateRoute - The route was manually added to the route table.</p> </li>
    /// <li> <p>EnableVgwRoutePropagation - The route was propagated by route propagation.</p> </li>
    /// </ul>
    pub fn origin(mut self, input: impl Into<std::string::String>) -> Self {
        self.origin = Some(input.into());
        self
    }
    /// <p>Describes how the route was created. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>CreateRouteTable - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p>CreateRoute - The route was manually added to the route table.</p> </li>
    /// <li> <p>EnableVgwRoutePropagation - The route was propagated by route propagation.</p> </li>
    /// </ul>
    pub fn set_origin(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The ID of a transit gateway.</p>
    pub fn transit_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of a transit gateway.</p>
    pub fn set_transit_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p>The ID of a VPC peering connection.</p>
    pub fn vpc_peering_connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_peering_connection_id = Some(input.into());
        self
    }
    /// <p>The ID of a VPC peering connection.</p>
    pub fn set_vpc_peering_connection_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_peering_connection_id = input;
        self
    }
    /// <p>The state. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>active</p> </li>
    /// <li> <p>blackhole</p> </li>
    /// </ul>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>active</p> </li>
    /// <li> <p>blackhole</p> </li>
    /// </ul>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalysisRouteTableRoute`](crate::types::AnalysisRouteTableRoute).
    pub fn build(self) -> crate::types::AnalysisRouteTableRoute {
        crate::types::AnalysisRouteTableRoute {
            destination_cidr: self.destination_cidr,
            destination_prefix_list_id: self.destination_prefix_list_id,
            egress_only_internet_gateway_id: self.egress_only_internet_gateway_id,
            gateway_id: self.gateway_id,
            instance_id: self.instance_id,
            nat_gateway_id: self.nat_gateway_id,
            network_interface_id: self.network_interface_id,
            origin: self.origin,
            transit_gateway_id: self.transit_gateway_id,
            vpc_peering_connection_id: self.vpc_peering_connection_id,
            state: self.state,
        }
    }
}
