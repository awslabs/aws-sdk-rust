// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an address range that is provisioned for use with your Amazon Web Services resources through bring your own IP addresses (BYOIP).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ByoipCidr {
    /// <p>The address range, in CIDR notation.</p>
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
    /// <p>The description of the address range.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Upon success, contains the ID of the address pool. Otherwise, contains an error message.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The state of the address pool.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ByoipCidrState>,
}
impl ByoipCidr {
    /// <p>The address range, in CIDR notation.</p>
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>The description of the address range.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Upon success, contains the ID of the address pool. Otherwise, contains an error message.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The state of the address pool.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ByoipCidrState> {
        self.state.as_ref()
    }
}
impl ByoipCidr {
    /// Creates a new builder-style object to manufacture [`ByoipCidr`](crate::types::ByoipCidr).
    pub fn builder() -> crate::types::builders::ByoipCidrBuilder {
        crate::types::builders::ByoipCidrBuilder::default()
    }
}

/// A builder for [`ByoipCidr`](crate::types::ByoipCidr).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ByoipCidrBuilder {
    pub(crate) cidr: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ByoipCidrState>,
}
impl ByoipCidrBuilder {
    /// <p>The address range, in CIDR notation.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// <p>The address range, in CIDR notation.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The description of the address range.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the address range.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Upon success, contains the ID of the address pool. Otherwise, contains an error message.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>Upon success, contains the ID of the address pool. Otherwise, contains an error message.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The state of the address pool.</p>
    pub fn state(mut self, input: crate::types::ByoipCidrState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the address pool.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ByoipCidrState>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`ByoipCidr`](crate::types::ByoipCidr).
    pub fn build(self) -> crate::types::ByoipCidr {
        crate::types::ByoipCidr {
            cidr: self.cidr,
            description: self.description,
            status_message: self.status_message,
            state: self.state,
        }
    }
}
