// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an IPAM prefix list resolver target.</p>
/// <p>An IPAM prefix list resolver target is an association between a specific customer-managed prefix list and an IPAM prefix list resolver. The target enables the resolver to synchronize CIDRs selected by its rules into the specified prefix list, which can then be referenced in Amazon Web Services resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPrefixListResolverTarget {
    /// <p>The ID of the IPAM prefix list resolver target.</p>
    pub ipam_prefix_list_resolver_target_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver target.</p>
    pub ipam_prefix_list_resolver_target_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the IPAM prefix list resolver associated with this target.</p>
    pub ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver target.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the managed prefix list associated with this target.</p>
    pub prefix_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the prefix list associated with this target is located.</p>
    pub prefix_list_region: ::std::option::Option<::std::string::String>,
    /// <p>The desired version of the prefix list that this target should synchronize with.</p>
    pub desired_version: ::std::option::Option<i64>,
    /// <p>The version of the prefix list that was last successfully synchronized by this target.</p>
    pub last_synced_version: ::std::option::Option<i64>,
    /// <p>Indicates whether this target automatically tracks the latest version of the prefix list.</p>
    pub track_latest_version: ::std::option::Option<bool>,
    /// <p>A message describing the current state of the IPAM prefix list resolver target, including any error information.</p>
    pub state_message: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the IPAM prefix list resolver target. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub state: ::std::option::Option<crate::types::IpamPrefixListResolverTargetState>,
    /// <p>The tags assigned to the IPAM prefix list resolver target.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl IpamPrefixListResolverTarget {
    /// <p>The ID of the IPAM prefix list resolver target.</p>
    pub fn ipam_prefix_list_resolver_target_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_target_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver target.</p>
    pub fn ipam_prefix_list_resolver_target_arn(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_target_arn.as_deref()
    }
    /// <p>The ID of the IPAM prefix list resolver associated with this target.</p>
    pub fn ipam_prefix_list_resolver_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver target.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The ID of the managed prefix list associated with this target.</p>
    pub fn prefix_list_id(&self) -> ::std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The Amazon Web Services Region where the prefix list associated with this target is located.</p>
    pub fn prefix_list_region(&self) -> ::std::option::Option<&str> {
        self.prefix_list_region.as_deref()
    }
    /// <p>The desired version of the prefix list that this target should synchronize with.</p>
    pub fn desired_version(&self) -> ::std::option::Option<i64> {
        self.desired_version
    }
    /// <p>The version of the prefix list that was last successfully synchronized by this target.</p>
    pub fn last_synced_version(&self) -> ::std::option::Option<i64> {
        self.last_synced_version
    }
    /// <p>Indicates whether this target automatically tracks the latest version of the prefix list.</p>
    pub fn track_latest_version(&self) -> ::std::option::Option<bool> {
        self.track_latest_version
    }
    /// <p>A message describing the current state of the IPAM prefix list resolver target, including any error information.</p>
    pub fn state_message(&self) -> ::std::option::Option<&str> {
        self.state_message.as_deref()
    }
    /// <p>The current state of the IPAM prefix list resolver target. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::IpamPrefixListResolverTargetState> {
        self.state.as_ref()
    }
    /// <p>The tags assigned to the IPAM prefix list resolver target.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl IpamPrefixListResolverTarget {
    /// Creates a new builder-style object to manufacture [`IpamPrefixListResolverTarget`](crate::types::IpamPrefixListResolverTarget).
    pub fn builder() -> crate::types::builders::IpamPrefixListResolverTargetBuilder {
        crate::types::builders::IpamPrefixListResolverTargetBuilder::default()
    }
}

/// A builder for [`IpamPrefixListResolverTarget`](crate::types::IpamPrefixListResolverTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IpamPrefixListResolverTargetBuilder {
    pub(crate) ipam_prefix_list_resolver_target_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_prefix_list_resolver_target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) prefix_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) prefix_list_region: ::std::option::Option<::std::string::String>,
    pub(crate) desired_version: ::std::option::Option<i64>,
    pub(crate) last_synced_version: ::std::option::Option<i64>,
    pub(crate) track_latest_version: ::std::option::Option<bool>,
    pub(crate) state_message: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::IpamPrefixListResolverTargetState>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl IpamPrefixListResolverTargetBuilder {
    /// <p>The ID of the IPAM prefix list resolver target.</p>
    pub fn ipam_prefix_list_resolver_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target.</p>
    pub fn set_ipam_prefix_list_resolver_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_target_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target.</p>
    pub fn get_ipam_prefix_list_resolver_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_target_id
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver target.</p>
    pub fn ipam_prefix_list_resolver_target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver target.</p>
    pub fn set_ipam_prefix_list_resolver_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_target_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver target.</p>
    pub fn get_ipam_prefix_list_resolver_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_target_arn
    }
    /// <p>The ID of the IPAM prefix list resolver associated with this target.</p>
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver associated with this target.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver associated with this target.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_id
    }
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver target.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver target.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver target.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The ID of the managed prefix list associated with this target.</p>
    pub fn prefix_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed prefix list associated with this target.</p>
    pub fn set_prefix_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the managed prefix list associated with this target.</p>
    pub fn get_prefix_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_id
    }
    /// <p>The Amazon Web Services Region where the prefix list associated with this target is located.</p>
    pub fn prefix_list_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the prefix list associated with this target is located.</p>
    pub fn set_prefix_list_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the prefix list associated with this target is located.</p>
    pub fn get_prefix_list_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_region
    }
    /// <p>The desired version of the prefix list that this target should synchronize with.</p>
    pub fn desired_version(mut self, input: i64) -> Self {
        self.desired_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired version of the prefix list that this target should synchronize with.</p>
    pub fn set_desired_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.desired_version = input;
        self
    }
    /// <p>The desired version of the prefix list that this target should synchronize with.</p>
    pub fn get_desired_version(&self) -> &::std::option::Option<i64> {
        &self.desired_version
    }
    /// <p>The version of the prefix list that was last successfully synchronized by this target.</p>
    pub fn last_synced_version(mut self, input: i64) -> Self {
        self.last_synced_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the prefix list that was last successfully synchronized by this target.</p>
    pub fn set_last_synced_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_synced_version = input;
        self
    }
    /// <p>The version of the prefix list that was last successfully synchronized by this target.</p>
    pub fn get_last_synced_version(&self) -> &::std::option::Option<i64> {
        &self.last_synced_version
    }
    /// <p>Indicates whether this target automatically tracks the latest version of the prefix list.</p>
    pub fn track_latest_version(mut self, input: bool) -> Self {
        self.track_latest_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this target automatically tracks the latest version of the prefix list.</p>
    pub fn set_track_latest_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.track_latest_version = input;
        self
    }
    /// <p>Indicates whether this target automatically tracks the latest version of the prefix list.</p>
    pub fn get_track_latest_version(&self) -> &::std::option::Option<bool> {
        &self.track_latest_version
    }
    /// <p>A message describing the current state of the IPAM prefix list resolver target, including any error information.</p>
    pub fn state_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the current state of the IPAM prefix list resolver target, including any error information.</p>
    pub fn set_state_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_message = input;
        self
    }
    /// <p>A message describing the current state of the IPAM prefix list resolver target, including any error information.</p>
    pub fn get_state_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_message
    }
    /// <p>The current state of the IPAM prefix list resolver target. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn state(mut self, input: crate::types::IpamPrefixListResolverTargetState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the IPAM prefix list resolver target. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::IpamPrefixListResolverTargetState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the IPAM prefix list resolver target. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::IpamPrefixListResolverTargetState> {
        &self.state
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the IPAM prefix list resolver target.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the IPAM prefix list resolver target.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the IPAM prefix list resolver target.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`IpamPrefixListResolverTarget`](crate::types::IpamPrefixListResolverTarget).
    pub fn build(self) -> crate::types::IpamPrefixListResolverTarget {
        crate::types::IpamPrefixListResolverTarget {
            ipam_prefix_list_resolver_target_id: self.ipam_prefix_list_resolver_target_id,
            ipam_prefix_list_resolver_target_arn: self.ipam_prefix_list_resolver_target_arn,
            ipam_prefix_list_resolver_id: self.ipam_prefix_list_resolver_id,
            owner_id: self.owner_id,
            prefix_list_id: self.prefix_list_id,
            prefix_list_region: self.prefix_list_region,
            desired_version: self.desired_version,
            last_synced_version: self.last_synced_version,
            track_latest_version: self.track_latest_version,
            state_message: self.state_message,
            state: self.state,
            tags: self.tags,
        }
    }
}
