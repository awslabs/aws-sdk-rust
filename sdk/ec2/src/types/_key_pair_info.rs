// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a key pair.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyPairInfo {
    /// <p>The ID of the key pair.</p>
    pub key_pair_id: ::std::option::Option<::std::string::String>,
    /// <p>If you used <code>CreateKeyPair</code> to create the key pair:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    /// <p>If you used <code>ImportKeyPair</code> to provide Amazon Web Services the public key:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    pub key_fingerprint: ::std::option::Option<::std::string::String>,
    /// <p>The name of the key pair.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of key pair.</p>
    pub key_type: ::std::option::Option<crate::types::KeyType>,
    /// <p>Any tags applied to the key pair.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The public key material.</p>
    pub public_key: ::std::option::Option<::std::string::String>,
    /// <p>If you used Amazon EC2 to create the key pair, this is the date and time when the key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    /// <p>If you imported an existing key pair to Amazon EC2, this is the date and time the key was imported, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KeyPairInfo {
    /// <p>The ID of the key pair.</p>
    pub fn key_pair_id(&self) -> ::std::option::Option<&str> {
        self.key_pair_id.as_deref()
    }
    /// <p>If you used <code>CreateKeyPair</code> to create the key pair:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    /// <p>If you used <code>ImportKeyPair</code> to provide Amazon Web Services the public key:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    pub fn key_fingerprint(&self) -> ::std::option::Option<&str> {
        self.key_fingerprint.as_deref()
    }
    /// <p>The name of the key pair.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The type of key pair.</p>
    pub fn key_type(&self) -> ::std::option::Option<&crate::types::KeyType> {
        self.key_type.as_ref()
    }
    /// <p>Any tags applied to the key pair.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The public key material.</p>
    pub fn public_key(&self) -> ::std::option::Option<&str> {
        self.public_key.as_deref()
    }
    /// <p>If you used Amazon EC2 to create the key pair, this is the date and time when the key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    /// <p>If you imported an existing key pair to Amazon EC2, this is the date and time the key was imported, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
}
impl KeyPairInfo {
    /// Creates a new builder-style object to manufacture [`KeyPairInfo`](crate::types::KeyPairInfo).
    pub fn builder() -> crate::types::builders::KeyPairInfoBuilder {
        crate::types::builders::KeyPairInfoBuilder::default()
    }
}

/// A builder for [`KeyPairInfo`](crate::types::KeyPairInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyPairInfoBuilder {
    pub(crate) key_pair_id: ::std::option::Option<::std::string::String>,
    pub(crate) key_fingerprint: ::std::option::Option<::std::string::String>,
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) key_type: ::std::option::Option<crate::types::KeyType>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) public_key: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KeyPairInfoBuilder {
    /// <p>The ID of the key pair.</p>
    pub fn key_pair_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_pair_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the key pair.</p>
    pub fn set_key_pair_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_pair_id = input;
        self
    }
    /// <p>The ID of the key pair.</p>
    pub fn get_key_pair_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_pair_id
    }
    /// <p>If you used <code>CreateKeyPair</code> to create the key pair:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    /// <p>If you used <code>ImportKeyPair</code> to provide Amazon Web Services the public key:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    pub fn key_fingerprint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_fingerprint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If you used <code>CreateKeyPair</code> to create the key pair:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    /// <p>If you used <code>ImportKeyPair</code> to provide Amazon Web Services the public key:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    pub fn set_key_fingerprint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_fingerprint = input;
        self
    }
    /// <p>If you used <code>CreateKeyPair</code> to create the key pair:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    /// <p>If you used <code>ImportKeyPair</code> to provide Amazon Web Services the public key:</p>
    /// <ul>
    /// <li> <p>For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p> </li>
    /// <li> <p>For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with <a href="http://www.openssh.com/txt/release-6.8">OpenSSH 6.8</a>.</p> </li>
    /// </ul>
    pub fn get_key_fingerprint(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_fingerprint
    }
    /// <p>The name of the key pair.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the key pair.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the key pair.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The type of key pair.</p>
    pub fn key_type(mut self, input: crate::types::KeyType) -> Self {
        self.key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of key pair.</p>
    pub fn set_key_type(mut self, input: ::std::option::Option<crate::types::KeyType>) -> Self {
        self.key_type = input;
        self
    }
    /// <p>The type of key pair.</p>
    pub fn get_key_type(&self) -> &::std::option::Option<crate::types::KeyType> {
        &self.key_type
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags applied to the key pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags applied to the key pair.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags applied to the key pair.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The public key material.</p>
    pub fn public_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key material.</p>
    pub fn set_public_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key = input;
        self
    }
    /// <p>The public key material.</p>
    pub fn get_public_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key
    }
    /// <p>If you used Amazon EC2 to create the key pair, this is the date and time when the key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    /// <p>If you imported an existing key pair to Amazon EC2, this is the date and time the key was imported, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you used Amazon EC2 to create the key pair, this is the date and time when the key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    /// <p>If you imported an existing key pair to Amazon EC2, this is the date and time the key was imported, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>If you used Amazon EC2 to create the key pair, this is the date and time when the key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    /// <p>If you imported an existing key pair to Amazon EC2, this is the date and time the key was imported, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601 date-time format</a>, in the UTC time zone.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// Consumes the builder and constructs a [`KeyPairInfo`](crate::types::KeyPairInfo).
    pub fn build(self) -> crate::types::KeyPairInfo {
        crate::types::KeyPairInfo {
            key_pair_id: self.key_pair_id,
            key_fingerprint: self.key_fingerprint,
            key_name: self.key_name,
            key_type: self.key_type,
            tags: self.tags,
            public_key: self.public_key,
            create_time: self.create_time,
        }
    }
}
