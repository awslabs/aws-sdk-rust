// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CapacityReservationInstancePlatform`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let capacityreservationinstanceplatform = unimplemented!();
/// match capacityreservationinstanceplatform {
///     CapacityReservationInstancePlatform::LinuxWithSqlServerEnterprise => { /* ... */ },
///     CapacityReservationInstancePlatform::LinuxWithSqlServerStandard => { /* ... */ },
///     CapacityReservationInstancePlatform::LinuxWithSqlServerWeb => { /* ... */ },
///     CapacityReservationInstancePlatform::LinuxUnix => { /* ... */ },
///     CapacityReservationInstancePlatform::RhelWithHa => { /* ... */ },
///     CapacityReservationInstancePlatform::RhelWithHaAndSqlServerEnterprise => { /* ... */ },
///     CapacityReservationInstancePlatform::RhelWithHaAndSqlServerStandard => { /* ... */ },
///     CapacityReservationInstancePlatform::RhelWithSqlServerEnterprise => { /* ... */ },
///     CapacityReservationInstancePlatform::RhelWithSqlServerStandard => { /* ... */ },
///     CapacityReservationInstancePlatform::RhelWithSqlServerWeb => { /* ... */ },
///     CapacityReservationInstancePlatform::RedHatEnterpriseLinux => { /* ... */ },
///     CapacityReservationInstancePlatform::SuseLinux => { /* ... */ },
///     CapacityReservationInstancePlatform::Windows => { /* ... */ },
///     CapacityReservationInstancePlatform::WindowsWithSqlServer => { /* ... */ },
///     CapacityReservationInstancePlatform::WindowsWithSqlServerEnterprise => { /* ... */ },
///     CapacityReservationInstancePlatform::WindowsWithSqlServerStandard => { /* ... */ },
///     CapacityReservationInstancePlatform::WindowsWithSqlServerWeb => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `capacityreservationinstanceplatform` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CapacityReservationInstancePlatform::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CapacityReservationInstancePlatform::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CapacityReservationInstancePlatform::NewFeature` is defined.
/// Specifically, when `capacityreservationinstanceplatform` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CapacityReservationInstancePlatform::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CapacityReservationInstancePlatform {
    #[allow(missing_docs)] // documentation missing in model
    LinuxWithSqlServerEnterprise,
    #[allow(missing_docs)] // documentation missing in model
    LinuxWithSqlServerStandard,
    #[allow(missing_docs)] // documentation missing in model
    LinuxWithSqlServerWeb,
    #[allow(missing_docs)] // documentation missing in model
    LinuxUnix,
    #[allow(missing_docs)] // documentation missing in model
    RhelWithHa,
    #[allow(missing_docs)] // documentation missing in model
    RhelWithHaAndSqlServerEnterprise,
    #[allow(missing_docs)] // documentation missing in model
    RhelWithHaAndSqlServerStandard,
    #[allow(missing_docs)] // documentation missing in model
    RhelWithSqlServerEnterprise,
    #[allow(missing_docs)] // documentation missing in model
    RhelWithSqlServerStandard,
    #[allow(missing_docs)] // documentation missing in model
    RhelWithSqlServerWeb,
    #[allow(missing_docs)] // documentation missing in model
    RedHatEnterpriseLinux,
    #[allow(missing_docs)] // documentation missing in model
    SuseLinux,
    #[allow(missing_docs)] // documentation missing in model
    Windows,
    #[allow(missing_docs)] // documentation missing in model
    WindowsWithSqlServer,
    #[allow(missing_docs)] // documentation missing in model
    WindowsWithSqlServerEnterprise,
    #[allow(missing_docs)] // documentation missing in model
    WindowsWithSqlServerStandard,
    #[allow(missing_docs)] // documentation missing in model
    WindowsWithSqlServerWeb,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for CapacityReservationInstancePlatform {
    fn from(s: &str) -> Self {
        match s {
            "Linux with SQL Server Enterprise" => {
                CapacityReservationInstancePlatform::LinuxWithSqlServerEnterprise
            }
            "Linux with SQL Server Standard" => {
                CapacityReservationInstancePlatform::LinuxWithSqlServerStandard
            }
            "Linux with SQL Server Web" => {
                CapacityReservationInstancePlatform::LinuxWithSqlServerWeb
            }
            "Linux/UNIX" => CapacityReservationInstancePlatform::LinuxUnix,
            "RHEL with HA" => CapacityReservationInstancePlatform::RhelWithHa,
            "RHEL with HA and SQL Server Enterprise" => {
                CapacityReservationInstancePlatform::RhelWithHaAndSqlServerEnterprise
            }
            "RHEL with HA and SQL Server Standard" => {
                CapacityReservationInstancePlatform::RhelWithHaAndSqlServerStandard
            }
            "RHEL with SQL Server Enterprise" => {
                CapacityReservationInstancePlatform::RhelWithSqlServerEnterprise
            }
            "RHEL with SQL Server Standard" => {
                CapacityReservationInstancePlatform::RhelWithSqlServerStandard
            }
            "RHEL with SQL Server Web" => CapacityReservationInstancePlatform::RhelWithSqlServerWeb,
            "Red Hat Enterprise Linux" => {
                CapacityReservationInstancePlatform::RedHatEnterpriseLinux
            }
            "SUSE Linux" => CapacityReservationInstancePlatform::SuseLinux,
            "Windows" => CapacityReservationInstancePlatform::Windows,
            "Windows with SQL Server" => CapacityReservationInstancePlatform::WindowsWithSqlServer,
            "Windows with SQL Server Enterprise" => {
                CapacityReservationInstancePlatform::WindowsWithSqlServerEnterprise
            }
            "Windows with SQL Server Standard" => {
                CapacityReservationInstancePlatform::WindowsWithSqlServerStandard
            }
            "Windows with SQL Server Web" => {
                CapacityReservationInstancePlatform::WindowsWithSqlServerWeb
            }
            other => CapacityReservationInstancePlatform::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for CapacityReservationInstancePlatform {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CapacityReservationInstancePlatform::from(s))
    }
}
impl CapacityReservationInstancePlatform {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CapacityReservationInstancePlatform::LinuxWithSqlServerEnterprise => {
                "Linux with SQL Server Enterprise"
            }
            CapacityReservationInstancePlatform::LinuxWithSqlServerStandard => {
                "Linux with SQL Server Standard"
            }
            CapacityReservationInstancePlatform::LinuxWithSqlServerWeb => {
                "Linux with SQL Server Web"
            }
            CapacityReservationInstancePlatform::LinuxUnix => "Linux/UNIX",
            CapacityReservationInstancePlatform::RhelWithHa => "RHEL with HA",
            CapacityReservationInstancePlatform::RhelWithHaAndSqlServerEnterprise => {
                "RHEL with HA and SQL Server Enterprise"
            }
            CapacityReservationInstancePlatform::RhelWithHaAndSqlServerStandard => {
                "RHEL with HA and SQL Server Standard"
            }
            CapacityReservationInstancePlatform::RhelWithSqlServerEnterprise => {
                "RHEL with SQL Server Enterprise"
            }
            CapacityReservationInstancePlatform::RhelWithSqlServerStandard => {
                "RHEL with SQL Server Standard"
            }
            CapacityReservationInstancePlatform::RhelWithSqlServerWeb => "RHEL with SQL Server Web",
            CapacityReservationInstancePlatform::RedHatEnterpriseLinux => {
                "Red Hat Enterprise Linux"
            }
            CapacityReservationInstancePlatform::SuseLinux => "SUSE Linux",
            CapacityReservationInstancePlatform::Windows => "Windows",
            CapacityReservationInstancePlatform::WindowsWithSqlServer => "Windows with SQL Server",
            CapacityReservationInstancePlatform::WindowsWithSqlServerEnterprise => {
                "Windows with SQL Server Enterprise"
            }
            CapacityReservationInstancePlatform::WindowsWithSqlServerStandard => {
                "Windows with SQL Server Standard"
            }
            CapacityReservationInstancePlatform::WindowsWithSqlServerWeb => {
                "Windows with SQL Server Web"
            }
            CapacityReservationInstancePlatform::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Linux with SQL Server Enterprise",
            "Linux with SQL Server Standard",
            "Linux with SQL Server Web",
            "Linux/UNIX",
            "RHEL with HA",
            "RHEL with HA and SQL Server Enterprise",
            "RHEL with HA and SQL Server Standard",
            "RHEL with SQL Server Enterprise",
            "RHEL with SQL Server Standard",
            "RHEL with SQL Server Web",
            "Red Hat Enterprise Linux",
            "SUSE Linux",
            "Windows",
            "Windows with SQL Server",
            "Windows with SQL Server Enterprise",
            "Windows with SQL Server Standard",
            "Windows with SQL Server Web",
        ]
    }
}
impl AsRef<str> for CapacityReservationInstancePlatform {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
