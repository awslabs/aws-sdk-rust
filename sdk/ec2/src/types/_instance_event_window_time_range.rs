// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The start day and time and the end day and time of the time range, in UTC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceEventWindowTimeRange {
    /// <p>The day on which the time range begins.</p>
    #[doc(hidden)]
    pub start_week_day: std::option::Option<crate::types::WeekDay>,
    /// <p>The hour when the time range begins.</p>
    #[doc(hidden)]
    pub start_hour: std::option::Option<i32>,
    /// <p>The day on which the time range ends.</p>
    #[doc(hidden)]
    pub end_week_day: std::option::Option<crate::types::WeekDay>,
    /// <p>The hour when the time range ends.</p>
    #[doc(hidden)]
    pub end_hour: std::option::Option<i32>,
}
impl InstanceEventWindowTimeRange {
    /// <p>The day on which the time range begins.</p>
    pub fn start_week_day(&self) -> std::option::Option<&crate::types::WeekDay> {
        self.start_week_day.as_ref()
    }
    /// <p>The hour when the time range begins.</p>
    pub fn start_hour(&self) -> std::option::Option<i32> {
        self.start_hour
    }
    /// <p>The day on which the time range ends.</p>
    pub fn end_week_day(&self) -> std::option::Option<&crate::types::WeekDay> {
        self.end_week_day.as_ref()
    }
    /// <p>The hour when the time range ends.</p>
    pub fn end_hour(&self) -> std::option::Option<i32> {
        self.end_hour
    }
}
impl InstanceEventWindowTimeRange {
    /// Creates a new builder-style object to manufacture [`InstanceEventWindowTimeRange`](crate::types::InstanceEventWindowTimeRange).
    pub fn builder() -> crate::types::builders::InstanceEventWindowTimeRangeBuilder {
        crate::types::builders::InstanceEventWindowTimeRangeBuilder::default()
    }
}

/// A builder for [`InstanceEventWindowTimeRange`](crate::types::InstanceEventWindowTimeRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceEventWindowTimeRangeBuilder {
    pub(crate) start_week_day: std::option::Option<crate::types::WeekDay>,
    pub(crate) start_hour: std::option::Option<i32>,
    pub(crate) end_week_day: std::option::Option<crate::types::WeekDay>,
    pub(crate) end_hour: std::option::Option<i32>,
}
impl InstanceEventWindowTimeRangeBuilder {
    /// <p>The day on which the time range begins.</p>
    pub fn start_week_day(mut self, input: crate::types::WeekDay) -> Self {
        self.start_week_day = Some(input);
        self
    }
    /// <p>The day on which the time range begins.</p>
    pub fn set_start_week_day(mut self, input: std::option::Option<crate::types::WeekDay>) -> Self {
        self.start_week_day = input;
        self
    }
    /// <p>The hour when the time range begins.</p>
    pub fn start_hour(mut self, input: i32) -> Self {
        self.start_hour = Some(input);
        self
    }
    /// <p>The hour when the time range begins.</p>
    pub fn set_start_hour(mut self, input: std::option::Option<i32>) -> Self {
        self.start_hour = input;
        self
    }
    /// <p>The day on which the time range ends.</p>
    pub fn end_week_day(mut self, input: crate::types::WeekDay) -> Self {
        self.end_week_day = Some(input);
        self
    }
    /// <p>The day on which the time range ends.</p>
    pub fn set_end_week_day(mut self, input: std::option::Option<crate::types::WeekDay>) -> Self {
        self.end_week_day = input;
        self
    }
    /// <p>The hour when the time range ends.</p>
    pub fn end_hour(mut self, input: i32) -> Self {
        self.end_hour = Some(input);
        self
    }
    /// <p>The hour when the time range ends.</p>
    pub fn set_end_hour(mut self, input: std::option::Option<i32>) -> Self {
        self.end_hour = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceEventWindowTimeRange`](crate::types::InstanceEventWindowTimeRange).
    pub fn build(self) -> crate::types::InstanceEventWindowTimeRange {
        crate::types::InstanceEventWindowTimeRange {
            start_week_day: self.start_week_day,
            start_hour: self.start_hour,
            end_week_day: self.end_week_day,
            end_hour: self.end_hour,
        }
    }
}
