// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a carrier gateway.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CarrierGateway {
    /// <p>The ID of the carrier gateway.</p>
    pub carrier_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC associated with the carrier gateway.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the carrier gateway.</p>
    pub state: ::std::option::Option<crate::types::CarrierGatewayState>,
    /// <p>The Amazon Web Services account ID of the owner of the carrier gateway.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the carrier gateway.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CarrierGateway {
    /// <p>The ID of the carrier gateway.</p>
    pub fn carrier_gateway_id(&self) -> ::std::option::Option<&str> {
        self.carrier_gateway_id.as_deref()
    }
    /// <p>The ID of the VPC associated with the carrier gateway.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The state of the carrier gateway.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CarrierGatewayState> {
        self.state.as_ref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the carrier gateway.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The tags assigned to the carrier gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CarrierGateway {
    /// Creates a new builder-style object to manufacture [`CarrierGateway`](crate::types::CarrierGateway).
    pub fn builder() -> crate::types::builders::CarrierGatewayBuilder {
        crate::types::builders::CarrierGatewayBuilder::default()
    }
}

/// A builder for [`CarrierGateway`](crate::types::CarrierGateway).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CarrierGatewayBuilder {
    pub(crate) carrier_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::CarrierGatewayState>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CarrierGatewayBuilder {
    /// <p>The ID of the carrier gateway.</p>
    pub fn carrier_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.carrier_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the carrier gateway.</p>
    pub fn set_carrier_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.carrier_gateway_id = input;
        self
    }
    /// <p>The ID of the carrier gateway.</p>
    pub fn get_carrier_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.carrier_gateway_id
    }
    /// <p>The ID of the VPC associated with the carrier gateway.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC associated with the carrier gateway.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC associated with the carrier gateway.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The state of the carrier gateway.</p>
    pub fn state(mut self, input: crate::types::CarrierGatewayState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the carrier gateway.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CarrierGatewayState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the carrier gateway.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CarrierGatewayState> {
        &self.state
    }
    /// <p>The Amazon Web Services account ID of the owner of the carrier gateway.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the carrier gateway.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the carrier gateway.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the carrier gateway.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the carrier gateway.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the carrier gateway.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CarrierGateway`](crate::types::CarrierGateway).
    pub fn build(self) -> crate::types::CarrierGateway {
        crate::types::CarrierGateway {
            carrier_gateway_id: self.carrier_gateway_id,
            vpc_id: self.vpc_id,
            state: self.state,
            owner_id: self.owner_id,
            tags: self.tags,
        }
    }
}
