// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a block device for an EBS volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplateEbsBlockDevice {
    /// <p>Indicates whether the EBS volume is encrypted.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    #[doc(hidden)]
    pub delete_on_termination: std::option::Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. </p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p>The ARN of the Key Management Service (KMS) CMK used for encryption.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    #[doc(hidden)]
    pub volume_size: std::option::Option<i32>,
    /// <p>The volume type.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<crate::types::VolumeType>,
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    #[doc(hidden)]
    pub throughput: std::option::Option<i32>,
}
impl LaunchTemplateEbsBlockDevice {
    /// <p>Indicates whether the EBS volume is encrypted.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub fn delete_on_termination(&self) -> std::option::Option<bool> {
        self.delete_on_termination
    }
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. </p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p>The ARN of the Key Management Service (KMS) CMK used for encryption.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn volume_size(&self) -> std::option::Option<i32> {
        self.volume_size
    }
    /// <p>The volume type.</p>
    pub fn volume_type(&self) -> std::option::Option<&crate::types::VolumeType> {
        self.volume_type.as_ref()
    }
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    pub fn throughput(&self) -> std::option::Option<i32> {
        self.throughput
    }
}
impl LaunchTemplateEbsBlockDevice {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateEbsBlockDevice`](crate::types::LaunchTemplateEbsBlockDevice).
    pub fn builder() -> crate::types::builders::LaunchTemplateEbsBlockDeviceBuilder {
        crate::types::builders::LaunchTemplateEbsBlockDeviceBuilder::default()
    }
}

/// A builder for [`LaunchTemplateEbsBlockDevice`](crate::types::LaunchTemplateEbsBlockDevice).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateEbsBlockDeviceBuilder {
    pub(crate) encrypted: std::option::Option<bool>,
    pub(crate) delete_on_termination: std::option::Option<bool>,
    pub(crate) iops: std::option::Option<i32>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) volume_size: std::option::Option<i32>,
    pub(crate) volume_type: std::option::Option<crate::types::VolumeType>,
    pub(crate) throughput: std::option::Option<i32>,
}
impl LaunchTemplateEbsBlockDeviceBuilder {
    /// <p>Indicates whether the EBS volume is encrypted.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = Some(input);
        self
    }
    /// <p>Indicates whether the EBS volume is encrypted.</p>
    pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub fn delete_on_termination(mut self, input: bool) -> Self {
        self.delete_on_termination = Some(input);
        self
    }
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub fn set_delete_on_termination(mut self, input: std::option::Option<bool>) -> Self {
        self.delete_on_termination = input;
        self
    }
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. </p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. </p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The ARN of the Key Management Service (KMS) CMK used for encryption.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The ARN of the Key Management Service (KMS) CMK used for encryption.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn volume_size(mut self, input: i32) -> Self {
        self.volume_size = Some(input);
        self
    }
    /// <p>The size of the volume, in GiB.</p>
    pub fn set_volume_size(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size = input;
        self
    }
    /// <p>The volume type.</p>
    pub fn volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.volume_type = Some(input);
        self
    }
    /// <p>The volume type.</p>
    pub fn set_volume_type(mut self, input: std::option::Option<crate::types::VolumeType>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    pub fn throughput(mut self, input: i32) -> Self {
        self.throughput = Some(input);
        self
    }
    /// <p>The throughput that the volume supports, in MiB/s.</p>
    pub fn set_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.throughput = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplateEbsBlockDevice`](crate::types::LaunchTemplateEbsBlockDevice).
    pub fn build(self) -> crate::types::LaunchTemplateEbsBlockDevice {
        crate::types::LaunchTemplateEbsBlockDevice {
            encrypted: self.encrypted,
            delete_on_termination: self.delete_on_termination,
            iops: self.iops,
            kms_key_id: self.kms_key_id,
            snapshot_id: self.snapshot_id,
            volume_size: self.volume_size,
            volume_type: self.volume_type,
            throughput: self.throughput,
        }
    }
}
