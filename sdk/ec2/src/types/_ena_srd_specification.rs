// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>ENA Express uses Amazon Web Services Scalable Reliable Datagram (SRD) technology to increase the maximum bandwidth used per stream and minimize tail latency of network traffic between EC2 instances. With ENA Express, you can communicate between two EC2 instances in the same subnet within the same account, or in different accounts. Both sending and receiving instances must have ENA Express enabled.</p>
/// <p>To improve the reliability of network packet delivery, ENA Express reorders network packets on the receiving end by default. However, some UDP-based applications are designed to handle network packets that are out of order to reduce the overhead for packet delivery at the network layer. When ENA Express is enabled, you can specify whether UDP network traffic uses it.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnaSrdSpecification {
    /// <p>Indicates whether ENA Express is enabled for the network interface.</p>
    #[doc(hidden)]
    pub ena_srd_enabled: std::option::Option<bool>,
    /// <p>Configures ENA Express for UDP network traffic.</p>
    #[doc(hidden)]
    pub ena_srd_udp_specification: std::option::Option<crate::types::EnaSrdUdpSpecification>,
}
impl EnaSrdSpecification {
    /// <p>Indicates whether ENA Express is enabled for the network interface.</p>
    pub fn ena_srd_enabled(&self) -> std::option::Option<bool> {
        self.ena_srd_enabled
    }
    /// <p>Configures ENA Express for UDP network traffic.</p>
    pub fn ena_srd_udp_specification(
        &self,
    ) -> std::option::Option<&crate::types::EnaSrdUdpSpecification> {
        self.ena_srd_udp_specification.as_ref()
    }
}
impl EnaSrdSpecification {
    /// Creates a new builder-style object to manufacture [`EnaSrdSpecification`](crate::types::EnaSrdSpecification).
    pub fn builder() -> crate::types::builders::EnaSrdSpecificationBuilder {
        crate::types::builders::EnaSrdSpecificationBuilder::default()
    }
}

/// A builder for [`EnaSrdSpecification`](crate::types::EnaSrdSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnaSrdSpecificationBuilder {
    pub(crate) ena_srd_enabled: std::option::Option<bool>,
    pub(crate) ena_srd_udp_specification: std::option::Option<crate::types::EnaSrdUdpSpecification>,
}
impl EnaSrdSpecificationBuilder {
    /// <p>Indicates whether ENA Express is enabled for the network interface.</p>
    pub fn ena_srd_enabled(mut self, input: bool) -> Self {
        self.ena_srd_enabled = Some(input);
        self
    }
    /// <p>Indicates whether ENA Express is enabled for the network interface.</p>
    pub fn set_ena_srd_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.ena_srd_enabled = input;
        self
    }
    /// <p>Configures ENA Express for UDP network traffic.</p>
    pub fn ena_srd_udp_specification(
        mut self,
        input: crate::types::EnaSrdUdpSpecification,
    ) -> Self {
        self.ena_srd_udp_specification = Some(input);
        self
    }
    /// <p>Configures ENA Express for UDP network traffic.</p>
    pub fn set_ena_srd_udp_specification(
        mut self,
        input: std::option::Option<crate::types::EnaSrdUdpSpecification>,
    ) -> Self {
        self.ena_srd_udp_specification = input;
        self
    }
    /// Consumes the builder and constructs a [`EnaSrdSpecification`](crate::types::EnaSrdSpecification).
    pub fn build(self) -> crate::types::EnaSrdSpecification {
        crate::types::EnaSrdSpecification {
            ena_srd_enabled: self.ena_srd_enabled,
            ena_srd_udp_specification: self.ena_srd_udp_specification,
        }
    }
}
