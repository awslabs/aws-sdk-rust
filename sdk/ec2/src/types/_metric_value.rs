// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single metric value with its associated statistic, such as the sum or average of unused capacity hours.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricValue {
    /// <p>The name of the metric.</p>
    pub metric: ::std::option::Option<crate::types::Metric>,
    /// <p>The numerical value of the metric for the specified statistic and time period.</p>
    pub value: ::std::option::Option<f64>,
}
impl MetricValue {
    /// <p>The name of the metric.</p>
    pub fn metric(&self) -> ::std::option::Option<&crate::types::Metric> {
        self.metric.as_ref()
    }
    /// <p>The numerical value of the metric for the specified statistic and time period.</p>
    pub fn value(&self) -> ::std::option::Option<f64> {
        self.value
    }
}
impl MetricValue {
    /// Creates a new builder-style object to manufacture [`MetricValue`](crate::types::MetricValue).
    pub fn builder() -> crate::types::builders::MetricValueBuilder {
        crate::types::builders::MetricValueBuilder::default()
    }
}

/// A builder for [`MetricValue`](crate::types::MetricValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricValueBuilder {
    pub(crate) metric: ::std::option::Option<crate::types::Metric>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl MetricValueBuilder {
    /// <p>The name of the metric.</p>
    pub fn metric(mut self, input: crate::types::Metric) -> Self {
        self.metric = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_metric(mut self, input: ::std::option::Option<crate::types::Metric>) -> Self {
        self.metric = input;
        self
    }
    /// <p>The name of the metric.</p>
    pub fn get_metric(&self) -> &::std::option::Option<crate::types::Metric> {
        &self.metric
    }
    /// <p>The numerical value of the metric for the specified statistic and time period.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The numerical value of the metric for the specified statistic and time period.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The numerical value of the metric for the specified statistic and time period.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`MetricValue`](crate::types::MetricValue).
    pub fn build(self) -> crate::types::MetricValue {
        crate::types::MetricValue {
            metric: self.metric,
            value: self.value,
        }
    }
}
