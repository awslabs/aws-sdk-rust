// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a condition for filtering capacity data based on dimension values. Used to create precise filters for metric queries and dimension lookups.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionCondition {
    /// <p>The name of the dimension to filter by.</p>
    pub dimension: ::std::option::Option<crate::types::FilterByDimension>,
    /// <p>The comparison operator to use for the filter.</p>
    pub comparison: ::std::option::Option<crate::types::Comparison>,
    /// <p>The list of values to match against the specified dimension. For 'equals' comparison, only the first value is used. For 'in' comparison, any matching value will satisfy the condition.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DimensionCondition {
    /// <p>The name of the dimension to filter by.</p>
    pub fn dimension(&self) -> ::std::option::Option<&crate::types::FilterByDimension> {
        self.dimension.as_ref()
    }
    /// <p>The comparison operator to use for the filter.</p>
    pub fn comparison(&self) -> ::std::option::Option<&crate::types::Comparison> {
        self.comparison.as_ref()
    }
    /// <p>The list of values to match against the specified dimension. For 'equals' comparison, only the first value is used. For 'in' comparison, any matching value will satisfy the condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl DimensionCondition {
    /// Creates a new builder-style object to manufacture [`DimensionCondition`](crate::types::DimensionCondition).
    pub fn builder() -> crate::types::builders::DimensionConditionBuilder {
        crate::types::builders::DimensionConditionBuilder::default()
    }
}

/// A builder for [`DimensionCondition`](crate::types::DimensionCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DimensionConditionBuilder {
    pub(crate) dimension: ::std::option::Option<crate::types::FilterByDimension>,
    pub(crate) comparison: ::std::option::Option<crate::types::Comparison>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DimensionConditionBuilder {
    /// <p>The name of the dimension to filter by.</p>
    pub fn dimension(mut self, input: crate::types::FilterByDimension) -> Self {
        self.dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the dimension to filter by.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<crate::types::FilterByDimension>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The name of the dimension to filter by.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<crate::types::FilterByDimension> {
        &self.dimension
    }
    /// <p>The comparison operator to use for the filter.</p>
    pub fn comparison(mut self, input: crate::types::Comparison) -> Self {
        self.comparison = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comparison operator to use for the filter.</p>
    pub fn set_comparison(mut self, input: ::std::option::Option<crate::types::Comparison>) -> Self {
        self.comparison = input;
        self
    }
    /// <p>The comparison operator to use for the filter.</p>
    pub fn get_comparison(&self) -> &::std::option::Option<crate::types::Comparison> {
        &self.comparison
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The list of values to match against the specified dimension. For 'equals' comparison, only the first value is used. For 'in' comparison, any matching value will satisfy the condition.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of values to match against the specified dimension. For 'equals' comparison, only the first value is used. For 'in' comparison, any matching value will satisfy the condition.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The list of values to match against the specified dimension. For 'equals' comparison, only the first value is used. For 'in' comparison, any matching value will satisfy the condition.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`DimensionCondition`](crate::types::DimensionCondition).
    pub fn build(self) -> crate::types::DimensionCondition {
        crate::types::DimensionCondition {
            dimension: self.dimension,
            comparison: self.comparison,
            values: self.values,
        }
    }
}
