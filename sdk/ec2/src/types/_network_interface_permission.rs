// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a permission for a network interface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkInterfacePermission {
    /// <p>The ID of the network interface permission.</p>
    #[doc(hidden)]
    pub network_interface_permission_id: std::option::Option<std::string::String>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Service.</p>
    #[doc(hidden)]
    pub aws_service: std::option::Option<std::string::String>,
    /// <p>The type of permission.</p>
    #[doc(hidden)]
    pub permission: std::option::Option<crate::types::InterfacePermissionType>,
    /// <p>Information about the state of the permission.</p>
    #[doc(hidden)]
    pub permission_state: std::option::Option<crate::types::NetworkInterfacePermissionState>,
}
impl NetworkInterfacePermission {
    /// <p>The ID of the network interface permission.</p>
    pub fn network_interface_permission_id(&self) -> std::option::Option<&str> {
        self.network_interface_permission_id.as_deref()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The Amazon Web Service.</p>
    pub fn aws_service(&self) -> std::option::Option<&str> {
        self.aws_service.as_deref()
    }
    /// <p>The type of permission.</p>
    pub fn permission(&self) -> std::option::Option<&crate::types::InterfacePermissionType> {
        self.permission.as_ref()
    }
    /// <p>Information about the state of the permission.</p>
    pub fn permission_state(
        &self,
    ) -> std::option::Option<&crate::types::NetworkInterfacePermissionState> {
        self.permission_state.as_ref()
    }
}
impl NetworkInterfacePermission {
    /// Creates a new builder-style object to manufacture [`NetworkInterfacePermission`](crate::types::NetworkInterfacePermission).
    pub fn builder() -> crate::types::builders::NetworkInterfacePermissionBuilder {
        crate::types::builders::NetworkInterfacePermissionBuilder::default()
    }
}

/// A builder for [`NetworkInterfacePermission`](crate::types::NetworkInterfacePermission).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkInterfacePermissionBuilder {
    pub(crate) network_interface_permission_id: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) aws_service: std::option::Option<std::string::String>,
    pub(crate) permission: std::option::Option<crate::types::InterfacePermissionType>,
    pub(crate) permission_state: std::option::Option<crate::types::NetworkInterfacePermissionState>,
}
impl NetworkInterfacePermissionBuilder {
    /// <p>The ID of the network interface permission.</p>
    pub fn network_interface_permission_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.network_interface_permission_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface permission.</p>
    pub fn set_network_interface_permission_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_permission_id = input;
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Service.</p>
    pub fn aws_service(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_service = Some(input.into());
        self
    }
    /// <p>The Amazon Web Service.</p>
    pub fn set_aws_service(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_service = input;
        self
    }
    /// <p>The type of permission.</p>
    pub fn permission(mut self, input: crate::types::InterfacePermissionType) -> Self {
        self.permission = Some(input);
        self
    }
    /// <p>The type of permission.</p>
    pub fn set_permission(
        mut self,
        input: std::option::Option<crate::types::InterfacePermissionType>,
    ) -> Self {
        self.permission = input;
        self
    }
    /// <p>Information about the state of the permission.</p>
    pub fn permission_state(
        mut self,
        input: crate::types::NetworkInterfacePermissionState,
    ) -> Self {
        self.permission_state = Some(input);
        self
    }
    /// <p>Information about the state of the permission.</p>
    pub fn set_permission_state(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfacePermissionState>,
    ) -> Self {
        self.permission_state = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkInterfacePermission`](crate::types::NetworkInterfacePermission).
    pub fn build(self) -> crate::types::NetworkInterfacePermission {
        crate::types::NetworkInterfacePermission {
            network_interface_permission_id: self.network_interface_permission_id,
            network_interface_id: self.network_interface_id,
            aws_account_id: self.aws_account_id,
            aws_service: self.aws_service,
            permission: self.permission,
            permission_state: self.permission_state,
        }
    }
}
