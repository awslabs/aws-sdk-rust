// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an egress-only internet gateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EgressOnlyInternetGateway {
    /// <p>Information about the attachment of the egress-only internet gateway.</p>
    #[doc(hidden)]
    pub attachments: std::option::Option<std::vec::Vec<crate::types::InternetGatewayAttachment>>,
    /// <p>The ID of the egress-only internet gateway.</p>
    #[doc(hidden)]
    pub egress_only_internet_gateway_id: std::option::Option<std::string::String>,
    /// <p>The tags assigned to the egress-only internet gateway.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl EgressOnlyInternetGateway {
    /// <p>Information about the attachment of the egress-only internet gateway.</p>
    pub fn attachments(&self) -> std::option::Option<&[crate::types::InternetGatewayAttachment]> {
        self.attachments.as_deref()
    }
    /// <p>The ID of the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway_id(&self) -> std::option::Option<&str> {
        self.egress_only_internet_gateway_id.as_deref()
    }
    /// <p>The tags assigned to the egress-only internet gateway.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl EgressOnlyInternetGateway {
    /// Creates a new builder-style object to manufacture [`EgressOnlyInternetGateway`](crate::types::EgressOnlyInternetGateway).
    pub fn builder() -> crate::types::builders::EgressOnlyInternetGatewayBuilder {
        crate::types::builders::EgressOnlyInternetGatewayBuilder::default()
    }
}

/// A builder for [`EgressOnlyInternetGateway`](crate::types::EgressOnlyInternetGateway).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EgressOnlyInternetGatewayBuilder {
    pub(crate) attachments:
        std::option::Option<std::vec::Vec<crate::types::InternetGatewayAttachment>>,
    pub(crate) egress_only_internet_gateway_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl EgressOnlyInternetGatewayBuilder {
    /// Appends an item to `attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p>Information about the attachment of the egress-only internet gateway.</p>
    pub fn attachments(mut self, input: crate::types::InternetGatewayAttachment) -> Self {
        let mut v = self.attachments.unwrap_or_default();
        v.push(input);
        self.attachments = Some(v);
        self
    }
    /// <p>Information about the attachment of the egress-only internet gateway.</p>
    pub fn set_attachments(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InternetGatewayAttachment>>,
    ) -> Self {
        self.attachments = input;
        self
    }
    /// <p>The ID of the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.egress_only_internet_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the egress-only internet gateway.</p>
    pub fn set_egress_only_internet_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.egress_only_internet_gateway_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the egress-only internet gateway.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags assigned to the egress-only internet gateway.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`EgressOnlyInternetGateway`](crate::types::EgressOnlyInternetGateway).
    pub fn build(self) -> crate::types::EgressOnlyInternetGateway {
        crate::types::EgressOnlyInternetGateway {
            attachments: self.attachments,
            egress_only_internet_gateway_id: self.egress_only_internet_gateway_id,
            tags: self.tags,
        }
    }
}
