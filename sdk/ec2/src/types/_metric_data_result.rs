// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a single data point from a capacity metrics query, including the dimension values, timestamp, and metric values for that specific combination.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDataResult {
    /// <p>The dimension values that identify this specific data point, such as account ID, region, and instance family.</p>
    pub dimension: ::std::option::Option<crate::types::CapacityManagerDimension>,
    /// <p>The timestamp for this data point, indicating when the capacity usage occurred.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The metric values and statistics for this data point, containing the actual capacity usage numbers.</p>
    pub metric_values: ::std::option::Option<::std::vec::Vec<crate::types::MetricValue>>,
}
impl MetricDataResult {
    /// <p>The dimension values that identify this specific data point, such as account ID, region, and instance family.</p>
    pub fn dimension(&self) -> ::std::option::Option<&crate::types::CapacityManagerDimension> {
        self.dimension.as_ref()
    }
    /// <p>The timestamp for this data point, indicating when the capacity usage occurred.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The metric values and statistics for this data point, containing the actual capacity usage numbers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_values.is_none()`.
    pub fn metric_values(&self) -> &[crate::types::MetricValue] {
        self.metric_values.as_deref().unwrap_or_default()
    }
}
impl MetricDataResult {
    /// Creates a new builder-style object to manufacture [`MetricDataResult`](crate::types::MetricDataResult).
    pub fn builder() -> crate::types::builders::MetricDataResultBuilder {
        crate::types::builders::MetricDataResultBuilder::default()
    }
}

/// A builder for [`MetricDataResult`](crate::types::MetricDataResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricDataResultBuilder {
    pub(crate) dimension: ::std::option::Option<crate::types::CapacityManagerDimension>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metric_values: ::std::option::Option<::std::vec::Vec<crate::types::MetricValue>>,
}
impl MetricDataResultBuilder {
    /// <p>The dimension values that identify this specific data point, such as account ID, region, and instance family.</p>
    pub fn dimension(mut self, input: crate::types::CapacityManagerDimension) -> Self {
        self.dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dimension values that identify this specific data point, such as account ID, region, and instance family.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<crate::types::CapacityManagerDimension>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The dimension values that identify this specific data point, such as account ID, region, and instance family.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<crate::types::CapacityManagerDimension> {
        &self.dimension
    }
    /// <p>The timestamp for this data point, indicating when the capacity usage occurred.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for this data point, indicating when the capacity usage occurred.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp for this data point, indicating when the capacity usage occurred.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Appends an item to `metric_values`.
    ///
    /// To override the contents of this collection use [`set_metric_values`](Self::set_metric_values).
    ///
    /// <p>The metric values and statistics for this data point, containing the actual capacity usage numbers.</p>
    pub fn metric_values(mut self, input: crate::types::MetricValue) -> Self {
        let mut v = self.metric_values.unwrap_or_default();
        v.push(input);
        self.metric_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metric values and statistics for this data point, containing the actual capacity usage numbers.</p>
    pub fn set_metric_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricValue>>) -> Self {
        self.metric_values = input;
        self
    }
    /// <p>The metric values and statistics for this data point, containing the actual capacity usage numbers.</p>
    pub fn get_metric_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricValue>> {
        &self.metric_values
    }
    /// Consumes the builder and constructs a [`MetricDataResult`](crate::types::MetricDataResult).
    pub fn build(self) -> crate::types::MetricDataResult {
        crate::types::MetricDataResult {
            dimension: self.dimension,
            timestamp: self.timestamp,
            metric_values: self.metric_values,
        }
    }
}
