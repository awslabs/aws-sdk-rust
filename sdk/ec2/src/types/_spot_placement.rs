// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes Spot Instance placement.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SpotPlacement {
    /// <p>The Availability Zone.</p>
    /// <p>[Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The name of the placement group.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for Spot Instances.</p>
    #[doc(hidden)]
    pub tenancy: std::option::Option<crate::types::Tenancy>,
}
impl SpotPlacement {
    /// <p>The Availability Zone.</p>
    /// <p>[Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The name of the placement group.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for Spot Instances.</p>
    pub fn tenancy(&self) -> std::option::Option<&crate::types::Tenancy> {
        self.tenancy.as_ref()
    }
}
impl SpotPlacement {
    /// Creates a new builder-style object to manufacture [`SpotPlacement`](crate::types::SpotPlacement).
    pub fn builder() -> crate::types::builders::SpotPlacementBuilder {
        crate::types::builders::SpotPlacementBuilder::default()
    }
}

/// A builder for [`SpotPlacement`](crate::types::SpotPlacement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpotPlacementBuilder {
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) tenancy: std::option::Option<crate::types::Tenancy>,
}
impl SpotPlacementBuilder {
    /// <p>The Availability Zone.</p>
    /// <p>[Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone.</p>
    /// <p>[Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The name of the placement group.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name of the placement group.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for Spot Instances.</p>
    pub fn tenancy(mut self, input: crate::types::Tenancy) -> Self {
        self.tenancy = Some(input);
        self
    }
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for Spot Instances.</p>
    pub fn set_tenancy(mut self, input: std::option::Option<crate::types::Tenancy>) -> Self {
        self.tenancy = input;
        self
    }
    /// Consumes the builder and constructs a [`SpotPlacement`](crate::types::SpotPlacement).
    pub fn build(self) -> crate::types::SpotPlacement {
        crate::types::SpotPlacement {
            availability_zone: self.availability_zone,
            group_name: self.group_name,
            tenancy: self.tenancy,
        }
    }
}
