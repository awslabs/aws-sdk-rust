// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Traffic Mirror port range.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrafficMirrorPortRange {
    /// <p>The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    #[doc(hidden)]
    pub from_port: std::option::Option<i32>,
    /// <p>The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    #[doc(hidden)]
    pub to_port: std::option::Option<i32>,
}
impl TrafficMirrorPortRange {
    /// <p>The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    pub fn from_port(&self) -> std::option::Option<i32> {
        self.from_port
    }
    /// <p>The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    pub fn to_port(&self) -> std::option::Option<i32> {
        self.to_port
    }
}
impl TrafficMirrorPortRange {
    /// Creates a new builder-style object to manufacture [`TrafficMirrorPortRange`](crate::types::TrafficMirrorPortRange).
    pub fn builder() -> crate::types::builders::TrafficMirrorPortRangeBuilder {
        crate::types::builders::TrafficMirrorPortRangeBuilder::default()
    }
}

/// A builder for [`TrafficMirrorPortRange`](crate::types::TrafficMirrorPortRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrafficMirrorPortRangeBuilder {
    pub(crate) from_port: std::option::Option<i32>,
    pub(crate) to_port: std::option::Option<i32>,
}
impl TrafficMirrorPortRangeBuilder {
    /// <p>The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    pub fn from_port(mut self, input: i32) -> Self {
        self.from_port = Some(input);
        self
    }
    /// <p>The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    pub fn set_from_port(mut self, input: std::option::Option<i32>) -> Self {
        self.from_port = input;
        self
    }
    /// <p>The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    pub fn to_port(mut self, input: i32) -> Self {
        self.to_port = Some(input);
        self
    }
    /// <p>The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.</p>
    pub fn set_to_port(mut self, input: std::option::Option<i32>) -> Self {
        self.to_port = input;
        self
    }
    /// Consumes the builder and constructs a [`TrafficMirrorPortRange`](crate::types::TrafficMirrorPortRange).
    pub fn build(self) -> crate::types::TrafficMirrorPortRange {
        crate::types::TrafficMirrorPortRange {
            from_port: self.from_port,
            to_port: self.to_port,
        }
    }
}
