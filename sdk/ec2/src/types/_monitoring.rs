// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the monitoring of an instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Monitoring {
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::MonitoringState>,
}
impl Monitoring {
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::MonitoringState> {
        self.state.as_ref()
    }
}
impl Monitoring {
    /// Creates a new builder-style object to manufacture [`Monitoring`](crate::types::Monitoring).
    pub fn builder() -> crate::types::builders::MonitoringBuilder {
        crate::types::builders::MonitoringBuilder::default()
    }
}

/// A builder for [`Monitoring`](crate::types::Monitoring).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringBuilder {
    pub(crate) state: std::option::Option<crate::types::MonitoringState>,
}
impl MonitoringBuilder {
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    pub fn state(mut self, input: crate::types::MonitoringState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::MonitoringState>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`Monitoring`](crate::types::Monitoring).
    pub fn build(self) -> crate::types::Monitoring {
        crate::types::Monitoring { state: self.state }
    }
}
