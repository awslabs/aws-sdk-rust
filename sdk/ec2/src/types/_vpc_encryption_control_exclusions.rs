// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcEncryptionControlExclusions {
    #[allow(missing_docs)] // documentation missing in model
    pub internet_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub egress_only_internet_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub nat_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub virtual_private_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub vpc_peering: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub lambda: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub vpc_lattice: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    #[allow(missing_docs)] // documentation missing in model
    pub elastic_file_system: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
}
impl VpcEncryptionControlExclusions {
    #[allow(missing_docs)] // documentation missing in model
    pub fn internet_gateway(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.internet_gateway.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn egress_only_internet_gateway(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.egress_only_internet_gateway.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn nat_gateway(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.nat_gateway.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn virtual_private_gateway(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.virtual_private_gateway.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_peering(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.vpc_peering.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn lambda(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.lambda.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_lattice(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.vpc_lattice.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn elastic_file_system(&self) -> ::std::option::Option<&crate::types::VpcEncryptionControlExclusion> {
        self.elastic_file_system.as_ref()
    }
}
impl VpcEncryptionControlExclusions {
    /// Creates a new builder-style object to manufacture [`VpcEncryptionControlExclusions`](crate::types::VpcEncryptionControlExclusions).
    pub fn builder() -> crate::types::builders::VpcEncryptionControlExclusionsBuilder {
        crate::types::builders::VpcEncryptionControlExclusionsBuilder::default()
    }
}

/// A builder for [`VpcEncryptionControlExclusions`](crate::types::VpcEncryptionControlExclusions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcEncryptionControlExclusionsBuilder {
    pub(crate) internet_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) egress_only_internet_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) nat_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) virtual_private_gateway: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) vpc_peering: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) lambda: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) vpc_lattice: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
    pub(crate) elastic_file_system: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>,
}
impl VpcEncryptionControlExclusionsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn internet_gateway(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.internet_gateway = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_internet_gateway(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.internet_gateway = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_internet_gateway(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.internet_gateway
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn egress_only_internet_gateway(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.egress_only_internet_gateway = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_egress_only_internet_gateway(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.egress_only_internet_gateway = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_egress_only_internet_gateway(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.egress_only_internet_gateway
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn nat_gateway(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.nat_gateway = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_nat_gateway(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.nat_gateway = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_nat_gateway(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.nat_gateway
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn virtual_private_gateway(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.virtual_private_gateway = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_virtual_private_gateway(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.virtual_private_gateway = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_virtual_private_gateway(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.virtual_private_gateway
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_peering(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.vpc_peering = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_vpc_peering(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.vpc_peering = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_vpc_peering(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.vpc_peering
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn lambda(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.lambda = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_lambda(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.lambda = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_lambda(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.lambda
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn vpc_lattice(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.vpc_lattice = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_vpc_lattice(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.vpc_lattice = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_vpc_lattice(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.vpc_lattice
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn elastic_file_system(mut self, input: crate::types::VpcEncryptionControlExclusion) -> Self {
        self.elastic_file_system = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_elastic_file_system(mut self, input: ::std::option::Option<crate::types::VpcEncryptionControlExclusion>) -> Self {
        self.elastic_file_system = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_elastic_file_system(&self) -> &::std::option::Option<crate::types::VpcEncryptionControlExclusion> {
        &self.elastic_file_system
    }
    /// Consumes the builder and constructs a [`VpcEncryptionControlExclusions`](crate::types::VpcEncryptionControlExclusions).
    pub fn build(self) -> crate::types::VpcEncryptionControlExclusions {
        crate::types::VpcEncryptionControlExclusions {
            internet_gateway: self.internet_gateway,
            egress_only_internet_gateway: self.egress_only_internet_gateway,
            nat_gateway: self.nat_gateway,
            virtual_private_gateway: self.virtual_private_gateway,
            vpc_peering: self.vpc_peering,
            lambda: self.lambda,
            vpc_lattice: self.vpc_lattice,
            elastic_file_system: self.elastic_file_system,
        }
    }
}
