// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the transit gateway multicast group resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransitGatewayMulticastGroup {
    /// <p>The IP address assigned to the transit gateway multicast group.</p>
    #[doc(hidden)]
    pub group_ip_address: std::option::Option<std::string::String>,
    /// <p>The ID of the transit gateway attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_attachment_id: std::option::Option<std::string::String>,
    /// <p>The ID of the subnet.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The ID of the resource.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The type of resource, for example a VPC attachment.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::TransitGatewayAttachmentResourceType>,
    /// <p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain group resource.</p>
    #[doc(hidden)]
    pub resource_owner_id: std::option::Option<std::string::String>,
    /// <p>The ID of the transit gateway attachment.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    #[doc(hidden)]
    pub group_member: std::option::Option<bool>,
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    #[doc(hidden)]
    pub group_source: std::option::Option<bool>,
    /// <p>The member type (for example, <code>static</code>).</p>
    #[doc(hidden)]
    pub member_type: std::option::Option<crate::types::MembershipType>,
    /// <p>The source type.</p>
    #[doc(hidden)]
    pub source_type: std::option::Option<crate::types::MembershipType>,
}
impl TransitGatewayMulticastGroup {
    /// <p>The IP address assigned to the transit gateway multicast group.</p>
    pub fn group_ip_address(&self) -> std::option::Option<&str> {
        self.group_ip_address.as_deref()
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn transit_gateway_attachment_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_attachment_id.as_deref()
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The ID of the resource.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The type of resource, for example a VPC attachment.</p>
    pub fn resource_type(
        &self,
    ) -> std::option::Option<&crate::types::TransitGatewayAttachmentResourceType> {
        self.resource_type.as_ref()
    }
    /// <p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain group resource.</p>
    pub fn resource_owner_id(&self) -> std::option::Option<&str> {
        self.resource_owner_id.as_deref()
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    pub fn group_member(&self) -> std::option::Option<bool> {
        self.group_member
    }
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    pub fn group_source(&self) -> std::option::Option<bool> {
        self.group_source
    }
    /// <p>The member type (for example, <code>static</code>).</p>
    pub fn member_type(&self) -> std::option::Option<&crate::types::MembershipType> {
        self.member_type.as_ref()
    }
    /// <p>The source type.</p>
    pub fn source_type(&self) -> std::option::Option<&crate::types::MembershipType> {
        self.source_type.as_ref()
    }
}
impl TransitGatewayMulticastGroup {
    /// Creates a new builder-style object to manufacture [`TransitGatewayMulticastGroup`](crate::types::TransitGatewayMulticastGroup).
    pub fn builder() -> crate::types::builders::TransitGatewayMulticastGroupBuilder {
        crate::types::builders::TransitGatewayMulticastGroupBuilder::default()
    }
}

/// A builder for [`TransitGatewayMulticastGroup`](crate::types::TransitGatewayMulticastGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransitGatewayMulticastGroupBuilder {
    pub(crate) group_ip_address: std::option::Option<std::string::String>,
    pub(crate) transit_gateway_attachment_id: std::option::Option<std::string::String>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_type:
        std::option::Option<crate::types::TransitGatewayAttachmentResourceType>,
    pub(crate) resource_owner_id: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) group_member: std::option::Option<bool>,
    pub(crate) group_source: std::option::Option<bool>,
    pub(crate) member_type: std::option::Option<crate::types::MembershipType>,
    pub(crate) source_type: std::option::Option<crate::types::MembershipType>,
}
impl TransitGatewayMulticastGroupBuilder {
    /// <p>The IP address assigned to the transit gateway multicast group.</p>
    pub fn group_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_ip_address = Some(input.into());
        self
    }
    /// <p>The IP address assigned to the transit gateway multicast group.</p>
    pub fn set_group_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_ip_address = input;
        self
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn transit_gateway_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn set_transit_gateway_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_attachment_id = input;
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The ID of the resource.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The type of resource, for example a VPC attachment.</p>
    pub fn resource_type(
        mut self,
        input: crate::types::TransitGatewayAttachmentResourceType,
    ) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of resource, for example a VPC attachment.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::TransitGatewayAttachmentResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain group resource.</p>
    pub fn resource_owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_owner_id = Some(input.into());
        self
    }
    /// <p> The ID of the Amazon Web Services account that owns the transit gateway multicast domain group resource.</p>
    pub fn set_resource_owner_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_owner_id = input;
        self
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the transit gateway attachment.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    pub fn group_member(mut self, input: bool) -> Self {
        self.group_member = Some(input);
        self
    }
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    pub fn set_group_member(mut self, input: std::option::Option<bool>) -> Self {
        self.group_member = input;
        self
    }
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    pub fn group_source(mut self, input: bool) -> Self {
        self.group_source = Some(input);
        self
    }
    /// <p>Indicates that the resource is a transit gateway multicast group member.</p>
    pub fn set_group_source(mut self, input: std::option::Option<bool>) -> Self {
        self.group_source = input;
        self
    }
    /// <p>The member type (for example, <code>static</code>).</p>
    pub fn member_type(mut self, input: crate::types::MembershipType) -> Self {
        self.member_type = Some(input);
        self
    }
    /// <p>The member type (for example, <code>static</code>).</p>
    pub fn set_member_type(
        mut self,
        input: std::option::Option<crate::types::MembershipType>,
    ) -> Self {
        self.member_type = input;
        self
    }
    /// <p>The source type.</p>
    pub fn source_type(mut self, input: crate::types::MembershipType) -> Self {
        self.source_type = Some(input);
        self
    }
    /// <p>The source type.</p>
    pub fn set_source_type(
        mut self,
        input: std::option::Option<crate::types::MembershipType>,
    ) -> Self {
        self.source_type = input;
        self
    }
    /// Consumes the builder and constructs a [`TransitGatewayMulticastGroup`](crate::types::TransitGatewayMulticastGroup).
    pub fn build(self) -> crate::types::TransitGatewayMulticastGroup {
        crate::types::TransitGatewayMulticastGroup {
            group_ip_address: self.group_ip_address,
            transit_gateway_attachment_id: self.transit_gateway_attachment_id,
            subnet_id: self.subnet_id,
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            resource_owner_id: self.resource_owner_id,
            network_interface_id: self.network_interface_id,
            group_member: self.group_member,
            group_source: self.group_source,
            member_type: self.member_type,
            source_type: self.source_type,
        }
    }
}
