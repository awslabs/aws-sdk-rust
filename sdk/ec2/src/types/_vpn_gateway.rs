// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a virtual private gateway.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpnGateway {
    /// <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the virtual private gateway.</p>
    pub state: ::std::option::Option<crate::types::VpnState>,
    /// <p>The type of VPN connection the virtual private gateway supports.</p>
    pub r#type: ::std::option::Option<crate::types::GatewayType>,
    /// <p>Any VPCs attached to the virtual private gateway.</p>
    pub vpc_attachments: ::std::option::Option<::std::vec::Vec<crate::types::VpcAttachment>>,
    /// <p>The ID of the virtual private gateway.</p>
    pub vpn_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The private Autonomous System Number (ASN) for the Amazon side of a BGP session.</p>
    pub amazon_side_asn: ::std::option::Option<i64>,
    /// <p>Any tags assigned to the virtual private gateway.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpnGateway {
    /// <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The current state of the virtual private gateway.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::VpnState> {
        self.state.as_ref()
    }
    /// <p>The type of VPN connection the virtual private gateway supports.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::GatewayType> {
        self.r#type.as_ref()
    }
    /// <p>Any VPCs attached to the virtual private gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_attachments.is_none()`.
    pub fn vpc_attachments(&self) -> &[crate::types::VpcAttachment] {
        self.vpc_attachments.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the virtual private gateway.</p>
    pub fn vpn_gateway_id(&self) -> ::std::option::Option<&str> {
        self.vpn_gateway_id.as_deref()
    }
    /// <p>The private Autonomous System Number (ASN) for the Amazon side of a BGP session.</p>
    pub fn amazon_side_asn(&self) -> ::std::option::Option<i64> {
        self.amazon_side_asn
    }
    /// <p>Any tags assigned to the virtual private gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VpnGateway {
    /// Creates a new builder-style object to manufacture [`VpnGateway`](crate::types::VpnGateway).
    pub fn builder() -> crate::types::builders::VpnGatewayBuilder {
        crate::types::builders::VpnGatewayBuilder::default()
    }
}

/// A builder for [`VpnGateway`](crate::types::VpnGateway).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpnGatewayBuilder {
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::VpnState>,
    pub(crate) r#type: ::std::option::Option<crate::types::GatewayType>,
    pub(crate) vpc_attachments: ::std::option::Option<::std::vec::Vec<crate::types::VpcAttachment>>,
    pub(crate) vpn_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) amazon_side_asn: ::std::option::Option<i64>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpnGatewayBuilder {
    /// <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The current state of the virtual private gateway.</p>
    pub fn state(mut self, input: crate::types::VpnState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the virtual private gateway.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::VpnState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the virtual private gateway.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::VpnState> {
        &self.state
    }
    /// <p>The type of VPN connection the virtual private gateway supports.</p>
    pub fn r#type(mut self, input: crate::types::GatewayType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of VPN connection the virtual private gateway supports.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GatewayType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of VPN connection the virtual private gateway supports.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GatewayType> {
        &self.r#type
    }
    /// Appends an item to `vpc_attachments`.
    ///
    /// To override the contents of this collection use [`set_vpc_attachments`](Self::set_vpc_attachments).
    ///
    /// <p>Any VPCs attached to the virtual private gateway.</p>
    pub fn vpc_attachments(mut self, input: crate::types::VpcAttachment) -> Self {
        let mut v = self.vpc_attachments.unwrap_or_default();
        v.push(input);
        self.vpc_attachments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any VPCs attached to the virtual private gateway.</p>
    pub fn set_vpc_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VpcAttachment>>) -> Self {
        self.vpc_attachments = input;
        self
    }
    /// <p>Any VPCs attached to the virtual private gateway.</p>
    pub fn get_vpc_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VpcAttachment>> {
        &self.vpc_attachments
    }
    /// <p>The ID of the virtual private gateway.</p>
    pub fn vpn_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpn_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual private gateway.</p>
    pub fn set_vpn_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpn_gateway_id = input;
        self
    }
    /// <p>The ID of the virtual private gateway.</p>
    pub fn get_vpn_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpn_gateway_id
    }
    /// <p>The private Autonomous System Number (ASN) for the Amazon side of a BGP session.</p>
    pub fn amazon_side_asn(mut self, input: i64) -> Self {
        self.amazon_side_asn = ::std::option::Option::Some(input);
        self
    }
    /// <p>The private Autonomous System Number (ASN) for the Amazon side of a BGP session.</p>
    pub fn set_amazon_side_asn(mut self, input: ::std::option::Option<i64>) -> Self {
        self.amazon_side_asn = input;
        self
    }
    /// <p>The private Autonomous System Number (ASN) for the Amazon side of a BGP session.</p>
    pub fn get_amazon_side_asn(&self) -> &::std::option::Option<i64> {
        &self.amazon_side_asn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the virtual private gateway.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the virtual private gateway.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the virtual private gateway.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VpnGateway`](crate::types::VpnGateway).
    pub fn build(self) -> crate::types::VpnGateway {
        crate::types::VpnGateway {
            availability_zone: self.availability_zone,
            state: self.state,
            r#type: self.r#type,
            vpc_attachments: self.vpc_attachments,
            vpn_gateway_id: self.vpn_gateway_id,
            amazon_side_asn: self.amazon_side_asn,
            tags: self.tags,
        }
    }
}
