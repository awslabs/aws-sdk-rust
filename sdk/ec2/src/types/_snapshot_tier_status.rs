// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a snapshot's storage tier.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnapshotTierStatus {
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the volume from which the snapshot was created.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the snapshot.</p>
    pub status: ::std::option::Option<crate::types::SnapshotState>,
    /// <p>The ID of the Amazon Web Services account that owns the snapshot.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags that are assigned to the snapshot.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    pub storage_tier: ::std::option::Option<crate::types::StorageTier>,
    /// <p>The date and time when the last archive or restore process was started.</p>
    pub last_tiering_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The progress of the last archive or restore process, as a percentage.</p>
    pub last_tiering_progress: ::std::option::Option<i32>,
    /// <p>The status of the last archive or restore process.</p>
    pub last_tiering_operation_status: ::std::option::Option<crate::types::TieringOperationStatus>,
    /// <p>A message describing the status of the last archive or restore process.</p>
    pub last_tiering_operation_status_detail: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the last archive process was completed.</p>
    pub archival_complete_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    pub restore_expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SnapshotTierStatus {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The ID of the volume from which the snapshot was created.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The state of the snapshot.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SnapshotState> {
        self.status.as_ref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the snapshot.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The tags that are assigned to the snapshot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    pub fn storage_tier(&self) -> ::std::option::Option<&crate::types::StorageTier> {
        self.storage_tier.as_ref()
    }
    /// <p>The date and time when the last archive or restore process was started.</p>
    pub fn last_tiering_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_tiering_start_time.as_ref()
    }
    /// <p>The progress of the last archive or restore process, as a percentage.</p>
    pub fn last_tiering_progress(&self) -> ::std::option::Option<i32> {
        self.last_tiering_progress
    }
    /// <p>The status of the last archive or restore process.</p>
    pub fn last_tiering_operation_status(&self) -> ::std::option::Option<&crate::types::TieringOperationStatus> {
        self.last_tiering_operation_status.as_ref()
    }
    /// <p>A message describing the status of the last archive or restore process.</p>
    pub fn last_tiering_operation_status_detail(&self) -> ::std::option::Option<&str> {
        self.last_tiering_operation_status_detail.as_deref()
    }
    /// <p>The date and time when the last archive process was completed.</p>
    pub fn archival_complete_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.archival_complete_time.as_ref()
    }
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    pub fn restore_expiry_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.restore_expiry_time.as_ref()
    }
}
impl SnapshotTierStatus {
    /// Creates a new builder-style object to manufacture [`SnapshotTierStatus`](crate::types::SnapshotTierStatus).
    pub fn builder() -> crate::types::builders::SnapshotTierStatusBuilder {
        crate::types::builders::SnapshotTierStatusBuilder::default()
    }
}

/// A builder for [`SnapshotTierStatus`](crate::types::SnapshotTierStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnapshotTierStatusBuilder {
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SnapshotState>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) storage_tier: ::std::option::Option<crate::types::StorageTier>,
    pub(crate) last_tiering_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_tiering_progress: ::std::option::Option<i32>,
    pub(crate) last_tiering_operation_status: ::std::option::Option<crate::types::TieringOperationStatus>,
    pub(crate) last_tiering_operation_status_detail: ::std::option::Option<::std::string::String>,
    pub(crate) archival_complete_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) restore_expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SnapshotTierStatusBuilder {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// <p>The ID of the volume from which the snapshot was created.</p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the volume from which the snapshot was created.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The ID of the volume from which the snapshot was created.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The state of the snapshot.</p>
    pub fn status(mut self, input: crate::types::SnapshotState) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the snapshot.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SnapshotState>) -> Self {
        self.status = input;
        self
    }
    /// <p>The state of the snapshot.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SnapshotState> {
        &self.status
    }
    /// <p>The ID of the Amazon Web Services account that owns the snapshot.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the snapshot.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the snapshot.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that are assigned to the snapshot.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags that are assigned to the snapshot.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that are assigned to the snapshot.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    pub fn storage_tier(mut self, input: crate::types::StorageTier) -> Self {
        self.storage_tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    pub fn set_storage_tier(mut self, input: ::std::option::Option<crate::types::StorageTier>) -> Self {
        self.storage_tier = input;
        self
    }
    /// <p>The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.</p>
    pub fn get_storage_tier(&self) -> &::std::option::Option<crate::types::StorageTier> {
        &self.storage_tier
    }
    /// <p>The date and time when the last archive or restore process was started.</p>
    pub fn last_tiering_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_tiering_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the last archive or restore process was started.</p>
    pub fn set_last_tiering_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_tiering_start_time = input;
        self
    }
    /// <p>The date and time when the last archive or restore process was started.</p>
    pub fn get_last_tiering_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_tiering_start_time
    }
    /// <p>The progress of the last archive or restore process, as a percentage.</p>
    pub fn last_tiering_progress(mut self, input: i32) -> Self {
        self.last_tiering_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The progress of the last archive or restore process, as a percentage.</p>
    pub fn set_last_tiering_progress(mut self, input: ::std::option::Option<i32>) -> Self {
        self.last_tiering_progress = input;
        self
    }
    /// <p>The progress of the last archive or restore process, as a percentage.</p>
    pub fn get_last_tiering_progress(&self) -> &::std::option::Option<i32> {
        &self.last_tiering_progress
    }
    /// <p>The status of the last archive or restore process.</p>
    pub fn last_tiering_operation_status(mut self, input: crate::types::TieringOperationStatus) -> Self {
        self.last_tiering_operation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the last archive or restore process.</p>
    pub fn set_last_tiering_operation_status(mut self, input: ::std::option::Option<crate::types::TieringOperationStatus>) -> Self {
        self.last_tiering_operation_status = input;
        self
    }
    /// <p>The status of the last archive or restore process.</p>
    pub fn get_last_tiering_operation_status(&self) -> &::std::option::Option<crate::types::TieringOperationStatus> {
        &self.last_tiering_operation_status
    }
    /// <p>A message describing the status of the last archive or restore process.</p>
    pub fn last_tiering_operation_status_detail(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_tiering_operation_status_detail = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the status of the last archive or restore process.</p>
    pub fn set_last_tiering_operation_status_detail(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_tiering_operation_status_detail = input;
        self
    }
    /// <p>A message describing the status of the last archive or restore process.</p>
    pub fn get_last_tiering_operation_status_detail(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_tiering_operation_status_detail
    }
    /// <p>The date and time when the last archive process was completed.</p>
    pub fn archival_complete_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.archival_complete_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the last archive process was completed.</p>
    pub fn set_archival_complete_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.archival_complete_time = input;
        self
    }
    /// <p>The date and time when the last archive process was completed.</p>
    pub fn get_archival_complete_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.archival_complete_time
    }
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    pub fn restore_expiry_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.restore_expiry_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    pub fn set_restore_expiry_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.restore_expiry_time = input;
        self
    }
    /// <p>Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.</p>
    pub fn get_restore_expiry_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.restore_expiry_time
    }
    /// Consumes the builder and constructs a [`SnapshotTierStatus`](crate::types::SnapshotTierStatus).
    pub fn build(self) -> crate::types::SnapshotTierStatus {
        crate::types::SnapshotTierStatus {
            snapshot_id: self.snapshot_id,
            volume_id: self.volume_id,
            status: self.status,
            owner_id: self.owner_id,
            tags: self.tags,
            storage_tier: self.storage_tier,
            last_tiering_start_time: self.last_tiering_start_time,
            last_tiering_progress: self.last_tiering_progress,
            last_tiering_operation_status: self.last_tiering_operation_status,
            last_tiering_operation_status_detail: self.last_tiering_operation_status_detail,
            archival_complete_time: self.archival_complete_time,
            restore_expiry_time: self.restore_expiry_time,
        }
    }
}
