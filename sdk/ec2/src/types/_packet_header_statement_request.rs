// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a packet header statement.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PacketHeaderStatementRequest {
    /// <p>The source addresses.</p>
    pub source_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The destination addresses.</p>
    pub destination_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The source ports.</p>
    pub source_ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The destination ports.</p>
    pub destination_ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The source prefix lists.</p>
    pub source_prefix_lists: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The destination prefix lists.</p>
    pub destination_prefix_lists: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The protocols.</p>
    pub protocols: ::std::option::Option<::std::vec::Vec<crate::types::Protocol>>,
}
impl PacketHeaderStatementRequest {
    /// <p>The source addresses.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_addresses.is_none()`.
    pub fn source_addresses(&self) -> &[::std::string::String] {
        self.source_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The destination addresses.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_addresses.is_none()`.
    pub fn destination_addresses(&self) -> &[::std::string::String] {
        self.destination_addresses.as_deref().unwrap_or_default()
    }
    /// <p>The source ports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_ports.is_none()`.
    pub fn source_ports(&self) -> &[::std::string::String] {
        self.source_ports.as_deref().unwrap_or_default()
    }
    /// <p>The destination ports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_ports.is_none()`.
    pub fn destination_ports(&self) -> &[::std::string::String] {
        self.destination_ports.as_deref().unwrap_or_default()
    }
    /// <p>The source prefix lists.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_prefix_lists.is_none()`.
    pub fn source_prefix_lists(&self) -> &[::std::string::String] {
        self.source_prefix_lists.as_deref().unwrap_or_default()
    }
    /// <p>The destination prefix lists.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_prefix_lists.is_none()`.
    pub fn destination_prefix_lists(&self) -> &[::std::string::String] {
        self.destination_prefix_lists.as_deref().unwrap_or_default()
    }
    /// <p>The protocols.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.protocols.is_none()`.
    pub fn protocols(&self) -> &[crate::types::Protocol] {
        self.protocols.as_deref().unwrap_or_default()
    }
}
impl PacketHeaderStatementRequest {
    /// Creates a new builder-style object to manufacture [`PacketHeaderStatementRequest`](crate::types::PacketHeaderStatementRequest).
    pub fn builder() -> crate::types::builders::PacketHeaderStatementRequestBuilder {
        crate::types::builders::PacketHeaderStatementRequestBuilder::default()
    }
}

/// A builder for [`PacketHeaderStatementRequest`](crate::types::PacketHeaderStatementRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PacketHeaderStatementRequestBuilder {
    pub(crate) source_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) destination_addresses: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) destination_ports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_prefix_lists: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) destination_prefix_lists: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) protocols: ::std::option::Option<::std::vec::Vec<crate::types::Protocol>>,
}
impl PacketHeaderStatementRequestBuilder {
    /// Appends an item to `source_addresses`.
    ///
    /// To override the contents of this collection use [`set_source_addresses`](Self::set_source_addresses).
    ///
    /// <p>The source addresses.</p>
    pub fn source_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_addresses.unwrap_or_default();
        v.push(input.into());
        self.source_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source addresses.</p>
    pub fn set_source_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_addresses = input;
        self
    }
    /// <p>The source addresses.</p>
    pub fn get_source_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_addresses
    }
    /// Appends an item to `destination_addresses`.
    ///
    /// To override the contents of this collection use [`set_destination_addresses`](Self::set_destination_addresses).
    ///
    /// <p>The destination addresses.</p>
    pub fn destination_addresses(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destination_addresses.unwrap_or_default();
        v.push(input.into());
        self.destination_addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination addresses.</p>
    pub fn set_destination_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destination_addresses = input;
        self
    }
    /// <p>The destination addresses.</p>
    pub fn get_destination_addresses(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destination_addresses
    }
    /// Appends an item to `source_ports`.
    ///
    /// To override the contents of this collection use [`set_source_ports`](Self::set_source_ports).
    ///
    /// <p>The source ports.</p>
    pub fn source_ports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_ports.unwrap_or_default();
        v.push(input.into());
        self.source_ports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source ports.</p>
    pub fn set_source_ports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_ports = input;
        self
    }
    /// <p>The source ports.</p>
    pub fn get_source_ports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_ports
    }
    /// Appends an item to `destination_ports`.
    ///
    /// To override the contents of this collection use [`set_destination_ports`](Self::set_destination_ports).
    ///
    /// <p>The destination ports.</p>
    pub fn destination_ports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destination_ports.unwrap_or_default();
        v.push(input.into());
        self.destination_ports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination ports.</p>
    pub fn set_destination_ports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destination_ports = input;
        self
    }
    /// <p>The destination ports.</p>
    pub fn get_destination_ports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destination_ports
    }
    /// Appends an item to `source_prefix_lists`.
    ///
    /// To override the contents of this collection use [`set_source_prefix_lists`](Self::set_source_prefix_lists).
    ///
    /// <p>The source prefix lists.</p>
    pub fn source_prefix_lists(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_prefix_lists.unwrap_or_default();
        v.push(input.into());
        self.source_prefix_lists = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source prefix lists.</p>
    pub fn set_source_prefix_lists(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_prefix_lists = input;
        self
    }
    /// <p>The source prefix lists.</p>
    pub fn get_source_prefix_lists(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_prefix_lists
    }
    /// Appends an item to `destination_prefix_lists`.
    ///
    /// To override the contents of this collection use [`set_destination_prefix_lists`](Self::set_destination_prefix_lists).
    ///
    /// <p>The destination prefix lists.</p>
    pub fn destination_prefix_lists(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destination_prefix_lists.unwrap_or_default();
        v.push(input.into());
        self.destination_prefix_lists = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination prefix lists.</p>
    pub fn set_destination_prefix_lists(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destination_prefix_lists = input;
        self
    }
    /// <p>The destination prefix lists.</p>
    pub fn get_destination_prefix_lists(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destination_prefix_lists
    }
    /// Appends an item to `protocols`.
    ///
    /// To override the contents of this collection use [`set_protocols`](Self::set_protocols).
    ///
    /// <p>The protocols.</p>
    pub fn protocols(mut self, input: crate::types::Protocol) -> Self {
        let mut v = self.protocols.unwrap_or_default();
        v.push(input);
        self.protocols = ::std::option::Option::Some(v);
        self
    }
    /// <p>The protocols.</p>
    pub fn set_protocols(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Protocol>>) -> Self {
        self.protocols = input;
        self
    }
    /// <p>The protocols.</p>
    pub fn get_protocols(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Protocol>> {
        &self.protocols
    }
    /// Consumes the builder and constructs a [`PacketHeaderStatementRequest`](crate::types::PacketHeaderStatementRequest).
    pub fn build(self) -> crate::types::PacketHeaderStatementRequest {
        crate::types::PacketHeaderStatementRequest {
            source_addresses: self.source_addresses,
            destination_addresses: self.destination_addresses,
            source_ports: self.source_ports,
            destination_ports: self.destination_ports,
            source_prefix_lists: self.source_prefix_lists,
            destination_prefix_lists: self.destination_prefix_lists,
            protocols: self.protocols,
        }
    }
}
