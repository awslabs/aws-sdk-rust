// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for Amazon S3 as a logging destination.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VerifiedAccessLogS3Destination {
    /// <p>Indicates whether logging is enabled.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The delivery status.</p>
    #[doc(hidden)]
    pub delivery_status: std::option::Option<crate::types::VerifiedAccessLogDeliveryStatus>,
    /// <p>The bucket name.</p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p>The bucket prefix.</p>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account number that owns the bucket.</p>
    #[doc(hidden)]
    pub bucket_owner: std::option::Option<std::string::String>,
}
impl VerifiedAccessLogS3Destination {
    /// <p>Indicates whether logging is enabled.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The delivery status.</p>
    pub fn delivery_status(
        &self,
    ) -> std::option::Option<&crate::types::VerifiedAccessLogDeliveryStatus> {
        self.delivery_status.as_ref()
    }
    /// <p>The bucket name.</p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The bucket prefix.</p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>The Amazon Web Services account number that owns the bucket.</p>
    pub fn bucket_owner(&self) -> std::option::Option<&str> {
        self.bucket_owner.as_deref()
    }
}
impl VerifiedAccessLogS3Destination {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessLogS3Destination`](crate::types::VerifiedAccessLogS3Destination).
    pub fn builder() -> crate::types::builders::VerifiedAccessLogS3DestinationBuilder {
        crate::types::builders::VerifiedAccessLogS3DestinationBuilder::default()
    }
}

/// A builder for [`VerifiedAccessLogS3Destination`](crate::types::VerifiedAccessLogS3Destination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VerifiedAccessLogS3DestinationBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) delivery_status: std::option::Option<crate::types::VerifiedAccessLogDeliveryStatus>,
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) bucket_owner: std::option::Option<std::string::String>,
}
impl VerifiedAccessLogS3DestinationBuilder {
    /// <p>Indicates whether logging is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates whether logging is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The delivery status.</p>
    pub fn delivery_status(mut self, input: crate::types::VerifiedAccessLogDeliveryStatus) -> Self {
        self.delivery_status = Some(input);
        self
    }
    /// <p>The delivery status.</p>
    pub fn set_delivery_status(
        mut self,
        input: std::option::Option<crate::types::VerifiedAccessLogDeliveryStatus>,
    ) -> Self {
        self.delivery_status = input;
        self
    }
    /// <p>The bucket name.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>The bucket name.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The bucket prefix.</p>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p>The bucket prefix.</p>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The Amazon Web Services account number that owns the bucket.</p>
    pub fn bucket_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_owner = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account number that owns the bucket.</p>
    pub fn set_bucket_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_owner = input;
        self
    }
    /// Consumes the builder and constructs a [`VerifiedAccessLogS3Destination`](crate::types::VerifiedAccessLogS3Destination).
    pub fn build(self) -> crate::types::VerifiedAccessLogS3Destination {
        crate::types::VerifiedAccessLogS3Destination {
            enabled: self.enabled,
            delivery_status: self.delivery_status,
            bucket_name: self.bucket_name,
            prefix: self.prefix,
            bucket_owner: self.bucket_owner,
        }
    }
}
