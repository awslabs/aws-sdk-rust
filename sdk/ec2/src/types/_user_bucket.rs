// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Amazon S3 bucket for the disk image.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserBucket {
    /// <p>The name of the Amazon S3 bucket where the disk image is located.</p>
    #[doc(hidden)]
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The file name of the disk image.</p>
    #[doc(hidden)]
    pub s3_key: std::option::Option<std::string::String>,
}
impl UserBucket {
    /// <p>The name of the Amazon S3 bucket where the disk image is located.</p>
    pub fn s3_bucket(&self) -> std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The file name of the disk image.</p>
    pub fn s3_key(&self) -> std::option::Option<&str> {
        self.s3_key.as_deref()
    }
}
impl UserBucket {
    /// Creates a new builder-style object to manufacture [`UserBucket`](crate::types::UserBucket).
    pub fn builder() -> crate::types::builders::UserBucketBuilder {
        crate::types::builders::UserBucketBuilder::default()
    }
}

/// A builder for [`UserBucket`](crate::types::UserBucket).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserBucketBuilder {
    pub(crate) s3_bucket: std::option::Option<std::string::String>,
    pub(crate) s3_key: std::option::Option<std::string::String>,
}
impl UserBucketBuilder {
    /// <p>The name of the Amazon S3 bucket where the disk image is located.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket = Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where the disk image is located.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The file name of the disk image.</p>
    pub fn s3_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_key = Some(input.into());
        self
    }
    /// <p>The file name of the disk image.</p>
    pub fn set_s3_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_key = input;
        self
    }
    /// Consumes the builder and constructs a [`UserBucket`](crate::types::UserBucket).
    pub fn build(self) -> crate::types::UserBucket {
        crate::types::UserBucket {
            s3_bucket: self.s3_bucket,
            s3_key: self.s3_key,
        }
    }
}
