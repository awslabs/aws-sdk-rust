// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the number of instances that can be launched onto the Dedicated Host.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceCapacity {
    /// <p>The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.</p>
    #[doc(hidden)]
    pub available_capacity: std::option::Option<i32>,
    /// <p>The instance type supported by the Dedicated Host.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.</p>
    #[doc(hidden)]
    pub total_capacity: std::option::Option<i32>,
}
impl InstanceCapacity {
    /// <p>The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.</p>
    pub fn available_capacity(&self) -> std::option::Option<i32> {
        self.available_capacity
    }
    /// <p>The instance type supported by the Dedicated Host.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.</p>
    pub fn total_capacity(&self) -> std::option::Option<i32> {
        self.total_capacity
    }
}
impl InstanceCapacity {
    /// Creates a new builder-style object to manufacture [`InstanceCapacity`](crate::types::InstanceCapacity).
    pub fn builder() -> crate::types::builders::InstanceCapacityBuilder {
        crate::types::builders::InstanceCapacityBuilder::default()
    }
}

/// A builder for [`InstanceCapacity`](crate::types::InstanceCapacity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceCapacityBuilder {
    pub(crate) available_capacity: std::option::Option<i32>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) total_capacity: std::option::Option<i32>,
}
impl InstanceCapacityBuilder {
    /// <p>The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.</p>
    pub fn available_capacity(mut self, input: i32) -> Self {
        self.available_capacity = Some(input);
        self
    }
    /// <p>The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.</p>
    pub fn set_available_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.available_capacity = input;
        self
    }
    /// <p>The instance type supported by the Dedicated Host.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type supported by the Dedicated Host.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.</p>
    pub fn total_capacity(mut self, input: i32) -> Self {
        self.total_capacity = Some(input);
        self
    }
    /// <p>The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.</p>
    pub fn set_total_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.total_capacity = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceCapacity`](crate::types::InstanceCapacity).
    pub fn build(self) -> crate::types::InstanceCapacity {
        crate::types::InstanceCapacity {
            available_capacity: self.available_capacity,
            instance_type: self.instance_type,
            total_capacity: self.total_capacity,
        }
    }
}
