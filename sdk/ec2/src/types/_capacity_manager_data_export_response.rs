// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a Capacity Manager data export configuration, including export settings, delivery status, and recent export activity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityManagerDataExportResponse {
    /// <p>The unique identifier for the data export configuration.</p>
    pub capacity_manager_data_export_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the S3 bucket where export files are delivered.</p>
    pub s3_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The S3 key prefix used for organizing export files within the bucket.</p>
    pub s3_bucket_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The frequency at which data exports are generated.</p>
    pub schedule: ::std::option::Option<crate::types::Schedule>,
    /// <p>The file format of the exported data.</p>
    pub output_format: ::std::option::Option<crate::types::OutputFormat>,
    /// <p>The timestamp when the data export configuration was created.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the most recent export delivery.</p>
    pub latest_delivery_status: ::std::option::Option<crate::types::CapacityManagerDataExportStatus>,
    /// <p>A message describing the status of the most recent export delivery, including any error details if the delivery failed.</p>
    pub latest_delivery_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The S3 URI of the most recently delivered export file.</p>
    pub latest_delivery_s3_location_uri: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the most recent export was delivered to S3.</p>
    pub latest_delivery_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The tags associated with the data export configuration.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CapacityManagerDataExportResponse {
    /// <p>The unique identifier for the data export configuration.</p>
    pub fn capacity_manager_data_export_id(&self) -> ::std::option::Option<&str> {
        self.capacity_manager_data_export_id.as_deref()
    }
    /// <p>The name of the S3 bucket where export files are delivered.</p>
    pub fn s3_bucket_name(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The S3 key prefix used for organizing export files within the bucket.</p>
    pub fn s3_bucket_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_prefix.as_deref()
    }
    /// <p>The frequency at which data exports are generated.</p>
    pub fn schedule(&self) -> ::std::option::Option<&crate::types::Schedule> {
        self.schedule.as_ref()
    }
    /// <p>The file format of the exported data.</p>
    pub fn output_format(&self) -> ::std::option::Option<&crate::types::OutputFormat> {
        self.output_format.as_ref()
    }
    /// <p>The timestamp when the data export configuration was created.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The status of the most recent export delivery.</p>
    pub fn latest_delivery_status(&self) -> ::std::option::Option<&crate::types::CapacityManagerDataExportStatus> {
        self.latest_delivery_status.as_ref()
    }
    /// <p>A message describing the status of the most recent export delivery, including any error details if the delivery failed.</p>
    pub fn latest_delivery_status_message(&self) -> ::std::option::Option<&str> {
        self.latest_delivery_status_message.as_deref()
    }
    /// <p>The S3 URI of the most recently delivered export file.</p>
    pub fn latest_delivery_s3_location_uri(&self) -> ::std::option::Option<&str> {
        self.latest_delivery_s3_location_uri.as_deref()
    }
    /// <p>The timestamp when the most recent export was delivered to S3.</p>
    pub fn latest_delivery_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.latest_delivery_time.as_ref()
    }
    /// <p>The tags associated with the data export configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CapacityManagerDataExportResponse {
    /// Creates a new builder-style object to manufacture [`CapacityManagerDataExportResponse`](crate::types::CapacityManagerDataExportResponse).
    pub fn builder() -> crate::types::builders::CapacityManagerDataExportResponseBuilder {
        crate::types::builders::CapacityManagerDataExportResponseBuilder::default()
    }
}

/// A builder for [`CapacityManagerDataExportResponse`](crate::types::CapacityManagerDataExportResponse).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityManagerDataExportResponseBuilder {
    pub(crate) capacity_manager_data_export_id: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) schedule: ::std::option::Option<crate::types::Schedule>,
    pub(crate) output_format: ::std::option::Option<crate::types::OutputFormat>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) latest_delivery_status: ::std::option::Option<crate::types::CapacityManagerDataExportStatus>,
    pub(crate) latest_delivery_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) latest_delivery_s3_location_uri: ::std::option::Option<::std::string::String>,
    pub(crate) latest_delivery_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CapacityManagerDataExportResponseBuilder {
    /// <p>The unique identifier for the data export configuration.</p>
    pub fn capacity_manager_data_export_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_manager_data_export_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the data export configuration.</p>
    pub fn set_capacity_manager_data_export_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_manager_data_export_id = input;
        self
    }
    /// <p>The unique identifier for the data export configuration.</p>
    pub fn get_capacity_manager_data_export_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_manager_data_export_id
    }
    /// <p>The name of the S3 bucket where export files are delivered.</p>
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket where export files are delivered.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The name of the S3 bucket where export files are delivered.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>The S3 key prefix used for organizing export files within the bucket.</p>
    pub fn s3_bucket_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 key prefix used for organizing export files within the bucket.</p>
    pub fn set_s3_bucket_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_prefix = input;
        self
    }
    /// <p>The S3 key prefix used for organizing export files within the bucket.</p>
    pub fn get_s3_bucket_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_prefix
    }
    /// <p>The frequency at which data exports are generated.</p>
    pub fn schedule(mut self, input: crate::types::Schedule) -> Self {
        self.schedule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency at which data exports are generated.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::Schedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The frequency at which data exports are generated.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::Schedule> {
        &self.schedule
    }
    /// <p>The file format of the exported data.</p>
    pub fn output_format(mut self, input: crate::types::OutputFormat) -> Self {
        self.output_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file format of the exported data.</p>
    pub fn set_output_format(mut self, input: ::std::option::Option<crate::types::OutputFormat>) -> Self {
        self.output_format = input;
        self
    }
    /// <p>The file format of the exported data.</p>
    pub fn get_output_format(&self) -> &::std::option::Option<crate::types::OutputFormat> {
        &self.output_format
    }
    /// <p>The timestamp when the data export configuration was created.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the data export configuration was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The timestamp when the data export configuration was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The status of the most recent export delivery.</p>
    pub fn latest_delivery_status(mut self, input: crate::types::CapacityManagerDataExportStatus) -> Self {
        self.latest_delivery_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the most recent export delivery.</p>
    pub fn set_latest_delivery_status(mut self, input: ::std::option::Option<crate::types::CapacityManagerDataExportStatus>) -> Self {
        self.latest_delivery_status = input;
        self
    }
    /// <p>The status of the most recent export delivery.</p>
    pub fn get_latest_delivery_status(&self) -> &::std::option::Option<crate::types::CapacityManagerDataExportStatus> {
        &self.latest_delivery_status
    }
    /// <p>A message describing the status of the most recent export delivery, including any error details if the delivery failed.</p>
    pub fn latest_delivery_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_delivery_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the status of the most recent export delivery, including any error details if the delivery failed.</p>
    pub fn set_latest_delivery_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_delivery_status_message = input;
        self
    }
    /// <p>A message describing the status of the most recent export delivery, including any error details if the delivery failed.</p>
    pub fn get_latest_delivery_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_delivery_status_message
    }
    /// <p>The S3 URI of the most recently delivered export file.</p>
    pub fn latest_delivery_s3_location_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_delivery_s3_location_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI of the most recently delivered export file.</p>
    pub fn set_latest_delivery_s3_location_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_delivery_s3_location_uri = input;
        self
    }
    /// <p>The S3 URI of the most recently delivered export file.</p>
    pub fn get_latest_delivery_s3_location_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_delivery_s3_location_uri
    }
    /// <p>The timestamp when the most recent export was delivered to S3.</p>
    pub fn latest_delivery_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_delivery_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the most recent export was delivered to S3.</p>
    pub fn set_latest_delivery_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_delivery_time = input;
        self
    }
    /// <p>The timestamp when the most recent export was delivered to S3.</p>
    pub fn get_latest_delivery_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_delivery_time
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the data export configuration.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the data export configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the data export configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CapacityManagerDataExportResponse`](crate::types::CapacityManagerDataExportResponse).
    pub fn build(self) -> crate::types::CapacityManagerDataExportResponse {
        crate::types::CapacityManagerDataExportResponse {
            capacity_manager_data_export_id: self.capacity_manager_data_export_id,
            s3_bucket_name: self.s3_bucket_name,
            s3_bucket_prefix: self.s3_bucket_prefix,
            schedule: self.schedule,
            output_format: self.output_format,
            create_time: self.create_time,
            latest_delivery_status: self.latest_delivery_status,
            latest_delivery_status_message: self.latest_delivery_status_message,
            latest_delivery_s3_location_uri: self.latest_delivery_s3_location_uri,
            latest_delivery_time: self.latest_delivery_time,
            tags: self.tags,
        }
    }
}
