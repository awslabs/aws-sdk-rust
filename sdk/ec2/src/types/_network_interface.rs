// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a network interface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkInterface {
    /// <p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>
    #[doc(hidden)]
    pub association: std::option::Option<crate::types::NetworkInterfaceAssociation>,
    /// <p>The network interface attachment.</p>
    #[doc(hidden)]
    pub attachment: std::option::Option<crate::types::NetworkInterfaceAttachment>,
    /// <p>The Availability Zone.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>A description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Any security groups for the network interface.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::types::GroupIdentifier>>,
    /// <p>The type of network interface.</p>
    #[doc(hidden)]
    pub interface_type: std::option::Option<crate::types::NetworkInterfaceType>,
    /// <p>The IPv6 addresses associated with the network interface.</p>
    #[doc(hidden)]
    pub ipv6_addresses:
        std::option::Option<std::vec::Vec<crate::types::NetworkInterfaceIpv6Address>>,
    /// <p>The MAC address.</p>
    #[doc(hidden)]
    pub mac_address: std::option::Option<std::string::String>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID of the owner of the network interface.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The private DNS name.</p>
    #[doc(hidden)]
    pub private_dns_name: std::option::Option<std::string::String>,
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    #[doc(hidden)]
    pub private_ip_address: std::option::Option<std::string::String>,
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    #[doc(hidden)]
    pub private_ip_addresses:
        std::option::Option<std::vec::Vec<crate::types::NetworkInterfacePrivateIpAddress>>,
    /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
    #[doc(hidden)]
    pub ipv4_prefixes: std::option::Option<std::vec::Vec<crate::types::Ipv4PrefixSpecification>>,
    /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
    #[doc(hidden)]
    pub ipv6_prefixes: std::option::Option<std::vec::Vec<crate::types::Ipv6PrefixSpecification>>,
    /// <p>The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>
    #[doc(hidden)]
    pub requester_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether the network interface is being managed by Amazon Web Services.</p>
    #[doc(hidden)]
    pub requester_managed: std::option::Option<bool>,
    /// <p>Indicates whether source/destination checking is enabled.</p>
    #[doc(hidden)]
    pub source_dest_check: std::option::Option<bool>,
    /// <p>The status of the network interface.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NetworkInterfaceStatus>,
    /// <p>The ID of the subnet.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>Any tags assigned to the network interface.</p>
    #[doc(hidden)]
    pub tag_set: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether a network interface with an IPv6 address is unreachable from the public internet. If the value is <code>true</code>, inbound traffic from the internet is dropped and you cannot assign an elastic IP address to the network interface. The network interface is reachable from peered VPCs and resources connected through a transit gateway, including on-premises networks.</p>
    #[doc(hidden)]
    pub deny_all_igw_traffic: std::option::Option<bool>,
    /// <p>Indicates whether this is an IPv6 only network interface.</p>
    #[doc(hidden)]
    pub ipv6_native: std::option::Option<bool>,
    /// <p>The IPv6 globally unique address associated with the network interface.</p>
    #[doc(hidden)]
    pub ipv6_address: std::option::Option<std::string::String>,
}
impl NetworkInterface {
    /// <p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>
    pub fn association(&self) -> std::option::Option<&crate::types::NetworkInterfaceAssociation> {
        self.association.as_ref()
    }
    /// <p>The network interface attachment.</p>
    pub fn attachment(&self) -> std::option::Option<&crate::types::NetworkInterfaceAttachment> {
        self.attachment.as_ref()
    }
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>A description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Any security groups for the network interface.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::types::GroupIdentifier]> {
        self.groups.as_deref()
    }
    /// <p>The type of network interface.</p>
    pub fn interface_type(&self) -> std::option::Option<&crate::types::NetworkInterfaceType> {
        self.interface_type.as_ref()
    }
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub fn ipv6_addresses(
        &self,
    ) -> std::option::Option<&[crate::types::NetworkInterfaceIpv6Address]> {
        self.ipv6_addresses.as_deref()
    }
    /// <p>The MAC address.</p>
    pub fn mac_address(&self) -> std::option::Option<&str> {
        self.mac_address.as_deref()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the network interface.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The private DNS name.</p>
    pub fn private_dns_name(&self) -> std::option::Option<&str> {
        self.private_dns_name.as_deref()
    }
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    pub fn private_ip_address(&self) -> std::option::Option<&str> {
        self.private_ip_address.as_deref()
    }
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub fn private_ip_addresses(
        &self,
    ) -> std::option::Option<&[crate::types::NetworkInterfacePrivateIpAddress]> {
        self.private_ip_addresses.as_deref()
    }
    /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
    pub fn ipv4_prefixes(&self) -> std::option::Option<&[crate::types::Ipv4PrefixSpecification]> {
        self.ipv4_prefixes.as_deref()
    }
    /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
    pub fn ipv6_prefixes(&self) -> std::option::Option<&[crate::types::Ipv6PrefixSpecification]> {
        self.ipv6_prefixes.as_deref()
    }
    /// <p>The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>
    pub fn requester_id(&self) -> std::option::Option<&str> {
        self.requester_id.as_deref()
    }
    /// <p>Indicates whether the network interface is being managed by Amazon Web Services.</p>
    pub fn requester_managed(&self) -> std::option::Option<bool> {
        self.requester_managed
    }
    /// <p>Indicates whether source/destination checking is enabled.</p>
    pub fn source_dest_check(&self) -> std::option::Option<bool> {
        self.source_dest_check
    }
    /// <p>The status of the network interface.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::NetworkInterfaceStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>Any tags assigned to the network interface.</p>
    pub fn tag_set(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tag_set.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>Indicates whether a network interface with an IPv6 address is unreachable from the public internet. If the value is <code>true</code>, inbound traffic from the internet is dropped and you cannot assign an elastic IP address to the network interface. The network interface is reachable from peered VPCs and resources connected through a transit gateway, including on-premises networks.</p>
    pub fn deny_all_igw_traffic(&self) -> std::option::Option<bool> {
        self.deny_all_igw_traffic
    }
    /// <p>Indicates whether this is an IPv6 only network interface.</p>
    pub fn ipv6_native(&self) -> std::option::Option<bool> {
        self.ipv6_native
    }
    /// <p>The IPv6 globally unique address associated with the network interface.</p>
    pub fn ipv6_address(&self) -> std::option::Option<&str> {
        self.ipv6_address.as_deref()
    }
}
impl NetworkInterface {
    /// Creates a new builder-style object to manufacture [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn builder() -> crate::types::builders::NetworkInterfaceBuilder {
        crate::types::builders::NetworkInterfaceBuilder::default()
    }
}

/// A builder for [`NetworkInterface`](crate::types::NetworkInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkInterfaceBuilder {
    pub(crate) association: std::option::Option<crate::types::NetworkInterfaceAssociation>,
    pub(crate) attachment: std::option::Option<crate::types::NetworkInterfaceAttachment>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) groups: std::option::Option<std::vec::Vec<crate::types::GroupIdentifier>>,
    pub(crate) interface_type: std::option::Option<crate::types::NetworkInterfaceType>,
    pub(crate) ipv6_addresses:
        std::option::Option<std::vec::Vec<crate::types::NetworkInterfaceIpv6Address>>,
    pub(crate) mac_address: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) outpost_arn: std::option::Option<std::string::String>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) private_dns_name: std::option::Option<std::string::String>,
    pub(crate) private_ip_address: std::option::Option<std::string::String>,
    pub(crate) private_ip_addresses:
        std::option::Option<std::vec::Vec<crate::types::NetworkInterfacePrivateIpAddress>>,
    pub(crate) ipv4_prefixes:
        std::option::Option<std::vec::Vec<crate::types::Ipv4PrefixSpecification>>,
    pub(crate) ipv6_prefixes:
        std::option::Option<std::vec::Vec<crate::types::Ipv6PrefixSpecification>>,
    pub(crate) requester_id: std::option::Option<std::string::String>,
    pub(crate) requester_managed: std::option::Option<bool>,
    pub(crate) source_dest_check: std::option::Option<bool>,
    pub(crate) status: std::option::Option<crate::types::NetworkInterfaceStatus>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) tag_set: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) deny_all_igw_traffic: std::option::Option<bool>,
    pub(crate) ipv6_native: std::option::Option<bool>,
    pub(crate) ipv6_address: std::option::Option<std::string::String>,
}
impl NetworkInterfaceBuilder {
    /// <p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>
    pub fn association(mut self, input: crate::types::NetworkInterfaceAssociation) -> Self {
        self.association = Some(input);
        self
    }
    /// <p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>
    pub fn set_association(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceAssociation>,
    ) -> Self {
        self.association = input;
        self
    }
    /// <p>The network interface attachment.</p>
    pub fn attachment(mut self, input: crate::types::NetworkInterfaceAttachment) -> Self {
        self.attachment = Some(input);
        self
    }
    /// <p>The network interface attachment.</p>
    pub fn set_attachment(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceAttachment>,
    ) -> Self {
        self.attachment = input;
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>A description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>Any security groups for the network interface.</p>
    pub fn groups(mut self, input: crate::types::GroupIdentifier) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = Some(v);
        self
    }
    /// <p>Any security groups for the network interface.</p>
    pub fn set_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GroupIdentifier>>,
    ) -> Self {
        self.groups = input;
        self
    }
    /// <p>The type of network interface.</p>
    pub fn interface_type(mut self, input: crate::types::NetworkInterfaceType) -> Self {
        self.interface_type = Some(input);
        self
    }
    /// <p>The type of network interface.</p>
    pub fn set_interface_type(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceType>,
    ) -> Self {
        self.interface_type = input;
        self
    }
    /// Appends an item to `ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_ipv6_addresses`](Self::set_ipv6_addresses).
    ///
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub fn ipv6_addresses(mut self, input: crate::types::NetworkInterfaceIpv6Address) -> Self {
        let mut v = self.ipv6_addresses.unwrap_or_default();
        v.push(input);
        self.ipv6_addresses = Some(v);
        self
    }
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub fn set_ipv6_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkInterfaceIpv6Address>>,
    ) -> Self {
        self.ipv6_addresses = input;
        self
    }
    /// <p>The MAC address.</p>
    pub fn mac_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.mac_address = Some(input.into());
        self
    }
    /// <p>The MAC address.</p>
    pub fn set_mac_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.outpost_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the network interface.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the network interface.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The private DNS name.</p>
    pub fn private_dns_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_dns_name = Some(input.into());
        self
    }
    /// <p>The private DNS name.</p>
    pub fn set_private_dns_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.private_dns_name = input;
        self
    }
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    pub fn private_ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.private_ip_address = Some(input.into());
        self
    }
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    pub fn set_private_ip_address(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.private_ip_address = input;
        self
    }
    /// Appends an item to `private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_private_ip_addresses`](Self::set_private_ip_addresses).
    ///
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub fn private_ip_addresses(
        mut self,
        input: crate::types::NetworkInterfacePrivateIpAddress,
    ) -> Self {
        let mut v = self.private_ip_addresses.unwrap_or_default();
        v.push(input);
        self.private_ip_addresses = Some(v);
        self
    }
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub fn set_private_ip_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkInterfacePrivateIpAddress>>,
    ) -> Self {
        self.private_ip_addresses = input;
        self
    }
    /// Appends an item to `ipv4_prefixes`.
    ///
    /// To override the contents of this collection use [`set_ipv4_prefixes`](Self::set_ipv4_prefixes).
    ///
    /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
    pub fn ipv4_prefixes(mut self, input: crate::types::Ipv4PrefixSpecification) -> Self {
        let mut v = self.ipv4_prefixes.unwrap_or_default();
        v.push(input);
        self.ipv4_prefixes = Some(v);
        self
    }
    /// <p>The IPv4 prefixes that are assigned to the network interface.</p>
    pub fn set_ipv4_prefixes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Ipv4PrefixSpecification>>,
    ) -> Self {
        self.ipv4_prefixes = input;
        self
    }
    /// Appends an item to `ipv6_prefixes`.
    ///
    /// To override the contents of this collection use [`set_ipv6_prefixes`](Self::set_ipv6_prefixes).
    ///
    /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
    pub fn ipv6_prefixes(mut self, input: crate::types::Ipv6PrefixSpecification) -> Self {
        let mut v = self.ipv6_prefixes.unwrap_or_default();
        v.push(input);
        self.ipv6_prefixes = Some(v);
        self
    }
    /// <p>The IPv6 prefixes that are assigned to the network interface.</p>
    pub fn set_ipv6_prefixes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Ipv6PrefixSpecification>>,
    ) -> Self {
        self.ipv6_prefixes = input;
        self
    }
    /// <p>The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>
    pub fn requester_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.requester_id = Some(input.into());
        self
    }
    /// <p>The alias or Amazon Web Services account ID of the principal or service that created the network interface.</p>
    pub fn set_requester_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.requester_id = input;
        self
    }
    /// <p>Indicates whether the network interface is being managed by Amazon Web Services.</p>
    pub fn requester_managed(mut self, input: bool) -> Self {
        self.requester_managed = Some(input);
        self
    }
    /// <p>Indicates whether the network interface is being managed by Amazon Web Services.</p>
    pub fn set_requester_managed(mut self, input: std::option::Option<bool>) -> Self {
        self.requester_managed = input;
        self
    }
    /// <p>Indicates whether source/destination checking is enabled.</p>
    pub fn source_dest_check(mut self, input: bool) -> Self {
        self.source_dest_check = Some(input);
        self
    }
    /// <p>Indicates whether source/destination checking is enabled.</p>
    pub fn set_source_dest_check(mut self, input: std::option::Option<bool>) -> Self {
        self.source_dest_check = input;
        self
    }
    /// <p>The status of the network interface.</p>
    pub fn status(mut self, input: crate::types::NetworkInterfaceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the network interface.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// Appends an item to `tag_set`.
    ///
    /// To override the contents of this collection use [`set_tag_set`](Self::set_tag_set).
    ///
    /// <p>Any tags assigned to the network interface.</p>
    pub fn tag_set(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_set.unwrap_or_default();
        v.push(input);
        self.tag_set = Some(v);
        self
    }
    /// <p>Any tags assigned to the network interface.</p>
    pub fn set_tag_set(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tag_set = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>Indicates whether a network interface with an IPv6 address is unreachable from the public internet. If the value is <code>true</code>, inbound traffic from the internet is dropped and you cannot assign an elastic IP address to the network interface. The network interface is reachable from peered VPCs and resources connected through a transit gateway, including on-premises networks.</p>
    pub fn deny_all_igw_traffic(mut self, input: bool) -> Self {
        self.deny_all_igw_traffic = Some(input);
        self
    }
    /// <p>Indicates whether a network interface with an IPv6 address is unreachable from the public internet. If the value is <code>true</code>, inbound traffic from the internet is dropped and you cannot assign an elastic IP address to the network interface. The network interface is reachable from peered VPCs and resources connected through a transit gateway, including on-premises networks.</p>
    pub fn set_deny_all_igw_traffic(mut self, input: std::option::Option<bool>) -> Self {
        self.deny_all_igw_traffic = input;
        self
    }
    /// <p>Indicates whether this is an IPv6 only network interface.</p>
    pub fn ipv6_native(mut self, input: bool) -> Self {
        self.ipv6_native = Some(input);
        self
    }
    /// <p>Indicates whether this is an IPv6 only network interface.</p>
    pub fn set_ipv6_native(mut self, input: std::option::Option<bool>) -> Self {
        self.ipv6_native = input;
        self
    }
    /// <p>The IPv6 globally unique address associated with the network interface.</p>
    pub fn ipv6_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ipv6_address = Some(input.into());
        self
    }
    /// <p>The IPv6 globally unique address associated with the network interface.</p>
    pub fn set_ipv6_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ipv6_address = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn build(self) -> crate::types::NetworkInterface {
        crate::types::NetworkInterface {
            association: self.association,
            attachment: self.attachment,
            availability_zone: self.availability_zone,
            description: self.description,
            groups: self.groups,
            interface_type: self.interface_type,
            ipv6_addresses: self.ipv6_addresses,
            mac_address: self.mac_address,
            network_interface_id: self.network_interface_id,
            outpost_arn: self.outpost_arn,
            owner_id: self.owner_id,
            private_dns_name: self.private_dns_name,
            private_ip_address: self.private_ip_address,
            private_ip_addresses: self.private_ip_addresses,
            ipv4_prefixes: self.ipv4_prefixes,
            ipv6_prefixes: self.ipv6_prefixes,
            requester_id: self.requester_id,
            requester_managed: self.requester_managed,
            source_dest_check: self.source_dest_check,
            status: self.status,
            subnet_id: self.subnet_id,
            tag_set: self.tag_set,
            vpc_id: self.vpc_id,
            deny_all_igw_traffic: self.deny_all_igw_traffic,
            ipv6_native: self.ipv6_native,
            ipv6_address: self.ipv6_address,
        }
    }
}
