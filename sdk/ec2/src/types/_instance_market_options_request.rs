// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the market (purchasing) option for the instances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceMarketOptionsRequest {
    /// <p>The market type.</p>
    #[doc(hidden)]
    pub market_type: std::option::Option<crate::types::MarketType>,
    /// <p>The options for Spot Instances.</p>
    #[doc(hidden)]
    pub spot_options: std::option::Option<crate::types::SpotMarketOptions>,
}
impl InstanceMarketOptionsRequest {
    /// <p>The market type.</p>
    pub fn market_type(&self) -> std::option::Option<&crate::types::MarketType> {
        self.market_type.as_ref()
    }
    /// <p>The options for Spot Instances.</p>
    pub fn spot_options(&self) -> std::option::Option<&crate::types::SpotMarketOptions> {
        self.spot_options.as_ref()
    }
}
impl InstanceMarketOptionsRequest {
    /// Creates a new builder-style object to manufacture [`InstanceMarketOptionsRequest`](crate::types::InstanceMarketOptionsRequest).
    pub fn builder() -> crate::types::builders::InstanceMarketOptionsRequestBuilder {
        crate::types::builders::InstanceMarketOptionsRequestBuilder::default()
    }
}

/// A builder for [`InstanceMarketOptionsRequest`](crate::types::InstanceMarketOptionsRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceMarketOptionsRequestBuilder {
    pub(crate) market_type: std::option::Option<crate::types::MarketType>,
    pub(crate) spot_options: std::option::Option<crate::types::SpotMarketOptions>,
}
impl InstanceMarketOptionsRequestBuilder {
    /// <p>The market type.</p>
    pub fn market_type(mut self, input: crate::types::MarketType) -> Self {
        self.market_type = Some(input);
        self
    }
    /// <p>The market type.</p>
    pub fn set_market_type(mut self, input: std::option::Option<crate::types::MarketType>) -> Self {
        self.market_type = input;
        self
    }
    /// <p>The options for Spot Instances.</p>
    pub fn spot_options(mut self, input: crate::types::SpotMarketOptions) -> Self {
        self.spot_options = Some(input);
        self
    }
    /// <p>The options for Spot Instances.</p>
    pub fn set_spot_options(
        mut self,
        input: std::option::Option<crate::types::SpotMarketOptions>,
    ) -> Self {
        self.spot_options = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceMarketOptionsRequest`](crate::types::InstanceMarketOptionsRequest).
    pub fn build(self) -> crate::types::InstanceMarketOptionsRequest {
        crate::types::InstanceMarketOptionsRequest {
            market_type: self.market_type,
            spot_options: self.spot_options,
        }
    }
}
