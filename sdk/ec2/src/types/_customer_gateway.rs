// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a customer gateway.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerGateway {
    /// <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
    pub bgp_asn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the customer gateway.</p>
    pub customer_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the customer gateway device's outside interface.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub certificate_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The name of customer gateway device.</p>
    pub device_name: ::std::option::Option<::std::string::String>,
    /// <p>Any tags assigned to the customer gateway.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CustomerGateway {
    /// <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
    pub fn bgp_asn(&self) -> ::std::option::Option<&str> {
        self.bgp_asn.as_deref()
    }
    /// <p>The ID of the customer gateway.</p>
    pub fn customer_gateway_id(&self) -> ::std::option::Option<&str> {
        self.customer_gateway_id.as_deref()
    }
    /// <p>The IP address of the customer gateway device's outside interface.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn certificate_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The name of customer gateway device.</p>
    pub fn device_name(&self) -> ::std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>Any tags assigned to the customer gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CustomerGateway {
    /// Creates a new builder-style object to manufacture [`CustomerGateway`](crate::types::CustomerGateway).
    pub fn builder() -> crate::types::builders::CustomerGatewayBuilder {
        crate::types::builders::CustomerGatewayBuilder::default()
    }
}

/// A builder for [`CustomerGateway`](crate::types::CustomerGateway).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomerGatewayBuilder {
    pub(crate) bgp_asn: ::std::option::Option<::std::string::String>,
    pub(crate) customer_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CustomerGatewayBuilder {
    /// <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
    pub fn bgp_asn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bgp_asn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
    pub fn set_bgp_asn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bgp_asn = input;
        self
    }
    /// <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
    pub fn get_bgp_asn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bgp_asn
    }
    /// <p>The ID of the customer gateway.</p>
    pub fn customer_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the customer gateway.</p>
    pub fn set_customer_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_gateway_id = input;
        self
    }
    /// <p>The ID of the customer gateway.</p>
    pub fn get_customer_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_gateway_id
    }
    /// <p>The IP address of the customer gateway device's outside interface.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the customer gateway device's outside interface.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IP address of the customer gateway device's outside interface.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_arn
    }
    /// <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The name of customer gateway device.</p>
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of customer gateway device.</p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The name of customer gateway device.</p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the customer gateway.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the customer gateway.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the customer gateway.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CustomerGateway`](crate::types::CustomerGateway).
    pub fn build(self) -> crate::types::CustomerGateway {
        crate::types::CustomerGateway {
            bgp_asn: self.bgp_asn,
            customer_gateway_id: self.customer_gateway_id,
            ip_address: self.ip_address,
            certificate_arn: self.certificate_arn,
            state: self.state,
            r#type: self.r#type,
            device_name: self.device_name,
            tags: self.tags,
        }
    }
}
