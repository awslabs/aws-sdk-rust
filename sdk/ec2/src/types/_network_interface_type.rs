// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `NetworkInterfaceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let networkinterfacetype = unimplemented!();
/// match networkinterfacetype {
///     NetworkInterfaceType::ApiGatewayManaged => { /* ... */ },
///     NetworkInterfaceType::AwsCodestarConnectionsManaged => { /* ... */ },
///     NetworkInterfaceType::Branch => { /* ... */ },
///     NetworkInterfaceType::Efa => { /* ... */ },
///     NetworkInterfaceType::EfaOnly => { /* ... */ },
///     NetworkInterfaceType::GatewayLoadBalancer => { /* ... */ },
///     NetworkInterfaceType::GatewayLoadBalancerEndpoint => { /* ... */ },
///     NetworkInterfaceType::GlobalAcceleratorManaged => { /* ... */ },
///     NetworkInterfaceType::Interface => { /* ... */ },
///     NetworkInterfaceType::IotRulesManaged => { /* ... */ },
///     NetworkInterfaceType::Lambda => { /* ... */ },
///     NetworkInterfaceType::LoadBalancer => { /* ... */ },
///     NetworkInterfaceType::NatGateway => { /* ... */ },
///     NetworkInterfaceType::NetworkLoadBalancer => { /* ... */ },
///     NetworkInterfaceType::Quicksight => { /* ... */ },
///     NetworkInterfaceType::TransitGateway => { /* ... */ },
///     NetworkInterfaceType::Trunk => { /* ... */ },
///     NetworkInterfaceType::VpcEndpoint => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `networkinterfacetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `NetworkInterfaceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `NetworkInterfaceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `NetworkInterfaceType::NewFeature` is defined.
/// Specifically, when `networkinterfacetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `NetworkInterfaceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum NetworkInterfaceType {
    #[allow(missing_docs)] // documentation missing in model
    ApiGatewayManaged,
    #[allow(missing_docs)] // documentation missing in model
    AwsCodestarConnectionsManaged,
    #[allow(missing_docs)] // documentation missing in model
    Branch,
    #[allow(missing_docs)] // documentation missing in model
    Efa,
    #[allow(missing_docs)] // documentation missing in model
    EfaOnly,
    #[allow(missing_docs)] // documentation missing in model
    GatewayLoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    GatewayLoadBalancerEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    GlobalAcceleratorManaged,
    #[allow(missing_docs)] // documentation missing in model
    Interface,
    #[allow(missing_docs)] // documentation missing in model
    IotRulesManaged,
    #[allow(missing_docs)] // documentation missing in model
    Lambda,
    #[allow(missing_docs)] // documentation missing in model
    LoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    NatGateway,
    #[allow(missing_docs)] // documentation missing in model
    NetworkLoadBalancer,
    #[allow(missing_docs)] // documentation missing in model
    Quicksight,
    #[allow(missing_docs)] // documentation missing in model
    TransitGateway,
    #[allow(missing_docs)] // documentation missing in model
    Trunk,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpoint,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for NetworkInterfaceType {
    fn from(s: &str) -> Self {
        match s {
            "api_gateway_managed" => NetworkInterfaceType::ApiGatewayManaged,
            "aws_codestar_connections_managed" => NetworkInterfaceType::AwsCodestarConnectionsManaged,
            "branch" => NetworkInterfaceType::Branch,
            "efa" => NetworkInterfaceType::Efa,
            "efa-only" => NetworkInterfaceType::EfaOnly,
            "gateway_load_balancer" => NetworkInterfaceType::GatewayLoadBalancer,
            "gateway_load_balancer_endpoint" => NetworkInterfaceType::GatewayLoadBalancerEndpoint,
            "global_accelerator_managed" => NetworkInterfaceType::GlobalAcceleratorManaged,
            "interface" => NetworkInterfaceType::Interface,
            "iot_rules_managed" => NetworkInterfaceType::IotRulesManaged,
            "lambda" => NetworkInterfaceType::Lambda,
            "load_balancer" => NetworkInterfaceType::LoadBalancer,
            "natGateway" => NetworkInterfaceType::NatGateway,
            "network_load_balancer" => NetworkInterfaceType::NetworkLoadBalancer,
            "quicksight" => NetworkInterfaceType::Quicksight,
            "transit_gateway" => NetworkInterfaceType::TransitGateway,
            "trunk" => NetworkInterfaceType::Trunk,
            "vpc_endpoint" => NetworkInterfaceType::VpcEndpoint,
            other => NetworkInterfaceType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for NetworkInterfaceType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(NetworkInterfaceType::from(s))
    }
}
impl NetworkInterfaceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            NetworkInterfaceType::ApiGatewayManaged => "api_gateway_managed",
            NetworkInterfaceType::AwsCodestarConnectionsManaged => "aws_codestar_connections_managed",
            NetworkInterfaceType::Branch => "branch",
            NetworkInterfaceType::Efa => "efa",
            NetworkInterfaceType::EfaOnly => "efa-only",
            NetworkInterfaceType::GatewayLoadBalancer => "gateway_load_balancer",
            NetworkInterfaceType::GatewayLoadBalancerEndpoint => "gateway_load_balancer_endpoint",
            NetworkInterfaceType::GlobalAcceleratorManaged => "global_accelerator_managed",
            NetworkInterfaceType::Interface => "interface",
            NetworkInterfaceType::IotRulesManaged => "iot_rules_managed",
            NetworkInterfaceType::Lambda => "lambda",
            NetworkInterfaceType::LoadBalancer => "load_balancer",
            NetworkInterfaceType::NatGateway => "natGateway",
            NetworkInterfaceType::NetworkLoadBalancer => "network_load_balancer",
            NetworkInterfaceType::Quicksight => "quicksight",
            NetworkInterfaceType::TransitGateway => "transit_gateway",
            NetworkInterfaceType::Trunk => "trunk",
            NetworkInterfaceType::VpcEndpoint => "vpc_endpoint",
            NetworkInterfaceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "api_gateway_managed",
            "aws_codestar_connections_managed",
            "branch",
            "efa",
            "efa-only",
            "gateway_load_balancer",
            "gateway_load_balancer_endpoint",
            "global_accelerator_managed",
            "interface",
            "iot_rules_managed",
            "lambda",
            "load_balancer",
            "natGateway",
            "network_load_balancer",
            "quicksight",
            "transit_gateway",
            "trunk",
            "vpc_endpoint",
        ]
    }
}
impl ::std::convert::AsRef<str> for NetworkInterfaceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl NetworkInterfaceType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for NetworkInterfaceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            NetworkInterfaceType::ApiGatewayManaged => write!(f, "api_gateway_managed"),
            NetworkInterfaceType::AwsCodestarConnectionsManaged => write!(f, "aws_codestar_connections_managed"),
            NetworkInterfaceType::Branch => write!(f, "branch"),
            NetworkInterfaceType::Efa => write!(f, "efa"),
            NetworkInterfaceType::EfaOnly => write!(f, "efa-only"),
            NetworkInterfaceType::GatewayLoadBalancer => write!(f, "gateway_load_balancer"),
            NetworkInterfaceType::GatewayLoadBalancerEndpoint => write!(f, "gateway_load_balancer_endpoint"),
            NetworkInterfaceType::GlobalAcceleratorManaged => write!(f, "global_accelerator_managed"),
            NetworkInterfaceType::Interface => write!(f, "interface"),
            NetworkInterfaceType::IotRulesManaged => write!(f, "iot_rules_managed"),
            NetworkInterfaceType::Lambda => write!(f, "lambda"),
            NetworkInterfaceType::LoadBalancer => write!(f, "load_balancer"),
            NetworkInterfaceType::NatGateway => write!(f, "natGateway"),
            NetworkInterfaceType::NetworkLoadBalancer => write!(f, "network_load_balancer"),
            NetworkInterfaceType::Quicksight => write!(f, "quicksight"),
            NetworkInterfaceType::TransitGateway => write!(f, "transit_gateway"),
            NetworkInterfaceType::Trunk => write!(f, "trunk"),
            NetworkInterfaceType::VpcEndpoint => write!(f, "vpc_endpoint"),
            NetworkInterfaceType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
