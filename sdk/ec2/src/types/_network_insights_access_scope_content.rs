// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Network Access Scope content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkInsightsAccessScopeContent {
    /// <p>The ID of the Network Access Scope.</p>
    pub network_insights_access_scope_id: ::std::option::Option<::std::string::String>,
    /// <p>The paths to match.</p>
    pub match_paths: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>>,
    /// <p>The paths to exclude.</p>
    pub exclude_paths: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>>,
}
impl NetworkInsightsAccessScopeContent {
    /// <p>The ID of the Network Access Scope.</p>
    pub fn network_insights_access_scope_id(&self) -> ::std::option::Option<&str> {
        self.network_insights_access_scope_id.as_deref()
    }
    /// <p>The paths to match.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_paths.is_none()`.
    pub fn match_paths(&self) -> &[crate::types::AccessScopePath] {
        self.match_paths.as_deref().unwrap_or_default()
    }
    /// <p>The paths to exclude.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude_paths.is_none()`.
    pub fn exclude_paths(&self) -> &[crate::types::AccessScopePath] {
        self.exclude_paths.as_deref().unwrap_or_default()
    }
}
impl NetworkInsightsAccessScopeContent {
    /// Creates a new builder-style object to manufacture [`NetworkInsightsAccessScopeContent`](crate::types::NetworkInsightsAccessScopeContent).
    pub fn builder() -> crate::types::builders::NetworkInsightsAccessScopeContentBuilder {
        crate::types::builders::NetworkInsightsAccessScopeContentBuilder::default()
    }
}

/// A builder for [`NetworkInsightsAccessScopeContent`](crate::types::NetworkInsightsAccessScopeContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkInsightsAccessScopeContentBuilder {
    pub(crate) network_insights_access_scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) match_paths: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>>,
    pub(crate) exclude_paths: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>>,
}
impl NetworkInsightsAccessScopeContentBuilder {
    /// <p>The ID of the Network Access Scope.</p>
    pub fn network_insights_access_scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_insights_access_scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Network Access Scope.</p>
    pub fn set_network_insights_access_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_insights_access_scope_id = input;
        self
    }
    /// <p>The ID of the Network Access Scope.</p>
    pub fn get_network_insights_access_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_insights_access_scope_id
    }
    /// Appends an item to `match_paths`.
    ///
    /// To override the contents of this collection use [`set_match_paths`](Self::set_match_paths).
    ///
    /// <p>The paths to match.</p>
    pub fn match_paths(mut self, input: crate::types::AccessScopePath) -> Self {
        let mut v = self.match_paths.unwrap_or_default();
        v.push(input);
        self.match_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>The paths to match.</p>
    pub fn set_match_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>>) -> Self {
        self.match_paths = input;
        self
    }
    /// <p>The paths to match.</p>
    pub fn get_match_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>> {
        &self.match_paths
    }
    /// Appends an item to `exclude_paths`.
    ///
    /// To override the contents of this collection use [`set_exclude_paths`](Self::set_exclude_paths).
    ///
    /// <p>The paths to exclude.</p>
    pub fn exclude_paths(mut self, input: crate::types::AccessScopePath) -> Self {
        let mut v = self.exclude_paths.unwrap_or_default();
        v.push(input);
        self.exclude_paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>The paths to exclude.</p>
    pub fn set_exclude_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>>) -> Self {
        self.exclude_paths = input;
        self
    }
    /// <p>The paths to exclude.</p>
    pub fn get_exclude_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessScopePath>> {
        &self.exclude_paths
    }
    /// Consumes the builder and constructs a [`NetworkInsightsAccessScopeContent`](crate::types::NetworkInsightsAccessScopeContent).
    pub fn build(self) -> crate::types::NetworkInsightsAccessScopeContent {
        crate::types::NetworkInsightsAccessScopeContent {
            network_insights_access_scope_id: self.network_insights_access_scope_id,
            match_paths: self.match_paths,
            exclude_paths: self.exclude_paths,
        }
    }
}
