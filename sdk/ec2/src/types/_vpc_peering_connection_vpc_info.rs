// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a VPC in a VPC peering connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcPeeringConnectionVpcInfo {
    /// <p>The IPv4 CIDR block for the VPC.</p>
    pub cidr_block: ::std::option::Option<::std::string::String>,
    /// <p>The IPv6 CIDR block for the VPC.</p>
    pub ipv6_cidr_block_set: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlock>>,
    /// <p>Information about the IPv4 CIDR blocks for the VPC.</p>
    pub cidr_block_set: ::std::option::Option<::std::vec::Vec<crate::types::CidrBlock>>,
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
    pub peering_options: ::std::option::Option<crate::types::VpcPeeringConnectionOptionsDescription>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Region in which the VPC is located.</p>
    pub region: ::std::option::Option<::std::string::String>,
}
impl VpcPeeringConnectionVpcInfo {
    /// <p>The IPv4 CIDR block for the VPC.</p>
    pub fn cidr_block(&self) -> ::std::option::Option<&str> {
        self.cidr_block.as_deref()
    }
    /// <p>The IPv6 CIDR block for the VPC.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipv6_cidr_block_set.is_none()`.
    pub fn ipv6_cidr_block_set(&self) -> &[crate::types::Ipv6CidrBlock] {
        self.ipv6_cidr_block_set.as_deref().unwrap_or_default()
    }
    /// <p>Information about the IPv4 CIDR blocks for the VPC.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cidr_block_set.is_none()`.
    pub fn cidr_block_set(&self) -> &[crate::types::CidrBlock] {
        self.cidr_block_set.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
    pub fn peering_options(&self) -> ::std::option::Option<&crate::types::VpcPeeringConnectionOptionsDescription> {
        self.peering_options.as_ref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The Region in which the VPC is located.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
}
impl VpcPeeringConnectionVpcInfo {
    /// Creates a new builder-style object to manufacture [`VpcPeeringConnectionVpcInfo`](crate::types::VpcPeeringConnectionVpcInfo).
    pub fn builder() -> crate::types::builders::VpcPeeringConnectionVpcInfoBuilder {
        crate::types::builders::VpcPeeringConnectionVpcInfoBuilder::default()
    }
}

/// A builder for [`VpcPeeringConnectionVpcInfo`](crate::types::VpcPeeringConnectionVpcInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcPeeringConnectionVpcInfoBuilder {
    pub(crate) cidr_block: ::std::option::Option<::std::string::String>,
    pub(crate) ipv6_cidr_block_set: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlock>>,
    pub(crate) cidr_block_set: ::std::option::Option<::std::vec::Vec<crate::types::CidrBlock>>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) peering_options: ::std::option::Option<crate::types::VpcPeeringConnectionOptionsDescription>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
}
impl VpcPeeringConnectionVpcInfoBuilder {
    /// <p>The IPv4 CIDR block for the VPC.</p>
    pub fn cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 CIDR block for the VPC.</p>
    pub fn set_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr_block = input;
        self
    }
    /// <p>The IPv4 CIDR block for the VPC.</p>
    pub fn get_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr_block
    }
    /// Appends an item to `ipv6_cidr_block_set`.
    ///
    /// To override the contents of this collection use [`set_ipv6_cidr_block_set`](Self::set_ipv6_cidr_block_set).
    ///
    /// <p>The IPv6 CIDR block for the VPC.</p>
    pub fn ipv6_cidr_block_set(mut self, input: crate::types::Ipv6CidrBlock) -> Self {
        let mut v = self.ipv6_cidr_block_set.unwrap_or_default();
        v.push(input);
        self.ipv6_cidr_block_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv6 CIDR block for the VPC.</p>
    pub fn set_ipv6_cidr_block_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlock>>) -> Self {
        self.ipv6_cidr_block_set = input;
        self
    }
    /// <p>The IPv6 CIDR block for the VPC.</p>
    pub fn get_ipv6_cidr_block_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ipv6CidrBlock>> {
        &self.ipv6_cidr_block_set
    }
    /// Appends an item to `cidr_block_set`.
    ///
    /// To override the contents of this collection use [`set_cidr_block_set`](Self::set_cidr_block_set).
    ///
    /// <p>Information about the IPv4 CIDR blocks for the VPC.</p>
    pub fn cidr_block_set(mut self, input: crate::types::CidrBlock) -> Self {
        let mut v = self.cidr_block_set.unwrap_or_default();
        v.push(input);
        self.cidr_block_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the IPv4 CIDR blocks for the VPC.</p>
    pub fn set_cidr_block_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CidrBlock>>) -> Self {
        self.cidr_block_set = input;
        self
    }
    /// <p>Information about the IPv4 CIDR blocks for the VPC.</p>
    pub fn get_cidr_block_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CidrBlock>> {
        &self.cidr_block_set
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
    pub fn peering_options(mut self, input: crate::types::VpcPeeringConnectionOptionsDescription) -> Self {
        self.peering_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
    pub fn set_peering_options(mut self, input: ::std::option::Option<crate::types::VpcPeeringConnectionOptionsDescription>) -> Self {
        self.peering_options = input;
        self
    }
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
    pub fn get_peering_options(&self) -> &::std::option::Option<crate::types::VpcPeeringConnectionOptionsDescription> {
        &self.peering_options
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The Region in which the VPC is located.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region in which the VPC is located.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Region in which the VPC is located.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Consumes the builder and constructs a [`VpcPeeringConnectionVpcInfo`](crate::types::VpcPeeringConnectionVpcInfo).
    pub fn build(self) -> crate::types::VpcPeeringConnectionVpcInfo {
        crate::types::VpcPeeringConnectionVpcInfo {
            cidr_block: self.cidr_block,
            ipv6_cidr_block_set: self.ipv6_cidr_block_set,
            cidr_block_set: self.cidr_block_set,
            owner_id: self.owner_id,
            peering_options: self.peering_options,
            vpc_id: self.vpc_id,
            region: self.region,
        }
    }
}
