// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to create a launch template for a fast-launch enabled Windows AMI.</p> <note>
/// <p>Note - You can specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FastLaunchLaunchTemplateSpecificationRequest {
    /// <p>The ID of the launch template to use for faster launching for a Windows AMI.</p>
    #[doc(hidden)]
    pub launch_template_id: std::option::Option<std::string::String>,
    /// <p>The name of the launch template to use for faster launching for a Windows AMI.</p>
    #[doc(hidden)]
    pub launch_template_name: std::option::Option<std::string::String>,
    /// <p>The version of the launch template to use for faster launching for a Windows AMI.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl FastLaunchLaunchTemplateSpecificationRequest {
    /// <p>The ID of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn launch_template_id(&self) -> std::option::Option<&str> {
        self.launch_template_id.as_deref()
    }
    /// <p>The name of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn launch_template_name(&self) -> std::option::Option<&str> {
        self.launch_template_name.as_deref()
    }
    /// <p>The version of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl FastLaunchLaunchTemplateSpecificationRequest {
    /// Creates a new builder-style object to manufacture [`FastLaunchLaunchTemplateSpecificationRequest`](crate::types::FastLaunchLaunchTemplateSpecificationRequest).
    pub fn builder() -> crate::types::builders::FastLaunchLaunchTemplateSpecificationRequestBuilder
    {
        crate::types::builders::FastLaunchLaunchTemplateSpecificationRequestBuilder::default()
    }
}

/// A builder for [`FastLaunchLaunchTemplateSpecificationRequest`](crate::types::FastLaunchLaunchTemplateSpecificationRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FastLaunchLaunchTemplateSpecificationRequestBuilder {
    pub(crate) launch_template_id: std::option::Option<std::string::String>,
    pub(crate) launch_template_name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl FastLaunchLaunchTemplateSpecificationRequestBuilder {
    /// <p>The ID of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn launch_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_template_id = Some(input.into());
        self
    }
    /// <p>The ID of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn set_launch_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_template_id = input;
        self
    }
    /// <p>The name of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn launch_template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_template_name = Some(input.into());
        self
    }
    /// <p>The name of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn set_launch_template_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_template_name = input;
        self
    }
    /// <p>The version of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the launch template to use for faster launching for a Windows AMI.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`FastLaunchLaunchTemplateSpecificationRequest`](crate::types::FastLaunchLaunchTemplateSpecificationRequest).
    pub fn build(self) -> crate::types::FastLaunchLaunchTemplateSpecificationRequest {
        crate::types::FastLaunchLaunchTemplateSpecificationRequest {
            launch_template_id: self.launch_template_id,
            launch_template_name: self.launch_template_name,
            version: self.version,
        }
    }
}
