// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the credit option for CPU usage of a T instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreditSpecification {
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    #[doc(hidden)]
    pub cpu_credits: std::option::Option<std::string::String>,
}
impl CreditSpecification {
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn cpu_credits(&self) -> std::option::Option<&str> {
        self.cpu_credits.as_deref()
    }
}
impl CreditSpecification {
    /// Creates a new builder-style object to manufacture [`CreditSpecification`](crate::types::CreditSpecification).
    pub fn builder() -> crate::types::builders::CreditSpecificationBuilder {
        crate::types::builders::CreditSpecificationBuilder::default()
    }
}

/// A builder for [`CreditSpecification`](crate::types::CreditSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreditSpecificationBuilder {
    pub(crate) cpu_credits: std::option::Option<std::string::String>,
}
impl CreditSpecificationBuilder {
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn cpu_credits(mut self, input: impl Into<std::string::String>) -> Self {
        self.cpu_credits = Some(input.into());
        self
    }
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn set_cpu_credits(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cpu_credits = input;
        self
    }
    /// Consumes the builder and constructs a [`CreditSpecification`](crate::types::CreditSpecification).
    pub fn build(self) -> crate::types::CreditSpecification {
        crate::types::CreditSpecification {
            cpu_credits: self.cpu_credits,
        }
    }
}
