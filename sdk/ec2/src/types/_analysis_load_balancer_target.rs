// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a load balancer target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalysisLoadBalancerTarget {
    /// <p>The IP address.</p>
    #[doc(hidden)]
    pub address: std::option::Option<std::string::String>,
    /// <p>The Availability Zone.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>Information about the instance.</p>
    #[doc(hidden)]
    pub instance: std::option::Option<crate::types::AnalysisComponent>,
    /// <p>The port on which the target is listening.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
}
impl AnalysisLoadBalancerTarget {
    /// <p>The IP address.</p>
    pub fn address(&self) -> std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>Information about the instance.</p>
    pub fn instance(&self) -> std::option::Option<&crate::types::AnalysisComponent> {
        self.instance.as_ref()
    }
    /// <p>The port on which the target is listening.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
}
impl AnalysisLoadBalancerTarget {
    /// Creates a new builder-style object to manufacture [`AnalysisLoadBalancerTarget`](crate::types::AnalysisLoadBalancerTarget).
    pub fn builder() -> crate::types::builders::AnalysisLoadBalancerTargetBuilder {
        crate::types::builders::AnalysisLoadBalancerTargetBuilder::default()
    }
}

/// A builder for [`AnalysisLoadBalancerTarget`](crate::types::AnalysisLoadBalancerTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalysisLoadBalancerTargetBuilder {
    pub(crate) address: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) instance: std::option::Option<crate::types::AnalysisComponent>,
    pub(crate) port: std::option::Option<i32>,
}
impl AnalysisLoadBalancerTargetBuilder {
    /// <p>The IP address.</p>
    pub fn address(mut self, input: impl Into<std::string::String>) -> Self {
        self.address = Some(input.into());
        self
    }
    /// <p>The IP address.</p>
    pub fn set_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>Information about the instance.</p>
    pub fn instance(mut self, input: crate::types::AnalysisComponent) -> Self {
        self.instance = Some(input);
        self
    }
    /// <p>Information about the instance.</p>
    pub fn set_instance(
        mut self,
        input: std::option::Option<crate::types::AnalysisComponent>,
    ) -> Self {
        self.instance = input;
        self
    }
    /// <p>The port on which the target is listening.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port on which the target is listening.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalysisLoadBalancerTarget`](crate::types::AnalysisLoadBalancerTarget).
    pub fn build(self) -> crate::types::AnalysisLoadBalancerTarget {
        crate::types::AnalysisLoadBalancerTarget {
            address: self.address,
            availability_zone: self.availability_zone,
            instance: self.instance,
            port: self.port,
        }
    }
}
