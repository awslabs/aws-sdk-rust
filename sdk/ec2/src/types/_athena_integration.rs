// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes integration options for Amazon Athena.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AthenaIntegration {
    /// <p>The location in Amazon S3 to store the generated CloudFormation template.</p>
    #[doc(hidden)]
    pub integration_result_s3_destination_arn: std::option::Option<std::string::String>,
    /// <p>The schedule for adding new partitions to the table.</p>
    #[doc(hidden)]
    pub partition_load_frequency: std::option::Option<crate::types::PartitionLoadFrequency>,
    /// <p>The start date for the partition.</p>
    #[doc(hidden)]
    pub partition_start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end date for the partition.</p>
    #[doc(hidden)]
    pub partition_end_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl AthenaIntegration {
    /// <p>The location in Amazon S3 to store the generated CloudFormation template.</p>
    pub fn integration_result_s3_destination_arn(&self) -> std::option::Option<&str> {
        self.integration_result_s3_destination_arn.as_deref()
    }
    /// <p>The schedule for adding new partitions to the table.</p>
    pub fn partition_load_frequency(
        &self,
    ) -> std::option::Option<&crate::types::PartitionLoadFrequency> {
        self.partition_load_frequency.as_ref()
    }
    /// <p>The start date for the partition.</p>
    pub fn partition_start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.partition_start_date.as_ref()
    }
    /// <p>The end date for the partition.</p>
    pub fn partition_end_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.partition_end_date.as_ref()
    }
}
impl AthenaIntegration {
    /// Creates a new builder-style object to manufacture [`AthenaIntegration`](crate::types::AthenaIntegration).
    pub fn builder() -> crate::types::builders::AthenaIntegrationBuilder {
        crate::types::builders::AthenaIntegrationBuilder::default()
    }
}

/// A builder for [`AthenaIntegration`](crate::types::AthenaIntegration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AthenaIntegrationBuilder {
    pub(crate) integration_result_s3_destination_arn: std::option::Option<std::string::String>,
    pub(crate) partition_load_frequency: std::option::Option<crate::types::PartitionLoadFrequency>,
    pub(crate) partition_start_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) partition_end_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl AthenaIntegrationBuilder {
    /// <p>The location in Amazon S3 to store the generated CloudFormation template.</p>
    pub fn integration_result_s3_destination_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.integration_result_s3_destination_arn = Some(input.into());
        self
    }
    /// <p>The location in Amazon S3 to store the generated CloudFormation template.</p>
    pub fn set_integration_result_s3_destination_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.integration_result_s3_destination_arn = input;
        self
    }
    /// <p>The schedule for adding new partitions to the table.</p>
    pub fn partition_load_frequency(mut self, input: crate::types::PartitionLoadFrequency) -> Self {
        self.partition_load_frequency = Some(input);
        self
    }
    /// <p>The schedule for adding new partitions to the table.</p>
    pub fn set_partition_load_frequency(
        mut self,
        input: std::option::Option<crate::types::PartitionLoadFrequency>,
    ) -> Self {
        self.partition_load_frequency = input;
        self
    }
    /// <p>The start date for the partition.</p>
    pub fn partition_start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.partition_start_date = Some(input);
        self
    }
    /// <p>The start date for the partition.</p>
    pub fn set_partition_start_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.partition_start_date = input;
        self
    }
    /// <p>The end date for the partition.</p>
    pub fn partition_end_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.partition_end_date = Some(input);
        self
    }
    /// <p>The end date for the partition.</p>
    pub fn set_partition_end_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.partition_end_date = input;
        self
    }
    /// Consumes the builder and constructs a [`AthenaIntegration`](crate::types::AthenaIntegration).
    pub fn build(self) -> crate::types::AthenaIntegration {
        crate::types::AthenaIntegration {
            integration_result_s3_destination_arn: self.integration_result_s3_destination_arn,
            partition_load_frequency: self.partition_load_frequency,
            partition_start_date: self.partition_start_date,
            partition_end_date: self.partition_end_date,
        }
    }
}
