// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes the security group that is referenced in the security group rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReferencedSecurityGroup {
    /// <p>The ID of the security group.</p>
    #[doc(hidden)]
    pub group_id: std::option::Option<std::string::String>,
    /// <p>The status of a VPC peering connection, if applicable.</p>
    #[doc(hidden)]
    pub peering_status: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC peering connection.</p>
    #[doc(hidden)]
    pub vpc_peering_connection_id: std::option::Option<std::string::String>,
}
impl ReferencedSecurityGroup {
    /// <p>The ID of the security group.</p>
    pub fn group_id(&self) -> std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The status of a VPC peering connection, if applicable.</p>
    pub fn peering_status(&self) -> std::option::Option<&str> {
        self.peering_status.as_deref()
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn vpc_peering_connection_id(&self) -> std::option::Option<&str> {
        self.vpc_peering_connection_id.as_deref()
    }
}
impl ReferencedSecurityGroup {
    /// Creates a new builder-style object to manufacture [`ReferencedSecurityGroup`](crate::types::ReferencedSecurityGroup).
    pub fn builder() -> crate::types::builders::ReferencedSecurityGroupBuilder {
        crate::types::builders::ReferencedSecurityGroupBuilder::default()
    }
}

/// A builder for [`ReferencedSecurityGroup`](crate::types::ReferencedSecurityGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReferencedSecurityGroupBuilder {
    pub(crate) group_id: std::option::Option<std::string::String>,
    pub(crate) peering_status: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) vpc_peering_connection_id: std::option::Option<std::string::String>,
}
impl ReferencedSecurityGroupBuilder {
    /// <p>The ID of the security group.</p>
    pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_id = Some(input.into());
        self
    }
    /// <p>The ID of the security group.</p>
    pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The status of a VPC peering connection, if applicable.</p>
    pub fn peering_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.peering_status = Some(input.into());
        self
    }
    /// <p>The status of a VPC peering connection, if applicable.</p>
    pub fn set_peering_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.peering_status = input;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn vpc_peering_connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_peering_connection_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn set_vpc_peering_connection_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_peering_connection_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ReferencedSecurityGroup`](crate::types::ReferencedSecurityGroup).
    pub fn build(self) -> crate::types::ReferencedSecurityGroup {
        crate::types::ReferencedSecurityGroup {
            group_id: self.group_id,
            peering_status: self.peering_status,
            user_id: self.user_id,
            vpc_id: self.vpc_id,
            vpc_peering_connection_id: self.vpc_peering_connection_id,
        }
    }
}
