// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a VPC peering connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcPeeringConnection {
    /// <p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub accepter_vpc_info: ::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo>,
    /// <p>The time that an unaccepted VPC peering connection will expire.</p>
    pub expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub requester_vpc_info: ::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo>,
    /// <p>The status of the VPC peering connection.</p>
    pub status: ::std::option::Option<crate::types::VpcPeeringConnectionStateReason>,
    /// <p>Any tags assigned to the resource.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The ID of the VPC peering connection.</p>
    pub vpc_peering_connection_id: ::std::option::Option<::std::string::String>,
}
impl VpcPeeringConnection {
    /// <p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn accepter_vpc_info(&self) -> ::std::option::Option<&crate::types::VpcPeeringConnectionVpcInfo> {
        self.accepter_vpc_info.as_ref()
    }
    /// <p>The time that an unaccepted VPC peering connection will expire.</p>
    pub fn expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_time.as_ref()
    }
    /// <p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn requester_vpc_info(&self) -> ::std::option::Option<&crate::types::VpcPeeringConnectionVpcInfo> {
        self.requester_vpc_info.as_ref()
    }
    /// <p>The status of the VPC peering connection.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VpcPeeringConnectionStateReason> {
        self.status.as_ref()
    }
    /// <p>Any tags assigned to the resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn vpc_peering_connection_id(&self) -> ::std::option::Option<&str> {
        self.vpc_peering_connection_id.as_deref()
    }
}
impl VpcPeeringConnection {
    /// Creates a new builder-style object to manufacture [`VpcPeeringConnection`](crate::types::VpcPeeringConnection).
    pub fn builder() -> crate::types::builders::VpcPeeringConnectionBuilder {
        crate::types::builders::VpcPeeringConnectionBuilder::default()
    }
}

/// A builder for [`VpcPeeringConnection`](crate::types::VpcPeeringConnection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcPeeringConnectionBuilder {
    pub(crate) accepter_vpc_info: ::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo>,
    pub(crate) expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) requester_vpc_info: ::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo>,
    pub(crate) status: ::std::option::Option<crate::types::VpcPeeringConnectionStateReason>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) vpc_peering_connection_id: ::std::option::Option<::std::string::String>,
}
impl VpcPeeringConnectionBuilder {
    /// <p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn accepter_vpc_info(mut self, input: crate::types::VpcPeeringConnectionVpcInfo) -> Self {
        self.accepter_vpc_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn set_accepter_vpc_info(mut self, input: ::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo>) -> Self {
        self.accepter_vpc_info = input;
        self
    }
    /// <p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn get_accepter_vpc_info(&self) -> &::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo> {
        &self.accepter_vpc_info
    }
    /// <p>The time that an unaccepted VPC peering connection will expire.</p>
    pub fn expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that an unaccepted VPC peering connection will expire.</p>
    pub fn set_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_time = input;
        self
    }
    /// <p>The time that an unaccepted VPC peering connection will expire.</p>
    pub fn get_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_time
    }
    /// <p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn requester_vpc_info(mut self, input: crate::types::VpcPeeringConnectionVpcInfo) -> Self {
        self.requester_vpc_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn set_requester_vpc_info(mut self, input: ::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo>) -> Self {
        self.requester_vpc_info = input;
        self
    }
    /// <p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub fn get_requester_vpc_info(&self) -> &::std::option::Option<crate::types::VpcPeeringConnectionVpcInfo> {
        &self.requester_vpc_info
    }
    /// <p>The status of the VPC peering connection.</p>
    pub fn status(mut self, input: crate::types::VpcPeeringConnectionStateReason) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the VPC peering connection.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VpcPeeringConnectionStateReason>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the VPC peering connection.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VpcPeeringConnectionStateReason> {
        &self.status
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any tags assigned to the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Any tags assigned to the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn vpc_peering_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_peering_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn set_vpc_peering_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_peering_connection_id = input;
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn get_vpc_peering_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_peering_connection_id
    }
    /// Consumes the builder and constructs a [`VpcPeeringConnection`](crate::types::VpcPeeringConnection).
    pub fn build(self) -> crate::types::VpcPeeringConnection {
        crate::types::VpcPeeringConnection {
            accepter_vpc_info: self.accepter_vpc_info,
            expiration_time: self.expiration_time,
            requester_vpc_info: self.requester_vpc_info,
            status: self.status,
            tags: self.tags,
            vpc_peering_connection_id: self.vpc_peering_connection_id,
        }
    }
}
