// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p>
/// <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code>, or both to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasnâ€™t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html">OnDemandOptions</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions">SpotOptions</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetCapacitySpecification {
    /// <p>The number of units to request, filled using <code>DefaultTargetCapacityType</code>.</p>
    #[doc(hidden)]
    pub total_target_capacity: std::option::Option<i32>,
    /// <p>The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.</p>
    #[doc(hidden)]
    pub on_demand_target_capacity: std::option::Option<i32>,
    /// <p>The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.</p>
    #[doc(hidden)]
    pub spot_target_capacity: std::option::Option<i32>,
    /// <p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.</p>
    #[doc(hidden)]
    pub default_target_capacity_type: std::option::Option<crate::types::DefaultTargetCapacityType>,
    /// <p>The unit for the target capacity. <code>TargetCapacityUnitType</code> can only be specified when <code>InstanceRequirements</code> is specified.</p>
    /// <p>Default: <code>units</code> (translates to number of instances)</p>
    #[doc(hidden)]
    pub target_capacity_unit_type: std::option::Option<crate::types::TargetCapacityUnitType>,
}
impl TargetCapacitySpecification {
    /// <p>The number of units to request, filled using <code>DefaultTargetCapacityType</code>.</p>
    pub fn total_target_capacity(&self) -> std::option::Option<i32> {
        self.total_target_capacity
    }
    /// <p>The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.</p>
    pub fn on_demand_target_capacity(&self) -> std::option::Option<i32> {
        self.on_demand_target_capacity
    }
    /// <p>The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.</p>
    pub fn spot_target_capacity(&self) -> std::option::Option<i32> {
        self.spot_target_capacity
    }
    /// <p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.</p>
    pub fn default_target_capacity_type(
        &self,
    ) -> std::option::Option<&crate::types::DefaultTargetCapacityType> {
        self.default_target_capacity_type.as_ref()
    }
    /// <p>The unit for the target capacity. <code>TargetCapacityUnitType</code> can only be specified when <code>InstanceRequirements</code> is specified.</p>
    /// <p>Default: <code>units</code> (translates to number of instances)</p>
    pub fn target_capacity_unit_type(
        &self,
    ) -> std::option::Option<&crate::types::TargetCapacityUnitType> {
        self.target_capacity_unit_type.as_ref()
    }
}
impl TargetCapacitySpecification {
    /// Creates a new builder-style object to manufacture [`TargetCapacitySpecification`](crate::types::TargetCapacitySpecification).
    pub fn builder() -> crate::types::builders::TargetCapacitySpecificationBuilder {
        crate::types::builders::TargetCapacitySpecificationBuilder::default()
    }
}

/// A builder for [`TargetCapacitySpecification`](crate::types::TargetCapacitySpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetCapacitySpecificationBuilder {
    pub(crate) total_target_capacity: std::option::Option<i32>,
    pub(crate) on_demand_target_capacity: std::option::Option<i32>,
    pub(crate) spot_target_capacity: std::option::Option<i32>,
    pub(crate) default_target_capacity_type:
        std::option::Option<crate::types::DefaultTargetCapacityType>,
    pub(crate) target_capacity_unit_type: std::option::Option<crate::types::TargetCapacityUnitType>,
}
impl TargetCapacitySpecificationBuilder {
    /// <p>The number of units to request, filled using <code>DefaultTargetCapacityType</code>.</p>
    pub fn total_target_capacity(mut self, input: i32) -> Self {
        self.total_target_capacity = Some(input);
        self
    }
    /// <p>The number of units to request, filled using <code>DefaultTargetCapacityType</code>.</p>
    pub fn set_total_target_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.total_target_capacity = input;
        self
    }
    /// <p>The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.</p>
    pub fn on_demand_target_capacity(mut self, input: i32) -> Self {
        self.on_demand_target_capacity = Some(input);
        self
    }
    /// <p>The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.</p>
    pub fn set_on_demand_target_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.on_demand_target_capacity = input;
        self
    }
    /// <p>The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.</p>
    pub fn spot_target_capacity(mut self, input: i32) -> Self {
        self.spot_target_capacity = Some(input);
        self
    }
    /// <p>The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.</p>
    pub fn set_spot_target_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.spot_target_capacity = input;
        self
    }
    /// <p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.</p>
    pub fn default_target_capacity_type(
        mut self,
        input: crate::types::DefaultTargetCapacityType,
    ) -> Self {
        self.default_target_capacity_type = Some(input);
        self
    }
    /// <p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.</p>
    pub fn set_default_target_capacity_type(
        mut self,
        input: std::option::Option<crate::types::DefaultTargetCapacityType>,
    ) -> Self {
        self.default_target_capacity_type = input;
        self
    }
    /// <p>The unit for the target capacity. <code>TargetCapacityUnitType</code> can only be specified when <code>InstanceRequirements</code> is specified.</p>
    /// <p>Default: <code>units</code> (translates to number of instances)</p>
    pub fn target_capacity_unit_type(
        mut self,
        input: crate::types::TargetCapacityUnitType,
    ) -> Self {
        self.target_capacity_unit_type = Some(input);
        self
    }
    /// <p>The unit for the target capacity. <code>TargetCapacityUnitType</code> can only be specified when <code>InstanceRequirements</code> is specified.</p>
    /// <p>Default: <code>units</code> (translates to number of instances)</p>
    pub fn set_target_capacity_unit_type(
        mut self,
        input: std::option::Option<crate::types::TargetCapacityUnitType>,
    ) -> Self {
        self.target_capacity_unit_type = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetCapacitySpecification`](crate::types::TargetCapacitySpecification).
    pub fn build(self) -> crate::types::TargetCapacitySpecification {
        crate::types::TargetCapacitySpecification {
            total_target_capacity: self.total_target_capacity,
            on_demand_target_capacity: self.on_demand_target_capacity,
            spot_target_capacity: self.spot_target_capacity,
            default_target_capacity_type: self.default_target_capacity_type,
            target_capacity_unit_type: self.target_capacity_unit_type,
        }
    }
}
