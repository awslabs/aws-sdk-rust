// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A CIDR provisioned to an IPAM pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpamPoolCidr {
    /// <p>The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask) and refers to a range of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR example is <code>2001:DB8::/32</code>.</p>
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
    /// <p>The state of the CIDR.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::IpamPoolCidrState>,
    /// <p>Details related to why an IPAM pool CIDR failed to be provisioned.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<crate::types::IpamPoolCidrFailureReason>,
}
impl IpamPoolCidr {
    /// <p>The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask) and refers to a range of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR example is <code>2001:DB8::/32</code>.</p>
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>The state of the CIDR.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::IpamPoolCidrState> {
        self.state.as_ref()
    }
    /// <p>Details related to why an IPAM pool CIDR failed to be provisioned.</p>
    pub fn failure_reason(&self) -> std::option::Option<&crate::types::IpamPoolCidrFailureReason> {
        self.failure_reason.as_ref()
    }
}
impl IpamPoolCidr {
    /// Creates a new builder-style object to manufacture [`IpamPoolCidr`](crate::types::IpamPoolCidr).
    pub fn builder() -> crate::types::builders::IpamPoolCidrBuilder {
        crate::types::builders::IpamPoolCidrBuilder::default()
    }
}

/// A builder for [`IpamPoolCidr`](crate::types::IpamPoolCidr).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpamPoolCidrBuilder {
    pub(crate) cidr: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::IpamPoolCidrState>,
    pub(crate) failure_reason: std::option::Option<crate::types::IpamPoolCidrFailureReason>,
}
impl IpamPoolCidrBuilder {
    /// <p>The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask) and refers to a range of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR example is <code>2001:DB8::/32</code>.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// <p>The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask) and refers to a range of IP addresses. An IPv4 CIDR example is <code>10.24.34.0/23</code>. An IPv6 CIDR example is <code>2001:DB8::/32</code>.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The state of the CIDR.</p>
    pub fn state(mut self, input: crate::types::IpamPoolCidrState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the CIDR.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::IpamPoolCidrState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>Details related to why an IPAM pool CIDR failed to be provisioned.</p>
    pub fn failure_reason(mut self, input: crate::types::IpamPoolCidrFailureReason) -> Self {
        self.failure_reason = Some(input);
        self
    }
    /// <p>Details related to why an IPAM pool CIDR failed to be provisioned.</p>
    pub fn set_failure_reason(
        mut self,
        input: std::option::Option<crate::types::IpamPoolCidrFailureReason>,
    ) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`IpamPoolCidr`](crate::types::IpamPoolCidr).
    pub fn build(self) -> crate::types::IpamPoolCidr {
        crate::types::IpamPoolCidr {
            cidr: self.cidr,
            state: self.state,
            failure_reason: self.failure_reason,
        }
    }
}
