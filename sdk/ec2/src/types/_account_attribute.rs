// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an account attribute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountAttribute {
    /// <p>The name of the account attribute.</p>
    pub attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The values for the account attribute.</p>
    pub attribute_values: ::std::option::Option<::std::vec::Vec<crate::types::AccountAttributeValue>>,
}
impl AccountAttribute {
    /// <p>The name of the account attribute.</p>
    pub fn attribute_name(&self) -> ::std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The values for the account attribute.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_values.is_none()`.
    pub fn attribute_values(&self) -> &[crate::types::AccountAttributeValue] {
        self.attribute_values.as_deref().unwrap_or_default()
    }
}
impl AccountAttribute {
    /// Creates a new builder-style object to manufacture [`AccountAttribute`](crate::types::AccountAttribute).
    pub fn builder() -> crate::types::builders::AccountAttributeBuilder {
        crate::types::builders::AccountAttributeBuilder::default()
    }
}

/// A builder for [`AccountAttribute`](crate::types::AccountAttribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountAttributeBuilder {
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_values: ::std::option::Option<::std::vec::Vec<crate::types::AccountAttributeValue>>,
}
impl AccountAttributeBuilder {
    /// <p>The name of the account attribute.</p>
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the account attribute.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of the account attribute.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// Appends an item to `attribute_values`.
    ///
    /// To override the contents of this collection use [`set_attribute_values`](Self::set_attribute_values).
    ///
    /// <p>The values for the account attribute.</p>
    pub fn attribute_values(mut self, input: crate::types::AccountAttributeValue) -> Self {
        let mut v = self.attribute_values.unwrap_or_default();
        v.push(input);
        self.attribute_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values for the account attribute.</p>
    pub fn set_attribute_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccountAttributeValue>>) -> Self {
        self.attribute_values = input;
        self
    }
    /// <p>The values for the account attribute.</p>
    pub fn get_attribute_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccountAttributeValue>> {
        &self.attribute_values
    }
    /// Consumes the builder and constructs a [`AccountAttribute`](crate::types::AccountAttribute).
    pub fn build(self) -> crate::types::AccountAttribute {
        crate::types::AccountAttribute {
            attribute_name: self.attribute_name,
            attribute_values: self.attribute_values,
        }
    }
}
