// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an instance running on a Dedicated Host.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HostInstance {
    /// <p>The ID of instance that is running on the Dedicated Host.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The instance type (for example, <code>m3.medium</code>) of the running instance.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
}
impl HostInstance {
    /// <p>The ID of instance that is running on the Dedicated Host.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The instance type (for example, <code>m3.medium</code>) of the running instance.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
}
impl HostInstance {
    /// Creates a new builder-style object to manufacture [`HostInstance`](crate::types::HostInstance).
    pub fn builder() -> crate::types::builders::HostInstanceBuilder {
        crate::types::builders::HostInstanceBuilder::default()
    }
}

/// A builder for [`HostInstance`](crate::types::HostInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HostInstanceBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
}
impl HostInstanceBuilder {
    /// <p>The ID of instance that is running on the Dedicated Host.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of instance that is running on the Dedicated Host.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The instance type (for example, <code>m3.medium</code>) of the running instance.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type (for example, <code>m3.medium</code>) of the running instance.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the instance.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// Consumes the builder and constructs a [`HostInstance`](crate::types::HostInstance).
    pub fn build(self) -> crate::types::HostInstance {
        crate::types::HostInstance {
            instance_id: self.instance_id,
            instance_type: self.instance_type,
            owner_id: self.owner_id,
        }
    }
}
