// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CPU options for the instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CpuOptions {
    /// <p>The number of CPU cores for the instance.</p>
    #[doc(hidden)]
    pub core_count: std::option::Option<i32>,
    /// <p>The number of threads per CPU core.</p>
    #[doc(hidden)]
    pub threads_per_core: std::option::Option<i32>,
}
impl CpuOptions {
    /// <p>The number of CPU cores for the instance.</p>
    pub fn core_count(&self) -> std::option::Option<i32> {
        self.core_count
    }
    /// <p>The number of threads per CPU core.</p>
    pub fn threads_per_core(&self) -> std::option::Option<i32> {
        self.threads_per_core
    }
}
impl CpuOptions {
    /// Creates a new builder-style object to manufacture [`CpuOptions`](crate::types::CpuOptions).
    pub fn builder() -> crate::types::builders::CpuOptionsBuilder {
        crate::types::builders::CpuOptionsBuilder::default()
    }
}

/// A builder for [`CpuOptions`](crate::types::CpuOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CpuOptionsBuilder {
    pub(crate) core_count: std::option::Option<i32>,
    pub(crate) threads_per_core: std::option::Option<i32>,
}
impl CpuOptionsBuilder {
    /// <p>The number of CPU cores for the instance.</p>
    pub fn core_count(mut self, input: i32) -> Self {
        self.core_count = Some(input);
        self
    }
    /// <p>The number of CPU cores for the instance.</p>
    pub fn set_core_count(mut self, input: std::option::Option<i32>) -> Self {
        self.core_count = input;
        self
    }
    /// <p>The number of threads per CPU core.</p>
    pub fn threads_per_core(mut self, input: i32) -> Self {
        self.threads_per_core = Some(input);
        self
    }
    /// <p>The number of threads per CPU core.</p>
    pub fn set_threads_per_core(mut self, input: std::option::Option<i32>) -> Self {
        self.threads_per_core = input;
        self
    }
    /// Consumes the builder and constructs a [`CpuOptions`](crate::types::CpuOptions).
    pub fn build(self) -> crate::types::CpuOptions {
        crate::types::CpuOptions {
            core_count: self.core_count,
            threads_per_core: self.threads_per_core,
        }
    }
}
