// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a connection notification for a VPC endpoint or VPC endpoint service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionNotification {
    /// <p>The ID of the notification.</p>
    pub connection_notification_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the endpoint service.</p>
    pub service_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC endpoint.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of notification.</p>
    pub connection_notification_type: ::std::option::Option<crate::types::ConnectionNotificationType>,
    /// <p>The ARN of the SNS topic for the notification.</p>
    pub connection_notification_arn: ::std::option::Option<::std::string::String>,
    /// <p>The events for the notification. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub connection_events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The state of the notification.</p>
    pub connection_notification_state: ::std::option::Option<crate::types::ConnectionNotificationState>,
}
impl ConnectionNotification {
    /// <p>The ID of the notification.</p>
    pub fn connection_notification_id(&self) -> ::std::option::Option<&str> {
        self.connection_notification_id.as_deref()
    }
    /// <p>The ID of the endpoint service.</p>
    pub fn service_id(&self) -> ::std::option::Option<&str> {
        self.service_id.as_deref()
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The type of notification.</p>
    pub fn connection_notification_type(&self) -> ::std::option::Option<&crate::types::ConnectionNotificationType> {
        self.connection_notification_type.as_ref()
    }
    /// <p>The ARN of the SNS topic for the notification.</p>
    pub fn connection_notification_arn(&self) -> ::std::option::Option<&str> {
        self.connection_notification_arn.as_deref()
    }
    /// <p>The events for the notification. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.connection_events.is_none()`.
    pub fn connection_events(&self) -> &[::std::string::String] {
        self.connection_events.as_deref().unwrap_or_default()
    }
    /// <p>The state of the notification.</p>
    pub fn connection_notification_state(&self) -> ::std::option::Option<&crate::types::ConnectionNotificationState> {
        self.connection_notification_state.as_ref()
    }
}
impl ConnectionNotification {
    /// Creates a new builder-style object to manufacture [`ConnectionNotification`](crate::types::ConnectionNotification).
    pub fn builder() -> crate::types::builders::ConnectionNotificationBuilder {
        crate::types::builders::ConnectionNotificationBuilder::default()
    }
}

/// A builder for [`ConnectionNotification`](crate::types::ConnectionNotification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectionNotificationBuilder {
    pub(crate) connection_notification_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) connection_notification_type: ::std::option::Option<crate::types::ConnectionNotificationType>,
    pub(crate) connection_notification_arn: ::std::option::Option<::std::string::String>,
    pub(crate) connection_events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) connection_notification_state: ::std::option::Option<crate::types::ConnectionNotificationState>,
}
impl ConnectionNotificationBuilder {
    /// <p>The ID of the notification.</p>
    pub fn connection_notification_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_notification_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the notification.</p>
    pub fn set_connection_notification_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_notification_id = input;
        self
    }
    /// <p>The ID of the notification.</p>
    pub fn get_connection_notification_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_notification_id
    }
    /// <p>The ID of the endpoint service.</p>
    pub fn service_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the endpoint service.</p>
    pub fn set_service_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_id = input;
        self
    }
    /// <p>The ID of the endpoint service.</p>
    pub fn get_service_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_id
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>The type of notification.</p>
    pub fn connection_notification_type(mut self, input: crate::types::ConnectionNotificationType) -> Self {
        self.connection_notification_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of notification.</p>
    pub fn set_connection_notification_type(mut self, input: ::std::option::Option<crate::types::ConnectionNotificationType>) -> Self {
        self.connection_notification_type = input;
        self
    }
    /// <p>The type of notification.</p>
    pub fn get_connection_notification_type(&self) -> &::std::option::Option<crate::types::ConnectionNotificationType> {
        &self.connection_notification_type
    }
    /// <p>The ARN of the SNS topic for the notification.</p>
    pub fn connection_notification_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_notification_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the SNS topic for the notification.</p>
    pub fn set_connection_notification_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_notification_arn = input;
        self
    }
    /// <p>The ARN of the SNS topic for the notification.</p>
    pub fn get_connection_notification_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_notification_arn
    }
    /// Appends an item to `connection_events`.
    ///
    /// To override the contents of this collection use [`set_connection_events`](Self::set_connection_events).
    ///
    /// <p>The events for the notification. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub fn connection_events(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.connection_events.unwrap_or_default();
        v.push(input.into());
        self.connection_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The events for the notification. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub fn set_connection_events(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.connection_events = input;
        self
    }
    /// <p>The events for the notification. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub fn get_connection_events(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.connection_events
    }
    /// <p>The state of the notification.</p>
    pub fn connection_notification_state(mut self, input: crate::types::ConnectionNotificationState) -> Self {
        self.connection_notification_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the notification.</p>
    pub fn set_connection_notification_state(mut self, input: ::std::option::Option<crate::types::ConnectionNotificationState>) -> Self {
        self.connection_notification_state = input;
        self
    }
    /// <p>The state of the notification.</p>
    pub fn get_connection_notification_state(&self) -> &::std::option::Option<crate::types::ConnectionNotificationState> {
        &self.connection_notification_state
    }
    /// Consumes the builder and constructs a [`ConnectionNotification`](crate::types::ConnectionNotification).
    pub fn build(self) -> crate::types::ConnectionNotification {
        crate::types::ConnectionNotification {
            connection_notification_id: self.connection_notification_id,
            service_id: self.service_id,
            vpc_endpoint_id: self.vpc_endpoint_id,
            connection_notification_type: self.connection_notification_type,
            connection_notification_arn: self.connection_notification_arn,
            connection_events: self.connection_events,
            connection_notification_state: self.connection_notification_state,
        }
    }
}
