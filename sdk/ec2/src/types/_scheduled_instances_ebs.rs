// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an EBS volume for a Scheduled Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ScheduledInstancesEbs {
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    #[doc(hidden)]
    pub delete_on_termination: std::option::Option<bool>,
    /// <p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) to provision for an <code>io1</code> or <code>io2</code> volume, with a maximum ratio of 50 IOPS/GiB for <code>io1</code>, and 500 IOPS/GiB for <code>io2</code>. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances built on the Nitro System</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    /// <p>This parameter is valid only for Provisioned IOPS SSD (<code>io1</code> and <code>io2</code>) volumes.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The size of the volume, in GiB.</p>
    /// <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
    #[doc(hidden)]
    pub volume_size: std::option::Option<i32>,
    /// <p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code> io2</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p>
    /// <p>Default: <code>gp2</code> </p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<std::string::String>,
}
impl ScheduledInstancesEbs {
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn delete_on_termination(&self) -> std::option::Option<bool> {
        self.delete_on_termination
    }
    /// <p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The number of I/O operations per second (IOPS) to provision for an <code>io1</code> or <code>io2</code> volume, with a maximum ratio of 50 IOPS/GiB for <code>io1</code>, and 500 IOPS/GiB for <code>io2</code>. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances built on the Nitro System</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    /// <p>This parameter is valid only for Provisioned IOPS SSD (<code>io1</code> and <code>io2</code>) volumes.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The size of the volume, in GiB.</p>
    /// <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
    pub fn volume_size(&self) -> std::option::Option<i32> {
        self.volume_size
    }
    /// <p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code> io2</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p>
    /// <p>Default: <code>gp2</code> </p>
    pub fn volume_type(&self) -> std::option::Option<&str> {
        self.volume_type.as_deref()
    }
}
impl ScheduledInstancesEbs {
    /// Creates a new builder-style object to manufacture [`ScheduledInstancesEbs`](crate::types::ScheduledInstancesEbs).
    pub fn builder() -> crate::types::builders::ScheduledInstancesEbsBuilder {
        crate::types::builders::ScheduledInstancesEbsBuilder::default()
    }
}

/// A builder for [`ScheduledInstancesEbs`](crate::types::ScheduledInstancesEbs).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScheduledInstancesEbsBuilder {
    pub(crate) delete_on_termination: std::option::Option<bool>,
    pub(crate) encrypted: std::option::Option<bool>,
    pub(crate) iops: std::option::Option<i32>,
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) volume_size: std::option::Option<i32>,
    pub(crate) volume_type: std::option::Option<std::string::String>,
}
impl ScheduledInstancesEbsBuilder {
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn delete_on_termination(mut self, input: bool) -> Self {
        self.delete_on_termination = Some(input);
        self
    }
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub fn set_delete_on_termination(mut self, input: std::option::Option<bool>) -> Self {
        self.delete_on_termination = input;
        self
    }
    /// <p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = Some(input);
        self
    }
    /// <p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
    pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>The number of I/O operations per second (IOPS) to provision for an <code>io1</code> or <code>io2</code> volume, with a maximum ratio of 50 IOPS/GiB for <code>io1</code>, and 500 IOPS/GiB for <code>io2</code>. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances built on the Nitro System</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    /// <p>This parameter is valid only for Provisioned IOPS SSD (<code>io1</code> and <code>io2</code>) volumes.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>The number of I/O operations per second (IOPS) to provision for an <code>io1</code> or <code>io2</code> volume, with a maximum ratio of 50 IOPS/GiB for <code>io1</code>, and 500 IOPS/GiB for <code>io2</code>. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">instances built on the Nitro System</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>.</p>
    /// <p>This parameter is valid only for Provisioned IOPS SSD (<code>io1</code> and <code>io2</code>) volumes.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The size of the volume, in GiB.</p>
    /// <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
    pub fn volume_size(mut self, input: i32) -> Self {
        self.volume_size = Some(input);
        self
    }
    /// <p>The size of the volume, in GiB.</p>
    /// <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
    pub fn set_volume_size(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size = input;
        self
    }
    /// <p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code> io2</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p>
    /// <p>Default: <code>gp2</code> </p>
    pub fn volume_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_type = Some(input.into());
        self
    }
    /// <p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code> io2</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p>
    /// <p>Default: <code>gp2</code> </p>
    pub fn set_volume_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduledInstancesEbs`](crate::types::ScheduledInstancesEbs).
    pub fn build(self) -> crate::types::ScheduledInstancesEbs {
        crate::types::ScheduledInstancesEbs {
            delete_on_termination: self.delete_on_termination,
            encrypted: self.encrypted,
            iops: self.iops,
            snapshot_id: self.snapshot_id,
            volume_size: self.volume_size,
            volume_type: self.volume_type,
        }
    }
}
