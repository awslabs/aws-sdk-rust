// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Reserved Instance listing state.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceCount {
    /// <p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
    #[doc(hidden)]
    pub instance_count: std::option::Option<i32>,
    /// <p>The states of the listed Reserved Instances.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ListingState>,
}
impl InstanceCount {
    /// <p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
    pub fn instance_count(&self) -> std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The states of the listed Reserved Instances.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ListingState> {
        self.state.as_ref()
    }
}
impl InstanceCount {
    /// Creates a new builder-style object to manufacture [`InstanceCount`](crate::types::InstanceCount).
    pub fn builder() -> crate::types::builders::InstanceCountBuilder {
        crate::types::builders::InstanceCountBuilder::default()
    }
}

/// A builder for [`InstanceCount`](crate::types::InstanceCount).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceCountBuilder {
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) state: std::option::Option<crate::types::ListingState>,
}
impl InstanceCountBuilder {
    /// <p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The states of the listed Reserved Instances.</p>
    pub fn state(mut self, input: crate::types::ListingState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The states of the listed Reserved Instances.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ListingState>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceCount`](crate::types::InstanceCount).
    pub fn build(self) -> crate::types::InstanceCount {
        crate::types::InstanceCount {
            instance_count: self.instance_count,
            state: self.state,
        }
    }
}
