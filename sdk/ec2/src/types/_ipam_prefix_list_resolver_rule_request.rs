// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a CIDR selection rule to include in a request. This is used when creating or modifying resolver rules.</p>
/// <p>CIDR selection rules define the business logic for selecting CIDRs from IPAM. If a CIDR matches any of the rules, it will be included. If a rule has multiple conditions, the CIDR has to match every condition of that rule. You can create a prefix list resolver without any CIDR selection rules, but it will generate empty versions (containing no CIDRs) until you add rules.</p>
/// <p>There are three rule types:</p>
/// <ul>
/// <li>
/// <p><b>Static CIDR</b>: A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p></li>
/// <li>
/// <p><b>IPAM pool CIDR</b>: CIDRs from specific IPAM pools (like all CIDRs from your IPAM production pool).</p></li>
/// <li>
/// <p><b>Scope resource CIDR</b>: CIDRs for Amazon Web Services resources like VPCs, subnets, and EIPs within a specific IPAM scope.</p></li>
/// </ul>
/// <p>Condition availability by resource type:</p>
/// <ul>
/// <li>
/// <p>Only 2 of the 3 rule types support conditions - <b>IPAM pool CIDR</b> and <b>Scope resource CIDR</b>. <b>Static CIDR</b> rules cannot have conditions.</p>
/// <ul>
/// <li>
/// <p>Condition available for the <b>IPAM pool CIDR</b> resource type:</p>
/// <ul>
/// <li>
/// <p>Property:</p>
/// <ul>
/// <li>
/// <p>IPAM Pool ID</p></li>
/// <li>
/// <p>CIDR (like 10.24.34.0/23)</p></li>
/// </ul></li>
/// <li>
/// <p>Operation: Equals/Not equals</p></li>
/// <li>
/// <p>Value: The value on which to match the condition</p></li>
/// </ul></li>
/// <li>
/// <p>Conditions for the <b>Scope resource CIDR</b> resource type:</p>
/// <ul>
/// <li>
/// <p>Property:</p>
/// <ul>
/// <li>
/// <p>Resource ID: The unique ID of a resource (like vpc-1234567890abcdef0)</p></li>
/// <li>
/// <p>Resource type (like VPC or Subnet)</p></li>
/// <li>
/// <p>Resource owner (like 111122223333)</p></li>
/// <li>
/// <p>Resource region (like us-east-1)</p></li>
/// <li>
/// <p>Resource tag (like key: name, value: dev-vpc-1)</p></li>
/// <li>
/// <p>CIDR (like 10.24.34.0/23)</p></li>
/// </ul></li>
/// <li>
/// <p>Operation: Equals/Not equals</p></li>
/// <li>
/// <p>Value: The value on which to match the condition</p></li>
/// </ul></li>
/// <li>
/// <p>When setting conditions for a rule, one or more conditions is required.</p></li>
/// </ul></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPrefixListResolverRuleRequest {
    /// <p>The type of CIDR selection rule. Valid values include <code>include</code> for selecting CIDRs that match the conditions, and <code>exclude</code> for excluding CIDRs that match the conditions.</p>
    pub rule_type: ::std::option::Option<crate::types::IpamPrefixListResolverRuleType>,
    /// <p>A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p>
    pub static_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the IPAM scope from which to select CIDRs. This determines whether to select from public or private IP address space.</p>
    pub ipam_scope_id: ::std::option::Option<::std::string::String>,
    /// <p>For rules of type <code>ipam-resource-cidr</code>, this is the resource type.</p>
    pub resource_type: ::std::option::Option<crate::types::IpamResourceType>,
    /// <p>The conditions that determine which CIDRs are selected by this rule. Conditions specify criteria such as resource type, tags, account IDs, and Regions.</p>
    pub conditions: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleConditionRequest>>,
}
impl IpamPrefixListResolverRuleRequest {
    /// <p>The type of CIDR selection rule. Valid values include <code>include</code> for selecting CIDRs that match the conditions, and <code>exclude</code> for excluding CIDRs that match the conditions.</p>
    pub fn rule_type(&self) -> ::std::option::Option<&crate::types::IpamPrefixListResolverRuleType> {
        self.rule_type.as_ref()
    }
    /// <p>A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p>
    pub fn static_cidr(&self) -> ::std::option::Option<&str> {
        self.static_cidr.as_deref()
    }
    /// <p>The ID of the IPAM scope from which to select CIDRs. This determines whether to select from public or private IP address space.</p>
    pub fn ipam_scope_id(&self) -> ::std::option::Option<&str> {
        self.ipam_scope_id.as_deref()
    }
    /// <p>For rules of type <code>ipam-resource-cidr</code>, this is the resource type.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::IpamResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The conditions that determine which CIDRs are selected by this rule. Conditions specify criteria such as resource type, tags, account IDs, and Regions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.conditions.is_none()`.
    pub fn conditions(&self) -> &[crate::types::IpamPrefixListResolverRuleConditionRequest] {
        self.conditions.as_deref().unwrap_or_default()
    }
}
impl IpamPrefixListResolverRuleRequest {
    /// Creates a new builder-style object to manufacture [`IpamPrefixListResolverRuleRequest`](crate::types::IpamPrefixListResolverRuleRequest).
    pub fn builder() -> crate::types::builders::IpamPrefixListResolverRuleRequestBuilder {
        crate::types::builders::IpamPrefixListResolverRuleRequestBuilder::default()
    }
}

/// A builder for [`IpamPrefixListResolverRuleRequest`](crate::types::IpamPrefixListResolverRuleRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IpamPrefixListResolverRuleRequestBuilder {
    pub(crate) rule_type: ::std::option::Option<crate::types::IpamPrefixListResolverRuleType>,
    pub(crate) static_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::IpamResourceType>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleConditionRequest>>,
}
impl IpamPrefixListResolverRuleRequestBuilder {
    /// <p>The type of CIDR selection rule. Valid values include <code>include</code> for selecting CIDRs that match the conditions, and <code>exclude</code> for excluding CIDRs that match the conditions.</p>
    /// This field is required.
    pub fn rule_type(mut self, input: crate::types::IpamPrefixListResolverRuleType) -> Self {
        self.rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of CIDR selection rule. Valid values include <code>include</code> for selecting CIDRs that match the conditions, and <code>exclude</code> for excluding CIDRs that match the conditions.</p>
    pub fn set_rule_type(mut self, input: ::std::option::Option<crate::types::IpamPrefixListResolverRuleType>) -> Self {
        self.rule_type = input;
        self
    }
    /// <p>The type of CIDR selection rule. Valid values include <code>include</code> for selecting CIDRs that match the conditions, and <code>exclude</code> for excluding CIDRs that match the conditions.</p>
    pub fn get_rule_type(&self) -> &::std::option::Option<crate::types::IpamPrefixListResolverRuleType> {
        &self.rule_type
    }
    /// <p>A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p>
    pub fn static_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.static_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p>
    pub fn set_static_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.static_cidr = input;
        self
    }
    /// <p>A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p>
    pub fn get_static_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.static_cidr
    }
    /// <p>The ID of the IPAM scope from which to select CIDRs. This determines whether to select from public or private IP address space.</p>
    pub fn ipam_scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM scope from which to select CIDRs. This determines whether to select from public or private IP address space.</p>
    pub fn set_ipam_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_scope_id = input;
        self
    }
    /// <p>The ID of the IPAM scope from which to select CIDRs. This determines whether to select from public or private IP address space.</p>
    pub fn get_ipam_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_scope_id
    }
    /// <p>For rules of type <code>ipam-resource-cidr</code>, this is the resource type.</p>
    pub fn resource_type(mut self, input: crate::types::IpamResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>For rules of type <code>ipam-resource-cidr</code>, this is the resource type.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::IpamResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>For rules of type <code>ipam-resource-cidr</code>, this is the resource type.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::IpamResourceType> {
        &self.resource_type
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The conditions that determine which CIDRs are selected by this rule. Conditions specify criteria such as resource type, tags, account IDs, and Regions.</p>
    pub fn conditions(mut self, input: crate::types::IpamPrefixListResolverRuleConditionRequest) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The conditions that determine which CIDRs are selected by this rule. Conditions specify criteria such as resource type, tags, account IDs, and Regions.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleConditionRequest>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The conditions that determine which CIDRs are selected by this rule. Conditions specify criteria such as resource type, tags, account IDs, and Regions.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleConditionRequest>> {
        &self.conditions
    }
    /// Consumes the builder and constructs a [`IpamPrefixListResolverRuleRequest`](crate::types::IpamPrefixListResolverRuleRequest).
    pub fn build(self) -> crate::types::IpamPrefixListResolverRuleRequest {
        crate::types::IpamPrefixListResolverRuleRequest {
            rule_type: self.rule_type,
            static_cidr: self.static_cidr,
            ipam_scope_id: self.ipam_scope_id,
            resource_type: self.resource_type,
            conditions: self.conditions,
        }
    }
}
