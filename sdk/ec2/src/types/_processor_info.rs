// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the processor used by the instance type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProcessorInfo {
    /// <p>The architectures supported by the instance type.</p>
    #[doc(hidden)]
    pub supported_architectures: std::option::Option<std::vec::Vec<crate::types::ArchitectureType>>,
    /// <p>The speed of the processor, in GHz.</p>
    #[doc(hidden)]
    pub sustained_clock_speed_in_ghz: std::option::Option<f64>,
}
impl ProcessorInfo {
    /// <p>The architectures supported by the instance type.</p>
    pub fn supported_architectures(
        &self,
    ) -> std::option::Option<&[crate::types::ArchitectureType]> {
        self.supported_architectures.as_deref()
    }
    /// <p>The speed of the processor, in GHz.</p>
    pub fn sustained_clock_speed_in_ghz(&self) -> std::option::Option<f64> {
        self.sustained_clock_speed_in_ghz
    }
}
impl ProcessorInfo {
    /// Creates a new builder-style object to manufacture [`ProcessorInfo`](crate::types::ProcessorInfo).
    pub fn builder() -> crate::types::builders::ProcessorInfoBuilder {
        crate::types::builders::ProcessorInfoBuilder::default()
    }
}

/// A builder for [`ProcessorInfo`](crate::types::ProcessorInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProcessorInfoBuilder {
    pub(crate) supported_architectures:
        std::option::Option<std::vec::Vec<crate::types::ArchitectureType>>,
    pub(crate) sustained_clock_speed_in_ghz: std::option::Option<f64>,
}
impl ProcessorInfoBuilder {
    /// Appends an item to `supported_architectures`.
    ///
    /// To override the contents of this collection use [`set_supported_architectures`](Self::set_supported_architectures).
    ///
    /// <p>The architectures supported by the instance type.</p>
    pub fn supported_architectures(mut self, input: crate::types::ArchitectureType) -> Self {
        let mut v = self.supported_architectures.unwrap_or_default();
        v.push(input);
        self.supported_architectures = Some(v);
        self
    }
    /// <p>The architectures supported by the instance type.</p>
    pub fn set_supported_architectures(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ArchitectureType>>,
    ) -> Self {
        self.supported_architectures = input;
        self
    }
    /// <p>The speed of the processor, in GHz.</p>
    pub fn sustained_clock_speed_in_ghz(mut self, input: f64) -> Self {
        self.sustained_clock_speed_in_ghz = Some(input);
        self
    }
    /// <p>The speed of the processor, in GHz.</p>
    pub fn set_sustained_clock_speed_in_ghz(mut self, input: std::option::Option<f64>) -> Self {
        self.sustained_clock_speed_in_ghz = input;
        self
    }
    /// Consumes the builder and constructs a [`ProcessorInfo`](crate::types::ProcessorInfo).
    pub fn build(self) -> crate::types::ProcessorInfo {
        crate::types::ProcessorInfo {
            supported_architectures: self.supported_architectures,
            sustained_clock_speed_in_ghz: self.sustained_clock_speed_in_ghz,
        }
    }
}
