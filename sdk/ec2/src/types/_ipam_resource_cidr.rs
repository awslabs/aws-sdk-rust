// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The CIDR for an IPAM resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamResourceCidr {
    /// <p>The IPAM ID for an IPAM resource.</p>
    pub ipam_id: ::std::option::Option<::std::string::String>,
    /// <p>The scope ID for an IPAM resource.</p>
    pub ipam_scope_id: ::std::option::Option<::std::string::String>,
    /// <p>The pool ID for an IPAM resource.</p>
    pub ipam_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region for an IPAM resource.</p>
    pub resource_region: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account number of the owner of an IPAM resource.</p>
    pub resource_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of an IPAM resource.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of an IPAM resource.</p>
    pub resource_name: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR for an IPAM resource.</p>
    pub resource_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The type of IPAM resource.</p>
    pub resource_type: ::std::option::Option<crate::types::IpamResourceType>,
    /// <p>The tags for an IPAM resource.</p>
    pub resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::IpamResourceTag>>,
    /// <p>The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:</p>
    /// <ul>
    /// <li> <p>For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs. </p> </li>
    /// <li> <p>For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated. </p> </li>
    /// <li> <p>For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs). </p> </li>
    /// </ul>
    pub ip_usage: ::std::option::Option<f64>,
    /// <p>The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub compliance_status: ::std::option::Option<crate::types::IpamComplianceStatus>,
    /// <p>The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub management_state: ::std::option::Option<crate::types::IpamManagementState>,
    /// <p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub overlap_status: ::std::option::Option<crate::types::IpamOverlapStatus>,
    /// <p>The ID of a VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
}
impl IpamResourceCidr {
    /// <p>The IPAM ID for an IPAM resource.</p>
    pub fn ipam_id(&self) -> ::std::option::Option<&str> {
        self.ipam_id.as_deref()
    }
    /// <p>The scope ID for an IPAM resource.</p>
    pub fn ipam_scope_id(&self) -> ::std::option::Option<&str> {
        self.ipam_scope_id.as_deref()
    }
    /// <p>The pool ID for an IPAM resource.</p>
    pub fn ipam_pool_id(&self) -> ::std::option::Option<&str> {
        self.ipam_pool_id.as_deref()
    }
    /// <p>The Amazon Web Services Region for an IPAM resource.</p>
    pub fn resource_region(&self) -> ::std::option::Option<&str> {
        self.resource_region.as_deref()
    }
    /// <p>The Amazon Web Services account number of the owner of an IPAM resource.</p>
    pub fn resource_owner_id(&self) -> ::std::option::Option<&str> {
        self.resource_owner_id.as_deref()
    }
    /// <p>The ID of an IPAM resource.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The name of an IPAM resource.</p>
    pub fn resource_name(&self) -> ::std::option::Option<&str> {
        self.resource_name.as_deref()
    }
    /// <p>The CIDR for an IPAM resource.</p>
    pub fn resource_cidr(&self) -> ::std::option::Option<&str> {
        self.resource_cidr.as_deref()
    }
    /// <p>The type of IPAM resource.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::IpamResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The tags for an IPAM resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_tags.is_none()`.
    pub fn resource_tags(&self) -> &[crate::types::IpamResourceTag] {
        self.resource_tags.as_deref().unwrap_or_default()
    }
    /// <p>The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:</p>
    /// <ul>
    /// <li> <p>For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs. </p> </li>
    /// <li> <p>For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated. </p> </li>
    /// <li> <p>For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs). </p> </li>
    /// </ul>
    pub fn ip_usage(&self) -> ::std::option::Option<f64> {
        self.ip_usage
    }
    /// <p>The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn compliance_status(&self) -> ::std::option::Option<&crate::types::IpamComplianceStatus> {
        self.compliance_status.as_ref()
    }
    /// <p>The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn management_state(&self) -> ::std::option::Option<&crate::types::IpamManagementState> {
        self.management_state.as_ref()
    }
    /// <p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn overlap_status(&self) -> ::std::option::Option<&crate::types::IpamOverlapStatus> {
        self.overlap_status.as_ref()
    }
    /// <p>The ID of a VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl IpamResourceCidr {
    /// Creates a new builder-style object to manufacture [`IpamResourceCidr`](crate::types::IpamResourceCidr).
    pub fn builder() -> crate::types::builders::IpamResourceCidrBuilder {
        crate::types::builders::IpamResourceCidrBuilder::default()
    }
}

/// A builder for [`IpamResourceCidr`](crate::types::IpamResourceCidr).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpamResourceCidrBuilder {
    pub(crate) ipam_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_region: ::std::option::Option<::std::string::String>,
    pub(crate) resource_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::IpamResourceType>,
    pub(crate) resource_tags: ::std::option::Option<::std::vec::Vec<crate::types::IpamResourceTag>>,
    pub(crate) ip_usage: ::std::option::Option<f64>,
    pub(crate) compliance_status: ::std::option::Option<crate::types::IpamComplianceStatus>,
    pub(crate) management_state: ::std::option::Option<crate::types::IpamManagementState>,
    pub(crate) overlap_status: ::std::option::Option<crate::types::IpamOverlapStatus>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
}
impl IpamResourceCidrBuilder {
    /// <p>The IPAM ID for an IPAM resource.</p>
    pub fn ipam_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPAM ID for an IPAM resource.</p>
    pub fn set_ipam_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_id = input;
        self
    }
    /// <p>The IPAM ID for an IPAM resource.</p>
    pub fn get_ipam_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_id
    }
    /// <p>The scope ID for an IPAM resource.</p>
    pub fn ipam_scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scope ID for an IPAM resource.</p>
    pub fn set_ipam_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_scope_id = input;
        self
    }
    /// <p>The scope ID for an IPAM resource.</p>
    pub fn get_ipam_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_scope_id
    }
    /// <p>The pool ID for an IPAM resource.</p>
    pub fn ipam_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pool ID for an IPAM resource.</p>
    pub fn set_ipam_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_pool_id = input;
        self
    }
    /// <p>The pool ID for an IPAM resource.</p>
    pub fn get_ipam_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_pool_id
    }
    /// <p>The Amazon Web Services Region for an IPAM resource.</p>
    pub fn resource_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for an IPAM resource.</p>
    pub fn set_resource_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_region = input;
        self
    }
    /// <p>The Amazon Web Services Region for an IPAM resource.</p>
    pub fn get_resource_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_region
    }
    /// <p>The Amazon Web Services account number of the owner of an IPAM resource.</p>
    pub fn resource_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account number of the owner of an IPAM resource.</p>
    pub fn set_resource_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account number of the owner of an IPAM resource.</p>
    pub fn get_resource_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_owner_id
    }
    /// <p>The ID of an IPAM resource.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of an IPAM resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The ID of an IPAM resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The name of an IPAM resource.</p>
    pub fn resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an IPAM resource.</p>
    pub fn set_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_name = input;
        self
    }
    /// <p>The name of an IPAM resource.</p>
    pub fn get_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_name
    }
    /// <p>The CIDR for an IPAM resource.</p>
    pub fn resource_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR for an IPAM resource.</p>
    pub fn set_resource_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_cidr = input;
        self
    }
    /// <p>The CIDR for an IPAM resource.</p>
    pub fn get_resource_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_cidr
    }
    /// <p>The type of IPAM resource.</p>
    pub fn resource_type(mut self, input: crate::types::IpamResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of IPAM resource.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::IpamResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of IPAM resource.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::IpamResourceType> {
        &self.resource_type
    }
    /// Appends an item to `resource_tags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>The tags for an IPAM resource.</p>
    pub fn resource_tags(mut self, input: crate::types::IpamResourceTag) -> Self {
        let mut v = self.resource_tags.unwrap_or_default();
        v.push(input);
        self.resource_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags for an IPAM resource.</p>
    pub fn set_resource_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamResourceTag>>) -> Self {
        self.resource_tags = input;
        self
    }
    /// <p>The tags for an IPAM resource.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamResourceTag>> {
        &self.resource_tags
    }
    /// <p>The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:</p>
    /// <ul>
    /// <li> <p>For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs. </p> </li>
    /// <li> <p>For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated. </p> </li>
    /// <li> <p>For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs). </p> </li>
    /// </ul>
    pub fn ip_usage(mut self, input: f64) -> Self {
        self.ip_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:</p>
    /// <ul>
    /// <li> <p>For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs. </p> </li>
    /// <li> <p>For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated. </p> </li>
    /// <li> <p>For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs). </p> </li>
    /// </ul>
    pub fn set_ip_usage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.ip_usage = input;
        self
    }
    /// <p>The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:</p>
    /// <ul>
    /// <li> <p>For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs. </p> </li>
    /// <li> <p>For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated. </p> </li>
    /// <li> <p>For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs). </p> </li>
    /// </ul>
    pub fn get_ip_usage(&self) -> &::std::option::Option<f64> {
        &self.ip_usage
    }
    /// <p>The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn compliance_status(mut self, input: crate::types::IpamComplianceStatus) -> Self {
        self.compliance_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn set_compliance_status(mut self, input: ::std::option::Option<crate::types::IpamComplianceStatus>) -> Self {
        self.compliance_status = input;
        self
    }
    /// <p>The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn get_compliance_status(&self) -> &::std::option::Option<crate::types::IpamComplianceStatus> {
        &self.compliance_status
    }
    /// <p>The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn management_state(mut self, input: crate::types::IpamManagementState) -> Self {
        self.management_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn set_management_state(mut self, input: ::std::option::Option<crate::types::IpamManagementState>) -> Self {
        self.management_state = input;
        self
    }
    /// <p>The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn get_management_state(&self) -> &::std::option::Option<crate::types::IpamManagementState> {
        &self.management_state
    }
    /// <p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn overlap_status(mut self, input: crate::types::IpamOverlapStatus) -> Self {
        self.overlap_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn set_overlap_status(mut self, input: ::std::option::Option<crate::types::IpamOverlapStatus>) -> Self {
        self.overlap_status = input;
        self
    }
    /// <p>The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn get_overlap_status(&self) -> &::std::option::Option<crate::types::IpamOverlapStatus> {
        &self.overlap_status
    }
    /// <p>The ID of a VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of a VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Consumes the builder and constructs a [`IpamResourceCidr`](crate::types::IpamResourceCidr).
    pub fn build(self) -> crate::types::IpamResourceCidr {
        crate::types::IpamResourceCidr {
            ipam_id: self.ipam_id,
            ipam_scope_id: self.ipam_scope_id,
            ipam_pool_id: self.ipam_pool_id,
            resource_region: self.resource_region,
            resource_owner_id: self.resource_owner_id,
            resource_id: self.resource_id,
            resource_name: self.resource_name,
            resource_cidr: self.resource_cidr,
            resource_type: self.resource_type,
            resource_tags: self.resource_tags,
            ip_usage: self.ip_usage,
            compliance_status: self.compliance_status,
            management_state: self.management_state,
            overlap_status: self.overlap_status,
            vpc_id: self.vpc_id,
        }
    }
}
