// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a stale security group (a security group that contains stale rules).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StaleSecurityGroup {
    /// <p>The description of the security group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the security group.</p>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the security group.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the stale inbound rules in the security group.</p>
    pub stale_ip_permissions: ::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>>,
    /// <p>Information about the stale outbound rules in the security group.</p>
    pub stale_ip_permissions_egress: ::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>>,
    /// <p>The ID of the VPC for the security group.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
}
impl StaleSecurityGroup {
    /// <p>The description of the security group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the security group.</p>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The name of the security group.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>Information about the stale inbound rules in the security group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stale_ip_permissions.is_none()`.
    pub fn stale_ip_permissions(&self) -> &[crate::types::StaleIpPermission] {
        self.stale_ip_permissions.as_deref().unwrap_or_default()
    }
    /// <p>Information about the stale outbound rules in the security group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stale_ip_permissions_egress.is_none()`.
    pub fn stale_ip_permissions_egress(&self) -> &[crate::types::StaleIpPermission] {
        self.stale_ip_permissions_egress.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the VPC for the security group.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl StaleSecurityGroup {
    /// Creates a new builder-style object to manufacture [`StaleSecurityGroup`](crate::types::StaleSecurityGroup).
    pub fn builder() -> crate::types::builders::StaleSecurityGroupBuilder {
        crate::types::builders::StaleSecurityGroupBuilder::default()
    }
}

/// A builder for [`StaleSecurityGroup`](crate::types::StaleSecurityGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StaleSecurityGroupBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) stale_ip_permissions: ::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>>,
    pub(crate) stale_ip_permissions_egress: ::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
}
impl StaleSecurityGroupBuilder {
    /// <p>The description of the security group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the security group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the security group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of the security group.</p>
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the security group.</p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The ID of the security group.</p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// <p>The name of the security group.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the security group.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the security group.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// Appends an item to `stale_ip_permissions`.
    ///
    /// To override the contents of this collection use [`set_stale_ip_permissions`](Self::set_stale_ip_permissions).
    ///
    /// <p>Information about the stale inbound rules in the security group.</p>
    pub fn stale_ip_permissions(mut self, input: crate::types::StaleIpPermission) -> Self {
        let mut v = self.stale_ip_permissions.unwrap_or_default();
        v.push(input);
        self.stale_ip_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the stale inbound rules in the security group.</p>
    pub fn set_stale_ip_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>>) -> Self {
        self.stale_ip_permissions = input;
        self
    }
    /// <p>Information about the stale inbound rules in the security group.</p>
    pub fn get_stale_ip_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>> {
        &self.stale_ip_permissions
    }
    /// Appends an item to `stale_ip_permissions_egress`.
    ///
    /// To override the contents of this collection use [`set_stale_ip_permissions_egress`](Self::set_stale_ip_permissions_egress).
    ///
    /// <p>Information about the stale outbound rules in the security group.</p>
    pub fn stale_ip_permissions_egress(mut self, input: crate::types::StaleIpPermission) -> Self {
        let mut v = self.stale_ip_permissions_egress.unwrap_or_default();
        v.push(input);
        self.stale_ip_permissions_egress = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the stale outbound rules in the security group.</p>
    pub fn set_stale_ip_permissions_egress(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>>) -> Self {
        self.stale_ip_permissions_egress = input;
        self
    }
    /// <p>Information about the stale outbound rules in the security group.</p>
    pub fn get_stale_ip_permissions_egress(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StaleIpPermission>> {
        &self.stale_ip_permissions_egress
    }
    /// <p>The ID of the VPC for the security group.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC for the security group.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC for the security group.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Consumes the builder and constructs a [`StaleSecurityGroup`](crate::types::StaleSecurityGroup).
    pub fn build(self) -> crate::types::StaleSecurityGroup {
        crate::types::StaleSecurityGroup {
            description: self.description,
            group_id: self.group_id,
            group_name: self.group_name,
            stale_ip_permissions: self.stale_ip_permissions,
            stale_ip_permissions_egress: self.stale_ip_permissions_egress,
            vpc_id: self.vpc_id,
        }
    }
}
