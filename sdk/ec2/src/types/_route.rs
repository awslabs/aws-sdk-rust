// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a route in a route table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Route {
    /// <p>The IPv4 CIDR block used for the destination match.</p>
    #[doc(hidden)]
    pub destination_cidr_block: std::option::Option<std::string::String>,
    /// <p>The IPv6 CIDR block used for the destination match.</p>
    #[doc(hidden)]
    pub destination_ipv6_cidr_block: std::option::Option<std::string::String>,
    /// <p>The prefix of the Amazon Web Service.</p>
    #[doc(hidden)]
    pub destination_prefix_list_id: std::option::Option<std::string::String>,
    /// <p>The ID of the egress-only internet gateway.</p>
    #[doc(hidden)]
    pub egress_only_internet_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of a gateway attached to your VPC.</p>
    #[doc(hidden)]
    pub gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of a NAT instance in your VPC.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The ID of Amazon Web Services account that owns the instance.</p>
    #[doc(hidden)]
    pub instance_owner_id: std::option::Option<std::string::String>,
    /// <p>The ID of a NAT gateway.</p>
    #[doc(hidden)]
    pub nat_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of a transit gateway.</p>
    #[doc(hidden)]
    pub transit_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the local gateway.</p>
    #[doc(hidden)]
    pub local_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the carrier gateway.</p>
    #[doc(hidden)]
    pub carrier_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>Describes how the route was created.</p>
    /// <ul>
    /// <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li>
    /// <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub origin: std::option::Option<crate::types::RouteOrigin>,
    /// <p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::RouteState>,
    /// <p>The ID of a VPC peering connection.</p>
    #[doc(hidden)]
    pub vpc_peering_connection_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the core network.</p>
    #[doc(hidden)]
    pub core_network_arn: std::option::Option<std::string::String>,
}
impl Route {
    /// <p>The IPv4 CIDR block used for the destination match.</p>
    pub fn destination_cidr_block(&self) -> std::option::Option<&str> {
        self.destination_cidr_block.as_deref()
    }
    /// <p>The IPv6 CIDR block used for the destination match.</p>
    pub fn destination_ipv6_cidr_block(&self) -> std::option::Option<&str> {
        self.destination_ipv6_cidr_block.as_deref()
    }
    /// <p>The prefix of the Amazon Web Service.</p>
    pub fn destination_prefix_list_id(&self) -> std::option::Option<&str> {
        self.destination_prefix_list_id.as_deref()
    }
    /// <p>The ID of the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway_id(&self) -> std::option::Option<&str> {
        self.egress_only_internet_gateway_id.as_deref()
    }
    /// <p>The ID of a gateway attached to your VPC.</p>
    pub fn gateway_id(&self) -> std::option::Option<&str> {
        self.gateway_id.as_deref()
    }
    /// <p>The ID of a NAT instance in your VPC.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The ID of Amazon Web Services account that owns the instance.</p>
    pub fn instance_owner_id(&self) -> std::option::Option<&str> {
        self.instance_owner_id.as_deref()
    }
    /// <p>The ID of a NAT gateway.</p>
    pub fn nat_gateway_id(&self) -> std::option::Option<&str> {
        self.nat_gateway_id.as_deref()
    }
    /// <p>The ID of a transit gateway.</p>
    pub fn transit_gateway_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
    /// <p>The ID of the local gateway.</p>
    pub fn local_gateway_id(&self) -> std::option::Option<&str> {
        self.local_gateway_id.as_deref()
    }
    /// <p>The ID of the carrier gateway.</p>
    pub fn carrier_gateway_id(&self) -> std::option::Option<&str> {
        self.carrier_gateway_id.as_deref()
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>Describes how the route was created.</p>
    /// <ul>
    /// <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li>
    /// <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li>
    /// </ul>
    pub fn origin(&self) -> std::option::Option<&crate::types::RouteOrigin> {
        self.origin.as_ref()
    }
    /// <p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
    pub fn state(&self) -> std::option::Option<&crate::types::RouteState> {
        self.state.as_ref()
    }
    /// <p>The ID of a VPC peering connection.</p>
    pub fn vpc_peering_connection_id(&self) -> std::option::Option<&str> {
        self.vpc_peering_connection_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the core network.</p>
    pub fn core_network_arn(&self) -> std::option::Option<&str> {
        self.core_network_arn.as_deref()
    }
}
impl Route {
    /// Creates a new builder-style object to manufacture [`Route`](crate::types::Route).
    pub fn builder() -> crate::types::builders::RouteBuilder {
        crate::types::builders::RouteBuilder::default()
    }
}

/// A builder for [`Route`](crate::types::Route).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RouteBuilder {
    pub(crate) destination_cidr_block: std::option::Option<std::string::String>,
    pub(crate) destination_ipv6_cidr_block: std::option::Option<std::string::String>,
    pub(crate) destination_prefix_list_id: std::option::Option<std::string::String>,
    pub(crate) egress_only_internet_gateway_id: std::option::Option<std::string::String>,
    pub(crate) gateway_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) instance_owner_id: std::option::Option<std::string::String>,
    pub(crate) nat_gateway_id: std::option::Option<std::string::String>,
    pub(crate) transit_gateway_id: std::option::Option<std::string::String>,
    pub(crate) local_gateway_id: std::option::Option<std::string::String>,
    pub(crate) carrier_gateway_id: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) origin: std::option::Option<crate::types::RouteOrigin>,
    pub(crate) state: std::option::Option<crate::types::RouteState>,
    pub(crate) vpc_peering_connection_id: std::option::Option<std::string::String>,
    pub(crate) core_network_arn: std::option::Option<std::string::String>,
}
impl RouteBuilder {
    /// <p>The IPv4 CIDR block used for the destination match.</p>
    pub fn destination_cidr_block(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_cidr_block = Some(input.into());
        self
    }
    /// <p>The IPv4 CIDR block used for the destination match.</p>
    pub fn set_destination_cidr_block(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_cidr_block = input;
        self
    }
    /// <p>The IPv6 CIDR block used for the destination match.</p>
    pub fn destination_ipv6_cidr_block(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_ipv6_cidr_block = Some(input.into());
        self
    }
    /// <p>The IPv6 CIDR block used for the destination match.</p>
    pub fn set_destination_ipv6_cidr_block(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_ipv6_cidr_block = input;
        self
    }
    /// <p>The prefix of the Amazon Web Service.</p>
    pub fn destination_prefix_list_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_prefix_list_id = Some(input.into());
        self
    }
    /// <p>The prefix of the Amazon Web Service.</p>
    pub fn set_destination_prefix_list_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_prefix_list_id = input;
        self
    }
    /// <p>The ID of the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.egress_only_internet_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the egress-only internet gateway.</p>
    pub fn set_egress_only_internet_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.egress_only_internet_gateway_id = input;
        self
    }
    /// <p>The ID of a gateway attached to your VPC.</p>
    pub fn gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of a gateway attached to your VPC.</p>
    pub fn set_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The ID of a NAT instance in your VPC.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of a NAT instance in your VPC.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of Amazon Web Services account that owns the instance.</p>
    pub fn instance_owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_owner_id = Some(input.into());
        self
    }
    /// <p>The ID of Amazon Web Services account that owns the instance.</p>
    pub fn set_instance_owner_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_owner_id = input;
        self
    }
    /// <p>The ID of a NAT gateway.</p>
    pub fn nat_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.nat_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of a NAT gateway.</p>
    pub fn set_nat_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.nat_gateway_id = input;
        self
    }
    /// <p>The ID of a transit gateway.</p>
    pub fn transit_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of a transit gateway.</p>
    pub fn set_transit_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p>The ID of the local gateway.</p>
    pub fn local_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the local gateway.</p>
    pub fn set_local_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.local_gateway_id = input;
        self
    }
    /// <p>The ID of the carrier gateway.</p>
    pub fn carrier_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.carrier_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the carrier gateway.</p>
    pub fn set_carrier_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.carrier_gateway_id = input;
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>Describes how the route was created.</p>
    /// <ul>
    /// <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li>
    /// <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li>
    /// </ul>
    pub fn origin(mut self, input: crate::types::RouteOrigin) -> Self {
        self.origin = Some(input);
        self
    }
    /// <p>Describes how the route was created.</p>
    /// <ul>
    /// <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li>
    /// <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li>
    /// <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li>
    /// </ul>
    pub fn set_origin(mut self, input: std::option::Option<crate::types::RouteOrigin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
    pub fn state(mut self, input: crate::types::RouteState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::RouteState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The ID of a VPC peering connection.</p>
    pub fn vpc_peering_connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_peering_connection_id = Some(input.into());
        self
    }
    /// <p>The ID of a VPC peering connection.</p>
    pub fn set_vpc_peering_connection_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_peering_connection_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the core network.</p>
    pub fn core_network_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.core_network_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the core network.</p>
    pub fn set_core_network_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.core_network_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Route`](crate::types::Route).
    pub fn build(self) -> crate::types::Route {
        crate::types::Route {
            destination_cidr_block: self.destination_cidr_block,
            destination_ipv6_cidr_block: self.destination_ipv6_cidr_block,
            destination_prefix_list_id: self.destination_prefix_list_id,
            egress_only_internet_gateway_id: self.egress_only_internet_gateway_id,
            gateway_id: self.gateway_id,
            instance_id: self.instance_id,
            instance_owner_id: self.instance_owner_id,
            nat_gateway_id: self.nat_gateway_id,
            transit_gateway_id: self.transit_gateway_id,
            local_gateway_id: self.local_gateway_id,
            carrier_gateway_id: self.carrier_gateway_id,
            network_interface_id: self.network_interface_id,
            origin: self.origin,
            state: self.state,
            vpc_peering_connection_id: self.vpc_peering_connection_id,
            core_network_arn: self.core_network_arn,
        }
    }
}
