// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a load permission.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoadPermission {
    /// <p>The Amazon Web Services account ID.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The name of the group.</p>
    #[doc(hidden)]
    pub group: std::option::Option<crate::types::PermissionGroup>,
}
impl LoadPermission {
    /// <p>The Amazon Web Services account ID.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The name of the group.</p>
    pub fn group(&self) -> std::option::Option<&crate::types::PermissionGroup> {
        self.group.as_ref()
    }
}
impl LoadPermission {
    /// Creates a new builder-style object to manufacture [`LoadPermission`](crate::types::LoadPermission).
    pub fn builder() -> crate::types::builders::LoadPermissionBuilder {
        crate::types::builders::LoadPermissionBuilder::default()
    }
}

/// A builder for [`LoadPermission`](crate::types::LoadPermission).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoadPermissionBuilder {
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) group: std::option::Option<crate::types::PermissionGroup>,
}
impl LoadPermissionBuilder {
    /// <p>The Amazon Web Services account ID.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The name of the group.</p>
    pub fn group(mut self, input: crate::types::PermissionGroup) -> Self {
        self.group = Some(input);
        self
    }
    /// <p>The name of the group.</p>
    pub fn set_group(mut self, input: std::option::Option<crate::types::PermissionGroup>) -> Self {
        self.group = input;
        self
    }
    /// Consumes the builder and constructs a [`LoadPermission`](crate::types::LoadPermission).
    pub fn build(self) -> crate::types::LoadPermission {
        crate::types::LoadPermission {
            user_id: self.user_id,
            group: self.group,
        }
    }
}
