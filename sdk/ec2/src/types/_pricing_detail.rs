// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Reserved Instance offering.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PricingDetail {
    /// <p>The number of reservations available for the price.</p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
    /// <p>The price per instance.</p>
    #[doc(hidden)]
    pub price: std::option::Option<f64>,
}
impl PricingDetail {
    /// <p>The number of reservations available for the price.</p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
    /// <p>The price per instance.</p>
    pub fn price(&self) -> std::option::Option<f64> {
        self.price
    }
}
impl PricingDetail {
    /// Creates a new builder-style object to manufacture [`PricingDetail`](crate::types::PricingDetail).
    pub fn builder() -> crate::types::builders::PricingDetailBuilder {
        crate::types::builders::PricingDetailBuilder::default()
    }
}

/// A builder for [`PricingDetail`](crate::types::PricingDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PricingDetailBuilder {
    pub(crate) count: std::option::Option<i32>,
    pub(crate) price: std::option::Option<f64>,
}
impl PricingDetailBuilder {
    /// <p>The number of reservations available for the price.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The number of reservations available for the price.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The price per instance.</p>
    pub fn price(mut self, input: f64) -> Self {
        self.price = Some(input);
        self
    }
    /// <p>The price per instance.</p>
    pub fn set_price(mut self, input: std::option::Option<f64>) -> Self {
        self.price = input;
        self
    }
    /// Consumes the builder and constructs a [`PricingDetail`](crate::types::PricingDetail).
    pub fn build(self) -> crate::types::PricingDetail {
        crate::types::PricingDetail {
            count: self.count,
            price: self.price,
        }
    }
}
