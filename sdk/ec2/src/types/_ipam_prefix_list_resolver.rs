// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an IPAM prefix list resolver.</p>
/// <p>An IPAM prefix list resolver is a component that manages the synchronization between IPAM's CIDR selection rules and customer-managed prefix lists. It automates connectivity configurations by selecting CIDRs from IPAM's database based on your business logic and synchronizing them with prefix lists used in resources such as VPC route tables and security groups.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPrefixListResolver {
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the IPAM prefix list resolver.</p>
    pub ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver.</p>
    pub ipam_prefix_list_resolver_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IPAM associated with this resolver.</p>
    pub ipam_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the associated IPAM is located.</p>
    pub ipam_region: ::std::option::Option<::std::string::String>,
    /// <p>The description of the IPAM prefix list resolver.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The address family (IPv4 or IPv6) for the IPAM prefix list resolver.</p>
    pub address_family: ::std::option::Option<crate::types::AddressFamily>,
    /// <p>The current state of the IPAM prefix list resolver. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub state: ::std::option::Option<crate::types::IpamPrefixListResolverState>,
    /// <p>The tags assigned to the IPAM prefix list resolver.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The status for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub last_version_creation_status: ::std::option::Option<crate::types::IpamPrefixListResolverVersionCreationStatus>,
    /// <p>The status message for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub last_version_creation_status_message: ::std::option::Option<::std::string::String>,
}
impl IpamPrefixListResolver {
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The ID of the IPAM prefix list resolver.</p>
    pub fn ipam_prefix_list_resolver_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver.</p>
    pub fn ipam_prefix_list_resolver_arn(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM associated with this resolver.</p>
    pub fn ipam_arn(&self) -> ::std::option::Option<&str> {
        self.ipam_arn.as_deref()
    }
    /// <p>The Amazon Web Services Region where the associated IPAM is located.</p>
    pub fn ipam_region(&self) -> ::std::option::Option<&str> {
        self.ipam_region.as_deref()
    }
    /// <p>The description of the IPAM prefix list resolver.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The address family (IPv4 or IPv6) for the IPAM prefix list resolver.</p>
    pub fn address_family(&self) -> ::std::option::Option<&crate::types::AddressFamily> {
        self.address_family.as_ref()
    }
    /// <p>The current state of the IPAM prefix list resolver. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::IpamPrefixListResolverState> {
        self.state.as_ref()
    }
    /// <p>The tags assigned to the IPAM prefix list resolver.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The status for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn last_version_creation_status(&self) -> ::std::option::Option<&crate::types::IpamPrefixListResolverVersionCreationStatus> {
        self.last_version_creation_status.as_ref()
    }
    /// <p>The status message for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn last_version_creation_status_message(&self) -> ::std::option::Option<&str> {
        self.last_version_creation_status_message.as_deref()
    }
}
impl IpamPrefixListResolver {
    /// Creates a new builder-style object to manufacture [`IpamPrefixListResolver`](crate::types::IpamPrefixListResolver).
    pub fn builder() -> crate::types::builders::IpamPrefixListResolverBuilder {
        crate::types::builders::IpamPrefixListResolverBuilder::default()
    }
}

/// A builder for [`IpamPrefixListResolver`](crate::types::IpamPrefixListResolver).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IpamPrefixListResolverBuilder {
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_prefix_list_resolver_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_region: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) address_family: ::std::option::Option<crate::types::AddressFamily>,
    pub(crate) state: ::std::option::Option<crate::types::IpamPrefixListResolverState>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) last_version_creation_status: ::std::option::Option<crate::types::IpamPrefixListResolverVersionCreationStatus>,
    pub(crate) last_version_creation_status_message: ::std::option::Option<::std::string::String>,
}
impl IpamPrefixListResolverBuilder {
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the IPAM prefix list resolver.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The ID of the IPAM prefix list resolver.</p>
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_id
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver.</p>
    pub fn ipam_prefix_list_resolver_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver.</p>
    pub fn set_ipam_prefix_list_resolver_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM prefix list resolver.</p>
    pub fn get_ipam_prefix_list_resolver_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM associated with this resolver.</p>
    pub fn ipam_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM associated with this resolver.</p>
    pub fn set_ipam_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM associated with this resolver.</p>
    pub fn get_ipam_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_arn
    }
    /// <p>The Amazon Web Services Region where the associated IPAM is located.</p>
    pub fn ipam_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the associated IPAM is located.</p>
    pub fn set_ipam_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the associated IPAM is located.</p>
    pub fn get_ipam_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_region
    }
    /// <p>The description of the IPAM prefix list resolver.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the IPAM prefix list resolver.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the IPAM prefix list resolver.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The address family (IPv4 or IPv6) for the IPAM prefix list resolver.</p>
    pub fn address_family(mut self, input: crate::types::AddressFamily) -> Self {
        self.address_family = ::std::option::Option::Some(input);
        self
    }
    /// <p>The address family (IPv4 or IPv6) for the IPAM prefix list resolver.</p>
    pub fn set_address_family(mut self, input: ::std::option::Option<crate::types::AddressFamily>) -> Self {
        self.address_family = input;
        self
    }
    /// <p>The address family (IPv4 or IPv6) for the IPAM prefix list resolver.</p>
    pub fn get_address_family(&self) -> &::std::option::Option<crate::types::AddressFamily> {
        &self.address_family
    }
    /// <p>The current state of the IPAM prefix list resolver. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn state(mut self, input: crate::types::IpamPrefixListResolverState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the IPAM prefix list resolver. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::IpamPrefixListResolverState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the IPAM prefix list resolver. Valid values include <code>create-in-progress</code>, <code>create-complete</code>, <code>create-failed</code>, <code>modify-in-progress</code>, <code>modify-complete</code>, <code>modify-failed</code>, <code>delete-in-progress</code>, <code>delete-complete</code>, and <code>delete-failed</code>.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::IpamPrefixListResolverState> {
        &self.state
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the IPAM prefix list resolver.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the IPAM prefix list resolver.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the IPAM prefix list resolver.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The status for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn last_version_creation_status(mut self, input: crate::types::IpamPrefixListResolverVersionCreationStatus) -> Self {
        self.last_version_creation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn set_last_version_creation_status(
        mut self,
        input: ::std::option::Option<crate::types::IpamPrefixListResolverVersionCreationStatus>,
    ) -> Self {
        self.last_version_creation_status = input;
        self
    }
    /// <p>The status for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn get_last_version_creation_status(&self) -> &::std::option::Option<crate::types::IpamPrefixListResolverVersionCreationStatus> {
        &self.last_version_creation_status
    }
    /// <p>The status message for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn last_version_creation_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_version_creation_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn set_last_version_creation_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_version_creation_status_message = input;
        self
    }
    /// <p>The status message for the last time a version was created.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn get_last_version_creation_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_version_creation_status_message
    }
    /// Consumes the builder and constructs a [`IpamPrefixListResolver`](crate::types::IpamPrefixListResolver).
    pub fn build(self) -> crate::types::IpamPrefixListResolver {
        crate::types::IpamPrefixListResolver {
            owner_id: self.owner_id,
            ipam_prefix_list_resolver_id: self.ipam_prefix_list_resolver_id,
            ipam_prefix_list_resolver_arn: self.ipam_prefix_list_resolver_arn,
            ipam_arn: self.ipam_arn,
            ipam_region: self.ipam_region,
            description: self.description,
            address_family: self.address_family,
            state: self.state,
            tags: self.tags,
            last_version_creation_status: self.last_version_creation_status,
            last_version_creation_status_message: self.last_version_creation_status_message,
        }
    }
}
