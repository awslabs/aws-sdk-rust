// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the placement group support of the instance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PlacementGroupInfo {
    /// <p>The supported placement group types.</p>
    pub supported_strategies: ::std::option::Option<::std::vec::Vec<crate::types::PlacementGroupStrategy>>,
}
impl PlacementGroupInfo {
    /// <p>The supported placement group types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_strategies.is_none()`.
    pub fn supported_strategies(&self) -> &[crate::types::PlacementGroupStrategy] {
        self.supported_strategies.as_deref().unwrap_or_default()
    }
}
impl PlacementGroupInfo {
    /// Creates a new builder-style object to manufacture [`PlacementGroupInfo`](crate::types::PlacementGroupInfo).
    pub fn builder() -> crate::types::builders::PlacementGroupInfoBuilder {
        crate::types::builders::PlacementGroupInfoBuilder::default()
    }
}

/// A builder for [`PlacementGroupInfo`](crate::types::PlacementGroupInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PlacementGroupInfoBuilder {
    pub(crate) supported_strategies: ::std::option::Option<::std::vec::Vec<crate::types::PlacementGroupStrategy>>,
}
impl PlacementGroupInfoBuilder {
    /// Appends an item to `supported_strategies`.
    ///
    /// To override the contents of this collection use [`set_supported_strategies`](Self::set_supported_strategies).
    ///
    /// <p>The supported placement group types.</p>
    pub fn supported_strategies(mut self, input: crate::types::PlacementGroupStrategy) -> Self {
        let mut v = self.supported_strategies.unwrap_or_default();
        v.push(input);
        self.supported_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported placement group types.</p>
    pub fn set_supported_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PlacementGroupStrategy>>) -> Self {
        self.supported_strategies = input;
        self
    }
    /// <p>The supported placement group types.</p>
    pub fn get_supported_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PlacementGroupStrategy>> {
        &self.supported_strategies
    }
    /// Consumes the builder and constructs a [`PlacementGroupInfo`](crate::types::PlacementGroupInfo).
    pub fn build(self) -> crate::types::PlacementGroupInfo {
        crate::types::PlacementGroupInfo {
            supported_strategies: self.supported_strategies,
        }
    }
}
