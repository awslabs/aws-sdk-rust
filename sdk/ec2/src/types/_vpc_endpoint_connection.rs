// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a VPC endpoint connection to a service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcEndpointConnection {
    /// <p>The ID of the service to which the endpoint is connected.</p>
    pub service_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC endpoint.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>
    pub vpc_endpoint_owner: ::std::option::Option<::std::string::String>,
    /// <p>The state of the VPC endpoint.</p>
    pub vpc_endpoint_state: ::std::option::Option<crate::types::State>,
    /// <p>The date and time that the VPC endpoint was created.</p>
    pub creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The DNS entries for the VPC endpoint.</p>
    pub dns_entries: ::std::option::Option<::std::vec::Vec<crate::types::DnsEntry>>,
    /// <p>The Amazon Resource Names (ARNs) of the network load balancers for the service.</p>
    pub network_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub gateway_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IP address type for the endpoint.</p>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    /// <p>The ID of the VPC endpoint connection.</p>
    pub vpc_endpoint_connection_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEndpointConnection {
    /// <p>The ID of the service to which the endpoint is connected.</p>
    pub fn service_id(&self) -> ::std::option::Option<&str> {
        self.service_id.as_deref()
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>
    pub fn vpc_endpoint_owner(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_owner.as_deref()
    }
    /// <p>The state of the VPC endpoint.</p>
    pub fn vpc_endpoint_state(&self) -> ::std::option::Option<&crate::types::State> {
        self.vpc_endpoint_state.as_ref()
    }
    /// <p>The date and time that the VPC endpoint was created.</p>
    pub fn creation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>The DNS entries for the VPC endpoint.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_entries.is_none()`.
    pub fn dns_entries(&self) -> &[crate::types::DnsEntry] {
        self.dns_entries.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) of the network load balancers for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_load_balancer_arns.is_none()`.
    pub fn network_load_balancer_arns(&self) -> &[::std::string::String] {
        self.network_load_balancer_arns.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateway_load_balancer_arns.is_none()`.
    pub fn gateway_load_balancer_arns(&self) -> &[::std::string::String] {
        self.gateway_load_balancer_arns.as_deref().unwrap_or_default()
    }
    /// <p>The IP address type for the endpoint.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>The ID of the VPC endpoint connection.</p>
    pub fn vpc_endpoint_connection_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_connection_id.as_deref()
    }
    /// <p>The tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl VpcEndpointConnection {
    /// Creates a new builder-style object to manufacture [`VpcEndpointConnection`](crate::types::VpcEndpointConnection).
    pub fn builder() -> crate::types::builders::VpcEndpointConnectionBuilder {
        crate::types::builders::VpcEndpointConnectionBuilder::default()
    }
}

/// A builder for [`VpcEndpointConnection`](crate::types::VpcEndpointConnection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcEndpointConnectionBuilder {
    pub(crate) service_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_owner: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_endpoint_state: ::std::option::Option<crate::types::State>,
    pub(crate) creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) dns_entries: ::std::option::Option<::std::vec::Vec<crate::types::DnsEntry>>,
    pub(crate) network_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) gateway_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    pub(crate) vpc_endpoint_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl VpcEndpointConnectionBuilder {
    /// <p>The ID of the service to which the endpoint is connected.</p>
    pub fn service_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the service to which the endpoint is connected.</p>
    pub fn set_service_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_id = input;
        self
    }
    /// <p>The ID of the service to which the endpoint is connected.</p>
    pub fn get_service_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_id
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The ID of the VPC endpoint.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>
    pub fn vpc_endpoint_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>
    pub fn set_vpc_endpoint_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_owner = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC endpoint.</p>
    pub fn get_vpc_endpoint_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_owner
    }
    /// <p>The state of the VPC endpoint.</p>
    pub fn vpc_endpoint_state(mut self, input: crate::types::State) -> Self {
        self.vpc_endpoint_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the VPC endpoint.</p>
    pub fn set_vpc_endpoint_state(mut self, input: ::std::option::Option<crate::types::State>) -> Self {
        self.vpc_endpoint_state = input;
        self
    }
    /// <p>The state of the VPC endpoint.</p>
    pub fn get_vpc_endpoint_state(&self) -> &::std::option::Option<crate::types::State> {
        &self.vpc_endpoint_state
    }
    /// <p>The date and time that the VPC endpoint was created.</p>
    pub fn creation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the VPC endpoint was created.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The date and time that the VPC endpoint was created.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_timestamp
    }
    /// Appends an item to `dns_entries`.
    ///
    /// To override the contents of this collection use [`set_dns_entries`](Self::set_dns_entries).
    ///
    /// <p>The DNS entries for the VPC endpoint.</p>
    pub fn dns_entries(mut self, input: crate::types::DnsEntry) -> Self {
        let mut v = self.dns_entries.unwrap_or_default();
        v.push(input);
        self.dns_entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The DNS entries for the VPC endpoint.</p>
    pub fn set_dns_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DnsEntry>>) -> Self {
        self.dns_entries = input;
        self
    }
    /// <p>The DNS entries for the VPC endpoint.</p>
    pub fn get_dns_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DnsEntry>> {
        &self.dns_entries
    }
    /// Appends an item to `network_load_balancer_arns`.
    ///
    /// To override the contents of this collection use [`set_network_load_balancer_arns`](Self::set_network_load_balancer_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the network load balancers for the service.</p>
    pub fn network_load_balancer_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_load_balancer_arns.unwrap_or_default();
        v.push(input.into());
        self.network_load_balancer_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the network load balancers for the service.</p>
    pub fn set_network_load_balancer_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_load_balancer_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the network load balancers for the service.</p>
    pub fn get_network_load_balancer_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_load_balancer_arns
    }
    /// Appends an item to `gateway_load_balancer_arns`.
    ///
    /// To override the contents of this collection use [`set_gateway_load_balancer_arns`](Self::set_gateway_load_balancer_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub fn gateway_load_balancer_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.gateway_load_balancer_arns.unwrap_or_default();
        v.push(input.into());
        self.gateway_load_balancer_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub fn set_gateway_load_balancer_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.gateway_load_balancer_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub fn get_gateway_load_balancer_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.gateway_load_balancer_arns
    }
    /// <p>The IP address type for the endpoint.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address type for the endpoint.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The IP address type for the endpoint.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// <p>The ID of the VPC endpoint connection.</p>
    pub fn vpc_endpoint_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC endpoint connection.</p>
    pub fn set_vpc_endpoint_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_connection_id = input;
        self
    }
    /// <p>The ID of the VPC endpoint connection.</p>
    pub fn get_vpc_endpoint_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_connection_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`VpcEndpointConnection`](crate::types::VpcEndpointConnection).
    pub fn build(self) -> crate::types::VpcEndpointConnection {
        crate::types::VpcEndpointConnection {
            service_id: self.service_id,
            vpc_endpoint_id: self.vpc_endpoint_id,
            vpc_endpoint_owner: self.vpc_endpoint_owner,
            vpc_endpoint_state: self.vpc_endpoint_state,
            creation_timestamp: self.creation_timestamp,
            dns_entries: self.dns_entries,
            network_load_balancer_arns: self.network_load_balancer_arns,
            gateway_load_balancer_arns: self.gateway_load_balancer_arns,
            ip_address_type: self.ip_address_type,
            vpc_endpoint_connection_id: self.vpc_endpoint_connection_id,
            tags: self.tags,
        }
    }
}
