// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Verified Access group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerifiedAccessGroup {
    /// <p>The ID of the Verified Access group.</p>
    pub verified_access_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub verified_access_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>A description for the Amazon Web Services Verified Access group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account number that owns the group.</p>
    pub owner: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Verified Access group.</p>
    pub verified_access_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The creation time.</p>
    pub creation_time: ::std::option::Option<::std::string::String>,
    /// <p>The last updated time.</p>
    pub last_updated_time: ::std::option::Option<::std::string::String>,
    /// <p>The deletion time.</p>
    pub deletion_time: ::std::option::Option<::std::string::String>,
    /// <p>The tags.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p> Describes the options in use for server side encryption. </p>
    pub sse_specification: ::std::option::Option<crate::types::VerifiedAccessSseSpecificationResponse>,
}
impl VerifiedAccessGroup {
    /// <p>The ID of the Verified Access group.</p>
    pub fn verified_access_group_id(&self) -> ::std::option::Option<&str> {
        self.verified_access_group_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance_id(&self) -> ::std::option::Option<&str> {
        self.verified_access_instance_id.as_deref()
    }
    /// <p>A description for the Amazon Web Services Verified Access group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Web Services account number that owns the group.</p>
    pub fn owner(&self) -> ::std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p>The ARN of the Verified Access group.</p>
    pub fn verified_access_group_arn(&self) -> ::std::option::Option<&str> {
        self.verified_access_group_arn.as_deref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The last updated time.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&str> {
        self.last_updated_time.as_deref()
    }
    /// <p>The deletion time.</p>
    pub fn deletion_time(&self) -> ::std::option::Option<&str> {
        self.deletion_time.as_deref()
    }
    /// <p>The tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p> Describes the options in use for server side encryption. </p>
    pub fn sse_specification(&self) -> ::std::option::Option<&crate::types::VerifiedAccessSseSpecificationResponse> {
        self.sse_specification.as_ref()
    }
}
impl VerifiedAccessGroup {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessGroup`](crate::types::VerifiedAccessGroup).
    pub fn builder() -> crate::types::builders::VerifiedAccessGroupBuilder {
        crate::types::builders::VerifiedAccessGroupBuilder::default()
    }
}

/// A builder for [`VerifiedAccessGroup`](crate::types::VerifiedAccessGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VerifiedAccessGroupBuilder {
    pub(crate) verified_access_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) verified_access_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) verified_access_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_time: ::std::option::Option<::std::string::String>,
    pub(crate) deletion_time: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) sse_specification: ::std::option::Option<crate::types::VerifiedAccessSseSpecificationResponse>,
}
impl VerifiedAccessGroupBuilder {
    /// <p>The ID of the Verified Access group.</p>
    pub fn verified_access_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Verified Access group.</p>
    pub fn set_verified_access_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_group_id = input;
        self
    }
    /// <p>The ID of the Verified Access group.</p>
    pub fn get_verified_access_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_group_id
    }
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn verified_access_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn set_verified_access_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_instance_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services Verified Access instance.</p>
    pub fn get_verified_access_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_instance_id
    }
    /// <p>A description for the Amazon Web Services Verified Access group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the Amazon Web Services Verified Access group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the Amazon Web Services Verified Access group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Web Services account number that owns the group.</p>
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account number that owns the group.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The Amazon Web Services account number that owns the group.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The ARN of the Verified Access group.</p>
    pub fn verified_access_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verified_access_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Verified Access group.</p>
    pub fn set_verified_access_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verified_access_group_arn = input;
        self
    }
    /// <p>The ARN of the Verified Access group.</p>
    pub fn get_verified_access_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.verified_access_group_arn
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>The last updated time.</p>
    pub fn last_updated_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last updated time.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The last updated time.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_time
    }
    /// <p>The deletion time.</p>
    pub fn deletion_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deletion_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The deletion time.</p>
    pub fn set_deletion_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deletion_time = input;
        self
    }
    /// <p>The deletion time.</p>
    pub fn get_deletion_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.deletion_time
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p> Describes the options in use for server side encryption. </p>
    pub fn sse_specification(mut self, input: crate::types::VerifiedAccessSseSpecificationResponse) -> Self {
        self.sse_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the options in use for server side encryption. </p>
    pub fn set_sse_specification(mut self, input: ::std::option::Option<crate::types::VerifiedAccessSseSpecificationResponse>) -> Self {
        self.sse_specification = input;
        self
    }
    /// <p> Describes the options in use for server side encryption. </p>
    pub fn get_sse_specification(&self) -> &::std::option::Option<crate::types::VerifiedAccessSseSpecificationResponse> {
        &self.sse_specification
    }
    /// Consumes the builder and constructs a [`VerifiedAccessGroup`](crate::types::VerifiedAccessGroup).
    pub fn build(self) -> crate::types::VerifiedAccessGroup {
        crate::types::VerifiedAccessGroup {
            verified_access_group_id: self.verified_access_group_id,
            verified_access_instance_id: self.verified_access_instance_id,
            description: self.description,
            owner: self.owner,
            verified_access_group_arn: self.verified_access_group_arn,
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            deletion_time: self.deletion_time,
            tags: self.tags,
            sse_specification: self.sse_specification,
        }
    }
}
