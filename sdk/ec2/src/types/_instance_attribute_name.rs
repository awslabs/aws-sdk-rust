// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InstanceAttributeName`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let instanceattributename = unimplemented!();
/// match instanceattributename {
///     InstanceAttributeName::BlockDeviceMapping => { /* ... */ },
///     InstanceAttributeName::DisableApiStop => { /* ... */ },
///     InstanceAttributeName::DisableApiTermination => { /* ... */ },
///     InstanceAttributeName::EbsOptimized => { /* ... */ },
///     InstanceAttributeName::EnaSupport => { /* ... */ },
///     InstanceAttributeName::EnclaveOptions => { /* ... */ },
///     InstanceAttributeName::GroupSet => { /* ... */ },
///     InstanceAttributeName::InstanceInitiatedShutdownBehavior => { /* ... */ },
///     InstanceAttributeName::InstanceType => { /* ... */ },
///     InstanceAttributeName::Kernel => { /* ... */ },
///     InstanceAttributeName::ProductCodes => { /* ... */ },
///     InstanceAttributeName::Ramdisk => { /* ... */ },
///     InstanceAttributeName::RootDeviceName => { /* ... */ },
///     InstanceAttributeName::SourceDestCheck => { /* ... */ },
///     InstanceAttributeName::SriovNetSupport => { /* ... */ },
///     InstanceAttributeName::UserData => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `instanceattributename` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InstanceAttributeName::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InstanceAttributeName::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InstanceAttributeName::NewFeature` is defined.
/// Specifically, when `instanceattributename` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InstanceAttributeName::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InstanceAttributeName {
    #[allow(missing_docs)] // documentation missing in model
    BlockDeviceMapping,
    #[allow(missing_docs)] // documentation missing in model
    DisableApiStop,
    #[allow(missing_docs)] // documentation missing in model
    DisableApiTermination,
    #[allow(missing_docs)] // documentation missing in model
    EbsOptimized,
    #[allow(missing_docs)] // documentation missing in model
    EnaSupport,
    #[allow(missing_docs)] // documentation missing in model
    EnclaveOptions,
    #[allow(missing_docs)] // documentation missing in model
    GroupSet,
    #[allow(missing_docs)] // documentation missing in model
    InstanceInitiatedShutdownBehavior,
    #[allow(missing_docs)] // documentation missing in model
    InstanceType,
    #[allow(missing_docs)] // documentation missing in model
    Kernel,
    #[allow(missing_docs)] // documentation missing in model
    ProductCodes,
    #[allow(missing_docs)] // documentation missing in model
    Ramdisk,
    #[allow(missing_docs)] // documentation missing in model
    RootDeviceName,
    #[allow(missing_docs)] // documentation missing in model
    SourceDestCheck,
    #[allow(missing_docs)] // documentation missing in model
    SriovNetSupport,
    #[allow(missing_docs)] // documentation missing in model
    UserData,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for InstanceAttributeName {
    fn from(s: &str) -> Self {
        match s {
            "blockDeviceMapping" => InstanceAttributeName::BlockDeviceMapping,
            "disableApiStop" => InstanceAttributeName::DisableApiStop,
            "disableApiTermination" => InstanceAttributeName::DisableApiTermination,
            "ebsOptimized" => InstanceAttributeName::EbsOptimized,
            "enaSupport" => InstanceAttributeName::EnaSupport,
            "enclaveOptions" => InstanceAttributeName::EnclaveOptions,
            "groupSet" => InstanceAttributeName::GroupSet,
            "instanceInitiatedShutdownBehavior" => {
                InstanceAttributeName::InstanceInitiatedShutdownBehavior
            }
            "instanceType" => InstanceAttributeName::InstanceType,
            "kernel" => InstanceAttributeName::Kernel,
            "productCodes" => InstanceAttributeName::ProductCodes,
            "ramdisk" => InstanceAttributeName::Ramdisk,
            "rootDeviceName" => InstanceAttributeName::RootDeviceName,
            "sourceDestCheck" => InstanceAttributeName::SourceDestCheck,
            "sriovNetSupport" => InstanceAttributeName::SriovNetSupport,
            "userData" => InstanceAttributeName::UserData,
            other => InstanceAttributeName::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for InstanceAttributeName {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InstanceAttributeName::from(s))
    }
}
impl InstanceAttributeName {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InstanceAttributeName::BlockDeviceMapping => "blockDeviceMapping",
            InstanceAttributeName::DisableApiStop => "disableApiStop",
            InstanceAttributeName::DisableApiTermination => "disableApiTermination",
            InstanceAttributeName::EbsOptimized => "ebsOptimized",
            InstanceAttributeName::EnaSupport => "enaSupport",
            InstanceAttributeName::EnclaveOptions => "enclaveOptions",
            InstanceAttributeName::GroupSet => "groupSet",
            InstanceAttributeName::InstanceInitiatedShutdownBehavior => {
                "instanceInitiatedShutdownBehavior"
            }
            InstanceAttributeName::InstanceType => "instanceType",
            InstanceAttributeName::Kernel => "kernel",
            InstanceAttributeName::ProductCodes => "productCodes",
            InstanceAttributeName::Ramdisk => "ramdisk",
            InstanceAttributeName::RootDeviceName => "rootDeviceName",
            InstanceAttributeName::SourceDestCheck => "sourceDestCheck",
            InstanceAttributeName::SriovNetSupport => "sriovNetSupport",
            InstanceAttributeName::UserData => "userData",
            InstanceAttributeName::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "blockDeviceMapping",
            "disableApiStop",
            "disableApiTermination",
            "ebsOptimized",
            "enaSupport",
            "enclaveOptions",
            "groupSet",
            "instanceInitiatedShutdownBehavior",
            "instanceType",
            "kernel",
            "productCodes",
            "ramdisk",
            "rootDeviceName",
            "sourceDestCheck",
            "sriovNetSupport",
            "userData",
        ]
    }
}
impl AsRef<str> for InstanceAttributeName {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
