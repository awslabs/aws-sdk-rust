// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of On-Demand Instances in an EC2 Fleet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OnDemandOptions {
    /// <p>The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.</p>
    /// <p> <code>lowest-price</code> - EC2 Fleet uses price to determine the order, launching the lowest price first.</p>
    /// <p> <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.</p>
    /// <p>Default: <code>lowest-price</code> </p>
    #[doc(hidden)]
    pub allocation_strategy: std::option::Option<crate::types::FleetOnDemandAllocationStrategy>,
    /// <p>The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    #[doc(hidden)]
    pub capacity_reservation_options: std::option::Option<crate::types::CapacityReservationOptions>,
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    #[doc(hidden)]
    pub single_instance_type: std::option::Option<bool>,
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    #[doc(hidden)]
    pub single_availability_zone: std::option::Option<bool>,
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code> </p>
    #[doc(hidden)]
    pub min_target_capacity: std::option::Option<i32>,
    /// <p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>
    #[doc(hidden)]
    pub max_total_price: std::option::Option<std::string::String>,
}
impl OnDemandOptions {
    /// <p>The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.</p>
    /// <p> <code>lowest-price</code> - EC2 Fleet uses price to determine the order, launching the lowest price first.</p>
    /// <p> <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.</p>
    /// <p>Default: <code>lowest-price</code> </p>
    pub fn allocation_strategy(
        &self,
    ) -> std::option::Option<&crate::types::FleetOnDemandAllocationStrategy> {
        self.allocation_strategy.as_ref()
    }
    /// <p>The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn capacity_reservation_options(
        &self,
    ) -> std::option::Option<&crate::types::CapacityReservationOptions> {
        self.capacity_reservation_options.as_ref()
    }
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn single_instance_type(&self) -> std::option::Option<bool> {
        self.single_instance_type
    }
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn single_availability_zone(&self) -> std::option::Option<bool> {
        self.single_availability_zone
    }
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code> </p>
    pub fn min_target_capacity(&self) -> std::option::Option<i32> {
        self.min_target_capacity
    }
    /// <p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>
    pub fn max_total_price(&self) -> std::option::Option<&str> {
        self.max_total_price.as_deref()
    }
}
impl OnDemandOptions {
    /// Creates a new builder-style object to manufacture [`OnDemandOptions`](crate::types::OnDemandOptions).
    pub fn builder() -> crate::types::builders::OnDemandOptionsBuilder {
        crate::types::builders::OnDemandOptionsBuilder::default()
    }
}

/// A builder for [`OnDemandOptions`](crate::types::OnDemandOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OnDemandOptionsBuilder {
    pub(crate) allocation_strategy:
        std::option::Option<crate::types::FleetOnDemandAllocationStrategy>,
    pub(crate) capacity_reservation_options:
        std::option::Option<crate::types::CapacityReservationOptions>,
    pub(crate) single_instance_type: std::option::Option<bool>,
    pub(crate) single_availability_zone: std::option::Option<bool>,
    pub(crate) min_target_capacity: std::option::Option<i32>,
    pub(crate) max_total_price: std::option::Option<std::string::String>,
}
impl OnDemandOptionsBuilder {
    /// <p>The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.</p>
    /// <p> <code>lowest-price</code> - EC2 Fleet uses price to determine the order, launching the lowest price first.</p>
    /// <p> <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.</p>
    /// <p>Default: <code>lowest-price</code> </p>
    pub fn allocation_strategy(
        mut self,
        input: crate::types::FleetOnDemandAllocationStrategy,
    ) -> Self {
        self.allocation_strategy = Some(input);
        self
    }
    /// <p>The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.</p>
    /// <p> <code>lowest-price</code> - EC2 Fleet uses price to determine the order, launching the lowest price first.</p>
    /// <p> <code>prioritized</code> - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.</p>
    /// <p>Default: <code>lowest-price</code> </p>
    pub fn set_allocation_strategy(
        mut self,
        input: std::option::Option<crate::types::FleetOnDemandAllocationStrategy>,
    ) -> Self {
        self.allocation_strategy = input;
        self
    }
    /// <p>The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn capacity_reservation_options(
        mut self,
        input: crate::types::CapacityReservationOptions,
    ) -> Self {
        self.capacity_reservation_options = Some(input);
        self
    }
    /// <p>The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn set_capacity_reservation_options(
        mut self,
        input: std::option::Option<crate::types::CapacityReservationOptions>,
    ) -> Self {
        self.capacity_reservation_options = input;
        self
    }
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn single_instance_type(mut self, input: bool) -> Self {
        self.single_instance_type = Some(input);
        self
    }
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn set_single_instance_type(mut self, input: std::option::Option<bool>) -> Self {
        self.single_instance_type = input;
        self
    }
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn single_availability_zone(mut self, input: bool) -> Self {
        self.single_availability_zone = Some(input);
        self
    }
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    pub fn set_single_availability_zone(mut self, input: std::option::Option<bool>) -> Self {
        self.single_availability_zone = input;
        self
    }
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code> </p>
    pub fn min_target_capacity(mut self, input: i32) -> Self {
        self.min_target_capacity = Some(input);
        self
    }
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    /// <p>Supported only for fleets of type <code>instant</code>.</p>
    /// <p>At least one of the following must be specified: <code>SingleAvailabilityZone</code> | <code>SingleInstanceType</code> </p>
    pub fn set_min_target_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.min_target_capacity = input;
        self
    }
    /// <p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>
    pub fn max_total_price(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_total_price = Some(input.into());
        self
    }
    /// <p>The maximum amount per hour for On-Demand Instances that you're willing to pay.</p>
    pub fn set_max_total_price(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_total_price = input;
        self
    }
    /// Consumes the builder and constructs a [`OnDemandOptions`](crate::types::OnDemandOptions).
    pub fn build(self) -> crate::types::OnDemandOptions {
        crate::types::OnDemandOptions {
            allocation_strategy: self.allocation_strategy,
            capacity_reservation_options: self.capacity_reservation_options,
            single_instance_type: self.single_instance_type,
            single_availability_zone: self.single_availability_zone,
            min_target_capacity: self.min_target_capacity,
            max_total_price: self.max_total_price,
        }
    }
}
