// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a finding for a Network Access Scope.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessScopeAnalysisFinding {
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub network_insights_access_scope_analysis_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Network Access Scope.</p>
    pub network_insights_access_scope_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the finding.</p>
    pub finding_id: ::std::option::Option<::std::string::String>,
    /// <p>The finding components.</p>
    pub finding_components: ::std::option::Option<::std::vec::Vec<crate::types::PathComponent>>,
}
impl AccessScopeAnalysisFinding {
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub fn network_insights_access_scope_analysis_id(&self) -> ::std::option::Option<&str> {
        self.network_insights_access_scope_analysis_id.as_deref()
    }
    /// <p>The ID of the Network Access Scope.</p>
    pub fn network_insights_access_scope_id(&self) -> ::std::option::Option<&str> {
        self.network_insights_access_scope_id.as_deref()
    }
    /// <p>The ID of the finding.</p>
    pub fn finding_id(&self) -> ::std::option::Option<&str> {
        self.finding_id.as_deref()
    }
    /// <p>The finding components.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.finding_components.is_none()`.
    pub fn finding_components(&self) -> &[crate::types::PathComponent] {
        self.finding_components.as_deref().unwrap_or_default()
    }
}
impl AccessScopeAnalysisFinding {
    /// Creates a new builder-style object to manufacture [`AccessScopeAnalysisFinding`](crate::types::AccessScopeAnalysisFinding).
    pub fn builder() -> crate::types::builders::AccessScopeAnalysisFindingBuilder {
        crate::types::builders::AccessScopeAnalysisFindingBuilder::default()
    }
}

/// A builder for [`AccessScopeAnalysisFinding`](crate::types::AccessScopeAnalysisFinding).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccessScopeAnalysisFindingBuilder {
    pub(crate) network_insights_access_scope_analysis_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_insights_access_scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) finding_id: ::std::option::Option<::std::string::String>,
    pub(crate) finding_components: ::std::option::Option<::std::vec::Vec<crate::types::PathComponent>>,
}
impl AccessScopeAnalysisFindingBuilder {
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub fn network_insights_access_scope_analysis_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_insights_access_scope_analysis_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub fn set_network_insights_access_scope_analysis_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_insights_access_scope_analysis_id = input;
        self
    }
    /// <p>The ID of the Network Access Scope analysis.</p>
    pub fn get_network_insights_access_scope_analysis_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_insights_access_scope_analysis_id
    }
    /// <p>The ID of the Network Access Scope.</p>
    pub fn network_insights_access_scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_insights_access_scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Network Access Scope.</p>
    pub fn set_network_insights_access_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_insights_access_scope_id = input;
        self
    }
    /// <p>The ID of the Network Access Scope.</p>
    pub fn get_network_insights_access_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_insights_access_scope_id
    }
    /// <p>The ID of the finding.</p>
    pub fn finding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the finding.</p>
    pub fn set_finding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_id = input;
        self
    }
    /// <p>The ID of the finding.</p>
    pub fn get_finding_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_id
    }
    /// Appends an item to `finding_components`.
    ///
    /// To override the contents of this collection use [`set_finding_components`](Self::set_finding_components).
    ///
    /// <p>The finding components.</p>
    pub fn finding_components(mut self, input: crate::types::PathComponent) -> Self {
        let mut v = self.finding_components.unwrap_or_default();
        v.push(input);
        self.finding_components = ::std::option::Option::Some(v);
        self
    }
    /// <p>The finding components.</p>
    pub fn set_finding_components(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PathComponent>>) -> Self {
        self.finding_components = input;
        self
    }
    /// <p>The finding components.</p>
    pub fn get_finding_components(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PathComponent>> {
        &self.finding_components
    }
    /// Consumes the builder and constructs a [`AccessScopeAnalysisFinding`](crate::types::AccessScopeAnalysisFinding).
    pub fn build(self) -> crate::types::AccessScopeAnalysisFinding {
        crate::types::AccessScopeAnalysisFinding {
            network_insights_access_scope_analysis_id: self.network_insights_access_scope_analysis_id,
            network_insights_access_scope_id: self.network_insights_access_scope_id,
            finding_id: self.finding_id,
            finding_components: self.finding_components,
        }
    }
}
