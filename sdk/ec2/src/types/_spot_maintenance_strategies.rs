// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SpotMaintenanceStrategies {
    /// <p>The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    #[doc(hidden)]
    pub capacity_rebalance: std::option::Option<crate::types::SpotCapacityRebalance>,
}
impl SpotMaintenanceStrategies {
    /// <p>The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    pub fn capacity_rebalance(&self) -> std::option::Option<&crate::types::SpotCapacityRebalance> {
        self.capacity_rebalance.as_ref()
    }
}
impl SpotMaintenanceStrategies {
    /// Creates a new builder-style object to manufacture [`SpotMaintenanceStrategies`](crate::types::SpotMaintenanceStrategies).
    pub fn builder() -> crate::types::builders::SpotMaintenanceStrategiesBuilder {
        crate::types::builders::SpotMaintenanceStrategiesBuilder::default()
    }
}

/// A builder for [`SpotMaintenanceStrategies`](crate::types::SpotMaintenanceStrategies).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpotMaintenanceStrategiesBuilder {
    pub(crate) capacity_rebalance: std::option::Option<crate::types::SpotCapacityRebalance>,
}
impl SpotMaintenanceStrategiesBuilder {
    /// <p>The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    pub fn capacity_rebalance(mut self, input: crate::types::SpotCapacityRebalance) -> Self {
        self.capacity_rebalance = Some(input);
        self
    }
    /// <p>The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html">Capacity rebalancing</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    pub fn set_capacity_rebalance(
        mut self,
        input: std::option::Option<crate::types::SpotCapacityRebalance>,
    ) -> Self {
        self.capacity_rebalance = input;
        self
    }
    /// Consumes the builder and constructs a [`SpotMaintenanceStrategies`](crate::types::SpotMaintenanceStrategies).
    pub fn build(self) -> crate::types::SpotMaintenanceStrategies {
        crate::types::SpotMaintenanceStrategies {
            capacity_rebalance: self.capacity_rebalance,
        }
    }
}
