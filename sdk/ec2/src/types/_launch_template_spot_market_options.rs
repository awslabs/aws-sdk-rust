// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options for Spot Instances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplateSpotMarketOptions {
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p> <important>
    /// <p>If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    #[doc(hidden)]
    pub max_price: std::option::Option<std::string::String>,
    /// <p>The Spot Instance request type.</p>
    #[doc(hidden)]
    pub spot_instance_type: std::option::Option<crate::types::SpotInstanceType>,
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    #[doc(hidden)]
    pub block_duration_minutes: std::option::Option<i32>,
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p>
    #[doc(hidden)]
    pub valid_until: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The behavior when a Spot Instance is interrupted.</p>
    #[doc(hidden)]
    pub instance_interruption_behavior:
        std::option::Option<crate::types::InstanceInterruptionBehavior>,
}
impl LaunchTemplateSpotMarketOptions {
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p> <important>
    /// <p>If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    pub fn max_price(&self) -> std::option::Option<&str> {
        self.max_price.as_deref()
    }
    /// <p>The Spot Instance request type.</p>
    pub fn spot_instance_type(&self) -> std::option::Option<&crate::types::SpotInstanceType> {
        self.spot_instance_type.as_ref()
    }
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    pub fn block_duration_minutes(&self) -> std::option::Option<i32> {
        self.block_duration_minutes
    }
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p>
    pub fn valid_until(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.valid_until.as_ref()
    }
    /// <p>The behavior when a Spot Instance is interrupted.</p>
    pub fn instance_interruption_behavior(
        &self,
    ) -> std::option::Option<&crate::types::InstanceInterruptionBehavior> {
        self.instance_interruption_behavior.as_ref()
    }
}
impl LaunchTemplateSpotMarketOptions {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateSpotMarketOptions`](crate::types::LaunchTemplateSpotMarketOptions).
    pub fn builder() -> crate::types::builders::LaunchTemplateSpotMarketOptionsBuilder {
        crate::types::builders::LaunchTemplateSpotMarketOptionsBuilder::default()
    }
}

/// A builder for [`LaunchTemplateSpotMarketOptions`](crate::types::LaunchTemplateSpotMarketOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateSpotMarketOptionsBuilder {
    pub(crate) max_price: std::option::Option<std::string::String>,
    pub(crate) spot_instance_type: std::option::Option<crate::types::SpotInstanceType>,
    pub(crate) block_duration_minutes: std::option::Option<i32>,
    pub(crate) valid_until: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) instance_interruption_behavior:
        std::option::Option<crate::types::InstanceInterruptionBehavior>,
}
impl LaunchTemplateSpotMarketOptionsBuilder {
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p> <important>
    /// <p>If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    pub fn max_price(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_price = Some(input.into());
        self
    }
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.</p> <important>
    /// <p>If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    pub fn set_max_price(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_price = input;
        self
    }
    /// <p>The Spot Instance request type.</p>
    pub fn spot_instance_type(mut self, input: crate::types::SpotInstanceType) -> Self {
        self.spot_instance_type = Some(input);
        self
    }
    /// <p>The Spot Instance request type.</p>
    pub fn set_spot_instance_type(
        mut self,
        input: std::option::Option<crate::types::SpotInstanceType>,
    ) -> Self {
        self.spot_instance_type = input;
        self
    }
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    pub fn block_duration_minutes(mut self, input: i32) -> Self {
        self.block_duration_minutes = Some(input);
        self
    }
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    pub fn set_block_duration_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.block_duration_minutes = input;
        self
    }
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p>
    pub fn valid_until(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.valid_until = Some(input);
        self
    }
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p>
    pub fn set_valid_until(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.valid_until = input;
        self
    }
    /// <p>The behavior when a Spot Instance is interrupted.</p>
    pub fn instance_interruption_behavior(
        mut self,
        input: crate::types::InstanceInterruptionBehavior,
    ) -> Self {
        self.instance_interruption_behavior = Some(input);
        self
    }
    /// <p>The behavior when a Spot Instance is interrupted.</p>
    pub fn set_instance_interruption_behavior(
        mut self,
        input: std::option::Option<crate::types::InstanceInterruptionBehavior>,
    ) -> Self {
        self.instance_interruption_behavior = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplateSpotMarketOptions`](crate::types::LaunchTemplateSpotMarketOptions).
    pub fn build(self) -> crate::types::LaunchTemplateSpotMarketOptions {
        crate::types::LaunchTemplateSpotMarketOptions {
            max_price: self.max_price,
            spot_instance_type: self.spot_instance_type,
            block_duration_minutes: self.block_duration_minutes,
            valid_until: self.valid_until,
            instance_interruption_behavior: self.instance_interruption_behavior,
        }
    }
}
