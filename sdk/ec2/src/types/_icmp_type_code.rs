// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the ICMP type and code.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IcmpTypeCode {
    /// <p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
    #[doc(hidden)]
    pub code: std::option::Option<i32>,
    /// <p>The ICMP type. A value of -1 means all types.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<i32>,
}
impl IcmpTypeCode {
    /// <p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
    pub fn code(&self) -> std::option::Option<i32> {
        self.code
    }
    /// <p>The ICMP type. A value of -1 means all types.</p>
    pub fn r#type(&self) -> std::option::Option<i32> {
        self.r#type
    }
}
impl IcmpTypeCode {
    /// Creates a new builder-style object to manufacture [`IcmpTypeCode`](crate::types::IcmpTypeCode).
    pub fn builder() -> crate::types::builders::IcmpTypeCodeBuilder {
        crate::types::builders::IcmpTypeCodeBuilder::default()
    }
}

/// A builder for [`IcmpTypeCode`](crate::types::IcmpTypeCode).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IcmpTypeCodeBuilder {
    pub(crate) code: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<i32>,
}
impl IcmpTypeCodeBuilder {
    /// <p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
    pub fn code(mut self, input: i32) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
    pub fn set_code(mut self, input: std::option::Option<i32>) -> Self {
        self.code = input;
        self
    }
    /// <p>The ICMP type. A value of -1 means all types.</p>
    pub fn r#type(mut self, input: i32) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The ICMP type. A value of -1 means all types.</p>
    pub fn set_type(mut self, input: std::option::Option<i32>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`IcmpTypeCode`](crate::types::IcmpTypeCode).
    pub fn build(self) -> crate::types::IcmpTypeCode {
        crate::types::IcmpTypeCode {
            code: self.code,
            r#type: self.r#type,
        }
    }
}
