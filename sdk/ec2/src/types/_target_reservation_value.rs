// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The total value of the new Convertible Reserved Instances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetReservationValue {
    /// <p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
    #[doc(hidden)]
    pub reservation_value: std::option::Option<crate::types::ReservationValue>,
    /// <p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
    #[doc(hidden)]
    pub target_configuration: std::option::Option<crate::types::TargetConfiguration>,
}
impl TargetReservationValue {
    /// <p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
    pub fn reservation_value(&self) -> std::option::Option<&crate::types::ReservationValue> {
        self.reservation_value.as_ref()
    }
    /// <p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
    pub fn target_configuration(&self) -> std::option::Option<&crate::types::TargetConfiguration> {
        self.target_configuration.as_ref()
    }
}
impl TargetReservationValue {
    /// Creates a new builder-style object to manufacture [`TargetReservationValue`](crate::types::TargetReservationValue).
    pub fn builder() -> crate::types::builders::TargetReservationValueBuilder {
        crate::types::builders::TargetReservationValueBuilder::default()
    }
}

/// A builder for [`TargetReservationValue`](crate::types::TargetReservationValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetReservationValueBuilder {
    pub(crate) reservation_value: std::option::Option<crate::types::ReservationValue>,
    pub(crate) target_configuration: std::option::Option<crate::types::TargetConfiguration>,
}
impl TargetReservationValueBuilder {
    /// <p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
    pub fn reservation_value(mut self, input: crate::types::ReservationValue) -> Self {
        self.reservation_value = Some(input);
        self
    }
    /// <p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
    pub fn set_reservation_value(
        mut self,
        input: std::option::Option<crate::types::ReservationValue>,
    ) -> Self {
        self.reservation_value = input;
        self
    }
    /// <p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
    pub fn target_configuration(mut self, input: crate::types::TargetConfiguration) -> Self {
        self.target_configuration = Some(input);
        self
    }
    /// <p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
    pub fn set_target_configuration(
        mut self,
        input: std::option::Option<crate::types::TargetConfiguration>,
    ) -> Self {
        self.target_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetReservationValue`](crate::types::TargetReservationValue).
    pub fn build(self) -> crate::types::TargetReservationValue {
        crate::types::TargetReservationValue {
            reservation_value: self.reservation_value,
            target_configuration: self.target_configuration,
        }
    }
}
