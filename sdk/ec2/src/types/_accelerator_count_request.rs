// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) on an instance. To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceleratorCountRequest {
    /// <p>The minimum number of accelerators. To specify no minimum limit, omit this parameter.</p>
    #[doc(hidden)]
    pub min: std::option::Option<i32>,
    /// <p>The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
    #[doc(hidden)]
    pub max: std::option::Option<i32>,
}
impl AcceleratorCountRequest {
    /// <p>The minimum number of accelerators. To specify no minimum limit, omit this parameter.</p>
    pub fn min(&self) -> std::option::Option<i32> {
        self.min
    }
    /// <p>The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
    pub fn max(&self) -> std::option::Option<i32> {
        self.max
    }
}
impl AcceleratorCountRequest {
    /// Creates a new builder-style object to manufacture [`AcceleratorCountRequest`](crate::types::AcceleratorCountRequest).
    pub fn builder() -> crate::types::builders::AcceleratorCountRequestBuilder {
        crate::types::builders::AcceleratorCountRequestBuilder::default()
    }
}

/// A builder for [`AcceleratorCountRequest`](crate::types::AcceleratorCountRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AcceleratorCountRequestBuilder {
    pub(crate) min: std::option::Option<i32>,
    pub(crate) max: std::option::Option<i32>,
}
impl AcceleratorCountRequestBuilder {
    /// <p>The minimum number of accelerators. To specify no minimum limit, omit this parameter.</p>
    pub fn min(mut self, input: i32) -> Self {
        self.min = Some(input);
        self
    }
    /// <p>The minimum number of accelerators. To specify no minimum limit, omit this parameter.</p>
    pub fn set_min(mut self, input: std::option::Option<i32>) -> Self {
        self.min = input;
        self
    }
    /// <p>The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
    pub fn max(mut self, input: i32) -> Self {
        self.max = Some(input);
        self
    }
    /// <p>The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set <code>Max</code> to <code>0</code>.</p>
    pub fn set_max(mut self, input: std::option::Option<i32>) -> Self {
        self.max = input;
        self
    }
    /// Consumes the builder and constructs a [`AcceleratorCountRequest`](crate::types::AcceleratorCountRequest).
    pub fn build(self) -> crate::types::AcceleratorCountRequest {
        crate::types::AcceleratorCountRequest {
            min: self.min,
            max: self.max,
        }
    }
}
