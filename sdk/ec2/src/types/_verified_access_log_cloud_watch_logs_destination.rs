// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for CloudWatch Logs as a logging destination.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VerifiedAccessLogCloudWatchLogsDestination {
    /// <p>Indicates whether logging is enabled.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The delivery status for access logs.</p>
    #[doc(hidden)]
    pub delivery_status: std::option::Option<crate::types::VerifiedAccessLogDeliveryStatus>,
    /// <p>The ID of the CloudWatch Logs log group.</p>
    #[doc(hidden)]
    pub log_group: std::option::Option<std::string::String>,
}
impl VerifiedAccessLogCloudWatchLogsDestination {
    /// <p>Indicates whether logging is enabled.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The delivery status for access logs.</p>
    pub fn delivery_status(
        &self,
    ) -> std::option::Option<&crate::types::VerifiedAccessLogDeliveryStatus> {
        self.delivery_status.as_ref()
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn log_group(&self) -> std::option::Option<&str> {
        self.log_group.as_deref()
    }
}
impl VerifiedAccessLogCloudWatchLogsDestination {
    /// Creates a new builder-style object to manufacture [`VerifiedAccessLogCloudWatchLogsDestination`](crate::types::VerifiedAccessLogCloudWatchLogsDestination).
    pub fn builder() -> crate::types::builders::VerifiedAccessLogCloudWatchLogsDestinationBuilder {
        crate::types::builders::VerifiedAccessLogCloudWatchLogsDestinationBuilder::default()
    }
}

/// A builder for [`VerifiedAccessLogCloudWatchLogsDestination`](crate::types::VerifiedAccessLogCloudWatchLogsDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VerifiedAccessLogCloudWatchLogsDestinationBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) delivery_status: std::option::Option<crate::types::VerifiedAccessLogDeliveryStatus>,
    pub(crate) log_group: std::option::Option<std::string::String>,
}
impl VerifiedAccessLogCloudWatchLogsDestinationBuilder {
    /// <p>Indicates whether logging is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates whether logging is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The delivery status for access logs.</p>
    pub fn delivery_status(mut self, input: crate::types::VerifiedAccessLogDeliveryStatus) -> Self {
        self.delivery_status = Some(input);
        self
    }
    /// <p>The delivery status for access logs.</p>
    pub fn set_delivery_status(
        mut self,
        input: std::option::Option<crate::types::VerifiedAccessLogDeliveryStatus>,
    ) -> Self {
        self.delivery_status = input;
        self
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn log_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_group = Some(input.into());
        self
    }
    /// <p>The ID of the CloudWatch Logs log group.</p>
    pub fn set_log_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_group = input;
        self
    }
    /// Consumes the builder and constructs a [`VerifiedAccessLogCloudWatchLogsDestination`](crate::types::VerifiedAccessLogCloudWatchLogsDestination).
    pub fn build(self) -> crate::types::VerifiedAccessLogCloudWatchLogsDestination {
        crate::types::VerifiedAccessLogCloudWatchLogsDestination {
            enabled: self.enabled,
            delivery_status: self.delivery_status,
            log_group: self.log_group,
        }
    }
}
