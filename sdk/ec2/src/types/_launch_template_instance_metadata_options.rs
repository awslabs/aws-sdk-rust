// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchTemplateInstanceMetadataOptions {
    /// <p>The state of the metadata option changes.</p>
    /// <p><code>pending</code> - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.</p>
    /// <p><code>applied</code> - The metadata options have been successfully applied on the instance.</p>
    pub state: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataOptionsState>,
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.</p></li>
    /// <li>
    /// <p><code>required</code> - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p></li>
    /// </ul>
    pub http_tokens: ::std::option::Option<crate::types::LaunchTemplateHttpTokensState>,
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    /// <p>Default: 1</p>
    /// <p>Possible values: Integers from 1 to 64</p>
    pub http_put_response_hop_limit: ::std::option::Option<i32>,
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p><note>
    /// <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p>
    /// </note>
    pub http_endpoint: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataEndpointState>,
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
    /// <p>Default: <code>disabled</code></p>
    pub http_protocol_ipv6: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataProtocolIpv6>,
    /// <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p>
    /// <p>Default: <code>disabled</code></p>
    pub instance_metadata_tags: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataTagsState>,
}
impl LaunchTemplateInstanceMetadataOptions {
    /// <p>The state of the metadata option changes.</p>
    /// <p><code>pending</code> - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.</p>
    /// <p><code>applied</code> - The metadata options have been successfully applied on the instance.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::LaunchTemplateInstanceMetadataOptionsState> {
        self.state.as_ref()
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.</p></li>
    /// <li>
    /// <p><code>required</code> - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p></li>
    /// </ul>
    pub fn http_tokens(&self) -> ::std::option::Option<&crate::types::LaunchTemplateHttpTokensState> {
        self.http_tokens.as_ref()
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    /// <p>Default: 1</p>
    /// <p>Possible values: Integers from 1 to 64</p>
    pub fn http_put_response_hop_limit(&self) -> ::std::option::Option<i32> {
        self.http_put_response_hop_limit
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p><note>
    /// <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p>
    /// </note>
    pub fn http_endpoint(&self) -> ::std::option::Option<&crate::types::LaunchTemplateInstanceMetadataEndpointState> {
        self.http_endpoint.as_ref()
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn http_protocol_ipv6(&self) -> ::std::option::Option<&crate::types::LaunchTemplateInstanceMetadataProtocolIpv6> {
        self.http_protocol_ipv6.as_ref()
    }
    /// <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn instance_metadata_tags(&self) -> ::std::option::Option<&crate::types::LaunchTemplateInstanceMetadataTagsState> {
        self.instance_metadata_tags.as_ref()
    }
}
impl LaunchTemplateInstanceMetadataOptions {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateInstanceMetadataOptions`](crate::types::LaunchTemplateInstanceMetadataOptions).
    pub fn builder() -> crate::types::builders::LaunchTemplateInstanceMetadataOptionsBuilder {
        crate::types::builders::LaunchTemplateInstanceMetadataOptionsBuilder::default()
    }
}

/// A builder for [`LaunchTemplateInstanceMetadataOptions`](crate::types::LaunchTemplateInstanceMetadataOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchTemplateInstanceMetadataOptionsBuilder {
    pub(crate) state: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataOptionsState>,
    pub(crate) http_tokens: ::std::option::Option<crate::types::LaunchTemplateHttpTokensState>,
    pub(crate) http_put_response_hop_limit: ::std::option::Option<i32>,
    pub(crate) http_endpoint: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataEndpointState>,
    pub(crate) http_protocol_ipv6: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataProtocolIpv6>,
    pub(crate) instance_metadata_tags: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataTagsState>,
}
impl LaunchTemplateInstanceMetadataOptionsBuilder {
    /// <p>The state of the metadata option changes.</p>
    /// <p><code>pending</code> - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.</p>
    /// <p><code>applied</code> - The metadata options have been successfully applied on the instance.</p>
    pub fn state(mut self, input: crate::types::LaunchTemplateInstanceMetadataOptionsState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the metadata option changes.</p>
    /// <p><code>pending</code> - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.</p>
    /// <p><code>applied</code> - The metadata options have been successfully applied on the instance.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataOptionsState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the metadata option changes.</p>
    /// <p><code>pending</code> - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.</p>
    /// <p><code>applied</code> - The metadata options have been successfully applied on the instance.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::LaunchTemplateInstanceMetadataOptionsState> {
        &self.state
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.</p></li>
    /// <li>
    /// <p><code>required</code> - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p></li>
    /// </ul>
    pub fn http_tokens(mut self, input: crate::types::LaunchTemplateHttpTokensState) -> Self {
        self.http_tokens = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.</p></li>
    /// <li>
    /// <p><code>required</code> - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p></li>
    /// </ul>
    pub fn set_http_tokens(mut self, input: ::std::option::Option<crate::types::LaunchTemplateHttpTokensState>) -> Self {
        self.http_tokens = input;
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.</p></li>
    /// <li>
    /// <p><code>required</code> - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.</p></li>
    /// </ul>
    pub fn get_http_tokens(&self) -> &::std::option::Option<crate::types::LaunchTemplateHttpTokensState> {
        &self.http_tokens
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    /// <p>Default: 1</p>
    /// <p>Possible values: Integers from 1 to 64</p>
    pub fn http_put_response_hop_limit(mut self, input: i32) -> Self {
        self.http_put_response_hop_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    /// <p>Default: 1</p>
    /// <p>Possible values: Integers from 1 to 64</p>
    pub fn set_http_put_response_hop_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.http_put_response_hop_limit = input;
        self
    }
    /// <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
    /// <p>Default: 1</p>
    /// <p>Possible values: Integers from 1 to 64</p>
    pub fn get_http_put_response_hop_limit(&self) -> &::std::option::Option<i32> {
        &self.http_put_response_hop_limit
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p><note>
    /// <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p>
    /// </note>
    pub fn http_endpoint(mut self, input: crate::types::LaunchTemplateInstanceMetadataEndpointState) -> Self {
        self.http_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p><note>
    /// <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p>
    /// </note>
    pub fn set_http_endpoint(mut self, input: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataEndpointState>) -> Self {
        self.http_endpoint = input;
        self
    }
    /// <p>Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p><note>
    /// <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p>
    /// </note>
    pub fn get_http_endpoint(&self) -> &::std::option::Option<crate::types::LaunchTemplateInstanceMetadataEndpointState> {
        &self.http_endpoint
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn http_protocol_ipv6(mut self, input: crate::types::LaunchTemplateInstanceMetadataProtocolIpv6) -> Self {
        self.http_protocol_ipv6 = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn set_http_protocol_ipv6(mut self, input: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataProtocolIpv6>) -> Self {
        self.http_protocol_ipv6 = input;
        self
    }
    /// <p>Enables or disables the IPv6 endpoint for the instance metadata service.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn get_http_protocol_ipv6(&self) -> &::std::option::Option<crate::types::LaunchTemplateInstanceMetadataProtocolIpv6> {
        &self.http_protocol_ipv6
    }
    /// <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn instance_metadata_tags(mut self, input: crate::types::LaunchTemplateInstanceMetadataTagsState) -> Self {
        self.instance_metadata_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn set_instance_metadata_tags(mut self, input: ::std::option::Option<crate::types::LaunchTemplateInstanceMetadataTagsState>) -> Self {
        self.instance_metadata_tags = input;
        self
    }
    /// <p>Set to <code>enabled</code> to allow access to instance tags from the instance metadata. Set to <code>disabled</code> to turn off access to instance tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a>.</p>
    /// <p>Default: <code>disabled</code></p>
    pub fn get_instance_metadata_tags(&self) -> &::std::option::Option<crate::types::LaunchTemplateInstanceMetadataTagsState> {
        &self.instance_metadata_tags
    }
    /// Consumes the builder and constructs a [`LaunchTemplateInstanceMetadataOptions`](crate::types::LaunchTemplateInstanceMetadataOptions).
    pub fn build(self) -> crate::types::LaunchTemplateInstanceMetadataOptions {
        crate::types::LaunchTemplateInstanceMetadataOptions {
            state: self.state,
            http_tokens: self.http_tokens,
            http_put_response_hop_limit: self.http_put_response_hop_limit,
            http_endpoint: self.http_endpoint,
            http_protocol_ipv6: self.http_protocol_ipv6,
            instance_metadata_tags: self.instance_metadata_tags,
        }
    }
}
