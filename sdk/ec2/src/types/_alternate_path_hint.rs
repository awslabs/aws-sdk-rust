// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an potential intermediate component of a feasible path.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AlternatePathHint {
    /// <p>The ID of the component.</p>
    #[doc(hidden)]
    pub component_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the component.</p>
    #[doc(hidden)]
    pub component_arn: std::option::Option<std::string::String>,
}
impl AlternatePathHint {
    /// <p>The ID of the component.</p>
    pub fn component_id(&self) -> std::option::Option<&str> {
        self.component_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the component.</p>
    pub fn component_arn(&self) -> std::option::Option<&str> {
        self.component_arn.as_deref()
    }
}
impl AlternatePathHint {
    /// Creates a new builder-style object to manufacture [`AlternatePathHint`](crate::types::AlternatePathHint).
    pub fn builder() -> crate::types::builders::AlternatePathHintBuilder {
        crate::types::builders::AlternatePathHintBuilder::default()
    }
}

/// A builder for [`AlternatePathHint`](crate::types::AlternatePathHint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlternatePathHintBuilder {
    pub(crate) component_id: std::option::Option<std::string::String>,
    pub(crate) component_arn: std::option::Option<std::string::String>,
}
impl AlternatePathHintBuilder {
    /// <p>The ID of the component.</p>
    pub fn component_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_id = Some(input.into());
        self
    }
    /// <p>The ID of the component.</p>
    pub fn set_component_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the component.</p>
    pub fn component_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the component.</p>
    pub fn set_component_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`AlternatePathHint`](crate::types::AlternatePathHint).
    pub fn build(self) -> crate::types::AlternatePathHint {
        crate::types::AlternatePathHint {
            component_id: self.component_id,
            component_arn: self.component_arn,
        }
    }
}
