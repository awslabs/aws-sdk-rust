// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the errors that occurred when enabling fast snapshot restores.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnableFastSnapshotRestoreErrorItem {
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The errors.</p>
    pub fast_snapshot_restore_state_errors: ::std::option::Option<::std::vec::Vec<crate::types::EnableFastSnapshotRestoreStateErrorItem>>,
}
impl EnableFastSnapshotRestoreErrorItem {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The errors.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.fast_snapshot_restore_state_errors.is_none()`.
    pub fn fast_snapshot_restore_state_errors(&self) -> &[crate::types::EnableFastSnapshotRestoreStateErrorItem] {
        self.fast_snapshot_restore_state_errors.as_deref().unwrap_or_default()
    }
}
impl EnableFastSnapshotRestoreErrorItem {
    /// Creates a new builder-style object to manufacture [`EnableFastSnapshotRestoreErrorItem`](crate::types::EnableFastSnapshotRestoreErrorItem).
    pub fn builder() -> crate::types::builders::EnableFastSnapshotRestoreErrorItemBuilder {
        crate::types::builders::EnableFastSnapshotRestoreErrorItemBuilder::default()
    }
}

/// A builder for [`EnableFastSnapshotRestoreErrorItem`](crate::types::EnableFastSnapshotRestoreErrorItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnableFastSnapshotRestoreErrorItemBuilder {
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) fast_snapshot_restore_state_errors: ::std::option::Option<::std::vec::Vec<crate::types::EnableFastSnapshotRestoreStateErrorItem>>,
}
impl EnableFastSnapshotRestoreErrorItemBuilder {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// Appends an item to `fast_snapshot_restore_state_errors`.
    ///
    /// To override the contents of this collection use [`set_fast_snapshot_restore_state_errors`](Self::set_fast_snapshot_restore_state_errors).
    ///
    /// <p>The errors.</p>
    pub fn fast_snapshot_restore_state_errors(mut self, input: crate::types::EnableFastSnapshotRestoreStateErrorItem) -> Self {
        let mut v = self.fast_snapshot_restore_state_errors.unwrap_or_default();
        v.push(input);
        self.fast_snapshot_restore_state_errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The errors.</p>
    pub fn set_fast_snapshot_restore_state_errors(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::EnableFastSnapshotRestoreStateErrorItem>>,
    ) -> Self {
        self.fast_snapshot_restore_state_errors = input;
        self
    }
    /// <p>The errors.</p>
    pub fn get_fast_snapshot_restore_state_errors(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::EnableFastSnapshotRestoreStateErrorItem>> {
        &self.fast_snapshot_restore_state_errors
    }
    /// Consumes the builder and constructs a [`EnableFastSnapshotRestoreErrorItem`](crate::types::EnableFastSnapshotRestoreErrorItem).
    pub fn build(self) -> crate::types::EnableFastSnapshotRestoreErrorItem {
        crate::types::EnableFastSnapshotRestoreErrorItem {
            snapshot_id: self.snapshot_id,
            fast_snapshot_restore_state_errors: self.fast_snapshot_restore_state_errors,
        }
    }
}
