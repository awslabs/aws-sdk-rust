// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the client-specific data.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClientData {
    /// <p>A user-defined comment about the disk upload.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
    /// <p>The time that the disk upload ends.</p>
    #[doc(hidden)]
    pub upload_end: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The size of the uploaded disk image, in GiB.</p>
    #[doc(hidden)]
    pub upload_size: std::option::Option<f64>,
    /// <p>The time that the disk upload starts.</p>
    #[doc(hidden)]
    pub upload_start: std::option::Option<aws_smithy_types::DateTime>,
}
impl ClientData {
    /// <p>A user-defined comment about the disk upload.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The time that the disk upload ends.</p>
    pub fn upload_end(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.upload_end.as_ref()
    }
    /// <p>The size of the uploaded disk image, in GiB.</p>
    pub fn upload_size(&self) -> std::option::Option<f64> {
        self.upload_size
    }
    /// <p>The time that the disk upload starts.</p>
    pub fn upload_start(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.upload_start.as_ref()
    }
}
impl ClientData {
    /// Creates a new builder-style object to manufacture [`ClientData`](crate::types::ClientData).
    pub fn builder() -> crate::types::builders::ClientDataBuilder {
        crate::types::builders::ClientDataBuilder::default()
    }
}

/// A builder for [`ClientData`](crate::types::ClientData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClientDataBuilder {
    pub(crate) comment: std::option::Option<std::string::String>,
    pub(crate) upload_end: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) upload_size: std::option::Option<f64>,
    pub(crate) upload_start: std::option::Option<aws_smithy_types::DateTime>,
}
impl ClientDataBuilder {
    /// <p>A user-defined comment about the disk upload.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>A user-defined comment about the disk upload.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The time that the disk upload ends.</p>
    pub fn upload_end(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.upload_end = Some(input);
        self
    }
    /// <p>The time that the disk upload ends.</p>
    pub fn set_upload_end(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.upload_end = input;
        self
    }
    /// <p>The size of the uploaded disk image, in GiB.</p>
    pub fn upload_size(mut self, input: f64) -> Self {
        self.upload_size = Some(input);
        self
    }
    /// <p>The size of the uploaded disk image, in GiB.</p>
    pub fn set_upload_size(mut self, input: std::option::Option<f64>) -> Self {
        self.upload_size = input;
        self
    }
    /// <p>The time that the disk upload starts.</p>
    pub fn upload_start(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.upload_start = Some(input);
        self
    }
    /// <p>The time that the disk upload starts.</p>
    pub fn set_upload_start(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.upload_start = input;
        self
    }
    /// Consumes the builder and constructs a [`ClientData`](crate::types::ClientData).
    pub fn build(self) -> crate::types::ClientData {
        crate::types::ClientData {
            comment: self.comment,
            upload_end: self.upload_end,
            upload_size: self.upload_size,
            upload_start: self.upload_start,
        }
    }
}
