// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a service configuration for a VPC endpoint service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceConfiguration {
    /// <p>The type of service.</p>
    pub service_type: ::std::option::Option<::std::vec::Vec<crate::types::ServiceTypeDetail>>,
    /// <p>The ID of the service.</p>
    pub service_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>The service state.</p>
    pub service_state: ::std::option::Option<crate::types::ServiceState>,
    /// <p>The Availability Zones in which the service is available.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>
    pub acceptance_required: ::std::option::Option<bool>,
    /// <p>Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub manages_vpc_endpoints: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>
    pub network_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub gateway_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The supported IP address types.</p>
    pub supported_ip_address_types: ::std::option::Option<::std::vec::Vec<crate::types::ServiceConnectivityType>>,
    /// <p>The DNS names for the service.</p>
    pub base_endpoint_dns_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The private DNS name for the service.</p>
    pub private_dns_name: ::std::option::Option<::std::string::String>,
    /// <p>Information about the endpoint service private DNS name configuration.</p>
    pub private_dns_name_configuration: ::std::option::Option<crate::types::PrivateDnsNameConfiguration>,
    /// <p>The payer responsibility.</p>
    pub payer_responsibility: ::std::option::Option<crate::types::PayerResponsibility>,
    /// <p>The tags assigned to the service.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ServiceConfiguration {
    /// <p>The type of service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_type.is_none()`.
    pub fn service_type(&self) -> &[crate::types::ServiceTypeDetail] {
        self.service_type.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the service.</p>
    pub fn service_id(&self) -> ::std::option::Option<&str> {
        self.service_id.as_deref()
    }
    /// <p>The name of the service.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The service state.</p>
    pub fn service_state(&self) -> ::std::option::Option<&crate::types::ServiceState> {
        self.service_state.as_ref()
    }
    /// <p>The Availability Zones in which the service is available.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[::std::string::String] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>
    pub fn acceptance_required(&self) -> ::std::option::Option<bool> {
        self.acceptance_required
    }
    /// <p>Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub fn manages_vpc_endpoints(&self) -> ::std::option::Option<bool> {
        self.manages_vpc_endpoints
    }
    /// <p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_load_balancer_arns.is_none()`.
    pub fn network_load_balancer_arns(&self) -> &[::std::string::String] {
        self.network_load_balancer_arns.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateway_load_balancer_arns.is_none()`.
    pub fn gateway_load_balancer_arns(&self) -> &[::std::string::String] {
        self.gateway_load_balancer_arns.as_deref().unwrap_or_default()
    }
    /// <p>The supported IP address types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_ip_address_types.is_none()`.
    pub fn supported_ip_address_types(&self) -> &[crate::types::ServiceConnectivityType] {
        self.supported_ip_address_types.as_deref().unwrap_or_default()
    }
    /// <p>The DNS names for the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.base_endpoint_dns_names.is_none()`.
    pub fn base_endpoint_dns_names(&self) -> &[::std::string::String] {
        self.base_endpoint_dns_names.as_deref().unwrap_or_default()
    }
    /// <p>The private DNS name for the service.</p>
    pub fn private_dns_name(&self) -> ::std::option::Option<&str> {
        self.private_dns_name.as_deref()
    }
    /// <p>Information about the endpoint service private DNS name configuration.</p>
    pub fn private_dns_name_configuration(&self) -> ::std::option::Option<&crate::types::PrivateDnsNameConfiguration> {
        self.private_dns_name_configuration.as_ref()
    }
    /// <p>The payer responsibility.</p>
    pub fn payer_responsibility(&self) -> ::std::option::Option<&crate::types::PayerResponsibility> {
        self.payer_responsibility.as_ref()
    }
    /// <p>The tags assigned to the service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ServiceConfiguration {
    /// Creates a new builder-style object to manufacture [`ServiceConfiguration`](crate::types::ServiceConfiguration).
    pub fn builder() -> crate::types::builders::ServiceConfigurationBuilder {
        crate::types::builders::ServiceConfigurationBuilder::default()
    }
}

/// A builder for [`ServiceConfiguration`](crate::types::ServiceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServiceConfigurationBuilder {
    pub(crate) service_type: ::std::option::Option<::std::vec::Vec<crate::types::ServiceTypeDetail>>,
    pub(crate) service_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_state: ::std::option::Option<crate::types::ServiceState>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) acceptance_required: ::std::option::Option<bool>,
    pub(crate) manages_vpc_endpoints: ::std::option::Option<bool>,
    pub(crate) network_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) gateway_load_balancer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) supported_ip_address_types: ::std::option::Option<::std::vec::Vec<crate::types::ServiceConnectivityType>>,
    pub(crate) base_endpoint_dns_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) private_dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) private_dns_name_configuration: ::std::option::Option<crate::types::PrivateDnsNameConfiguration>,
    pub(crate) payer_responsibility: ::std::option::Option<crate::types::PayerResponsibility>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ServiceConfigurationBuilder {
    /// Appends an item to `service_type`.
    ///
    /// To override the contents of this collection use [`set_service_type`](Self::set_service_type).
    ///
    /// <p>The type of service.</p>
    pub fn service_type(mut self, input: crate::types::ServiceTypeDetail) -> Self {
        let mut v = self.service_type.unwrap_or_default();
        v.push(input);
        self.service_type = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of service.</p>
    pub fn set_service_type(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceTypeDetail>>) -> Self {
        self.service_type = input;
        self
    }
    /// <p>The type of service.</p>
    pub fn get_service_type(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceTypeDetail>> {
        &self.service_type
    }
    /// <p>The ID of the service.</p>
    pub fn service_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the service.</p>
    pub fn set_service_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_id = input;
        self
    }
    /// <p>The ID of the service.</p>
    pub fn get_service_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_id
    }
    /// <p>The name of the service.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The service state.</p>
    pub fn service_state(mut self, input: crate::types::ServiceState) -> Self {
        self.service_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The service state.</p>
    pub fn set_service_state(mut self, input: ::std::option::Option<crate::types::ServiceState>) -> Self {
        self.service_state = input;
        self
    }
    /// <p>The service state.</p>
    pub fn get_service_state(&self) -> &::std::option::Option<crate::types::ServiceState> {
        &self.service_state
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zones in which the service is available.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Availability Zones in which the service is available.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>The Availability Zones in which the service is available.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zones
    }
    /// <p>Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>
    pub fn acceptance_required(mut self, input: bool) -> Self {
        self.acceptance_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>
    pub fn set_acceptance_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.acceptance_required = input;
        self
    }
    /// <p>Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>
    pub fn get_acceptance_required(&self) -> &::std::option::Option<bool> {
        &self.acceptance_required
    }
    /// <p>Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub fn manages_vpc_endpoints(mut self, input: bool) -> Self {
        self.manages_vpc_endpoints = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub fn set_manages_vpc_endpoints(mut self, input: ::std::option::Option<bool>) -> Self {
        self.manages_vpc_endpoints = input;
        self
    }
    /// <p>Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub fn get_manages_vpc_endpoints(&self) -> &::std::option::Option<bool> {
        &self.manages_vpc_endpoints
    }
    /// Appends an item to `network_load_balancer_arns`.
    ///
    /// To override the contents of this collection use [`set_network_load_balancer_arns`](Self::set_network_load_balancer_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>
    pub fn network_load_balancer_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_load_balancer_arns.unwrap_or_default();
        v.push(input.into());
        self.network_load_balancer_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>
    pub fn set_network_load_balancer_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_load_balancer_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>
    pub fn get_network_load_balancer_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_load_balancer_arns
    }
    /// Appends an item to `gateway_load_balancer_arns`.
    ///
    /// To override the contents of this collection use [`set_gateway_load_balancer_arns`](Self::set_gateway_load_balancer_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub fn gateway_load_balancer_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.gateway_load_balancer_arns.unwrap_or_default();
        v.push(input.into());
        self.gateway_load_balancer_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub fn set_gateway_load_balancer_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.gateway_load_balancer_arns = input;
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.</p>
    pub fn get_gateway_load_balancer_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.gateway_load_balancer_arns
    }
    /// Appends an item to `supported_ip_address_types`.
    ///
    /// To override the contents of this collection use [`set_supported_ip_address_types`](Self::set_supported_ip_address_types).
    ///
    /// <p>The supported IP address types.</p>
    pub fn supported_ip_address_types(mut self, input: crate::types::ServiceConnectivityType) -> Self {
        let mut v = self.supported_ip_address_types.unwrap_or_default();
        v.push(input);
        self.supported_ip_address_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported IP address types.</p>
    pub fn set_supported_ip_address_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceConnectivityType>>) -> Self {
        self.supported_ip_address_types = input;
        self
    }
    /// <p>The supported IP address types.</p>
    pub fn get_supported_ip_address_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceConnectivityType>> {
        &self.supported_ip_address_types
    }
    /// Appends an item to `base_endpoint_dns_names`.
    ///
    /// To override the contents of this collection use [`set_base_endpoint_dns_names`](Self::set_base_endpoint_dns_names).
    ///
    /// <p>The DNS names for the service.</p>
    pub fn base_endpoint_dns_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.base_endpoint_dns_names.unwrap_or_default();
        v.push(input.into());
        self.base_endpoint_dns_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The DNS names for the service.</p>
    pub fn set_base_endpoint_dns_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.base_endpoint_dns_names = input;
        self
    }
    /// <p>The DNS names for the service.</p>
    pub fn get_base_endpoint_dns_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.base_endpoint_dns_names
    }
    /// <p>The private DNS name for the service.</p>
    pub fn private_dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The private DNS name for the service.</p>
    pub fn set_private_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_dns_name = input;
        self
    }
    /// <p>The private DNS name for the service.</p>
    pub fn get_private_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_dns_name
    }
    /// <p>Information about the endpoint service private DNS name configuration.</p>
    pub fn private_dns_name_configuration(mut self, input: crate::types::PrivateDnsNameConfiguration) -> Self {
        self.private_dns_name_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the endpoint service private DNS name configuration.</p>
    pub fn set_private_dns_name_configuration(mut self, input: ::std::option::Option<crate::types::PrivateDnsNameConfiguration>) -> Self {
        self.private_dns_name_configuration = input;
        self
    }
    /// <p>Information about the endpoint service private DNS name configuration.</p>
    pub fn get_private_dns_name_configuration(&self) -> &::std::option::Option<crate::types::PrivateDnsNameConfiguration> {
        &self.private_dns_name_configuration
    }
    /// <p>The payer responsibility.</p>
    pub fn payer_responsibility(mut self, input: crate::types::PayerResponsibility) -> Self {
        self.payer_responsibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payer responsibility.</p>
    pub fn set_payer_responsibility(mut self, input: ::std::option::Option<crate::types::PayerResponsibility>) -> Self {
        self.payer_responsibility = input;
        self
    }
    /// <p>The payer responsibility.</p>
    pub fn get_payer_responsibility(&self) -> &::std::option::Option<crate::types::PayerResponsibility> {
        &self.payer_responsibility
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the service.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the service.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the service.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ServiceConfiguration`](crate::types::ServiceConfiguration).
    pub fn build(self) -> crate::types::ServiceConfiguration {
        crate::types::ServiceConfiguration {
            service_type: self.service_type,
            service_id: self.service_id,
            service_name: self.service_name,
            service_state: self.service_state,
            availability_zones: self.availability_zones,
            acceptance_required: self.acceptance_required,
            manages_vpc_endpoints: self.manages_vpc_endpoints,
            network_load_balancer_arns: self.network_load_balancer_arns,
            gateway_load_balancer_arns: self.gateway_load_balancer_arns,
            supported_ip_address_types: self.supported_ip_address_types,
            base_endpoint_dns_names: self.base_endpoint_dns_names,
            private_dns_name: self.private_dns_name,
            private_dns_name_configuration: self.private_dns_name_configuration,
            payer_responsibility: self.payer_responsibility,
            tags: self.tags,
        }
    }
}
