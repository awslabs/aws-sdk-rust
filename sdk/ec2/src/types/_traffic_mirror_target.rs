// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a Traffic Mirror target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrafficMirrorTarget {
    /// <p>The ID of the Traffic Mirror target.</p>
    pub traffic_mirror_target_id: ::std::option::Option<::std::string::String>,
    /// <p>The network interface ID that is attached to the target.</p>
    pub network_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Network Load Balancer.</p>
    pub network_load_balancer_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of Traffic Mirror target.</p>
    pub r#type: ::std::option::Option<crate::types::TrafficMirrorTargetType>,
    /// <p>Information about the Traffic Mirror target.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the account that owns the Traffic Mirror target.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the Traffic Mirror target.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The ID of the Gateway Load Balancer endpoint.</p>
    pub gateway_load_balancer_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl TrafficMirrorTarget {
    /// <p>The ID of the Traffic Mirror target.</p>
    pub fn traffic_mirror_target_id(&self) -> ::std::option::Option<&str> {
        self.traffic_mirror_target_id.as_deref()
    }
    /// <p>The network interface ID that is attached to the target.</p>
    pub fn network_interface_id(&self) -> ::std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Network Load Balancer.</p>
    pub fn network_load_balancer_arn(&self) -> ::std::option::Option<&str> {
        self.network_load_balancer_arn.as_deref()
    }
    /// <p>The type of Traffic Mirror target.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::TrafficMirrorTargetType> {
        self.r#type.as_ref()
    }
    /// <p>Information about the Traffic Mirror target.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the account that owns the Traffic Mirror target.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The tags assigned to the Traffic Mirror target.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the Gateway Load Balancer endpoint.</p>
    pub fn gateway_load_balancer_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.gateway_load_balancer_endpoint_id.as_deref()
    }
}
impl TrafficMirrorTarget {
    /// Creates a new builder-style object to manufacture [`TrafficMirrorTarget`](crate::types::TrafficMirrorTarget).
    pub fn builder() -> crate::types::builders::TrafficMirrorTargetBuilder {
        crate::types::builders::TrafficMirrorTargetBuilder::default()
    }
}

/// A builder for [`TrafficMirrorTarget`](crate::types::TrafficMirrorTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TrafficMirrorTargetBuilder {
    pub(crate) traffic_mirror_target_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_load_balancer_arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::TrafficMirrorTargetType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) gateway_load_balancer_endpoint_id: ::std::option::Option<::std::string::String>,
}
impl TrafficMirrorTargetBuilder {
    /// <p>The ID of the Traffic Mirror target.</p>
    pub fn traffic_mirror_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_mirror_target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Traffic Mirror target.</p>
    pub fn set_traffic_mirror_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_mirror_target_id = input;
        self
    }
    /// <p>The ID of the Traffic Mirror target.</p>
    pub fn get_traffic_mirror_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_mirror_target_id
    }
    /// <p>The network interface ID that is attached to the target.</p>
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network interface ID that is attached to the target.</p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The network interface ID that is attached to the target.</p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Network Load Balancer.</p>
    pub fn network_load_balancer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_load_balancer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Network Load Balancer.</p>
    pub fn set_network_load_balancer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_load_balancer_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Network Load Balancer.</p>
    pub fn get_network_load_balancer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_load_balancer_arn
    }
    /// <p>The type of Traffic Mirror target.</p>
    pub fn r#type(mut self, input: crate::types::TrafficMirrorTargetType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Traffic Mirror target.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::TrafficMirrorTargetType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of Traffic Mirror target.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::TrafficMirrorTargetType> {
        &self.r#type
    }
    /// <p>Information about the Traffic Mirror target.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the Traffic Mirror target.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Information about the Traffic Mirror target.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of the account that owns the Traffic Mirror target.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that owns the Traffic Mirror target.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the account that owns the Traffic Mirror target.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the Traffic Mirror target.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the Traffic Mirror target.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the Traffic Mirror target.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The ID of the Gateway Load Balancer endpoint.</p>
    pub fn gateway_load_balancer_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_load_balancer_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Gateway Load Balancer endpoint.</p>
    pub fn set_gateway_load_balancer_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_load_balancer_endpoint_id = input;
        self
    }
    /// <p>The ID of the Gateway Load Balancer endpoint.</p>
    pub fn get_gateway_load_balancer_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_load_balancer_endpoint_id
    }
    /// Consumes the builder and constructs a [`TrafficMirrorTarget`](crate::types::TrafficMirrorTarget).
    pub fn build(self) -> crate::types::TrafficMirrorTarget {
        crate::types::TrafficMirrorTarget {
            traffic_mirror_target_id: self.traffic_mirror_target_id,
            network_interface_id: self.network_interface_id,
            network_load_balancer_arn: self.network_load_balancer_arn,
            r#type: self.r#type,
            description: self.description,
            owner_id: self.owner_id,
            tags: self.tags,
            gateway_load_balancer_endpoint_id: self.gateway_load_balancer_endpoint_id,
        }
    }
}
