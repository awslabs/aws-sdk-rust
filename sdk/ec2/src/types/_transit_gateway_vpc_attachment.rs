// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a VPC attachment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransitGatewayVpcAttachment {
    /// <p>The ID of the attachment.</p>
    #[doc(hidden)]
    pub transit_gateway_attachment_id: std::option::Option<std::string::String>,
    /// <p>The ID of the transit gateway.</p>
    #[doc(hidden)]
    pub transit_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    #[doc(hidden)]
    pub vpc_owner_id: std::option::Option<std::string::String>,
    /// <p>The state of the VPC attachment. Note that the <code>initiating</code> state has been deprecated.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::TransitGatewayAttachmentState>,
    /// <p>The IDs of the subnets.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The creation time.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The VPC attachment options.</p>
    #[doc(hidden)]
    pub options: std::option::Option<crate::types::TransitGatewayVpcAttachmentOptions>,
    /// <p>The tags for the VPC attachment.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl TransitGatewayVpcAttachment {
    /// <p>The ID of the attachment.</p>
    pub fn transit_gateway_attachment_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_attachment_id.as_deref()
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn transit_gateway_id(&self) -> std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn vpc_owner_id(&self) -> std::option::Option<&str> {
        self.vpc_owner_id.as_deref()
    }
    /// <p>The state of the VPC attachment. Note that the <code>initiating</code> state has been deprecated.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::TransitGatewayAttachmentState> {
        self.state.as_ref()
    }
    /// <p>The IDs of the subnets.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The VPC attachment options.</p>
    pub fn options(
        &self,
    ) -> std::option::Option<&crate::types::TransitGatewayVpcAttachmentOptions> {
        self.options.as_ref()
    }
    /// <p>The tags for the VPC attachment.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl TransitGatewayVpcAttachment {
    /// Creates a new builder-style object to manufacture [`TransitGatewayVpcAttachment`](crate::types::TransitGatewayVpcAttachment).
    pub fn builder() -> crate::types::builders::TransitGatewayVpcAttachmentBuilder {
        crate::types::builders::TransitGatewayVpcAttachmentBuilder::default()
    }
}

/// A builder for [`TransitGatewayVpcAttachment`](crate::types::TransitGatewayVpcAttachment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransitGatewayVpcAttachmentBuilder {
    pub(crate) transit_gateway_attachment_id: std::option::Option<std::string::String>,
    pub(crate) transit_gateway_id: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) vpc_owner_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::TransitGatewayAttachmentState>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) options: std::option::Option<crate::types::TransitGatewayVpcAttachmentOptions>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl TransitGatewayVpcAttachmentBuilder {
    /// <p>The ID of the attachment.</p>
    pub fn transit_gateway_attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of the attachment.</p>
    pub fn set_transit_gateway_attachment_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_attachment_id = input;
        self
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn transit_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.transit_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn set_transit_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn vpc_owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_owner_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the VPC.</p>
    pub fn set_vpc_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_owner_id = input;
        self
    }
    /// <p>The state of the VPC attachment. Note that the <code>initiating</code> state has been deprecated.</p>
    pub fn state(mut self, input: crate::types::TransitGatewayAttachmentState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the VPC attachment. Note that the <code>initiating</code> state has been deprecated.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::TransitGatewayAttachmentState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The IDs of the subnets.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The IDs of the subnets.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The VPC attachment options.</p>
    pub fn options(mut self, input: crate::types::TransitGatewayVpcAttachmentOptions) -> Self {
        self.options = Some(input);
        self
    }
    /// <p>The VPC attachment options.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<crate::types::TransitGatewayVpcAttachmentOptions>,
    ) -> Self {
        self.options = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the VPC attachment.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags for the VPC attachment.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`TransitGatewayVpcAttachment`](crate::types::TransitGatewayVpcAttachment).
    pub fn build(self) -> crate::types::TransitGatewayVpcAttachment {
        crate::types::TransitGatewayVpcAttachment {
            transit_gateway_attachment_id: self.transit_gateway_attachment_id,
            transit_gateway_id: self.transit_gateway_id,
            vpc_id: self.vpc_id,
            vpc_owner_id: self.vpc_owner_id,
            state: self.state,
            subnet_ids: self.subnet_ids,
            creation_time: self.creation_time,
            options: self.options,
            tags: self.tags,
        }
    }
}
