// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the volume status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VolumeStatusItem {
    /// <p>The details of the operation.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAction>>,
    /// <p>The Availability Zone of the volume.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub outpost_arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of events associated with the volume.</p>
    pub events: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusEvent>>,
    /// <p>The volume ID.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The volume status.</p>
    pub volume_status: ::std::option::Option<crate::types::VolumeStatusInfo>,
    /// <p>Information about the instances to which the volume is attached.</p>
    pub attachment_statuses: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAttachmentStatus>>,
}
impl VolumeStatusItem {
    /// <p>The details of the operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::VolumeStatusAction] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The Availability Zone of the volume.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(&self) -> ::std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>A list of events associated with the volume.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.events.is_none()`.
    pub fn events(&self) -> &[crate::types::VolumeStatusEvent] {
        self.events.as_deref().unwrap_or_default()
    }
    /// <p>The volume ID.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The volume status.</p>
    pub fn volume_status(&self) -> ::std::option::Option<&crate::types::VolumeStatusInfo> {
        self.volume_status.as_ref()
    }
    /// <p>Information about the instances to which the volume is attached.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attachment_statuses.is_none()`.
    pub fn attachment_statuses(&self) -> &[crate::types::VolumeStatusAttachmentStatus] {
        self.attachment_statuses.as_deref().unwrap_or_default()
    }
}
impl VolumeStatusItem {
    /// Creates a new builder-style object to manufacture [`VolumeStatusItem`](crate::types::VolumeStatusItem).
    pub fn builder() -> crate::types::builders::VolumeStatusItemBuilder {
        crate::types::builders::VolumeStatusItemBuilder::default()
    }
}

/// A builder for [`VolumeStatusItem`](crate::types::VolumeStatusItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VolumeStatusItemBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAction>>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_arn: ::std::option::Option<::std::string::String>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusEvent>>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_status: ::std::option::Option<crate::types::VolumeStatusInfo>,
    pub(crate) attachment_statuses: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAttachmentStatus>>,
}
impl VolumeStatusItemBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The details of the operation.</p>
    pub fn actions(mut self, input: crate::types::VolumeStatusAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details of the operation.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The details of the operation.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAction>> {
        &self.actions
    }
    /// <p>The Availability Zone of the volume.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone of the volume.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone of the volume.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn set_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost.</p>
    pub fn get_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_arn
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>A list of events associated with the volume.</p>
    pub fn events(mut self, input: crate::types::VolumeStatusEvent) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of events associated with the volume.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusEvent>>) -> Self {
        self.events = input;
        self
    }
    /// <p>A list of events associated with the volume.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusEvent>> {
        &self.events
    }
    /// <p>The volume ID.</p>
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The volume ID.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The volume ID.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The volume status.</p>
    pub fn volume_status(mut self, input: crate::types::VolumeStatusInfo) -> Self {
        self.volume_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The volume status.</p>
    pub fn set_volume_status(mut self, input: ::std::option::Option<crate::types::VolumeStatusInfo>) -> Self {
        self.volume_status = input;
        self
    }
    /// <p>The volume status.</p>
    pub fn get_volume_status(&self) -> &::std::option::Option<crate::types::VolumeStatusInfo> {
        &self.volume_status
    }
    /// Appends an item to `attachment_statuses`.
    ///
    /// To override the contents of this collection use [`set_attachment_statuses`](Self::set_attachment_statuses).
    ///
    /// <p>Information about the instances to which the volume is attached.</p>
    pub fn attachment_statuses(mut self, input: crate::types::VolumeStatusAttachmentStatus) -> Self {
        let mut v = self.attachment_statuses.unwrap_or_default();
        v.push(input);
        self.attachment_statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the instances to which the volume is attached.</p>
    pub fn set_attachment_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAttachmentStatus>>) -> Self {
        self.attachment_statuses = input;
        self
    }
    /// <p>Information about the instances to which the volume is attached.</p>
    pub fn get_attachment_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VolumeStatusAttachmentStatus>> {
        &self.attachment_statuses
    }
    /// Consumes the builder and constructs a [`VolumeStatusItem`](crate::types::VolumeStatusItem).
    pub fn build(self) -> crate::types::VolumeStatusItem {
        crate::types::VolumeStatusItem {
            actions: self.actions,
            availability_zone: self.availability_zone,
            outpost_arn: self.outpost_arn,
            events: self.events,
            volume_id: self.volume_id,
            volume_status: self.volume_status,
            attachment_statuses: self.attachment_statuses,
        }
    }
}
