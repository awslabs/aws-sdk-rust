// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the options for a transit gateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransitGatewayOptions {
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>
    #[doc(hidden)]
    pub amazon_side_asn: std::option::Option<i64>,
    /// <p>The transit gateway CIDR blocks.</p>
    #[doc(hidden)]
    pub transit_gateway_cidr_blocks: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Indicates whether attachment requests are automatically accepted.</p>
    #[doc(hidden)]
    pub auto_accept_shared_attachments:
        std::option::Option<crate::types::AutoAcceptSharedAttachmentsValue>,
    /// <p>Indicates whether resource attachments are automatically associated with the default association route table.</p>
    #[doc(hidden)]
    pub default_route_table_association:
        std::option::Option<crate::types::DefaultRouteTableAssociationValue>,
    /// <p>The ID of the default association route table.</p>
    #[doc(hidden)]
    pub association_default_route_table_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether resource attachments automatically propagate routes to the default propagation route table.</p>
    #[doc(hidden)]
    pub default_route_table_propagation:
        std::option::Option<crate::types::DefaultRouteTablePropagationValue>,
    /// <p>The ID of the default propagation route table.</p>
    #[doc(hidden)]
    pub propagation_default_route_table_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether Equal Cost Multipath Protocol support is enabled.</p>
    #[doc(hidden)]
    pub vpn_ecmp_support: std::option::Option<crate::types::VpnEcmpSupportValue>,
    /// <p>Indicates whether DNS support is enabled.</p>
    #[doc(hidden)]
    pub dns_support: std::option::Option<crate::types::DnsSupportValue>,
    /// <p>Indicates whether multicast is enabled on the transit gateway</p>
    #[doc(hidden)]
    pub multicast_support: std::option::Option<crate::types::MulticastSupportValue>,
}
impl TransitGatewayOptions {
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>
    pub fn amazon_side_asn(&self) -> std::option::Option<i64> {
        self.amazon_side_asn
    }
    /// <p>The transit gateway CIDR blocks.</p>
    pub fn transit_gateway_cidr_blocks(&self) -> std::option::Option<&[std::string::String]> {
        self.transit_gateway_cidr_blocks.as_deref()
    }
    /// <p>Indicates whether attachment requests are automatically accepted.</p>
    pub fn auto_accept_shared_attachments(
        &self,
    ) -> std::option::Option<&crate::types::AutoAcceptSharedAttachmentsValue> {
        self.auto_accept_shared_attachments.as_ref()
    }
    /// <p>Indicates whether resource attachments are automatically associated with the default association route table.</p>
    pub fn default_route_table_association(
        &self,
    ) -> std::option::Option<&crate::types::DefaultRouteTableAssociationValue> {
        self.default_route_table_association.as_ref()
    }
    /// <p>The ID of the default association route table.</p>
    pub fn association_default_route_table_id(&self) -> std::option::Option<&str> {
        self.association_default_route_table_id.as_deref()
    }
    /// <p>Indicates whether resource attachments automatically propagate routes to the default propagation route table.</p>
    pub fn default_route_table_propagation(
        &self,
    ) -> std::option::Option<&crate::types::DefaultRouteTablePropagationValue> {
        self.default_route_table_propagation.as_ref()
    }
    /// <p>The ID of the default propagation route table.</p>
    pub fn propagation_default_route_table_id(&self) -> std::option::Option<&str> {
        self.propagation_default_route_table_id.as_deref()
    }
    /// <p>Indicates whether Equal Cost Multipath Protocol support is enabled.</p>
    pub fn vpn_ecmp_support(&self) -> std::option::Option<&crate::types::VpnEcmpSupportValue> {
        self.vpn_ecmp_support.as_ref()
    }
    /// <p>Indicates whether DNS support is enabled.</p>
    pub fn dns_support(&self) -> std::option::Option<&crate::types::DnsSupportValue> {
        self.dns_support.as_ref()
    }
    /// <p>Indicates whether multicast is enabled on the transit gateway</p>
    pub fn multicast_support(&self) -> std::option::Option<&crate::types::MulticastSupportValue> {
        self.multicast_support.as_ref()
    }
}
impl TransitGatewayOptions {
    /// Creates a new builder-style object to manufacture [`TransitGatewayOptions`](crate::types::TransitGatewayOptions).
    pub fn builder() -> crate::types::builders::TransitGatewayOptionsBuilder {
        crate::types::builders::TransitGatewayOptionsBuilder::default()
    }
}

/// A builder for [`TransitGatewayOptions`](crate::types::TransitGatewayOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransitGatewayOptionsBuilder {
    pub(crate) amazon_side_asn: std::option::Option<i64>,
    pub(crate) transit_gateway_cidr_blocks: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) auto_accept_shared_attachments:
        std::option::Option<crate::types::AutoAcceptSharedAttachmentsValue>,
    pub(crate) default_route_table_association:
        std::option::Option<crate::types::DefaultRouteTableAssociationValue>,
    pub(crate) association_default_route_table_id: std::option::Option<std::string::String>,
    pub(crate) default_route_table_propagation:
        std::option::Option<crate::types::DefaultRouteTablePropagationValue>,
    pub(crate) propagation_default_route_table_id: std::option::Option<std::string::String>,
    pub(crate) vpn_ecmp_support: std::option::Option<crate::types::VpnEcmpSupportValue>,
    pub(crate) dns_support: std::option::Option<crate::types::DnsSupportValue>,
    pub(crate) multicast_support: std::option::Option<crate::types::MulticastSupportValue>,
}
impl TransitGatewayOptionsBuilder {
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>
    pub fn amazon_side_asn(mut self, input: i64) -> Self {
        self.amazon_side_asn = Some(input);
        self
    }
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>
    pub fn set_amazon_side_asn(mut self, input: std::option::Option<i64>) -> Self {
        self.amazon_side_asn = input;
        self
    }
    /// Appends an item to `transit_gateway_cidr_blocks`.
    ///
    /// To override the contents of this collection use [`set_transit_gateway_cidr_blocks`](Self::set_transit_gateway_cidr_blocks).
    ///
    /// <p>The transit gateway CIDR blocks.</p>
    pub fn transit_gateway_cidr_blocks(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.transit_gateway_cidr_blocks.unwrap_or_default();
        v.push(input.into());
        self.transit_gateway_cidr_blocks = Some(v);
        self
    }
    /// <p>The transit gateway CIDR blocks.</p>
    pub fn set_transit_gateway_cidr_blocks(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.transit_gateway_cidr_blocks = input;
        self
    }
    /// <p>Indicates whether attachment requests are automatically accepted.</p>
    pub fn auto_accept_shared_attachments(
        mut self,
        input: crate::types::AutoAcceptSharedAttachmentsValue,
    ) -> Self {
        self.auto_accept_shared_attachments = Some(input);
        self
    }
    /// <p>Indicates whether attachment requests are automatically accepted.</p>
    pub fn set_auto_accept_shared_attachments(
        mut self,
        input: std::option::Option<crate::types::AutoAcceptSharedAttachmentsValue>,
    ) -> Self {
        self.auto_accept_shared_attachments = input;
        self
    }
    /// <p>Indicates whether resource attachments are automatically associated with the default association route table.</p>
    pub fn default_route_table_association(
        mut self,
        input: crate::types::DefaultRouteTableAssociationValue,
    ) -> Self {
        self.default_route_table_association = Some(input);
        self
    }
    /// <p>Indicates whether resource attachments are automatically associated with the default association route table.</p>
    pub fn set_default_route_table_association(
        mut self,
        input: std::option::Option<crate::types::DefaultRouteTableAssociationValue>,
    ) -> Self {
        self.default_route_table_association = input;
        self
    }
    /// <p>The ID of the default association route table.</p>
    pub fn association_default_route_table_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.association_default_route_table_id = Some(input.into());
        self
    }
    /// <p>The ID of the default association route table.</p>
    pub fn set_association_default_route_table_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.association_default_route_table_id = input;
        self
    }
    /// <p>Indicates whether resource attachments automatically propagate routes to the default propagation route table.</p>
    pub fn default_route_table_propagation(
        mut self,
        input: crate::types::DefaultRouteTablePropagationValue,
    ) -> Self {
        self.default_route_table_propagation = Some(input);
        self
    }
    /// <p>Indicates whether resource attachments automatically propagate routes to the default propagation route table.</p>
    pub fn set_default_route_table_propagation(
        mut self,
        input: std::option::Option<crate::types::DefaultRouteTablePropagationValue>,
    ) -> Self {
        self.default_route_table_propagation = input;
        self
    }
    /// <p>The ID of the default propagation route table.</p>
    pub fn propagation_default_route_table_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.propagation_default_route_table_id = Some(input.into());
        self
    }
    /// <p>The ID of the default propagation route table.</p>
    pub fn set_propagation_default_route_table_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.propagation_default_route_table_id = input;
        self
    }
    /// <p>Indicates whether Equal Cost Multipath Protocol support is enabled.</p>
    pub fn vpn_ecmp_support(mut self, input: crate::types::VpnEcmpSupportValue) -> Self {
        self.vpn_ecmp_support = Some(input);
        self
    }
    /// <p>Indicates whether Equal Cost Multipath Protocol support is enabled.</p>
    pub fn set_vpn_ecmp_support(
        mut self,
        input: std::option::Option<crate::types::VpnEcmpSupportValue>,
    ) -> Self {
        self.vpn_ecmp_support = input;
        self
    }
    /// <p>Indicates whether DNS support is enabled.</p>
    pub fn dns_support(mut self, input: crate::types::DnsSupportValue) -> Self {
        self.dns_support = Some(input);
        self
    }
    /// <p>Indicates whether DNS support is enabled.</p>
    pub fn set_dns_support(
        mut self,
        input: std::option::Option<crate::types::DnsSupportValue>,
    ) -> Self {
        self.dns_support = input;
        self
    }
    /// <p>Indicates whether multicast is enabled on the transit gateway</p>
    pub fn multicast_support(mut self, input: crate::types::MulticastSupportValue) -> Self {
        self.multicast_support = Some(input);
        self
    }
    /// <p>Indicates whether multicast is enabled on the transit gateway</p>
    pub fn set_multicast_support(
        mut self,
        input: std::option::Option<crate::types::MulticastSupportValue>,
    ) -> Self {
        self.multicast_support = input;
        self
    }
    /// Consumes the builder and constructs a [`TransitGatewayOptions`](crate::types::TransitGatewayOptions).
    pub fn build(self) -> crate::types::TransitGatewayOptions {
        crate::types::TransitGatewayOptions {
            amazon_side_asn: self.amazon_side_asn,
            transit_gateway_cidr_blocks: self.transit_gateway_cidr_blocks,
            auto_accept_shared_attachments: self.auto_accept_shared_attachments,
            default_route_table_association: self.default_route_table_association,
            association_default_route_table_id: self.association_default_route_table_id,
            default_route_table_propagation: self.default_route_table_propagation,
            propagation_default_route_table_id: self.propagation_default_route_table_id,
            vpn_ecmp_support: self.vpn_ecmp_support,
            dns_support: self.dns_support,
            multicast_support: self.multicast_support,
        }
    }
}
