// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a header. Reflects any changes made by a component as traffic passes through. The fields of an inbound header are null except for the first component of a path.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalysisPacketHeader {
    /// <p>The destination addresses.</p>
    #[doc(hidden)]
    pub destination_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The destination port ranges.</p>
    #[doc(hidden)]
    pub destination_port_ranges: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    /// <p>The protocol.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
    /// <p>The source addresses.</p>
    #[doc(hidden)]
    pub source_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The source port ranges.</p>
    #[doc(hidden)]
    pub source_port_ranges: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
}
impl AnalysisPacketHeader {
    /// <p>The destination addresses.</p>
    pub fn destination_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.destination_addresses.as_deref()
    }
    /// <p>The destination port ranges.</p>
    pub fn destination_port_ranges(&self) -> std::option::Option<&[crate::types::PortRange]> {
        self.destination_port_ranges.as_deref()
    }
    /// <p>The protocol.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The source addresses.</p>
    pub fn source_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.source_addresses.as_deref()
    }
    /// <p>The source port ranges.</p>
    pub fn source_port_ranges(&self) -> std::option::Option<&[crate::types::PortRange]> {
        self.source_port_ranges.as_deref()
    }
}
impl AnalysisPacketHeader {
    /// Creates a new builder-style object to manufacture [`AnalysisPacketHeader`](crate::types::AnalysisPacketHeader).
    pub fn builder() -> crate::types::builders::AnalysisPacketHeaderBuilder {
        crate::types::builders::AnalysisPacketHeaderBuilder::default()
    }
}

/// A builder for [`AnalysisPacketHeader`](crate::types::AnalysisPacketHeader).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalysisPacketHeaderBuilder {
    pub(crate) destination_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) destination_port_ranges: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    pub(crate) protocol: std::option::Option<std::string::String>,
    pub(crate) source_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) source_port_ranges: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
}
impl AnalysisPacketHeaderBuilder {
    /// Appends an item to `destination_addresses`.
    ///
    /// To override the contents of this collection use [`set_destination_addresses`](Self::set_destination_addresses).
    ///
    /// <p>The destination addresses.</p>
    pub fn destination_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.destination_addresses.unwrap_or_default();
        v.push(input.into());
        self.destination_addresses = Some(v);
        self
    }
    /// <p>The destination addresses.</p>
    pub fn set_destination_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.destination_addresses = input;
        self
    }
    /// Appends an item to `destination_port_ranges`.
    ///
    /// To override the contents of this collection use [`set_destination_port_ranges`](Self::set_destination_port_ranges).
    ///
    /// <p>The destination port ranges.</p>
    pub fn destination_port_ranges(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.destination_port_ranges.unwrap_or_default();
        v.push(input);
        self.destination_port_ranges = Some(v);
        self
    }
    /// <p>The destination port ranges.</p>
    pub fn set_destination_port_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    ) -> Self {
        self.destination_port_ranges = input;
        self
    }
    /// <p>The protocol.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The protocol.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// Appends an item to `source_addresses`.
    ///
    /// To override the contents of this collection use [`set_source_addresses`](Self::set_source_addresses).
    ///
    /// <p>The source addresses.</p>
    pub fn source_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_addresses.unwrap_or_default();
        v.push(input.into());
        self.source_addresses = Some(v);
        self
    }
    /// <p>The source addresses.</p>
    pub fn set_source_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_addresses = input;
        self
    }
    /// Appends an item to `source_port_ranges`.
    ///
    /// To override the contents of this collection use [`set_source_port_ranges`](Self::set_source_port_ranges).
    ///
    /// <p>The source port ranges.</p>
    pub fn source_port_ranges(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.source_port_ranges.unwrap_or_default();
        v.push(input);
        self.source_port_ranges = Some(v);
        self
    }
    /// <p>The source port ranges.</p>
    pub fn set_source_port_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PortRange>>,
    ) -> Self {
        self.source_port_ranges = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalysisPacketHeader`](crate::types::AnalysisPacketHeader).
    pub fn build(self) -> crate::types::AnalysisPacketHeader {
        crate::types::AnalysisPacketHeader {
            destination_addresses: self.destination_addresses,
            destination_port_ranges: self.destination_port_ranges,
            protocol: self.protocol,
            source_addresses: self.source_addresses,
            source_port_ranges: self.source_port_ranges,
        }
    }
}
