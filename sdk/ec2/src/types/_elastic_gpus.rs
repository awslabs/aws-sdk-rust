// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Elastic Graphics accelerator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ElasticGpus {
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_id: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub elastic_gpu_type: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_health: ::std::option::Option<crate::types::ElasticGpuHealth>,
    /// <p>The state of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_state: ::std::option::Option<crate::types::ElasticGpuState>,
    /// <p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the Elastic Graphics accelerator.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ElasticGpus {
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_id(&self) -> ::std::option::Option<&str> {
        self.elastic_gpu_id.as_deref()
    }
    /// <p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_type(&self) -> ::std::option::Option<&str> {
        self.elastic_gpu_type.as_deref()
    }
    /// <p>The status of the Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_health(&self) -> ::std::option::Option<&crate::types::ElasticGpuHealth> {
        self.elastic_gpu_health.as_ref()
    }
    /// <p>The state of the Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_state(&self) -> ::std::option::Option<&crate::types::ElasticGpuState> {
        self.elastic_gpu_state.as_ref()
    }
    /// <p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The tags assigned to the Elastic Graphics accelerator.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ElasticGpus {
    /// Creates a new builder-style object to manufacture [`ElasticGpus`](crate::types::ElasticGpus).
    pub fn builder() -> crate::types::builders::ElasticGpusBuilder {
        crate::types::builders::ElasticGpusBuilder::default()
    }
}

/// A builder for [`ElasticGpus`](crate::types::ElasticGpus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ElasticGpusBuilder {
    pub(crate) elastic_gpu_id: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) elastic_gpu_type: ::std::option::Option<::std::string::String>,
    pub(crate) elastic_gpu_health: ::std::option::Option<crate::types::ElasticGpuHealth>,
    pub(crate) elastic_gpu_state: ::std::option::Option<crate::types::ElasticGpuState>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ElasticGpusBuilder {
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.elastic_gpu_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub fn set_elastic_gpu_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.elastic_gpu_id = input;
        self
    }
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub fn get_elastic_gpu_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.elastic_gpu_id
    }
    /// <p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.elastic_gpu_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub fn set_elastic_gpu_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.elastic_gpu_type = input;
        self
    }
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub fn get_elastic_gpu_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.elastic_gpu_type
    }
    /// <p>The status of the Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_health(mut self, input: crate::types::ElasticGpuHealth) -> Self {
        self.elastic_gpu_health = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Elastic Graphics accelerator.</p>
    pub fn set_elastic_gpu_health(mut self, input: ::std::option::Option<crate::types::ElasticGpuHealth>) -> Self {
        self.elastic_gpu_health = input;
        self
    }
    /// <p>The status of the Elastic Graphics accelerator.</p>
    pub fn get_elastic_gpu_health(&self) -> &::std::option::Option<crate::types::ElasticGpuHealth> {
        &self.elastic_gpu_health
    }
    /// <p>The state of the Elastic Graphics accelerator.</p>
    pub fn elastic_gpu_state(mut self, input: crate::types::ElasticGpuState) -> Self {
        self.elastic_gpu_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the Elastic Graphics accelerator.</p>
    pub fn set_elastic_gpu_state(mut self, input: ::std::option::Option<crate::types::ElasticGpuState>) -> Self {
        self.elastic_gpu_state = input;
        self
    }
    /// <p>The state of the Elastic Graphics accelerator.</p>
    pub fn get_elastic_gpu_state(&self) -> &::std::option::Option<crate::types::ElasticGpuState> {
        &self.elastic_gpu_state
    }
    /// <p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the Elastic Graphics accelerator.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the Elastic Graphics accelerator.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the Elastic Graphics accelerator.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ElasticGpus`](crate::types::ElasticGpus).
    pub fn build(self) -> crate::types::ElasticGpus {
        crate::types::ElasticGpus {
            elastic_gpu_id: self.elastic_gpu_id,
            availability_zone: self.availability_zone,
            elastic_gpu_type: self.elastic_gpu_type,
            elastic_gpu_health: self.elastic_gpu_health,
            elastic_gpu_state: self.elastic_gpu_state,
            instance_id: self.instance_id,
            tags: self.tags,
        }
    }
}
