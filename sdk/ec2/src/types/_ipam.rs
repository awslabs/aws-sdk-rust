// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ipam {
    /// <p>The Amazon Web Services account ID of the owner of the IPAM.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the IPAM.</p>
    pub ipam_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IPAM.</p>
    pub ipam_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region of the IPAM.</p>
    pub ipam_region: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the IPAM's default public scope.</p>
    pub public_default_scope_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the IPAM's default private scope.</p>
    pub private_default_scope_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
    pub scope_count: ::std::option::Option<i32>,
    /// <p>The description for the IPAM.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub operating_regions: ::std::option::Option<::std::vec::Vec<crate::types::IpamOperatingRegion>>,
    /// <p>The state of the IPAM.</p>
    pub state: ::std::option::Option<crate::types::IpamState>,
    /// <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The IPAM's default resource discovery ID.</p>
    pub default_resource_discovery_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPAM's default resource discovery association ID.</p>
    pub default_resource_discovery_association_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPAM's resource discovery association count.</p>
    pub resource_discovery_association_count: ::std::option::Option<i32>,
}
impl Ipam {
    /// <p>The Amazon Web Services account ID of the owner of the IPAM.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The ID of the IPAM.</p>
    pub fn ipam_id(&self) -> ::std::option::Option<&str> {
        self.ipam_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM.</p>
    pub fn ipam_arn(&self) -> ::std::option::Option<&str> {
        self.ipam_arn.as_deref()
    }
    /// <p>The Amazon Web Services Region of the IPAM.</p>
    pub fn ipam_region(&self) -> ::std::option::Option<&str> {
        self.ipam_region.as_deref()
    }
    /// <p>The ID of the IPAM's default public scope.</p>
    pub fn public_default_scope_id(&self) -> ::std::option::Option<&str> {
        self.public_default_scope_id.as_deref()
    }
    /// <p>The ID of the IPAM's default private scope.</p>
    pub fn private_default_scope_id(&self) -> ::std::option::Option<&str> {
        self.private_default_scope_id.as_deref()
    }
    /// <p>The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
    pub fn scope_count(&self) -> ::std::option::Option<i32> {
        self.scope_count
    }
    /// <p>The description for the IPAM.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operating_regions.is_none()`.
    pub fn operating_regions(&self) -> &[crate::types::IpamOperatingRegion] {
        self.operating_regions.as_deref().unwrap_or_default()
    }
    /// <p>The state of the IPAM.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::IpamState> {
        self.state.as_ref()
    }
    /// <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The IPAM's default resource discovery ID.</p>
    pub fn default_resource_discovery_id(&self) -> ::std::option::Option<&str> {
        self.default_resource_discovery_id.as_deref()
    }
    /// <p>The IPAM's default resource discovery association ID.</p>
    pub fn default_resource_discovery_association_id(&self) -> ::std::option::Option<&str> {
        self.default_resource_discovery_association_id.as_deref()
    }
    /// <p>The IPAM's resource discovery association count.</p>
    pub fn resource_discovery_association_count(&self) -> ::std::option::Option<i32> {
        self.resource_discovery_association_count
    }
}
impl Ipam {
    /// Creates a new builder-style object to manufacture [`Ipam`](crate::types::Ipam).
    pub fn builder() -> crate::types::builders::IpamBuilder {
        crate::types::builders::IpamBuilder::default()
    }
}

/// A builder for [`Ipam`](crate::types::Ipam).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpamBuilder {
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_region: ::std::option::Option<::std::string::String>,
    pub(crate) public_default_scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) private_default_scope_id: ::std::option::Option<::std::string::String>,
    pub(crate) scope_count: ::std::option::Option<i32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) operating_regions: ::std::option::Option<::std::vec::Vec<crate::types::IpamOperatingRegion>>,
    pub(crate) state: ::std::option::Option<crate::types::IpamState>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) default_resource_discovery_id: ::std::option::Option<::std::string::String>,
    pub(crate) default_resource_discovery_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_discovery_association_count: ::std::option::Option<i32>,
}
impl IpamBuilder {
    /// <p>The Amazon Web Services account ID of the owner of the IPAM.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The ID of the IPAM.</p>
    pub fn ipam_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM.</p>
    pub fn set_ipam_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_id = input;
        self
    }
    /// <p>The ID of the IPAM.</p>
    pub fn get_ipam_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_id
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM.</p>
    pub fn ipam_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM.</p>
    pub fn set_ipam_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IPAM.</p>
    pub fn get_ipam_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_arn
    }
    /// <p>The Amazon Web Services Region of the IPAM.</p>
    pub fn ipam_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the IPAM.</p>
    pub fn set_ipam_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the IPAM.</p>
    pub fn get_ipam_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_region
    }
    /// <p>The ID of the IPAM's default public scope.</p>
    pub fn public_default_scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_default_scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM's default public scope.</p>
    pub fn set_public_default_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_default_scope_id = input;
        self
    }
    /// <p>The ID of the IPAM's default public scope.</p>
    pub fn get_public_default_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_default_scope_id
    }
    /// <p>The ID of the IPAM's default private scope.</p>
    pub fn private_default_scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_default_scope_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM's default private scope.</p>
    pub fn set_private_default_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_default_scope_id = input;
        self
    }
    /// <p>The ID of the IPAM's default private scope.</p>
    pub fn get_private_default_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_default_scope_id
    }
    /// <p>The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
    pub fn scope_count(mut self, input: i32) -> Self {
        self.scope_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
    pub fn set_scope_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scope_count = input;
        self
    }
    /// <p>The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/quotas-ipam.html">Quotas in IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
    pub fn get_scope_count(&self) -> &::std::option::Option<i32> {
        &self.scope_count
    }
    /// <p>The description for the IPAM.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the IPAM.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the IPAM.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `operating_regions`.
    ///
    /// To override the contents of this collection use [`set_operating_regions`](Self::set_operating_regions).
    ///
    /// <p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn operating_regions(mut self, input: crate::types::IpamOperatingRegion) -> Self {
        let mut v = self.operating_regions.unwrap_or_default();
        v.push(input);
        self.operating_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn set_operating_regions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamOperatingRegion>>) -> Self {
        self.operating_regions = input;
        self
    }
    /// <p>The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn get_operating_regions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamOperatingRegion>> {
        &self.operating_regions
    }
    /// <p>The state of the IPAM.</p>
    pub fn state(mut self, input: crate::types::IpamState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the IPAM.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::IpamState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the IPAM.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::IpamState> {
        &self.state
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The IPAM's default resource discovery ID.</p>
    pub fn default_resource_discovery_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_resource_discovery_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPAM's default resource discovery ID.</p>
    pub fn set_default_resource_discovery_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_resource_discovery_id = input;
        self
    }
    /// <p>The IPAM's default resource discovery ID.</p>
    pub fn get_default_resource_discovery_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_resource_discovery_id
    }
    /// <p>The IPAM's default resource discovery association ID.</p>
    pub fn default_resource_discovery_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_resource_discovery_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPAM's default resource discovery association ID.</p>
    pub fn set_default_resource_discovery_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_resource_discovery_association_id = input;
        self
    }
    /// <p>The IPAM's default resource discovery association ID.</p>
    pub fn get_default_resource_discovery_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_resource_discovery_association_id
    }
    /// <p>The IPAM's resource discovery association count.</p>
    pub fn resource_discovery_association_count(mut self, input: i32) -> Self {
        self.resource_discovery_association_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IPAM's resource discovery association count.</p>
    pub fn set_resource_discovery_association_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.resource_discovery_association_count = input;
        self
    }
    /// <p>The IPAM's resource discovery association count.</p>
    pub fn get_resource_discovery_association_count(&self) -> &::std::option::Option<i32> {
        &self.resource_discovery_association_count
    }
    /// Consumes the builder and constructs a [`Ipam`](crate::types::Ipam).
    pub fn build(self) -> crate::types::Ipam {
        crate::types::Ipam {
            owner_id: self.owner_id,
            ipam_id: self.ipam_id,
            ipam_arn: self.ipam_arn,
            ipam_region: self.ipam_region,
            public_default_scope_id: self.public_default_scope_id,
            private_default_scope_id: self.private_default_scope_id,
            scope_count: self.scope_count,
            description: self.description,
            operating_regions: self.operating_regions,
            state: self.state,
            tags: self.tags,
            default_resource_discovery_id: self.default_resource_discovery_id,
            default_resource_discovery_association_id: self.default_resource_discovery_association_id,
            resource_discovery_association_count: self.resource_discovery_association_count,
        }
    }
}
