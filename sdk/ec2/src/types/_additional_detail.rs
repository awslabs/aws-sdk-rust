// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an additional detail for a path analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdditionalDetail {
    /// <p>The information type.</p>
    #[doc(hidden)]
    pub additional_detail_type: std::option::Option<std::string::String>,
    /// <p>The path component.</p>
    #[doc(hidden)]
    pub component: std::option::Option<crate::types::AnalysisComponent>,
}
impl AdditionalDetail {
    /// <p>The information type.</p>
    pub fn additional_detail_type(&self) -> std::option::Option<&str> {
        self.additional_detail_type.as_deref()
    }
    /// <p>The path component.</p>
    pub fn component(&self) -> std::option::Option<&crate::types::AnalysisComponent> {
        self.component.as_ref()
    }
}
impl AdditionalDetail {
    /// Creates a new builder-style object to manufacture [`AdditionalDetail`](crate::types::AdditionalDetail).
    pub fn builder() -> crate::types::builders::AdditionalDetailBuilder {
        crate::types::builders::AdditionalDetailBuilder::default()
    }
}

/// A builder for [`AdditionalDetail`](crate::types::AdditionalDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdditionalDetailBuilder {
    pub(crate) additional_detail_type: std::option::Option<std::string::String>,
    pub(crate) component: std::option::Option<crate::types::AnalysisComponent>,
}
impl AdditionalDetailBuilder {
    /// <p>The information type.</p>
    pub fn additional_detail_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.additional_detail_type = Some(input.into());
        self
    }
    /// <p>The information type.</p>
    pub fn set_additional_detail_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.additional_detail_type = input;
        self
    }
    /// <p>The path component.</p>
    pub fn component(mut self, input: crate::types::AnalysisComponent) -> Self {
        self.component = Some(input);
        self
    }
    /// <p>The path component.</p>
    pub fn set_component(
        mut self,
        input: std::option::Option<crate::types::AnalysisComponent>,
    ) -> Self {
        self.component = input;
        self
    }
    /// Consumes the builder and constructs a [`AdditionalDetail`](crate::types::AdditionalDetail).
    pub fn build(self) -> crate::types::AdditionalDetail {
        crate::types::AdditionalDetail {
            additional_detail_type: self.additional_detail_type,
            component: self.component,
        }
    }
}
