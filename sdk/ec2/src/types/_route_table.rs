// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a route table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RouteTable {
    /// <p>The associations between the route table and one or more subnets or a gateway.</p>
    #[doc(hidden)]
    pub associations: std::option::Option<std::vec::Vec<crate::types::RouteTableAssociation>>,
    /// <p>Any virtual private gateway (VGW) propagating routes.</p>
    #[doc(hidden)]
    pub propagating_vgws: std::option::Option<std::vec::Vec<crate::types::PropagatingVgw>>,
    /// <p>The ID of the route table.</p>
    #[doc(hidden)]
    pub route_table_id: std::option::Option<std::string::String>,
    /// <p>The routes in the route table.</p>
    #[doc(hidden)]
    pub routes: std::option::Option<std::vec::Vec<crate::types::Route>>,
    /// <p>Any tags assigned to the route table.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the route table.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
}
impl RouteTable {
    /// <p>The associations between the route table and one or more subnets or a gateway.</p>
    pub fn associations(&self) -> std::option::Option<&[crate::types::RouteTableAssociation]> {
        self.associations.as_deref()
    }
    /// <p>Any virtual private gateway (VGW) propagating routes.</p>
    pub fn propagating_vgws(&self) -> std::option::Option<&[crate::types::PropagatingVgw]> {
        self.propagating_vgws.as_deref()
    }
    /// <p>The ID of the route table.</p>
    pub fn route_table_id(&self) -> std::option::Option<&str> {
        self.route_table_id.as_deref()
    }
    /// <p>The routes in the route table.</p>
    pub fn routes(&self) -> std::option::Option<&[crate::types::Route]> {
        self.routes.as_deref()
    }
    /// <p>Any tags assigned to the route table.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the route table.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
}
impl RouteTable {
    /// Creates a new builder-style object to manufacture [`RouteTable`](crate::types::RouteTable).
    pub fn builder() -> crate::types::builders::RouteTableBuilder {
        crate::types::builders::RouteTableBuilder::default()
    }
}

/// A builder for [`RouteTable`](crate::types::RouteTable).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RouteTableBuilder {
    pub(crate) associations:
        std::option::Option<std::vec::Vec<crate::types::RouteTableAssociation>>,
    pub(crate) propagating_vgws: std::option::Option<std::vec::Vec<crate::types::PropagatingVgw>>,
    pub(crate) route_table_id: std::option::Option<std::string::String>,
    pub(crate) routes: std::option::Option<std::vec::Vec<crate::types::Route>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
}
impl RouteTableBuilder {
    /// Appends an item to `associations`.
    ///
    /// To override the contents of this collection use [`set_associations`](Self::set_associations).
    ///
    /// <p>The associations between the route table and one or more subnets or a gateway.</p>
    pub fn associations(mut self, input: crate::types::RouteTableAssociation) -> Self {
        let mut v = self.associations.unwrap_or_default();
        v.push(input);
        self.associations = Some(v);
        self
    }
    /// <p>The associations between the route table and one or more subnets or a gateway.</p>
    pub fn set_associations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RouteTableAssociation>>,
    ) -> Self {
        self.associations = input;
        self
    }
    /// Appends an item to `propagating_vgws`.
    ///
    /// To override the contents of this collection use [`set_propagating_vgws`](Self::set_propagating_vgws).
    ///
    /// <p>Any virtual private gateway (VGW) propagating routes.</p>
    pub fn propagating_vgws(mut self, input: crate::types::PropagatingVgw) -> Self {
        let mut v = self.propagating_vgws.unwrap_or_default();
        v.push(input);
        self.propagating_vgws = Some(v);
        self
    }
    /// <p>Any virtual private gateway (VGW) propagating routes.</p>
    pub fn set_propagating_vgws(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PropagatingVgw>>,
    ) -> Self {
        self.propagating_vgws = input;
        self
    }
    /// <p>The ID of the route table.</p>
    pub fn route_table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.route_table_id = Some(input.into());
        self
    }
    /// <p>The ID of the route table.</p>
    pub fn set_route_table_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.route_table_id = input;
        self
    }
    /// Appends an item to `routes`.
    ///
    /// To override the contents of this collection use [`set_routes`](Self::set_routes).
    ///
    /// <p>The routes in the route table.</p>
    pub fn routes(mut self, input: crate::types::Route) -> Self {
        let mut v = self.routes.unwrap_or_default();
        v.push(input);
        self.routes = Some(v);
        self
    }
    /// <p>The routes in the route table.</p>
    pub fn set_routes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Route>>,
    ) -> Self {
        self.routes = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags assigned to the route table.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Any tags assigned to the route table.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the route table.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the route table.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RouteTable`](crate::types::RouteTable).
    pub fn build(self) -> crate::types::RouteTable {
        crate::types::RouteTable {
            associations: self.associations,
            propagating_vgws: self.propagating_vgws,
            route_table_id: self.route_table_id,
            routes: self.routes,
            tags: self.tags,
            vpc_id: self.vpc_id,
            owner_id: self.owner_id,
        }
    }
}
