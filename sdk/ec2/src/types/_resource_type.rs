// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ResourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcetype = unimplemented!();
/// match resourcetype {
///     ResourceType::CapacityReservation => { /* ... */ },
///     ResourceType::CapacityReservationFleet => { /* ... */ },
///     ResourceType::CarrierGateway => { /* ... */ },
///     ResourceType::ClientVpnEndpoint => { /* ... */ },
///     ResourceType::CoipPool => { /* ... */ },
///     ResourceType::CustomerGateway => { /* ... */ },
///     ResourceType::DedicatedHost => { /* ... */ },
///     ResourceType::DhcpOptions => { /* ... */ },
///     ResourceType::EgressOnlyInternetGateway => { /* ... */ },
///     ResourceType::ElasticGpu => { /* ... */ },
///     ResourceType::ElasticIp => { /* ... */ },
///     ResourceType::ExportImageTask => { /* ... */ },
///     ResourceType::ExportInstanceTask => { /* ... */ },
///     ResourceType::Fleet => { /* ... */ },
///     ResourceType::FpgaImage => { /* ... */ },
///     ResourceType::HostReservation => { /* ... */ },
///     ResourceType::Image => { /* ... */ },
///     ResourceType::ImportImageTask => { /* ... */ },
///     ResourceType::ImportSnapshotTask => { /* ... */ },
///     ResourceType::Instance => { /* ... */ },
///     ResourceType::InstanceEventWindow => { /* ... */ },
///     ResourceType::InternetGateway => { /* ... */ },
///     ResourceType::Ipam => { /* ... */ },
///     ResourceType::IpamPool => { /* ... */ },
///     ResourceType::IpamScope => { /* ... */ },
///     ResourceType::Ipv4poolEc2 => { /* ... */ },
///     ResourceType::Ipv6poolEc2 => { /* ... */ },
///     ResourceType::KeyPair => { /* ... */ },
///     ResourceType::LaunchTemplate => { /* ... */ },
///     ResourceType::LocalGateway => { /* ... */ },
///     ResourceType::LocalGatewayRouteTable => { /* ... */ },
///     ResourceType::LocalGatewayRouteTableVirtualInterfaceGroupAssociation => { /* ... */ },
///     ResourceType::LocalGatewayRouteTableVpcAssociation => { /* ... */ },
///     ResourceType::LocalGatewayVirtualInterface => { /* ... */ },
///     ResourceType::LocalGatewayVirtualInterfaceGroup => { /* ... */ },
///     ResourceType::Natgateway => { /* ... */ },
///     ResourceType::NetworkAcl => { /* ... */ },
///     ResourceType::NetworkInsightsAccessScope => { /* ... */ },
///     ResourceType::NetworkInsightsAccessScopeAnalysis => { /* ... */ },
///     ResourceType::NetworkInsightsAnalysis => { /* ... */ },
///     ResourceType::NetworkInsightsPath => { /* ... */ },
///     ResourceType::NetworkInterface => { /* ... */ },
///     ResourceType::PlacementGroup => { /* ... */ },
///     ResourceType::PrefixList => { /* ... */ },
///     ResourceType::ReplaceRootVolumeTask => { /* ... */ },
///     ResourceType::ReservedInstances => { /* ... */ },
///     ResourceType::RouteTable => { /* ... */ },
///     ResourceType::SecurityGroup => { /* ... */ },
///     ResourceType::SecurityGroupRule => { /* ... */ },
///     ResourceType::Snapshot => { /* ... */ },
///     ResourceType::SpotFleetRequest => { /* ... */ },
///     ResourceType::SpotInstancesRequest => { /* ... */ },
///     ResourceType::Subnet => { /* ... */ },
///     ResourceType::SubnetCidrReservation => { /* ... */ },
///     ResourceType::TrafficMirrorFilter => { /* ... */ },
///     ResourceType::TrafficMirrorFilterRule => { /* ... */ },
///     ResourceType::TrafficMirrorSession => { /* ... */ },
///     ResourceType::TrafficMirrorTarget => { /* ... */ },
///     ResourceType::TransitGateway => { /* ... */ },
///     ResourceType::TransitGatewayAttachment => { /* ... */ },
///     ResourceType::TransitGatewayConnectPeer => { /* ... */ },
///     ResourceType::TransitGatewayMulticastDomain => { /* ... */ },
///     ResourceType::TransitGatewayPolicyTable => { /* ... */ },
///     ResourceType::TransitGatewayRouteTable => { /* ... */ },
///     ResourceType::TransitGatewayRouteTableAnnouncement => { /* ... */ },
///     ResourceType::VerifiedAccessEndpoint => { /* ... */ },
///     ResourceType::VerifiedAccessGroup => { /* ... */ },
///     ResourceType::VerifiedAccessInstance => { /* ... */ },
///     ResourceType::VerifiedAccessPolicy => { /* ... */ },
///     ResourceType::VerifiedAccessTrustProvider => { /* ... */ },
///     ResourceType::Volume => { /* ... */ },
///     ResourceType::Vpc => { /* ... */ },
///     ResourceType::VpcBlockPublicAccessExclusion => { /* ... */ },
///     ResourceType::VpcEndpoint => { /* ... */ },
///     ResourceType::VpcEndpointConnection => { /* ... */ },
///     ResourceType::VpcEndpointConnectionDeviceType => { /* ... */ },
///     ResourceType::VpcEndpointService => { /* ... */ },
///     ResourceType::VpcEndpointServicePermission => { /* ... */ },
///     ResourceType::VpcFlowLog => { /* ... */ },
///     ResourceType::VpcPeeringConnection => { /* ... */ },
///     ResourceType::VpnConnection => { /* ... */ },
///     ResourceType::VpnConnectionDeviceType => { /* ... */ },
///     ResourceType::VpnGateway => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceType::NewFeature` is defined.
/// Specifically, when `resourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceType {
    #[allow(missing_docs)] // documentation missing in model
    CapacityReservation,
    #[allow(missing_docs)] // documentation missing in model
    CapacityReservationFleet,
    #[allow(missing_docs)] // documentation missing in model
    CarrierGateway,
    #[allow(missing_docs)] // documentation missing in model
    ClientVpnEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    CoipPool,
    #[allow(missing_docs)] // documentation missing in model
    CustomerGateway,
    #[allow(missing_docs)] // documentation missing in model
    DedicatedHost,
    #[allow(missing_docs)] // documentation missing in model
    DhcpOptions,
    #[allow(missing_docs)] // documentation missing in model
    EgressOnlyInternetGateway,
    #[allow(missing_docs)] // documentation missing in model
    ElasticGpu,
    #[allow(missing_docs)] // documentation missing in model
    ElasticIp,
    #[allow(missing_docs)] // documentation missing in model
    ExportImageTask,
    #[allow(missing_docs)] // documentation missing in model
    ExportInstanceTask,
    #[allow(missing_docs)] // documentation missing in model
    Fleet,
    #[allow(missing_docs)] // documentation missing in model
    FpgaImage,
    #[allow(missing_docs)] // documentation missing in model
    HostReservation,
    #[allow(missing_docs)] // documentation missing in model
    Image,
    #[allow(missing_docs)] // documentation missing in model
    ImportImageTask,
    #[allow(missing_docs)] // documentation missing in model
    ImportSnapshotTask,
    #[allow(missing_docs)] // documentation missing in model
    Instance,
    #[allow(missing_docs)] // documentation missing in model
    InstanceEventWindow,
    #[allow(missing_docs)] // documentation missing in model
    InternetGateway,
    #[allow(missing_docs)] // documentation missing in model
    Ipam,
    #[allow(missing_docs)] // documentation missing in model
    IpamPool,
    #[allow(missing_docs)] // documentation missing in model
    IpamScope,
    #[allow(missing_docs)] // documentation missing in model
    Ipv4poolEc2,
    #[allow(missing_docs)] // documentation missing in model
    Ipv6poolEc2,
    #[allow(missing_docs)] // documentation missing in model
    KeyPair,
    #[allow(missing_docs)] // documentation missing in model
    LaunchTemplate,
    #[allow(missing_docs)] // documentation missing in model
    LocalGateway,
    #[allow(missing_docs)] // documentation missing in model
    LocalGatewayRouteTable,
    #[allow(missing_docs)] // documentation missing in model
    LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
    #[allow(missing_docs)] // documentation missing in model
    LocalGatewayRouteTableVpcAssociation,
    #[allow(missing_docs)] // documentation missing in model
    LocalGatewayVirtualInterface,
    #[allow(missing_docs)] // documentation missing in model
    LocalGatewayVirtualInterfaceGroup,
    #[allow(missing_docs)] // documentation missing in model
    Natgateway,
    #[allow(missing_docs)] // documentation missing in model
    NetworkAcl,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInsightsAccessScope,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInsightsAccessScopeAnalysis,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInsightsAnalysis,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInsightsPath,
    #[allow(missing_docs)] // documentation missing in model
    NetworkInterface,
    #[allow(missing_docs)] // documentation missing in model
    PlacementGroup,
    #[allow(missing_docs)] // documentation missing in model
    PrefixList,
    #[allow(missing_docs)] // documentation missing in model
    ReplaceRootVolumeTask,
    #[allow(missing_docs)] // documentation missing in model
    ReservedInstances,
    #[allow(missing_docs)] // documentation missing in model
    RouteTable,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroup,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroupRule,
    #[allow(missing_docs)] // documentation missing in model
    Snapshot,
    #[allow(missing_docs)] // documentation missing in model
    SpotFleetRequest,
    #[allow(missing_docs)] // documentation missing in model
    SpotInstancesRequest,
    #[allow(missing_docs)] // documentation missing in model
    Subnet,
    #[allow(missing_docs)] // documentation missing in model
    SubnetCidrReservation,
    #[allow(missing_docs)] // documentation missing in model
    TrafficMirrorFilter,
    #[allow(missing_docs)] // documentation missing in model
    TrafficMirrorFilterRule,
    #[allow(missing_docs)] // documentation missing in model
    TrafficMirrorSession,
    #[allow(missing_docs)] // documentation missing in model
    TrafficMirrorTarget,
    #[allow(missing_docs)] // documentation missing in model
    TransitGateway,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayAttachment,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayConnectPeer,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayMulticastDomain,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayPolicyTable,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayRouteTable,
    #[allow(missing_docs)] // documentation missing in model
    TransitGatewayRouteTableAnnouncement,
    #[allow(missing_docs)] // documentation missing in model
    VerifiedAccessEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    VerifiedAccessGroup,
    #[allow(missing_docs)] // documentation missing in model
    VerifiedAccessInstance,
    #[allow(missing_docs)] // documentation missing in model
    VerifiedAccessPolicy,
    #[allow(missing_docs)] // documentation missing in model
    VerifiedAccessTrustProvider,
    #[allow(missing_docs)] // documentation missing in model
    Volume,
    #[allow(missing_docs)] // documentation missing in model
    Vpc,
    #[allow(missing_docs)] // documentation missing in model
    VpcBlockPublicAccessExclusion,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpointConnection,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpointConnectionDeviceType,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpointService,
    #[allow(missing_docs)] // documentation missing in model
    VpcEndpointServicePermission,
    #[allow(missing_docs)] // documentation missing in model
    VpcFlowLog,
    #[allow(missing_docs)] // documentation missing in model
    VpcPeeringConnection,
    #[allow(missing_docs)] // documentation missing in model
    VpnConnection,
    #[allow(missing_docs)] // documentation missing in model
    VpnConnectionDeviceType,
    #[allow(missing_docs)] // documentation missing in model
    VpnGateway,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceType {
    fn from(s: &str) -> Self {
        match s {
            "capacity-reservation" => ResourceType::CapacityReservation,
            "capacity-reservation-fleet" => ResourceType::CapacityReservationFleet,
            "carrier-gateway" => ResourceType::CarrierGateway,
            "client-vpn-endpoint" => ResourceType::ClientVpnEndpoint,
            "coip-pool" => ResourceType::CoipPool,
            "customer-gateway" => ResourceType::CustomerGateway,
            "dedicated-host" => ResourceType::DedicatedHost,
            "dhcp-options" => ResourceType::DhcpOptions,
            "egress-only-internet-gateway" => ResourceType::EgressOnlyInternetGateway,
            "elastic-gpu" => ResourceType::ElasticGpu,
            "elastic-ip" => ResourceType::ElasticIp,
            "export-image-task" => ResourceType::ExportImageTask,
            "export-instance-task" => ResourceType::ExportInstanceTask,
            "fleet" => ResourceType::Fleet,
            "fpga-image" => ResourceType::FpgaImage,
            "host-reservation" => ResourceType::HostReservation,
            "image" => ResourceType::Image,
            "import-image-task" => ResourceType::ImportImageTask,
            "import-snapshot-task" => ResourceType::ImportSnapshotTask,
            "instance" => ResourceType::Instance,
            "instance-event-window" => ResourceType::InstanceEventWindow,
            "internet-gateway" => ResourceType::InternetGateway,
            "ipam" => ResourceType::Ipam,
            "ipam-pool" => ResourceType::IpamPool,
            "ipam-scope" => ResourceType::IpamScope,
            "ipv4pool-ec2" => ResourceType::Ipv4poolEc2,
            "ipv6pool-ec2" => ResourceType::Ipv6poolEc2,
            "key-pair" => ResourceType::KeyPair,
            "launch-template" => ResourceType::LaunchTemplate,
            "local-gateway" => ResourceType::LocalGateway,
            "local-gateway-route-table" => ResourceType::LocalGatewayRouteTable,
            "local-gateway-route-table-virtual-interface-group-association" => {
                ResourceType::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
            }
            "local-gateway-route-table-vpc-association" => {
                ResourceType::LocalGatewayRouteTableVpcAssociation
            }
            "local-gateway-virtual-interface" => ResourceType::LocalGatewayVirtualInterface,
            "local-gateway-virtual-interface-group" => {
                ResourceType::LocalGatewayVirtualInterfaceGroup
            }
            "natgateway" => ResourceType::Natgateway,
            "network-acl" => ResourceType::NetworkAcl,
            "network-insights-access-scope" => ResourceType::NetworkInsightsAccessScope,
            "network-insights-access-scope-analysis" => {
                ResourceType::NetworkInsightsAccessScopeAnalysis
            }
            "network-insights-analysis" => ResourceType::NetworkInsightsAnalysis,
            "network-insights-path" => ResourceType::NetworkInsightsPath,
            "network-interface" => ResourceType::NetworkInterface,
            "placement-group" => ResourceType::PlacementGroup,
            "prefix-list" => ResourceType::PrefixList,
            "replace-root-volume-task" => ResourceType::ReplaceRootVolumeTask,
            "reserved-instances" => ResourceType::ReservedInstances,
            "route-table" => ResourceType::RouteTable,
            "security-group" => ResourceType::SecurityGroup,
            "security-group-rule" => ResourceType::SecurityGroupRule,
            "snapshot" => ResourceType::Snapshot,
            "spot-fleet-request" => ResourceType::SpotFleetRequest,
            "spot-instances-request" => ResourceType::SpotInstancesRequest,
            "subnet" => ResourceType::Subnet,
            "subnet-cidr-reservation" => ResourceType::SubnetCidrReservation,
            "traffic-mirror-filter" => ResourceType::TrafficMirrorFilter,
            "traffic-mirror-filter-rule" => ResourceType::TrafficMirrorFilterRule,
            "traffic-mirror-session" => ResourceType::TrafficMirrorSession,
            "traffic-mirror-target" => ResourceType::TrafficMirrorTarget,
            "transit-gateway" => ResourceType::TransitGateway,
            "transit-gateway-attachment" => ResourceType::TransitGatewayAttachment,
            "transit-gateway-connect-peer" => ResourceType::TransitGatewayConnectPeer,
            "transit-gateway-multicast-domain" => ResourceType::TransitGatewayMulticastDomain,
            "transit-gateway-policy-table" => ResourceType::TransitGatewayPolicyTable,
            "transit-gateway-route-table" => ResourceType::TransitGatewayRouteTable,
            "transit-gateway-route-table-announcement" => {
                ResourceType::TransitGatewayRouteTableAnnouncement
            }
            "verified-access-endpoint" => ResourceType::VerifiedAccessEndpoint,
            "verified-access-group" => ResourceType::VerifiedAccessGroup,
            "verified-access-instance" => ResourceType::VerifiedAccessInstance,
            "verified-access-policy" => ResourceType::VerifiedAccessPolicy,
            "verified-access-trust-provider" => ResourceType::VerifiedAccessTrustProvider,
            "volume" => ResourceType::Volume,
            "vpc" => ResourceType::Vpc,
            "vpc-block-public-access-exclusion" => ResourceType::VpcBlockPublicAccessExclusion,
            "vpc-endpoint" => ResourceType::VpcEndpoint,
            "vpc-endpoint-connection" => ResourceType::VpcEndpointConnection,
            "vpc-endpoint-connection-device-type" => ResourceType::VpcEndpointConnectionDeviceType,
            "vpc-endpoint-service" => ResourceType::VpcEndpointService,
            "vpc-endpoint-service-permission" => ResourceType::VpcEndpointServicePermission,
            "vpc-flow-log" => ResourceType::VpcFlowLog,
            "vpc-peering-connection" => ResourceType::VpcPeeringConnection,
            "vpn-connection" => ResourceType::VpnConnection,
            "vpn-connection-device-type" => ResourceType::VpnConnectionDeviceType,
            "vpn-gateway" => ResourceType::VpnGateway,
            other => {
                ResourceType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ResourceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceType::from(s))
    }
}
impl ResourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceType::CapacityReservation => "capacity-reservation",
            ResourceType::CapacityReservationFleet => "capacity-reservation-fleet",
            ResourceType::CarrierGateway => "carrier-gateway",
            ResourceType::ClientVpnEndpoint => "client-vpn-endpoint",
            ResourceType::CoipPool => "coip-pool",
            ResourceType::CustomerGateway => "customer-gateway",
            ResourceType::DedicatedHost => "dedicated-host",
            ResourceType::DhcpOptions => "dhcp-options",
            ResourceType::EgressOnlyInternetGateway => "egress-only-internet-gateway",
            ResourceType::ElasticGpu => "elastic-gpu",
            ResourceType::ElasticIp => "elastic-ip",
            ResourceType::ExportImageTask => "export-image-task",
            ResourceType::ExportInstanceTask => "export-instance-task",
            ResourceType::Fleet => "fleet",
            ResourceType::FpgaImage => "fpga-image",
            ResourceType::HostReservation => "host-reservation",
            ResourceType::Image => "image",
            ResourceType::ImportImageTask => "import-image-task",
            ResourceType::ImportSnapshotTask => "import-snapshot-task",
            ResourceType::Instance => "instance",
            ResourceType::InstanceEventWindow => "instance-event-window",
            ResourceType::InternetGateway => "internet-gateway",
            ResourceType::Ipam => "ipam",
            ResourceType::IpamPool => "ipam-pool",
            ResourceType::IpamScope => "ipam-scope",
            ResourceType::Ipv4poolEc2 => "ipv4pool-ec2",
            ResourceType::Ipv6poolEc2 => "ipv6pool-ec2",
            ResourceType::KeyPair => "key-pair",
            ResourceType::LaunchTemplate => "launch-template",
            ResourceType::LocalGateway => "local-gateway",
            ResourceType::LocalGatewayRouteTable => "local-gateway-route-table",
            ResourceType::LocalGatewayRouteTableVirtualInterfaceGroupAssociation => {
                "local-gateway-route-table-virtual-interface-group-association"
            }
            ResourceType::LocalGatewayRouteTableVpcAssociation => {
                "local-gateway-route-table-vpc-association"
            }
            ResourceType::LocalGatewayVirtualInterface => "local-gateway-virtual-interface",
            ResourceType::LocalGatewayVirtualInterfaceGroup => {
                "local-gateway-virtual-interface-group"
            }
            ResourceType::Natgateway => "natgateway",
            ResourceType::NetworkAcl => "network-acl",
            ResourceType::NetworkInsightsAccessScope => "network-insights-access-scope",
            ResourceType::NetworkInsightsAccessScopeAnalysis => {
                "network-insights-access-scope-analysis"
            }
            ResourceType::NetworkInsightsAnalysis => "network-insights-analysis",
            ResourceType::NetworkInsightsPath => "network-insights-path",
            ResourceType::NetworkInterface => "network-interface",
            ResourceType::PlacementGroup => "placement-group",
            ResourceType::PrefixList => "prefix-list",
            ResourceType::ReplaceRootVolumeTask => "replace-root-volume-task",
            ResourceType::ReservedInstances => "reserved-instances",
            ResourceType::RouteTable => "route-table",
            ResourceType::SecurityGroup => "security-group",
            ResourceType::SecurityGroupRule => "security-group-rule",
            ResourceType::Snapshot => "snapshot",
            ResourceType::SpotFleetRequest => "spot-fleet-request",
            ResourceType::SpotInstancesRequest => "spot-instances-request",
            ResourceType::Subnet => "subnet",
            ResourceType::SubnetCidrReservation => "subnet-cidr-reservation",
            ResourceType::TrafficMirrorFilter => "traffic-mirror-filter",
            ResourceType::TrafficMirrorFilterRule => "traffic-mirror-filter-rule",
            ResourceType::TrafficMirrorSession => "traffic-mirror-session",
            ResourceType::TrafficMirrorTarget => "traffic-mirror-target",
            ResourceType::TransitGateway => "transit-gateway",
            ResourceType::TransitGatewayAttachment => "transit-gateway-attachment",
            ResourceType::TransitGatewayConnectPeer => "transit-gateway-connect-peer",
            ResourceType::TransitGatewayMulticastDomain => "transit-gateway-multicast-domain",
            ResourceType::TransitGatewayPolicyTable => "transit-gateway-policy-table",
            ResourceType::TransitGatewayRouteTable => "transit-gateway-route-table",
            ResourceType::TransitGatewayRouteTableAnnouncement => {
                "transit-gateway-route-table-announcement"
            }
            ResourceType::VerifiedAccessEndpoint => "verified-access-endpoint",
            ResourceType::VerifiedAccessGroup => "verified-access-group",
            ResourceType::VerifiedAccessInstance => "verified-access-instance",
            ResourceType::VerifiedAccessPolicy => "verified-access-policy",
            ResourceType::VerifiedAccessTrustProvider => "verified-access-trust-provider",
            ResourceType::Volume => "volume",
            ResourceType::Vpc => "vpc",
            ResourceType::VpcBlockPublicAccessExclusion => "vpc-block-public-access-exclusion",
            ResourceType::VpcEndpoint => "vpc-endpoint",
            ResourceType::VpcEndpointConnection => "vpc-endpoint-connection",
            ResourceType::VpcEndpointConnectionDeviceType => "vpc-endpoint-connection-device-type",
            ResourceType::VpcEndpointService => "vpc-endpoint-service",
            ResourceType::VpcEndpointServicePermission => "vpc-endpoint-service-permission",
            ResourceType::VpcFlowLog => "vpc-flow-log",
            ResourceType::VpcPeeringConnection => "vpc-peering-connection",
            ResourceType::VpnConnection => "vpn-connection",
            ResourceType::VpnConnectionDeviceType => "vpn-connection-device-type",
            ResourceType::VpnGateway => "vpn-gateway",
            ResourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "capacity-reservation",
            "capacity-reservation-fleet",
            "carrier-gateway",
            "client-vpn-endpoint",
            "coip-pool",
            "customer-gateway",
            "dedicated-host",
            "dhcp-options",
            "egress-only-internet-gateway",
            "elastic-gpu",
            "elastic-ip",
            "export-image-task",
            "export-instance-task",
            "fleet",
            "fpga-image",
            "host-reservation",
            "image",
            "import-image-task",
            "import-snapshot-task",
            "instance",
            "instance-event-window",
            "internet-gateway",
            "ipam",
            "ipam-pool",
            "ipam-scope",
            "ipv4pool-ec2",
            "ipv6pool-ec2",
            "key-pair",
            "launch-template",
            "local-gateway",
            "local-gateway-route-table",
            "local-gateway-route-table-virtual-interface-group-association",
            "local-gateway-route-table-vpc-association",
            "local-gateway-virtual-interface",
            "local-gateway-virtual-interface-group",
            "natgateway",
            "network-acl",
            "network-insights-access-scope",
            "network-insights-access-scope-analysis",
            "network-insights-analysis",
            "network-insights-path",
            "network-interface",
            "placement-group",
            "prefix-list",
            "replace-root-volume-task",
            "reserved-instances",
            "route-table",
            "security-group",
            "security-group-rule",
            "snapshot",
            "spot-fleet-request",
            "spot-instances-request",
            "subnet",
            "subnet-cidr-reservation",
            "traffic-mirror-filter",
            "traffic-mirror-filter-rule",
            "traffic-mirror-session",
            "traffic-mirror-target",
            "transit-gateway",
            "transit-gateway-attachment",
            "transit-gateway-connect-peer",
            "transit-gateway-multicast-domain",
            "transit-gateway-policy-table",
            "transit-gateway-route-table",
            "transit-gateway-route-table-announcement",
            "verified-access-endpoint",
            "verified-access-group",
            "verified-access-instance",
            "verified-access-policy",
            "verified-access-trust-provider",
            "volume",
            "vpc",
            "vpc-block-public-access-exclusion",
            "vpc-endpoint",
            "vpc-endpoint-connection",
            "vpc-endpoint-connection-device-type",
            "vpc-endpoint-service",
            "vpc-endpoint-service-permission",
            "vpc-flow-log",
            "vpc-peering-connection",
            "vpn-connection",
            "vpn-connection-device-type",
            "vpn-gateway",
        ]
    }
}
impl AsRef<str> for ResourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
