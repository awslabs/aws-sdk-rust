// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes overrides for a launch template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FleetLaunchTemplateOverridesRequest {
    /// <p>The instance type.</p> <note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::InstanceType>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. </p> <important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    #[doc(hidden)]
    pub max_price: std::option::Option<std::string::String>,
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The Availability Zone in which to launch the instances.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The number of units provided by the specified instance type.</p>
    #[doc(hidden)]
    pub weighted_capacity: std::option::Option<f64>,
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    #[doc(hidden)]
    pub priority: std::option::Option<f64>,
    /// <p>The location where the instance launched, if applicable.</p>
    #[doc(hidden)]
    pub placement: std::option::Option<crate::types::Placement>,
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p> <note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub instance_requirements: std::option::Option<crate::types::InstanceRequirementsRequest>,
    /// <p>The ID of the AMI. An AMI is required to launch an instance. The AMI ID must be specified here or in the launch template.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
}
impl FleetLaunchTemplateOverridesRequest {
    /// <p>The instance type.</p> <note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn instance_type(&self) -> std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. </p> <important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    pub fn max_price(&self) -> std::option::Option<&str> {
        self.max_price.as_deref()
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The number of units provided by the specified instance type.</p>
    pub fn weighted_capacity(&self) -> std::option::Option<f64> {
        self.weighted_capacity
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn priority(&self) -> std::option::Option<f64> {
        self.priority
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn placement(&self) -> std::option::Option<&crate::types::Placement> {
        self.placement.as_ref()
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p> <note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn instance_requirements(
        &self,
    ) -> std::option::Option<&crate::types::InstanceRequirementsRequest> {
        self.instance_requirements.as_ref()
    }
    /// <p>The ID of the AMI. An AMI is required to launch an instance. The AMI ID must be specified here or in the launch template.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
}
impl FleetLaunchTemplateOverridesRequest {
    /// Creates a new builder-style object to manufacture [`FleetLaunchTemplateOverridesRequest`](crate::types::FleetLaunchTemplateOverridesRequest).
    pub fn builder() -> crate::types::builders::FleetLaunchTemplateOverridesRequestBuilder {
        crate::types::builders::FleetLaunchTemplateOverridesRequestBuilder::default()
    }
}

/// A builder for [`FleetLaunchTemplateOverridesRequest`](crate::types::FleetLaunchTemplateOverridesRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FleetLaunchTemplateOverridesRequestBuilder {
    pub(crate) instance_type: std::option::Option<crate::types::InstanceType>,
    pub(crate) max_price: std::option::Option<std::string::String>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) weighted_capacity: std::option::Option<f64>,
    pub(crate) priority: std::option::Option<f64>,
    pub(crate) placement: std::option::Option<crate::types::Placement>,
    pub(crate) instance_requirements:
        std::option::Option<crate::types::InstanceRequirementsRequest>,
    pub(crate) image_id: std::option::Option<std::string::String>,
}
impl FleetLaunchTemplateOverridesRequestBuilder {
    /// <p>The instance type.</p> <note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>The instance type.</p> <note>
    /// <p>If you specify <code>InstanceType</code>, you can't specify <code>InstanceRequirements</code>.</p>
    /// </note>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::InstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. </p> <important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    pub fn max_price(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_price = Some(input.into());
        self
    }
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price. </p> <important>
    /// <p>If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.</p>
    /// </important>
    pub fn set_max_price(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.max_price = input;
        self
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, <code>subnet-1234abcdeexample1, subnet-0987cdef6example2</code>). A request of type <code>instant</code> can have only one subnet ID.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The number of units provided by the specified instance type.</p>
    pub fn weighted_capacity(mut self, input: f64) -> Self {
        self.weighted_capacity = Some(input);
        self
    }
    /// <p>The number of units provided by the specified instance type.</p>
    pub fn set_weighted_capacity(mut self, input: std::option::Option<f64>) -> Self {
        self.weighted_capacity = input;
        self
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn priority(mut self, input: f64) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>The priority for the launch template override. The highest priority is launched first.</p>
    /// <p>If the On-Demand <code>AllocationStrategy</code> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.</p>
    /// <p>If the Spot <code>AllocationStrategy</code> is set to <code>capacity-optimized-prioritized</code>, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.</p>
    /// <p>Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.</p>
    pub fn set_priority(mut self, input: std::option::Option<f64>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn placement(mut self, input: crate::types::Placement) -> Self {
        self.placement = Some(input);
        self
    }
    /// <p>The location where the instance launched, if applicable.</p>
    pub fn set_placement(mut self, input: std::option::Option<crate::types::Placement>) -> Self {
        self.placement = input;
        self
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p> <note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn instance_requirements(
        mut self,
        input: crate::types::InstanceRequirementsRequest,
    ) -> Self {
        self.instance_requirements = Some(input);
        self
    }
    /// <p>The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.</p> <note>
    /// <p>If you specify <code>InstanceRequirements</code>, you can't specify <code>InstanceType</code>.</p>
    /// </note>
    pub fn set_instance_requirements(
        mut self,
        input: std::option::Option<crate::types::InstanceRequirementsRequest>,
    ) -> Self {
        self.instance_requirements = input;
        self
    }
    /// <p>The ID of the AMI. An AMI is required to launch an instance. The AMI ID must be specified here or in the launch template.</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_id = Some(input.into());
        self
    }
    /// <p>The ID of the AMI. An AMI is required to launch an instance. The AMI ID must be specified here or in the launch template.</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// Consumes the builder and constructs a [`FleetLaunchTemplateOverridesRequest`](crate::types::FleetLaunchTemplateOverridesRequest).
    pub fn build(self) -> crate::types::FleetLaunchTemplateOverridesRequest {
        crate::types::FleetLaunchTemplateOverridesRequest {
            instance_type: self.instance_type,
            max_price: self.max_price,
            subnet_id: self.subnet_id,
            availability_zone: self.availability_zone,
            weighted_capacity: self.weighted_capacity,
            priority: self.priority,
            placement: self.placement,
            instance_requirements: self.instance_requirements,
            image_id: self.image_id,
        }
    }
}
