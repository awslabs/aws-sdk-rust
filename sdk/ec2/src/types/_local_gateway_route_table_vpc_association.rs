// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an association between a local gateway route table and a VPC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LocalGatewayRouteTableVpcAssociation {
    /// <p>The ID of the association.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_vpc_association_id: std::option::Option<std::string::String>,
    /// <p>The ID of the local gateway route table.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the local gateway route table for the association.</p>
    #[doc(hidden)]
    pub local_gateway_route_table_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the local gateway.</p>
    #[doc(hidden)]
    pub local_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the local gateway route table for the association.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The state of the association.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The tags assigned to the association.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl LocalGatewayRouteTableVpcAssociation {
    /// <p>The ID of the association.</p>
    pub fn local_gateway_route_table_vpc_association_id(&self) -> std::option::Option<&str> {
        self.local_gateway_route_table_vpc_association_id.as_deref()
    }
    /// <p>The ID of the local gateway route table.</p>
    pub fn local_gateway_route_table_id(&self) -> std::option::Option<&str> {
        self.local_gateway_route_table_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the local gateway route table for the association.</p>
    pub fn local_gateway_route_table_arn(&self) -> std::option::Option<&str> {
        self.local_gateway_route_table_arn.as_deref()
    }
    /// <p>The ID of the local gateway.</p>
    pub fn local_gateway_id(&self) -> std::option::Option<&str> {
        self.local_gateway_id.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway route table for the association.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The state of the association.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The tags assigned to the association.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl LocalGatewayRouteTableVpcAssociation {
    /// Creates a new builder-style object to manufacture [`LocalGatewayRouteTableVpcAssociation`](crate::types::LocalGatewayRouteTableVpcAssociation).
    pub fn builder() -> crate::types::builders::LocalGatewayRouteTableVpcAssociationBuilder {
        crate::types::builders::LocalGatewayRouteTableVpcAssociationBuilder::default()
    }
}

/// A builder for [`LocalGatewayRouteTableVpcAssociation`](crate::types::LocalGatewayRouteTableVpcAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LocalGatewayRouteTableVpcAssociationBuilder {
    pub(crate) local_gateway_route_table_vpc_association_id:
        std::option::Option<std::string::String>,
    pub(crate) local_gateway_route_table_id: std::option::Option<std::string::String>,
    pub(crate) local_gateway_route_table_arn: std::option::Option<std::string::String>,
    pub(crate) local_gateway_id: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl LocalGatewayRouteTableVpcAssociationBuilder {
    /// <p>The ID of the association.</p>
    pub fn local_gateway_route_table_vpc_association_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.local_gateway_route_table_vpc_association_id = Some(input.into());
        self
    }
    /// <p>The ID of the association.</p>
    pub fn set_local_gateway_route_table_vpc_association_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.local_gateway_route_table_vpc_association_id = input;
        self
    }
    /// <p>The ID of the local gateway route table.</p>
    pub fn local_gateway_route_table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_gateway_route_table_id = Some(input.into());
        self
    }
    /// <p>The ID of the local gateway route table.</p>
    pub fn set_local_gateway_route_table_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.local_gateway_route_table_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the local gateway route table for the association.</p>
    pub fn local_gateway_route_table_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_gateway_route_table_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the local gateway route table for the association.</p>
    pub fn set_local_gateway_route_table_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.local_gateway_route_table_arn = input;
        self
    }
    /// <p>The ID of the local gateway.</p>
    pub fn local_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.local_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the local gateway.</p>
    pub fn set_local_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.local_gateway_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway route table for the association.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the local gateway route table for the association.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The state of the association.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of the association.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the association.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags assigned to the association.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`LocalGatewayRouteTableVpcAssociation`](crate::types::LocalGatewayRouteTableVpcAssociation).
    pub fn build(self) -> crate::types::LocalGatewayRouteTableVpcAssociation {
        crate::types::LocalGatewayRouteTableVpcAssociation {
            local_gateway_route_table_vpc_association_id: self
                .local_gateway_route_table_vpc_association_id,
            local_gateway_route_table_id: self.local_gateway_route_table_id,
            local_gateway_route_table_arn: self.local_gateway_route_table_arn,
            local_gateway_id: self.local_gateway_id,
            vpc_id: self.vpc_id,
            owner_id: self.owner_id,
            state: self.state,
            tags: self.tags,
        }
    }
}
