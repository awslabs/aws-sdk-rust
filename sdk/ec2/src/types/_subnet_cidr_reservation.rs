// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a subnet CIDR reservation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubnetCidrReservation {
    /// <p>The ID of the subnet CIDR reservation.</p>
    pub subnet_cidr_reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR that has been reserved.</p>
    pub cidr: ::std::option::Option<::std::string::String>,
    /// <p>The type of reservation. </p>
    pub reservation_type: ::std::option::Option<crate::types::SubnetCidrReservationType>,
    /// <p>The ID of the account that owns the subnet CIDR reservation. </p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The description assigned to the subnet CIDR reservation.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the subnet CIDR reservation.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl SubnetCidrReservation {
    /// <p>The ID of the subnet CIDR reservation.</p>
    pub fn subnet_cidr_reservation_id(&self) -> ::std::option::Option<&str> {
        self.subnet_cidr_reservation_id.as_deref()
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The CIDR that has been reserved.</p>
    pub fn cidr(&self) -> ::std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>The type of reservation. </p>
    pub fn reservation_type(&self) -> ::std::option::Option<&crate::types::SubnetCidrReservationType> {
        self.reservation_type.as_ref()
    }
    /// <p>The ID of the account that owns the subnet CIDR reservation. </p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The description assigned to the subnet CIDR reservation.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags assigned to the subnet CIDR reservation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl SubnetCidrReservation {
    /// Creates a new builder-style object to manufacture [`SubnetCidrReservation`](crate::types::SubnetCidrReservation).
    pub fn builder() -> crate::types::builders::SubnetCidrReservationBuilder {
        crate::types::builders::SubnetCidrReservationBuilder::default()
    }
}

/// A builder for [`SubnetCidrReservation`](crate::types::SubnetCidrReservation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SubnetCidrReservationBuilder {
    pub(crate) subnet_cidr_reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) cidr: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_type: ::std::option::Option<crate::types::SubnetCidrReservationType>,
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl SubnetCidrReservationBuilder {
    /// <p>The ID of the subnet CIDR reservation.</p>
    pub fn subnet_cidr_reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_cidr_reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet CIDR reservation.</p>
    pub fn set_subnet_cidr_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_cidr_reservation_id = input;
        self
    }
    /// <p>The ID of the subnet CIDR reservation.</p>
    pub fn get_subnet_cidr_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_cidr_reservation_id
    }
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The CIDR that has been reserved.</p>
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CIDR that has been reserved.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The CIDR that has been reserved.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr
    }
    /// <p>The type of reservation. </p>
    pub fn reservation_type(mut self, input: crate::types::SubnetCidrReservationType) -> Self {
        self.reservation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of reservation. </p>
    pub fn set_reservation_type(mut self, input: ::std::option::Option<crate::types::SubnetCidrReservationType>) -> Self {
        self.reservation_type = input;
        self
    }
    /// <p>The type of reservation. </p>
    pub fn get_reservation_type(&self) -> &::std::option::Option<crate::types::SubnetCidrReservationType> {
        &self.reservation_type
    }
    /// <p>The ID of the account that owns the subnet CIDR reservation. </p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account that owns the subnet CIDR reservation. </p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The ID of the account that owns the subnet CIDR reservation. </p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The description assigned to the subnet CIDR reservation.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description assigned to the subnet CIDR reservation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description assigned to the subnet CIDR reservation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the subnet CIDR reservation.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the subnet CIDR reservation.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the subnet CIDR reservation.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`SubnetCidrReservation`](crate::types::SubnetCidrReservation).
    pub fn build(self) -> crate::types::SubnetCidrReservation {
        crate::types::SubnetCidrReservation {
            subnet_cidr_reservation_id: self.subnet_cidr_reservation_id,
            subnet_id: self.subnet_id,
            cidr: self.cidr,
            reservation_type: self.reservation_type,
            owner_id: self.owner_id,
            description: self.description,
            tags: self.tags,
        }
    }
}
