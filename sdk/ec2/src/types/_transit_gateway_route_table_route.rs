// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a route in a transit gateway route table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransitGatewayRouteTableRoute {
    /// <p>The CIDR block used for destination matches.</p>
    #[doc(hidden)]
    pub destination_cidr: std::option::Option<std::string::String>,
    /// <p>The state of the route.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The route origin. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>static</p> </li>
    /// <li> <p>propagated</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub route_origin: std::option::Option<std::string::String>,
    /// <p>The ID of the prefix list.</p>
    #[doc(hidden)]
    pub prefix_list_id: std::option::Option<std::string::String>,
    /// <p>The ID of the route attachment.</p>
    #[doc(hidden)]
    pub attachment_id: std::option::Option<std::string::String>,
    /// <p>The ID of the resource for the route attachment.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The resource type for the route attachment.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
}
impl TransitGatewayRouteTableRoute {
    /// <p>The CIDR block used for destination matches.</p>
    pub fn destination_cidr(&self) -> std::option::Option<&str> {
        self.destination_cidr.as_deref()
    }
    /// <p>The state of the route.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The route origin. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>static</p> </li>
    /// <li> <p>propagated</p> </li>
    /// </ul>
    pub fn route_origin(&self) -> std::option::Option<&str> {
        self.route_origin.as_deref()
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(&self) -> std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The ID of the route attachment.</p>
    pub fn attachment_id(&self) -> std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>The ID of the resource for the route attachment.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The resource type for the route attachment.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
}
impl TransitGatewayRouteTableRoute {
    /// Creates a new builder-style object to manufacture [`TransitGatewayRouteTableRoute`](crate::types::TransitGatewayRouteTableRoute).
    pub fn builder() -> crate::types::builders::TransitGatewayRouteTableRouteBuilder {
        crate::types::builders::TransitGatewayRouteTableRouteBuilder::default()
    }
}

/// A builder for [`TransitGatewayRouteTableRoute`](crate::types::TransitGatewayRouteTableRoute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransitGatewayRouteTableRouteBuilder {
    pub(crate) destination_cidr: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) route_origin: std::option::Option<std::string::String>,
    pub(crate) prefix_list_id: std::option::Option<std::string::String>,
    pub(crate) attachment_id: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<std::string::String>,
}
impl TransitGatewayRouteTableRouteBuilder {
    /// <p>The CIDR block used for destination matches.</p>
    pub fn destination_cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_cidr = Some(input.into());
        self
    }
    /// <p>The CIDR block used for destination matches.</p>
    pub fn set_destination_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination_cidr = input;
        self
    }
    /// <p>The state of the route.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of the route.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The route origin. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>static</p> </li>
    /// <li> <p>propagated</p> </li>
    /// </ul>
    pub fn route_origin(mut self, input: impl Into<std::string::String>) -> Self {
        self.route_origin = Some(input.into());
        self
    }
    /// <p>The route origin. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>static</p> </li>
    /// <li> <p>propagated</p> </li>
    /// </ul>
    pub fn set_route_origin(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.route_origin = input;
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix_list_id = Some(input.into());
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn set_prefix_list_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the route attachment.</p>
    pub fn attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.attachment_id = Some(input.into());
        self
    }
    /// <p>The ID of the route attachment.</p>
    pub fn set_attachment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The ID of the resource for the route attachment.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The ID of the resource for the route attachment.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource type for the route attachment.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The resource type for the route attachment.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// Consumes the builder and constructs a [`TransitGatewayRouteTableRoute`](crate::types::TransitGatewayRouteTableRoute).
    pub fn build(self) -> crate::types::TransitGatewayRouteTableRoute {
        crate::types::TransitGatewayRouteTableRoute {
            destination_cidr: self.destination_cidr,
            state: self.state,
            route_origin: self.route_origin,
            prefix_list_id: self.prefix_list_id,
            attachment_id: self.attachment_id,
            resource_id: self.resource_id,
            resource_type: self.resource_type,
        }
    }
}
