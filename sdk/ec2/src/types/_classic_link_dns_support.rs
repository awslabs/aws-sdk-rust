// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the ClassicLink DNS support status of a VPC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClassicLinkDnsSupport {
    /// <p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
    #[doc(hidden)]
    pub classic_link_dns_supported: std::option::Option<bool>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
}
impl ClassicLinkDnsSupport {
    /// <p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
    pub fn classic_link_dns_supported(&self) -> std::option::Option<bool> {
        self.classic_link_dns_supported
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl ClassicLinkDnsSupport {
    /// Creates a new builder-style object to manufacture [`ClassicLinkDnsSupport`](crate::types::ClassicLinkDnsSupport).
    pub fn builder() -> crate::types::builders::ClassicLinkDnsSupportBuilder {
        crate::types::builders::ClassicLinkDnsSupportBuilder::default()
    }
}

/// A builder for [`ClassicLinkDnsSupport`](crate::types::ClassicLinkDnsSupport).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClassicLinkDnsSupportBuilder {
    pub(crate) classic_link_dns_supported: std::option::Option<bool>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
}
impl ClassicLinkDnsSupportBuilder {
    /// <p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
    pub fn classic_link_dns_supported(mut self, input: bool) -> Self {
        self.classic_link_dns_supported = Some(input);
        self
    }
    /// <p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
    pub fn set_classic_link_dns_supported(mut self, input: std::option::Option<bool>) -> Self {
        self.classic_link_dns_supported = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ClassicLinkDnsSupport`](crate::types::ClassicLinkDnsSupport).
    pub fn build(self) -> crate::types::ClassicLinkDnsSupport {
        crate::types::ClassicLinkDnsSupport {
            classic_link_dns_supported: self.classic_link_dns_supported,
            vpc_id: self.vpc_id,
        }
    }
}
