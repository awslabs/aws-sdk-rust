// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An IPAM resource discovery association. An associated resource discovery is a resource discovery that has been associated with an IPAM. IPAM aggregates the resource CIDRs discovered by the associated resource discovery.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamResourceDiscoveryAssociation {
    /// <p>The Amazon Web Services account ID of the resource discovery owner.</p>
    pub owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource discovery association ID.</p>
    pub ipam_resource_discovery_association_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource discovery association Amazon Resource Name (ARN).</p>
    pub ipam_resource_discovery_association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The resource discovery ID.</p>
    pub ipam_resource_discovery_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPAM ID.</p>
    pub ipam_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPAM ARN.</p>
    pub ipam_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IPAM home Region.</p>
    pub ipam_region: ::std::option::Option<::std::string::String>,
    /// <p>Defines if the resource discovery is the default. When you create an IPAM, a default resource discovery is created for your IPAM and it's associated with your IPAM.</p>
    pub is_default: ::std::option::Option<bool>,
    /// <p>The resource discovery status.</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Connection or permissions required to read the results of the resource discovery are intact.</p> </li>
    /// <li> <p> <code>not-found</code> - Connection or permissions required to read the results of the resource discovery are broken. This may happen if the owner of the resource discovery stopped sharing it or deleted the resource discovery. Verify the resource discovery still exists and the Amazon Web Services RAM resource share is still intact.</p> </li>
    /// </ul>
    pub resource_discovery_status: ::std::option::Option<crate::types::IpamAssociatedResourceDiscoveryStatus>,
    /// <p>The lifecycle state of the association when you associate or disassociate a resource discovery.</p>
    /// <ul>
    /// <li> <p> <code>associate-in-progress</code> - Resource discovery is being associated.</p> </li>
    /// <li> <p> <code>associate-complete</code> - Resource discovery association is complete.</p> </li>
    /// <li> <p> <code>associate-failed</code> - Resource discovery association has failed.</p> </li>
    /// <li> <p> <code>disassociate-in-progress</code> - Resource discovery is being disassociated.</p> </li>
    /// <li> <p> <code>disassociate-complete</code> - Resource discovery disassociation is complete.</p> </li>
    /// <li> <p> <code>disassociate-failed </code> - Resource discovery disassociation has failed.</p> </li>
    /// <li> <p> <code>isolate-in-progress</code> - Amazon Web Services account that created the resource discovery association has been removed and the resource discovery associatation is being isolated.</p> </li>
    /// <li> <p> <code>isolate-complete</code> - Resource discovery isolation is complete..</p> </li>
    /// <li> <p> <code>restore-in-progress</code> - Resource discovery is being restored.</p> </li>
    /// </ul>
    pub state: ::std::option::Option<crate::types::IpamResourceDiscoveryAssociationState>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl IpamResourceDiscoveryAssociation {
    /// <p>The Amazon Web Services account ID of the resource discovery owner.</p>
    pub fn owner_id(&self) -> ::std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The resource discovery association ID.</p>
    pub fn ipam_resource_discovery_association_id(&self) -> ::std::option::Option<&str> {
        self.ipam_resource_discovery_association_id.as_deref()
    }
    /// <p>The resource discovery association Amazon Resource Name (ARN).</p>
    pub fn ipam_resource_discovery_association_arn(&self) -> ::std::option::Option<&str> {
        self.ipam_resource_discovery_association_arn.as_deref()
    }
    /// <p>The resource discovery ID.</p>
    pub fn ipam_resource_discovery_id(&self) -> ::std::option::Option<&str> {
        self.ipam_resource_discovery_id.as_deref()
    }
    /// <p>The IPAM ID.</p>
    pub fn ipam_id(&self) -> ::std::option::Option<&str> {
        self.ipam_id.as_deref()
    }
    /// <p>The IPAM ARN.</p>
    pub fn ipam_arn(&self) -> ::std::option::Option<&str> {
        self.ipam_arn.as_deref()
    }
    /// <p>The IPAM home Region.</p>
    pub fn ipam_region(&self) -> ::std::option::Option<&str> {
        self.ipam_region.as_deref()
    }
    /// <p>Defines if the resource discovery is the default. When you create an IPAM, a default resource discovery is created for your IPAM and it's associated with your IPAM.</p>
    pub fn is_default(&self) -> ::std::option::Option<bool> {
        self.is_default
    }
    /// <p>The resource discovery status.</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Connection or permissions required to read the results of the resource discovery are intact.</p> </li>
    /// <li> <p> <code>not-found</code> - Connection or permissions required to read the results of the resource discovery are broken. This may happen if the owner of the resource discovery stopped sharing it or deleted the resource discovery. Verify the resource discovery still exists and the Amazon Web Services RAM resource share is still intact.</p> </li>
    /// </ul>
    pub fn resource_discovery_status(&self) -> ::std::option::Option<&crate::types::IpamAssociatedResourceDiscoveryStatus> {
        self.resource_discovery_status.as_ref()
    }
    /// <p>The lifecycle state of the association when you associate or disassociate a resource discovery.</p>
    /// <ul>
    /// <li> <p> <code>associate-in-progress</code> - Resource discovery is being associated.</p> </li>
    /// <li> <p> <code>associate-complete</code> - Resource discovery association is complete.</p> </li>
    /// <li> <p> <code>associate-failed</code> - Resource discovery association has failed.</p> </li>
    /// <li> <p> <code>disassociate-in-progress</code> - Resource discovery is being disassociated.</p> </li>
    /// <li> <p> <code>disassociate-complete</code> - Resource discovery disassociation is complete.</p> </li>
    /// <li> <p> <code>disassociate-failed </code> - Resource discovery disassociation has failed.</p> </li>
    /// <li> <p> <code>isolate-in-progress</code> - Amazon Web Services account that created the resource discovery association has been removed and the resource discovery associatation is being isolated.</p> </li>
    /// <li> <p> <code>isolate-complete</code> - Resource discovery isolation is complete..</p> </li>
    /// <li> <p> <code>restore-in-progress</code> - Resource discovery is being restored.</p> </li>
    /// </ul>
    pub fn state(&self) -> ::std::option::Option<&crate::types::IpamResourceDiscoveryAssociationState> {
        self.state.as_ref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl IpamResourceDiscoveryAssociation {
    /// Creates a new builder-style object to manufacture [`IpamResourceDiscoveryAssociation`](crate::types::IpamResourceDiscoveryAssociation).
    pub fn builder() -> crate::types::builders::IpamResourceDiscoveryAssociationBuilder {
        crate::types::builders::IpamResourceDiscoveryAssociationBuilder::default()
    }
}

/// A builder for [`IpamResourceDiscoveryAssociation`](crate::types::IpamResourceDiscoveryAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IpamResourceDiscoveryAssociationBuilder {
    pub(crate) owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_resource_discovery_association_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_resource_discovery_association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_resource_discovery_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_region: ::std::option::Option<::std::string::String>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) resource_discovery_status: ::std::option::Option<crate::types::IpamAssociatedResourceDiscoveryStatus>,
    pub(crate) state: ::std::option::Option<crate::types::IpamResourceDiscoveryAssociationState>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl IpamResourceDiscoveryAssociationBuilder {
    /// <p>The Amazon Web Services account ID of the resource discovery owner.</p>
    pub fn owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the resource discovery owner.</p>
    pub fn set_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the resource discovery owner.</p>
    pub fn get_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner_id
    }
    /// <p>The resource discovery association ID.</p>
    pub fn ipam_resource_discovery_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_resource_discovery_association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource discovery association ID.</p>
    pub fn set_ipam_resource_discovery_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_resource_discovery_association_id = input;
        self
    }
    /// <p>The resource discovery association ID.</p>
    pub fn get_ipam_resource_discovery_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_resource_discovery_association_id
    }
    /// <p>The resource discovery association Amazon Resource Name (ARN).</p>
    pub fn ipam_resource_discovery_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_resource_discovery_association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource discovery association Amazon Resource Name (ARN).</p>
    pub fn set_ipam_resource_discovery_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_resource_discovery_association_arn = input;
        self
    }
    /// <p>The resource discovery association Amazon Resource Name (ARN).</p>
    pub fn get_ipam_resource_discovery_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_resource_discovery_association_arn
    }
    /// <p>The resource discovery ID.</p>
    pub fn ipam_resource_discovery_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_resource_discovery_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource discovery ID.</p>
    pub fn set_ipam_resource_discovery_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_resource_discovery_id = input;
        self
    }
    /// <p>The resource discovery ID.</p>
    pub fn get_ipam_resource_discovery_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_resource_discovery_id
    }
    /// <p>The IPAM ID.</p>
    pub fn ipam_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPAM ID.</p>
    pub fn set_ipam_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_id = input;
        self
    }
    /// <p>The IPAM ID.</p>
    pub fn get_ipam_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_id
    }
    /// <p>The IPAM ARN.</p>
    pub fn ipam_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPAM ARN.</p>
    pub fn set_ipam_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_arn = input;
        self
    }
    /// <p>The IPAM ARN.</p>
    pub fn get_ipam_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_arn
    }
    /// <p>The IPAM home Region.</p>
    pub fn ipam_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPAM home Region.</p>
    pub fn set_ipam_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_region = input;
        self
    }
    /// <p>The IPAM home Region.</p>
    pub fn get_ipam_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_region
    }
    /// <p>Defines if the resource discovery is the default. When you create an IPAM, a default resource discovery is created for your IPAM and it's associated with your IPAM.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines if the resource discovery is the default. When you create an IPAM, a default resource discovery is created for your IPAM and it's associated with your IPAM.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>Defines if the resource discovery is the default. When you create an IPAM, a default resource discovery is created for your IPAM and it's associated with your IPAM.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>The resource discovery status.</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Connection or permissions required to read the results of the resource discovery are intact.</p> </li>
    /// <li> <p> <code>not-found</code> - Connection or permissions required to read the results of the resource discovery are broken. This may happen if the owner of the resource discovery stopped sharing it or deleted the resource discovery. Verify the resource discovery still exists and the Amazon Web Services RAM resource share is still intact.</p> </li>
    /// </ul>
    pub fn resource_discovery_status(mut self, input: crate::types::IpamAssociatedResourceDiscoveryStatus) -> Self {
        self.resource_discovery_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource discovery status.</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Connection or permissions required to read the results of the resource discovery are intact.</p> </li>
    /// <li> <p> <code>not-found</code> - Connection or permissions required to read the results of the resource discovery are broken. This may happen if the owner of the resource discovery stopped sharing it or deleted the resource discovery. Verify the resource discovery still exists and the Amazon Web Services RAM resource share is still intact.</p> </li>
    /// </ul>
    pub fn set_resource_discovery_status(mut self, input: ::std::option::Option<crate::types::IpamAssociatedResourceDiscoveryStatus>) -> Self {
        self.resource_discovery_status = input;
        self
    }
    /// <p>The resource discovery status.</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Connection or permissions required to read the results of the resource discovery are intact.</p> </li>
    /// <li> <p> <code>not-found</code> - Connection or permissions required to read the results of the resource discovery are broken. This may happen if the owner of the resource discovery stopped sharing it or deleted the resource discovery. Verify the resource discovery still exists and the Amazon Web Services RAM resource share is still intact.</p> </li>
    /// </ul>
    pub fn get_resource_discovery_status(&self) -> &::std::option::Option<crate::types::IpamAssociatedResourceDiscoveryStatus> {
        &self.resource_discovery_status
    }
    /// <p>The lifecycle state of the association when you associate or disassociate a resource discovery.</p>
    /// <ul>
    /// <li> <p> <code>associate-in-progress</code> - Resource discovery is being associated.</p> </li>
    /// <li> <p> <code>associate-complete</code> - Resource discovery association is complete.</p> </li>
    /// <li> <p> <code>associate-failed</code> - Resource discovery association has failed.</p> </li>
    /// <li> <p> <code>disassociate-in-progress</code> - Resource discovery is being disassociated.</p> </li>
    /// <li> <p> <code>disassociate-complete</code> - Resource discovery disassociation is complete.</p> </li>
    /// <li> <p> <code>disassociate-failed </code> - Resource discovery disassociation has failed.</p> </li>
    /// <li> <p> <code>isolate-in-progress</code> - Amazon Web Services account that created the resource discovery association has been removed and the resource discovery associatation is being isolated.</p> </li>
    /// <li> <p> <code>isolate-complete</code> - Resource discovery isolation is complete..</p> </li>
    /// <li> <p> <code>restore-in-progress</code> - Resource discovery is being restored.</p> </li>
    /// </ul>
    pub fn state(mut self, input: crate::types::IpamResourceDiscoveryAssociationState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle state of the association when you associate or disassociate a resource discovery.</p>
    /// <ul>
    /// <li> <p> <code>associate-in-progress</code> - Resource discovery is being associated.</p> </li>
    /// <li> <p> <code>associate-complete</code> - Resource discovery association is complete.</p> </li>
    /// <li> <p> <code>associate-failed</code> - Resource discovery association has failed.</p> </li>
    /// <li> <p> <code>disassociate-in-progress</code> - Resource discovery is being disassociated.</p> </li>
    /// <li> <p> <code>disassociate-complete</code> - Resource discovery disassociation is complete.</p> </li>
    /// <li> <p> <code>disassociate-failed </code> - Resource discovery disassociation has failed.</p> </li>
    /// <li> <p> <code>isolate-in-progress</code> - Amazon Web Services account that created the resource discovery association has been removed and the resource discovery associatation is being isolated.</p> </li>
    /// <li> <p> <code>isolate-complete</code> - Resource discovery isolation is complete..</p> </li>
    /// <li> <p> <code>restore-in-progress</code> - Resource discovery is being restored.</p> </li>
    /// </ul>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::IpamResourceDiscoveryAssociationState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The lifecycle state of the association when you associate or disassociate a resource discovery.</p>
    /// <ul>
    /// <li> <p> <code>associate-in-progress</code> - Resource discovery is being associated.</p> </li>
    /// <li> <p> <code>associate-complete</code> - Resource discovery association is complete.</p> </li>
    /// <li> <p> <code>associate-failed</code> - Resource discovery association has failed.</p> </li>
    /// <li> <p> <code>disassociate-in-progress</code> - Resource discovery is being disassociated.</p> </li>
    /// <li> <p> <code>disassociate-complete</code> - Resource discovery disassociation is complete.</p> </li>
    /// <li> <p> <code>disassociate-failed </code> - Resource discovery disassociation has failed.</p> </li>
    /// <li> <p> <code>isolate-in-progress</code> - Amazon Web Services account that created the resource discovery association has been removed and the resource discovery associatation is being isolated.</p> </li>
    /// <li> <p> <code>isolate-complete</code> - Resource discovery isolation is complete..</p> </li>
    /// <li> <p> <code>restore-in-progress</code> - Resource discovery is being restored.</p> </li>
    /// </ul>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::IpamResourceDiscoveryAssociationState> {
        &self.state
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`IpamResourceDiscoveryAssociation`](crate::types::IpamResourceDiscoveryAssociation).
    pub fn build(self) -> crate::types::IpamResourceDiscoveryAssociation {
        crate::types::IpamResourceDiscoveryAssociation {
            owner_id: self.owner_id,
            ipam_resource_discovery_association_id: self.ipam_resource_discovery_association_id,
            ipam_resource_discovery_association_arn: self.ipam_resource_discovery_association_arn,
            ipam_resource_discovery_id: self.ipam_resource_discovery_id,
            ipam_id: self.ipam_id,
            ipam_arn: self.ipam_arn,
            ipam_region: self.ipam_region,
            is_default: self.is_default,
            resource_discovery_status: self.resource_discovery_status,
            state: self.state,
            tags: self.tags,
        }
    }
}
