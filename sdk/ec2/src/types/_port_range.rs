// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a range of ports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortRange {
    /// <p>The first port in the range.</p>
    #[doc(hidden)]
    pub from: std::option::Option<i32>,
    /// <p>The last port in the range.</p>
    #[doc(hidden)]
    pub to: std::option::Option<i32>,
}
impl PortRange {
    /// <p>The first port in the range.</p>
    pub fn from(&self) -> std::option::Option<i32> {
        self.from
    }
    /// <p>The last port in the range.</p>
    pub fn to(&self) -> std::option::Option<i32> {
        self.to
    }
}
impl PortRange {
    /// Creates a new builder-style object to manufacture [`PortRange`](crate::types::PortRange).
    pub fn builder() -> crate::types::builders::PortRangeBuilder {
        crate::types::builders::PortRangeBuilder::default()
    }
}

/// A builder for [`PortRange`](crate::types::PortRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortRangeBuilder {
    pub(crate) from: std::option::Option<i32>,
    pub(crate) to: std::option::Option<i32>,
}
impl PortRangeBuilder {
    /// <p>The first port in the range.</p>
    pub fn from(mut self, input: i32) -> Self {
        self.from = Some(input);
        self
    }
    /// <p>The first port in the range.</p>
    pub fn set_from(mut self, input: std::option::Option<i32>) -> Self {
        self.from = input;
        self
    }
    /// <p>The last port in the range.</p>
    pub fn to(mut self, input: i32) -> Self {
        self.to = Some(input);
        self
    }
    /// <p>The last port in the range.</p>
    pub fn set_to(mut self, input: std::option::Option<i32>) -> Self {
        self.to = input;
        self
    }
    /// Consumes the builder and constructs a [`PortRange`](crate::types::PortRange).
    pub fn build(self) -> crate::types::PortRange {
        crate::types::PortRange {
            from: self.from,
            to: self.to,
        }
    }
}
