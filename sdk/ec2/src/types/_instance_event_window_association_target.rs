// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One or more targets associated with the event window.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceEventWindowAssociationTarget {
    /// <p>The IDs of the instances associated with the event window.</p>
    pub instance_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The IDs of the Dedicated Hosts associated with the event window.</p>
    pub dedicated_host_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InstanceEventWindowAssociationTarget {
    /// <p>The IDs of the instances associated with the event window.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_ids.is_none()`.
    pub fn instance_ids(&self) -> &[::std::string::String] {
        self.instance_ids.as_deref().unwrap_or_default()
    }
    /// <p>The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The IDs of the Dedicated Hosts associated with the event window.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dedicated_host_ids.is_none()`.
    pub fn dedicated_host_ids(&self) -> &[::std::string::String] {
        self.dedicated_host_ids.as_deref().unwrap_or_default()
    }
}
impl InstanceEventWindowAssociationTarget {
    /// Creates a new builder-style object to manufacture [`InstanceEventWindowAssociationTarget`](crate::types::InstanceEventWindowAssociationTarget).
    pub fn builder() -> crate::types::builders::InstanceEventWindowAssociationTargetBuilder {
        crate::types::builders::InstanceEventWindowAssociationTargetBuilder::default()
    }
}

/// A builder for [`InstanceEventWindowAssociationTarget`](crate::types::InstanceEventWindowAssociationTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstanceEventWindowAssociationTargetBuilder {
    pub(crate) instance_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) dedicated_host_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InstanceEventWindowAssociationTargetBuilder {
    /// Appends an item to `instance_ids`.
    ///
    /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
    ///
    /// <p>The IDs of the instances associated with the event window.</p>
    pub fn instance_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_ids.unwrap_or_default();
        v.push(input.into());
        self.instance_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the instances associated with the event window.</p>
    pub fn set_instance_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_ids = input;
        self
    }
    /// <p>The IDs of the instances associated with the event window.</p>
    pub fn get_instance_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_ids
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Appends an item to `dedicated_host_ids`.
    ///
    /// To override the contents of this collection use [`set_dedicated_host_ids`](Self::set_dedicated_host_ids).
    ///
    /// <p>The IDs of the Dedicated Hosts associated with the event window.</p>
    pub fn dedicated_host_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dedicated_host_ids.unwrap_or_default();
        v.push(input.into());
        self.dedicated_host_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the Dedicated Hosts associated with the event window.</p>
    pub fn set_dedicated_host_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dedicated_host_ids = input;
        self
    }
    /// <p>The IDs of the Dedicated Hosts associated with the event window.</p>
    pub fn get_dedicated_host_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dedicated_host_ids
    }
    /// Consumes the builder and constructs a [`InstanceEventWindowAssociationTarget`](crate::types::InstanceEventWindowAssociationTarget).
    pub fn build(self) -> crate::types::InstanceEventWindowAssociationTarget {
        crate::types::InstanceEventWindowAssociationTarget {
            instance_ids: self.instance_ids,
            tags: self.tags,
            dedicated_host_ids: self.dedicated_host_ids,
        }
    }
}
