// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The tags to apply to the AMI object that will be stored in the Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html">Categorizing your storage using tags</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3ObjectTag {
    /// <p>The key of the tag.</p>
    /// <p>Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in length. May not begin with <code>aws</code>:.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The value of the tag.</p>
    /// <p>Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in length.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl S3ObjectTag {
    /// <p>The key of the tag.</p>
    /// <p>Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in length. May not begin with <code>aws</code>:.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The value of the tag.</p>
    /// <p>Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in length.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl S3ObjectTag {
    /// Creates a new builder-style object to manufacture [`S3ObjectTag`](crate::types::S3ObjectTag).
    pub fn builder() -> crate::types::builders::S3ObjectTagBuilder {
        crate::types::builders::S3ObjectTagBuilder::default()
    }
}

/// A builder for [`S3ObjectTag`](crate::types::S3ObjectTag).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ObjectTagBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl S3ObjectTagBuilder {
    /// <p>The key of the tag.</p>
    /// <p>Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in length. May not begin with <code>aws</code>:.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key of the tag.</p>
    /// <p>Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in length. May not begin with <code>aws</code>:.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The value of the tag.</p>
    /// <p>Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in length.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the tag.</p>
    /// <p>Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in length.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`S3ObjectTag`](crate::types::S3ObjectTag).
    pub fn build(self) -> crate::types::S3ObjectTag {
        crate::types::S3ObjectTag {
            key: self.key,
            value: self.value,
        }
    }
}
