// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these Classic Load Balancers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClassicLoadBalancersConfig {
    /// <p>One or more Classic Load Balancers.</p>
    pub classic_load_balancers: ::std::option::Option<::std::vec::Vec<crate::types::ClassicLoadBalancer>>,
}
impl ClassicLoadBalancersConfig {
    /// <p>One or more Classic Load Balancers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.classic_load_balancers.is_none()`.
    pub fn classic_load_balancers(&self) -> &[crate::types::ClassicLoadBalancer] {
        self.classic_load_balancers.as_deref().unwrap_or_default()
    }
}
impl ClassicLoadBalancersConfig {
    /// Creates a new builder-style object to manufacture [`ClassicLoadBalancersConfig`](crate::types::ClassicLoadBalancersConfig).
    pub fn builder() -> crate::types::builders::ClassicLoadBalancersConfigBuilder {
        crate::types::builders::ClassicLoadBalancersConfigBuilder::default()
    }
}

/// A builder for [`ClassicLoadBalancersConfig`](crate::types::ClassicLoadBalancersConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClassicLoadBalancersConfigBuilder {
    pub(crate) classic_load_balancers: ::std::option::Option<::std::vec::Vec<crate::types::ClassicLoadBalancer>>,
}
impl ClassicLoadBalancersConfigBuilder {
    /// Appends an item to `classic_load_balancers`.
    ///
    /// To override the contents of this collection use [`set_classic_load_balancers`](Self::set_classic_load_balancers).
    ///
    /// <p>One or more Classic Load Balancers.</p>
    pub fn classic_load_balancers(mut self, input: crate::types::ClassicLoadBalancer) -> Self {
        let mut v = self.classic_load_balancers.unwrap_or_default();
        v.push(input);
        self.classic_load_balancers = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more Classic Load Balancers.</p>
    pub fn set_classic_load_balancers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClassicLoadBalancer>>) -> Self {
        self.classic_load_balancers = input;
        self
    }
    /// <p>One or more Classic Load Balancers.</p>
    pub fn get_classic_load_balancers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClassicLoadBalancer>> {
        &self.classic_load_balancers
    }
    /// Consumes the builder and constructs a [`ClassicLoadBalancersConfig`](crate::types::ClassicLoadBalancersConfig).
    pub fn build(self) -> crate::types::ClassicLoadBalancersConfig {
        crate::types::ClassicLoadBalancersConfig {
            classic_load_balancers: self.classic_load_balancers,
        }
    }
}
