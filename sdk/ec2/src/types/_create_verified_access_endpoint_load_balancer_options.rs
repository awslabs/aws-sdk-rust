// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a load balancer when creating an Amazon Web Services Verified Access endpoint using the <code>load-balancer</code> type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVerifiedAccessEndpointLoadBalancerOptions {
    /// <p>The IP protocol.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<crate::types::VerifiedAccessEndpointProtocol>,
    /// <p>The IP port number.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
    /// <p>The ARN of the load balancer.</p>
    #[doc(hidden)]
    pub load_balancer_arn: std::option::Option<std::string::String>,
    /// <p>The IDs of the subnets.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateVerifiedAccessEndpointLoadBalancerOptions {
    /// <p>The IP protocol.</p>
    pub fn protocol(&self) -> std::option::Option<&crate::types::VerifiedAccessEndpointProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The IP port number.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
    /// <p>The ARN of the load balancer.</p>
    pub fn load_balancer_arn(&self) -> std::option::Option<&str> {
        self.load_balancer_arn.as_deref()
    }
    /// <p>The IDs of the subnets.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
}
impl CreateVerifiedAccessEndpointLoadBalancerOptions {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessEndpointLoadBalancerOptions`](crate::types::CreateVerifiedAccessEndpointLoadBalancerOptions).
    pub fn builder(
    ) -> crate::types::builders::CreateVerifiedAccessEndpointLoadBalancerOptionsBuilder {
        crate::types::builders::CreateVerifiedAccessEndpointLoadBalancerOptionsBuilder::default()
    }
}

/// A builder for [`CreateVerifiedAccessEndpointLoadBalancerOptions`](crate::types::CreateVerifiedAccessEndpointLoadBalancerOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateVerifiedAccessEndpointLoadBalancerOptionsBuilder {
    pub(crate) protocol: std::option::Option<crate::types::VerifiedAccessEndpointProtocol>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) load_balancer_arn: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CreateVerifiedAccessEndpointLoadBalancerOptionsBuilder {
    /// <p>The IP protocol.</p>
    pub fn protocol(mut self, input: crate::types::VerifiedAccessEndpointProtocol) -> Self {
        self.protocol = Some(input);
        self
    }
    /// <p>The IP protocol.</p>
    pub fn set_protocol(
        mut self,
        input: std::option::Option<crate::types::VerifiedAccessEndpointProtocol>,
    ) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The IP port number.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The IP port number.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The ARN of the load balancer.</p>
    pub fn load_balancer_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.load_balancer_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the load balancer.</p>
    pub fn set_load_balancer_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.load_balancer_arn = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The IDs of the subnets.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The IDs of the subnets.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateVerifiedAccessEndpointLoadBalancerOptions`](crate::types::CreateVerifiedAccessEndpointLoadBalancerOptions).
    pub fn build(self) -> crate::types::CreateVerifiedAccessEndpointLoadBalancerOptions {
        crate::types::CreateVerifiedAccessEndpointLoadBalancerOptions {
            protocol: self.protocol,
            port: self.port,
            load_balancer_arn: self.load_balancer_arn,
            subnet_ids: self.subnet_ids,
        }
    }
}
