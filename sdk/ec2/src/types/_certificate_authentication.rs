// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the client certificate used for authentication.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CertificateAuthentication {
    /// <p>The ARN of the client certificate. </p>
    #[doc(hidden)]
    pub client_root_certificate_chain: std::option::Option<std::string::String>,
}
impl CertificateAuthentication {
    /// <p>The ARN of the client certificate. </p>
    pub fn client_root_certificate_chain(&self) -> std::option::Option<&str> {
        self.client_root_certificate_chain.as_deref()
    }
}
impl CertificateAuthentication {
    /// Creates a new builder-style object to manufacture [`CertificateAuthentication`](crate::types::CertificateAuthentication).
    pub fn builder() -> crate::types::builders::CertificateAuthenticationBuilder {
        crate::types::builders::CertificateAuthenticationBuilder::default()
    }
}

/// A builder for [`CertificateAuthentication`](crate::types::CertificateAuthentication).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CertificateAuthenticationBuilder {
    pub(crate) client_root_certificate_chain: std::option::Option<std::string::String>,
}
impl CertificateAuthenticationBuilder {
    /// <p>The ARN of the client certificate. </p>
    pub fn client_root_certificate_chain(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_root_certificate_chain = Some(input.into());
        self
    }
    /// <p>The ARN of the client certificate. </p>
    pub fn set_client_root_certificate_chain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_root_certificate_chain = input;
        self
    }
    /// Consumes the builder and constructs a [`CertificateAuthentication`](crate::types::CertificateAuthentication).
    pub fn build(self) -> crate::types::CertificateAuthentication {
        crate::types::CertificateAuthentication {
            client_root_certificate_chain: self.client_root_certificate_chain,
        }
    }
}
