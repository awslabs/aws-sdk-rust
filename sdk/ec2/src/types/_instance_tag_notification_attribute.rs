// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the registered tag keys for the current Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceTagNotificationAttribute {
    /// <p>The registered tag keys.</p>
    pub instance_tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. <code>true</code> indicates that all tag keys in the current Region are registered.</p>
    pub include_all_tags_of_instance: ::std::option::Option<bool>,
}
impl InstanceTagNotificationAttribute {
    /// <p>The registered tag keys.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_tag_keys.is_none()`.
    pub fn instance_tag_keys(&self) -> &[::std::string::String] {
        self.instance_tag_keys.as_deref().unwrap_or_default()
    }
    /// <p>Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. <code>true</code> indicates that all tag keys in the current Region are registered.</p>
    pub fn include_all_tags_of_instance(&self) -> ::std::option::Option<bool> {
        self.include_all_tags_of_instance
    }
}
impl InstanceTagNotificationAttribute {
    /// Creates a new builder-style object to manufacture [`InstanceTagNotificationAttribute`](crate::types::InstanceTagNotificationAttribute).
    pub fn builder() -> crate::types::builders::InstanceTagNotificationAttributeBuilder {
        crate::types::builders::InstanceTagNotificationAttributeBuilder::default()
    }
}

/// A builder for [`InstanceTagNotificationAttribute`](crate::types::InstanceTagNotificationAttribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstanceTagNotificationAttributeBuilder {
    pub(crate) instance_tag_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) include_all_tags_of_instance: ::std::option::Option<bool>,
}
impl InstanceTagNotificationAttributeBuilder {
    /// Appends an item to `instance_tag_keys`.
    ///
    /// To override the contents of this collection use [`set_instance_tag_keys`](Self::set_instance_tag_keys).
    ///
    /// <p>The registered tag keys.</p>
    pub fn instance_tag_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_tag_keys.unwrap_or_default();
        v.push(input.into());
        self.instance_tag_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The registered tag keys.</p>
    pub fn set_instance_tag_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_tag_keys = input;
        self
    }
    /// <p>The registered tag keys.</p>
    pub fn get_instance_tag_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_tag_keys
    }
    /// <p>Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. <code>true</code> indicates that all tag keys in the current Region are registered.</p>
    pub fn include_all_tags_of_instance(mut self, input: bool) -> Self {
        self.include_all_tags_of_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. <code>true</code> indicates that all tag keys in the current Region are registered.</p>
    pub fn set_include_all_tags_of_instance(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_all_tags_of_instance = input;
        self
    }
    /// <p>Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. <code>true</code> indicates that all tag keys in the current Region are registered.</p>
    pub fn get_include_all_tags_of_instance(&self) -> &::std::option::Option<bool> {
        &self.include_all_tags_of_instance
    }
    /// Consumes the builder and constructs a [`InstanceTagNotificationAttribute`](crate::types::InstanceTagNotificationAttribute).
    pub fn build(self) -> crate::types::InstanceTagNotificationAttribute {
        crate::types::InstanceTagNotificationAttribute {
            instance_tag_keys: self.instance_tag_keys,
            include_all_tags_of_instance: self.include_all_tags_of_instance,
        }
    }
}
