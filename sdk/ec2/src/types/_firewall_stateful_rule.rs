// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a stateful rule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FirewallStatefulRule {
    /// <p>The ARN of the stateful rule group.</p>
    pub rule_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The source IP addresses, in CIDR notation.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The destination IP addresses, in CIDR notation.</p>
    pub destinations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The source ports.</p>
    pub source_ports: ::std::option::Option<::std::vec::Vec<crate::types::PortRange>>,
    /// <p>The destination ports.</p>
    pub destination_ports: ::std::option::Option<::std::vec::Vec<crate::types::PortRange>>,
    /// <p>The protocol.</p>
    pub protocol: ::std::option::Option<::std::string::String>,
    /// <p>The rule action. The possible values are <code>pass</code>, <code>drop</code>, and <code>alert</code>.</p>
    pub rule_action: ::std::option::Option<::std::string::String>,
    /// <p>The direction. The possible values are <code>FORWARD</code> and <code>ANY</code>.</p>
    pub direction: ::std::option::Option<::std::string::String>,
}
impl FirewallStatefulRule {
    /// <p>The ARN of the stateful rule group.</p>
    pub fn rule_group_arn(&self) -> ::std::option::Option<&str> {
        self.rule_group_arn.as_deref()
    }
    /// <p>The source IP addresses, in CIDR notation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[::std::string::String] {
        self.sources.as_deref().unwrap_or_default()
    }
    /// <p>The destination IP addresses, in CIDR notation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[::std::string::String] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// <p>The source ports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_ports.is_none()`.
    pub fn source_ports(&self) -> &[crate::types::PortRange] {
        self.source_ports.as_deref().unwrap_or_default()
    }
    /// <p>The destination ports.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destination_ports.is_none()`.
    pub fn destination_ports(&self) -> &[crate::types::PortRange] {
        self.destination_ports.as_deref().unwrap_or_default()
    }
    /// <p>The protocol.</p>
    pub fn protocol(&self) -> ::std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The rule action. The possible values are <code>pass</code>, <code>drop</code>, and <code>alert</code>.</p>
    pub fn rule_action(&self) -> ::std::option::Option<&str> {
        self.rule_action.as_deref()
    }
    /// <p>The direction. The possible values are <code>FORWARD</code> and <code>ANY</code>.</p>
    pub fn direction(&self) -> ::std::option::Option<&str> {
        self.direction.as_deref()
    }
}
impl FirewallStatefulRule {
    /// Creates a new builder-style object to manufacture [`FirewallStatefulRule`](crate::types::FirewallStatefulRule).
    pub fn builder() -> crate::types::builders::FirewallStatefulRuleBuilder {
        crate::types::builders::FirewallStatefulRuleBuilder::default()
    }
}

/// A builder for [`FirewallStatefulRule`](crate::types::FirewallStatefulRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FirewallStatefulRuleBuilder {
    pub(crate) rule_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_ports: ::std::option::Option<::std::vec::Vec<crate::types::PortRange>>,
    pub(crate) destination_ports: ::std::option::Option<::std::vec::Vec<crate::types::PortRange>>,
    pub(crate) protocol: ::std::option::Option<::std::string::String>,
    pub(crate) rule_action: ::std::option::Option<::std::string::String>,
    pub(crate) direction: ::std::option::Option<::std::string::String>,
}
impl FirewallStatefulRuleBuilder {
    /// <p>The ARN of the stateful rule group.</p>
    pub fn rule_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the stateful rule group.</p>
    pub fn set_rule_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_group_arn = input;
        self
    }
    /// <p>The ARN of the stateful rule group.</p>
    pub fn get_rule_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_group_arn
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The source IP addresses, in CIDR notation.</p>
    pub fn sources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input.into());
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source IP addresses, in CIDR notation.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The source IP addresses, in CIDR notation.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sources
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>The destination IP addresses, in CIDR notation.</p>
    pub fn destinations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input.into());
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination IP addresses, in CIDR notation.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p>The destination IP addresses, in CIDR notation.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destinations
    }
    /// Appends an item to `source_ports`.
    ///
    /// To override the contents of this collection use [`set_source_ports`](Self::set_source_ports).
    ///
    /// <p>The source ports.</p>
    pub fn source_ports(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.source_ports.unwrap_or_default();
        v.push(input);
        self.source_ports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source ports.</p>
    pub fn set_source_ports(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PortRange>>) -> Self {
        self.source_ports = input;
        self
    }
    /// <p>The source ports.</p>
    pub fn get_source_ports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PortRange>> {
        &self.source_ports
    }
    /// Appends an item to `destination_ports`.
    ///
    /// To override the contents of this collection use [`set_destination_ports`](Self::set_destination_ports).
    ///
    /// <p>The destination ports.</p>
    pub fn destination_ports(mut self, input: crate::types::PortRange) -> Self {
        let mut v = self.destination_ports.unwrap_or_default();
        v.push(input);
        self.destination_ports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The destination ports.</p>
    pub fn set_destination_ports(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PortRange>>) -> Self {
        self.destination_ports = input;
        self
    }
    /// <p>The destination ports.</p>
    pub fn get_destination_ports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PortRange>> {
        &self.destination_ports
    }
    /// <p>The protocol.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The protocol.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.protocol
    }
    /// <p>The rule action. The possible values are <code>pass</code>, <code>drop</code>, and <code>alert</code>.</p>
    pub fn rule_action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The rule action. The possible values are <code>pass</code>, <code>drop</code>, and <code>alert</code>.</p>
    pub fn set_rule_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_action = input;
        self
    }
    /// <p>The rule action. The possible values are <code>pass</code>, <code>drop</code>, and <code>alert</code>.</p>
    pub fn get_rule_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_action
    }
    /// <p>The direction. The possible values are <code>FORWARD</code> and <code>ANY</code>.</p>
    pub fn direction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.direction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The direction. The possible values are <code>FORWARD</code> and <code>ANY</code>.</p>
    pub fn set_direction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.direction = input;
        self
    }
    /// <p>The direction. The possible values are <code>FORWARD</code> and <code>ANY</code>.</p>
    pub fn get_direction(&self) -> &::std::option::Option<::std::string::String> {
        &self.direction
    }
    /// Consumes the builder and constructs a [`FirewallStatefulRule`](crate::types::FirewallStatefulRule).
    pub fn build(self) -> crate::types::FirewallStatefulRule {
        crate::types::FirewallStatefulRule {
            rule_group_arn: self.rule_group_arn,
            sources: self.sources,
            destinations: self.destinations,
            source_ports: self.source_ports,
            destination_ports: self.destination_ports,
            protocol: self.protocol,
            rule_action: self.rule_action,
            direction: self.direction,
        }
    }
}
