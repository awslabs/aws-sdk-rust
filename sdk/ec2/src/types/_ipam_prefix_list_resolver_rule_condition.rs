// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a condition within a CIDR selection rule. Conditions define the criteria for selecting CIDRs from IPAM's database based on resource attributes.</p>
/// <p>CIDR selection rules define the business logic for selecting CIDRs from IPAM. If a CIDR matches any of the rules, it will be included. If a rule has multiple conditions, the CIDR has to match every condition of that rule. You can create a prefix list resolver without any CIDR selection rules, but it will generate empty versions (containing no CIDRs) until you add rules.</p>
/// <p>There are three rule types:</p>
/// <ul>
/// <li>
/// <p><b>Static CIDR</b>: A fixed list of CIDRs that do not change (like a manual list replicated across Regions).</p></li>
/// <li>
/// <p><b>IPAM pool CIDR</b>: CIDRs from specific IPAM pools (like all CIDRs from your IPAM production pool).</p></li>
/// <li>
/// <p><b>Scope resource CIDR</b>: CIDRs for Amazon Web Services resources like VPCs, subnets, and EIPs within a specific IPAM scope.</p></li>
/// </ul>
/// <p>Condition availability by resource type:</p>
/// <ul>
/// <li>
/// <p>Only 2 of the 3 rule types support conditions - <b>IPAM pool CIDR</b> and <b>Scope resource CIDR</b>. <b>Static CIDR</b> rules cannot have conditions.</p>
/// <ul>
/// <li>
/// <p>Condition available for the <b>IPAM pool CIDR</b> resource type:</p>
/// <ul>
/// <li>
/// <p>Property:</p>
/// <ul>
/// <li>
/// <p>IPAM Pool ID</p></li>
/// <li>
/// <p>CIDR (like 10.24.34.0/23)</p></li>
/// </ul></li>
/// <li>
/// <p>Operation: Equals/Not equals</p></li>
/// <li>
/// <p>Value: The value on which to match the condition</p></li>
/// </ul></li>
/// <li>
/// <p>Conditions for the <b>Scope resource CIDR</b> resource type:</p>
/// <ul>
/// <li>
/// <p>Property:</p>
/// <ul>
/// <li>
/// <p>Resource ID: The unique ID of a resource (like vpc-1234567890abcdef0)</p></li>
/// <li>
/// <p>Resource type (like VPC or Subnet)</p></li>
/// <li>
/// <p>Resource owner (like 111122223333)</p></li>
/// <li>
/// <p>Resource region (like us-east-1)</p></li>
/// <li>
/// <p>Resource tag (like key: name, value: dev-vpc-1)</p></li>
/// <li>
/// <p>CIDR (like 10.24.34.0/23)</p></li>
/// </ul></li>
/// <li>
/// <p>Operation: Equals/Not equals</p></li>
/// <li>
/// <p>Value: The value on which to match the condition</p></li>
/// </ul></li>
/// <li>
/// <p>When setting conditions for a rule, one or more conditions is required.</p></li>
/// </ul></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPrefixListResolverRuleCondition {
    /// <p>The operation to perform when evaluating this condition. Valid values include <code>equals</code>, <code>not-equals</code>, <code>contains</code>, and <code>not-contains</code>.</p>
    pub operation: ::std::option::Option<crate::types::IpamPrefixListResolverRuleConditionOperation>,
    /// <p>The ID of the IPAM pool to match against. This condition selects CIDRs that belong to the specified IPAM pool.</p>
    pub ipam_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services resource to match against. This condition selects CIDRs associated with the specified resource.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID that owns the resources to match against. This condition selects CIDRs from resources owned by the specified account.</p>
    pub resource_owner: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the resources are located. This condition selects CIDRs from resources in the specified Region.</p>
    pub resource_region: ::std::option::Option<::std::string::String>,
    /// <p>A tag key-value pair to match against. This condition selects CIDRs from resources that have the specified tag.</p>
    pub resource_tag: ::std::option::Option<crate::types::IpamResourceTag>,
    /// <p>A CIDR block to match against. This condition selects CIDRs that fall within or match the specified CIDR range.</p>
    pub cidr: ::std::option::Option<::std::string::String>,
}
impl IpamPrefixListResolverRuleCondition {
    /// <p>The operation to perform when evaluating this condition. Valid values include <code>equals</code>, <code>not-equals</code>, <code>contains</code>, and <code>not-contains</code>.</p>
    pub fn operation(&self) -> ::std::option::Option<&crate::types::IpamPrefixListResolverRuleConditionOperation> {
        self.operation.as_ref()
    }
    /// <p>The ID of the IPAM pool to match against. This condition selects CIDRs that belong to the specified IPAM pool.</p>
    pub fn ipam_pool_id(&self) -> ::std::option::Option<&str> {
        self.ipam_pool_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services resource to match against. This condition selects CIDRs associated with the specified resource.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID that owns the resources to match against. This condition selects CIDRs from resources owned by the specified account.</p>
    pub fn resource_owner(&self) -> ::std::option::Option<&str> {
        self.resource_owner.as_deref()
    }
    /// <p>The Amazon Web Services Region where the resources are located. This condition selects CIDRs from resources in the specified Region.</p>
    pub fn resource_region(&self) -> ::std::option::Option<&str> {
        self.resource_region.as_deref()
    }
    /// <p>A tag key-value pair to match against. This condition selects CIDRs from resources that have the specified tag.</p>
    pub fn resource_tag(&self) -> ::std::option::Option<&crate::types::IpamResourceTag> {
        self.resource_tag.as_ref()
    }
    /// <p>A CIDR block to match against. This condition selects CIDRs that fall within or match the specified CIDR range.</p>
    pub fn cidr(&self) -> ::std::option::Option<&str> {
        self.cidr.as_deref()
    }
}
impl IpamPrefixListResolverRuleCondition {
    /// Creates a new builder-style object to manufacture [`IpamPrefixListResolverRuleCondition`](crate::types::IpamPrefixListResolverRuleCondition).
    pub fn builder() -> crate::types::builders::IpamPrefixListResolverRuleConditionBuilder {
        crate::types::builders::IpamPrefixListResolverRuleConditionBuilder::default()
    }
}

/// A builder for [`IpamPrefixListResolverRuleCondition`](crate::types::IpamPrefixListResolverRuleCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IpamPrefixListResolverRuleConditionBuilder {
    pub(crate) operation: ::std::option::Option<crate::types::IpamPrefixListResolverRuleConditionOperation>,
    pub(crate) ipam_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_owner: ::std::option::Option<::std::string::String>,
    pub(crate) resource_region: ::std::option::Option<::std::string::String>,
    pub(crate) resource_tag: ::std::option::Option<crate::types::IpamResourceTag>,
    pub(crate) cidr: ::std::option::Option<::std::string::String>,
}
impl IpamPrefixListResolverRuleConditionBuilder {
    /// <p>The operation to perform when evaluating this condition. Valid values include <code>equals</code>, <code>not-equals</code>, <code>contains</code>, and <code>not-contains</code>.</p>
    pub fn operation(mut self, input: crate::types::IpamPrefixListResolverRuleConditionOperation) -> Self {
        self.operation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operation to perform when evaluating this condition. Valid values include <code>equals</code>, <code>not-equals</code>, <code>contains</code>, and <code>not-contains</code>.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<crate::types::IpamPrefixListResolverRuleConditionOperation>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The operation to perform when evaluating this condition. Valid values include <code>equals</code>, <code>not-equals</code>, <code>contains</code>, and <code>not-contains</code>.</p>
    pub fn get_operation(&self) -> &::std::option::Option<crate::types::IpamPrefixListResolverRuleConditionOperation> {
        &self.operation
    }
    /// <p>The ID of the IPAM pool to match against. This condition selects CIDRs that belong to the specified IPAM pool.</p>
    pub fn ipam_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM pool to match against. This condition selects CIDRs that belong to the specified IPAM pool.</p>
    pub fn set_ipam_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_pool_id = input;
        self
    }
    /// <p>The ID of the IPAM pool to match against. This condition selects CIDRs that belong to the specified IPAM pool.</p>
    pub fn get_ipam_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_pool_id
    }
    /// <p>The ID of the Amazon Web Services resource to match against. This condition selects CIDRs associated with the specified resource.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services resource to match against. This condition selects CIDRs associated with the specified resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services resource to match against. This condition selects CIDRs associated with the specified resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The Amazon Web Services account ID that owns the resources to match against. This condition selects CIDRs from resources owned by the specified account.</p>
    pub fn resource_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the resources to match against. This condition selects CIDRs from resources owned by the specified account.</p>
    pub fn set_resource_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_owner = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the resources to match against. This condition selects CIDRs from resources owned by the specified account.</p>
    pub fn get_resource_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_owner
    }
    /// <p>The Amazon Web Services Region where the resources are located. This condition selects CIDRs from resources in the specified Region.</p>
    pub fn resource_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the resources are located. This condition selects CIDRs from resources in the specified Region.</p>
    pub fn set_resource_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the resources are located. This condition selects CIDRs from resources in the specified Region.</p>
    pub fn get_resource_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_region
    }
    /// <p>A tag key-value pair to match against. This condition selects CIDRs from resources that have the specified tag.</p>
    pub fn resource_tag(mut self, input: crate::types::IpamResourceTag) -> Self {
        self.resource_tag = ::std::option::Option::Some(input);
        self
    }
    /// <p>A tag key-value pair to match against. This condition selects CIDRs from resources that have the specified tag.</p>
    pub fn set_resource_tag(mut self, input: ::std::option::Option<crate::types::IpamResourceTag>) -> Self {
        self.resource_tag = input;
        self
    }
    /// <p>A tag key-value pair to match against. This condition selects CIDRs from resources that have the specified tag.</p>
    pub fn get_resource_tag(&self) -> &::std::option::Option<crate::types::IpamResourceTag> {
        &self.resource_tag
    }
    /// <p>A CIDR block to match against. This condition selects CIDRs that fall within or match the specified CIDR range.</p>
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A CIDR block to match against. This condition selects CIDRs that fall within or match the specified CIDR range.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>A CIDR block to match against. This condition selects CIDRs that fall within or match the specified CIDR range.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr
    }
    /// Consumes the builder and constructs a [`IpamPrefixListResolverRuleCondition`](crate::types::IpamPrefixListResolverRuleCondition).
    pub fn build(self) -> crate::types::IpamPrefixListResolverRuleCondition {
        crate::types::IpamPrefixListResolverRuleCondition {
            operation: self.operation,
            ipam_pool_id: self.ipam_pool_id,
            resource_id: self.resource_id,
            resource_owner: self.resource_owner,
            resource_region: self.resource_region,
            resource_tag: self.resource_tag,
            cidr: self.cidr,
        }
    }
}
