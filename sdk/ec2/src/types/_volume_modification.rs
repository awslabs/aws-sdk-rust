// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the modification status of an EBS volume.</p>
/// <p>If the volume has never been modified, some element values will be null.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeModification {
    /// <p>The ID of the volume.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>The current modification state. The modification state is null for unmodified volumes.</p>
    #[doc(hidden)]
    pub modification_state: std::option::Option<crate::types::VolumeModificationState>,
    /// <p>A status message about the modification progress or failure.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The target size of the volume, in GiB.</p>
    #[doc(hidden)]
    pub target_size: std::option::Option<i32>,
    /// <p>The target IOPS rate of the volume.</p>
    #[doc(hidden)]
    pub target_iops: std::option::Option<i32>,
    /// <p>The target EBS volume type of the volume.</p>
    #[doc(hidden)]
    pub target_volume_type: std::option::Option<crate::types::VolumeType>,
    /// <p>The target throughput of the volume, in MiB/s.</p>
    #[doc(hidden)]
    pub target_throughput: std::option::Option<i32>,
    /// <p>The target setting for Amazon EBS Multi-Attach.</p>
    #[doc(hidden)]
    pub target_multi_attach_enabled: std::option::Option<bool>,
    /// <p>The original size of the volume, in GiB.</p>
    #[doc(hidden)]
    pub original_size: std::option::Option<i32>,
    /// <p>The original IOPS rate of the volume.</p>
    #[doc(hidden)]
    pub original_iops: std::option::Option<i32>,
    /// <p>The original EBS volume type of the volume.</p>
    #[doc(hidden)]
    pub original_volume_type: std::option::Option<crate::types::VolumeType>,
    /// <p>The original throughput of the volume, in MiB/s.</p>
    #[doc(hidden)]
    pub original_throughput: std::option::Option<i32>,
    /// <p>The original setting for Amazon EBS Multi-Attach.</p>
    #[doc(hidden)]
    pub original_multi_attach_enabled: std::option::Option<bool>,
    /// <p>The modification progress, from 0 to 100 percent complete.</p>
    #[doc(hidden)]
    pub progress: std::option::Option<i64>,
    /// <p>The modification start time.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The modification completion or failure time.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl VolumeModification {
    /// <p>The ID of the volume.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The current modification state. The modification state is null for unmodified volumes.</p>
    pub fn modification_state(
        &self,
    ) -> std::option::Option<&crate::types::VolumeModificationState> {
        self.modification_state.as_ref()
    }
    /// <p>A status message about the modification progress or failure.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The target size of the volume, in GiB.</p>
    pub fn target_size(&self) -> std::option::Option<i32> {
        self.target_size
    }
    /// <p>The target IOPS rate of the volume.</p>
    pub fn target_iops(&self) -> std::option::Option<i32> {
        self.target_iops
    }
    /// <p>The target EBS volume type of the volume.</p>
    pub fn target_volume_type(&self) -> std::option::Option<&crate::types::VolumeType> {
        self.target_volume_type.as_ref()
    }
    /// <p>The target throughput of the volume, in MiB/s.</p>
    pub fn target_throughput(&self) -> std::option::Option<i32> {
        self.target_throughput
    }
    /// <p>The target setting for Amazon EBS Multi-Attach.</p>
    pub fn target_multi_attach_enabled(&self) -> std::option::Option<bool> {
        self.target_multi_attach_enabled
    }
    /// <p>The original size of the volume, in GiB.</p>
    pub fn original_size(&self) -> std::option::Option<i32> {
        self.original_size
    }
    /// <p>The original IOPS rate of the volume.</p>
    pub fn original_iops(&self) -> std::option::Option<i32> {
        self.original_iops
    }
    /// <p>The original EBS volume type of the volume.</p>
    pub fn original_volume_type(&self) -> std::option::Option<&crate::types::VolumeType> {
        self.original_volume_type.as_ref()
    }
    /// <p>The original throughput of the volume, in MiB/s.</p>
    pub fn original_throughput(&self) -> std::option::Option<i32> {
        self.original_throughput
    }
    /// <p>The original setting for Amazon EBS Multi-Attach.</p>
    pub fn original_multi_attach_enabled(&self) -> std::option::Option<bool> {
        self.original_multi_attach_enabled
    }
    /// <p>The modification progress, from 0 to 100 percent complete.</p>
    pub fn progress(&self) -> std::option::Option<i64> {
        self.progress
    }
    /// <p>The modification start time.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The modification completion or failure time.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl VolumeModification {
    /// Creates a new builder-style object to manufacture [`VolumeModification`](crate::types::VolumeModification).
    pub fn builder() -> crate::types::builders::VolumeModificationBuilder {
        crate::types::builders::VolumeModificationBuilder::default()
    }
}

/// A builder for [`VolumeModification`](crate::types::VolumeModification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeModificationBuilder {
    pub(crate) volume_id: std::option::Option<std::string::String>,
    pub(crate) modification_state: std::option::Option<crate::types::VolumeModificationState>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) target_size: std::option::Option<i32>,
    pub(crate) target_iops: std::option::Option<i32>,
    pub(crate) target_volume_type: std::option::Option<crate::types::VolumeType>,
    pub(crate) target_throughput: std::option::Option<i32>,
    pub(crate) target_multi_attach_enabled: std::option::Option<bool>,
    pub(crate) original_size: std::option::Option<i32>,
    pub(crate) original_iops: std::option::Option<i32>,
    pub(crate) original_volume_type: std::option::Option<crate::types::VolumeType>,
    pub(crate) original_throughput: std::option::Option<i32>,
    pub(crate) original_multi_attach_enabled: std::option::Option<bool>,
    pub(crate) progress: std::option::Option<i64>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl VolumeModificationBuilder {
    /// <p>The ID of the volume.</p>
    pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_id = Some(input.into());
        self
    }
    /// <p>The ID of the volume.</p>
    pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The current modification state. The modification state is null for unmodified volumes.</p>
    pub fn modification_state(mut self, input: crate::types::VolumeModificationState) -> Self {
        self.modification_state = Some(input);
        self
    }
    /// <p>The current modification state. The modification state is null for unmodified volumes.</p>
    pub fn set_modification_state(
        mut self,
        input: std::option::Option<crate::types::VolumeModificationState>,
    ) -> Self {
        self.modification_state = input;
        self
    }
    /// <p>A status message about the modification progress or failure.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A status message about the modification progress or failure.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The target size of the volume, in GiB.</p>
    pub fn target_size(mut self, input: i32) -> Self {
        self.target_size = Some(input);
        self
    }
    /// <p>The target size of the volume, in GiB.</p>
    pub fn set_target_size(mut self, input: std::option::Option<i32>) -> Self {
        self.target_size = input;
        self
    }
    /// <p>The target IOPS rate of the volume.</p>
    pub fn target_iops(mut self, input: i32) -> Self {
        self.target_iops = Some(input);
        self
    }
    /// <p>The target IOPS rate of the volume.</p>
    pub fn set_target_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.target_iops = input;
        self
    }
    /// <p>The target EBS volume type of the volume.</p>
    pub fn target_volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.target_volume_type = Some(input);
        self
    }
    /// <p>The target EBS volume type of the volume.</p>
    pub fn set_target_volume_type(
        mut self,
        input: std::option::Option<crate::types::VolumeType>,
    ) -> Self {
        self.target_volume_type = input;
        self
    }
    /// <p>The target throughput of the volume, in MiB/s.</p>
    pub fn target_throughput(mut self, input: i32) -> Self {
        self.target_throughput = Some(input);
        self
    }
    /// <p>The target throughput of the volume, in MiB/s.</p>
    pub fn set_target_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.target_throughput = input;
        self
    }
    /// <p>The target setting for Amazon EBS Multi-Attach.</p>
    pub fn target_multi_attach_enabled(mut self, input: bool) -> Self {
        self.target_multi_attach_enabled = Some(input);
        self
    }
    /// <p>The target setting for Amazon EBS Multi-Attach.</p>
    pub fn set_target_multi_attach_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.target_multi_attach_enabled = input;
        self
    }
    /// <p>The original size of the volume, in GiB.</p>
    pub fn original_size(mut self, input: i32) -> Self {
        self.original_size = Some(input);
        self
    }
    /// <p>The original size of the volume, in GiB.</p>
    pub fn set_original_size(mut self, input: std::option::Option<i32>) -> Self {
        self.original_size = input;
        self
    }
    /// <p>The original IOPS rate of the volume.</p>
    pub fn original_iops(mut self, input: i32) -> Self {
        self.original_iops = Some(input);
        self
    }
    /// <p>The original IOPS rate of the volume.</p>
    pub fn set_original_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.original_iops = input;
        self
    }
    /// <p>The original EBS volume type of the volume.</p>
    pub fn original_volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.original_volume_type = Some(input);
        self
    }
    /// <p>The original EBS volume type of the volume.</p>
    pub fn set_original_volume_type(
        mut self,
        input: std::option::Option<crate::types::VolumeType>,
    ) -> Self {
        self.original_volume_type = input;
        self
    }
    /// <p>The original throughput of the volume, in MiB/s.</p>
    pub fn original_throughput(mut self, input: i32) -> Self {
        self.original_throughput = Some(input);
        self
    }
    /// <p>The original throughput of the volume, in MiB/s.</p>
    pub fn set_original_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.original_throughput = input;
        self
    }
    /// <p>The original setting for Amazon EBS Multi-Attach.</p>
    pub fn original_multi_attach_enabled(mut self, input: bool) -> Self {
        self.original_multi_attach_enabled = Some(input);
        self
    }
    /// <p>The original setting for Amazon EBS Multi-Attach.</p>
    pub fn set_original_multi_attach_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.original_multi_attach_enabled = input;
        self
    }
    /// <p>The modification progress, from 0 to 100 percent complete.</p>
    pub fn progress(mut self, input: i64) -> Self {
        self.progress = Some(input);
        self
    }
    /// <p>The modification progress, from 0 to 100 percent complete.</p>
    pub fn set_progress(mut self, input: std::option::Option<i64>) -> Self {
        self.progress = input;
        self
    }
    /// <p>The modification start time.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The modification start time.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The modification completion or failure time.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The modification completion or failure time.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeModification`](crate::types::VolumeModification).
    pub fn build(self) -> crate::types::VolumeModification {
        crate::types::VolumeModification {
            volume_id: self.volume_id,
            modification_state: self.modification_state,
            status_message: self.status_message,
            target_size: self.target_size,
            target_iops: self.target_iops,
            target_volume_type: self.target_volume_type,
            target_throughput: self.target_throughput,
            target_multi_attach_enabled: self.target_multi_attach_enabled,
            original_size: self.original_size,
            original_iops: self.original_iops,
            original_volume_type: self.original_volume_type,
            original_throughput: self.original_throughput,
            original_multi_attach_enabled: self.original_multi_attach_enabled,
            progress: self.progress,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
