// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Metric`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let metric = unimplemented!();
/// match metric {
///     Metric::ReservationAvgCommittedSizeInst => { /* ... */ },
///     Metric::ReservationAvgCommittedSizeVcpu => { /* ... */ },
///     Metric::ReservationAvgFutureSizeInst => { /* ... */ },
///     Metric::ReservationAvgFutureSizeVcpu => { /* ... */ },
///     Metric::ReservationAvgUtilizationInst => { /* ... */ },
///     Metric::ReservationAvgUtilizationVcpu => { /* ... */ },
///     Metric::ReservationMaxCommittedSizeInst => { /* ... */ },
///     Metric::ReservationMaxCommittedSizeVcpu => { /* ... */ },
///     Metric::ReservationMaxFutureSizeInst => { /* ... */ },
///     Metric::ReservationMaxFutureSizeVcpu => { /* ... */ },
///     Metric::ReservationMaxSizeInst => { /* ... */ },
///     Metric::ReservationMaxSizeVcpu => { /* ... */ },
///     Metric::ReservationMaxUnusedSizeInst => { /* ... */ },
///     Metric::ReservationMaxUnusedSizeVcpu => { /* ... */ },
///     Metric::ReservationMaxUtilization => { /* ... */ },
///     Metric::ReservationMinCommittedSizeInst => { /* ... */ },
///     Metric::ReservationMinCommittedSizeVcpu => { /* ... */ },
///     Metric::ReservationMinFutureSizeInst => { /* ... */ },
///     Metric::ReservationMinFutureSizeVcpu => { /* ... */ },
///     Metric::ReservationMinSizeInst => { /* ... */ },
///     Metric::ReservationMinSizeVcpu => { /* ... */ },
///     Metric::ReservationMinUnusedSizeInst => { /* ... */ },
///     Metric::ReservationMinUnusedSizeVcpu => { /* ... */ },
///     Metric::ReservationMinUtilization => { /* ... */ },
///     Metric::ReservationTotalCapacityHrsInst => { /* ... */ },
///     Metric::ReservationTotalCapacityHrsVcpu => { /* ... */ },
///     Metric::ReservationTotalCount => { /* ... */ },
///     Metric::ReservationTotalEstimatedCost => { /* ... */ },
///     Metric::ReservationUnusedTotalCapacityHrsInst => { /* ... */ },
///     Metric::ReservationUnusedTotalCapacityHrsVcpu => { /* ... */ },
///     Metric::ReservationUnusedTotalEstimatedCost => { /* ... */ },
///     Metric::ReservedTotalEstimatedCost => { /* ... */ },
///     Metric::ReservedTotalUsageHrsInst => { /* ... */ },
///     Metric::ReservedTotalUsageHrsVcpu => { /* ... */ },
///     Metric::SpotAvgRunTimeBeforeInterruptionInst => { /* ... */ },
///     Metric::SpotMaxRunTimeBeforeInterruptionInst => { /* ... */ },
///     Metric::SpotMinRunTimeBeforeInterruptionInst => { /* ... */ },
///     Metric::SpotTotalEstimatedCost => { /* ... */ },
///     Metric::SpotTotalUsageHrsInst => { /* ... */ },
///     Metric::SpotTotalUsageHrsVcpu => { /* ... */ },
///     Metric::UnreservedTotalEstimatedCost => { /* ... */ },
///     Metric::UnreservedTotalUsageHrsInst => { /* ... */ },
///     Metric::UnreservedTotalUsageHrsVcpu => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `metric` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Metric::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Metric::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Metric::NewFeature` is defined.
/// Specifically, when `metric` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Metric::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Metric {
    #[allow(missing_docs)] // documentation missing in model
    ReservationAvgCommittedSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationAvgCommittedSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationAvgFutureSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationAvgFutureSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationAvgUtilizationInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationAvgUtilizationVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxCommittedSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxCommittedSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxFutureSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxFutureSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxUnusedSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxUnusedSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMaxUtilization,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinCommittedSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinCommittedSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinFutureSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinFutureSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinUnusedSizeInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinUnusedSizeVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationMinUtilization,
    #[allow(missing_docs)] // documentation missing in model
    ReservationTotalCapacityHrsInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationTotalCapacityHrsVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationTotalCount,
    #[allow(missing_docs)] // documentation missing in model
    ReservationTotalEstimatedCost,
    #[allow(missing_docs)] // documentation missing in model
    ReservationUnusedTotalCapacityHrsInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservationUnusedTotalCapacityHrsVcpu,
    #[allow(missing_docs)] // documentation missing in model
    ReservationUnusedTotalEstimatedCost,
    #[allow(missing_docs)] // documentation missing in model
    ReservedTotalEstimatedCost,
    #[allow(missing_docs)] // documentation missing in model
    ReservedTotalUsageHrsInst,
    #[allow(missing_docs)] // documentation missing in model
    ReservedTotalUsageHrsVcpu,
    #[allow(missing_docs)] // documentation missing in model
    SpotAvgRunTimeBeforeInterruptionInst,
    #[allow(missing_docs)] // documentation missing in model
    SpotMaxRunTimeBeforeInterruptionInst,
    #[allow(missing_docs)] // documentation missing in model
    SpotMinRunTimeBeforeInterruptionInst,
    #[allow(missing_docs)] // documentation missing in model
    SpotTotalEstimatedCost,
    #[allow(missing_docs)] // documentation missing in model
    SpotTotalUsageHrsInst,
    #[allow(missing_docs)] // documentation missing in model
    SpotTotalUsageHrsVcpu,
    #[allow(missing_docs)] // documentation missing in model
    UnreservedTotalEstimatedCost,
    #[allow(missing_docs)] // documentation missing in model
    UnreservedTotalUsageHrsInst,
    #[allow(missing_docs)] // documentation missing in model
    UnreservedTotalUsageHrsVcpu,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Metric {
    fn from(s: &str) -> Self {
        match s {
            "reservation-avg-committed-size-inst" => Metric::ReservationAvgCommittedSizeInst,
            "reservation-avg-committed-size-vcpu" => Metric::ReservationAvgCommittedSizeVcpu,
            "reservation-avg-future-size-inst" => Metric::ReservationAvgFutureSizeInst,
            "reservation-avg-future-size-vcpu" => Metric::ReservationAvgFutureSizeVcpu,
            "reservation-avg-utilization-inst" => Metric::ReservationAvgUtilizationInst,
            "reservation-avg-utilization-vcpu" => Metric::ReservationAvgUtilizationVcpu,
            "reservation-max-committed-size-inst" => Metric::ReservationMaxCommittedSizeInst,
            "reservation-max-committed-size-vcpu" => Metric::ReservationMaxCommittedSizeVcpu,
            "reservation-max-future-size-inst" => Metric::ReservationMaxFutureSizeInst,
            "reservation-max-future-size-vcpu" => Metric::ReservationMaxFutureSizeVcpu,
            "reservation-max-size-inst" => Metric::ReservationMaxSizeInst,
            "reservation-max-size-vcpu" => Metric::ReservationMaxSizeVcpu,
            "reservation-max-unused-size-inst" => Metric::ReservationMaxUnusedSizeInst,
            "reservation-max-unused-size-vcpu" => Metric::ReservationMaxUnusedSizeVcpu,
            "reservation-max-utilization" => Metric::ReservationMaxUtilization,
            "reservation-min-committed-size-inst" => Metric::ReservationMinCommittedSizeInst,
            "reservation-min-committed-size-vcpu" => Metric::ReservationMinCommittedSizeVcpu,
            "reservation-min-future-size-inst" => Metric::ReservationMinFutureSizeInst,
            "reservation-min-future-size-vcpu" => Metric::ReservationMinFutureSizeVcpu,
            "reservation-min-size-inst" => Metric::ReservationMinSizeInst,
            "reservation-min-size-vcpu" => Metric::ReservationMinSizeVcpu,
            "reservation-min-unused-size-inst" => Metric::ReservationMinUnusedSizeInst,
            "reservation-min-unused-size-vcpu" => Metric::ReservationMinUnusedSizeVcpu,
            "reservation-min-utilization" => Metric::ReservationMinUtilization,
            "reservation-total-capacity-hrs-inst" => Metric::ReservationTotalCapacityHrsInst,
            "reservation-total-capacity-hrs-vcpu" => Metric::ReservationTotalCapacityHrsVcpu,
            "reservation-total-count" => Metric::ReservationTotalCount,
            "reservation-total-estimated-cost" => Metric::ReservationTotalEstimatedCost,
            "reservation-unused-total-capacity-hrs-inst" => Metric::ReservationUnusedTotalCapacityHrsInst,
            "reservation-unused-total-capacity-hrs-vcpu" => Metric::ReservationUnusedTotalCapacityHrsVcpu,
            "reservation-unused-total-estimated-cost" => Metric::ReservationUnusedTotalEstimatedCost,
            "reserved-total-estimated-cost" => Metric::ReservedTotalEstimatedCost,
            "reserved-total-usage-hrs-inst" => Metric::ReservedTotalUsageHrsInst,
            "reserved-total-usage-hrs-vcpu" => Metric::ReservedTotalUsageHrsVcpu,
            "spot-avg-run-time-before-interruption-inst" => Metric::SpotAvgRunTimeBeforeInterruptionInst,
            "spot-max-run-time-before-interruption-inst" => Metric::SpotMaxRunTimeBeforeInterruptionInst,
            "spot-min-run-time-before-interruption-inst" => Metric::SpotMinRunTimeBeforeInterruptionInst,
            "spot-total-estimated-cost" => Metric::SpotTotalEstimatedCost,
            "spot-total-usage-hrs-inst" => Metric::SpotTotalUsageHrsInst,
            "spot-total-usage-hrs-vcpu" => Metric::SpotTotalUsageHrsVcpu,
            "unreserved-total-estimated-cost" => Metric::UnreservedTotalEstimatedCost,
            "unreserved-total-usage-hrs-inst" => Metric::UnreservedTotalUsageHrsInst,
            "unreserved-total-usage-hrs-vcpu" => Metric::UnreservedTotalUsageHrsVcpu,
            other => Metric::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Metric {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Metric::from(s))
    }
}
impl Metric {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Metric::ReservationAvgCommittedSizeInst => "reservation-avg-committed-size-inst",
            Metric::ReservationAvgCommittedSizeVcpu => "reservation-avg-committed-size-vcpu",
            Metric::ReservationAvgFutureSizeInst => "reservation-avg-future-size-inst",
            Metric::ReservationAvgFutureSizeVcpu => "reservation-avg-future-size-vcpu",
            Metric::ReservationAvgUtilizationInst => "reservation-avg-utilization-inst",
            Metric::ReservationAvgUtilizationVcpu => "reservation-avg-utilization-vcpu",
            Metric::ReservationMaxCommittedSizeInst => "reservation-max-committed-size-inst",
            Metric::ReservationMaxCommittedSizeVcpu => "reservation-max-committed-size-vcpu",
            Metric::ReservationMaxFutureSizeInst => "reservation-max-future-size-inst",
            Metric::ReservationMaxFutureSizeVcpu => "reservation-max-future-size-vcpu",
            Metric::ReservationMaxSizeInst => "reservation-max-size-inst",
            Metric::ReservationMaxSizeVcpu => "reservation-max-size-vcpu",
            Metric::ReservationMaxUnusedSizeInst => "reservation-max-unused-size-inst",
            Metric::ReservationMaxUnusedSizeVcpu => "reservation-max-unused-size-vcpu",
            Metric::ReservationMaxUtilization => "reservation-max-utilization",
            Metric::ReservationMinCommittedSizeInst => "reservation-min-committed-size-inst",
            Metric::ReservationMinCommittedSizeVcpu => "reservation-min-committed-size-vcpu",
            Metric::ReservationMinFutureSizeInst => "reservation-min-future-size-inst",
            Metric::ReservationMinFutureSizeVcpu => "reservation-min-future-size-vcpu",
            Metric::ReservationMinSizeInst => "reservation-min-size-inst",
            Metric::ReservationMinSizeVcpu => "reservation-min-size-vcpu",
            Metric::ReservationMinUnusedSizeInst => "reservation-min-unused-size-inst",
            Metric::ReservationMinUnusedSizeVcpu => "reservation-min-unused-size-vcpu",
            Metric::ReservationMinUtilization => "reservation-min-utilization",
            Metric::ReservationTotalCapacityHrsInst => "reservation-total-capacity-hrs-inst",
            Metric::ReservationTotalCapacityHrsVcpu => "reservation-total-capacity-hrs-vcpu",
            Metric::ReservationTotalCount => "reservation-total-count",
            Metric::ReservationTotalEstimatedCost => "reservation-total-estimated-cost",
            Metric::ReservationUnusedTotalCapacityHrsInst => "reservation-unused-total-capacity-hrs-inst",
            Metric::ReservationUnusedTotalCapacityHrsVcpu => "reservation-unused-total-capacity-hrs-vcpu",
            Metric::ReservationUnusedTotalEstimatedCost => "reservation-unused-total-estimated-cost",
            Metric::ReservedTotalEstimatedCost => "reserved-total-estimated-cost",
            Metric::ReservedTotalUsageHrsInst => "reserved-total-usage-hrs-inst",
            Metric::ReservedTotalUsageHrsVcpu => "reserved-total-usage-hrs-vcpu",
            Metric::SpotAvgRunTimeBeforeInterruptionInst => "spot-avg-run-time-before-interruption-inst",
            Metric::SpotMaxRunTimeBeforeInterruptionInst => "spot-max-run-time-before-interruption-inst",
            Metric::SpotMinRunTimeBeforeInterruptionInst => "spot-min-run-time-before-interruption-inst",
            Metric::SpotTotalEstimatedCost => "spot-total-estimated-cost",
            Metric::SpotTotalUsageHrsInst => "spot-total-usage-hrs-inst",
            Metric::SpotTotalUsageHrsVcpu => "spot-total-usage-hrs-vcpu",
            Metric::UnreservedTotalEstimatedCost => "unreserved-total-estimated-cost",
            Metric::UnreservedTotalUsageHrsInst => "unreserved-total-usage-hrs-inst",
            Metric::UnreservedTotalUsageHrsVcpu => "unreserved-total-usage-hrs-vcpu",
            Metric::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "reservation-avg-committed-size-inst",
            "reservation-avg-committed-size-vcpu",
            "reservation-avg-future-size-inst",
            "reservation-avg-future-size-vcpu",
            "reservation-avg-utilization-inst",
            "reservation-avg-utilization-vcpu",
            "reservation-max-committed-size-inst",
            "reservation-max-committed-size-vcpu",
            "reservation-max-future-size-inst",
            "reservation-max-future-size-vcpu",
            "reservation-max-size-inst",
            "reservation-max-size-vcpu",
            "reservation-max-unused-size-inst",
            "reservation-max-unused-size-vcpu",
            "reservation-max-utilization",
            "reservation-min-committed-size-inst",
            "reservation-min-committed-size-vcpu",
            "reservation-min-future-size-inst",
            "reservation-min-future-size-vcpu",
            "reservation-min-size-inst",
            "reservation-min-size-vcpu",
            "reservation-min-unused-size-inst",
            "reservation-min-unused-size-vcpu",
            "reservation-min-utilization",
            "reservation-total-capacity-hrs-inst",
            "reservation-total-capacity-hrs-vcpu",
            "reservation-total-count",
            "reservation-total-estimated-cost",
            "reservation-unused-total-capacity-hrs-inst",
            "reservation-unused-total-capacity-hrs-vcpu",
            "reservation-unused-total-estimated-cost",
            "reserved-total-estimated-cost",
            "reserved-total-usage-hrs-inst",
            "reserved-total-usage-hrs-vcpu",
            "spot-avg-run-time-before-interruption-inst",
            "spot-max-run-time-before-interruption-inst",
            "spot-min-run-time-before-interruption-inst",
            "spot-total-estimated-cost",
            "spot-total-usage-hrs-inst",
            "spot-total-usage-hrs-vcpu",
            "unreserved-total-estimated-cost",
            "unreserved-total-usage-hrs-inst",
            "unreserved-total-usage-hrs-vcpu",
        ]
    }
}
impl ::std::convert::AsRef<str> for Metric {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Metric {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Metric::ReservationAvgCommittedSizeInst => write!(f, "reservation-avg-committed-size-inst"),
            Metric::ReservationAvgCommittedSizeVcpu => write!(f, "reservation-avg-committed-size-vcpu"),
            Metric::ReservationAvgFutureSizeInst => write!(f, "reservation-avg-future-size-inst"),
            Metric::ReservationAvgFutureSizeVcpu => write!(f, "reservation-avg-future-size-vcpu"),
            Metric::ReservationAvgUtilizationInst => write!(f, "reservation-avg-utilization-inst"),
            Metric::ReservationAvgUtilizationVcpu => write!(f, "reservation-avg-utilization-vcpu"),
            Metric::ReservationMaxCommittedSizeInst => write!(f, "reservation-max-committed-size-inst"),
            Metric::ReservationMaxCommittedSizeVcpu => write!(f, "reservation-max-committed-size-vcpu"),
            Metric::ReservationMaxFutureSizeInst => write!(f, "reservation-max-future-size-inst"),
            Metric::ReservationMaxFutureSizeVcpu => write!(f, "reservation-max-future-size-vcpu"),
            Metric::ReservationMaxSizeInst => write!(f, "reservation-max-size-inst"),
            Metric::ReservationMaxSizeVcpu => write!(f, "reservation-max-size-vcpu"),
            Metric::ReservationMaxUnusedSizeInst => write!(f, "reservation-max-unused-size-inst"),
            Metric::ReservationMaxUnusedSizeVcpu => write!(f, "reservation-max-unused-size-vcpu"),
            Metric::ReservationMaxUtilization => write!(f, "reservation-max-utilization"),
            Metric::ReservationMinCommittedSizeInst => write!(f, "reservation-min-committed-size-inst"),
            Metric::ReservationMinCommittedSizeVcpu => write!(f, "reservation-min-committed-size-vcpu"),
            Metric::ReservationMinFutureSizeInst => write!(f, "reservation-min-future-size-inst"),
            Metric::ReservationMinFutureSizeVcpu => write!(f, "reservation-min-future-size-vcpu"),
            Metric::ReservationMinSizeInst => write!(f, "reservation-min-size-inst"),
            Metric::ReservationMinSizeVcpu => write!(f, "reservation-min-size-vcpu"),
            Metric::ReservationMinUnusedSizeInst => write!(f, "reservation-min-unused-size-inst"),
            Metric::ReservationMinUnusedSizeVcpu => write!(f, "reservation-min-unused-size-vcpu"),
            Metric::ReservationMinUtilization => write!(f, "reservation-min-utilization"),
            Metric::ReservationTotalCapacityHrsInst => write!(f, "reservation-total-capacity-hrs-inst"),
            Metric::ReservationTotalCapacityHrsVcpu => write!(f, "reservation-total-capacity-hrs-vcpu"),
            Metric::ReservationTotalCount => write!(f, "reservation-total-count"),
            Metric::ReservationTotalEstimatedCost => write!(f, "reservation-total-estimated-cost"),
            Metric::ReservationUnusedTotalCapacityHrsInst => write!(f, "reservation-unused-total-capacity-hrs-inst"),
            Metric::ReservationUnusedTotalCapacityHrsVcpu => write!(f, "reservation-unused-total-capacity-hrs-vcpu"),
            Metric::ReservationUnusedTotalEstimatedCost => write!(f, "reservation-unused-total-estimated-cost"),
            Metric::ReservedTotalEstimatedCost => write!(f, "reserved-total-estimated-cost"),
            Metric::ReservedTotalUsageHrsInst => write!(f, "reserved-total-usage-hrs-inst"),
            Metric::ReservedTotalUsageHrsVcpu => write!(f, "reserved-total-usage-hrs-vcpu"),
            Metric::SpotAvgRunTimeBeforeInterruptionInst => write!(f, "spot-avg-run-time-before-interruption-inst"),
            Metric::SpotMaxRunTimeBeforeInterruptionInst => write!(f, "spot-max-run-time-before-interruption-inst"),
            Metric::SpotMinRunTimeBeforeInterruptionInst => write!(f, "spot-min-run-time-before-interruption-inst"),
            Metric::SpotTotalEstimatedCost => write!(f, "spot-total-estimated-cost"),
            Metric::SpotTotalUsageHrsInst => write!(f, "spot-total-usage-hrs-inst"),
            Metric::SpotTotalUsageHrsVcpu => write!(f, "spot-total-usage-hrs-vcpu"),
            Metric::UnreservedTotalEstimatedCost => write!(f, "unreserved-total-estimated-cost"),
            Metric::UnreservedTotalUsageHrsInst => write!(f, "unreserved-total-usage-hrs-inst"),
            Metric::UnreservedTotalUsageHrsVcpu => write!(f, "unreserved-total-usage-hrs-vcpu"),
            Metric::Unknown(value) => write!(f, "{}", value),
        }
    }
}
