// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Capacity Reservation targeting option.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplateCapacityReservationSpecificationResponse {
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub capacity_reservation_preference:
        std::option::Option<crate::types::CapacityReservationPreference>,
    /// <p>Information about the target Capacity Reservation or Capacity Reservation group.</p>
    #[doc(hidden)]
    pub capacity_reservation_target:
        std::option::Option<crate::types::CapacityReservationTargetResponse>,
}
impl LaunchTemplateCapacityReservationSpecificationResponse {
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li>
    /// </ul>
    pub fn capacity_reservation_preference(
        &self,
    ) -> std::option::Option<&crate::types::CapacityReservationPreference> {
        self.capacity_reservation_preference.as_ref()
    }
    /// <p>Information about the target Capacity Reservation or Capacity Reservation group.</p>
    pub fn capacity_reservation_target(
        &self,
    ) -> std::option::Option<&crate::types::CapacityReservationTargetResponse> {
        self.capacity_reservation_target.as_ref()
    }
}
impl LaunchTemplateCapacityReservationSpecificationResponse {
    /// Creates a new builder-style object to manufacture [`LaunchTemplateCapacityReservationSpecificationResponse`](crate::types::LaunchTemplateCapacityReservationSpecificationResponse).
    pub fn builder(
    ) -> crate::types::builders::LaunchTemplateCapacityReservationSpecificationResponseBuilder {
        crate::types::builders::LaunchTemplateCapacityReservationSpecificationResponseBuilder::default()
    }
}

/// A builder for [`LaunchTemplateCapacityReservationSpecificationResponse`](crate::types::LaunchTemplateCapacityReservationSpecificationResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateCapacityReservationSpecificationResponseBuilder {
    pub(crate) capacity_reservation_preference:
        std::option::Option<crate::types::CapacityReservationPreference>,
    pub(crate) capacity_reservation_target:
        std::option::Option<crate::types::CapacityReservationTargetResponse>,
}
impl LaunchTemplateCapacityReservationSpecificationResponseBuilder {
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li>
    /// </ul>
    pub fn capacity_reservation_preference(
        mut self,
        input: crate::types::CapacityReservationPreference,
    ) -> Self {
        self.capacity_reservation_preference = Some(input);
        self
    }
    /// <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p>
    /// <ul>
    /// <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li>
    /// <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li>
    /// </ul>
    pub fn set_capacity_reservation_preference(
        mut self,
        input: std::option::Option<crate::types::CapacityReservationPreference>,
    ) -> Self {
        self.capacity_reservation_preference = input;
        self
    }
    /// <p>Information about the target Capacity Reservation or Capacity Reservation group.</p>
    pub fn capacity_reservation_target(
        mut self,
        input: crate::types::CapacityReservationTargetResponse,
    ) -> Self {
        self.capacity_reservation_target = Some(input);
        self
    }
    /// <p>Information about the target Capacity Reservation or Capacity Reservation group.</p>
    pub fn set_capacity_reservation_target(
        mut self,
        input: std::option::Option<crate::types::CapacityReservationTargetResponse>,
    ) -> Self {
        self.capacity_reservation_target = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplateCapacityReservationSpecificationResponse`](crate::types::LaunchTemplateCapacityReservationSpecificationResponse).
    pub fn build(self) -> crate::types::LaunchTemplateCapacityReservationSpecificationResponse {
        crate::types::LaunchTemplateCapacityReservationSpecificationResponse {
            capacity_reservation_preference: self.capacity_reservation_preference,
            capacity_reservation_target: self.capacity_reservation_target,
        }
    }
}
