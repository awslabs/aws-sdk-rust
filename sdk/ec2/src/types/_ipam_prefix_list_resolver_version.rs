// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a version of an IPAM prefix list resolver.</p>
/// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
/// <p><b>Version example:</b></p>
/// <p><b>Initial State (Version 1)</b></p>
/// <p>Production environment:</p>
/// <ul>
/// <li>
/// <p>vpc-prod-web (10.1.0.0/16) - tagged env=prod</p></li>
/// <li>
/// <p>vpc-prod-db (10.2.0.0/16) - tagged env=prod</p></li>
/// </ul>
/// <p>Resolver rule: Include all VPCs tagged env=prod</p>
/// <p><b>Version 1 CIDRs:</b> 10.1.0.0/16, 10.2.0.0/16</p>
/// <p><b>Infrastructure Change (Version 2)</b></p>
/// <p>New VPC added:</p>
/// <ul>
/// <li>
/// <p>vpc-prod-api (10.3.0.0/16) - tagged env=prod</p></li>
/// </ul>
/// <p>IPAM automatically detects the change and creates a new version.</p>
/// <p><b>Version 2 CIDRs:</b> 10.1.0.0/16, 10.2.0.0/16, 10.3.0.0/16</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IpamPrefixListResolverVersion {
    /// <p>The version number of the IPAM prefix list resolver.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub version: ::std::option::Option<i64>,
}
impl IpamPrefixListResolverVersion {
    /// <p>The version number of the IPAM prefix list resolver.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn version(&self) -> ::std::option::Option<i64> {
        self.version
    }
}
impl IpamPrefixListResolverVersion {
    /// Creates a new builder-style object to manufacture [`IpamPrefixListResolverVersion`](crate::types::IpamPrefixListResolverVersion).
    pub fn builder() -> crate::types::builders::IpamPrefixListResolverVersionBuilder {
        crate::types::builders::IpamPrefixListResolverVersionBuilder::default()
    }
}

/// A builder for [`IpamPrefixListResolverVersion`](crate::types::IpamPrefixListResolverVersion).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IpamPrefixListResolverVersionBuilder {
    pub(crate) version: ::std::option::Option<i64>,
}
impl IpamPrefixListResolverVersionBuilder {
    /// <p>The version number of the IPAM prefix list resolver.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn version(mut self, input: i64) -> Self {
        self.version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the IPAM prefix list resolver.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn set_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version number of the IPAM prefix list resolver.</p>
    /// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
    pub fn get_version(&self) -> &::std::option::Option<i64> {
        &self.version
    }
    /// Consumes the builder and constructs a [`IpamPrefixListResolverVersion`](crate::types::IpamPrefixListResolverVersion).
    pub fn build(self) -> crate::types::IpamPrefixListResolverVersion {
        crate::types::IpamPrefixListResolverVersion { version: self.version }
    }
}
