// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The credit option for CPU usage of a T instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreditSpecificationRequest {
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub cpu_credits: ::std::option::Option<::std::string::String>,
}
impl CreditSpecificationRequest {
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn cpu_credits(&self) -> ::std::option::Option<&str> {
        self.cpu_credits.as_deref()
    }
}
impl CreditSpecificationRequest {
    /// Creates a new builder-style object to manufacture [`CreditSpecificationRequest`](crate::types::CreditSpecificationRequest).
    pub fn builder() -> crate::types::builders::CreditSpecificationRequestBuilder {
        crate::types::builders::CreditSpecificationRequestBuilder::default()
    }
}

/// A builder for [`CreditSpecificationRequest`](crate::types::CreditSpecificationRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreditSpecificationRequestBuilder {
    pub(crate) cpu_credits: ::std::option::Option<::std::string::String>,
}
impl CreditSpecificationRequestBuilder {
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    /// This field is required.
    pub fn cpu_credits(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cpu_credits = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn set_cpu_credits(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cpu_credits = input;
        self
    }
    /// <p>The credit option for CPU usage of a T instance.</p>
    /// <p>Valid values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn get_cpu_credits(&self) -> &::std::option::Option<::std::string::String> {
        &self.cpu_credits
    }
    /// Consumes the builder and constructs a [`CreditSpecificationRequest`](crate::types::CreditSpecificationRequest).
    pub fn build(self) -> crate::types::CreditSpecificationRequest {
        crate::types::CreditSpecificationRequest {
            cpu_credits: self.cpu_credits,
        }
    }
}
