// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the destination options for a flow log.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DestinationOptionsResponse {
    /// <p>The format for the flow log.</p>
    #[doc(hidden)]
    pub file_format: std::option::Option<crate::types::DestinationFileFormat>,
    /// <p>Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.</p>
    #[doc(hidden)]
    pub hive_compatible_partitions: std::option::Option<bool>,
    /// <p>Indicates whether to partition the flow log per hour.</p>
    #[doc(hidden)]
    pub per_hour_partition: std::option::Option<bool>,
}
impl DestinationOptionsResponse {
    /// <p>The format for the flow log.</p>
    pub fn file_format(&self) -> std::option::Option<&crate::types::DestinationFileFormat> {
        self.file_format.as_ref()
    }
    /// <p>Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.</p>
    pub fn hive_compatible_partitions(&self) -> std::option::Option<bool> {
        self.hive_compatible_partitions
    }
    /// <p>Indicates whether to partition the flow log per hour.</p>
    pub fn per_hour_partition(&self) -> std::option::Option<bool> {
        self.per_hour_partition
    }
}
impl DestinationOptionsResponse {
    /// Creates a new builder-style object to manufacture [`DestinationOptionsResponse`](crate::types::DestinationOptionsResponse).
    pub fn builder() -> crate::types::builders::DestinationOptionsResponseBuilder {
        crate::types::builders::DestinationOptionsResponseBuilder::default()
    }
}

/// A builder for [`DestinationOptionsResponse`](crate::types::DestinationOptionsResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationOptionsResponseBuilder {
    pub(crate) file_format: std::option::Option<crate::types::DestinationFileFormat>,
    pub(crate) hive_compatible_partitions: std::option::Option<bool>,
    pub(crate) per_hour_partition: std::option::Option<bool>,
}
impl DestinationOptionsResponseBuilder {
    /// <p>The format for the flow log.</p>
    pub fn file_format(mut self, input: crate::types::DestinationFileFormat) -> Self {
        self.file_format = Some(input);
        self
    }
    /// <p>The format for the flow log.</p>
    pub fn set_file_format(
        mut self,
        input: std::option::Option<crate::types::DestinationFileFormat>,
    ) -> Self {
        self.file_format = input;
        self
    }
    /// <p>Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.</p>
    pub fn hive_compatible_partitions(mut self, input: bool) -> Self {
        self.hive_compatible_partitions = Some(input);
        self
    }
    /// <p>Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.</p>
    pub fn set_hive_compatible_partitions(mut self, input: std::option::Option<bool>) -> Self {
        self.hive_compatible_partitions = input;
        self
    }
    /// <p>Indicates whether to partition the flow log per hour.</p>
    pub fn per_hour_partition(mut self, input: bool) -> Self {
        self.per_hour_partition = Some(input);
        self
    }
    /// <p>Indicates whether to partition the flow log per hour.</p>
    pub fn set_per_hour_partition(mut self, input: std::option::Option<bool>) -> Self {
        self.per_hour_partition = input;
        self
    }
    /// Consumes the builder and constructs a [`DestinationOptionsResponse`](crate::types::DestinationOptionsResponse).
    pub fn build(self) -> crate::types::DestinationOptionsResponse {
        crate::types::DestinationOptionsResponse {
            file_format: self.file_format,
            hive_compatible_partitions: self.hive_compatible_partitions,
            per_hour_partition: self.per_hour_partition,
        }
    }
}
