// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the data feed for a Spot Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SpotDatafeedSubscription {
    /// <p>The name of the Amazon S3 bucket where the Spot Instance data feed is located.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The fault codes for the Spot Instance request, if any.</p>
    #[doc(hidden)]
    pub fault: std::option::Option<crate::types::SpotInstanceStateFault>,
    /// <p>The Amazon Web Services account ID of the account.</p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>The prefix for the data feed files.</p>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p>The state of the Spot Instance data feed subscription.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::DatafeedSubscriptionState>,
}
impl SpotDatafeedSubscription {
    /// <p>The name of the Amazon S3 bucket where the Spot Instance data feed is located.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The fault codes for the Spot Instance request, if any.</p>
    pub fn fault(&self) -> std::option::Option<&crate::types::SpotInstanceStateFault> {
        self.fault.as_ref()
    }
    /// <p>The Amazon Web Services account ID of the account.</p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>The prefix for the data feed files.</p>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>The state of the Spot Instance data feed subscription.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::DatafeedSubscriptionState> {
        self.state.as_ref()
    }
}
impl SpotDatafeedSubscription {
    /// Creates a new builder-style object to manufacture [`SpotDatafeedSubscription`](crate::types::SpotDatafeedSubscription).
    pub fn builder() -> crate::types::builders::SpotDatafeedSubscriptionBuilder {
        crate::types::builders::SpotDatafeedSubscriptionBuilder::default()
    }
}

/// A builder for [`SpotDatafeedSubscription`](crate::types::SpotDatafeedSubscription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpotDatafeedSubscriptionBuilder {
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) fault: std::option::Option<crate::types::SpotInstanceStateFault>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::DatafeedSubscriptionState>,
}
impl SpotDatafeedSubscriptionBuilder {
    /// <p>The name of the Amazon S3 bucket where the Spot Instance data feed is located.</p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket where the Spot Instance data feed is located.</p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The fault codes for the Spot Instance request, if any.</p>
    pub fn fault(mut self, input: crate::types::SpotInstanceStateFault) -> Self {
        self.fault = Some(input);
        self
    }
    /// <p>The fault codes for the Spot Instance request, if any.</p>
    pub fn set_fault(
        mut self,
        input: std::option::Option<crate::types::SpotInstanceStateFault>,
    ) -> Self {
        self.fault = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the account.</p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the account.</p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>The prefix for the data feed files.</p>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p>The prefix for the data feed files.</p>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The state of the Spot Instance data feed subscription.</p>
    pub fn state(mut self, input: crate::types::DatafeedSubscriptionState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the Spot Instance data feed subscription.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::DatafeedSubscriptionState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`SpotDatafeedSubscription`](crate::types::SpotDatafeedSubscription).
    pub fn build(self) -> crate::types::SpotDatafeedSubscription {
        crate::types::SpotDatafeedSubscription {
            bucket: self.bucket,
            fault: self.fault,
            owner_id: self.owner_id,
            prefix: self.prefix,
            state: self.state,
        }
    }
}
