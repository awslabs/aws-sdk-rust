// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a transit gateway Connect attachment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransitGatewayConnect {
    /// <p>The ID of the Connect attachment.</p>
    pub transit_gateway_attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the attachment from which the Connect attachment was created.</p>
    pub transport_transit_gateway_attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the attachment.</p>
    pub state: ::std::option::Option<crate::types::TransitGatewayAttachmentState>,
    /// <p>The creation time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Connect attachment options.</p>
    pub options: ::std::option::Option<crate::types::TransitGatewayConnectOptions>,
    /// <p>The tags for the attachment.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl TransitGatewayConnect {
    /// <p>The ID of the Connect attachment.</p>
    pub fn transit_gateway_attachment_id(&self) -> ::std::option::Option<&str> {
        self.transit_gateway_attachment_id.as_deref()
    }
    /// <p>The ID of the attachment from which the Connect attachment was created.</p>
    pub fn transport_transit_gateway_attachment_id(&self) -> ::std::option::Option<&str> {
        self.transport_transit_gateway_attachment_id.as_deref()
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn transit_gateway_id(&self) -> ::std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
    /// <p>The state of the attachment.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::TransitGatewayAttachmentState> {
        self.state.as_ref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The Connect attachment options.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::TransitGatewayConnectOptions> {
        self.options.as_ref()
    }
    /// <p>The tags for the attachment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl TransitGatewayConnect {
    /// Creates a new builder-style object to manufacture [`TransitGatewayConnect`](crate::types::TransitGatewayConnect).
    pub fn builder() -> crate::types::builders::TransitGatewayConnectBuilder {
        crate::types::builders::TransitGatewayConnectBuilder::default()
    }
}

/// A builder for [`TransitGatewayConnect`](crate::types::TransitGatewayConnect).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransitGatewayConnectBuilder {
    pub(crate) transit_gateway_attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) transport_transit_gateway_attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) transit_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::TransitGatewayAttachmentState>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) options: ::std::option::Option<crate::types::TransitGatewayConnectOptions>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl TransitGatewayConnectBuilder {
    /// <p>The ID of the Connect attachment.</p>
    pub fn transit_gateway_attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transit_gateway_attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Connect attachment.</p>
    pub fn set_transit_gateway_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transit_gateway_attachment_id = input;
        self
    }
    /// <p>The ID of the Connect attachment.</p>
    pub fn get_transit_gateway_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transit_gateway_attachment_id
    }
    /// <p>The ID of the attachment from which the Connect attachment was created.</p>
    pub fn transport_transit_gateway_attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transport_transit_gateway_attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the attachment from which the Connect attachment was created.</p>
    pub fn set_transport_transit_gateway_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transport_transit_gateway_attachment_id = input;
        self
    }
    /// <p>The ID of the attachment from which the Connect attachment was created.</p>
    pub fn get_transport_transit_gateway_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transport_transit_gateway_attachment_id
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn transit_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transit_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn set_transit_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p>The ID of the transit gateway.</p>
    pub fn get_transit_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transit_gateway_id
    }
    /// <p>The state of the attachment.</p>
    pub fn state(mut self, input: crate::types::TransitGatewayAttachmentState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the attachment.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::TransitGatewayAttachmentState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the attachment.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::TransitGatewayAttachmentState> {
        &self.state
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The Connect attachment options.</p>
    pub fn options(mut self, input: crate::types::TransitGatewayConnectOptions) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Connect attachment options.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::TransitGatewayConnectOptions>) -> Self {
        self.options = input;
        self
    }
    /// <p>The Connect attachment options.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::TransitGatewayConnectOptions> {
        &self.options
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the attachment.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags for the attachment.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags for the attachment.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`TransitGatewayConnect`](crate::types::TransitGatewayConnect).
    pub fn build(self) -> crate::types::TransitGatewayConnect {
        crate::types::TransitGatewayConnect {
            transit_gateway_attachment_id: self.transit_gateway_attachment_id,
            transport_transit_gateway_attachment_id: self.transport_transit_gateway_attachment_id,
            transit_gateway_id: self.transit_gateway_id,
            state: self.state,
            creation_time: self.creation_time,
            options: self.options,
            tags: self.tags,
        }
    }
}
