// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents dimension values for capacity metrics, including resource identifiers, geographic information, and reservation details used for grouping and filtering capacity data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityManagerDimension {
    /// <p>The Amazon Web Services Region where the capacity resource is located.</p>
    pub resource_region: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the Availability Zone where the capacity resource is located.</p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID that owns the capacity resource.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The EC2 instance family of the capacity resource.</p>
    pub instance_family: ::std::option::Option<::std::string::String>,
    /// <p>The specific EC2 instance type of the capacity resource.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The platform or operating system of the instance.</p>
    pub instance_platform: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the capacity reservation. This provides a unique identifier that can be used across Amazon Web Services services to reference the specific reservation.</p>
    pub reservation_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the capacity reservation.</p>
    pub reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of capacity reservation.</p>
    pub reservation_type: ::std::option::Option<crate::types::ReservationType>,
    /// <p>The timestamp when the capacity reservation was originally created, in milliseconds since epoch. This differs from the start timestamp as reservations can be created before they become active.</p>
    pub reservation_create_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the capacity reservation becomes active and available for use, in milliseconds since epoch. This is when the reservation begins providing capacity.</p>
    pub reservation_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the capacity reservation expires and is no longer available, in milliseconds since epoch. After this time, the reservation will not provide any capacity.</p>
    pub reservation_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of end date for the capacity reservation. This indicates whether the reservation has a fixed end date, is open-ended, or follows a specific termination pattern.</p>
    pub reservation_end_date_type: ::std::option::Option<crate::types::ReservationEndDateType>,
    /// <p>The tenancy of the EC2 instances associated with this capacity dimension. Valid values are 'default' for shared tenancy, 'dedicated' for dedicated instances, or 'host' for dedicated hosts.</p>
    pub tenancy: ::std::option::Option<crate::types::CapacityTenancy>,
    /// <p>The current state of the capacity reservation.</p>
    pub reservation_state: ::std::option::Option<crate::types::ReservationState>,
    /// <p>The instance matching criteria for the capacity reservation, determining how instances are matched to the reservation.</p>
    pub reservation_instance_match_criteria: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID that is financially responsible for unused capacity reservation costs.</p>
    pub reservation_unused_financial_owner: ::std::option::Option<::std::string::String>,
}
impl CapacityManagerDimension {
    /// <p>The Amazon Web Services Region where the capacity resource is located.</p>
    pub fn resource_region(&self) -> ::std::option::Option<&str> {
        self.resource_region.as_deref()
    }
    /// <p>The unique identifier of the Availability Zone where the capacity resource is located.</p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID that owns the capacity resource.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The EC2 instance family of the capacity resource.</p>
    pub fn instance_family(&self) -> ::std::option::Option<&str> {
        self.instance_family.as_deref()
    }
    /// <p>The specific EC2 instance type of the capacity resource.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The platform or operating system of the instance.</p>
    pub fn instance_platform(&self) -> ::std::option::Option<&str> {
        self.instance_platform.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the capacity reservation. This provides a unique identifier that can be used across Amazon Web Services services to reference the specific reservation.</p>
    pub fn reservation_arn(&self) -> ::std::option::Option<&str> {
        self.reservation_arn.as_deref()
    }
    /// <p>The unique identifier of the capacity reservation.</p>
    pub fn reservation_id(&self) -> ::std::option::Option<&str> {
        self.reservation_id.as_deref()
    }
    /// <p>The type of capacity reservation.</p>
    pub fn reservation_type(&self) -> ::std::option::Option<&crate::types::ReservationType> {
        self.reservation_type.as_ref()
    }
    /// <p>The timestamp when the capacity reservation was originally created, in milliseconds since epoch. This differs from the start timestamp as reservations can be created before they become active.</p>
    pub fn reservation_create_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.reservation_create_timestamp.as_ref()
    }
    /// <p>The timestamp when the capacity reservation becomes active and available for use, in milliseconds since epoch. This is when the reservation begins providing capacity.</p>
    pub fn reservation_start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.reservation_start_timestamp.as_ref()
    }
    /// <p>The timestamp when the capacity reservation expires and is no longer available, in milliseconds since epoch. After this time, the reservation will not provide any capacity.</p>
    pub fn reservation_end_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.reservation_end_timestamp.as_ref()
    }
    /// <p>The type of end date for the capacity reservation. This indicates whether the reservation has a fixed end date, is open-ended, or follows a specific termination pattern.</p>
    pub fn reservation_end_date_type(&self) -> ::std::option::Option<&crate::types::ReservationEndDateType> {
        self.reservation_end_date_type.as_ref()
    }
    /// <p>The tenancy of the EC2 instances associated with this capacity dimension. Valid values are 'default' for shared tenancy, 'dedicated' for dedicated instances, or 'host' for dedicated hosts.</p>
    pub fn tenancy(&self) -> ::std::option::Option<&crate::types::CapacityTenancy> {
        self.tenancy.as_ref()
    }
    /// <p>The current state of the capacity reservation.</p>
    pub fn reservation_state(&self) -> ::std::option::Option<&crate::types::ReservationState> {
        self.reservation_state.as_ref()
    }
    /// <p>The instance matching criteria for the capacity reservation, determining how instances are matched to the reservation.</p>
    pub fn reservation_instance_match_criteria(&self) -> ::std::option::Option<&str> {
        self.reservation_instance_match_criteria.as_deref()
    }
    /// <p>The Amazon Web Services account ID that is financially responsible for unused capacity reservation costs.</p>
    pub fn reservation_unused_financial_owner(&self) -> ::std::option::Option<&str> {
        self.reservation_unused_financial_owner.as_deref()
    }
}
impl CapacityManagerDimension {
    /// Creates a new builder-style object to manufacture [`CapacityManagerDimension`](crate::types::CapacityManagerDimension).
    pub fn builder() -> crate::types::builders::CapacityManagerDimensionBuilder {
        crate::types::builders::CapacityManagerDimensionBuilder::default()
    }
}

/// A builder for [`CapacityManagerDimension`](crate::types::CapacityManagerDimension).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityManagerDimensionBuilder {
    pub(crate) resource_region: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_family: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) instance_platform: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_type: ::std::option::Option<crate::types::ReservationType>,
    pub(crate) reservation_create_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reservation_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reservation_end_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reservation_end_date_type: ::std::option::Option<crate::types::ReservationEndDateType>,
    pub(crate) tenancy: ::std::option::Option<crate::types::CapacityTenancy>,
    pub(crate) reservation_state: ::std::option::Option<crate::types::ReservationState>,
    pub(crate) reservation_instance_match_criteria: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_unused_financial_owner: ::std::option::Option<::std::string::String>,
}
impl CapacityManagerDimensionBuilder {
    /// <p>The Amazon Web Services Region where the capacity resource is located.</p>
    pub fn resource_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the capacity resource is located.</p>
    pub fn set_resource_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the capacity resource is located.</p>
    pub fn get_resource_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_region
    }
    /// <p>The unique identifier of the Availability Zone where the capacity resource is located.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the Availability Zone where the capacity resource is located.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p>The unique identifier of the Availability Zone where the capacity resource is located.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The Amazon Web Services account ID that owns the capacity resource.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the capacity resource.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the capacity resource.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The EC2 instance family of the capacity resource.</p>
    pub fn instance_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 instance family of the capacity resource.</p>
    pub fn set_instance_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_family = input;
        self
    }
    /// <p>The EC2 instance family of the capacity resource.</p>
    pub fn get_instance_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_family
    }
    /// <p>The specific EC2 instance type of the capacity resource.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specific EC2 instance type of the capacity resource.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The specific EC2 instance type of the capacity resource.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The platform or operating system of the instance.</p>
    pub fn instance_platform(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_platform = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The platform or operating system of the instance.</p>
    pub fn set_instance_platform(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_platform = input;
        self
    }
    /// <p>The platform or operating system of the instance.</p>
    pub fn get_instance_platform(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_platform
    }
    /// <p>The Amazon Resource Name (ARN) of the capacity reservation. This provides a unique identifier that can be used across Amazon Web Services services to reference the specific reservation.</p>
    pub fn reservation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the capacity reservation. This provides a unique identifier that can be used across Amazon Web Services services to reference the specific reservation.</p>
    pub fn set_reservation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the capacity reservation. This provides a unique identifier that can be used across Amazon Web Services services to reference the specific reservation.</p>
    pub fn get_reservation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_arn
    }
    /// <p>The unique identifier of the capacity reservation.</p>
    pub fn reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the capacity reservation.</p>
    pub fn set_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_id = input;
        self
    }
    /// <p>The unique identifier of the capacity reservation.</p>
    pub fn get_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_id
    }
    /// <p>The type of capacity reservation.</p>
    pub fn reservation_type(mut self, input: crate::types::ReservationType) -> Self {
        self.reservation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of capacity reservation.</p>
    pub fn set_reservation_type(mut self, input: ::std::option::Option<crate::types::ReservationType>) -> Self {
        self.reservation_type = input;
        self
    }
    /// <p>The type of capacity reservation.</p>
    pub fn get_reservation_type(&self) -> &::std::option::Option<crate::types::ReservationType> {
        &self.reservation_type
    }
    /// <p>The timestamp when the capacity reservation was originally created, in milliseconds since epoch. This differs from the start timestamp as reservations can be created before they become active.</p>
    pub fn reservation_create_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.reservation_create_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the capacity reservation was originally created, in milliseconds since epoch. This differs from the start timestamp as reservations can be created before they become active.</p>
    pub fn set_reservation_create_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.reservation_create_timestamp = input;
        self
    }
    /// <p>The timestamp when the capacity reservation was originally created, in milliseconds since epoch. This differs from the start timestamp as reservations can be created before they become active.</p>
    pub fn get_reservation_create_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.reservation_create_timestamp
    }
    /// <p>The timestamp when the capacity reservation becomes active and available for use, in milliseconds since epoch. This is when the reservation begins providing capacity.</p>
    pub fn reservation_start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.reservation_start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the capacity reservation becomes active and available for use, in milliseconds since epoch. This is when the reservation begins providing capacity.</p>
    pub fn set_reservation_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.reservation_start_timestamp = input;
        self
    }
    /// <p>The timestamp when the capacity reservation becomes active and available for use, in milliseconds since epoch. This is when the reservation begins providing capacity.</p>
    pub fn get_reservation_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.reservation_start_timestamp
    }
    /// <p>The timestamp when the capacity reservation expires and is no longer available, in milliseconds since epoch. After this time, the reservation will not provide any capacity.</p>
    pub fn reservation_end_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.reservation_end_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the capacity reservation expires and is no longer available, in milliseconds since epoch. After this time, the reservation will not provide any capacity.</p>
    pub fn set_reservation_end_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.reservation_end_timestamp = input;
        self
    }
    /// <p>The timestamp when the capacity reservation expires and is no longer available, in milliseconds since epoch. After this time, the reservation will not provide any capacity.</p>
    pub fn get_reservation_end_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.reservation_end_timestamp
    }
    /// <p>The type of end date for the capacity reservation. This indicates whether the reservation has a fixed end date, is open-ended, or follows a specific termination pattern.</p>
    pub fn reservation_end_date_type(mut self, input: crate::types::ReservationEndDateType) -> Self {
        self.reservation_end_date_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of end date for the capacity reservation. This indicates whether the reservation has a fixed end date, is open-ended, or follows a specific termination pattern.</p>
    pub fn set_reservation_end_date_type(mut self, input: ::std::option::Option<crate::types::ReservationEndDateType>) -> Self {
        self.reservation_end_date_type = input;
        self
    }
    /// <p>The type of end date for the capacity reservation. This indicates whether the reservation has a fixed end date, is open-ended, or follows a specific termination pattern.</p>
    pub fn get_reservation_end_date_type(&self) -> &::std::option::Option<crate::types::ReservationEndDateType> {
        &self.reservation_end_date_type
    }
    /// <p>The tenancy of the EC2 instances associated with this capacity dimension. Valid values are 'default' for shared tenancy, 'dedicated' for dedicated instances, or 'host' for dedicated hosts.</p>
    pub fn tenancy(mut self, input: crate::types::CapacityTenancy) -> Self {
        self.tenancy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The tenancy of the EC2 instances associated with this capacity dimension. Valid values are 'default' for shared tenancy, 'dedicated' for dedicated instances, or 'host' for dedicated hosts.</p>
    pub fn set_tenancy(mut self, input: ::std::option::Option<crate::types::CapacityTenancy>) -> Self {
        self.tenancy = input;
        self
    }
    /// <p>The tenancy of the EC2 instances associated with this capacity dimension. Valid values are 'default' for shared tenancy, 'dedicated' for dedicated instances, or 'host' for dedicated hosts.</p>
    pub fn get_tenancy(&self) -> &::std::option::Option<crate::types::CapacityTenancy> {
        &self.tenancy
    }
    /// <p>The current state of the capacity reservation.</p>
    pub fn reservation_state(mut self, input: crate::types::ReservationState) -> Self {
        self.reservation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the capacity reservation.</p>
    pub fn set_reservation_state(mut self, input: ::std::option::Option<crate::types::ReservationState>) -> Self {
        self.reservation_state = input;
        self
    }
    /// <p>The current state of the capacity reservation.</p>
    pub fn get_reservation_state(&self) -> &::std::option::Option<crate::types::ReservationState> {
        &self.reservation_state
    }
    /// <p>The instance matching criteria for the capacity reservation, determining how instances are matched to the reservation.</p>
    pub fn reservation_instance_match_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_instance_match_criteria = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance matching criteria for the capacity reservation, determining how instances are matched to the reservation.</p>
    pub fn set_reservation_instance_match_criteria(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_instance_match_criteria = input;
        self
    }
    /// <p>The instance matching criteria for the capacity reservation, determining how instances are matched to the reservation.</p>
    pub fn get_reservation_instance_match_criteria(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_instance_match_criteria
    }
    /// <p>The Amazon Web Services account ID that is financially responsible for unused capacity reservation costs.</p>
    pub fn reservation_unused_financial_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_unused_financial_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that is financially responsible for unused capacity reservation costs.</p>
    pub fn set_reservation_unused_financial_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_unused_financial_owner = input;
        self
    }
    /// <p>The Amazon Web Services account ID that is financially responsible for unused capacity reservation costs.</p>
    pub fn get_reservation_unused_financial_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_unused_financial_owner
    }
    /// Consumes the builder and constructs a [`CapacityManagerDimension`](crate::types::CapacityManagerDimension).
    pub fn build(self) -> crate::types::CapacityManagerDimension {
        crate::types::CapacityManagerDimension {
            resource_region: self.resource_region,
            availability_zone_id: self.availability_zone_id,
            account_id: self.account_id,
            instance_family: self.instance_family,
            instance_type: self.instance_type,
            instance_platform: self.instance_platform,
            reservation_arn: self.reservation_arn,
            reservation_id: self.reservation_id,
            reservation_type: self.reservation_type,
            reservation_create_timestamp: self.reservation_create_timestamp,
            reservation_start_timestamp: self.reservation_start_timestamp,
            reservation_end_timestamp: self.reservation_end_timestamp,
            reservation_end_date_type: self.reservation_end_date_type,
            tenancy: self.tenancy,
            reservation_state: self.reservation_state,
            reservation_instance_match_criteria: self.reservation_instance_match_criteria,
            reservation_unused_financial_owner: self.reservation_unused_financial_owner,
        }
    }
}
