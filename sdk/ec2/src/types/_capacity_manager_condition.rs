// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a filter condition for Capacity Manager queries. Contains dimension-based filtering criteria used to narrow down metric data and dimension results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CapacityManagerCondition {
    /// <p>The dimension-based condition that specifies how to filter the data based on dimension values.</p>
    pub dimension_condition: ::std::option::Option<crate::types::DimensionCondition>,
}
impl CapacityManagerCondition {
    /// <p>The dimension-based condition that specifies how to filter the data based on dimension values.</p>
    pub fn dimension_condition(&self) -> ::std::option::Option<&crate::types::DimensionCondition> {
        self.dimension_condition.as_ref()
    }
}
impl CapacityManagerCondition {
    /// Creates a new builder-style object to manufacture [`CapacityManagerCondition`](crate::types::CapacityManagerCondition).
    pub fn builder() -> crate::types::builders::CapacityManagerConditionBuilder {
        crate::types::builders::CapacityManagerConditionBuilder::default()
    }
}

/// A builder for [`CapacityManagerCondition`](crate::types::CapacityManagerCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CapacityManagerConditionBuilder {
    pub(crate) dimension_condition: ::std::option::Option<crate::types::DimensionCondition>,
}
impl CapacityManagerConditionBuilder {
    /// <p>The dimension-based condition that specifies how to filter the data based on dimension values.</p>
    pub fn dimension_condition(mut self, input: crate::types::DimensionCondition) -> Self {
        self.dimension_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dimension-based condition that specifies how to filter the data based on dimension values.</p>
    pub fn set_dimension_condition(mut self, input: ::std::option::Option<crate::types::DimensionCondition>) -> Self {
        self.dimension_condition = input;
        self
    }
    /// <p>The dimension-based condition that specifies how to filter the data based on dimension values.</p>
    pub fn get_dimension_condition(&self) -> &::std::option::Option<crate::types::DimensionCondition> {
        &self.dimension_condition
    }
    /// Consumes the builder and constructs a [`CapacityManagerCondition`](crate::types::CapacityManagerCondition).
    pub fn build(self) -> crate::types::CapacityManagerCondition {
        crate::types::CapacityManagerCondition {
            dimension_condition: self.dimension_condition,
        }
    }
}
