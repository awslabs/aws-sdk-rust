// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the import snapshot task.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnapshotTaskDetail {
    /// <p>The description of the snapshot.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The size of the disk in the snapshot, in GiB.</p>
    #[doc(hidden)]
    pub disk_image_size: std::option::Option<f64>,
    /// <p>Indicates whether the snapshot is encrypted.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The format of the disk image from which the snapshot is created.</p>
    #[doc(hidden)]
    pub format: std::option::Option<std::string::String>,
    /// <p>The identifier for the KMS key that was used to create the encrypted snapshot.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The percentage of completion for the import snapshot task.</p>
    #[doc(hidden)]
    pub progress: std::option::Option<std::string::String>,
    /// <p>The snapshot ID of the disk being imported.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>A brief status for the import snapshot task.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>A detailed status message for the import snapshot task.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The URL of the disk image from which the snapshot is created.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 bucket for the disk image.</p>
    #[doc(hidden)]
    pub user_bucket: std::option::Option<crate::types::UserBucketDetails>,
}
impl SnapshotTaskDetail {
    /// <p>The description of the snapshot.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The size of the disk in the snapshot, in GiB.</p>
    pub fn disk_image_size(&self) -> std::option::Option<f64> {
        self.disk_image_size
    }
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The format of the disk image from which the snapshot is created.</p>
    pub fn format(&self) -> std::option::Option<&str> {
        self.format.as_deref()
    }
    /// <p>The identifier for the KMS key that was used to create the encrypted snapshot.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The percentage of completion for the import snapshot task.</p>
    pub fn progress(&self) -> std::option::Option<&str> {
        self.progress.as_deref()
    }
    /// <p>The snapshot ID of the disk being imported.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>A brief status for the import snapshot task.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A detailed status message for the import snapshot task.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The URL of the disk image from which the snapshot is created.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The Amazon S3 bucket for the disk image.</p>
    pub fn user_bucket(&self) -> std::option::Option<&crate::types::UserBucketDetails> {
        self.user_bucket.as_ref()
    }
}
impl SnapshotTaskDetail {
    /// Creates a new builder-style object to manufacture [`SnapshotTaskDetail`](crate::types::SnapshotTaskDetail).
    pub fn builder() -> crate::types::builders::SnapshotTaskDetailBuilder {
        crate::types::builders::SnapshotTaskDetailBuilder::default()
    }
}

/// A builder for [`SnapshotTaskDetail`](crate::types::SnapshotTaskDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnapshotTaskDetailBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) disk_image_size: std::option::Option<f64>,
    pub(crate) encrypted: std::option::Option<bool>,
    pub(crate) format: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) progress: std::option::Option<std::string::String>,
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) user_bucket: std::option::Option<crate::types::UserBucketDetails>,
}
impl SnapshotTaskDetailBuilder {
    /// <p>The description of the snapshot.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the snapshot.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The size of the disk in the snapshot, in GiB.</p>
    pub fn disk_image_size(mut self, input: f64) -> Self {
        self.disk_image_size = Some(input);
        self
    }
    /// <p>The size of the disk in the snapshot, in GiB.</p>
    pub fn set_disk_image_size(mut self, input: std::option::Option<f64>) -> Self {
        self.disk_image_size = input;
        self
    }
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = Some(input);
        self
    }
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>The format of the disk image from which the snapshot is created.</p>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.format = Some(input.into());
        self
    }
    /// <p>The format of the disk image from which the snapshot is created.</p>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The identifier for the KMS key that was used to create the encrypted snapshot.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The identifier for the KMS key that was used to create the encrypted snapshot.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The percentage of completion for the import snapshot task.</p>
    pub fn progress(mut self, input: impl Into<std::string::String>) -> Self {
        self.progress = Some(input.into());
        self
    }
    /// <p>The percentage of completion for the import snapshot task.</p>
    pub fn set_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.progress = input;
        self
    }
    /// <p>The snapshot ID of the disk being imported.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The snapshot ID of the disk being imported.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>A brief status for the import snapshot task.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>A brief status for the import snapshot task.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>A detailed status message for the import snapshot task.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A detailed status message for the import snapshot task.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The URL of the disk image from which the snapshot is created.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The URL of the disk image from which the snapshot is created.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The Amazon S3 bucket for the disk image.</p>
    pub fn user_bucket(mut self, input: crate::types::UserBucketDetails) -> Self {
        self.user_bucket = Some(input);
        self
    }
    /// <p>The Amazon S3 bucket for the disk image.</p>
    pub fn set_user_bucket(
        mut self,
        input: std::option::Option<crate::types::UserBucketDetails>,
    ) -> Self {
        self.user_bucket = input;
        self
    }
    /// Consumes the builder and constructs a [`SnapshotTaskDetail`](crate::types::SnapshotTaskDetail).
    pub fn build(self) -> crate::types::SnapshotTaskDetail {
        crate::types::SnapshotTaskDetail {
            description: self.description,
            disk_image_size: self.disk_image_size,
            encrypted: self.encrypted,
            format: self.format,
            kms_key_id: self.kms_key_id,
            progress: self.progress,
            snapshot_id: self.snapshot_id,
            status: self.status,
            status_message: self.status_message,
            url: self.url,
            user_bucket: self.user_bucket,
        }
    }
}
