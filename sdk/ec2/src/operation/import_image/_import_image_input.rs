// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportImageInput {
    /// <p>The architecture of the virtual machine.</p>
    /// <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
    #[doc(hidden)]
    pub architecture: std::option::Option<std::string::String>,
    /// <p>The client-specific data.</p>
    #[doc(hidden)]
    pub client_data: std::option::Option<crate::types::ClientData>,
    /// <p>The token to enable idempotency for VM import requests.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>A description string for the import image task.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Information about the disk containers.</p>
    #[doc(hidden)]
    pub disk_containers: std::option::Option<std::vec::Vec<crate::types::ImageDiskContainer>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #[doc(hidden)]
    pub encrypted: std::option::Option<bool>,
    /// <p>The target hypervisor platform.</p>
    /// <p>Valid values: <code>xen</code> </p>
    #[doc(hidden)]
    pub hypervisor: std::option::Option<std::string::String>,
    /// <p>An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p>
    /// <p>The KMS key identifier may be provided in any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID</p> </li>
    /// <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li>
    /// <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li>
    /// <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li>
    /// </ul>
    /// <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p>
    /// <p>The specified KMS key must exist in the Region that the AMI is being copied to.</p>
    /// <p>Amazon EBS does not support asymmetric KMS keys.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
    /// <p>Specify <code>AWS</code> to replace the source-system license with an Amazon Web Services license or <code>BYOL</code> to retain the source-system license. Leaving this parameter undefined is the same as choosing <code>AWS</code> when importing a Windows Server operating system, and the same as choosing <code>BYOL</code> when importing a Windows client operating system (such as Windows 10) or a Linux operating system.</p>
    /// <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p>
    #[doc(hidden)]
    pub license_type: std::option::Option<std::string::String>,
    /// <p>The operating system of the virtual machine.</p>
    /// <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    #[doc(hidden)]
    pub role_name: std::option::Option<std::string::String>,
    /// <p>The ARNs of the license configurations.</p>
    #[doc(hidden)]
    pub license_specifications:
        std::option::Option<std::vec::Vec<crate::types::ImportImageLicenseConfigurationRequest>>,
    /// <p>The tags to apply to the import image task during creation.</p>
    #[doc(hidden)]
    pub tag_specifications: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>The usage operation value. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites">Licensing options</a> in the <i>VM Import/Export User Guide</i>.</p>
    #[doc(hidden)]
    pub usage_operation: std::option::Option<std::string::String>,
    /// <p>The boot mode of the virtual machine.</p>
    #[doc(hidden)]
    pub boot_mode: std::option::Option<crate::types::BootModeValues>,
}
impl ImportImageInput {
    /// <p>The architecture of the virtual machine.</p>
    /// <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
    pub fn architecture(&self) -> std::option::Option<&str> {
        self.architecture.as_deref()
    }
    /// <p>The client-specific data.</p>
    pub fn client_data(&self) -> std::option::Option<&crate::types::ClientData> {
        self.client_data.as_ref()
    }
    /// <p>The token to enable idempotency for VM import requests.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A description string for the import image task.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the disk containers.</p>
    pub fn disk_containers(&self) -> std::option::Option<&[crate::types::ImageDiskContainer]> {
        self.disk_containers.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn encrypted(&self) -> std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The target hypervisor platform.</p>
    /// <p>Valid values: <code>xen</code> </p>
    pub fn hypervisor(&self) -> std::option::Option<&str> {
        self.hypervisor.as_deref()
    }
    /// <p>An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p>
    /// <p>The KMS key identifier may be provided in any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID</p> </li>
    /// <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li>
    /// <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li>
    /// <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li>
    /// </ul>
    /// <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p>
    /// <p>The specified KMS key must exist in the Region that the AMI is being copied to.</p>
    /// <p>Amazon EBS does not support asymmetric KMS keys.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
    /// <p>Specify <code>AWS</code> to replace the source-system license with an Amazon Web Services license or <code>BYOL</code> to retain the source-system license. Leaving this parameter undefined is the same as choosing <code>AWS</code> when importing a Windows Server operating system, and the same as choosing <code>BYOL</code> when importing a Windows client operating system (such as Windows 10) or a Linux operating system.</p>
    /// <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p>
    pub fn license_type(&self) -> std::option::Option<&str> {
        self.license_type.as_deref()
    }
    /// <p>The operating system of the virtual machine.</p>
    /// <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    pub fn role_name(&self) -> std::option::Option<&str> {
        self.role_name.as_deref()
    }
    /// <p>The ARNs of the license configurations.</p>
    pub fn license_specifications(
        &self,
    ) -> std::option::Option<&[crate::types::ImportImageLicenseConfigurationRequest]> {
        self.license_specifications.as_deref()
    }
    /// <p>The tags to apply to the import image task during creation.</p>
    pub fn tag_specifications(&self) -> std::option::Option<&[crate::types::TagSpecification]> {
        self.tag_specifications.as_deref()
    }
    /// <p>The usage operation value. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites">Licensing options</a> in the <i>VM Import/Export User Guide</i>.</p>
    pub fn usage_operation(&self) -> std::option::Option<&str> {
        self.usage_operation.as_deref()
    }
    /// <p>The boot mode of the virtual machine.</p>
    pub fn boot_mode(&self) -> std::option::Option<&crate::types::BootModeValues> {
        self.boot_mode.as_ref()
    }
}
impl ImportImageInput {
    /// Creates a new builder-style object to manufacture [`ImportImageInput`](crate::operation::import_image::ImportImageInput).
    pub fn builder() -> crate::operation::import_image::builders::ImportImageInputBuilder {
        crate::operation::import_image::builders::ImportImageInputBuilder::default()
    }
}

/// A builder for [`ImportImageInput`](crate::operation::import_image::ImportImageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportImageInputBuilder {
    pub(crate) architecture: std::option::Option<std::string::String>,
    pub(crate) client_data: std::option::Option<crate::types::ClientData>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) disk_containers:
        std::option::Option<std::vec::Vec<crate::types::ImageDiskContainer>>,
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) encrypted: std::option::Option<bool>,
    pub(crate) hypervisor: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) license_type: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) role_name: std::option::Option<std::string::String>,
    pub(crate) license_specifications:
        std::option::Option<std::vec::Vec<crate::types::ImportImageLicenseConfigurationRequest>>,
    pub(crate) tag_specifications:
        std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) usage_operation: std::option::Option<std::string::String>,
    pub(crate) boot_mode: std::option::Option<crate::types::BootModeValues>,
}
impl ImportImageInputBuilder {
    /// <p>The architecture of the virtual machine.</p>
    /// <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
    pub fn architecture(mut self, input: impl Into<std::string::String>) -> Self {
        self.architecture = Some(input.into());
        self
    }
    /// <p>The architecture of the virtual machine.</p>
    /// <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
    pub fn set_architecture(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The client-specific data.</p>
    pub fn client_data(mut self, input: crate::types::ClientData) -> Self {
        self.client_data = Some(input);
        self
    }
    /// <p>The client-specific data.</p>
    pub fn set_client_data(mut self, input: std::option::Option<crate::types::ClientData>) -> Self {
        self.client_data = input;
        self
    }
    /// <p>The token to enable idempotency for VM import requests.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The token to enable idempotency for VM import requests.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A description string for the import image task.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description string for the import image task.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `disk_containers`.
    ///
    /// To override the contents of this collection use [`set_disk_containers`](Self::set_disk_containers).
    ///
    /// <p>Information about the disk containers.</p>
    pub fn disk_containers(mut self, input: crate::types::ImageDiskContainer) -> Self {
        let mut v = self.disk_containers.unwrap_or_default();
        v.push(input);
        self.disk_containers = Some(v);
        self
    }
    /// <p>Information about the disk containers.</p>
    pub fn set_disk_containers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImageDiskContainer>>,
    ) -> Self {
        self.disk_containers = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = Some(input);
        self
    }
    /// <p>Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn set_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>The target hypervisor platform.</p>
    /// <p>Valid values: <code>xen</code> </p>
    pub fn hypervisor(mut self, input: impl Into<std::string::String>) -> Self {
        self.hypervisor = Some(input.into());
        self
    }
    /// <p>The target hypervisor platform.</p>
    /// <p>Valid values: <code>xen</code> </p>
    pub fn set_hypervisor(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hypervisor = input;
        self
    }
    /// <p>An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p>
    /// <p>The KMS key identifier may be provided in any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID</p> </li>
    /// <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li>
    /// <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li>
    /// <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li>
    /// </ul>
    /// <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p>
    /// <p>The specified KMS key must exist in the Region that the AMI is being copied to.</p>
    /// <p>Amazon EBS does not support asymmetric KMS keys.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p>
    /// <p>The KMS key identifier may be provided in any of the following formats: </p>
    /// <ul>
    /// <li> <p>Key ID</p> </li>
    /// <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li>
    /// <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>key</code> namespace, and then the key ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li>
    /// <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the <code>alias</code> namespace, and then the key alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li>
    /// </ul>
    /// <p>Amazon Web Services parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p>
    /// <p>The specified KMS key must exist in the Region that the AMI is being copied to.</p>
    /// <p>Amazon EBS does not support asymmetric KMS keys.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
    /// <p>Specify <code>AWS</code> to replace the source-system license with an Amazon Web Services license or <code>BYOL</code> to retain the source-system license. Leaving this parameter undefined is the same as choosing <code>AWS</code> when importing a Windows Server operating system, and the same as choosing <code>BYOL</code> when importing a Windows client operating system (such as Windows 10) or a Linux operating system.</p>
    /// <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p>
    pub fn license_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_type = Some(input.into());
        self
    }
    /// <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p>
    /// <p>Specify <code>AWS</code> to replace the source-system license with an Amazon Web Services license or <code>BYOL</code> to retain the source-system license. Leaving this parameter undefined is the same as choosing <code>AWS</code> when importing a Windows Server operating system, and the same as choosing <code>BYOL</code> when importing a Windows client operating system (such as Windows 10) or a Linux operating system.</p>
    /// <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p>
    pub fn set_license_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_type = input;
        self
    }
    /// <p>The operating system of the virtual machine.</p>
    /// <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>The operating system of the virtual machine.</p>
    /// <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    pub fn role_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_name = Some(input.into());
        self
    }
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    pub fn set_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_name = input;
        self
    }
    /// Appends an item to `license_specifications`.
    ///
    /// To override the contents of this collection use [`set_license_specifications`](Self::set_license_specifications).
    ///
    /// <p>The ARNs of the license configurations.</p>
    pub fn license_specifications(
        mut self,
        input: crate::types::ImportImageLicenseConfigurationRequest,
    ) -> Self {
        let mut v = self.license_specifications.unwrap_or_default();
        v.push(input);
        self.license_specifications = Some(v);
        self
    }
    /// <p>The ARNs of the license configurations.</p>
    pub fn set_license_specifications(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::ImportImageLicenseConfigurationRequest>,
        >,
    ) -> Self {
        self.license_specifications = input;
        self
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the import image task during creation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = Some(v);
        self
    }
    /// <p>The tags to apply to the import image task during creation.</p>
    pub fn set_tag_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    ) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The usage operation value. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites">Licensing options</a> in the <i>VM Import/Export User Guide</i>.</p>
    pub fn usage_operation(mut self, input: impl Into<std::string::String>) -> Self {
        self.usage_operation = Some(input.into());
        self
    }
    /// <p>The usage operation value. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#prerequisites">Licensing options</a> in the <i>VM Import/Export User Guide</i>.</p>
    pub fn set_usage_operation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.usage_operation = input;
        self
    }
    /// <p>The boot mode of the virtual machine.</p>
    pub fn boot_mode(mut self, input: crate::types::BootModeValues) -> Self {
        self.boot_mode = Some(input);
        self
    }
    /// <p>The boot mode of the virtual machine.</p>
    pub fn set_boot_mode(
        mut self,
        input: std::option::Option<crate::types::BootModeValues>,
    ) -> Self {
        self.boot_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportImageInput`](crate::operation::import_image::ImportImageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::import_image::ImportImageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::import_image::ImportImageInput {
            architecture: self.architecture,
            client_data: self.client_data,
            client_token: self.client_token,
            description: self.description,
            disk_containers: self.disk_containers,
            dry_run: self.dry_run,
            encrypted: self.encrypted,
            hypervisor: self.hypervisor,
            kms_key_id: self.kms_key_id,
            license_type: self.license_type,
            platform: self.platform,
            role_name: self.role_name,
            license_specifications: self.license_specifications,
            tag_specifications: self.tag_specifications,
            usage_operation: self.usage_operation,
            boot_mode: self.boot_mode,
        })
    }
}
