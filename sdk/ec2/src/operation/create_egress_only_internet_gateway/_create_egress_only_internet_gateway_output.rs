// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateEgressOnlyInternetGatewayOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Information about the egress-only internet gateway.</p>
    #[doc(hidden)]
    pub egress_only_internet_gateway: std::option::Option<crate::types::EgressOnlyInternetGateway>,
    _request_id: Option<String>,
}
impl CreateEgressOnlyInternetGatewayOutput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Information about the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway(
        &self,
    ) -> std::option::Option<&crate::types::EgressOnlyInternetGateway> {
        self.egress_only_internet_gateway.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateEgressOnlyInternetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateEgressOnlyInternetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`CreateEgressOnlyInternetGatewayOutput`](crate::operation::create_egress_only_internet_gateway::CreateEgressOnlyInternetGatewayOutput).
    pub fn builder() -> crate::operation::create_egress_only_internet_gateway::builders::CreateEgressOnlyInternetGatewayOutputBuilder{
        crate::operation::create_egress_only_internet_gateway::builders::CreateEgressOnlyInternetGatewayOutputBuilder::default()
    }
}

/// A builder for [`CreateEgressOnlyInternetGatewayOutput`](crate::operation::create_egress_only_internet_gateway::CreateEgressOnlyInternetGatewayOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateEgressOnlyInternetGatewayOutputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) egress_only_internet_gateway:
        std::option::Option<crate::types::EgressOnlyInternetGateway>,
    _request_id: Option<String>,
}
impl CreateEgressOnlyInternetGatewayOutputBuilder {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Information about the egress-only internet gateway.</p>
    pub fn egress_only_internet_gateway(
        mut self,
        input: crate::types::EgressOnlyInternetGateway,
    ) -> Self {
        self.egress_only_internet_gateway = Some(input);
        self
    }
    /// <p>Information about the egress-only internet gateway.</p>
    pub fn set_egress_only_internet_gateway(
        mut self,
        input: std::option::Option<crate::types::EgressOnlyInternetGateway>,
    ) -> Self {
        self.egress_only_internet_gateway = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateEgressOnlyInternetGatewayOutput`](crate::operation::create_egress_only_internet_gateway::CreateEgressOnlyInternetGatewayOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_egress_only_internet_gateway::CreateEgressOnlyInternetGatewayOutput
    {
        crate::operation::create_egress_only_internet_gateway::CreateEgressOnlyInternetGatewayOutput {
            client_token: self.client_token
            ,
            egress_only_internet_gateway: self.egress_only_internet_gateway
            ,
            _request_id: self._request_id,
        }
    }
}
