// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeNetworkInsightsAnalysesInput {
    /// <p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>
    pub network_insights_analysis_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ID of the path. You must specify either a path ID or analysis IDs.</p>
    pub network_insights_path_id: ::std::option::Option<::std::string::String>,
    /// <p>The time when the network insights analyses started.</p>
    pub analysis_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the network insights analyses ended.</p>
    pub analysis_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The filters. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>path-found - A Boolean value that indicates whether a feasible path is found.</p> </li>
    /// <li> <p>status - The status of the analysis (running | succeeded | failed).</p> </li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The token for the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeNetworkInsightsAnalysesInput {
    /// <p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_insights_analysis_ids.is_none()`.
    pub fn network_insights_analysis_ids(&self) -> &[::std::string::String] {
        self.network_insights_analysis_ids.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the path. You must specify either a path ID or analysis IDs.</p>
    pub fn network_insights_path_id(&self) -> ::std::option::Option<&str> {
        self.network_insights_path_id.as_deref()
    }
    /// <p>The time when the network insights analyses started.</p>
    pub fn analysis_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.analysis_start_time.as_ref()
    }
    /// <p>The time when the network insights analyses ended.</p>
    pub fn analysis_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.analysis_end_time.as_ref()
    }
    /// <p>The filters. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>path-found - A Boolean value that indicates whether a feasible path is found.</p> </li>
    /// <li> <p>status - The status of the analysis (running | succeeded | failed).</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeNetworkInsightsAnalysesInput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInsightsAnalysesInput`](crate::operation::describe_network_insights_analyses::DescribeNetworkInsightsAnalysesInput).
    pub fn builder() -> crate::operation::describe_network_insights_analyses::builders::DescribeNetworkInsightsAnalysesInputBuilder {
        crate::operation::describe_network_insights_analyses::builders::DescribeNetworkInsightsAnalysesInputBuilder::default()
    }
}

/// A builder for [`DescribeNetworkInsightsAnalysesInput`](crate::operation::describe_network_insights_analyses::DescribeNetworkInsightsAnalysesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeNetworkInsightsAnalysesInputBuilder {
    pub(crate) network_insights_analysis_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) network_insights_path_id: ::std::option::Option<::std::string::String>,
    pub(crate) analysis_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) analysis_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeNetworkInsightsAnalysesInputBuilder {
    /// Appends an item to `network_insights_analysis_ids`.
    ///
    /// To override the contents of this collection use [`set_network_insights_analysis_ids`](Self::set_network_insights_analysis_ids).
    ///
    /// <p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>
    pub fn network_insights_analysis_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_insights_analysis_ids.unwrap_or_default();
        v.push(input.into());
        self.network_insights_analysis_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>
    pub fn set_network_insights_analysis_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_insights_analysis_ids = input;
        self
    }
    /// <p>The ID of the network insights analyses. You must specify either analysis IDs or a path ID.</p>
    pub fn get_network_insights_analysis_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_insights_analysis_ids
    }
    /// <p>The ID of the path. You must specify either a path ID or analysis IDs.</p>
    pub fn network_insights_path_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_insights_path_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the path. You must specify either a path ID or analysis IDs.</p>
    pub fn set_network_insights_path_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_insights_path_id = input;
        self
    }
    /// <p>The ID of the path. You must specify either a path ID or analysis IDs.</p>
    pub fn get_network_insights_path_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_insights_path_id
    }
    /// <p>The time when the network insights analyses started.</p>
    pub fn analysis_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.analysis_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the network insights analyses started.</p>
    pub fn set_analysis_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.analysis_start_time = input;
        self
    }
    /// <p>The time when the network insights analyses started.</p>
    pub fn get_analysis_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.analysis_start_time
    }
    /// <p>The time when the network insights analyses ended.</p>
    pub fn analysis_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.analysis_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the network insights analyses ended.</p>
    pub fn set_analysis_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.analysis_end_time = input;
        self
    }
    /// <p>The time when the network insights analyses ended.</p>
    pub fn get_analysis_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.analysis_end_time
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>path-found - A Boolean value that indicates whether a feasible path is found.</p> </li>
    /// <li> <p>status - The status of the analysis (running | succeeded | failed).</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>path-found - A Boolean value that indicates whether a feasible path is found.</p> </li>
    /// <li> <p>status - The status of the analysis (running | succeeded | failed).</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters. The following are the possible values:</p>
    /// <ul>
    /// <li> <p>path-found - A Boolean value that indicates whether a feasible path is found.</p> </li>
    /// <li> <p>status - The status of the analysis (running | succeeded | failed).</p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeNetworkInsightsAnalysesInput`](crate::operation::describe_network_insights_analyses::DescribeNetworkInsightsAnalysesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_network_insights_analyses::DescribeNetworkInsightsAnalysesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_network_insights_analyses::DescribeNetworkInsightsAnalysesInput {
                network_insights_analysis_ids: self.network_insights_analysis_ids,
                network_insights_path_id: self.network_insights_path_id,
                analysis_start_time: self.analysis_start_time,
                analysis_end_time: self.analysis_end_time,
                filters: self.filters,
                max_results: self.max_results,
                dry_run: self.dry_run,
                next_token: self.next_token,
            },
        )
    }
}
