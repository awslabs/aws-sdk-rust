// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCapacityManagerMetricDimensionsInput {
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub group_by: ::std::option::Option<::std::vec::Vec<crate::types::GroupBy>>,
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub filter_by: ::std::option::Option<::std::vec::Vec<crate::types::CapacityManagerCondition>>,
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub metric_names: ::std::option::Option<::std::vec::Vec<crate::types::Metric>>,
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl GetCapacityManagerMetricDimensionsInput {
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by.is_none()`.
    pub fn group_by(&self) -> &[crate::types::GroupBy] {
        self.group_by.as_deref().unwrap_or_default()
    }
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_by.is_none()`.
    pub fn filter_by(&self) -> &[crate::types::CapacityManagerCondition] {
        self.filter_by.as_deref().unwrap_or_default()
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_names.is_none()`.
    pub fn metric_names(&self) -> &[crate::types::Metric] {
        self.metric_names.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl GetCapacityManagerMetricDimensionsInput {
    /// Creates a new builder-style object to manufacture [`GetCapacityManagerMetricDimensionsInput`](crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsInput).
    pub fn builder() -> crate::operation::get_capacity_manager_metric_dimensions::builders::GetCapacityManagerMetricDimensionsInputBuilder {
        crate::operation::get_capacity_manager_metric_dimensions::builders::GetCapacityManagerMetricDimensionsInputBuilder::default()
    }
}

/// A builder for [`GetCapacityManagerMetricDimensionsInput`](crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCapacityManagerMetricDimensionsInputBuilder {
    pub(crate) group_by: ::std::option::Option<::std::vec::Vec<crate::types::GroupBy>>,
    pub(crate) filter_by: ::std::option::Option<::std::vec::Vec<crate::types::CapacityManagerCondition>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metric_names: ::std::option::Option<::std::vec::Vec<crate::types::Metric>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl GetCapacityManagerMetricDimensionsInputBuilder {
    /// Appends an item to `group_by`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub fn group_by(mut self, input: crate::types::GroupBy) -> Self {
        let mut v = self.group_by.unwrap_or_default();
        v.push(input);
        self.group_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupBy>>) -> Self {
        self.group_by = input;
        self
    }
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupBy>> {
        &self.group_by
    }
    /// Appends an item to `filter_by`.
    ///
    /// To override the contents of this collection use [`set_filter_by`](Self::set_filter_by).
    ///
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub fn filter_by(mut self, input: crate::types::CapacityManagerCondition) -> Self {
        let mut v = self.filter_by.unwrap_or_default();
        v.push(input);
        self.filter_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub fn set_filter_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CapacityManagerCondition>>) -> Self {
        self.filter_by = input;
        self
    }
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub fn get_filter_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CapacityManagerCondition>> {
        &self.filter_by
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Appends an item to `metric_names`.
    ///
    /// To override the contents of this collection use [`set_metric_names`](Self::set_metric_names).
    ///
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub fn metric_names(mut self, input: crate::types::Metric) -> Self {
        let mut v = self.metric_names.unwrap_or_default();
        v.push(input);
        self.metric_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub fn set_metric_names(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Metric>>) -> Self {
        self.metric_names = input;
        self
    }
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub fn get_metric_names(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Metric>> {
        &self.metric_names
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`GetCapacityManagerMetricDimensionsInput`](crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsInput {
                group_by: self.group_by,
                filter_by: self.filter_by,
                start_time: self.start_time,
                end_time: self.end_time,
                metric_names: self.metric_names,
                max_results: self.max_results,
                next_token: self.next_token,
                dry_run: self.dry_run,
            },
        )
    }
}
