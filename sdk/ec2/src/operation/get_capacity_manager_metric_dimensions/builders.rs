// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_capacity_manager_metric_dimensions::_get_capacity_manager_metric_dimensions_output::GetCapacityManagerMetricDimensionsOutputBuilder;

pub use crate::operation::get_capacity_manager_metric_dimensions::_get_capacity_manager_metric_dimensions_input::GetCapacityManagerMetricDimensionsInputBuilder;

impl crate::operation::get_capacity_manager_metric_dimensions::builders::GetCapacityManagerMetricDimensionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_capacity_manager_metric_dimensions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetCapacityManagerMetricDimensions`.
///
/// <p>Retrieves the available dimension values for capacity metrics within a specified time range. This is useful for discovering what accounts, regions, instance families, and other dimensions have data available for filtering and grouping.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetCapacityManagerMetricDimensionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_capacity_manager_metric_dimensions::builders::GetCapacityManagerMetricDimensionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsOutput,
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsError,
    > for GetCapacityManagerMetricDimensionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsOutput,
            crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetCapacityManagerMetricDimensionsFluentBuilder {
    /// Creates a new `GetCapacityManagerMetricDimensionsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetCapacityManagerMetricDimensions as a reference.
    pub fn as_input(&self) -> &crate::operation::get_capacity_manager_metric_dimensions::builders::GetCapacityManagerMetricDimensionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsOutput,
        crate::operation::get_capacity_manager_metric_dimensions::GetCapacityManagerMetricDimensionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_capacity_manager_metric_dimensions::paginator::GetCapacityManagerMetricDimensionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::get_capacity_manager_metric_dimensions::paginator::GetCapacityManagerMetricDimensionsPaginator {
        crate::operation::get_capacity_manager_metric_dimensions::paginator::GetCapacityManagerMetricDimensionsPaginator::new(self.handle, self.inner)
    }
    ///
    /// Appends an item to `GroupBy`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub fn group_by(mut self, input: crate::types::GroupBy) -> Self {
        self.inner = self.inner.group_by(input);
        self
    }
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupBy>>) -> Self {
        self.inner = self.inner.set_group_by(input);
        self
    }
    /// <p>The dimensions to group by when retrieving available dimension values. This determines which dimension combinations are returned. Required parameter.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupBy>> {
        self.inner.get_group_by()
    }
    ///
    /// Appends an item to `FilterBy`.
    ///
    /// To override the contents of this collection use [`set_filter_by`](Self::set_filter_by).
    ///
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub fn filter_by(mut self, input: crate::types::CapacityManagerCondition) -> Self {
        self.inner = self.inner.filter_by(input);
        self
    }
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub fn set_filter_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CapacityManagerCondition>>) -> Self {
        self.inner = self.inner.set_filter_by(input);
        self
    }
    /// <p>Conditions to filter which dimension values are returned. Each filter specifies a dimension, comparison operator, and values to match against.</p>
    pub fn get_filter_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CapacityManagerCondition>> {
        self.inner.get_filter_by()
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The start time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time()
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p>The end time for the dimension query, in ISO 8601 format. Only dimensions with data in this time range will be returned.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_time()
    }
    ///
    /// Appends an item to `MetricNames`.
    ///
    /// To override the contents of this collection use [`set_metric_names`](Self::set_metric_names).
    ///
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub fn metric_names(mut self, input: crate::types::Metric) -> Self {
        self.inner = self.inner.metric_names(input);
        self
    }
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub fn set_metric_names(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Metric>>) -> Self {
        self.inner = self.inner.set_metric_names(input);
        self
    }
    /// <p>The metric names to use as an additional filter when retrieving dimensions. Only dimensions that have data for these metrics will be returned. Required parameter with maximum size of 1 for v1.</p>
    pub fn get_metric_names(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Metric>> {
        self.inner.get_metric_names()
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of dimension combinations to return. Valid range is 1 to 1000. Use with NextToken for pagination.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next page of results. Use this value in a subsequent call to retrieve additional dimension values.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
