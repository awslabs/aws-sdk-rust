// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::purchase_scheduled_instances::_purchase_scheduled_instances_output::PurchaseScheduledInstancesOutputBuilder;

pub use crate::operation::purchase_scheduled_instances::_purchase_scheduled_instances_input::PurchaseScheduledInstancesInputBuilder;

/// Fluent builder constructing a request to `PurchaseScheduledInstances`.
///
/// <note>
/// <p>You can no longer purchase Scheduled Instances.</p>
/// </note>
/// <p>Purchases the Scheduled Instances with the specified schedule.</p>
/// <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <code>DescribeScheduledInstanceAvailability</code> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <code>RunScheduledInstances</code> during each scheduled time period.</p>
/// <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseScheduledInstancesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::purchase_scheduled_instances::builders::PurchaseScheduledInstancesInputBuilder
            }
impl PurchaseScheduledInstancesFluentBuilder {
    /// Creates a new `PurchaseScheduledInstances`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::purchase_scheduled_instances::PurchaseScheduledInstances,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::purchase_scheduled_instances::PurchaseScheduledInstancesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::purchase_scheduled_instances::PurchaseScheduledInstancesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::purchase_scheduled_instances::PurchaseScheduledInstancesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// Appends an item to `PurchaseRequests`.
    ///
    /// To override the contents of this collection use [`set_purchase_requests`](Self::set_purchase_requests).
    ///
    /// <p>The purchase requests.</p>
    pub fn purchase_requests(mut self, input: crate::types::PurchaseRequest) -> Self {
        self.inner = self.inner.purchase_requests(input);
        self
    }
    /// <p>The purchase requests.</p>
    pub fn set_purchase_requests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PurchaseRequest>>,
    ) -> Self {
        self.inner = self.inner.set_purchase_requests(input);
        self
    }
}
