// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnassignIpv6AddressesOutput {
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    #[doc(hidden)]
    pub unassigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
    #[doc(hidden)]
    pub unassigned_ipv6_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl UnassignIpv6AddressesOutput {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    pub fn unassigned_ipv6_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.unassigned_ipv6_addresses.as_deref()
    }
    /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
    pub fn unassigned_ipv6_prefixes(&self) -> std::option::Option<&[std::string::String]> {
        self.unassigned_ipv6_prefixes.as_deref()
    }
}
impl aws_http::request_id::RequestId for UnassignIpv6AddressesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UnassignIpv6AddressesOutput {
    /// Creates a new builder-style object to manufacture [`UnassignIpv6AddressesOutput`](crate::operation::unassign_ipv6_addresses::UnassignIpv6AddressesOutput).
    pub fn builder(
    ) -> crate::operation::unassign_ipv6_addresses::builders::UnassignIpv6AddressesOutputBuilder
    {
        crate::operation::unassign_ipv6_addresses::builders::UnassignIpv6AddressesOutputBuilder::default()
    }
}

/// A builder for [`UnassignIpv6AddressesOutput`](crate::operation::unassign_ipv6_addresses::UnassignIpv6AddressesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnassignIpv6AddressesOutputBuilder {
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) unassigned_ipv6_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) unassigned_ipv6_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl UnassignIpv6AddressesOutputBuilder {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// Appends an item to `unassigned_ipv6_addresses`.
    ///
    /// To override the contents of this collection use [`set_unassigned_ipv6_addresses`](Self::set_unassigned_ipv6_addresses).
    ///
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    pub fn unassigned_ipv6_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.unassigned_ipv6_addresses.unwrap_or_default();
        v.push(input.into());
        self.unassigned_ipv6_addresses = Some(v);
        self
    }
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    pub fn set_unassigned_ipv6_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.unassigned_ipv6_addresses = input;
        self
    }
    /// Appends an item to `unassigned_ipv6_prefixes`.
    ///
    /// To override the contents of this collection use [`set_unassigned_ipv6_prefixes`](Self::set_unassigned_ipv6_prefixes).
    ///
    /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
    pub fn unassigned_ipv6_prefixes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.unassigned_ipv6_prefixes.unwrap_or_default();
        v.push(input.into());
        self.unassigned_ipv6_prefixes = Some(v);
        self
    }
    /// <p>The IPv4 prefixes that have been unassigned from the network interface.</p>
    pub fn set_unassigned_ipv6_prefixes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.unassigned_ipv6_prefixes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UnassignIpv6AddressesOutput`](crate::operation::unassign_ipv6_addresses::UnassignIpv6AddressesOutput).
    pub fn build(self) -> crate::operation::unassign_ipv6_addresses::UnassignIpv6AddressesOutput {
        crate::operation::unassign_ipv6_addresses::UnassignIpv6AddressesOutput {
            network_interface_id: self.network_interface_id,
            unassigned_ipv6_addresses: self.unassigned_ipv6_addresses,
            unassigned_ipv6_prefixes: self.unassigned_ipv6_prefixes,
            _request_id: self._request_id,
        }
    }
}
