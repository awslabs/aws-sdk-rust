// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_volumes::_copy_volumes_output::CopyVolumesOutputBuilder;

pub use crate::operation::copy_volumes::_copy_volumes_input::CopyVolumesInputBuilder;

impl crate::operation::copy_volumes::builders::CopyVolumesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::copy_volumes::CopyVolumesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_volumes::CopyVolumesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.copy_volumes();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CopyVolumes`.
///
/// <p>Creates a crash-consistent, point-in-time copy of an existing Amazon EBS volume within the same Availability Zone. The volume copy can be attached to an Amazon EC2 instance once it reaches the <code>available</code> state. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-copying-volume.html">Copy an Amazon EBS volume</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CopyVolumesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_volumes::builders::CopyVolumesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::copy_volumes::CopyVolumesOutput,
        crate::operation::copy_volumes::CopyVolumesError,
    > for CopyVolumesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::copy_volumes::CopyVolumesOutput,
            crate::operation::copy_volumes::CopyVolumesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CopyVolumesFluentBuilder {
    /// Creates a new `CopyVolumesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CopyVolumes as a reference.
    pub fn as_input(&self) -> &crate::operation::copy_volumes::builders::CopyVolumesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::copy_volumes::CopyVolumesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_volumes::CopyVolumesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::copy_volumes::CopyVolumes::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::copy_volumes::CopyVolumes::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::copy_volumes::CopyVolumesOutput,
        crate::operation::copy_volumes::CopyVolumesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the source EBS volume to copy.</p>
    pub fn source_volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_volume_id(input.into());
        self
    }
    /// <p>The ID of the source EBS volume to copy.</p>
    pub fn set_source_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_volume_id(input);
        self
    }
    /// <p>The ID of the source EBS volume to copy.</p>
    pub fn get_source_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_volume_id()
    }
    /// <p>The number of I/O operations per second (IOPS) to provision for the volume copy. Required for <code>io1</code> and <code>io2</code> volumes. Optional for <code>gp3</code> volumes. Omit for all other volume types. Full provisioned IOPS performance can be achieved only once the volume copy is fully initialized.</p>
    /// <p>Valid ranges:</p>
    /// <ul>
    /// <li>
    /// <p>gp3: <code>3,000 </code>(<i>default</i>)<code> - 80,000</code> IOPS</p></li>
    /// <li>
    /// <p>io1: <code>100 - 64,000</code> IOPS</p></li>
    /// <li>
    /// <p>io2: <code>100 - 256,000</code> IOPS</p></li>
    /// </ul><note>
    /// <p><a href="https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html"> Instances built on the Nitro System</a> can support up to 256,000 IOPS. Other instances can support up to 32,000 IOPS.</p>
    /// </note>
    pub fn iops(mut self, input: i32) -> Self {
        self.inner = self.inner.iops(input);
        self
    }
    /// <p>The number of I/O operations per second (IOPS) to provision for the volume copy. Required for <code>io1</code> and <code>io2</code> volumes. Optional for <code>gp3</code> volumes. Omit for all other volume types. Full provisioned IOPS performance can be achieved only once the volume copy is fully initialized.</p>
    /// <p>Valid ranges:</p>
    /// <ul>
    /// <li>
    /// <p>gp3: <code>3,000 </code>(<i>default</i>)<code> - 80,000</code> IOPS</p></li>
    /// <li>
    /// <p>io1: <code>100 - 64,000</code> IOPS</p></li>
    /// <li>
    /// <p>io2: <code>100 - 256,000</code> IOPS</p></li>
    /// </ul><note>
    /// <p><a href="https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html"> Instances built on the Nitro System</a> can support up to 256,000 IOPS. Other instances can support up to 32,000 IOPS.</p>
    /// </note>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_iops(input);
        self
    }
    /// <p>The number of I/O operations per second (IOPS) to provision for the volume copy. Required for <code>io1</code> and <code>io2</code> volumes. Optional for <code>gp3</code> volumes. Omit for all other volume types. Full provisioned IOPS performance can be achieved only once the volume copy is fully initialized.</p>
    /// <p>Valid ranges:</p>
    /// <ul>
    /// <li>
    /// <p>gp3: <code>3,000 </code>(<i>default</i>)<code> - 80,000</code> IOPS</p></li>
    /// <li>
    /// <p>io1: <code>100 - 64,000</code> IOPS</p></li>
    /// <li>
    /// <p>io2: <code>100 - 256,000</code> IOPS</p></li>
    /// </ul><note>
    /// <p><a href="https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html"> Instances built on the Nitro System</a> can support up to 256,000 IOPS. Other instances can support up to 32,000 IOPS.</p>
    /// </note>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        self.inner.get_iops()
    }
    /// <p>The size of the volume copy, in GiBs. The size must be equal to or greater than the size of the source volume. If not specified, the size defaults to the size of the source volume.</p>
    /// <p>Maximum supported sizes:</p>
    /// <ul>
    /// <li>
    /// <p>gp2: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>gp3: <code>65,536</code> GiB</p></li>
    /// <li>
    /// <p>io1: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>io2: <code>65,536</code> GiB</p></li>
    /// <li>
    /// <p>st1 and sc1: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>standard: <code>1024</code> GiB</p></li>
    /// </ul>
    pub fn size(mut self, input: i32) -> Self {
        self.inner = self.inner.size(input);
        self
    }
    /// <p>The size of the volume copy, in GiBs. The size must be equal to or greater than the size of the source volume. If not specified, the size defaults to the size of the source volume.</p>
    /// <p>Maximum supported sizes:</p>
    /// <ul>
    /// <li>
    /// <p>gp2: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>gp3: <code>65,536</code> GiB</p></li>
    /// <li>
    /// <p>io1: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>io2: <code>65,536</code> GiB</p></li>
    /// <li>
    /// <p>st1 and sc1: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>standard: <code>1024</code> GiB</p></li>
    /// </ul>
    pub fn set_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_size(input);
        self
    }
    /// <p>The size of the volume copy, in GiBs. The size must be equal to or greater than the size of the source volume. If not specified, the size defaults to the size of the source volume.</p>
    /// <p>Maximum supported sizes:</p>
    /// <ul>
    /// <li>
    /// <p>gp2: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>gp3: <code>65,536</code> GiB</p></li>
    /// <li>
    /// <p>io1: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>io2: <code>65,536</code> GiB</p></li>
    /// <li>
    /// <p>st1 and sc1: <code>16,384</code> GiB</p></li>
    /// <li>
    /// <p>standard: <code>1024</code> GiB</p></li>
    /// </ul>
    pub fn get_size(&self) -> &::std::option::Option<i32> {
        self.inner.get_size()
    }
    /// <p>The volume type for the volume copy. If not specified, the volume type defaults to <code>gp2</code>.</p>
    pub fn volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.inner = self.inner.volume_type(input);
        self
    }
    /// <p>The volume type for the volume copy. If not specified, the volume type defaults to <code>gp2</code>.</p>
    pub fn set_volume_type(mut self, input: ::std::option::Option<crate::types::VolumeType>) -> Self {
        self.inner = self.inner.set_volume_type(input);
        self
    }
    /// <p>The volume type for the volume copy. If not specified, the volume type defaults to <code>gp2</code>.</p>
    pub fn get_volume_type(&self) -> &::std::option::Option<crate::types::VolumeType> {
        self.inner.get_volume_type()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    ///
    /// Appends an item to `TagSpecifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the volume copy during creation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        self.inner = self.inner.tag_specifications(input);
        self
    }
    /// <p>The tags to apply to the volume copy during creation.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.inner = self.inner.set_tag_specifications(input);
        self
    }
    /// <p>The tags to apply to the volume copy during creation.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        self.inner.get_tag_specifications()
    }
    /// <p>Indicates whether to enable Amazon EBS Multi-Attach for the volume copy. If you enable Multi-Attach, you can attach the volume to up to 16 Nitro instances in the same Availability Zone simultaneously. Supported with <code>io1</code> and <code>io2</code> volumes only. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes-multi.html"> Amazon EBS Multi-Attach</a>.</p>
    pub fn multi_attach_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.multi_attach_enabled(input);
        self
    }
    /// <p>Indicates whether to enable Amazon EBS Multi-Attach for the volume copy. If you enable Multi-Attach, you can attach the volume to up to 16 Nitro instances in the same Availability Zone simultaneously. Supported with <code>io1</code> and <code>io2</code> volumes only. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes-multi.html"> Amazon EBS Multi-Attach</a>.</p>
    pub fn set_multi_attach_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_multi_attach_enabled(input);
        self
    }
    /// <p>Indicates whether to enable Amazon EBS Multi-Attach for the volume copy. If you enable Multi-Attach, you can attach the volume to up to 16 Nitro instances in the same Availability Zone simultaneously. Supported with <code>io1</code> and <code>io2</code> volumes only. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes-multi.html"> Amazon EBS Multi-Attach</a>.</p>
    pub fn get_multi_attach_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_multi_attach_enabled()
    }
    /// <p>The throughput to provision for the volume copy, in MiB/s. Supported for <code>gp3</code> volumes only. Omit for all other volume types. Full provisioned throughput performance can be achieved only once the volume copy is fully initialized.</p>
    /// <p>Valid Range: <code>125 - 2000</code> MiB/s</p>
    /// <p></p>
    pub fn throughput(mut self, input: i32) -> Self {
        self.inner = self.inner.throughput(input);
        self
    }
    /// <p>The throughput to provision for the volume copy, in MiB/s. Supported for <code>gp3</code> volumes only. Omit for all other volume types. Full provisioned throughput performance can be achieved only once the volume copy is fully initialized.</p>
    /// <p>Valid Range: <code>125 - 2000</code> MiB/s</p>
    /// <p></p>
    pub fn set_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_throughput(input);
        self
    }
    /// <p>The throughput to provision for the volume copy, in MiB/s. Supported for <code>gp3</code> volumes only. Omit for all other volume types. Full provisioned throughput performance can be achieved only once the volume copy is fully initialized.</p>
    /// <p>Valid Range: <code>125 - 2000</code> MiB/s</p>
    /// <p></p>
    pub fn get_throughput(&self) -> &::std::option::Option<i32> {
        self.inner.get_throughput()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html"> Ensure Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html"> Ensure Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html"> Ensure Idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
