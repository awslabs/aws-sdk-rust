// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_instance_event_window::_modify_instance_event_window_output::ModifyInstanceEventWindowOutputBuilder;

pub use crate::operation::modify_instance_event_window::_modify_instance_event_window_input::ModifyInstanceEventWindowInputBuilder;

/// Fluent builder constructing a request to `ModifyInstanceEventWindow`.
///
/// <p>Modifies the specified event window.</p>
/// <p>You can define either a set of time ranges or a cron expression when modifying the event window, but not both.</p>
/// <p>To modify the targets associated with the event window, use the <code>AssociateInstanceEventWindow</code> and <code>DisassociateInstanceEventWindow</code> API.</p>
/// <p>If Amazon Web Services has already scheduled an event, modifying an event window won't change the time of the scheduled event.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyInstanceEventWindowFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::modify_instance_event_window::builders::ModifyInstanceEventWindowInputBuilder
            }
impl ModifyInstanceEventWindowFluentBuilder {
    /// Creates a new `ModifyInstanceEventWindow`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_instance_event_window::ModifyInstanceEventWindow,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_instance_event_window::ModifyInstanceEventWindowError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_instance_event_window::ModifyInstanceEventWindowOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_instance_event_window::ModifyInstanceEventWindowError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>The name of the event window.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the event window.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The ID of the event window.</p>
    pub fn instance_event_window_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.instance_event_window_id(input.into());
        self
    }
    /// <p>The ID of the event window.</p>
    pub fn set_instance_event_window_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_instance_event_window_id(input);
        self
    }
    /// Appends an item to `TimeRanges`.
    ///
    /// To override the contents of this collection use [`set_time_ranges`](Self::set_time_ranges).
    ///
    /// <p>The time ranges of the event window.</p>
    pub fn time_ranges(mut self, input: crate::types::InstanceEventWindowTimeRangeRequest) -> Self {
        self.inner = self.inner.time_ranges(input);
        self
    }
    /// <p>The time ranges of the event window.</p>
    pub fn set_time_ranges(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::InstanceEventWindowTimeRangeRequest>,
        >,
    ) -> Self {
        self.inner = self.inner.set_time_ranges(input);
        self
    }
    /// <p>The cron expression of the event window, for example, <code>* 0-4,20-23 * * 1,5</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Only hour and day of the week values are supported.</p> </li>
    /// <li> <p>For day of the week values, you can specify either integers <code>0</code> through <code>6</code>, or alternative single values <code>SUN</code> through <code>SAT</code>.</p> </li>
    /// <li> <p>The minute, month, and year must be specified by <code>*</code>.</p> </li>
    /// <li> <p>The hour value must be one or a multiple range, for example, <code>0-4</code> or <code>0-4,20-23</code>.</p> </li>
    /// <li> <p>Each hour range must be &gt;= 2 hours, for example, <code>0-2</code> or <code>20-23</code>.</p> </li>
    /// <li> <p>The event window must be &gt;= 4 hours. The combined total time ranges in the event window must be &gt;= 4 hours.</p> </li>
    /// </ul>
    /// <p>For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron</a> on the <i>Wikipedia website</i>.</p>
    pub fn cron_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cron_expression(input.into());
        self
    }
    /// <p>The cron expression of the event window, for example, <code>* 0-4,20-23 * * 1,5</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Only hour and day of the week values are supported.</p> </li>
    /// <li> <p>For day of the week values, you can specify either integers <code>0</code> through <code>6</code>, or alternative single values <code>SUN</code> through <code>SAT</code>.</p> </li>
    /// <li> <p>The minute, month, and year must be specified by <code>*</code>.</p> </li>
    /// <li> <p>The hour value must be one or a multiple range, for example, <code>0-4</code> or <code>0-4,20-23</code>.</p> </li>
    /// <li> <p>Each hour range must be &gt;= 2 hours, for example, <code>0-2</code> or <code>20-23</code>.</p> </li>
    /// <li> <p>The event window must be &gt;= 4 hours. The combined total time ranges in the event window must be &gt;= 4 hours.</p> </li>
    /// </ul>
    /// <p>For more information about cron expressions, see <a href="https://en.wikipedia.org/wiki/Cron">cron</a> on the <i>Wikipedia website</i>.</p>
    pub fn set_cron_expression(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cron_expression(input);
        self
    }
}
