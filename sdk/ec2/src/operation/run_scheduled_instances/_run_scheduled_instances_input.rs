// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for RunScheduledInstances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RunScheduledInstancesInput {
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>The number of instances.</p>
    /// <p>Default: 1</p>
    #[doc(hidden)]
    pub instance_count: std::option::Option<i32>,
    /// <p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
    #[doc(hidden)]
    pub launch_specification:
        std::option::Option<crate::types::ScheduledInstancesLaunchSpecification>,
    /// <p>The Scheduled Instance ID.</p>
    #[doc(hidden)]
    pub scheduled_instance_id: std::option::Option<std::string::String>,
}
impl RunScheduledInstancesInput {
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The number of instances.</p>
    /// <p>Default: 1</p>
    pub fn instance_count(&self) -> std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
    pub fn launch_specification(
        &self,
    ) -> std::option::Option<&crate::types::ScheduledInstancesLaunchSpecification> {
        self.launch_specification.as_ref()
    }
    /// <p>The Scheduled Instance ID.</p>
    pub fn scheduled_instance_id(&self) -> std::option::Option<&str> {
        self.scheduled_instance_id.as_deref()
    }
}
impl RunScheduledInstancesInput {
    /// Creates a new builder-style object to manufacture [`RunScheduledInstancesInput`](crate::operation::run_scheduled_instances::RunScheduledInstancesInput).
    pub fn builder(
    ) -> crate::operation::run_scheduled_instances::builders::RunScheduledInstancesInputBuilder
    {
        crate::operation::run_scheduled_instances::builders::RunScheduledInstancesInputBuilder::default()
    }
}

/// A builder for [`RunScheduledInstancesInput`](crate::operation::run_scheduled_instances::RunScheduledInstancesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RunScheduledInstancesInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) launch_specification:
        std::option::Option<crate::types::ScheduledInstancesLaunchSpecification>,
    pub(crate) scheduled_instance_id: std::option::Option<std::string::String>,
}
impl RunScheduledInstancesInputBuilder {
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>The number of instances.</p>
    /// <p>Default: 1</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of instances.</p>
    /// <p>Default: 1</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
    pub fn launch_specification(
        mut self,
        input: crate::types::ScheduledInstancesLaunchSpecification,
    ) -> Self {
        self.launch_specification = Some(input);
        self
    }
    /// <p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
    pub fn set_launch_specification(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstancesLaunchSpecification>,
    ) -> Self {
        self.launch_specification = input;
        self
    }
    /// <p>The Scheduled Instance ID.</p>
    pub fn scheduled_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.scheduled_instance_id = Some(input.into());
        self
    }
    /// <p>The Scheduled Instance ID.</p>
    pub fn set_scheduled_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.scheduled_instance_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RunScheduledInstancesInput`](crate::operation::run_scheduled_instances::RunScheduledInstancesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::run_scheduled_instances::RunScheduledInstancesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::run_scheduled_instances::RunScheduledInstancesInput {
                client_token: self.client_token,
                dry_run: self.dry_run,
                instance_count: self.instance_count,
                launch_specification: self.launch_specification,
                scheduled_instance_id: self.scheduled_instance_id,
            },
        )
    }
}
