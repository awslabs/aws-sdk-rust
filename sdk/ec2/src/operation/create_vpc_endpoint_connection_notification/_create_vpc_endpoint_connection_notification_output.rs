// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcEndpointConnectionNotificationOutput {
    /// <p>Information about the notification.</p>
    #[doc(hidden)]
    pub connection_notification: std::option::Option<crate::types::ConnectionNotification>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVpcEndpointConnectionNotificationOutput {
    /// <p>Information about the notification.</p>
    pub fn connection_notification(
        &self,
    ) -> std::option::Option<&crate::types::ConnectionNotification> {
        self.connection_notification.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcEndpointConnectionNotificationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateVpcEndpointConnectionNotificationOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcEndpointConnectionNotificationOutput`](crate::operation::create_vpc_endpoint_connection_notification::CreateVpcEndpointConnectionNotificationOutput).
    pub fn builder() -> crate::operation::create_vpc_endpoint_connection_notification::builders::CreateVpcEndpointConnectionNotificationOutputBuilder{
        crate::operation::create_vpc_endpoint_connection_notification::builders::CreateVpcEndpointConnectionNotificationOutputBuilder::default()
    }
}

/// A builder for [`CreateVpcEndpointConnectionNotificationOutput`](crate::operation::create_vpc_endpoint_connection_notification::CreateVpcEndpointConnectionNotificationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateVpcEndpointConnectionNotificationOutputBuilder {
    pub(crate) connection_notification: std::option::Option<crate::types::ConnectionNotification>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVpcEndpointConnectionNotificationOutputBuilder {
    /// <p>Information about the notification.</p>
    pub fn connection_notification(mut self, input: crate::types::ConnectionNotification) -> Self {
        self.connection_notification = Some(input);
        self
    }
    /// <p>Information about the notification.</p>
    pub fn set_connection_notification(
        mut self,
        input: std::option::Option<crate::types::ConnectionNotification>,
    ) -> Self {
        self.connection_notification = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateVpcEndpointConnectionNotificationOutput`](crate::operation::create_vpc_endpoint_connection_notification::CreateVpcEndpointConnectionNotificationOutput).
    pub fn build(self) -> crate::operation::create_vpc_endpoint_connection_notification::CreateVpcEndpointConnectionNotificationOutput{
        crate::operation::create_vpc_endpoint_connection_notification::CreateVpcEndpointConnectionNotificationOutput {
            connection_notification: self.connection_notification
            ,
            client_token: self.client_token
            ,
            _request_id: self._request_id,
        }
    }
}
