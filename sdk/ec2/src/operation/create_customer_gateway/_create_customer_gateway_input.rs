// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for CreateCustomerGateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomerGatewayInput {
    /// <p>For devices that support BGP, the customer gateway's BGP ASN.</p>
    /// <p>Default: 65000</p>
    #[doc(hidden)]
    pub bgp_asn: std::option::Option<i32>,
    /// <p> <i>This member has been deprecated.</i> The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
    #[doc(hidden)]
    pub public_ip: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::GatewayType>,
    /// <p>The tags to apply to the customer gateway.</p>
    #[doc(hidden)]
    pub tag_specifications: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>A name for the customer gateway device.</p>
    /// <p>Length Constraints: Up to 255 characters.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p> IPv4 address for the customer gateway device's outside interface. The address must be static. </p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
}
impl CreateCustomerGatewayInput {
    /// <p>For devices that support BGP, the customer gateway's BGP ASN.</p>
    /// <p>Default: 65000</p>
    pub fn bgp_asn(&self) -> std::option::Option<i32> {
        self.bgp_asn
    }
    /// <p> <i>This member has been deprecated.</i> The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
    pub fn public_ip(&self) -> std::option::Option<&str> {
        self.public_ip.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::GatewayType> {
        self.r#type.as_ref()
    }
    /// <p>The tags to apply to the customer gateway.</p>
    pub fn tag_specifications(&self) -> std::option::Option<&[crate::types::TagSpecification]> {
        self.tag_specifications.as_deref()
    }
    /// <p>A name for the customer gateway device.</p>
    /// <p>Length Constraints: Up to 255 characters.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p> IPv4 address for the customer gateway device's outside interface. The address must be static. </p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
}
impl CreateCustomerGatewayInput {
    /// Creates a new builder-style object to manufacture [`CreateCustomerGatewayInput`](crate::operation::create_customer_gateway::CreateCustomerGatewayInput).
    pub fn builder(
    ) -> crate::operation::create_customer_gateway::builders::CreateCustomerGatewayInputBuilder
    {
        crate::operation::create_customer_gateway::builders::CreateCustomerGatewayInputBuilder::default()
    }
}

/// A builder for [`CreateCustomerGatewayInput`](crate::operation::create_customer_gateway::CreateCustomerGatewayInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomerGatewayInputBuilder {
    pub(crate) bgp_asn: std::option::Option<i32>,
    pub(crate) public_ip: std::option::Option<std::string::String>,
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::GatewayType>,
    pub(crate) tag_specifications:
        std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) ip_address: std::option::Option<std::string::String>,
    pub(crate) dry_run: std::option::Option<bool>,
}
impl CreateCustomerGatewayInputBuilder {
    /// <p>For devices that support BGP, the customer gateway's BGP ASN.</p>
    /// <p>Default: 65000</p>
    pub fn bgp_asn(mut self, input: i32) -> Self {
        self.bgp_asn = Some(input);
        self
    }
    /// <p>For devices that support BGP, the customer gateway's BGP ASN.</p>
    /// <p>Default: 65000</p>
    pub fn set_bgp_asn(mut self, input: std::option::Option<i32>) -> Self {
        self.bgp_asn = input;
        self
    }
    /// <p> <i>This member has been deprecated.</i> The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
    pub fn public_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.public_ip = Some(input.into());
        self
    }
    /// <p> <i>This member has been deprecated.</i> The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
    pub fn set_public_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.public_ip = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the customer gateway certificate.</p>
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn r#type(mut self, input: crate::types::GatewayType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::GatewayType>) -> Self {
        self.r#type = input;
        self
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the customer gateway.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = Some(v);
        self
    }
    /// <p>The tags to apply to the customer gateway.</p>
    pub fn set_tag_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    ) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>A name for the customer gateway device.</p>
    /// <p>Length Constraints: Up to 255 characters.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>A name for the customer gateway device.</p>
    /// <p>Length Constraints: Up to 255 characters.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p> IPv4 address for the customer gateway device's outside interface. The address must be static. </p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p> IPv4 address for the customer gateway device's outside interface. The address must be static. </p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateCustomerGatewayInput`](crate::operation::create_customer_gateway::CreateCustomerGatewayInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_customer_gateway::CreateCustomerGatewayInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_customer_gateway::CreateCustomerGatewayInput {
                bgp_asn: self.bgp_asn,
                public_ip: self.public_ip,
                certificate_arn: self.certificate_arn,
                r#type: self.r#type,
                tag_specifications: self.tag_specifications,
                device_name: self.device_name,
                ip_address: self.ip_address,
                dry_run: self.dry_run,
            },
        )
    }
}
