// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::replace_iam_instance_profile_association::_replace_iam_instance_profile_association_output::ReplaceIamInstanceProfileAssociationOutputBuilder;

pub use crate::operation::replace_iam_instance_profile_association::_replace_iam_instance_profile_association_input::ReplaceIamInstanceProfileAssociationInputBuilder;

impl ReplaceIamInstanceProfileAssociationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.replace_iam_instance_profile_association();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ReplaceIamInstanceProfileAssociation`.
///
/// <p>Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first.</p>
/// <p>Use <code>DescribeIamInstanceProfileAssociations</code> to get the association ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ReplaceIamInstanceProfileAssociationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::replace_iam_instance_profile_association::builders::ReplaceIamInstanceProfileAssociationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationOutput,
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationError,
    > for ReplaceIamInstanceProfileAssociationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationOutput,
            crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ReplaceIamInstanceProfileAssociationFluentBuilder {
    /// Creates a new `ReplaceIamInstanceProfileAssociation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ReplaceIamInstanceProfileAssociation as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::replace_iam_instance_profile_association::builders::ReplaceIamInstanceProfileAssociationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociation::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationOutput,
        crate::operation::replace_iam_instance_profile_association::ReplaceIamInstanceProfileAssociationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The IAM instance profile.</p>
    pub fn iam_instance_profile(mut self, input: crate::types::IamInstanceProfileSpecification) -> Self {
        self.inner = self.inner.iam_instance_profile(input);
        self
    }
    /// <p>The IAM instance profile.</p>
    pub fn set_iam_instance_profile(mut self, input: ::std::option::Option<crate::types::IamInstanceProfileSpecification>) -> Self {
        self.inner = self.inner.set_iam_instance_profile(input);
        self
    }
    /// <p>The IAM instance profile.</p>
    pub fn get_iam_instance_profile(&self) -> &::std::option::Option<crate::types::IamInstanceProfileSpecification> {
        self.inner.get_iam_instance_profile()
    }
    /// <p>The ID of the existing IAM instance profile association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.association_id(input.into());
        self
    }
    /// <p>The ID of the existing IAM instance profile association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_association_id(input);
        self
    }
    /// <p>The ID of the existing IAM instance profile association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_association_id()
    }
}
