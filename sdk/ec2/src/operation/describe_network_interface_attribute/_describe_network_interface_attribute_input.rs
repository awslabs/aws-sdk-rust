// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for DescribeNetworkInterfaceAttribute.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNetworkInterfaceAttributeInput {
    /// <p>The attribute of the network interface. This parameter is required.</p>
    #[doc(hidden)]
    pub attribute: std::option::Option<crate::types::NetworkInterfaceAttribute>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
}
impl DescribeNetworkInterfaceAttributeInput {
    /// <p>The attribute of the network interface. This parameter is required.</p>
    pub fn attribute(&self) -> std::option::Option<&crate::types::NetworkInterfaceAttribute> {
        self.attribute.as_ref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
}
impl DescribeNetworkInterfaceAttributeInput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkInterfaceAttributeInput`](crate::operation::describe_network_interface_attribute::DescribeNetworkInterfaceAttributeInput).
    pub fn builder() -> crate::operation::describe_network_interface_attribute::builders::DescribeNetworkInterfaceAttributeInputBuilder{
        crate::operation::describe_network_interface_attribute::builders::DescribeNetworkInterfaceAttributeInputBuilder::default()
    }
}

/// A builder for [`DescribeNetworkInterfaceAttributeInput`](crate::operation::describe_network_interface_attribute::DescribeNetworkInterfaceAttributeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeNetworkInterfaceAttributeInputBuilder {
    pub(crate) attribute: std::option::Option<crate::types::NetworkInterfaceAttribute>,
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
}
impl DescribeNetworkInterfaceAttributeInputBuilder {
    /// <p>The attribute of the network interface. This parameter is required.</p>
    pub fn attribute(mut self, input: crate::types::NetworkInterfaceAttribute) -> Self {
        self.attribute = Some(input);
        self
    }
    /// <p>The attribute of the network interface. This parameter is required.</p>
    pub fn set_attribute(
        mut self,
        input: std::option::Option<crate::types::NetworkInterfaceAttribute>,
    ) -> Self {
        self.attribute = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeNetworkInterfaceAttributeInput`](crate::operation::describe_network_interface_attribute::DescribeNetworkInterfaceAttributeInput).
    pub fn build(self) -> Result<crate::operation::describe_network_interface_attribute::DescribeNetworkInterfaceAttributeInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::describe_network_interface_attribute::DescribeNetworkInterfaceAttributeInput {
                attribute: self.attribute
                ,
                dry_run: self.dry_run
                ,
                network_interface_id: self.network_interface_id
                ,
            }
        )
    }
}
