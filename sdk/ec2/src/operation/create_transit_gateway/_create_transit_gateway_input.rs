// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTransitGatewayInput {
    /// <p>A description of the transit gateway.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The transit gateway options.</p>
    pub options: ::std::option::Option<crate::types::TransitGatewayRequestOptions>,
    /// <p>The tags to apply to the transit gateway.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl CreateTransitGatewayInput {
    /// <p>A description of the transit gateway.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The transit gateway options.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::TransitGatewayRequestOptions> {
        self.options.as_ref()
    }
    /// <p>The tags to apply to the transit gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl CreateTransitGatewayInput {
    /// Creates a new builder-style object to manufacture [`CreateTransitGatewayInput`](crate::operation::create_transit_gateway::CreateTransitGatewayInput).
    pub fn builder() -> crate::operation::create_transit_gateway::builders::CreateTransitGatewayInputBuilder {
        crate::operation::create_transit_gateway::builders::CreateTransitGatewayInputBuilder::default()
    }
}

/// A builder for [`CreateTransitGatewayInput`](crate::operation::create_transit_gateway::CreateTransitGatewayInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateTransitGatewayInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) options: ::std::option::Option<crate::types::TransitGatewayRequestOptions>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl CreateTransitGatewayInputBuilder {
    /// <p>A description of the transit gateway.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the transit gateway.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the transit gateway.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The transit gateway options.</p>
    pub fn options(mut self, input: crate::types::TransitGatewayRequestOptions) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The transit gateway options.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::TransitGatewayRequestOptions>) -> Self {
        self.options = input;
        self
    }
    /// <p>The transit gateway options.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::TransitGatewayRequestOptions> {
        &self.options
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the transit gateway.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to the transit gateway.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to apply to the transit gateway.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`CreateTransitGatewayInput`](crate::operation::create_transit_gateway::CreateTransitGatewayInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_transit_gateway::CreateTransitGatewayInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_transit_gateway::CreateTransitGatewayInput {
            description: self.description,
            options: self.options,
            tag_specifications: self.tag_specifications,
            dry_run: self.dry_run,
        })
    }
}
