// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreManagedPrefixListVersionInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the prefix list.</p>
    pub prefix_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The version to restore.</p>
    pub previous_version: ::std::option::Option<i64>,
    /// <p>The current version number for the prefix list.</p>
    pub current_version: ::std::option::Option<i64>,
}
impl RestoreManagedPrefixListVersionInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(&self) -> ::std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The version to restore.</p>
    pub fn previous_version(&self) -> ::std::option::Option<i64> {
        self.previous_version
    }
    /// <p>The current version number for the prefix list.</p>
    pub fn current_version(&self) -> ::std::option::Option<i64> {
        self.current_version
    }
}
impl RestoreManagedPrefixListVersionInput {
    /// Creates a new builder-style object to manufacture [`RestoreManagedPrefixListVersionInput`](crate::operation::restore_managed_prefix_list_version::RestoreManagedPrefixListVersionInput).
    pub fn builder() -> crate::operation::restore_managed_prefix_list_version::builders::RestoreManagedPrefixListVersionInputBuilder {
        crate::operation::restore_managed_prefix_list_version::builders::RestoreManagedPrefixListVersionInputBuilder::default()
    }
}

/// A builder for [`RestoreManagedPrefixListVersionInput`](crate::operation::restore_managed_prefix_list_version::RestoreManagedPrefixListVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreManagedPrefixListVersionInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) prefix_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) previous_version: ::std::option::Option<i64>,
    pub(crate) current_version: ::std::option::Option<i64>,
}
impl RestoreManagedPrefixListVersionInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the prefix list.</p>
    /// This field is required.
    pub fn prefix_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn set_prefix_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn get_prefix_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_id
    }
    /// <p>The version to restore.</p>
    /// This field is required.
    pub fn previous_version(mut self, input: i64) -> Self {
        self.previous_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version to restore.</p>
    pub fn set_previous_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.previous_version = input;
        self
    }
    /// <p>The version to restore.</p>
    pub fn get_previous_version(&self) -> &::std::option::Option<i64> {
        &self.previous_version
    }
    /// <p>The current version number for the prefix list.</p>
    /// This field is required.
    pub fn current_version(mut self, input: i64) -> Self {
        self.current_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current version number for the prefix list.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The current version number for the prefix list.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<i64> {
        &self.current_version
    }
    /// Consumes the builder and constructs a [`RestoreManagedPrefixListVersionInput`](crate::operation::restore_managed_prefix_list_version::RestoreManagedPrefixListVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_managed_prefix_list_version::RestoreManagedPrefixListVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::restore_managed_prefix_list_version::RestoreManagedPrefixListVersionInput {
                dry_run: self.dry_run,
                prefix_list_id: self.prefix_list_id,
                previous_version: self.previous_version,
                current_version: self.current_version,
            },
        )
    }
}
