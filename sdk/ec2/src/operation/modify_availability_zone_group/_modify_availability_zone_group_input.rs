// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyAvailabilityZoneGroupInput {
    /// <p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>
    pub opt_in_status: ::std::option::Option<crate::types::ModifyAvailabilityZoneOptInStatus>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl ModifyAvailabilityZoneGroupInput {
    /// <p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>
    pub fn opt_in_status(&self) -> ::std::option::Option<&crate::types::ModifyAvailabilityZoneOptInStatus> {
        self.opt_in_status.as_ref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl ModifyAvailabilityZoneGroupInput {
    /// Creates a new builder-style object to manufacture [`ModifyAvailabilityZoneGroupInput`](crate::operation::modify_availability_zone_group::ModifyAvailabilityZoneGroupInput).
    pub fn builder() -> crate::operation::modify_availability_zone_group::builders::ModifyAvailabilityZoneGroupInputBuilder {
        crate::operation::modify_availability_zone_group::builders::ModifyAvailabilityZoneGroupInputBuilder::default()
    }
}

/// A builder for [`ModifyAvailabilityZoneGroupInput`](crate::operation::modify_availability_zone_group::ModifyAvailabilityZoneGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModifyAvailabilityZoneGroupInputBuilder {
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) opt_in_status: ::std::option::Option<crate::types::ModifyAvailabilityZoneOptInStatus>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl ModifyAvailabilityZoneGroupInputBuilder {
    /// <p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.</p>
    /// This field is required.
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// <p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>
    /// This field is required.
    pub fn opt_in_status(mut self, input: crate::types::ModifyAvailabilityZoneOptInStatus) -> Self {
        self.opt_in_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>
    pub fn set_opt_in_status(mut self, input: ::std::option::Option<crate::types::ModifyAvailabilityZoneOptInStatus>) -> Self {
        self.opt_in_status = input;
        self
    }
    /// <p>Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">Amazon Web Services Support</a> to opt out of a Local Zone or Wavelength Zone group.</p>
    pub fn get_opt_in_status(&self) -> &::std::option::Option<crate::types::ModifyAvailabilityZoneOptInStatus> {
        &self.opt_in_status
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`ModifyAvailabilityZoneGroupInput`](crate::operation::modify_availability_zone_group::ModifyAvailabilityZoneGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_availability_zone_group::ModifyAvailabilityZoneGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::modify_availability_zone_group::ModifyAvailabilityZoneGroupInput {
            group_name: self.group_name,
            opt_in_status: self.opt_in_status,
            dry_run: self.dry_run,
        })
    }
}
