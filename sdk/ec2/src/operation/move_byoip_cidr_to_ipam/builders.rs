// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::move_byoip_cidr_to_ipam::_move_byoip_cidr_to_ipam_output::MoveByoipCidrToIpamOutputBuilder;

pub use crate::operation::move_byoip_cidr_to_ipam::_move_byoip_cidr_to_ipam_input::MoveByoipCidrToIpamInputBuilder;

/// Fluent builder constructing a request to `MoveByoipCidrToIpam`.
///
/// <p>Move an BYOIP IPv4 CIDR to IPAM from a public IPv4 pool.</p>
/// <p>If you already have an IPv4 BYOIP CIDR with Amazon Web Services, you can move the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to IPAM. If you are bringing a new IP address to Amazon Web Services for the first time, complete the steps in <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoip-ipam.html">Tutorial: BYOIP address CIDRs to IPAM</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct MoveByoipCidrToIpamFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::move_byoip_cidr_to_ipam::builders::MoveByoipCidrToIpamInputBuilder,
}
impl MoveByoipCidrToIpamFluentBuilder {
    /// Creates a new `MoveByoipCidrToIpam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>The BYOIP CIDR.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cidr(input.into());
        self
    }
    /// <p>The BYOIP CIDR.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cidr(input);
        self
    }
    /// <p>The IPAM pool ID.</p>
    pub fn ipam_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ipam_pool_id(input.into());
        self
    }
    /// <p>The IPAM pool ID.</p>
    pub fn set_ipam_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_pool_id(input);
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>
    pub fn ipam_pool_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ipam_pool_owner(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>
    pub fn set_ipam_pool_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_pool_owner(input);
        self
    }
}
