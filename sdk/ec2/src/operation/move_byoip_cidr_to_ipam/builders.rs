// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::move_byoip_cidr_to_ipam::_move_byoip_cidr_to_ipam_output::MoveByoipCidrToIpamOutputBuilder;

pub use crate::operation::move_byoip_cidr_to_ipam::_move_byoip_cidr_to_ipam_input::MoveByoipCidrToIpamInputBuilder;

impl MoveByoipCidrToIpamInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.move_byoip_cidr_to_ipam();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `MoveByoipCidrToIpam`.
///
/// <p>Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool.</p>
/// <p>If you already have a BYOIPv4 CIDR with Amazon Web Services, you can move the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to IPAM. If you are bringing a new IP address to Amazon Web Services for the first time, complete the steps in <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoip-ipam.html">Tutorial: BYOIP address CIDRs to IPAM</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct MoveByoipCidrToIpamFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::move_byoip_cidr_to_ipam::builders::MoveByoipCidrToIpamInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamOutput,
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
    > for MoveByoipCidrToIpamFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamOutput,
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl MoveByoipCidrToIpamFluentBuilder {
    /// Creates a new `MoveByoipCidrToIpam`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the MoveByoipCidrToIpam as a reference.
    pub fn as_input(&self) -> &crate::operation::move_byoip_cidr_to_ipam::builders::MoveByoipCidrToIpamInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpam::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpam::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamOutput,
        crate::operation::move_byoip_cidr_to_ipam::MoveByoipCidrToIpamError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The BYOIP CIDR.</p>
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cidr(input.into());
        self
    }
    /// <p>The BYOIP CIDR.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cidr(input);
        self
    }
    /// <p>The BYOIP CIDR.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cidr()
    }
    /// <p>The IPAM pool ID.</p>
    pub fn ipam_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_pool_id(input.into());
        self
    }
    /// <p>The IPAM pool ID.</p>
    pub fn set_ipam_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_pool_id(input);
        self
    }
    /// <p>The IPAM pool ID.</p>
    pub fn get_ipam_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_pool_id()
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>
    pub fn ipam_pool_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_pool_owner(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>
    pub fn set_ipam_pool_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_pool_owner(input);
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the IPAM pool.</p>
    pub fn get_ipam_pool_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_pool_owner()
    }
}
