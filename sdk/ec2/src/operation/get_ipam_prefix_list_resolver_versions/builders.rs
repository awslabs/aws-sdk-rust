// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_ipam_prefix_list_resolver_versions::_get_ipam_prefix_list_resolver_versions_output::GetIpamPrefixListResolverVersionsOutputBuilder;

pub use crate::operation::get_ipam_prefix_list_resolver_versions::_get_ipam_prefix_list_resolver_versions_input::GetIpamPrefixListResolverVersionsInputBuilder;

impl crate::operation::get_ipam_prefix_list_resolver_versions::builders::GetIpamPrefixListResolverVersionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_ipam_prefix_list_resolver_versions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetIpamPrefixListResolverVersions`.
///
/// <p>Retrieves version information for an IPAM prefix list resolver.</p>
/// <p>Each version is a snapshot of what CIDRs matched your rules at that moment in time. The version number increments every time the CIDR list changes due to infrastructure changes.</p>
/// <p><b>Version example:</b></p>
/// <p><b>Initial State (Version 1)</b></p>
/// <p>Production environment:</p>
/// <ul>
/// <li>
/// <p>vpc-prod-web (10.1.0.0/16) - tagged env=prod</p></li>
/// <li>
/// <p>vpc-prod-db (10.2.0.0/16) - tagged env=prod</p></li>
/// </ul>
/// <p>Resolver rule: Include all VPCs tagged env=prod</p>
/// <p><b>Version 1 CIDRs:</b> 10.1.0.0/16, 10.2.0.0/16</p>
/// <p><b>Infrastructure Change (Version 2)</b></p>
/// <p>New VPC added:</p>
/// <ul>
/// <li>
/// <p>vpc-prod-api (10.3.0.0/16) - tagged env=prod</p></li>
/// </ul>
/// <p>IPAM automatically detects the change and creates a new version.</p>
/// <p><b>Version 2 CIDRs:</b> 10.1.0.0/16, 10.2.0.0/16, 10.3.0.0/16</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetIpamPrefixListResolverVersionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_ipam_prefix_list_resolver_versions::builders::GetIpamPrefixListResolverVersionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsOutput,
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsError,
    > for GetIpamPrefixListResolverVersionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsOutput,
            crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetIpamPrefixListResolverVersionsFluentBuilder {
    /// Creates a new `GetIpamPrefixListResolverVersionsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetIpamPrefixListResolverVersions as a reference.
    pub fn as_input(&self) -> &crate::operation::get_ipam_prefix_list_resolver_versions::builders::GetIpamPrefixListResolverVersionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsOutput,
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_ipam_prefix_list_resolver_versions::paginator::GetIpamPrefixListResolverVersionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::get_ipam_prefix_list_resolver_versions::paginator::GetIpamPrefixListResolverVersionsPaginator {
        crate::operation::get_ipam_prefix_list_resolver_versions::paginator::GetIpamPrefixListResolverVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_prefix_list_resolver_id(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_prefix_list_resolver_id(input);
        self
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_prefix_list_resolver_id()
    }
    ///
    /// Appends an item to `IpamPrefixListResolverVersions`.
    ///
    /// To override the contents of this collection use [`set_ipam_prefix_list_resolver_versions`](Self::set_ipam_prefix_list_resolver_versions).
    ///
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub fn ipam_prefix_list_resolver_versions(mut self, input: i64) -> Self {
        self.inner = self.inner.ipam_prefix_list_resolver_versions(input);
        self
    }
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub fn set_ipam_prefix_list_resolver_versions(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.inner = self.inner.set_ipam_prefix_list_resolver_versions(input);
        self
    }
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub fn get_ipam_prefix_list_resolver_versions(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        self.inner.get_ipam_prefix_list_resolver_versions()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    ///
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters to limit the results.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>One or more filters to limit the results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>One or more filters to limit the results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
