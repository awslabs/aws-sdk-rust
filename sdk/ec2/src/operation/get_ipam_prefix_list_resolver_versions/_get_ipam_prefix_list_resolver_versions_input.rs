// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetIpamPrefixListResolverVersionsInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub ipam_prefix_list_resolver_versions: ::std::option::Option<::std::vec::Vec<i64>>,
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>One or more filters to limit the results.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>The token for the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl GetIpamPrefixListResolverVersionsInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub fn ipam_prefix_list_resolver_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_id.as_deref()
    }
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ipam_prefix_list_resolver_versions.is_none()`.
    pub fn ipam_prefix_list_resolver_versions(&self) -> &[i64] {
        self.ipam_prefix_list_resolver_versions.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>One or more filters to limit the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetIpamPrefixListResolverVersionsInput {
    /// Creates a new builder-style object to manufacture [`GetIpamPrefixListResolverVersionsInput`](crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsInput).
    pub fn builder() -> crate::operation::get_ipam_prefix_list_resolver_versions::builders::GetIpamPrefixListResolverVersionsInputBuilder {
        crate::operation::get_ipam_prefix_list_resolver_versions::builders::GetIpamPrefixListResolverVersionsInputBuilder::default()
    }
}

/// A builder for [`GetIpamPrefixListResolverVersionsInput`](crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetIpamPrefixListResolverVersionsInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    pub(crate) ipam_prefix_list_resolver_versions: ::std::option::Option<::std::vec::Vec<i64>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl GetIpamPrefixListResolverVersionsInputBuilder {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    /// This field is required.
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver whose versions you want to retrieve.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_id
    }
    /// Appends an item to `ipam_prefix_list_resolver_versions`.
    ///
    /// To override the contents of this collection use [`set_ipam_prefix_list_resolver_versions`](Self::set_ipam_prefix_list_resolver_versions).
    ///
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub fn ipam_prefix_list_resolver_versions(mut self, input: i64) -> Self {
        let mut v = self.ipam_prefix_list_resolver_versions.unwrap_or_default();
        v.push(input);
        self.ipam_prefix_list_resolver_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub fn set_ipam_prefix_list_resolver_versions(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.ipam_prefix_list_resolver_versions = input;
        self
    }
    /// <p>Specific version numbers to retrieve. If not specified, all versions are returned.</p>
    pub fn get_ipam_prefix_list_resolver_versions(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        &self.ipam_prefix_list_resolver_versions
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters to limit the results.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more filters to limit the results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>One or more filters to limit the results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`GetIpamPrefixListResolverVersionsInput`](crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_ipam_prefix_list_resolver_versions::GetIpamPrefixListResolverVersionsInput {
                dry_run: self.dry_run,
                ipam_prefix_list_resolver_id: self.ipam_prefix_list_resolver_id,
                ipam_prefix_list_resolver_versions: self.ipam_prefix_list_resolver_versions,
                max_results: self.max_results,
                filters: self.filters,
                next_token: self.next_token,
            },
        )
    }
}
