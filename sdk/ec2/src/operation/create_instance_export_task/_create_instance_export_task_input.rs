// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateInstanceExportTaskInput {
    /// <p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The format and location for an export instance task.</p>
    pub export_to_s3_task: ::std::option::Option<crate::types::ExportToS3TaskSpecification>,
    /// <p>The ID of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The target virtualization environment.</p>
    pub target_environment: ::std::option::Option<crate::types::ExportEnvironment>,
    /// <p>The tags to apply to the export instance task during creation.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateInstanceExportTaskInput {
    /// <p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The format and location for an export instance task.</p>
    pub fn export_to_s3_task(&self) -> ::std::option::Option<&crate::types::ExportToS3TaskSpecification> {
        self.export_to_s3_task.as_ref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The target virtualization environment.</p>
    pub fn target_environment(&self) -> ::std::option::Option<&crate::types::ExportEnvironment> {
        self.target_environment.as_ref()
    }
    /// <p>The tags to apply to the export instance task during creation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
}
impl CreateInstanceExportTaskInput {
    /// Creates a new builder-style object to manufacture [`CreateInstanceExportTaskInput`](crate::operation::create_instance_export_task::CreateInstanceExportTaskInput).
    pub fn builder() -> crate::operation::create_instance_export_task::builders::CreateInstanceExportTaskInputBuilder {
        crate::operation::create_instance_export_task::builders::CreateInstanceExportTaskInputBuilder::default()
    }
}

/// A builder for [`CreateInstanceExportTaskInput`](crate::operation::create_instance_export_task::CreateInstanceExportTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateInstanceExportTaskInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) export_to_s3_task: ::std::option::Option<crate::types::ExportToS3TaskSpecification>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_environment: ::std::option::Option<crate::types::ExportEnvironment>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateInstanceExportTaskInputBuilder {
    /// <p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the conversion task or the resource being exported. The maximum length is 255 characters.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The format and location for an export instance task.</p>
    /// This field is required.
    pub fn export_to_s3_task(mut self, input: crate::types::ExportToS3TaskSpecification) -> Self {
        self.export_to_s3_task = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format and location for an export instance task.</p>
    pub fn set_export_to_s3_task(mut self, input: ::std::option::Option<crate::types::ExportToS3TaskSpecification>) -> Self {
        self.export_to_s3_task = input;
        self
    }
    /// <p>The format and location for an export instance task.</p>
    pub fn get_export_to_s3_task(&self) -> &::std::option::Option<crate::types::ExportToS3TaskSpecification> {
        &self.export_to_s3_task
    }
    /// <p>The ID of the instance.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The target virtualization environment.</p>
    /// This field is required.
    pub fn target_environment(mut self, input: crate::types::ExportEnvironment) -> Self {
        self.target_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target virtualization environment.</p>
    pub fn set_target_environment(mut self, input: ::std::option::Option<crate::types::ExportEnvironment>) -> Self {
        self.target_environment = input;
        self
    }
    /// <p>The target virtualization environment.</p>
    pub fn get_target_environment(&self) -> &::std::option::Option<crate::types::ExportEnvironment> {
        &self.target_environment
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the export instance task during creation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to the export instance task during creation.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to apply to the export instance task during creation.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// Consumes the builder and constructs a [`CreateInstanceExportTaskInput`](crate::operation::create_instance_export_task::CreateInstanceExportTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_instance_export_task::CreateInstanceExportTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_instance_export_task::CreateInstanceExportTaskInput {
            description: self.description,
            export_to_s3_task: self.export_to_s3_task,
            instance_id: self.instance_id,
            target_environment: self.target_environment,
            tag_specifications: self.tag_specifications,
        })
    }
}
