// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_network_acl_entry::_create_network_acl_entry_output::CreateNetworkAclEntryOutputBuilder;

pub use crate::operation::create_network_acl_entry::_create_network_acl_entry_input::CreateNetworkAclEntryInputBuilder;

impl CreateNetworkAclEntryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_network_acl_entry::CreateNetworkAclEntryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_network_acl_entry::CreateNetworkAclEntryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_network_acl_entry();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateNetworkAclEntry`.
///
/// <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p>
/// <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p>
/// <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p>
/// <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateNetworkAclEntryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_network_acl_entry::builders::CreateNetworkAclEntryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_network_acl_entry::CreateNetworkAclEntryOutput,
        crate::operation::create_network_acl_entry::CreateNetworkAclEntryError,
    > for CreateNetworkAclEntryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_network_acl_entry::CreateNetworkAclEntryOutput,
            crate::operation::create_network_acl_entry::CreateNetworkAclEntryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateNetworkAclEntryFluentBuilder {
    /// Creates a new `CreateNetworkAclEntry`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateNetworkAclEntry as a reference.
    pub fn as_input(&self) -> &crate::operation::create_network_acl_entry::builders::CreateNetworkAclEntryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_network_acl_entry::CreateNetworkAclEntryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_network_acl_entry::CreateNetworkAclEntryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_network_acl_entry::CreateNetworkAclEntry::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_network_acl_entry::CreateNetworkAclEntry::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_network_acl_entry::CreateNetworkAclEntryOutput,
        crate::operation::create_network_acl_entry::CreateNetworkAclEntryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    pub fn cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cidr_block(input.into());
        self
    }
    /// <p>The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    pub fn set_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cidr_block(input);
        self
    }
    /// <p>The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>). We modify the specified CIDR block to its canonical form; for example, if you specify <code>100.68.0.18/18</code>, we modify it to <code>100.68.0.0/18</code>.</p>
    pub fn get_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cidr_block()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
    pub fn egress(mut self, input: bool) -> Self {
        self.inner = self.inner.egress(input);
        self
    }
    /// <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
    pub fn set_egress(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_egress(input);
        self
    }
    /// <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
    pub fn get_egress(&self) -> &::std::option::Option<bool> {
        self.inner.get_egress()
    }
    /// <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    pub fn icmp_type_code(mut self, input: crate::types::IcmpTypeCode) -> Self {
        self.inner = self.inner.icmp_type_code(input);
        self
    }
    /// <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    pub fn set_icmp_type_code(mut self, input: ::std::option::Option<crate::types::IcmpTypeCode>) -> Self {
        self.inner = self.inner.set_icmp_type_code(input);
        self
    }
    /// <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    pub fn get_icmp_type_code(&self) -> &::std::option::Option<crate::types::IcmpTypeCode> {
        self.inner.get_icmp_type_code()
    }
    /// <p>The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).</p>
    pub fn ipv6_cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipv6_cidr_block(input.into());
        self
    }
    /// <p>The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).</p>
    pub fn set_ipv6_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipv6_cidr_block(input);
        self
    }
    /// <p>The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).</p>
    pub fn get_ipv6_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipv6_cidr_block()
    }
    /// <p>The ID of the network ACL.</p>
    pub fn network_acl_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.network_acl_id(input.into());
        self
    }
    /// <p>The ID of the network ACL.</p>
    pub fn set_network_acl_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_network_acl_id(input);
        self
    }
    /// <p>The ID of the network ACL.</p>
    pub fn get_network_acl_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_network_acl_id()
    }
    /// <p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    pub fn port_range(mut self, input: crate::types::PortRange) -> Self {
        self.inner = self.inner.port_range(input);
        self
    }
    /// <p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    pub fn set_port_range(mut self, input: ::std::option::Option<crate::types::PortRange>) -> Self {
        self.inner = self.inner.set_port_range(input);
        self
    }
    /// <p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    pub fn get_port_range(&self) -> &::std::option::Option<crate::types::PortRange> {
        self.inner.get_port_range()
    }
    /// <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    pub fn protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.protocol(input.into());
        self
    }
    /// <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_protocol()
    }
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    pub fn rule_action(mut self, input: crate::types::RuleAction) -> Self {
        self.inner = self.inner.rule_action(input);
        self
    }
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    pub fn set_rule_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.inner = self.inner.set_rule_action(input);
        self
    }
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    pub fn get_rule_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        self.inner.get_rule_action()
    }
    /// <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p>
    /// <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    pub fn rule_number(mut self, input: i32) -> Self {
        self.inner = self.inner.rule_number(input);
        self
    }
    /// <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p>
    /// <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    pub fn set_rule_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_rule_number(input);
        self
    }
    /// <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p>
    /// <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    pub fn get_rule_number(&self) -> &::std::option::Option<i32> {
        self.inner.get_rule_number()
    }
}
