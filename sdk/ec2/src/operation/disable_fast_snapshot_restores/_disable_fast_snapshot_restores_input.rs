// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisableFastSnapshotRestoresInput {
    /// <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>
    pub source_snapshot_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl DisableFastSnapshotRestoresInput {
    /// <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[::std::string::String] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_snapshot_ids.is_none()`.
    pub fn source_snapshot_ids(&self) -> &[::std::string::String] {
        self.source_snapshot_ids.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl DisableFastSnapshotRestoresInput {
    /// Creates a new builder-style object to manufacture [`DisableFastSnapshotRestoresInput`](crate::operation::disable_fast_snapshot_restores::DisableFastSnapshotRestoresInput).
    pub fn builder() -> crate::operation::disable_fast_snapshot_restores::builders::DisableFastSnapshotRestoresInputBuilder {
        crate::operation::disable_fast_snapshot_restores::builders::DisableFastSnapshotRestoresInputBuilder::default()
    }
}

/// A builder for [`DisableFastSnapshotRestoresInput`](crate::operation::disable_fast_snapshot_restores::DisableFastSnapshotRestoresInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisableFastSnapshotRestoresInputBuilder {
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_snapshot_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl DisableFastSnapshotRestoresInputBuilder {
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>One or more Availability Zones. For example, <code>us-east-2a</code>.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zones
    }
    /// Appends an item to `source_snapshot_ids`.
    ///
    /// To override the contents of this collection use [`set_source_snapshot_ids`](Self::set_source_snapshot_ids).
    ///
    /// <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>
    pub fn source_snapshot_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_snapshot_ids.unwrap_or_default();
        v.push(input.into());
        self.source_snapshot_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>
    pub fn set_source_snapshot_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_snapshot_ids = input;
        self
    }
    /// <p>The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</p>
    pub fn get_source_snapshot_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_snapshot_ids
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`DisableFastSnapshotRestoresInput`](crate::operation::disable_fast_snapshot_restores::DisableFastSnapshotRestoresInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::disable_fast_snapshot_restores::DisableFastSnapshotRestoresInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::disable_fast_snapshot_restores::DisableFastSnapshotRestoresInput {
            availability_zones: self.availability_zones,
            source_snapshot_ids: self.source_snapshot_ids,
            dry_run: self.dry_run,
        })
    }
}
