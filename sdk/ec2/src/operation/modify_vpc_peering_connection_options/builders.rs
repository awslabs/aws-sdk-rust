// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_vpc_peering_connection_options::_modify_vpc_peering_connection_options_output::ModifyVpcPeeringConnectionOptionsOutputBuilder;

pub use crate::operation::modify_vpc_peering_connection_options::_modify_vpc_peering_connection_options_input::ModifyVpcPeeringConnectionOptionsInputBuilder;

/// Fluent builder constructing a request to `ModifyVpcPeeringConnectionOptions`.
///
/// <note>
/// <p>We are retiring EC2-Classic. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
/// </note>
/// <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p>
/// <ul>
/// <li> <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p> </li>
/// <li> <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p> </li>
/// <li> <p>Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p> </li>
/// </ul>
/// <p>If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different different Amazon Web Services accounts or different Regions. For peered VPCs in different Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <code>DescribeVpcPeeringConnections</code> command.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcPeeringConnectionOptionsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::modify_vpc_peering_connection_options::builders::ModifyVpcPeeringConnectionOptionsInputBuilder
            }
impl ModifyVpcPeeringConnectionOptionsFluentBuilder {
    /// Creates a new `ModifyVpcPeeringConnectionOptions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptions, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsOutput, aws_smithy_http::result::SdkError<crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The VPC peering connection options for the accepter VPC.</p>
    pub fn accepter_peering_connection_options(
        mut self,
        input: crate::types::PeeringConnectionOptionsRequest,
    ) -> Self {
        self.inner = self.inner.accepter_peering_connection_options(input);
        self
    }
    /// <p>The VPC peering connection options for the accepter VPC.</p>
    pub fn set_accepter_peering_connection_options(
        mut self,
        input: std::option::Option<crate::types::PeeringConnectionOptionsRequest>,
    ) -> Self {
        self.inner = self.inner.set_accepter_peering_connection_options(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>The VPC peering connection options for the requester VPC.</p>
    pub fn requester_peering_connection_options(
        mut self,
        input: crate::types::PeeringConnectionOptionsRequest,
    ) -> Self {
        self.inner = self.inner.requester_peering_connection_options(input);
        self
    }
    /// <p>The VPC peering connection options for the requester VPC.</p>
    pub fn set_requester_peering_connection_options(
        mut self,
        input: std::option::Option<crate::types::PeeringConnectionOptionsRequest>,
    ) -> Self {
        self.inner = self.inner.set_requester_peering_connection_options(input);
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn vpc_peering_connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_peering_connection_id(input.into());
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn set_vpc_peering_connection_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_vpc_peering_connection_id(input);
        self
    }
}
