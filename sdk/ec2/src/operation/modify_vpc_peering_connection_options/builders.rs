// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_vpc_peering_connection_options::_modify_vpc_peering_connection_options_output::ModifyVpcPeeringConnectionOptionsOutputBuilder;

pub use crate::operation::modify_vpc_peering_connection_options::_modify_vpc_peering_connection_options_input::ModifyVpcPeeringConnectionOptionsInputBuilder;

impl ModifyVpcPeeringConnectionOptionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_vpc_peering_connection_options();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyVpcPeeringConnectionOptions`.
///
/// <p>Modifies the VPC peering connection options on one side of a VPC peering connection.</p>
/// <p>If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different Amazon Web Services accounts or different Regions. For peered VPCs in different Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <code>DescribeVpcPeeringConnections</code> command.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyVpcPeeringConnectionOptionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_vpc_peering_connection_options::builders::ModifyVpcPeeringConnectionOptionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsOutput,
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError,
    > for ModifyVpcPeeringConnectionOptionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsOutput,
            crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyVpcPeeringConnectionOptionsFluentBuilder {
    /// Creates a new `ModifyVpcPeeringConnectionOptions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyVpcPeeringConnectionOptions as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_vpc_peering_connection_options::builders::ModifyVpcPeeringConnectionOptionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsOutput,
        crate::operation::modify_vpc_peering_connection_options::ModifyVpcPeeringConnectionOptionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The VPC peering connection options for the accepter VPC.</p>
    pub fn accepter_peering_connection_options(mut self, input: crate::types::PeeringConnectionOptionsRequest) -> Self {
        self.inner = self.inner.accepter_peering_connection_options(input);
        self
    }
    /// <p>The VPC peering connection options for the accepter VPC.</p>
    pub fn set_accepter_peering_connection_options(mut self, input: ::std::option::Option<crate::types::PeeringConnectionOptionsRequest>) -> Self {
        self.inner = self.inner.set_accepter_peering_connection_options(input);
        self
    }
    /// <p>The VPC peering connection options for the accepter VPC.</p>
    pub fn get_accepter_peering_connection_options(&self) -> &::std::option::Option<crate::types::PeeringConnectionOptionsRequest> {
        self.inner.get_accepter_peering_connection_options()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The VPC peering connection options for the requester VPC.</p>
    pub fn requester_peering_connection_options(mut self, input: crate::types::PeeringConnectionOptionsRequest) -> Self {
        self.inner = self.inner.requester_peering_connection_options(input);
        self
    }
    /// <p>The VPC peering connection options for the requester VPC.</p>
    pub fn set_requester_peering_connection_options(mut self, input: ::std::option::Option<crate::types::PeeringConnectionOptionsRequest>) -> Self {
        self.inner = self.inner.set_requester_peering_connection_options(input);
        self
    }
    /// <p>The VPC peering connection options for the requester VPC.</p>
    pub fn get_requester_peering_connection_options(&self) -> &::std::option::Option<crate::types::PeeringConnectionOptionsRequest> {
        self.inner.get_requester_peering_connection_options()
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn vpc_peering_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_peering_connection_id(input.into());
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn set_vpc_peering_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_peering_connection_id(input);
        self
    }
    /// <p>The ID of the VPC peering connection.</p>
    pub fn get_vpc_peering_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vpc_peering_connection_id()
    }
}
