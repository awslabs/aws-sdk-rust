// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_spot_instance_requests::_describe_spot_instance_requests_output::DescribeSpotInstanceRequestsOutputBuilder;

pub use crate::operation::describe_spot_instance_requests::_describe_spot_instance_requests_input::DescribeSpotInstanceRequestsInputBuilder;

impl crate::operation::describe_spot_instance_requests::builders::DescribeSpotInstanceRequestsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_spot_instance_requests();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeSpotInstanceRequests`.
///
/// <p>Describes the specified Spot Instance requests.</p>
/// <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p>
/// <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to limit the number of items returned. This paginates the output, which makes the list more manageable and returns the items faster. If the list of items exceeds your <code>MaxResults</code> value, then that number of items is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining items.</p>
/// <p>Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeSpotInstanceRequestsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_spot_instance_requests::builders::DescribeSpotInstanceRequestsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsOutput,
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsError,
    > for DescribeSpotInstanceRequestsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsOutput,
            crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeSpotInstanceRequestsFluentBuilder {
    /// Creates a new `DescribeSpotInstanceRequests`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeSpotInstanceRequests as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_spot_instance_requests::builders::DescribeSpotInstanceRequestsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequests::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequests::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsOutput,
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_spot_instance_requests::paginator::DescribeSpotInstanceRequestsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::describe_spot_instance_requests::paginator::DescribeSpotInstanceRequestsPaginator {
        crate::operation::describe_spot_instance_requests::paginator::DescribeSpotInstanceRequestsPaginator::new(self.handle, self.inner)
    }
    ///
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>availability-zone-group</code> - The Availability Zone group.</p></li>
    /// <li>
    /// <p><code>create-time</code> - The time stamp when the Spot Instance request was created.</p></li>
    /// <li>
    /// <p><code>fault-code</code> - The fault code related to the request.</p></li>
    /// <li>
    /// <p><code>fault-message</code> - The fault message related to the request.</p></li>
    /// <li>
    /// <p><code>instance-id</code> - The ID of the instance that fulfilled the request.</p></li>
    /// <li>
    /// <p><code>launch-group</code> - The Spot Instance launch group.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> or <code>gp3</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic.</p></li>
    /// <li>
    /// <p><code>launch.group-id</code> - The ID of the security group for the instance.</p></li>
    /// <li>
    /// <p><code>launch.group-name</code> - The name of the security group for the instance.</p></li>
    /// <li>
    /// <p><code>launch.image-id</code> - The ID of the AMI.</p></li>
    /// <li>
    /// <p><code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p></li>
    /// <li>
    /// <p><code>launch.kernel-id</code> - The kernel ID.</p></li>
    /// <li>
    /// <p><code>launch.key-name</code> - The name of the key pair the instance launched with.</p></li>
    /// <li>
    /// <p><code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p></li>
    /// <li>
    /// <p><code>launch.ramdisk-id</code> - The RAM disk ID.</p></li>
    /// <li>
    /// <p><code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p></li>
    /// <li>
    /// <p><code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p></li>
    /// <li>
    /// <p><code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p></li>
    /// <li>
    /// <p><code>network-interface.description</code> - A description of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p></li>
    /// <li>
    /// <p><code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.network-interface-id</code> - The ID of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p></li>
    /// <li>
    /// <p><code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p></li>
    /// <li>
    /// <p><code>spot-instance-request-id</code> - The Spot Instance request ID.</p></li>
    /// <li>
    /// <p><code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p></li>
    /// <li>
    /// <p><code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p></li>
    /// <li>
    /// <p><code>status-message</code> - The message explaining the status of the Spot Instance request.</p></li>
    /// <li>
    /// <p><code>tag:<key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p></li>
    /// <li>
    /// <p><code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p></li>
    /// <li>
    /// <p><code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p></li>
    /// <li>
    /// <p><code>valid-from</code> - The start date of the request.</p></li>
    /// <li>
    /// <p><code>valid-until</code> - The end date of the request.</p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>availability-zone-group</code> - The Availability Zone group.</p></li>
    /// <li>
    /// <p><code>create-time</code> - The time stamp when the Spot Instance request was created.</p></li>
    /// <li>
    /// <p><code>fault-code</code> - The fault code related to the request.</p></li>
    /// <li>
    /// <p><code>fault-message</code> - The fault message related to the request.</p></li>
    /// <li>
    /// <p><code>instance-id</code> - The ID of the instance that fulfilled the request.</p></li>
    /// <li>
    /// <p><code>launch-group</code> - The Spot Instance launch group.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> or <code>gp3</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic.</p></li>
    /// <li>
    /// <p><code>launch.group-id</code> - The ID of the security group for the instance.</p></li>
    /// <li>
    /// <p><code>launch.group-name</code> - The name of the security group for the instance.</p></li>
    /// <li>
    /// <p><code>launch.image-id</code> - The ID of the AMI.</p></li>
    /// <li>
    /// <p><code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p></li>
    /// <li>
    /// <p><code>launch.kernel-id</code> - The kernel ID.</p></li>
    /// <li>
    /// <p><code>launch.key-name</code> - The name of the key pair the instance launched with.</p></li>
    /// <li>
    /// <p><code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p></li>
    /// <li>
    /// <p><code>launch.ramdisk-id</code> - The RAM disk ID.</p></li>
    /// <li>
    /// <p><code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p></li>
    /// <li>
    /// <p><code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p></li>
    /// <li>
    /// <p><code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p></li>
    /// <li>
    /// <p><code>network-interface.description</code> - A description of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p></li>
    /// <li>
    /// <p><code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.network-interface-id</code> - The ID of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p></li>
    /// <li>
    /// <p><code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p></li>
    /// <li>
    /// <p><code>spot-instance-request-id</code> - The Spot Instance request ID.</p></li>
    /// <li>
    /// <p><code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p></li>
    /// <li>
    /// <p><code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p></li>
    /// <li>
    /// <p><code>status-message</code> - The message explaining the status of the Spot Instance request.</p></li>
    /// <li>
    /// <p><code>tag:<key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p></li>
    /// <li>
    /// <p><code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p></li>
    /// <li>
    /// <p><code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p></li>
    /// <li>
    /// <p><code>valid-from</code> - The start date of the request.</p></li>
    /// <li>
    /// <p><code>valid-until</code> - The end date of the request.</p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li>
    /// <p><code>availability-zone-group</code> - The Availability Zone group.</p></li>
    /// <li>
    /// <p><code>create-time</code> - The time stamp when the Spot Instance request was created.</p></li>
    /// <li>
    /// <p><code>fault-code</code> - The fault code related to the request.</p></li>
    /// <li>
    /// <p><code>fault-message</code> - The fault message related to the request.</p></li>
    /// <li>
    /// <p><code>instance-id</code> - The ID of the instance that fulfilled the request.</p></li>
    /// <li>
    /// <p><code>launch-group</code> - The Spot Instance launch group.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p></li>
    /// <li>
    /// <p><code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> or <code>gp3</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic.</p></li>
    /// <li>
    /// <p><code>launch.group-id</code> - The ID of the security group for the instance.</p></li>
    /// <li>
    /// <p><code>launch.group-name</code> - The name of the security group for the instance.</p></li>
    /// <li>
    /// <p><code>launch.image-id</code> - The ID of the AMI.</p></li>
    /// <li>
    /// <p><code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p></li>
    /// <li>
    /// <p><code>launch.kernel-id</code> - The kernel ID.</p></li>
    /// <li>
    /// <p><code>launch.key-name</code> - The name of the key pair the instance launched with.</p></li>
    /// <li>
    /// <p><code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p></li>
    /// <li>
    /// <p><code>launch.ramdisk-id</code> - The RAM disk ID.</p></li>
    /// <li>
    /// <p><code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p></li>
    /// <li>
    /// <p><code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p></li>
    /// <li>
    /// <p><code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p></li>
    /// <li>
    /// <p><code>network-interface.description</code> - A description of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p></li>
    /// <li>
    /// <p><code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.network-interface-id</code> - The ID of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p></li>
    /// <li>
    /// <p><code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p></li>
    /// <li>
    /// <p><code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p></li>
    /// <li>
    /// <p><code>spot-instance-request-id</code> - The Spot Instance request ID.</p></li>
    /// <li>
    /// <p><code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p></li>
    /// <li>
    /// <p><code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p></li>
    /// <li>
    /// <p><code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p></li>
    /// <li>
    /// <p><code>status-message</code> - The message explaining the status of the Spot Instance request.</p></li>
    /// <li>
    /// <p><code>tag:<key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p></li>
    /// <li>
    /// <p><code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p></li>
    /// <li>
    /// <p><code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p></li>
    /// <li>
    /// <p><code>valid-from</code> - The start date of the request.</p></li>
    /// <li>
    /// <p><code>valid-until</code> - The end date of the request.</p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    ///
    /// Appends an item to `SpotInstanceRequestIds`.
    ///
    /// To override the contents of this collection use [`set_spot_instance_request_ids`](Self::set_spot_instance_request_ids).
    ///
    /// <p>The IDs of the Spot Instance requests.</p>
    pub fn spot_instance_request_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.spot_instance_request_ids(input.into());
        self
    }
    /// <p>The IDs of the Spot Instance requests.</p>
    pub fn set_spot_instance_request_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_spot_instance_request_ids(input);
        self
    }
    /// <p>The IDs of the Spot Instance requests.</p>
    pub fn get_spot_instance_request_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_spot_instance_request_ids()
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
