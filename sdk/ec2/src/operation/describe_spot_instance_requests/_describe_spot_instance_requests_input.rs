// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for DescribeSpotInstanceRequests.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSpotInstanceRequestsInput {
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li>
    /// <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li>
    /// <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li>
    /// <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li>
    /// <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li>
    /// <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li>
    /// <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li>
    /// <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li>
    /// <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li>
    /// <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li>
    /// <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li>
    /// <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li>
    /// <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li>
    /// <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li>
    /// <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li>
    /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li>
    /// <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li>
    /// <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li>
    /// <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li>
    /// <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li>
    /// <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li>
    /// <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li>
    /// <li> <p> <code>tag:
    /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li>
    /// <li> <p> <code>valid-from</code> - The start date of the request.</p> </li>
    /// <li> <p> <code>valid-until</code> - The end date of the request.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>One or more Spot Instance request IDs.</p>
    #[doc(hidden)]
    pub spot_instance_request_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token to request the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl DescribeSpotInstanceRequestsInput {
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li>
    /// <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li>
    /// <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li>
    /// <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li>
    /// <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li>
    /// <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li>
    /// <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li>
    /// <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li>
    /// <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li>
    /// <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li>
    /// <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li>
    /// <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li>
    /// <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li>
    /// <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li>
    /// <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li>
    /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li>
    /// <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li>
    /// <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li>
    /// <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li>
    /// <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li>
    /// <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li>
    /// <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li>
    /// <li> <p> <code>tag:
    /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li>
    /// <li> <p> <code>valid-from</code> - The start date of the request.</p> </li>
    /// <li> <p> <code>valid-until</code> - The end date of the request.</p> </li>
    /// </ul>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>One or more Spot Instance request IDs.</p>
    pub fn spot_instance_request_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.spot_instance_request_ids.as_deref()
    }
    /// <p>The token to request the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeSpotInstanceRequestsInput {
    /// Creates a new builder-style object to manufacture [`DescribeSpotInstanceRequestsInput`](crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsInput).
    pub fn builder() -> crate::operation::describe_spot_instance_requests::builders::DescribeSpotInstanceRequestsInputBuilder{
        crate::operation::describe_spot_instance_requests::builders::DescribeSpotInstanceRequestsInputBuilder::default()
    }
}

/// A builder for [`DescribeSpotInstanceRequestsInput`](crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeSpotInstanceRequestsInputBuilder {
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) spot_instance_request_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl DescribeSpotInstanceRequestsInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li>
    /// <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li>
    /// <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li>
    /// <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li>
    /// <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li>
    /// <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li>
    /// <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li>
    /// <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li>
    /// <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li>
    /// <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li>
    /// <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li>
    /// <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li>
    /// <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li>
    /// <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li>
    /// <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li>
    /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li>
    /// <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li>
    /// <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li>
    /// <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li>
    /// <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li>
    /// <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li>
    /// <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li>
    /// <li> <p> <code>tag:
    /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li>
    /// <li> <p> <code>valid-from</code> - The start date of the request.</p> </li>
    /// <li> <p> <code>valid-until</code> - The end date of the request.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li>
    /// <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li>
    /// <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li>
    /// <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li>
    /// <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li>
    /// <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li>
    /// <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> or <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li>
    /// <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li>
    /// <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li>
    /// <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li>
    /// <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li>
    /// <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li>
    /// <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li>
    /// <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li>
    /// <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li>
    /// <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li>
    /// <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li>
    /// <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li>
    /// <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li>
    /// <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li>
    /// <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li>
    /// <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li>
    /// <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-request-status.html">Spot request status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li>
    /// <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li>
    /// <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li>
    /// <li> <p> <code>tag:
    /// <key></key></code> - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li>
    /// <li> <p> <code>valid-from</code> - The start date of the request.</p> </li>
    /// <li> <p> <code>valid-until</code> - The end date of the request.</p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// Appends an item to `spot_instance_request_ids`.
    ///
    /// To override the contents of this collection use [`set_spot_instance_request_ids`](Self::set_spot_instance_request_ids).
    ///
    /// <p>One or more Spot Instance request IDs.</p>
    pub fn spot_instance_request_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.spot_instance_request_ids.unwrap_or_default();
        v.push(input.into());
        self.spot_instance_request_ids = Some(v);
        self
    }
    /// <p>One or more Spot Instance request IDs.</p>
    pub fn set_spot_instance_request_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.spot_instance_request_ids = input;
        self
    }
    /// <p>The token to request the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to request the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSpotInstanceRequestsInput`](crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_spot_instance_requests::DescribeSpotInstanceRequestsInput {
                filters: self.filters,
                dry_run: self.dry_run,
                spot_instance_request_ids: self.spot_instance_request_ids,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
