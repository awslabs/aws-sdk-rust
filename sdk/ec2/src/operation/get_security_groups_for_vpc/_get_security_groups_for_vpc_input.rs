// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSecurityGroupsForVpcInput {
    /// <p>The VPC ID where the security group can be used.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl GetSecurityGroupsForVpcInput {
    /// <p>The VPC ID where the security group can be used.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl GetSecurityGroupsForVpcInput {
    /// Creates a new builder-style object to manufacture [`GetSecurityGroupsForVpcInput`](crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcInput).
    pub fn builder() -> crate::operation::get_security_groups_for_vpc::builders::GetSecurityGroupsForVpcInputBuilder {
        crate::operation::get_security_groups_for_vpc::builders::GetSecurityGroupsForVpcInputBuilder::default()
    }
}

/// A builder for [`GetSecurityGroupsForVpcInput`](crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSecurityGroupsForVpcInputBuilder {
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl GetSecurityGroupsForVpcInputBuilder {
    /// <p>The VPC ID where the security group can be used.</p>
    /// This field is required.
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID where the security group can be used.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC ID where the security group can be used.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`GetSecurityGroupsForVpcInput`](crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcInput {
            vpc_id: self.vpc_id,
            next_token: self.next_token,
            max_results: self.max_results,
            filters: self.filters,
            dry_run: self.dry_run,
        })
    }
}
