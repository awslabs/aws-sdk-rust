// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_security_groups_for_vpc::_get_security_groups_for_vpc_output::GetSecurityGroupsForVpcOutputBuilder;

pub use crate::operation::get_security_groups_for_vpc::_get_security_groups_for_vpc_input::GetSecurityGroupsForVpcInputBuilder;

impl GetSecurityGroupsForVpcInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_security_groups_for_vpc();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetSecurityGroupsForVpc`.
///
/// <p>Gets security groups that can be associated by the Amazon Web Services account making the request with network interfaces in the specified VPC.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetSecurityGroupsForVpcFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_security_groups_for_vpc::builders::GetSecurityGroupsForVpcInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcOutput,
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcError,
    > for GetSecurityGroupsForVpcFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcOutput,
            crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetSecurityGroupsForVpcFluentBuilder {
    /// Creates a new `GetSecurityGroupsForVpc`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetSecurityGroupsForVpc as a reference.
    pub fn as_input(&self) -> &crate::operation::get_security_groups_for_vpc::builders::GetSecurityGroupsForVpcInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpc::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpc::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcOutput,
        crate::operation::get_security_groups_for_vpc::GetSecurityGroupsForVpcError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_security_groups_for_vpc::paginator::GetSecurityGroupsForVpcPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::get_security_groups_for_vpc::paginator::GetSecurityGroupsForVpcPaginator {
        crate::operation::get_security_groups_for_vpc::paginator::GetSecurityGroupsForVpcPaginator::new(self.handle, self.inner)
    }
    /// <p>The VPC ID where the security group can be used.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_id(input.into());
        self
    }
    /// <p>The VPC ID where the security group can be used.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_id(input);
        self
    }
    /// <p>The VPC ID where the security group can be used.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vpc_id()
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The filters. If using multiple filters, the results include security groups which match all filters.</p>
    /// <ul>
    /// <li> <p> <code>group-id</code>: The security group ID.</p> </li>
    /// <li> <p> <code>description</code>: The security group's description.</p> </li>
    /// <li> <p> <code>group-name</code>: The security group name.</p> </li>
    /// <li> <p> <code>owner-id</code>: The security group owner ID.</p> </li>
    /// <li> <p> <code>primary-vpc-id</code>: The VPC ID in which the security group was created.</p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
