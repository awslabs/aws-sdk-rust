// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_network_insights_access_scope::_create_network_insights_access_scope_output::CreateNetworkInsightsAccessScopeOutputBuilder;

pub use crate::operation::create_network_insights_access_scope::_create_network_insights_access_scope_input::CreateNetworkInsightsAccessScopeInputBuilder;

impl CreateNetworkInsightsAccessScopeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_network_insights_access_scope();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateNetworkInsightsAccessScope`.
///
/// <p>Creates a Network Access Scope.</p>
/// <p>Amazon Web Services Network Access Analyzer enables cloud networking and cloud operations teams to verify that their networks on Amazon Web Services conform to their network security and governance objectives. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/">Amazon Web Services Network Access Analyzer Guide</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateNetworkInsightsAccessScopeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_network_insights_access_scope::builders::CreateNetworkInsightsAccessScopeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeOutput,
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeError,
    > for CreateNetworkInsightsAccessScopeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeOutput,
            crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateNetworkInsightsAccessScopeFluentBuilder {
    /// Creates a new `CreateNetworkInsightsAccessScope`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateNetworkInsightsAccessScope as a reference.
    pub fn as_input(&self) -> &crate::operation::create_network_insights_access_scope::builders::CreateNetworkInsightsAccessScopeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScope::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScope::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeOutput,
        crate::operation::create_network_insights_access_scope::CreateNetworkInsightsAccessScopeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `MatchPaths`.
    ///
    /// To override the contents of this collection use [`set_match_paths`](Self::set_match_paths).
    ///
    /// <p>The paths to match.</p>
    pub fn match_paths(mut self, input: crate::types::AccessScopePathRequest) -> Self {
        self.inner = self.inner.match_paths(input);
        self
    }
    /// <p>The paths to match.</p>
    pub fn set_match_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePathRequest>>) -> Self {
        self.inner = self.inner.set_match_paths(input);
        self
    }
    /// <p>The paths to match.</p>
    pub fn get_match_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessScopePathRequest>> {
        self.inner.get_match_paths()
    }
    /// Appends an item to `ExcludePaths`.
    ///
    /// To override the contents of this collection use [`set_exclude_paths`](Self::set_exclude_paths).
    ///
    /// <p>The paths to exclude.</p>
    pub fn exclude_paths(mut self, input: crate::types::AccessScopePathRequest) -> Self {
        self.inner = self.inner.exclude_paths(input);
        self
    }
    /// <p>The paths to exclude.</p>
    pub fn set_exclude_paths(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessScopePathRequest>>) -> Self {
        self.inner = self.inner.set_exclude_paths(input);
        self
    }
    /// <p>The paths to exclude.</p>
    pub fn get_exclude_paths(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessScopePathRequest>> {
        self.inner.get_exclude_paths()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// Appends an item to `TagSpecifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        self.inner = self.inner.tag_specifications(input);
        self
    }
    /// <p>The tags to apply.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.inner = self.inner.set_tag_specifications(input);
        self
    }
    /// <p>The tags to apply.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        self.inner.get_tag_specifications()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
