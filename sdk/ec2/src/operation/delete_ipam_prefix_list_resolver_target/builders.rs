// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_ipam_prefix_list_resolver_target::_delete_ipam_prefix_list_resolver_target_output::DeleteIpamPrefixListResolverTargetOutputBuilder;

pub use crate::operation::delete_ipam_prefix_list_resolver_target::_delete_ipam_prefix_list_resolver_target_input::DeleteIpamPrefixListResolverTargetInputBuilder;

impl crate::operation::delete_ipam_prefix_list_resolver_target::builders::DeleteIpamPrefixListResolverTargetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_ipam_prefix_list_resolver_target();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteIpamPrefixListResolverTarget`.
///
/// <p>Deletes an IPAM prefix list resolver target. This removes the association between the resolver and the managed prefix list, stopping automatic CIDR synchronization.</p>
/// <p>For more information about IPAM prefix list resolver, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/automate-prefix-list-updates.html">Automate prefix list updates with IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteIpamPrefixListResolverTargetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_ipam_prefix_list_resolver_target::builders::DeleteIpamPrefixListResolverTargetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetOutput,
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetError,
    > for DeleteIpamPrefixListResolverTargetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetOutput,
            crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteIpamPrefixListResolverTargetFluentBuilder {
    /// Creates a new `DeleteIpamPrefixListResolverTargetFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteIpamPrefixListResolverTarget as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_ipam_prefix_list_resolver_target::builders::DeleteIpamPrefixListResolverTargetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTarget::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTarget::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetOutput,
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub fn ipam_prefix_list_resolver_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_prefix_list_resolver_target_id(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub fn set_ipam_prefix_list_resolver_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_prefix_list_resolver_target_id(input);
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub fn get_ipam_prefix_list_resolver_target_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_prefix_list_resolver_target_id()
    }
}
