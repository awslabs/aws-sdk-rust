// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteIpamPrefixListResolverTargetInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub ipam_prefix_list_resolver_target_id: ::std::option::Option<::std::string::String>,
}
impl DeleteIpamPrefixListResolverTargetInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub fn ipam_prefix_list_resolver_target_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_target_id.as_deref()
    }
}
impl DeleteIpamPrefixListResolverTargetInput {
    /// Creates a new builder-style object to manufacture [`DeleteIpamPrefixListResolverTargetInput`](crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetInput).
    pub fn builder() -> crate::operation::delete_ipam_prefix_list_resolver_target::builders::DeleteIpamPrefixListResolverTargetInputBuilder {
        crate::operation::delete_ipam_prefix_list_resolver_target::builders::DeleteIpamPrefixListResolverTargetInputBuilder::default()
    }
}

/// A builder for [`DeleteIpamPrefixListResolverTargetInput`](crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteIpamPrefixListResolverTargetInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) ipam_prefix_list_resolver_target_id: ::std::option::Option<::std::string::String>,
}
impl DeleteIpamPrefixListResolverTargetInputBuilder {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    /// This field is required.
    pub fn ipam_prefix_list_resolver_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub fn set_ipam_prefix_list_resolver_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_target_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target to delete.</p>
    pub fn get_ipam_prefix_list_resolver_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_target_id
    }
    /// Consumes the builder and constructs a [`DeleteIpamPrefixListResolverTargetInput`](crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::delete_ipam_prefix_list_resolver_target::DeleteIpamPrefixListResolverTargetInput {
                dry_run: self.dry_run,
                ipam_prefix_list_resolver_target_id: self.ipam_prefix_list_resolver_target_id,
            },
        )
    }
}
