// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_scheduled_instance_availability::_describe_scheduled_instance_availability_output::DescribeScheduledInstanceAvailabilityOutputBuilder;

pub use crate::operation::describe_scheduled_instance_availability::_describe_scheduled_instance_availability_input::DescribeScheduledInstanceAvailabilityInputBuilder;

/// Fluent builder constructing a request to `DescribeScheduledInstanceAvailability`.
///
/// <p>Finds available schedules that meet the specified criteria.</p>
/// <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
/// <p>After you find a schedule that meets your needs, call <code>PurchaseScheduledInstances</code> to purchase Scheduled Instances with that schedule.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScheduledInstanceAvailabilityFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_scheduled_instance_availability::builders::DescribeScheduledInstanceAvailabilityInputBuilder
            }
impl DescribeScheduledInstanceAvailabilityFluentBuilder {
    /// Creates a new `DescribeScheduledInstanceAvailability`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_scheduled_instance_availability::DescribeScheduledInstanceAvailability, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_scheduled_instance_availability::DescribeScheduledInstanceAvailabilityError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_scheduled_instance_availability::DescribeScheduledInstanceAvailabilityOutput, aws_smithy_http::result::SdkError<crate::operation::describe_scheduled_instance_availability::DescribeScheduledInstanceAvailabilityError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_scheduled_instance_availability::paginator::DescribeScheduledInstanceAvailabilityPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_scheduled_instance_availability::paginator::DescribeScheduledInstanceAvailabilityPaginator{
        crate::operation::describe_scheduled_instance_availability::paginator::DescribeScheduledInstanceAvailabilityPaginator::new(self.handle, self.inner)
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li>
    /// <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li>
    /// <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li>
    /// <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li>
    /// <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The time period for the first schedule to start.</p>
    pub fn first_slot_start_time_range(
        mut self,
        input: crate::types::SlotDateTimeRangeRequest,
    ) -> Self {
        self.inner = self.inner.first_slot_start_time_range(input);
        self
    }
    /// <p>The time period for the first schedule to start.</p>
    pub fn set_first_slot_start_time_range(
        mut self,
        input: std::option::Option<crate::types::SlotDateTimeRangeRequest>,
    ) -> Self {
        self.inner = self.inner.set_first_slot_start_time_range(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.</p>
    pub fn max_slot_duration_in_hours(mut self, input: i32) -> Self {
        self.inner = self.inner.max_slot_duration_in_hours(input);
        self
    }
    /// <p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.</p>
    pub fn set_max_slot_duration_in_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_slot_duration_in_hours(input);
        self
    }
    /// <p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
    pub fn min_slot_duration_in_hours(mut self, input: i32) -> Self {
        self.inner = self.inner.min_slot_duration_in_hours(input);
        self
    }
    /// <p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
    pub fn set_min_slot_duration_in_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_min_slot_duration_in_hours(input);
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The schedule recurrence.</p>
    pub fn recurrence(mut self, input: crate::types::ScheduledInstanceRecurrenceRequest) -> Self {
        self.inner = self.inner.recurrence(input);
        self
    }
    /// <p>The schedule recurrence.</p>
    pub fn set_recurrence(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstanceRecurrenceRequest>,
    ) -> Self {
        self.inner = self.inner.set_recurrence(input);
        self
    }
}
