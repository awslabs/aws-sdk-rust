// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreSnapshotTierOutput {
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the snapshot restore process started.</p>
    #[doc(hidden)]
    pub restore_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
    #[doc(hidden)]
    pub restore_duration: std::option::Option<i32>,
    /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
    #[doc(hidden)]
    pub is_permanent_restore: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl RestoreSnapshotTierOutput {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The date and time when the snapshot restore process started.</p>
    pub fn restore_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.restore_start_time.as_ref()
    }
    /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
    pub fn restore_duration(&self) -> std::option::Option<i32> {
        self.restore_duration
    }
    /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
    pub fn is_permanent_restore(&self) -> std::option::Option<bool> {
        self.is_permanent_restore
    }
}
impl aws_http::request_id::RequestId for RestoreSnapshotTierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RestoreSnapshotTierOutput {
    /// Creates a new builder-style object to manufacture [`RestoreSnapshotTierOutput`](crate::operation::restore_snapshot_tier::RestoreSnapshotTierOutput).
    pub fn builder(
    ) -> crate::operation::restore_snapshot_tier::builders::RestoreSnapshotTierOutputBuilder {
        crate::operation::restore_snapshot_tier::builders::RestoreSnapshotTierOutputBuilder::default(
        )
    }
}

/// A builder for [`RestoreSnapshotTierOutput`](crate::operation::restore_snapshot_tier::RestoreSnapshotTierOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreSnapshotTierOutputBuilder {
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) restore_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) restore_duration: std::option::Option<i32>,
    pub(crate) is_permanent_restore: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl RestoreSnapshotTierOutputBuilder {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The date and time when the snapshot restore process started.</p>
    pub fn restore_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.restore_start_time = Some(input);
        self
    }
    /// <p>The date and time when the snapshot restore process started.</p>
    pub fn set_restore_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.restore_start_time = input;
        self
    }
    /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
    pub fn restore_duration(mut self, input: i32) -> Self {
        self.restore_duration = Some(input);
        self
    }
    /// <p>For temporary restores only. The number of days for which the archived snapshot is temporarily restored.</p>
    pub fn set_restore_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.restore_duration = input;
        self
    }
    /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
    pub fn is_permanent_restore(mut self, input: bool) -> Self {
        self.is_permanent_restore = Some(input);
        self
    }
    /// <p>Indicates whether the snapshot is permanently restored. <code>true</code> indicates a permanent restore. <code>false</code> indicates a temporary restore.</p>
    pub fn set_is_permanent_restore(mut self, input: std::option::Option<bool>) -> Self {
        self.is_permanent_restore = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RestoreSnapshotTierOutput`](crate::operation::restore_snapshot_tier::RestoreSnapshotTierOutput).
    pub fn build(self) -> crate::operation::restore_snapshot_tier::RestoreSnapshotTierOutput {
        crate::operation::restore_snapshot_tier::RestoreSnapshotTierOutput {
            snapshot_id: self.snapshot_id,
            restore_start_time: self.restore_start_time,
            restore_duration: self.restore_duration,
            is_permanent_restore: self.is_permanent_restore,
            _request_id: self._request_id,
        }
    }
}
