// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateKeyPairInput {
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub key_type: ::std::option::Option<crate::types::KeyType>,
    /// <p>The tags to apply to the new key pair.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub key_format: ::std::option::Option<crate::types::KeyFormat>,
}
impl CreateKeyPairInput {
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn key_type(&self) -> ::std::option::Option<&crate::types::KeyType> {
        self.key_type.as_ref()
    }
    /// <p>The tags to apply to the new key pair.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn key_format(&self) -> ::std::option::Option<&crate::types::KeyFormat> {
        self.key_format.as_ref()
    }
}
impl CreateKeyPairInput {
    /// Creates a new builder-style object to manufacture [`CreateKeyPairInput`](crate::operation::create_key_pair::CreateKeyPairInput).
    pub fn builder() -> crate::operation::create_key_pair::builders::CreateKeyPairInputBuilder {
        crate::operation::create_key_pair::builders::CreateKeyPairInputBuilder::default()
    }
}

/// A builder for [`CreateKeyPairInput`](crate::operation::create_key_pair::CreateKeyPairInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateKeyPairInputBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) key_type: ::std::option::Option<crate::types::KeyType>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) key_format: ::std::option::Option<crate::types::KeyFormat>,
}
impl CreateKeyPairInputBuilder {
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn key_type(mut self, input: crate::types::KeyType) -> Self {
        self.key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn set_key_type(mut self, input: ::std::option::Option<crate::types::KeyType>) -> Self {
        self.key_type = input;
        self
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn get_key_type(&self) -> &::std::option::Option<crate::types::KeyType> {
        &self.key_type
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the new key pair.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to the new key pair.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to apply to the new key pair.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn key_format(mut self, input: crate::types::KeyFormat) -> Self {
        self.key_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn set_key_format(mut self, input: ::std::option::Option<crate::types::KeyFormat>) -> Self {
        self.key_format = input;
        self
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn get_key_format(&self) -> &::std::option::Option<crate::types::KeyFormat> {
        &self.key_format
    }
    /// Consumes the builder and constructs a [`CreateKeyPairInput`](crate::operation::create_key_pair::CreateKeyPairInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_key_pair::CreateKeyPairInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_key_pair::CreateKeyPairInput {
            key_name: self.key_name,
            dry_run: self.dry_run,
            key_type: self.key_type,
            tag_specifications: self.tag_specifications,
            key_format: self.key_format,
        })
    }
}
