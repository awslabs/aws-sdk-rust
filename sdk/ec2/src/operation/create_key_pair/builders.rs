// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_key_pair::_create_key_pair_output::CreateKeyPairOutputBuilder;

pub use crate::operation::create_key_pair::_create_key_pair_input::CreateKeyPairInputBuilder;

impl CreateKeyPairInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_key_pair::CreateKeyPairOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_key_pair::CreateKeyPairError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_key_pair();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateKeyPair`.
///
/// <p>Creates an ED25519 or 2048-bit RSA key pair with the specified name and in the specified PEM or PPK format. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key or an unencrypted PPK formatted private key for use with PuTTY. If a key with the specified name already exists, Amazon EC2 returns an error.</p>
/// <p>The key pair returned to you is available only in the Amazon Web Services Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using <code>ImportKeyPair</code>.</p>
/// <p>You can have up to 5,000 key pairs per Amazon Web Services Region.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateKeyPairFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_key_pair::builders::CreateKeyPairInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_key_pair::CreateKeyPairOutput,
        crate::operation::create_key_pair::CreateKeyPairError,
    > for CreateKeyPairFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_key_pair::CreateKeyPairOutput,
            crate::operation::create_key_pair::CreateKeyPairError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateKeyPairFluentBuilder {
    /// Creates a new `CreateKeyPair`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateKeyPair as a reference.
    pub fn as_input(&self) -> &crate::operation::create_key_pair::builders::CreateKeyPairInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_key_pair::CreateKeyPairOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_key_pair::CreateKeyPairError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_key_pair::CreateKeyPair::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_key_pair::CreateKeyPair::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_key_pair::CreateKeyPairOutput,
        crate::operation::create_key_pair::CreateKeyPairError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_name(input.into());
        self
    }
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_name(input);
        self
    }
    /// <p>A unique name for the key pair.</p>
    /// <p>Constraints: Up to 255 ASCII characters</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_name()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn key_type(mut self, input: crate::types::KeyType) -> Self {
        self.inner = self.inner.key_type(input);
        self
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn set_key_type(mut self, input: ::std::option::Option<crate::types::KeyType>) -> Self {
        self.inner = self.inner.set_key_type(input);
        self
    }
    /// <p>The type of key pair. Note that ED25519 keys are not supported for Windows instances.</p>
    /// <p>Default: <code>rsa</code> </p>
    pub fn get_key_type(&self) -> &::std::option::Option<crate::types::KeyType> {
        self.inner.get_key_type()
    }
    /// Appends an item to `TagSpecifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the new key pair.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        self.inner = self.inner.tag_specifications(input);
        self
    }
    /// <p>The tags to apply to the new key pair.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.inner = self.inner.set_tag_specifications(input);
        self
    }
    /// <p>The tags to apply to the new key pair.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        self.inner.get_tag_specifications()
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn key_format(mut self, input: crate::types::KeyFormat) -> Self {
        self.inner = self.inner.key_format(input);
        self
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn set_key_format(mut self, input: ::std::option::Option<crate::types::KeyFormat>) -> Self {
        self.inner = self.inner.set_key_format(input);
        self
    }
    /// <p>The format of the key pair.</p>
    /// <p>Default: <code>pem</code> </p>
    pub fn get_key_format(&self) -> &::std::option::Option<crate::types::KeyFormat> {
        self.inner.get_key_format()
    }
}
