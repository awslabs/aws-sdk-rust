// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_ipam::_modify_ipam_output::ModifyIpamOutputBuilder;

pub use crate::operation::modify_ipam::_modify_ipam_input::ModifyIpamInputBuilder;

/// Fluent builder constructing a request to `ModifyIpam`.
///
/// <p>Modify the configurations of an IPAM. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyIpamFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_ipam::builders::ModifyIpamInputBuilder,
}
impl ModifyIpamFluentBuilder {
    /// Creates a new `ModifyIpam`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_ipam::ModifyIpam,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::modify_ipam::ModifyIpamError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_ipam::ModifyIpamOutput,
        aws_smithy_http::result::SdkError<crate::operation::modify_ipam::ModifyIpamError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>The ID of the IPAM you want to modify.</p>
    pub fn ipam_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ipam_id(input.into());
        self
    }
    /// <p>The ID of the IPAM you want to modify.</p>
    pub fn set_ipam_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_id(input);
        self
    }
    /// <p>The description of the IPAM you want to modify.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the IPAM you want to modify.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `AddOperatingRegions`.
    ///
    /// To override the contents of this collection use [`set_add_operating_regions`](Self::set_add_operating_regions).
    ///
    /// <p>Choose the operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn add_operating_regions(mut self, input: crate::types::AddIpamOperatingRegion) -> Self {
        self.inner = self.inner.add_operating_regions(input);
        self
    }
    /// <p>Choose the operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.</p>
    /// <p>For more information about operating Regions, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
    pub fn set_add_operating_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AddIpamOperatingRegion>>,
    ) -> Self {
        self.inner = self.inner.set_add_operating_regions(input);
        self
    }
    /// Appends an item to `RemoveOperatingRegions`.
    ///
    /// To override the contents of this collection use [`set_remove_operating_regions`](Self::set_remove_operating_regions).
    ///
    /// <p>The operating Regions to remove.</p>
    pub fn remove_operating_regions(
        mut self,
        input: crate::types::RemoveIpamOperatingRegion,
    ) -> Self {
        self.inner = self.inner.remove_operating_regions(input);
        self
    }
    /// <p>The operating Regions to remove.</p>
    pub fn set_remove_operating_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RemoveIpamOperatingRegion>>,
    ) -> Self {
        self.inner = self.inner.set_remove_operating_regions(input);
        self
    }
}
