// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPasswordDataOutput {
    /// <p>The ID of the Windows instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    #[doc(hidden)]
    pub password_data: std::option::Option<std::string::String>,
    /// <p>The time the data was last updated.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPasswordDataOutput {
    /// <p>The ID of the Windows instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    pub fn password_data(&self) -> std::option::Option<&str> {
        self.password_data.as_deref()
    }
    /// <p>The time the data was last updated.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPasswordDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPasswordDataOutput {
    /// Creates a new builder-style object to manufacture [`GetPasswordDataOutput`](crate::operation::get_password_data::GetPasswordDataOutput).
    pub fn builder() -> crate::operation::get_password_data::builders::GetPasswordDataOutputBuilder
    {
        crate::operation::get_password_data::builders::GetPasswordDataOutputBuilder::default()
    }
}

/// A builder for [`GetPasswordDataOutput`](crate::operation::get_password_data::GetPasswordDataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetPasswordDataOutputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) password_data: std::option::Option<std::string::String>,
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPasswordDataOutputBuilder {
    /// <p>The ID of the Windows instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the Windows instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    pub fn password_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.password_data = Some(input.into());
        self
    }
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    pub fn set_password_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password_data = input;
        self
    }
    /// <p>The time the data was last updated.</p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time the data was last updated.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPasswordDataOutput`](crate::operation::get_password_data::GetPasswordDataOutput).
    pub fn build(self) -> crate::operation::get_password_data::GetPasswordDataOutput {
        crate::operation::get_password_data::GetPasswordDataOutput {
            instance_id: self.instance_id,
            password_data: self.password_data,
            timestamp: self.timestamp,
            _request_id: self._request_id,
        }
    }
}
