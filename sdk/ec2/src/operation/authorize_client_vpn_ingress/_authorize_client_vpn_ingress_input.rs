// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthorizeClientVpnIngressInput {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    pub target_network_cidr: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>
    pub access_group_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all clients who successfully establish a VPN connection access to the network. Must be set to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>
    pub authorize_all_groups: ::std::option::Option<bool>,
    /// <p>A brief description of the authorization rule.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl AuthorizeClientVpnIngressInput {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn client_vpn_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.client_vpn_endpoint_id.as_deref()
    }
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    pub fn target_network_cidr(&self) -> ::std::option::Option<&str> {
        self.target_network_cidr.as_deref()
    }
    /// <p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>
    pub fn access_group_id(&self) -> ::std::option::Option<&str> {
        self.access_group_id.as_deref()
    }
    /// <p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all clients who successfully establish a VPN connection access to the network. Must be set to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>
    pub fn authorize_all_groups(&self) -> ::std::option::Option<bool> {
        self.authorize_all_groups
    }
    /// <p>A brief description of the authorization rule.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl AuthorizeClientVpnIngressInput {
    /// Creates a new builder-style object to manufacture [`AuthorizeClientVpnIngressInput`](crate::operation::authorize_client_vpn_ingress::AuthorizeClientVpnIngressInput).
    pub fn builder() -> crate::operation::authorize_client_vpn_ingress::builders::AuthorizeClientVpnIngressInputBuilder {
        crate::operation::authorize_client_vpn_ingress::builders::AuthorizeClientVpnIngressInputBuilder::default()
    }
}

/// A builder for [`AuthorizeClientVpnIngressInput`](crate::operation::authorize_client_vpn_ingress::AuthorizeClientVpnIngressInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthorizeClientVpnIngressInputBuilder {
    pub(crate) client_vpn_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_network_cidr: ::std::option::Option<::std::string::String>,
    pub(crate) access_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) authorize_all_groups: ::std::option::Option<bool>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl AuthorizeClientVpnIngressInputBuilder {
    /// <p>The ID of the Client VPN endpoint.</p>
    /// This field is required.
    pub fn client_vpn_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_vpn_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn set_client_vpn_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_vpn_endpoint_id = input;
        self
    }
    /// <p>The ID of the Client VPN endpoint.</p>
    pub fn get_client_vpn_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_vpn_endpoint_id
    }
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    /// This field is required.
    pub fn target_network_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_network_cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    pub fn set_target_network_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_network_cidr = input;
        self
    }
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    pub fn get_target_network_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_network_cidr
    }
    /// <p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>
    pub fn access_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>
    pub fn set_access_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_group_id = input;
        self
    }
    /// <p>The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if <code>AuthorizeAllGroups</code> is <code>false</code> or not specified.</p>
    pub fn get_access_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_group_id
    }
    /// <p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all clients who successfully establish a VPN connection access to the network. Must be set to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>
    pub fn authorize_all_groups(mut self, input: bool) -> Self {
        self.authorize_all_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all clients who successfully establish a VPN connection access to the network. Must be set to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>
    pub fn set_authorize_all_groups(mut self, input: ::std::option::Option<bool>) -> Self {
        self.authorize_all_groups = input;
        self
    }
    /// <p>Indicates whether to grant access to all clients. Specify <code>true</code> to grant all clients who successfully establish a VPN connection access to the network. Must be set to <code>true</code> if <code>AccessGroupId</code> is not specified.</p>
    pub fn get_authorize_all_groups(&self) -> &::std::option::Option<bool> {
        &self.authorize_all_groups
    }
    /// <p>A brief description of the authorization rule.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the authorization rule.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A brief description of the authorization rule.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`AuthorizeClientVpnIngressInput`](crate::operation::authorize_client_vpn_ingress::AuthorizeClientVpnIngressInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::authorize_client_vpn_ingress::AuthorizeClientVpnIngressInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::authorize_client_vpn_ingress::AuthorizeClientVpnIngressInput {
            client_vpn_endpoint_id: self.client_vpn_endpoint_id,
            target_network_cidr: self.target_network_cidr,
            access_group_id: self.access_group_id,
            authorize_all_groups: self.authorize_all_groups,
            description: self.description,
            client_token: self.client_token,
            dry_run: self.dry_run,
        })
    }
}
