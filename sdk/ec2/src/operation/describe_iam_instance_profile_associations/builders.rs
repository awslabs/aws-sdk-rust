// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_iam_instance_profile_associations::_describe_iam_instance_profile_associations_output::DescribeIamInstanceProfileAssociationsOutputBuilder;

pub use crate::operation::describe_iam_instance_profile_associations::_describe_iam_instance_profile_associations_input::DescribeIamInstanceProfileAssociationsInputBuilder;

/// Fluent builder constructing a request to `DescribeIamInstanceProfileAssociations`.
///
/// <p>Describes your IAM instance profile associations.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeIamInstanceProfileAssociationsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_iam_instance_profile_associations::builders::DescribeIamInstanceProfileAssociationsInputBuilder
            }
impl DescribeIamInstanceProfileAssociationsFluentBuilder {
    /// Creates a new `DescribeIamInstanceProfileAssociations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_iam_instance_profile_associations::DescribeIamInstanceProfileAssociations, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_iam_instance_profile_associations::DescribeIamInstanceProfileAssociationsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_iam_instance_profile_associations::DescribeIamInstanceProfileAssociationsOutput, aws_smithy_http::result::SdkError<crate::operation::describe_iam_instance_profile_associations::DescribeIamInstanceProfileAssociationsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_iam_instance_profile_associations::paginator::DescribeIamInstanceProfileAssociationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_iam_instance_profile_associations::paginator::DescribeIamInstanceProfileAssociationsPaginator{
        crate::operation::describe_iam_instance_profile_associations::paginator::DescribeIamInstanceProfileAssociationsPaginator::new(self.handle, self.inner)
    }
    /// Appends an item to `AssociationIds`.
    ///
    /// To override the contents of this collection use [`set_association_ids`](Self::set_association_ids).
    ///
    /// <p>The IAM instance profile associations.</p>
    pub fn association_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.association_ids(input.into());
        self
    }
    /// <p>The IAM instance profile associations.</p>
    pub fn set_association_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_association_ids(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li>
    /// <li> <p> <code>state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li>
    /// <li> <p> <code>state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
