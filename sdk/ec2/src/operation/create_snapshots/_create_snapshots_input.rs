// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSnapshotsInput {
    /// <p> A description propagated to every snapshot specified by the instance.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The instance to specify which volumes should be included in the snapshots.</p>
    #[doc(hidden)]
    pub instance_specification: std::option::Option<crate::types::InstanceSpecification>,
    /// <p>The Amazon Resource Name (ARN) of the Outpost on which to create the local snapshots.</p>
    /// <ul>
    /// <li> <p>To create snapshots from an instance in a Region, omit this parameter. The snapshots are created in the same Region as the instance.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots in the Region, omit this parameter. The snapshots are created in the Region for the Outpost.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots on an Outpost, specify the ARN of the destination Outpost. The snapshots must be created on the same Outpost as the instance.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot"> Create multi-volume local snapshots from instances on an Outpost</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    #[doc(hidden)]
    pub outpost_arn: std::option::Option<std::string::String>,
    /// <p>Tags to apply to every snapshot specified by the instance.</p>
    #[doc(hidden)]
    pub tag_specifications: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>Copies the tags from the specified volume to corresponding snapshot.</p>
    #[doc(hidden)]
    pub copy_tags_from_source: std::option::Option<crate::types::CopyTagsFromSource>,
}
impl CreateSnapshotsInput {
    /// <p> A description propagated to every snapshot specified by the instance.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The instance to specify which volumes should be included in the snapshots.</p>
    pub fn instance_specification(
        &self,
    ) -> std::option::Option<&crate::types::InstanceSpecification> {
        self.instance_specification.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost on which to create the local snapshots.</p>
    /// <ul>
    /// <li> <p>To create snapshots from an instance in a Region, omit this parameter. The snapshots are created in the same Region as the instance.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots in the Region, omit this parameter. The snapshots are created in the Region for the Outpost.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots on an Outpost, specify the ARN of the destination Outpost. The snapshots must be created on the same Outpost as the instance.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot"> Create multi-volume local snapshots from instances on an Outpost</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn outpost_arn(&self) -> std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
    /// <p>Tags to apply to every snapshot specified by the instance.</p>
    pub fn tag_specifications(&self) -> std::option::Option<&[crate::types::TagSpecification]> {
        self.tag_specifications.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>Copies the tags from the specified volume to corresponding snapshot.</p>
    pub fn copy_tags_from_source(&self) -> std::option::Option<&crate::types::CopyTagsFromSource> {
        self.copy_tags_from_source.as_ref()
    }
}
impl CreateSnapshotsInput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotsInput`](crate::operation::create_snapshots::CreateSnapshotsInput).
    pub fn builder() -> crate::operation::create_snapshots::builders::CreateSnapshotsInputBuilder {
        crate::operation::create_snapshots::builders::CreateSnapshotsInputBuilder::default()
    }
}

/// A builder for [`CreateSnapshotsInput`](crate::operation::create_snapshots::CreateSnapshotsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSnapshotsInputBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) instance_specification: std::option::Option<crate::types::InstanceSpecification>,
    pub(crate) outpost_arn: std::option::Option<std::string::String>,
    pub(crate) tag_specifications:
        std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) copy_tags_from_source: std::option::Option<crate::types::CopyTagsFromSource>,
}
impl CreateSnapshotsInputBuilder {
    /// <p> A description propagated to every snapshot specified by the instance.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> A description propagated to every snapshot specified by the instance.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The instance to specify which volumes should be included in the snapshots.</p>
    pub fn instance_specification(mut self, input: crate::types::InstanceSpecification) -> Self {
        self.instance_specification = Some(input);
        self
    }
    /// <p>The instance to specify which volumes should be included in the snapshots.</p>
    pub fn set_instance_specification(
        mut self,
        input: std::option::Option<crate::types::InstanceSpecification>,
    ) -> Self {
        self.instance_specification = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost on which to create the local snapshots.</p>
    /// <ul>
    /// <li> <p>To create snapshots from an instance in a Region, omit this parameter. The snapshots are created in the same Region as the instance.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots in the Region, omit this parameter. The snapshots are created in the Region for the Outpost.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots on an Outpost, specify the ARN of the destination Outpost. The snapshots must be created on the same Outpost as the instance.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot"> Create multi-volume local snapshots from instances on an Outpost</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn outpost_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.outpost_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Outpost on which to create the local snapshots.</p>
    /// <ul>
    /// <li> <p>To create snapshots from an instance in a Region, omit this parameter. The snapshots are created in the same Region as the instance.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots in the Region, omit this parameter. The snapshots are created in the Region for the Outpost.</p> </li>
    /// <li> <p>To create snapshots from an instance on an Outpost and store the snapshots on an Outpost, specify the ARN of the destination Outpost. The snapshots must be created on the same Outpost as the instance.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot"> Create multi-volume local snapshots from instances on an Outpost</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub fn set_outpost_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>Tags to apply to every snapshot specified by the instance.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = Some(v);
        self
    }
    /// <p>Tags to apply to every snapshot specified by the instance.</p>
    pub fn set_tag_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    ) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Copies the tags from the specified volume to corresponding snapshot.</p>
    pub fn copy_tags_from_source(mut self, input: crate::types::CopyTagsFromSource) -> Self {
        self.copy_tags_from_source = Some(input);
        self
    }
    /// <p>Copies the tags from the specified volume to corresponding snapshot.</p>
    pub fn set_copy_tags_from_source(
        mut self,
        input: std::option::Option<crate::types::CopyTagsFromSource>,
    ) -> Self {
        self.copy_tags_from_source = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateSnapshotsInput`](crate::operation::create_snapshots::CreateSnapshotsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_snapshots::CreateSnapshotsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_snapshots::CreateSnapshotsInput {
            description: self.description,
            instance_specification: self.instance_specification,
            outpost_arn: self.outpost_arn,
            tag_specifications: self.tag_specifications,
            dry_run: self.dry_run,
            copy_tags_from_source: self.copy_tags_from_source,
        })
    }
}
