// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableVpcClassicLinkInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>The ID of the VPC.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
}
impl DisableVpcClassicLinkInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
}
impl DisableVpcClassicLinkInput {
    /// Creates a new builder-style object to manufacture [`DisableVpcClassicLinkInput`](crate::operation::disable_vpc_classic_link::DisableVpcClassicLinkInput).
    pub fn builder(
    ) -> crate::operation::disable_vpc_classic_link::builders::DisableVpcClassicLinkInputBuilder
    {
        crate::operation::disable_vpc_classic_link::builders::DisableVpcClassicLinkInputBuilder::default()
    }
}

/// A builder for [`DisableVpcClassicLinkInput`](crate::operation::disable_vpc_classic_link::DisableVpcClassicLinkInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DisableVpcClassicLinkInputBuilder {
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
}
impl DisableVpcClassicLinkInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DisableVpcClassicLinkInput`](crate::operation::disable_vpc_classic_link::DisableVpcClassicLinkInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::disable_vpc_classic_link::DisableVpcClassicLinkInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::disable_vpc_classic_link::DisableVpcClassicLinkInput {
                dry_run: self.dry_run,
                vpc_id: self.vpc_id,
            },
        )
    }
}
