// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for UnassignPrivateIpAddresses.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnassignPrivateIpAddressesInput {
    /// <p>The ID of the network interface.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
    #[doc(hidden)]
    pub private_ip_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IPv4 prefixes to unassign from the network interface.</p>
    #[doc(hidden)]
    pub ipv4_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UnassignPrivateIpAddressesInput {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
    pub fn private_ip_addresses(&self) -> std::option::Option<&[std::string::String]> {
        self.private_ip_addresses.as_deref()
    }
    /// <p>The IPv4 prefixes to unassign from the network interface.</p>
    pub fn ipv4_prefixes(&self) -> std::option::Option<&[std::string::String]> {
        self.ipv4_prefixes.as_deref()
    }
}
impl UnassignPrivateIpAddressesInput {
    /// Creates a new builder-style object to manufacture [`UnassignPrivateIpAddressesInput`](crate::operation::unassign_private_ip_addresses::UnassignPrivateIpAddressesInput).
    pub fn builder() -> crate::operation::unassign_private_ip_addresses::builders::UnassignPrivateIpAddressesInputBuilder{
        crate::operation::unassign_private_ip_addresses::builders::UnassignPrivateIpAddressesInputBuilder::default()
    }
}

/// A builder for [`UnassignPrivateIpAddressesInput`](crate::operation::unassign_private_ip_addresses::UnassignPrivateIpAddressesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnassignPrivateIpAddressesInputBuilder {
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) private_ip_addresses: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ipv4_prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UnassignPrivateIpAddressesInputBuilder {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// Appends an item to `private_ip_addresses`.
    ///
    /// To override the contents of this collection use [`set_private_ip_addresses`](Self::set_private_ip_addresses).
    ///
    /// <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
    pub fn private_ip_addresses(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.private_ip_addresses.unwrap_or_default();
        v.push(input.into());
        self.private_ip_addresses = Some(v);
        self
    }
    /// <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
    pub fn set_private_ip_addresses(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.private_ip_addresses = input;
        self
    }
    /// Appends an item to `ipv4_prefixes`.
    ///
    /// To override the contents of this collection use [`set_ipv4_prefixes`](Self::set_ipv4_prefixes).
    ///
    /// <p>The IPv4 prefixes to unassign from the network interface.</p>
    pub fn ipv4_prefixes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ipv4_prefixes.unwrap_or_default();
        v.push(input.into());
        self.ipv4_prefixes = Some(v);
        self
    }
    /// <p>The IPv4 prefixes to unassign from the network interface.</p>
    pub fn set_ipv4_prefixes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ipv4_prefixes = input;
        self
    }
    /// Consumes the builder and constructs a [`UnassignPrivateIpAddressesInput`](crate::operation::unassign_private_ip_addresses::UnassignPrivateIpAddressesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::unassign_private_ip_addresses::UnassignPrivateIpAddressesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::unassign_private_ip_addresses::UnassignPrivateIpAddressesInput {
                network_interface_id: self.network_interface_id,
                private_ip_addresses: self.private_ip_addresses,
                ipv4_prefixes: self.ipv4_prefixes,
            },
        )
    }
}
