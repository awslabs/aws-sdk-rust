// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLaunchTemplateVersionsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateId</code> or the <code>LaunchTemplateName</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub launch_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub launch_template_name: ::std::option::Option<::std::string::String>,
    /// <p>One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account.</p>
    /// <p>To describe one or more versions of a specified launch template, valid values are <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
    /// <p>To describe all launch templates in your account that are defined as the latest version, the valid value is <code>$Latest</code>. To describe all launch templates in your account that are defined as the default version, the valid value is <code>$Default</code>. You can specify <code>$Latest</code> and <code>$Default</code> in the same request. You cannot specify numbers.</p>
    pub versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The version number after which to describe launch template versions.</p>
    pub min_version: ::std::option::Option<::std::string::String>,
    /// <p>The version number up to which to describe launch template versions.</p>
    pub max_version: ::std::option::Option<::std::string::String>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li>
    /// <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li>
    /// <li> <p> <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>host-resource-group-arn</code> - The ARN of the host resource group in which to launch the instances.</p> </li>
    /// <li> <p> <code>http-tokens</code> - The state of token usage for your instance metadata requests (<code>optional</code> | <code>required</code>).</p> </li>
    /// <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li>
    /// <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type.</p> </li>
    /// <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li>
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>license-configuration-arn</code> - The ARN of the license configuration.</p> </li>
    /// <li> <p> <code>network-card-index</code> - The index of the network card.</p> </li>
    /// <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>If <code>true</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the AMI ID is displayed in the response for <code>imageId</code>.</p>
    /// <p>If <code>false</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the parameter is displayed in the response for <code>imageId</code>.</p>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    /// <p>Default: <code>false</code> </p>
    pub resolve_alias: ::std::option::Option<bool>,
}
impl DescribeLaunchTemplateVersionsInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateId</code> or the <code>LaunchTemplateName</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn launch_template_id(&self) -> ::std::option::Option<&str> {
        self.launch_template_id.as_deref()
    }
    /// <p>The name of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn launch_template_name(&self) -> ::std::option::Option<&str> {
        self.launch_template_name.as_deref()
    }
    /// <p>One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account.</p>
    /// <p>To describe one or more versions of a specified launch template, valid values are <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
    /// <p>To describe all launch templates in your account that are defined as the latest version, the valid value is <code>$Latest</code>. To describe all launch templates in your account that are defined as the default version, the valid value is <code>$Default</code>. You can specify <code>$Latest</code> and <code>$Default</code> in the same request. You cannot specify numbers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.versions.is_none()`.
    pub fn versions(&self) -> &[::std::string::String] {
        self.versions.as_deref().unwrap_or_default()
    }
    /// <p>The version number after which to describe launch template versions.</p>
    pub fn min_version(&self) -> ::std::option::Option<&str> {
        self.min_version.as_deref()
    }
    /// <p>The version number up to which to describe launch template versions.</p>
    pub fn max_version(&self) -> ::std::option::Option<&str> {
        self.max_version.as_deref()
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li>
    /// <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li>
    /// <li> <p> <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>host-resource-group-arn</code> - The ARN of the host resource group in which to launch the instances.</p> </li>
    /// <li> <p> <code>http-tokens</code> - The state of token usage for your instance metadata requests (<code>optional</code> | <code>required</code>).</p> </li>
    /// <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li>
    /// <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type.</p> </li>
    /// <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li>
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>license-configuration-arn</code> - The ARN of the license configuration.</p> </li>
    /// <li> <p> <code>network-card-index</code> - The index of the network card.</p> </li>
    /// <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>If <code>true</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the AMI ID is displayed in the response for <code>imageId</code>.</p>
    /// <p>If <code>false</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the parameter is displayed in the response for <code>imageId</code>.</p>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn resolve_alias(&self) -> ::std::option::Option<bool> {
        self.resolve_alias
    }
}
impl DescribeLaunchTemplateVersionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchTemplateVersionsInput`](crate::operation::describe_launch_template_versions::DescribeLaunchTemplateVersionsInput).
    pub fn builder() -> crate::operation::describe_launch_template_versions::builders::DescribeLaunchTemplateVersionsInputBuilder {
        crate::operation::describe_launch_template_versions::builders::DescribeLaunchTemplateVersionsInputBuilder::default()
    }
}

/// A builder for [`DescribeLaunchTemplateVersionsInput`](crate::operation::describe_launch_template_versions::DescribeLaunchTemplateVersionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeLaunchTemplateVersionsInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) launch_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) launch_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) min_version: ::std::option::Option<::std::string::String>,
    pub(crate) max_version: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) resolve_alias: ::std::option::Option<bool>,
}
impl DescribeLaunchTemplateVersionsInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateId</code> or the <code>LaunchTemplateName</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn launch_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateId</code> or the <code>LaunchTemplateName</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn set_launch_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_template_id = input;
        self
    }
    /// <p>The ID of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateId</code> or the <code>LaunchTemplateName</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn get_launch_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_template_id
    }
    /// <p>The name of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn launch_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn set_launch_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_template_name = input;
        self
    }
    /// <p>The name of the launch template.</p>
    /// <p>To describe one or more versions of a specified launch template, you must specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p>
    /// <p>To describe all the latest or default launch template versions in your account, you must omit this parameter.</p>
    pub fn get_launch_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_template_name
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p>One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account.</p>
    /// <p>To describe one or more versions of a specified launch template, valid values are <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
    /// <p>To describe all launch templates in your account that are defined as the latest version, the valid value is <code>$Latest</code>. To describe all launch templates in your account that are defined as the default version, the valid value is <code>$Default</code>. You can specify <code>$Latest</code> and <code>$Default</code> in the same request. You cannot specify numbers.</p>
    pub fn versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input.into());
        self.versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account.</p>
    /// <p>To describe one or more versions of a specified launch template, valid values are <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
    /// <p>To describe all launch templates in your account that are defined as the latest version, the valid value is <code>$Latest</code>. To describe all launch templates in your account that are defined as the default version, the valid value is <code>$Default</code>. You can specify <code>$Latest</code> and <code>$Default</code> in the same request. You cannot specify numbers.</p>
    pub fn set_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.versions = input;
        self
    }
    /// <p>One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account.</p>
    /// <p>To describe one or more versions of a specified launch template, valid values are <code>$Latest</code>, <code>$Default</code>, and numbers.</p>
    /// <p>To describe all launch templates in your account that are defined as the latest version, the valid value is <code>$Latest</code>. To describe all launch templates in your account that are defined as the default version, the valid value is <code>$Default</code>. You can specify <code>$Latest</code> and <code>$Default</code> in the same request. You cannot specify numbers.</p>
    pub fn get_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.versions
    }
    /// <p>The version number after which to describe launch template versions.</p>
    pub fn min_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.min_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number after which to describe launch template versions.</p>
    pub fn set_min_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.min_version = input;
        self
    }
    /// <p>The version number after which to describe launch template versions.</p>
    pub fn get_min_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.min_version
    }
    /// <p>The version number up to which to describe launch template versions.</p>
    pub fn max_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number up to which to describe launch template versions.</p>
    pub fn set_max_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_version = input;
        self
    }
    /// <p>The version number up to which to describe launch template versions.</p>
    pub fn get_max_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_version
    }
    /// <p>The token to request the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to request the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li>
    /// <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li>
    /// <li> <p> <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>host-resource-group-arn</code> - The ARN of the host resource group in which to launch the instances.</p> </li>
    /// <li> <p> <code>http-tokens</code> - The state of token usage for your instance metadata requests (<code>optional</code> | <code>required</code>).</p> </li>
    /// <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li>
    /// <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type.</p> </li>
    /// <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li>
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>license-configuration-arn</code> - The ARN of the license configuration.</p> </li>
    /// <li> <p> <code>network-card-index</code> - The index of the network card.</p> </li>
    /// <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li>
    /// <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li>
    /// <li> <p> <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>host-resource-group-arn</code> - The ARN of the host resource group in which to launch the instances.</p> </li>
    /// <li> <p> <code>http-tokens</code> - The state of token usage for your instance metadata requests (<code>optional</code> | <code>required</code>).</p> </li>
    /// <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li>
    /// <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type.</p> </li>
    /// <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li>
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>license-configuration-arn</code> - The ARN of the license configuration.</p> </li>
    /// <li> <p> <code>network-card-index</code> - The index of the network card.</p> </li>
    /// <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>One or more filters.</p>
    /// <ul>
    /// <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li>
    /// <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li>
    /// <li> <p> <code>http-endpoint</code> - Indicates whether the HTTP metadata endpoint on your instances is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>http-protocol-ipv4</code> - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (<code>enabled</code> | <code>disabled</code>).</p> </li>
    /// <li> <p> <code>host-resource-group-arn</code> - The ARN of the host resource group in which to launch the instances.</p> </li>
    /// <li> <p> <code>http-tokens</code> - The state of token usage for your instance metadata requests (<code>optional</code> | <code>required</code>).</p> </li>
    /// <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li>
    /// <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li>
    /// <li> <p> <code>instance-type</code> - The instance type.</p> </li>
    /// <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li>
    /// <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li>
    /// <li> <p> <code>license-configuration-arn</code> - The ARN of the license configuration.</p> </li>
    /// <li> <p> <code>network-card-index</code> - The index of the network card.</p> </li>
    /// <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>If <code>true</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the AMI ID is displayed in the response for <code>imageId</code>.</p>
    /// <p>If <code>false</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the parameter is displayed in the response for <code>imageId</code>.</p>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn resolve_alias(mut self, input: bool) -> Self {
        self.resolve_alias = ::std::option::Option::Some(input);
        self
    }
    /// <p>If <code>true</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the AMI ID is displayed in the response for <code>imageId</code>.</p>
    /// <p>If <code>false</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the parameter is displayed in the response for <code>imageId</code>.</p>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn set_resolve_alias(mut self, input: ::std::option::Option<bool>) -> Self {
        self.resolve_alias = input;
        self
    }
    /// <p>If <code>true</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the AMI ID is displayed in the response for <code>imageId</code>.</p>
    /// <p>If <code>false</code>, and if a Systems Manager parameter is specified for <code>ImageId</code>, the parameter is displayed in the response for <code>imageId</code>.</p>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#use-an-ssm-parameter-instead-of-an-ami-id">Use a Systems Manager parameter instead of an AMI ID</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn get_resolve_alias(&self) -> &::std::option::Option<bool> {
        &self.resolve_alias
    }
    /// Consumes the builder and constructs a [`DescribeLaunchTemplateVersionsInput`](crate::operation::describe_launch_template_versions::DescribeLaunchTemplateVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_launch_template_versions::DescribeLaunchTemplateVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_launch_template_versions::DescribeLaunchTemplateVersionsInput {
            dry_run: self.dry_run,
            launch_template_id: self.launch_template_id,
            launch_template_name: self.launch_template_name,
            versions: self.versions,
            min_version: self.min_version,
            max_version: self.max_version,
            next_token: self.next_token,
            max_results: self.max_results,
            filters: self.filters,
            resolve_alias: self.resolve_alias,
        })
    }
}
