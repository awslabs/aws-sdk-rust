// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSubnetCidrReservationInput {
    /// <p>The ID of the subnet.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 or IPV6 CIDR range to reserve.</p>
    pub cidr: ::std::option::Option<::std::string::String>,
    /// <p>The type of reservation. The reservation type determines how the reserved IP addresses are assigned to resources.</p>
    /// <ul>
    /// <li> <p> <code>prefix</code> - Amazon Web Services assigns the reserved IP addresses to network interfaces.</p> </li>
    /// <li> <p> <code>explicit</code> - You assign the reserved IP addresses to network interfaces.</p> </li>
    /// </ul>
    pub reservation_type: ::std::option::Option<crate::types::SubnetCidrReservationType>,
    /// <p>The description to assign to the subnet CIDR reservation.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The tags to assign to the subnet CIDR reservation.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateSubnetCidrReservationInput {
    /// <p>The ID of the subnet.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The IPv4 or IPV6 CIDR range to reserve.</p>
    pub fn cidr(&self) -> ::std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>The type of reservation. The reservation type determines how the reserved IP addresses are assigned to resources.</p>
    /// <ul>
    /// <li> <p> <code>prefix</code> - Amazon Web Services assigns the reserved IP addresses to network interfaces.</p> </li>
    /// <li> <p> <code>explicit</code> - You assign the reserved IP addresses to network interfaces.</p> </li>
    /// </ul>
    pub fn reservation_type(&self) -> ::std::option::Option<&crate::types::SubnetCidrReservationType> {
        self.reservation_type.as_ref()
    }
    /// <p>The description to assign to the subnet CIDR reservation.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The tags to assign to the subnet CIDR reservation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
}
impl CreateSubnetCidrReservationInput {
    /// Creates a new builder-style object to manufacture [`CreateSubnetCidrReservationInput`](crate::operation::create_subnet_cidr_reservation::CreateSubnetCidrReservationInput).
    pub fn builder() -> crate::operation::create_subnet_cidr_reservation::builders::CreateSubnetCidrReservationInputBuilder {
        crate::operation::create_subnet_cidr_reservation::builders::CreateSubnetCidrReservationInputBuilder::default()
    }
}

/// A builder for [`CreateSubnetCidrReservationInput`](crate::operation::create_subnet_cidr_reservation::CreateSubnetCidrReservationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSubnetCidrReservationInputBuilder {
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) cidr: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_type: ::std::option::Option<crate::types::SubnetCidrReservationType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
}
impl CreateSubnetCidrReservationInputBuilder {
    /// <p>The ID of the subnet.</p>
    /// This field is required.
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The IPv4 or IPV6 CIDR range to reserve.</p>
    /// This field is required.
    pub fn cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 or IPV6 CIDR range to reserve.</p>
    pub fn set_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>The IPv4 or IPV6 CIDR range to reserve.</p>
    pub fn get_cidr(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidr
    }
    /// <p>The type of reservation. The reservation type determines how the reserved IP addresses are assigned to resources.</p>
    /// <ul>
    /// <li> <p> <code>prefix</code> - Amazon Web Services assigns the reserved IP addresses to network interfaces.</p> </li>
    /// <li> <p> <code>explicit</code> - You assign the reserved IP addresses to network interfaces.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn reservation_type(mut self, input: crate::types::SubnetCidrReservationType) -> Self {
        self.reservation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of reservation. The reservation type determines how the reserved IP addresses are assigned to resources.</p>
    /// <ul>
    /// <li> <p> <code>prefix</code> - Amazon Web Services assigns the reserved IP addresses to network interfaces.</p> </li>
    /// <li> <p> <code>explicit</code> - You assign the reserved IP addresses to network interfaces.</p> </li>
    /// </ul>
    pub fn set_reservation_type(mut self, input: ::std::option::Option<crate::types::SubnetCidrReservationType>) -> Self {
        self.reservation_type = input;
        self
    }
    /// <p>The type of reservation. The reservation type determines how the reserved IP addresses are assigned to resources.</p>
    /// <ul>
    /// <li> <p> <code>prefix</code> - Amazon Web Services assigns the reserved IP addresses to network interfaces.</p> </li>
    /// <li> <p> <code>explicit</code> - You assign the reserved IP addresses to network interfaces.</p> </li>
    /// </ul>
    pub fn get_reservation_type(&self) -> &::std::option::Option<crate::types::SubnetCidrReservationType> {
        &self.reservation_type
    }
    /// <p>The description to assign to the subnet CIDR reservation.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description to assign to the subnet CIDR reservation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description to assign to the subnet CIDR reservation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to assign to the subnet CIDR reservation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to assign to the subnet CIDR reservation.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to assign to the subnet CIDR reservation.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// Consumes the builder and constructs a [`CreateSubnetCidrReservationInput`](crate::operation::create_subnet_cidr_reservation::CreateSubnetCidrReservationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_subnet_cidr_reservation::CreateSubnetCidrReservationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_subnet_cidr_reservation::CreateSubnetCidrReservationInput {
            subnet_id: self.subnet_id,
            cidr: self.cidr,
            reservation_type: self.reservation_type,
            description: self.description,
            dry_run: self.dry_run,
            tag_specifications: self.tag_specifications,
        })
    }
}
