// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TerminateInstancesOutput {
    /// <p>Information about the terminated instances.</p>
    #[doc(hidden)]
    pub terminating_instances:
        std::option::Option<std::vec::Vec<crate::types::InstanceStateChange>>,
    _request_id: Option<String>,
}
impl TerminateInstancesOutput {
    /// <p>Information about the terminated instances.</p>
    pub fn terminating_instances(
        &self,
    ) -> std::option::Option<&[crate::types::InstanceStateChange]> {
        self.terminating_instances.as_deref()
    }
}
impl aws_http::request_id::RequestId for TerminateInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TerminateInstancesOutput {
    /// Creates a new builder-style object to manufacture [`TerminateInstancesOutput`](crate::operation::terminate_instances::TerminateInstancesOutput).
    pub fn builder(
    ) -> crate::operation::terminate_instances::builders::TerminateInstancesOutputBuilder {
        crate::operation::terminate_instances::builders::TerminateInstancesOutputBuilder::default()
    }
}

/// A builder for [`TerminateInstancesOutput`](crate::operation::terminate_instances::TerminateInstancesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TerminateInstancesOutputBuilder {
    pub(crate) terminating_instances:
        std::option::Option<std::vec::Vec<crate::types::InstanceStateChange>>,
    _request_id: Option<String>,
}
impl TerminateInstancesOutputBuilder {
    /// Appends an item to `terminating_instances`.
    ///
    /// To override the contents of this collection use [`set_terminating_instances`](Self::set_terminating_instances).
    ///
    /// <p>Information about the terminated instances.</p>
    pub fn terminating_instances(mut self, input: crate::types::InstanceStateChange) -> Self {
        let mut v = self.terminating_instances.unwrap_or_default();
        v.push(input);
        self.terminating_instances = Some(v);
        self
    }
    /// <p>Information about the terminated instances.</p>
    pub fn set_terminating_instances(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceStateChange>>,
    ) -> Self {
        self.terminating_instances = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TerminateInstancesOutput`](crate::operation::terminate_instances::TerminateInstancesOutput).
    pub fn build(self) -> crate::operation::terminate_instances::TerminateInstancesOutput {
        crate::operation::terminate_instances::TerminateInstancesOutput {
            terminating_instances: self.terminating_instances,
            _request_id: self._request_id,
        }
    }
}
