// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifySnapshotAttributeInput {
    /// <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    pub attribute: ::std::option::Option<crate::types::SnapshotAttributeName>,
    /// <p>A JSON representation of the snapshot attribute modification.</p>
    pub create_volume_permission: ::std::option::Option<crate::types::CreateVolumePermissionModifications>,
    /// <p>The group to modify for the snapshot.</p>
    pub group_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type of operation to perform to the attribute.</p>
    pub operation_type: ::std::option::Option<crate::types::OperationType>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>The account ID to modify for the snapshot.</p>
    pub user_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl ModifySnapshotAttributeInput {
    /// <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    pub fn attribute(&self) -> ::std::option::Option<&crate::types::SnapshotAttributeName> {
        self.attribute.as_ref()
    }
    /// <p>A JSON representation of the snapshot attribute modification.</p>
    pub fn create_volume_permission(&self) -> ::std::option::Option<&crate::types::CreateVolumePermissionModifications> {
        self.create_volume_permission.as_ref()
    }
    /// <p>The group to modify for the snapshot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_names.is_none()`.
    pub fn group_names(&self) -> &[::std::string::String] {
        self.group_names.as_deref().unwrap_or_default()
    }
    /// <p>The type of operation to perform to the attribute.</p>
    pub fn operation_type(&self) -> ::std::option::Option<&crate::types::OperationType> {
        self.operation_type.as_ref()
    }
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The account ID to modify for the snapshot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_ids.is_none()`.
    pub fn user_ids(&self) -> &[::std::string::String] {
        self.user_ids.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl ModifySnapshotAttributeInput {
    /// Creates a new builder-style object to manufacture [`ModifySnapshotAttributeInput`](crate::operation::modify_snapshot_attribute::ModifySnapshotAttributeInput).
    pub fn builder() -> crate::operation::modify_snapshot_attribute::builders::ModifySnapshotAttributeInputBuilder {
        crate::operation::modify_snapshot_attribute::builders::ModifySnapshotAttributeInputBuilder::default()
    }
}

/// A builder for [`ModifySnapshotAttributeInput`](crate::operation::modify_snapshot_attribute::ModifySnapshotAttributeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModifySnapshotAttributeInputBuilder {
    pub(crate) attribute: ::std::option::Option<crate::types::SnapshotAttributeName>,
    pub(crate) create_volume_permission: ::std::option::Option<crate::types::CreateVolumePermissionModifications>,
    pub(crate) group_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) operation_type: ::std::option::Option<crate::types::OperationType>,
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl ModifySnapshotAttributeInputBuilder {
    /// <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    pub fn attribute(mut self, input: crate::types::SnapshotAttributeName) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::SnapshotAttributeName>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::SnapshotAttributeName> {
        &self.attribute
    }
    /// <p>A JSON representation of the snapshot attribute modification.</p>
    pub fn create_volume_permission(mut self, input: crate::types::CreateVolumePermissionModifications) -> Self {
        self.create_volume_permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>A JSON representation of the snapshot attribute modification.</p>
    pub fn set_create_volume_permission(mut self, input: ::std::option::Option<crate::types::CreateVolumePermissionModifications>) -> Self {
        self.create_volume_permission = input;
        self
    }
    /// <p>A JSON representation of the snapshot attribute modification.</p>
    pub fn get_create_volume_permission(&self) -> &::std::option::Option<crate::types::CreateVolumePermissionModifications> {
        &self.create_volume_permission
    }
    /// Appends an item to `group_names`.
    ///
    /// To override the contents of this collection use [`set_group_names`](Self::set_group_names).
    ///
    /// <p>The group to modify for the snapshot.</p>
    pub fn group_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.group_names.unwrap_or_default();
        v.push(input.into());
        self.group_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The group to modify for the snapshot.</p>
    pub fn set_group_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.group_names = input;
        self
    }
    /// <p>The group to modify for the snapshot.</p>
    pub fn get_group_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.group_names
    }
    /// <p>The type of operation to perform to the attribute.</p>
    pub fn operation_type(mut self, input: crate::types::OperationType) -> Self {
        self.operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of operation to perform to the attribute.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::OperationType>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>The type of operation to perform to the attribute.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::OperationType> {
        &self.operation_type
    }
    /// <p>The ID of the snapshot.</p>
    /// This field is required.
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// Appends an item to `user_ids`.
    ///
    /// To override the contents of this collection use [`set_user_ids`](Self::set_user_ids).
    ///
    /// <p>The account ID to modify for the snapshot.</p>
    pub fn user_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_ids.unwrap_or_default();
        v.push(input.into());
        self.user_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The account ID to modify for the snapshot.</p>
    pub fn set_user_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_ids = input;
        self
    }
    /// <p>The account ID to modify for the snapshot.</p>
    pub fn get_user_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_ids
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`ModifySnapshotAttributeInput`](crate::operation::modify_snapshot_attribute::ModifySnapshotAttributeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_snapshot_attribute::ModifySnapshotAttributeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::modify_snapshot_attribute::ModifySnapshotAttributeInput {
            attribute: self.attribute,
            create_volume_permission: self.create_volume_permission,
            group_names: self.group_names,
            operation_type: self.operation_type,
            snapshot_id: self.snapshot_id,
            user_ids: self.user_ids,
            dry_run: self.dry_run,
        })
    }
}
