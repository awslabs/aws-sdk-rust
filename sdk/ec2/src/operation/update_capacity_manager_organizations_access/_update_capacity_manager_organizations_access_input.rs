// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateCapacityManagerOrganizationsAccessInput {
    /// <p>Specifies whether to enable or disable cross-account access for Amazon Web Services Organizations. When enabled, Capacity Manager aggregates data from all accounts in your organization.</p>
    pub organizations_access: ::std::option::Option<bool>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateCapacityManagerOrganizationsAccessInput {
    /// <p>Specifies whether to enable or disable cross-account access for Amazon Web Services Organizations. When enabled, Capacity Manager aggregates data from all accounts in your organization.</p>
    pub fn organizations_access(&self) -> ::std::option::Option<bool> {
        self.organizations_access
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateCapacityManagerOrganizationsAccessInput {
    /// Creates a new builder-style object to manufacture [`UpdateCapacityManagerOrganizationsAccessInput`](crate::operation::update_capacity_manager_organizations_access::UpdateCapacityManagerOrganizationsAccessInput).
    pub fn builder() -> crate::operation::update_capacity_manager_organizations_access::builders::UpdateCapacityManagerOrganizationsAccessInputBuilder
    {
        crate::operation::update_capacity_manager_organizations_access::builders::UpdateCapacityManagerOrganizationsAccessInputBuilder::default()
    }
}

/// A builder for [`UpdateCapacityManagerOrganizationsAccessInput`](crate::operation::update_capacity_manager_organizations_access::UpdateCapacityManagerOrganizationsAccessInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateCapacityManagerOrganizationsAccessInputBuilder {
    pub(crate) organizations_access: ::std::option::Option<bool>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateCapacityManagerOrganizationsAccessInputBuilder {
    /// <p>Specifies whether to enable or disable cross-account access for Amazon Web Services Organizations. When enabled, Capacity Manager aggregates data from all accounts in your organization.</p>
    /// This field is required.
    pub fn organizations_access(mut self, input: bool) -> Self {
        self.organizations_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable or disable cross-account access for Amazon Web Services Organizations. When enabled, Capacity Manager aggregates data from all accounts in your organization.</p>
    pub fn set_organizations_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.organizations_access = input;
        self
    }
    /// <p>Specifies whether to enable or disable cross-account access for Amazon Web Services Organizations. When enabled, Capacity Manager aggregates data from all accounts in your organization.</p>
    pub fn get_organizations_access(&self) -> &::std::option::Option<bool> {
        &self.organizations_access
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateCapacityManagerOrganizationsAccessInput`](crate::operation::update_capacity_manager_organizations_access::UpdateCapacityManagerOrganizationsAccessInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_capacity_manager_organizations_access::UpdateCapacityManagerOrganizationsAccessInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_capacity_manager_organizations_access::UpdateCapacityManagerOrganizationsAccessInput {
                organizations_access: self.organizations_access,
                dry_run: self.dry_run,
                client_token: self.client_token,
            },
        )
    }
}
