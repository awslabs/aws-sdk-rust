// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLaunchTemplateVersionOutput {
    /// <p>Information about the launch template version.</p>
    #[doc(hidden)]
    pub launch_template_version: std::option::Option<crate::types::LaunchTemplateVersion>,
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    #[doc(hidden)]
    pub warning: std::option::Option<crate::types::ValidationWarning>,
    _request_id: Option<String>,
}
impl CreateLaunchTemplateVersionOutput {
    /// <p>Information about the launch template version.</p>
    pub fn launch_template_version(
        &self,
    ) -> std::option::Option<&crate::types::LaunchTemplateVersion> {
        self.launch_template_version.as_ref()
    }
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub fn warning(&self) -> std::option::Option<&crate::types::ValidationWarning> {
        self.warning.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLaunchTemplateVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateLaunchTemplateVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchTemplateVersionOutput`](crate::operation::create_launch_template_version::CreateLaunchTemplateVersionOutput).
    pub fn builder() -> crate::operation::create_launch_template_version::builders::CreateLaunchTemplateVersionOutputBuilder{
        crate::operation::create_launch_template_version::builders::CreateLaunchTemplateVersionOutputBuilder::default()
    }
}

/// A builder for [`CreateLaunchTemplateVersionOutput`](crate::operation::create_launch_template_version::CreateLaunchTemplateVersionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLaunchTemplateVersionOutputBuilder {
    pub(crate) launch_template_version: std::option::Option<crate::types::LaunchTemplateVersion>,
    pub(crate) warning: std::option::Option<crate::types::ValidationWarning>,
    _request_id: Option<String>,
}
impl CreateLaunchTemplateVersionOutputBuilder {
    /// <p>Information about the launch template version.</p>
    pub fn launch_template_version(mut self, input: crate::types::LaunchTemplateVersion) -> Self {
        self.launch_template_version = Some(input);
        self
    }
    /// <p>Information about the launch template version.</p>
    pub fn set_launch_template_version(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateVersion>,
    ) -> Self {
        self.launch_template_version = input;
        self
    }
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub fn warning(mut self, input: crate::types::ValidationWarning) -> Self {
        self.warning = Some(input);
        self
    }
    /// <p>If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.</p>
    pub fn set_warning(
        mut self,
        input: std::option::Option<crate::types::ValidationWarning>,
    ) -> Self {
        self.warning = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateLaunchTemplateVersionOutput`](crate::operation::create_launch_template_version::CreateLaunchTemplateVersionOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_launch_template_version::CreateLaunchTemplateVersionOutput {
        crate::operation::create_launch_template_version::CreateLaunchTemplateVersionOutput {
            launch_template_version: self.launch_template_version,
            warning: self.warning,
            _request_id: self._request_id,
        }
    }
}
