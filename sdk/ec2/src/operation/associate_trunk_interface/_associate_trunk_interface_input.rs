// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateTrunkInterfaceInput {
    /// <p>The ID of the branch network interface.</p>
    pub branch_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the trunk network interface.</p>
    pub trunk_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    pub vlan_id: ::std::option::Option<i32>,
    /// <p>The application key. This applies to the GRE protocol.</p>
    pub gre_key: ::std::option::Option<i32>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl AssociateTrunkInterfaceInput {
    /// <p>The ID of the branch network interface.</p>
    pub fn branch_interface_id(&self) -> ::std::option::Option<&str> {
        self.branch_interface_id.as_deref()
    }
    /// <p>The ID of the trunk network interface.</p>
    pub fn trunk_interface_id(&self) -> ::std::option::Option<&str> {
        self.trunk_interface_id.as_deref()
    }
    /// <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    pub fn vlan_id(&self) -> ::std::option::Option<i32> {
        self.vlan_id
    }
    /// <p>The application key. This applies to the GRE protocol.</p>
    pub fn gre_key(&self) -> ::std::option::Option<i32> {
        self.gre_key
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl AssociateTrunkInterfaceInput {
    /// Creates a new builder-style object to manufacture [`AssociateTrunkInterfaceInput`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceInput).
    pub fn builder() -> crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceInputBuilder {
        crate::operation::associate_trunk_interface::builders::AssociateTrunkInterfaceInputBuilder::default()
    }
}

/// A builder for [`AssociateTrunkInterfaceInput`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateTrunkInterfaceInputBuilder {
    pub(crate) branch_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) trunk_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) vlan_id: ::std::option::Option<i32>,
    pub(crate) gre_key: ::std::option::Option<i32>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl AssociateTrunkInterfaceInputBuilder {
    /// <p>The ID of the branch network interface.</p>
    /// This field is required.
    pub fn branch_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.branch_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the branch network interface.</p>
    pub fn set_branch_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.branch_interface_id = input;
        self
    }
    /// <p>The ID of the branch network interface.</p>
    pub fn get_branch_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.branch_interface_id
    }
    /// <p>The ID of the trunk network interface.</p>
    /// This field is required.
    pub fn trunk_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trunk_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the trunk network interface.</p>
    pub fn set_trunk_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trunk_interface_id = input;
        self
    }
    /// <p>The ID of the trunk network interface.</p>
    pub fn get_trunk_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trunk_interface_id
    }
    /// <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    pub fn vlan_id(mut self, input: i32) -> Self {
        self.vlan_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    pub fn set_vlan_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vlan_id = input;
        self
    }
    /// <p>The ID of the VLAN. This applies to the VLAN protocol.</p>
    pub fn get_vlan_id(&self) -> &::std::option::Option<i32> {
        &self.vlan_id
    }
    /// <p>The application key. This applies to the GRE protocol.</p>
    pub fn gre_key(mut self, input: i32) -> Self {
        self.gre_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The application key. This applies to the GRE protocol.</p>
    pub fn set_gre_key(mut self, input: ::std::option::Option<i32>) -> Self {
        self.gre_key = input;
        self
    }
    /// <p>The application key. This applies to the GRE protocol.</p>
    pub fn get_gre_key(&self) -> &::std::option::Option<i32> {
        &self.gre_key
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`AssociateTrunkInterfaceInput`](crate::operation::associate_trunk_interface::AssociateTrunkInterfaceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_trunk_interface::AssociateTrunkInterfaceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_trunk_interface::AssociateTrunkInterfaceInput {
            branch_interface_id: self.branch_interface_id,
            trunk_interface_id: self.trunk_interface_id,
            vlan_id: self.vlan_id,
            gre_key: self.gre_key,
            client_token: self.client_token,
            dry_run: self.dry_run,
        })
    }
}
