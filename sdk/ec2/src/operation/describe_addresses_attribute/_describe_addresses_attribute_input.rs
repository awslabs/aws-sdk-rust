// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAddressesAttributeInput {
    /// <p>[EC2-VPC] The allocation IDs.</p>
    pub allocation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The attribute of the IP address.</p>
    pub attribute: ::std::option::Option<crate::types::AddressAttributeName>,
    /// <p>The token for the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl DescribeAddressesAttributeInput {
    /// <p>[EC2-VPC] The allocation IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allocation_ids.is_none()`.
    pub fn allocation_ids(&self) -> &[::std::string::String] {
        self.allocation_ids.as_deref().unwrap_or_default()
    }
    /// <p>The attribute of the IP address.</p>
    pub fn attribute(&self) -> ::std::option::Option<&crate::types::AddressAttributeName> {
        self.attribute.as_ref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl DescribeAddressesAttributeInput {
    /// Creates a new builder-style object to manufacture [`DescribeAddressesAttributeInput`](crate::operation::describe_addresses_attribute::DescribeAddressesAttributeInput).
    pub fn builder() -> crate::operation::describe_addresses_attribute::builders::DescribeAddressesAttributeInputBuilder {
        crate::operation::describe_addresses_attribute::builders::DescribeAddressesAttributeInputBuilder::default()
    }
}

/// A builder for [`DescribeAddressesAttributeInput`](crate::operation::describe_addresses_attribute::DescribeAddressesAttributeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAddressesAttributeInputBuilder {
    pub(crate) allocation_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) attribute: ::std::option::Option<crate::types::AddressAttributeName>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl DescribeAddressesAttributeInputBuilder {
    /// Appends an item to `allocation_ids`.
    ///
    /// To override the contents of this collection use [`set_allocation_ids`](Self::set_allocation_ids).
    ///
    /// <p>[EC2-VPC] The allocation IDs.</p>
    pub fn allocation_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allocation_ids.unwrap_or_default();
        v.push(input.into());
        self.allocation_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>[EC2-VPC] The allocation IDs.</p>
    pub fn set_allocation_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allocation_ids = input;
        self
    }
    /// <p>[EC2-VPC] The allocation IDs.</p>
    pub fn get_allocation_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allocation_ids
    }
    /// <p>The attribute of the IP address.</p>
    pub fn attribute(mut self, input: crate::types::AddressAttributeName) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attribute of the IP address.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::AddressAttributeName>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The attribute of the IP address.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::AddressAttributeName> {
        &self.attribute
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`DescribeAddressesAttributeInput`](crate::operation::describe_addresses_attribute::DescribeAddressesAttributeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_addresses_attribute::DescribeAddressesAttributeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_addresses_attribute::DescribeAddressesAttributeInput {
            allocation_ids: self.allocation_ids,
            attribute: self.attribute,
            next_token: self.next_token,
            max_results: self.max_results,
            dry_run: self.dry_run,
        })
    }
}
