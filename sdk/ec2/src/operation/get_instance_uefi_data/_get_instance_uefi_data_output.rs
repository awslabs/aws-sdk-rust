// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInstanceUefiDataOutput {
    /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
    #[doc(hidden)]
    pub uefi_data: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetInstanceUefiDataOutput {
    /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
    pub fn uefi_data(&self) -> std::option::Option<&str> {
        self.uefi_data.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetInstanceUefiDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInstanceUefiDataOutput {
    /// Creates a new builder-style object to manufacture [`GetInstanceUefiDataOutput`](crate::operation::get_instance_uefi_data::GetInstanceUefiDataOutput).
    pub fn builder(
    ) -> crate::operation::get_instance_uefi_data::builders::GetInstanceUefiDataOutputBuilder {
        crate::operation::get_instance_uefi_data::builders::GetInstanceUefiDataOutputBuilder::default()
    }
}

/// A builder for [`GetInstanceUefiDataOutput`](crate::operation::get_instance_uefi_data::GetInstanceUefiDataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetInstanceUefiDataOutputBuilder {
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) uefi_data: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetInstanceUefiDataOutputBuilder {
    /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the instance from which to retrieve the UEFI data.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
    pub fn uefi_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.uefi_data = Some(input.into());
        self
    }
    /// <p>Base64 representation of the non-volatile UEFI variable store.</p>
    pub fn set_uefi_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.uefi_data = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInstanceUefiDataOutput`](crate::operation::get_instance_uefi_data::GetInstanceUefiDataOutput).
    pub fn build(self) -> crate::operation::get_instance_uefi_data::GetInstanceUefiDataOutput {
        crate::operation::get_instance_uefi_data::GetInstanceUefiDataOutput {
            instance_id: self.instance_id,
            uefi_data: self.uefi_data,
            _request_id: self._request_id,
        }
    }
}
