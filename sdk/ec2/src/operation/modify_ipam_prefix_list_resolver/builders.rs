// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_ipam_prefix_list_resolver::_modify_ipam_prefix_list_resolver_output::ModifyIpamPrefixListResolverOutputBuilder;

pub use crate::operation::modify_ipam_prefix_list_resolver::_modify_ipam_prefix_list_resolver_input::ModifyIpamPrefixListResolverInputBuilder;

impl crate::operation::modify_ipam_prefix_list_resolver::builders::ModifyIpamPrefixListResolverInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_ipam_prefix_list_resolver();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyIpamPrefixListResolver`.
///
/// <p>Modifies an IPAM prefix list resolver. You can update the description and CIDR selection rules. Changes to rules will trigger re-evaluation and potential updates to associated prefix lists.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyIpamPrefixListResolverFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_ipam_prefix_list_resolver::builders::ModifyIpamPrefixListResolverInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverOutput,
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverError,
    > for ModifyIpamPrefixListResolverFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverOutput,
            crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyIpamPrefixListResolverFluentBuilder {
    /// Creates a new `ModifyIpamPrefixListResolverFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyIpamPrefixListResolver as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_ipam_prefix_list_resolver::builders::ModifyIpamPrefixListResolverInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolver::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolver::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverOutput,
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_prefix_list_resolver_id(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_prefix_list_resolver_id(input);
        self
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_prefix_list_resolver_id()
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Appends an item to `Rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub fn rules(mut self, input: crate::types::IpamPrefixListResolverRuleRequest) -> Self {
        self.inner = self.inner.rules(input);
        self
    }
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleRequest>>) -> Self {
        self.inner = self.inner.set_rules(input);
        self
    }
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleRequest>> {
        self.inner.get_rules()
    }
}
