// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyIpamPrefixListResolverInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleRequest>>,
}
impl ModifyIpamPrefixListResolverInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub fn ipam_prefix_list_resolver_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_id.as_deref()
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::IpamPrefixListResolverRuleRequest] {
        self.rules.as_deref().unwrap_or_default()
    }
}
impl ModifyIpamPrefixListResolverInput {
    /// Creates a new builder-style object to manufacture [`ModifyIpamPrefixListResolverInput`](crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverInput).
    pub fn builder() -> crate::operation::modify_ipam_prefix_list_resolver::builders::ModifyIpamPrefixListResolverInputBuilder {
        crate::operation::modify_ipam_prefix_list_resolver::builders::ModifyIpamPrefixListResolverInputBuilder::default()
    }
}

/// A builder for [`ModifyIpamPrefixListResolverInput`](crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyIpamPrefixListResolverInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleRequest>>,
}
impl ModifyIpamPrefixListResolverInputBuilder {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    /// This field is required.
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver to modify.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_id
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A new description for the IPAM prefix list resolver.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub fn rules(mut self, input: crate::types::IpamPrefixListResolverRuleRequest) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleRequest>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The updated CIDR selection rules for the resolver. These rules replace the existing rules entirely.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpamPrefixListResolverRuleRequest>> {
        &self.rules
    }
    /// Consumes the builder and constructs a [`ModifyIpamPrefixListResolverInput`](crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::modify_ipam_prefix_list_resolver::ModifyIpamPrefixListResolverInput {
            dry_run: self.dry_run,
            ipam_prefix_list_resolver_id: self.ipam_prefix_list_resolver_id,
            description: self.description,
            rules: self.rules,
        })
    }
}
