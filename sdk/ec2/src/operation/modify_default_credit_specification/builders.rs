// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_default_credit_specification::_modify_default_credit_specification_output::ModifyDefaultCreditSpecificationOutputBuilder;

pub use crate::operation::modify_default_credit_specification::_modify_default_credit_specification_input::ModifyDefaultCreditSpecificationInputBuilder;

impl ModifyDefaultCreditSpecificationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_default_credit_specification();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyDefaultCreditSpecification`.
///
/// <p>Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per Amazon Web Services Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.</p>
/// <p> <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which works at an Amazon Web Services Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call <code>GetDefaultCreditSpecification</code> and check <code>DefaultCreditSpecification</code> for updates.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyDefaultCreditSpecificationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_default_credit_specification::builders::ModifyDefaultCreditSpecificationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationOutput,
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationError,
    > for ModifyDefaultCreditSpecificationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationOutput,
            crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyDefaultCreditSpecificationFluentBuilder {
    /// Creates a new `ModifyDefaultCreditSpecification`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyDefaultCreditSpecification as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_default_credit_specification::builders::ModifyDefaultCreditSpecificationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecification::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecification::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationOutput,
        crate::operation::modify_default_credit_specification::ModifyDefaultCreditSpecificationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The instance family.</p>
    pub fn instance_family(mut self, input: crate::types::UnlimitedSupportedInstanceFamily) -> Self {
        self.inner = self.inner.instance_family(input);
        self
    }
    /// <p>The instance family.</p>
    pub fn set_instance_family(mut self, input: ::std::option::Option<crate::types::UnlimitedSupportedInstanceFamily>) -> Self {
        self.inner = self.inner.set_instance_family(input);
        self
    }
    /// <p>The instance family.</p>
    pub fn get_instance_family(&self) -> &::std::option::Option<crate::types::UnlimitedSupportedInstanceFamily> {
        self.inner.get_instance_family()
    }
    /// <p>The credit option for CPU usage of the instance family.</p>
    /// <p>Valid Values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn cpu_credits(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cpu_credits(input.into());
        self
    }
    /// <p>The credit option for CPU usage of the instance family.</p>
    /// <p>Valid Values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn set_cpu_credits(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cpu_credits(input);
        self
    }
    /// <p>The credit option for CPU usage of the instance family.</p>
    /// <p>Valid Values: <code>standard</code> | <code>unlimited</code> </p>
    pub fn get_cpu_credits(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cpu_credits()
    }
}
