// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeElasticGpusOutput {
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub elastic_gpu_set: ::std::option::Option<::std::vec::Vec<crate::types::ElasticGpus>>,
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeElasticGpusOutput {
    /// <p>Information about the Elastic Graphics accelerators.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.elastic_gpu_set.is_none()`.
    pub fn elastic_gpu_set(&self) -> &[crate::types::ElasticGpus] {
        self.elastic_gpu_set.as_deref().unwrap_or_default()
    }
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeElasticGpusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeElasticGpusOutput {
    /// Creates a new builder-style object to manufacture [`DescribeElasticGpusOutput`](crate::operation::describe_elastic_gpus::DescribeElasticGpusOutput).
    pub fn builder() -> crate::operation::describe_elastic_gpus::builders::DescribeElasticGpusOutputBuilder {
        crate::operation::describe_elastic_gpus::builders::DescribeElasticGpusOutputBuilder::default()
    }
}

/// A builder for [`DescribeElasticGpusOutput`](crate::operation::describe_elastic_gpus::DescribeElasticGpusOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeElasticGpusOutputBuilder {
    pub(crate) elastic_gpu_set: ::std::option::Option<::std::vec::Vec<crate::types::ElasticGpus>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeElasticGpusOutputBuilder {
    /// Appends an item to `elastic_gpu_set`.
    ///
    /// To override the contents of this collection use [`set_elastic_gpu_set`](Self::set_elastic_gpu_set).
    ///
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub fn elastic_gpu_set(mut self, input: crate::types::ElasticGpus) -> Self {
        let mut v = self.elastic_gpu_set.unwrap_or_default();
        v.push(input);
        self.elastic_gpu_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub fn set_elastic_gpu_set(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ElasticGpus>>) -> Self {
        self.elastic_gpu_set = input;
        self
    }
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub fn get_elastic_gpu_set(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ElasticGpus>> {
        &self.elastic_gpu_set
    }
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeElasticGpusOutput`](crate::operation::describe_elastic_gpus::DescribeElasticGpusOutput).
    pub fn build(self) -> crate::operation::describe_elastic_gpus::DescribeElasticGpusOutput {
        crate::operation::describe_elastic_gpus::DescribeElasticGpusOutput {
            elastic_gpu_set: self.elastic_gpu_set,
            max_results: self.max_results,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
