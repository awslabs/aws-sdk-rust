// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyInstanceConnectEndpointInput {
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub instance_connect_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub preserve_client_ip: ::std::option::Option<bool>,
}
impl ModifyInstanceConnectEndpointInput {
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub fn instance_connect_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.instance_connect_endpoint_id.as_deref()
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn preserve_client_ip(&self) -> ::std::option::Option<bool> {
        self.preserve_client_ip
    }
}
impl ModifyInstanceConnectEndpointInput {
    /// Creates a new builder-style object to manufacture [`ModifyInstanceConnectEndpointInput`](crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointInput).
    pub fn builder() -> crate::operation::modify_instance_connect_endpoint::builders::ModifyInstanceConnectEndpointInputBuilder {
        crate::operation::modify_instance_connect_endpoint::builders::ModifyInstanceConnectEndpointInputBuilder::default()
    }
}

/// A builder for [`ModifyInstanceConnectEndpointInput`](crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyInstanceConnectEndpointInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) instance_connect_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) preserve_client_ip: ::std::option::Option<bool>,
}
impl ModifyInstanceConnectEndpointInputBuilder {
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    /// This field is required.
    pub fn instance_connect_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_connect_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub fn set_instance_connect_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_connect_endpoint_id = input;
        self
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub fn get_instance_connect_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_connect_endpoint_id
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn preserve_client_ip(mut self, input: bool) -> Self {
        self.preserve_client_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn set_preserve_client_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preserve_client_ip = input;
        self
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn get_preserve_client_ip(&self) -> &::std::option::Option<bool> {
        &self.preserve_client_ip
    }
    /// Consumes the builder and constructs a [`ModifyInstanceConnectEndpointInput`](crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointInput {
            dry_run: self.dry_run,
            instance_connect_endpoint_id: self.instance_connect_endpoint_id,
            ip_address_type: self.ip_address_type,
            security_group_ids: self.security_group_ids,
            preserve_client_ip: self.preserve_client_ip,
        })
    }
}
