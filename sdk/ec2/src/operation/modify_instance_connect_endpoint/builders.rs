// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_instance_connect_endpoint::_modify_instance_connect_endpoint_output::ModifyInstanceConnectEndpointOutputBuilder;

pub use crate::operation::modify_instance_connect_endpoint::_modify_instance_connect_endpoint_input::ModifyInstanceConnectEndpointInputBuilder;

impl crate::operation::modify_instance_connect_endpoint::builders::ModifyInstanceConnectEndpointInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_instance_connect_endpoint();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyInstanceConnectEndpoint`.
///
/// <p>Modifies the specified EC2 Instance Connect Endpoint.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/modify-ec2-instance-connect-endpoint.html">Modify an EC2 Instance Connect Endpoint</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyInstanceConnectEndpointFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_instance_connect_endpoint::builders::ModifyInstanceConnectEndpointInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointOutput,
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointError,
    > for ModifyInstanceConnectEndpointFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointOutput,
            crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyInstanceConnectEndpointFluentBuilder {
    /// Creates a new `ModifyInstanceConnectEndpointFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyInstanceConnectEndpoint as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_instance_connect_endpoint::builders::ModifyInstanceConnectEndpointInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpoint::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpoint::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointOutput,
        crate::operation::modify_instance_connect_endpoint::ModifyInstanceConnectEndpointError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub fn instance_connect_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_connect_endpoint_id(input.into());
        self
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub fn set_instance_connect_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_connect_endpoint_id(input);
        self
    }
    /// <p>The ID of the EC2 Instance Connect Endpoint to modify.</p>
    pub fn get_instance_connect_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_connect_endpoint_id()
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.inner = self.inner.ip_address_type(input);
        self
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.inner = self.inner.set_ip_address_type(input);
        self
    }
    /// <p>The new IP address type for the EC2 Instance Connect Endpoint.</p><note>
    /// <p><code>PreserveClientIp</code> is only supported on IPv4 EC2 Instance Connect Endpoints. To use <code>PreserveClientIp</code>, the value for <code>IpAddressType</code> must be <code>ipv4</code>.</p>
    /// </note>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        self.inner.get_ip_address_type()
    }
    ///
    /// Appends an item to `SecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.security_group_ids(input.into());
        self
    }
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_security_group_ids(input);
        self
    }
    /// <p>Changes the security groups for the EC2 Instance Connect Endpoint. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_security_group_ids()
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn preserve_client_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.preserve_client_ip(input);
        self
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn set_preserve_client_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_preserve_client_ip(input);
        self
    }
    /// <p>Indicates whether the client IP address is preserved as the source when you connect to a resource. The following are the possible values.</p>
    /// <ul>
    /// <li>
    /// <p><code>true</code> - Use the IP address of the client. Your instance must have an IPv4 address.</p></li>
    /// <li>
    /// <p><code>false</code> - Use the IP address of the network interface.</p></li>
    /// </ul>
    pub fn get_preserve_client_ip(&self) -> &::std::option::Option<bool> {
        self.inner.get_preserve_client_ip()
    }
}
