// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyManagedPrefixListInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the prefix list.</p>
    pub prefix_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The current version of the prefix list.</p>
    pub current_version: ::std::option::Option<i64>,
    /// <p>A name for the prefix list.</p>
    pub prefix_list_name: ::std::option::Option<::std::string::String>,
    /// <p>One or more entries to add to the prefix list.</p>
    pub add_entries: ::std::option::Option<::std::vec::Vec<crate::types::AddPrefixListEntry>>,
    /// <p>One or more entries to remove from the prefix list.</p>
    pub remove_entries: ::std::option::Option<::std::vec::Vec<crate::types::RemovePrefixListEntry>>,
    /// <p>The maximum number of entries for the prefix list. You cannot modify the entries of a prefix list and modify the size of a prefix list at the same time.</p>
    /// <p>If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of the first ten resources that do not support the new maximum size.</p>
    pub max_entries: ::std::option::Option<i32>,
}
impl ModifyManagedPrefixListInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the prefix list.</p>
    pub fn prefix_list_id(&self) -> ::std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The current version of the prefix list.</p>
    pub fn current_version(&self) -> ::std::option::Option<i64> {
        self.current_version
    }
    /// <p>A name for the prefix list.</p>
    pub fn prefix_list_name(&self) -> ::std::option::Option<&str> {
        self.prefix_list_name.as_deref()
    }
    /// <p>One or more entries to add to the prefix list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_entries.is_none()`.
    pub fn add_entries(&self) -> &[crate::types::AddPrefixListEntry] {
        self.add_entries.as_deref().unwrap_or_default()
    }
    /// <p>One or more entries to remove from the prefix list.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.remove_entries.is_none()`.
    pub fn remove_entries(&self) -> &[crate::types::RemovePrefixListEntry] {
        self.remove_entries.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of entries for the prefix list. You cannot modify the entries of a prefix list and modify the size of a prefix list at the same time.</p>
    /// <p>If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of the first ten resources that do not support the new maximum size.</p>
    pub fn max_entries(&self) -> ::std::option::Option<i32> {
        self.max_entries
    }
}
impl ModifyManagedPrefixListInput {
    /// Creates a new builder-style object to manufacture [`ModifyManagedPrefixListInput`](crate::operation::modify_managed_prefix_list::ModifyManagedPrefixListInput).
    pub fn builder() -> crate::operation::modify_managed_prefix_list::builders::ModifyManagedPrefixListInputBuilder {
        crate::operation::modify_managed_prefix_list::builders::ModifyManagedPrefixListInputBuilder::default()
    }
}

/// A builder for [`ModifyManagedPrefixListInput`](crate::operation::modify_managed_prefix_list::ModifyManagedPrefixListInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModifyManagedPrefixListInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) prefix_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) current_version: ::std::option::Option<i64>,
    pub(crate) prefix_list_name: ::std::option::Option<::std::string::String>,
    pub(crate) add_entries: ::std::option::Option<::std::vec::Vec<crate::types::AddPrefixListEntry>>,
    pub(crate) remove_entries: ::std::option::Option<::std::vec::Vec<crate::types::RemovePrefixListEntry>>,
    pub(crate) max_entries: ::std::option::Option<i32>,
}
impl ModifyManagedPrefixListInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the prefix list.</p>
    /// This field is required.
    pub fn prefix_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn set_prefix_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the prefix list.</p>
    pub fn get_prefix_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_id
    }
    /// <p>The current version of the prefix list.</p>
    pub fn current_version(mut self, input: i64) -> Self {
        self.current_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current version of the prefix list.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The current version of the prefix list.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<i64> {
        &self.current_version
    }
    /// <p>A name for the prefix list.</p>
    pub fn prefix_list_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the prefix list.</p>
    pub fn set_prefix_list_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_name = input;
        self
    }
    /// <p>A name for the prefix list.</p>
    pub fn get_prefix_list_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_name
    }
    /// Appends an item to `add_entries`.
    ///
    /// To override the contents of this collection use [`set_add_entries`](Self::set_add_entries).
    ///
    /// <p>One or more entries to add to the prefix list.</p>
    pub fn add_entries(mut self, input: crate::types::AddPrefixListEntry) -> Self {
        let mut v = self.add_entries.unwrap_or_default();
        v.push(input);
        self.add_entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more entries to add to the prefix list.</p>
    pub fn set_add_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddPrefixListEntry>>) -> Self {
        self.add_entries = input;
        self
    }
    /// <p>One or more entries to add to the prefix list.</p>
    pub fn get_add_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddPrefixListEntry>> {
        &self.add_entries
    }
    /// Appends an item to `remove_entries`.
    ///
    /// To override the contents of this collection use [`set_remove_entries`](Self::set_remove_entries).
    ///
    /// <p>One or more entries to remove from the prefix list.</p>
    pub fn remove_entries(mut self, input: crate::types::RemovePrefixListEntry) -> Self {
        let mut v = self.remove_entries.unwrap_or_default();
        v.push(input);
        self.remove_entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more entries to remove from the prefix list.</p>
    pub fn set_remove_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RemovePrefixListEntry>>) -> Self {
        self.remove_entries = input;
        self
    }
    /// <p>One or more entries to remove from the prefix list.</p>
    pub fn get_remove_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RemovePrefixListEntry>> {
        &self.remove_entries
    }
    /// <p>The maximum number of entries for the prefix list. You cannot modify the entries of a prefix list and modify the size of a prefix list at the same time.</p>
    /// <p>If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of the first ten resources that do not support the new maximum size.</p>
    pub fn max_entries(mut self, input: i32) -> Self {
        self.max_entries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of entries for the prefix list. You cannot modify the entries of a prefix list and modify the size of a prefix list at the same time.</p>
    /// <p>If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of the first ten resources that do not support the new maximum size.</p>
    pub fn set_max_entries(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_entries = input;
        self
    }
    /// <p>The maximum number of entries for the prefix list. You cannot modify the entries of a prefix list and modify the size of a prefix list at the same time.</p>
    /// <p>If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of the first ten resources that do not support the new maximum size.</p>
    pub fn get_max_entries(&self) -> &::std::option::Option<i32> {
        &self.max_entries
    }
    /// Consumes the builder and constructs a [`ModifyManagedPrefixListInput`](crate::operation::modify_managed_prefix_list::ModifyManagedPrefixListInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_managed_prefix_list::ModifyManagedPrefixListInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::modify_managed_prefix_list::ModifyManagedPrefixListInput {
            dry_run: self.dry_run,
            prefix_list_id: self.prefix_list_id,
            current_version: self.current_version,
            prefix_list_name: self.prefix_list_name,
            add_entries: self.add_entries,
            remove_entries: self.remove_entries,
            max_entries: self.max_entries,
        })
    }
}
