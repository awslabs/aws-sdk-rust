// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for CreateNetworkInterfacePermission.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateNetworkInterfacePermissionInput {
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Service. Currently not supported.</p>
    pub aws_service: ::std::option::Option<::std::string::String>,
    /// <p>The type of permission to grant.</p>
    pub permission: ::std::option::Option<crate::types::InterfacePermissionType>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl CreateNetworkInterfacePermissionInput {
    /// <p>The ID of the network interface.</p>
    pub fn network_interface_id(&self) -> ::std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The Amazon Web Service. Currently not supported.</p>
    pub fn aws_service(&self) -> ::std::option::Option<&str> {
        self.aws_service.as_deref()
    }
    /// <p>The type of permission to grant.</p>
    pub fn permission(&self) -> ::std::option::Option<&crate::types::InterfacePermissionType> {
        self.permission.as_ref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl CreateNetworkInterfacePermissionInput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInterfacePermissionInput`](crate::operation::create_network_interface_permission::CreateNetworkInterfacePermissionInput).
    pub fn builder() -> crate::operation::create_network_interface_permission::builders::CreateNetworkInterfacePermissionInputBuilder {
        crate::operation::create_network_interface_permission::builders::CreateNetworkInterfacePermissionInputBuilder::default()
    }
}

/// A builder for [`CreateNetworkInterfacePermissionInput`](crate::operation::create_network_interface_permission::CreateNetworkInterfacePermissionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateNetworkInterfacePermissionInputBuilder {
    pub(crate) network_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) aws_service: ::std::option::Option<::std::string::String>,
    pub(crate) permission: ::std::option::Option<crate::types::InterfacePermissionType>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl CreateNetworkInterfacePermissionInputBuilder {
    /// <p>The ID of the network interface.</p>
    /// This field is required.
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The ID of the network interface.</p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_id
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// <p>The Amazon Web Service. Currently not supported.</p>
    pub fn aws_service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Service. Currently not supported.</p>
    pub fn set_aws_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_service = input;
        self
    }
    /// <p>The Amazon Web Service. Currently not supported.</p>
    pub fn get_aws_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_service
    }
    /// <p>The type of permission to grant.</p>
    /// This field is required.
    pub fn permission(mut self, input: crate::types::InterfacePermissionType) -> Self {
        self.permission = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of permission to grant.</p>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::InterfacePermissionType>) -> Self {
        self.permission = input;
        self
    }
    /// <p>The type of permission to grant.</p>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::InterfacePermissionType> {
        &self.permission
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`CreateNetworkInterfacePermissionInput`](crate::operation::create_network_interface_permission::CreateNetworkInterfacePermissionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_network_interface_permission::CreateNetworkInterfacePermissionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_network_interface_permission::CreateNetworkInterfacePermissionInput {
                network_interface_id: self.network_interface_id,
                aws_account_id: self.aws_account_id,
                aws_service: self.aws_service,
                permission: self.permission,
                dry_run: self.dry_run,
            },
        )
    }
}
