// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_verified_access_trust_provider::_create_verified_access_trust_provider_output::CreateVerifiedAccessTrustProviderOutputBuilder;

pub use crate::operation::create_verified_access_trust_provider::_create_verified_access_trust_provider_input::CreateVerifiedAccessTrustProviderInputBuilder;

impl CreateVerifiedAccessTrustProviderInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_verified_access_trust_provider();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateVerifiedAccessTrustProvider`.
///
/// <p>A trust provider is a third-party entity that creates, maintains, and manages identity information for users and devices. When an application request is made, the identity information sent by the trust provider is evaluated by Verified Access before allowing or denying the application request.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateVerifiedAccessTrustProviderFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_verified_access_trust_provider::builders::CreateVerifiedAccessTrustProviderInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderOutput,
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderError,
    > for CreateVerifiedAccessTrustProviderFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderOutput,
            crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateVerifiedAccessTrustProviderFluentBuilder {
    /// Creates a new `CreateVerifiedAccessTrustProvider`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateVerifiedAccessTrustProvider as a reference.
    pub fn as_input(&self) -> &crate::operation::create_verified_access_trust_provider::builders::CreateVerifiedAccessTrustProviderInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProvider::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProvider::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderOutput,
        crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The type of trust provider.</p>
    pub fn trust_provider_type(mut self, input: crate::types::TrustProviderType) -> Self {
        self.inner = self.inner.trust_provider_type(input);
        self
    }
    /// <p>The type of trust provider.</p>
    pub fn set_trust_provider_type(mut self, input: ::std::option::Option<crate::types::TrustProviderType>) -> Self {
        self.inner = self.inner.set_trust_provider_type(input);
        self
    }
    /// <p>The type of trust provider.</p>
    pub fn get_trust_provider_type(&self) -> &::std::option::Option<crate::types::TrustProviderType> {
        self.inner.get_trust_provider_type()
    }
    /// <p>The type of user-based trust provider. This parameter is required when the provider type is <code>user</code>.</p>
    pub fn user_trust_provider_type(mut self, input: crate::types::UserTrustProviderType) -> Self {
        self.inner = self.inner.user_trust_provider_type(input);
        self
    }
    /// <p>The type of user-based trust provider. This parameter is required when the provider type is <code>user</code>.</p>
    pub fn set_user_trust_provider_type(mut self, input: ::std::option::Option<crate::types::UserTrustProviderType>) -> Self {
        self.inner = self.inner.set_user_trust_provider_type(input);
        self
    }
    /// <p>The type of user-based trust provider. This parameter is required when the provider type is <code>user</code>.</p>
    pub fn get_user_trust_provider_type(&self) -> &::std::option::Option<crate::types::UserTrustProviderType> {
        self.inner.get_user_trust_provider_type()
    }
    /// <p>The type of device-based trust provider. This parameter is required when the provider type is <code>device</code>.</p>
    pub fn device_trust_provider_type(mut self, input: crate::types::DeviceTrustProviderType) -> Self {
        self.inner = self.inner.device_trust_provider_type(input);
        self
    }
    /// <p>The type of device-based trust provider. This parameter is required when the provider type is <code>device</code>.</p>
    pub fn set_device_trust_provider_type(mut self, input: ::std::option::Option<crate::types::DeviceTrustProviderType>) -> Self {
        self.inner = self.inner.set_device_trust_provider_type(input);
        self
    }
    /// <p>The type of device-based trust provider. This parameter is required when the provider type is <code>device</code>.</p>
    pub fn get_device_trust_provider_type(&self) -> &::std::option::Option<crate::types::DeviceTrustProviderType> {
        self.inner.get_device_trust_provider_type()
    }
    /// <p>The options for a OpenID Connect-compatible user-identity trust provider. This parameter is required when the provider type is <code>user</code>.</p>
    pub fn oidc_options(mut self, input: crate::types::CreateVerifiedAccessTrustProviderOidcOptions) -> Self {
        self.inner = self.inner.oidc_options(input);
        self
    }
    /// <p>The options for a OpenID Connect-compatible user-identity trust provider. This parameter is required when the provider type is <code>user</code>.</p>
    pub fn set_oidc_options(mut self, input: ::std::option::Option<crate::types::CreateVerifiedAccessTrustProviderOidcOptions>) -> Self {
        self.inner = self.inner.set_oidc_options(input);
        self
    }
    /// <p>The options for a OpenID Connect-compatible user-identity trust provider. This parameter is required when the provider type is <code>user</code>.</p>
    pub fn get_oidc_options(&self) -> &::std::option::Option<crate::types::CreateVerifiedAccessTrustProviderOidcOptions> {
        self.inner.get_oidc_options()
    }
    /// <p>The options for a device-based trust provider. This parameter is required when the provider type is <code>device</code>.</p>
    pub fn device_options(mut self, input: crate::types::CreateVerifiedAccessTrustProviderDeviceOptions) -> Self {
        self.inner = self.inner.device_options(input);
        self
    }
    /// <p>The options for a device-based trust provider. This parameter is required when the provider type is <code>device</code>.</p>
    pub fn set_device_options(mut self, input: ::std::option::Option<crate::types::CreateVerifiedAccessTrustProviderDeviceOptions>) -> Self {
        self.inner = self.inner.set_device_options(input);
        self
    }
    /// <p>The options for a device-based trust provider. This parameter is required when the provider type is <code>device</code>.</p>
    pub fn get_device_options(&self) -> &::std::option::Option<crate::types::CreateVerifiedAccessTrustProviderDeviceOptions> {
        self.inner.get_device_options()
    }
    /// <p>The identifier to be used when working with policy rules.</p>
    pub fn policy_reference_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_reference_name(input.into());
        self
    }
    /// <p>The identifier to be used when working with policy rules.</p>
    pub fn set_policy_reference_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_reference_name(input);
        self
    }
    /// <p>The identifier to be used when working with policy rules.</p>
    pub fn get_policy_reference_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_reference_name()
    }
    /// <p>A description for the Verified Access trust provider.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the Verified Access trust provider.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description for the Verified Access trust provider.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// Appends an item to `TagSpecifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to assign to the Verified Access trust provider.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        self.inner = self.inner.tag_specifications(input);
        self
    }
    /// <p>The tags to assign to the Verified Access trust provider.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.inner = self.inner.set_tag_specifications(input);
        self
    }
    /// <p>The tags to assign to the Verified Access trust provider.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        self.inner.get_tag_specifications()
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p> Options for server side encryption. </p>
    pub fn sse_specification(mut self, input: crate::types::VerifiedAccessSseSpecificationRequest) -> Self {
        self.inner = self.inner.sse_specification(input);
        self
    }
    /// <p> Options for server side encryption. </p>
    pub fn set_sse_specification(mut self, input: ::std::option::Option<crate::types::VerifiedAccessSseSpecificationRequest>) -> Self {
        self.inner = self.inner.set_sse_specification(input);
        self
    }
    /// <p> Options for server side encryption. </p>
    pub fn get_sse_specification(&self) -> &::std::option::Option<crate::types::VerifiedAccessSseSpecificationRequest> {
        self.inner.get_sse_specification()
    }
}
