// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVerifiedAccessTrustProviderInput {
    /// <p>The type of trust provider can be either user or device-based.</p>
    #[doc(hidden)]
    pub trust_provider_type: std::option::Option<crate::types::TrustProviderType>,
    /// <p>The type of user-based trust provider.</p>
    #[doc(hidden)]
    pub user_trust_provider_type: std::option::Option<crate::types::UserTrustProviderType>,
    /// <p>The type of device-based trust provider.</p>
    #[doc(hidden)]
    pub device_trust_provider_type: std::option::Option<crate::types::DeviceTrustProviderType>,
    /// <p>The OpenID Connect details for an <code>oidc</code>-type, user-identity based trust provider.</p>
    #[doc(hidden)]
    pub oidc_options:
        std::option::Option<crate::types::CreateVerifiedAccessTrustProviderOidcOptions>,
    /// <p>The options for device identity based trust providers.</p>
    #[doc(hidden)]
    pub device_options:
        std::option::Option<crate::types::CreateVerifiedAccessTrustProviderDeviceOptions>,
    /// <p>The identifier to be used when working with policy rules.</p>
    #[doc(hidden)]
    pub policy_reference_name: std::option::Option<std::string::String>,
    /// <p>A description for the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The tags to assign to the Amazon Web Services Verified Access trust provider.</p>
    #[doc(hidden)]
    pub tag_specifications: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
}
impl CreateVerifiedAccessTrustProviderInput {
    /// <p>The type of trust provider can be either user or device-based.</p>
    pub fn trust_provider_type(&self) -> std::option::Option<&crate::types::TrustProviderType> {
        self.trust_provider_type.as_ref()
    }
    /// <p>The type of user-based trust provider.</p>
    pub fn user_trust_provider_type(
        &self,
    ) -> std::option::Option<&crate::types::UserTrustProviderType> {
        self.user_trust_provider_type.as_ref()
    }
    /// <p>The type of device-based trust provider.</p>
    pub fn device_trust_provider_type(
        &self,
    ) -> std::option::Option<&crate::types::DeviceTrustProviderType> {
        self.device_trust_provider_type.as_ref()
    }
    /// <p>The OpenID Connect details for an <code>oidc</code>-type, user-identity based trust provider.</p>
    pub fn oidc_options(
        &self,
    ) -> std::option::Option<&crate::types::CreateVerifiedAccessTrustProviderOidcOptions> {
        self.oidc_options.as_ref()
    }
    /// <p>The options for device identity based trust providers.</p>
    pub fn device_options(
        &self,
    ) -> std::option::Option<&crate::types::CreateVerifiedAccessTrustProviderDeviceOptions> {
        self.device_options.as_ref()
    }
    /// <p>The identifier to be used when working with policy rules.</p>
    pub fn policy_reference_name(&self) -> std::option::Option<&str> {
        self.policy_reference_name.as_deref()
    }
    /// <p>A description for the Amazon Web Services Verified Access trust provider.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags to assign to the Amazon Web Services Verified Access trust provider.</p>
    pub fn tag_specifications(&self) -> std::option::Option<&[crate::types::TagSpecification]> {
        self.tag_specifications.as_deref()
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
}
impl CreateVerifiedAccessTrustProviderInput {
    /// Creates a new builder-style object to manufacture [`CreateVerifiedAccessTrustProviderInput`](crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderInput).
    pub fn builder() -> crate::operation::create_verified_access_trust_provider::builders::CreateVerifiedAccessTrustProviderInputBuilder{
        crate::operation::create_verified_access_trust_provider::builders::CreateVerifiedAccessTrustProviderInputBuilder::default()
    }
}

/// A builder for [`CreateVerifiedAccessTrustProviderInput`](crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateVerifiedAccessTrustProviderInputBuilder {
    pub(crate) trust_provider_type: std::option::Option<crate::types::TrustProviderType>,
    pub(crate) user_trust_provider_type: std::option::Option<crate::types::UserTrustProviderType>,
    pub(crate) device_trust_provider_type:
        std::option::Option<crate::types::DeviceTrustProviderType>,
    pub(crate) oidc_options:
        std::option::Option<crate::types::CreateVerifiedAccessTrustProviderOidcOptions>,
    pub(crate) device_options:
        std::option::Option<crate::types::CreateVerifiedAccessTrustProviderDeviceOptions>,
    pub(crate) policy_reference_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tag_specifications:
        std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) dry_run: std::option::Option<bool>,
}
impl CreateVerifiedAccessTrustProviderInputBuilder {
    /// <p>The type of trust provider can be either user or device-based.</p>
    pub fn trust_provider_type(mut self, input: crate::types::TrustProviderType) -> Self {
        self.trust_provider_type = Some(input);
        self
    }
    /// <p>The type of trust provider can be either user or device-based.</p>
    pub fn set_trust_provider_type(
        mut self,
        input: std::option::Option<crate::types::TrustProviderType>,
    ) -> Self {
        self.trust_provider_type = input;
        self
    }
    /// <p>The type of user-based trust provider.</p>
    pub fn user_trust_provider_type(mut self, input: crate::types::UserTrustProviderType) -> Self {
        self.user_trust_provider_type = Some(input);
        self
    }
    /// <p>The type of user-based trust provider.</p>
    pub fn set_user_trust_provider_type(
        mut self,
        input: std::option::Option<crate::types::UserTrustProviderType>,
    ) -> Self {
        self.user_trust_provider_type = input;
        self
    }
    /// <p>The type of device-based trust provider.</p>
    pub fn device_trust_provider_type(
        mut self,
        input: crate::types::DeviceTrustProviderType,
    ) -> Self {
        self.device_trust_provider_type = Some(input);
        self
    }
    /// <p>The type of device-based trust provider.</p>
    pub fn set_device_trust_provider_type(
        mut self,
        input: std::option::Option<crate::types::DeviceTrustProviderType>,
    ) -> Self {
        self.device_trust_provider_type = input;
        self
    }
    /// <p>The OpenID Connect details for an <code>oidc</code>-type, user-identity based trust provider.</p>
    pub fn oidc_options(
        mut self,
        input: crate::types::CreateVerifiedAccessTrustProviderOidcOptions,
    ) -> Self {
        self.oidc_options = Some(input);
        self
    }
    /// <p>The OpenID Connect details for an <code>oidc</code>-type, user-identity based trust provider.</p>
    pub fn set_oidc_options(
        mut self,
        input: std::option::Option<crate::types::CreateVerifiedAccessTrustProviderOidcOptions>,
    ) -> Self {
        self.oidc_options = input;
        self
    }
    /// <p>The options for device identity based trust providers.</p>
    pub fn device_options(
        mut self,
        input: crate::types::CreateVerifiedAccessTrustProviderDeviceOptions,
    ) -> Self {
        self.device_options = Some(input);
        self
    }
    /// <p>The options for device identity based trust providers.</p>
    pub fn set_device_options(
        mut self,
        input: std::option::Option<crate::types::CreateVerifiedAccessTrustProviderDeviceOptions>,
    ) -> Self {
        self.device_options = input;
        self
    }
    /// <p>The identifier to be used when working with policy rules.</p>
    pub fn policy_reference_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_reference_name = Some(input.into());
        self
    }
    /// <p>The identifier to be used when working with policy rules.</p>
    pub fn set_policy_reference_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.policy_reference_name = input;
        self
    }
    /// <p>A description for the Amazon Web Services Verified Access trust provider.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the Amazon Web Services Verified Access trust provider.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to assign to the Amazon Web Services Verified Access trust provider.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = Some(v);
        self
    }
    /// <p>The tags to assign to the Amazon Web Services Verified Access trust provider.</p>
    pub fn set_tag_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    ) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateVerifiedAccessTrustProviderInput`](crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderInput).
    pub fn build(self) -> Result<crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_verified_access_trust_provider::CreateVerifiedAccessTrustProviderInput {
                trust_provider_type: self.trust_provider_type
                ,
                user_trust_provider_type: self.user_trust_provider_type
                ,
                device_trust_provider_type: self.device_trust_provider_type
                ,
                oidc_options: self.oidc_options
                ,
                device_options: self.device_options
                ,
                policy_reference_name: self.policy_reference_name
                ,
                description: self.description
                ,
                tag_specifications: self.tag_specifications
                ,
                client_token: self.client_token
                ,
                dry_run: self.dry_run
                ,
            }
        )
    }
}
