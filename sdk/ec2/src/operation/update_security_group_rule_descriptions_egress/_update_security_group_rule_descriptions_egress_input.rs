// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSecurityGroupRuleDescriptionsEgressInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>[Default VPC] The name of the security group. You must specify either the security group ID or the security group name.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>The IP permissions for the security group rule. You must specify either the IP permissions or the description.</p>
    pub ip_permissions: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    /// <p>The description for the egress security group rules. You must specify either the description or the IP permissions.</p>
    pub security_group_rule_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::SecurityGroupRuleDescription>>,
}
impl UpdateSecurityGroupRuleDescriptionsEgressInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>[Default VPC] The name of the security group. You must specify either the security group ID or the security group name.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The IP permissions for the security group rule. You must specify either the IP permissions or the description.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ip_permissions.is_none()`.
    pub fn ip_permissions(&self) -> &[crate::types::IpPermission] {
        self.ip_permissions.as_deref().unwrap_or_default()
    }
    /// <p>The description for the egress security group rules. You must specify either the description or the IP permissions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_rule_descriptions.is_none()`.
    pub fn security_group_rule_descriptions(&self) -> &[crate::types::SecurityGroupRuleDescription] {
        self.security_group_rule_descriptions.as_deref().unwrap_or_default()
    }
}
impl UpdateSecurityGroupRuleDescriptionsEgressInput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityGroupRuleDescriptionsEgressInput`](crate::operation::update_security_group_rule_descriptions_egress::UpdateSecurityGroupRuleDescriptionsEgressInput).
    pub fn builder(
    ) -> crate::operation::update_security_group_rule_descriptions_egress::builders::UpdateSecurityGroupRuleDescriptionsEgressInputBuilder {
        crate::operation::update_security_group_rule_descriptions_egress::builders::UpdateSecurityGroupRuleDescriptionsEgressInputBuilder::default()
    }
}

/// A builder for [`UpdateSecurityGroupRuleDescriptionsEgressInput`](crate::operation::update_security_group_rule_descriptions_egress::UpdateSecurityGroupRuleDescriptionsEgressInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSecurityGroupRuleDescriptionsEgressInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ip_permissions: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    pub(crate) security_group_rule_descriptions: ::std::option::Option<::std::vec::Vec<crate::types::SecurityGroupRuleDescription>>,
}
impl UpdateSecurityGroupRuleDescriptionsEgressInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// <p>[Default VPC] The name of the security group. You must specify either the security group ID or the security group name.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>[Default VPC] The name of the security group. You must specify either the security group ID or the security group name.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>[Default VPC] The name of the security group. You must specify either the security group ID or the security group name.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// Appends an item to `ip_permissions`.
    ///
    /// To override the contents of this collection use [`set_ip_permissions`](Self::set_ip_permissions).
    ///
    /// <p>The IP permissions for the security group rule. You must specify either the IP permissions or the description.</p>
    pub fn ip_permissions(mut self, input: crate::types::IpPermission) -> Self {
        let mut v = self.ip_permissions.unwrap_or_default();
        v.push(input);
        self.ip_permissions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP permissions for the security group rule. You must specify either the IP permissions or the description.</p>
    pub fn set_ip_permissions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>) -> Self {
        self.ip_permissions = input;
        self
    }
    /// <p>The IP permissions for the security group rule. You must specify either the IP permissions or the description.</p>
    pub fn get_ip_permissions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpPermission>> {
        &self.ip_permissions
    }
    /// Appends an item to `security_group_rule_descriptions`.
    ///
    /// To override the contents of this collection use [`set_security_group_rule_descriptions`](Self::set_security_group_rule_descriptions).
    ///
    /// <p>The description for the egress security group rules. You must specify either the description or the IP permissions.</p>
    pub fn security_group_rule_descriptions(mut self, input: crate::types::SecurityGroupRuleDescription) -> Self {
        let mut v = self.security_group_rule_descriptions.unwrap_or_default();
        v.push(input);
        self.security_group_rule_descriptions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The description for the egress security group rules. You must specify either the description or the IP permissions.</p>
    pub fn set_security_group_rule_descriptions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::SecurityGroupRuleDescription>>,
    ) -> Self {
        self.security_group_rule_descriptions = input;
        self
    }
    /// <p>The description for the egress security group rules. You must specify either the description or the IP permissions.</p>
    pub fn get_security_group_rule_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SecurityGroupRuleDescription>> {
        &self.security_group_rule_descriptions
    }
    /// Consumes the builder and constructs a [`UpdateSecurityGroupRuleDescriptionsEgressInput`](crate::operation::update_security_group_rule_descriptions_egress::UpdateSecurityGroupRuleDescriptionsEgressInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_security_group_rule_descriptions_egress::UpdateSecurityGroupRuleDescriptionsEgressInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_security_group_rule_descriptions_egress::UpdateSecurityGroupRuleDescriptionsEgressInput {
                dry_run: self.dry_run,
                group_id: self.group_id,
                group_name: self.group_name,
                ip_permissions: self.ip_permissions,
                security_group_rule_descriptions: self.security_group_rule_descriptions,
            },
        )
    }
}
