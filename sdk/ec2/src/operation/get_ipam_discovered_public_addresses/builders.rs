// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_ipam_discovered_public_addresses::_get_ipam_discovered_public_addresses_output::GetIpamDiscoveredPublicAddressesOutputBuilder;

pub use crate::operation::get_ipam_discovered_public_addresses::_get_ipam_discovered_public_addresses_input::GetIpamDiscoveredPublicAddressesInputBuilder;

impl crate::operation::get_ipam_discovered_public_addresses::builders::GetIpamDiscoveredPublicAddressesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_ipam_discovered_public_addresses();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetIpamDiscoveredPublicAddresses`.
///
/// <p>Gets the public IP addresses that have been discovered by IPAM.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetIpamDiscoveredPublicAddressesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_ipam_discovered_public_addresses::builders::GetIpamDiscoveredPublicAddressesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesOutput,
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesError,
    > for GetIpamDiscoveredPublicAddressesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesOutput,
            crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetIpamDiscoveredPublicAddressesFluentBuilder {
    /// Creates a new `GetIpamDiscoveredPublicAddresses`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetIpamDiscoveredPublicAddresses as a reference.
    pub fn as_input(&self) -> &crate::operation::get_ipam_discovered_public_addresses::builders::GetIpamDiscoveredPublicAddressesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddresses::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddresses::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesOutput,
        crate::operation::get_ipam_discovered_public_addresses::GetIpamDiscoveredPublicAddressesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>An IPAM resource discovery ID.</p>
    pub fn ipam_resource_discovery_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_resource_discovery_id(input.into());
        self
    }
    /// <p>An IPAM resource discovery ID.</p>
    pub fn set_ipam_resource_discovery_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_resource_discovery_id(input);
        self
    }
    /// <p>An IPAM resource discovery ID.</p>
    pub fn get_ipam_resource_discovery_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_resource_discovery_id()
    }
    /// <p>The Amazon Web Services Region for the IP address.</p>
    pub fn address_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.address_region(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for the IP address.</p>
    pub fn set_address_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_address_region(input);
        self
    }
    /// <p>The Amazon Web Services Region for the IP address.</p>
    pub fn get_address_region(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_address_region()
    }
    ///
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Filters.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>Filters.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>Filters.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of IPAM discovered public addresses to return in one page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of IPAM discovered public addresses to return in one page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of IPAM discovered public addresses to return in one page of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
