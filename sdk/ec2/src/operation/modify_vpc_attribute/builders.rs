// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_vpc_attribute::_modify_vpc_attribute_output::ModifyVpcAttributeOutputBuilder;

pub use crate::operation::modify_vpc_attribute::_modify_vpc_attribute_input::ModifyVpcAttributeInputBuilder;

/// Fluent builder constructing a request to `ModifyVpcAttribute`.
///
/// <p>Modifies the specified attribute of the specified VPC.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyVpcAttributeFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_vpc_attribute::builders::ModifyVpcAttributeInputBuilder,
}
impl ModifyVpcAttributeFluentBuilder {
    /// Creates a new `ModifyVpcAttribute`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_vpc_attribute::ModifyVpcAttribute,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_vpc_attribute::ModifyVpcAttributeError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_vpc_attribute::ModifyVpcAttributeOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_vpc_attribute::ModifyVpcAttributeError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
    /// <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>
    pub fn enable_dns_hostnames(mut self, input: crate::types::AttributeBooleanValue) -> Self {
        self.inner = self.inner.enable_dns_hostnames(input);
        self
    }
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
    /// <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>
    pub fn set_enable_dns_hostnames(
        mut self,
        input: std::option::Option<crate::types::AttributeBooleanValue>,
    ) -> Self {
        self.inner = self.inner.set_enable_dns_hostnames(input);
        self
    }
    /// <p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p>
    /// <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>
    pub fn enable_dns_support(mut self, input: crate::types::AttributeBooleanValue) -> Self {
        self.inner = self.inner.enable_dns_support(input);
        self
    }
    /// <p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p>
    /// <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>
    pub fn set_enable_dns_support(
        mut self,
        input: std::option::Option<crate::types::AttributeBooleanValue>,
    ) -> Self {
        self.inner = self.inner.set_enable_dns_support(input);
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_id(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_id(input);
        self
    }
    /// <p>Indicates whether Network Address Usage metrics are enabled for your VPC.</p>
    pub fn enable_network_address_usage_metrics(
        mut self,
        input: crate::types::AttributeBooleanValue,
    ) -> Self {
        self.inner = self.inner.enable_network_address_usage_metrics(input);
        self
    }
    /// <p>Indicates whether Network Address Usage metrics are enabled for your VPC.</p>
    pub fn set_enable_network_address_usage_metrics(
        mut self,
        input: std::option::Option<crate::types::AttributeBooleanValue>,
    ) -> Self {
        self.inner = self.inner.set_enable_network_address_usage_metrics(input);
        self
    }
}
