// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyIpamScopeInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>The ID of the scope you want to modify.</p>
    #[doc(hidden)]
    pub ipam_scope_id: std::option::Option<std::string::String>,
    /// <p>The description of the scope you want to modify.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl ModifyIpamScopeInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the scope you want to modify.</p>
    pub fn ipam_scope_id(&self) -> std::option::Option<&str> {
        self.ipam_scope_id.as_deref()
    }
    /// <p>The description of the scope you want to modify.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ModifyIpamScopeInput {
    /// Creates a new builder-style object to manufacture [`ModifyIpamScopeInput`](crate::operation::modify_ipam_scope::ModifyIpamScopeInput).
    pub fn builder() -> crate::operation::modify_ipam_scope::builders::ModifyIpamScopeInputBuilder {
        crate::operation::modify_ipam_scope::builders::ModifyIpamScopeInputBuilder::default()
    }
}

/// A builder for [`ModifyIpamScopeInput`](crate::operation::modify_ipam_scope::ModifyIpamScopeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyIpamScopeInputBuilder {
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) ipam_scope_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl ModifyIpamScopeInputBuilder {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>The ID of the scope you want to modify.</p>
    pub fn ipam_scope_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ipam_scope_id = Some(input.into());
        self
    }
    /// <p>The ID of the scope you want to modify.</p>
    pub fn set_ipam_scope_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ipam_scope_id = input;
        self
    }
    /// <p>The description of the scope you want to modify.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the scope you want to modify.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifyIpamScopeInput`](crate::operation::modify_ipam_scope::ModifyIpamScopeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_ipam_scope::ModifyIpamScopeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::modify_ipam_scope::ModifyIpamScopeInput {
            dry_run: self.dry_run,
            ipam_scope_id: self.ipam_scope_id,
            description: self.description,
        })
    }
}
