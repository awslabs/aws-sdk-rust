// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateManagedPrefixListInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>A name for the prefix list.</p>
    /// <p>Constraints: Up to 255 characters in length. The name cannot start with <code>com.amazonaws</code>.</p>
    #[doc(hidden)]
    pub prefix_list_name: std::option::Option<std::string::String>,
    /// <p>One or more entries for the prefix list.</p>
    #[doc(hidden)]
    pub entries: std::option::Option<std::vec::Vec<crate::types::AddPrefixListEntry>>,
    /// <p>The maximum number of entries for the prefix list.</p>
    #[doc(hidden)]
    pub max_entries: std::option::Option<i32>,
    /// <p>The tags to apply to the prefix list during creation.</p>
    #[doc(hidden)]
    pub tag_specifications: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>The IP address type.</p>
    /// <p>Valid Values: <code>IPv4</code> | <code>IPv6</code> </p>
    #[doc(hidden)]
    pub address_family: std::option::Option<std::string::String>,
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    /// <p>Constraints: Up to 255 UTF-8 characters in length.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateManagedPrefixListInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>A name for the prefix list.</p>
    /// <p>Constraints: Up to 255 characters in length. The name cannot start with <code>com.amazonaws</code>.</p>
    pub fn prefix_list_name(&self) -> std::option::Option<&str> {
        self.prefix_list_name.as_deref()
    }
    /// <p>One or more entries for the prefix list.</p>
    pub fn entries(&self) -> std::option::Option<&[crate::types::AddPrefixListEntry]> {
        self.entries.as_deref()
    }
    /// <p>The maximum number of entries for the prefix list.</p>
    pub fn max_entries(&self) -> std::option::Option<i32> {
        self.max_entries
    }
    /// <p>The tags to apply to the prefix list during creation.</p>
    pub fn tag_specifications(&self) -> std::option::Option<&[crate::types::TagSpecification]> {
        self.tag_specifications.as_deref()
    }
    /// <p>The IP address type.</p>
    /// <p>Valid Values: <code>IPv4</code> | <code>IPv6</code> </p>
    pub fn address_family(&self) -> std::option::Option<&str> {
        self.address_family.as_deref()
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    /// <p>Constraints: Up to 255 UTF-8 characters in length.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateManagedPrefixListInput {
    /// Creates a new builder-style object to manufacture [`CreateManagedPrefixListInput`](crate::operation::create_managed_prefix_list::CreateManagedPrefixListInput).
    pub fn builder(
    ) -> crate::operation::create_managed_prefix_list::builders::CreateManagedPrefixListInputBuilder
    {
        crate::operation::create_managed_prefix_list::builders::CreateManagedPrefixListInputBuilder::default()
    }
}

/// A builder for [`CreateManagedPrefixListInput`](crate::operation::create_managed_prefix_list::CreateManagedPrefixListInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateManagedPrefixListInputBuilder {
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) prefix_list_name: std::option::Option<std::string::String>,
    pub(crate) entries: std::option::Option<std::vec::Vec<crate::types::AddPrefixListEntry>>,
    pub(crate) max_entries: std::option::Option<i32>,
    pub(crate) tag_specifications:
        std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) address_family: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateManagedPrefixListInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A name for the prefix list.</p>
    /// <p>Constraints: Up to 255 characters in length. The name cannot start with <code>com.amazonaws</code>.</p>
    pub fn prefix_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix_list_name = Some(input.into());
        self
    }
    /// <p>A name for the prefix list.</p>
    /// <p>Constraints: Up to 255 characters in length. The name cannot start with <code>com.amazonaws</code>.</p>
    pub fn set_prefix_list_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix_list_name = input;
        self
    }
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>One or more entries for the prefix list.</p>
    pub fn entries(mut self, input: crate::types::AddPrefixListEntry) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = Some(v);
        self
    }
    /// <p>One or more entries for the prefix list.</p>
    pub fn set_entries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AddPrefixListEntry>>,
    ) -> Self {
        self.entries = input;
        self
    }
    /// <p>The maximum number of entries for the prefix list.</p>
    pub fn max_entries(mut self, input: i32) -> Self {
        self.max_entries = Some(input);
        self
    }
    /// <p>The maximum number of entries for the prefix list.</p>
    pub fn set_max_entries(mut self, input: std::option::Option<i32>) -> Self {
        self.max_entries = input;
        self
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the prefix list during creation.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = Some(v);
        self
    }
    /// <p>The tags to apply to the prefix list during creation.</p>
    pub fn set_tag_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagSpecification>>,
    ) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The IP address type.</p>
    /// <p>Valid Values: <code>IPv4</code> | <code>IPv6</code> </p>
    pub fn address_family(mut self, input: impl Into<std::string::String>) -> Self {
        self.address_family = Some(input.into());
        self
    }
    /// <p>The IP address type.</p>
    /// <p>Valid Values: <code>IPv4</code> | <code>IPv6</code> </p>
    pub fn set_address_family(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address_family = input;
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    /// <p>Constraints: Up to 255 UTF-8 characters in length.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    /// <p>Constraints: Up to 255 UTF-8 characters in length.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateManagedPrefixListInput`](crate::operation::create_managed_prefix_list::CreateManagedPrefixListInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_managed_prefix_list::CreateManagedPrefixListInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_managed_prefix_list::CreateManagedPrefixListInput {
                dry_run: self.dry_run,
                prefix_list_name: self.prefix_list_name,
                entries: self.entries,
                max_entries: self.max_entries,
                tag_specifications: self.tag_specifications,
                address_family: self.address_family,
                client_token: self.client_token,
            },
        )
    }
}
