// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCapacityManagerAttributesOutput {
    /// <p>The current status of Capacity Manager.</p>
    pub capacity_manager_status: ::std::option::Option<crate::types::CapacityManagerStatus>,
    /// <p>Indicates whether Organizations access is enabled for cross-account data aggregation.</p>
    pub organizations_access: ::std::option::Option<bool>,
    /// <p>The number of active data export configurations for this account. This count includes all data exports regardless of their current delivery status.</p>
    pub data_export_count: ::std::option::Option<i32>,
    /// <p>The current data ingestion status. Initial ingestion may take several hours after enabling Capacity Manager.</p>
    pub ingestion_status: ::std::option::Option<crate::types::IngestionStatus>,
    /// <p>A descriptive message providing additional details about the current ingestion status. This may include error information if ingestion has failed or progress details during initial setup.</p>
    pub ingestion_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the earliest data point available in Capacity Manager, in milliseconds since epoch. This indicates how far back historical data is available for queries.</p>
    pub earliest_datapoint_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of the most recent data point ingested by Capacity Manager, in milliseconds since epoch. This indicates how current your capacity data is.</p>
    pub latest_datapoint_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCapacityManagerAttributesOutput {
    /// <p>The current status of Capacity Manager.</p>
    pub fn capacity_manager_status(&self) -> ::std::option::Option<&crate::types::CapacityManagerStatus> {
        self.capacity_manager_status.as_ref()
    }
    /// <p>Indicates whether Organizations access is enabled for cross-account data aggregation.</p>
    pub fn organizations_access(&self) -> ::std::option::Option<bool> {
        self.organizations_access
    }
    /// <p>The number of active data export configurations for this account. This count includes all data exports regardless of their current delivery status.</p>
    pub fn data_export_count(&self) -> ::std::option::Option<i32> {
        self.data_export_count
    }
    /// <p>The current data ingestion status. Initial ingestion may take several hours after enabling Capacity Manager.</p>
    pub fn ingestion_status(&self) -> ::std::option::Option<&crate::types::IngestionStatus> {
        self.ingestion_status.as_ref()
    }
    /// <p>A descriptive message providing additional details about the current ingestion status. This may include error information if ingestion has failed or progress details during initial setup.</p>
    pub fn ingestion_status_message(&self) -> ::std::option::Option<&str> {
        self.ingestion_status_message.as_deref()
    }
    /// <p>The timestamp of the earliest data point available in Capacity Manager, in milliseconds since epoch. This indicates how far back historical data is available for queries.</p>
    pub fn earliest_datapoint_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.earliest_datapoint_timestamp.as_ref()
    }
    /// <p>The timestamp of the most recent data point ingested by Capacity Manager, in milliseconds since epoch. This indicates how current your capacity data is.</p>
    pub fn latest_datapoint_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.latest_datapoint_timestamp.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetCapacityManagerAttributesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCapacityManagerAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetCapacityManagerAttributesOutput`](crate::operation::get_capacity_manager_attributes::GetCapacityManagerAttributesOutput).
    pub fn builder() -> crate::operation::get_capacity_manager_attributes::builders::GetCapacityManagerAttributesOutputBuilder {
        crate::operation::get_capacity_manager_attributes::builders::GetCapacityManagerAttributesOutputBuilder::default()
    }
}

/// A builder for [`GetCapacityManagerAttributesOutput`](crate::operation::get_capacity_manager_attributes::GetCapacityManagerAttributesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCapacityManagerAttributesOutputBuilder {
    pub(crate) capacity_manager_status: ::std::option::Option<crate::types::CapacityManagerStatus>,
    pub(crate) organizations_access: ::std::option::Option<bool>,
    pub(crate) data_export_count: ::std::option::Option<i32>,
    pub(crate) ingestion_status: ::std::option::Option<crate::types::IngestionStatus>,
    pub(crate) ingestion_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) earliest_datapoint_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) latest_datapoint_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCapacityManagerAttributesOutputBuilder {
    /// <p>The current status of Capacity Manager.</p>
    pub fn capacity_manager_status(mut self, input: crate::types::CapacityManagerStatus) -> Self {
        self.capacity_manager_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of Capacity Manager.</p>
    pub fn set_capacity_manager_status(mut self, input: ::std::option::Option<crate::types::CapacityManagerStatus>) -> Self {
        self.capacity_manager_status = input;
        self
    }
    /// <p>The current status of Capacity Manager.</p>
    pub fn get_capacity_manager_status(&self) -> &::std::option::Option<crate::types::CapacityManagerStatus> {
        &self.capacity_manager_status
    }
    /// <p>Indicates whether Organizations access is enabled for cross-account data aggregation.</p>
    pub fn organizations_access(mut self, input: bool) -> Self {
        self.organizations_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Organizations access is enabled for cross-account data aggregation.</p>
    pub fn set_organizations_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.organizations_access = input;
        self
    }
    /// <p>Indicates whether Organizations access is enabled for cross-account data aggregation.</p>
    pub fn get_organizations_access(&self) -> &::std::option::Option<bool> {
        &self.organizations_access
    }
    /// <p>The number of active data export configurations for this account. This count includes all data exports regardless of their current delivery status.</p>
    pub fn data_export_count(mut self, input: i32) -> Self {
        self.data_export_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of active data export configurations for this account. This count includes all data exports regardless of their current delivery status.</p>
    pub fn set_data_export_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.data_export_count = input;
        self
    }
    /// <p>The number of active data export configurations for this account. This count includes all data exports regardless of their current delivery status.</p>
    pub fn get_data_export_count(&self) -> &::std::option::Option<i32> {
        &self.data_export_count
    }
    /// <p>The current data ingestion status. Initial ingestion may take several hours after enabling Capacity Manager.</p>
    pub fn ingestion_status(mut self, input: crate::types::IngestionStatus) -> Self {
        self.ingestion_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current data ingestion status. Initial ingestion may take several hours after enabling Capacity Manager.</p>
    pub fn set_ingestion_status(mut self, input: ::std::option::Option<crate::types::IngestionStatus>) -> Self {
        self.ingestion_status = input;
        self
    }
    /// <p>The current data ingestion status. Initial ingestion may take several hours after enabling Capacity Manager.</p>
    pub fn get_ingestion_status(&self) -> &::std::option::Option<crate::types::IngestionStatus> {
        &self.ingestion_status
    }
    /// <p>A descriptive message providing additional details about the current ingestion status. This may include error information if ingestion has failed or progress details during initial setup.</p>
    pub fn ingestion_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingestion_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive message providing additional details about the current ingestion status. This may include error information if ingestion has failed or progress details during initial setup.</p>
    pub fn set_ingestion_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingestion_status_message = input;
        self
    }
    /// <p>A descriptive message providing additional details about the current ingestion status. This may include error information if ingestion has failed or progress details during initial setup.</p>
    pub fn get_ingestion_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingestion_status_message
    }
    /// <p>The timestamp of the earliest data point available in Capacity Manager, in milliseconds since epoch. This indicates how far back historical data is available for queries.</p>
    pub fn earliest_datapoint_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.earliest_datapoint_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the earliest data point available in Capacity Manager, in milliseconds since epoch. This indicates how far back historical data is available for queries.</p>
    pub fn set_earliest_datapoint_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.earliest_datapoint_timestamp = input;
        self
    }
    /// <p>The timestamp of the earliest data point available in Capacity Manager, in milliseconds since epoch. This indicates how far back historical data is available for queries.</p>
    pub fn get_earliest_datapoint_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.earliest_datapoint_timestamp
    }
    /// <p>The timestamp of the most recent data point ingested by Capacity Manager, in milliseconds since epoch. This indicates how current your capacity data is.</p>
    pub fn latest_datapoint_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_datapoint_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the most recent data point ingested by Capacity Manager, in milliseconds since epoch. This indicates how current your capacity data is.</p>
    pub fn set_latest_datapoint_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_datapoint_timestamp = input;
        self
    }
    /// <p>The timestamp of the most recent data point ingested by Capacity Manager, in milliseconds since epoch. This indicates how current your capacity data is.</p>
    pub fn get_latest_datapoint_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_datapoint_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCapacityManagerAttributesOutput`](crate::operation::get_capacity_manager_attributes::GetCapacityManagerAttributesOutput).
    pub fn build(self) -> crate::operation::get_capacity_manager_attributes::GetCapacityManagerAttributesOutput {
        crate::operation::get_capacity_manager_attributes::GetCapacityManagerAttributesOutput {
            capacity_manager_status: self.capacity_manager_status,
            organizations_access: self.organizations_access,
            data_export_count: self.data_export_count,
            ingestion_status: self.ingestion_status,
            ingestion_status_message: self.ingestion_status_message,
            earliest_datapoint_timestamp: self.earliest_datapoint_timestamp,
            latest_datapoint_timestamp: self.latest_datapoint_timestamp,
            _request_id: self._request_id,
        }
    }
}
