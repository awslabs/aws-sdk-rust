// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CopyFpgaImageInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the source AFI.</p>
    pub source_fpga_image_id: ::std::option::Option<::std::string::String>,
    /// <p>The description for the new AFI.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name for the new AFI. The default is the name of the source AFI.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Region that contains the source AFI.</p>
    pub source_region: ::std::option::Option<::std::string::String>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CopyFpgaImageInput {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the source AFI.</p>
    pub fn source_fpga_image_id(&self) -> ::std::option::Option<&str> {
        self.source_fpga_image_id.as_deref()
    }
    /// <p>The description for the new AFI.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name for the new AFI. The default is the name of the source AFI.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Region that contains the source AFI.</p>
    pub fn source_region(&self) -> ::std::option::Option<&str> {
        self.source_region.as_deref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CopyFpgaImageInput {
    /// Creates a new builder-style object to manufacture [`CopyFpgaImageInput`](crate::operation::copy_fpga_image::CopyFpgaImageInput).
    pub fn builder() -> crate::operation::copy_fpga_image::builders::CopyFpgaImageInputBuilder {
        crate::operation::copy_fpga_image::builders::CopyFpgaImageInputBuilder::default()
    }
}

/// A builder for [`CopyFpgaImageInput`](crate::operation::copy_fpga_image::CopyFpgaImageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CopyFpgaImageInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) source_fpga_image_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source_region: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CopyFpgaImageInputBuilder {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the source AFI.</p>
    /// This field is required.
    pub fn source_fpga_image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_fpga_image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the source AFI.</p>
    pub fn set_source_fpga_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_fpga_image_id = input;
        self
    }
    /// <p>The ID of the source AFI.</p>
    pub fn get_source_fpga_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_fpga_image_id
    }
    /// <p>The description for the new AFI.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the new AFI.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the new AFI.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name for the new AFI. The default is the name of the source AFI.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the new AFI. The default is the name of the source AFI.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the new AFI. The default is the name of the source AFI.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Region that contains the source AFI.</p>
    /// This field is required.
    pub fn source_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region that contains the source AFI.</p>
    pub fn set_source_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_region = input;
        self
    }
    /// <p>The Region that contains the source AFI.</p>
    pub fn get_source_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_region
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CopyFpgaImageInput`](crate::operation::copy_fpga_image::CopyFpgaImageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::copy_fpga_image::CopyFpgaImageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::copy_fpga_image::CopyFpgaImageInput {
            dry_run: self.dry_run,
            source_fpga_image_id: self.source_fpga_image_id,
            description: self.description,
            name: self.name,
            source_region: self.source_region,
            client_token: self.client_token,
        })
    }
}
