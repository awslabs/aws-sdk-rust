// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_fpga_image_attribute::_modify_fpga_image_attribute_output::ModifyFpgaImageAttributeOutputBuilder;

pub use crate::operation::modify_fpga_image_attribute::_modify_fpga_image_attribute_input::ModifyFpgaImageAttributeInputBuilder;

/// Fluent builder constructing a request to `ModifyFpgaImageAttribute`.
///
/// <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyFpgaImageAttributeFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::modify_fpga_image_attribute::builders::ModifyFpgaImageAttributeInputBuilder
            }
impl ModifyFpgaImageAttributeFluentBuilder {
    /// Creates a new `ModifyFpgaImageAttribute`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttribute,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>The ID of the AFI.</p>
    pub fn fpga_image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fpga_image_id(input.into());
        self
    }
    /// <p>The ID of the AFI.</p>
    pub fn set_fpga_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_fpga_image_id(input);
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn attribute(mut self, input: crate::types::FpgaImageAttributeName) -> Self {
        self.inner = self.inner.attribute(input);
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn set_attribute(
        mut self,
        input: std::option::Option<crate::types::FpgaImageAttributeName>,
    ) -> Self {
        self.inner = self.inner.set_attribute(input);
        self
    }
    /// <p>The operation type.</p>
    pub fn operation_type(mut self, input: crate::types::OperationType) -> Self {
        self.inner = self.inner.operation_type(input);
        self
    }
    /// <p>The operation type.</p>
    pub fn set_operation_type(
        mut self,
        input: std::option::Option<crate::types::OperationType>,
    ) -> Self {
        self.inner = self.inner.set_operation_type(input);
        self
    }
    /// Appends an item to `UserIds`.
    ///
    /// To override the contents of this collection use [`set_user_ids`](Self::set_user_ids).
    ///
    /// <p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn user_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_ids(input.into());
        self
    }
    /// <p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn set_user_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_user_ids(input);
        self
    }
    /// Appends an item to `UserGroups`.
    ///
    /// To override the contents of this collection use [`set_user_groups`](Self::set_user_groups).
    ///
    /// <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn user_groups(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_groups(input.into());
        self
    }
    /// <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn set_user_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_user_groups(input);
        self
    }
    /// Appends an item to `ProductCodes`.
    ///
    /// To override the contents of this collection use [`set_product_codes`](Self::set_product_codes).
    ///
    /// <p>The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    pub fn product_codes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.product_codes(input.into());
        self
    }
    /// <p>The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    pub fn set_product_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_product_codes(input);
        self
    }
    /// <p>The load permission for the AFI.</p>
    pub fn load_permission(mut self, input: crate::types::LoadPermissionModifications) -> Self {
        self.inner = self.inner.load_permission(input);
        self
    }
    /// <p>The load permission for the AFI.</p>
    pub fn set_load_permission(
        mut self,
        input: std::option::Option<crate::types::LoadPermissionModifications>,
    ) -> Self {
        self.inner = self.inner.set_load_permission(input);
        self
    }
    /// <p>A description for the AFI.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the AFI.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A name for the AFI.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the AFI.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
}
