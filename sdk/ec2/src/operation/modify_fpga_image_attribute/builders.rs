// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_fpga_image_attribute::_modify_fpga_image_attribute_output::ModifyFpgaImageAttributeOutputBuilder;

pub use crate::operation::modify_fpga_image_attribute::_modify_fpga_image_attribute_input::ModifyFpgaImageAttributeInputBuilder;

impl ModifyFpgaImageAttributeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_fpga_image_attribute();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyFpgaImageAttribute`.
///
/// <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyFpgaImageAttributeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_fpga_image_attribute::builders::ModifyFpgaImageAttributeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeOutput,
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
    > for ModifyFpgaImageAttributeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeOutput,
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyFpgaImageAttributeFluentBuilder {
    /// Creates a new `ModifyFpgaImageAttribute`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyFpgaImageAttribute as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_fpga_image_attribute::builders::ModifyFpgaImageAttributeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttribute::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttribute::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeOutput,
        crate::operation::modify_fpga_image_attribute::ModifyFpgaImageAttributeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the AFI.</p>
    pub fn fpga_image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.fpga_image_id(input.into());
        self
    }
    /// <p>The ID of the AFI.</p>
    pub fn set_fpga_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_fpga_image_id(input);
        self
    }
    /// <p>The ID of the AFI.</p>
    pub fn get_fpga_image_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_fpga_image_id()
    }
    /// <p>The name of the attribute.</p>
    pub fn attribute(mut self, input: crate::types::FpgaImageAttributeName) -> Self {
        self.inner = self.inner.attribute(input);
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::FpgaImageAttributeName>) -> Self {
        self.inner = self.inner.set_attribute(input);
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::FpgaImageAttributeName> {
        self.inner.get_attribute()
    }
    /// <p>The operation type.</p>
    pub fn operation_type(mut self, input: crate::types::OperationType) -> Self {
        self.inner = self.inner.operation_type(input);
        self
    }
    /// <p>The operation type.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<crate::types::OperationType>) -> Self {
        self.inner = self.inner.set_operation_type(input);
        self
    }
    /// <p>The operation type.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<crate::types::OperationType> {
        self.inner.get_operation_type()
    }
    /// Appends an item to `UserIds`.
    ///
    /// To override the contents of this collection use [`set_user_ids`](Self::set_user_ids).
    ///
    /// <p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn user_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_ids(input.into());
        self
    }
    /// <p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn set_user_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_user_ids(input);
        self
    }
    /// <p>The Amazon Web Services account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn get_user_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_user_ids()
    }
    /// Appends an item to `UserGroups`.
    ///
    /// To override the contents of this collection use [`set_user_groups`](Self::set_user_groups).
    ///
    /// <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn user_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_groups(input.into());
        self
    }
    /// <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn set_user_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_user_groups(input);
        self
    }
    /// <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub fn get_user_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_user_groups()
    }
    /// Appends an item to `ProductCodes`.
    ///
    /// To override the contents of this collection use [`set_product_codes`](Self::set_product_codes).
    ///
    /// <p>The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    pub fn product_codes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.product_codes(input.into());
        self
    }
    /// <p>The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    pub fn set_product_codes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_product_codes(input);
        self
    }
    /// <p>The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    pub fn get_product_codes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_product_codes()
    }
    /// <p>The load permission for the AFI.</p>
    pub fn load_permission(mut self, input: crate::types::LoadPermissionModifications) -> Self {
        self.inner = self.inner.load_permission(input);
        self
    }
    /// <p>The load permission for the AFI.</p>
    pub fn set_load_permission(mut self, input: ::std::option::Option<crate::types::LoadPermissionModifications>) -> Self {
        self.inner = self.inner.set_load_permission(input);
        self
    }
    /// <p>The load permission for the AFI.</p>
    pub fn get_load_permission(&self) -> &::std::option::Option<crate::types::LoadPermissionModifications> {
        self.inner.get_load_permission()
    }
    /// <p>A description for the AFI.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the AFI.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description for the AFI.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>A name for the AFI.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the AFI.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A name for the AFI.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
}
