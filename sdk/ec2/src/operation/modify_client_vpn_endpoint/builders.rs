// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_client_vpn_endpoint::_modify_client_vpn_endpoint_output::ModifyClientVpnEndpointOutputBuilder;

pub use crate::operation::modify_client_vpn_endpoint::_modify_client_vpn_endpoint_input::ModifyClientVpnEndpointInputBuilder;

/// Fluent builder constructing a request to `ModifyClientVpnEndpoint`.
///
/// <p>Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyClientVpnEndpointFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::modify_client_vpn_endpoint::builders::ModifyClientVpnEndpointInputBuilder,
}
impl ModifyClientVpnEndpointFluentBuilder {
    /// Creates a new `ModifyClientVpnEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_client_vpn_endpoint::ModifyClientVpnEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_client_vpn_endpoint::ModifyClientVpnEndpointError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_client_vpn_endpoint::ModifyClientVpnEndpointOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::modify_client_vpn_endpoint::ModifyClientVpnEndpointError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Client VPN endpoint to modify.</p>
    pub fn client_vpn_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_vpn_endpoint_id(input.into());
        self
    }
    /// <p>The ID of the Client VPN endpoint to modify.</p>
    pub fn set_client_vpn_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_vpn_endpoint_id(input);
        self
    }
    /// <p>The ARN of the server certificate to be used. The server certificate must be provisioned in Certificate Manager (ACM).</p>
    pub fn server_certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_certificate_arn(input.into());
        self
    }
    /// <p>The ARN of the server certificate to be used. The server certificate must be provisioned in Certificate Manager (ACM).</p>
    pub fn set_server_certificate_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_server_certificate_arn(input);
        self
    }
    /// <p>Information about the client connection logging options.</p>
    /// <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p>
    /// <ul>
    /// <li> <p>Client connection requests</p> </li>
    /// <li> <p>Client connection results (successful and unsuccessful)</p> </li>
    /// <li> <p>Reasons for unsuccessful client connection requests</p> </li>
    /// <li> <p>Client connection termination time</p> </li>
    /// </ul>
    pub fn connection_log_options(mut self, input: crate::types::ConnectionLogOptions) -> Self {
        self.inner = self.inner.connection_log_options(input);
        self
    }
    /// <p>Information about the client connection logging options.</p>
    /// <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p>
    /// <ul>
    /// <li> <p>Client connection requests</p> </li>
    /// <li> <p>Client connection results (successful and unsuccessful)</p> </li>
    /// <li> <p>Reasons for unsuccessful client connection requests</p> </li>
    /// <li> <p>Client connection termination time</p> </li>
    /// </ul>
    pub fn set_connection_log_options(
        mut self,
        input: std::option::Option<crate::types::ConnectionLogOptions>,
    ) -> Self {
        self.inner = self.inner.set_connection_log_options(input);
        self
    }
    /// <p>Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.</p>
    pub fn dns_servers(mut self, input: crate::types::DnsServersOptionsModifyStructure) -> Self {
        self.inner = self.inner.dns_servers(input);
        self
    }
    /// <p>Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.</p>
    pub fn set_dns_servers(
        mut self,
        input: std::option::Option<crate::types::DnsServersOptionsModifyStructure>,
    ) -> Self {
        self.inner = self.inner.set_dns_servers(input);
        self
    }
    /// <p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
    /// <p>Valid Values: <code>443</code> | <code>1194</code> </p>
    /// <p>Default Value: <code>443</code> </p>
    pub fn vpn_port(mut self, input: i32) -> Self {
        self.inner = self.inner.vpn_port(input);
        self
    }
    /// <p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p>
    /// <p>Valid Values: <code>443</code> | <code>1194</code> </p>
    /// <p>Default Value: <code>443</code> </p>
    pub fn set_vpn_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_vpn_port(input);
        self
    }
    /// <p>A brief description of the Client VPN endpoint.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A brief description of the Client VPN endpoint.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Indicates whether the VPN is split-tunnel.</p>
    /// <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.</p>
    pub fn split_tunnel(mut self, input: bool) -> Self {
        self.inner = self.inner.split_tunnel(input);
        self
    }
    /// <p>Indicates whether the VPN is split-tunnel.</p>
    /// <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-tunnel Client VPN endpoint</a> in the <i>Client VPN Administrator Guide</i>.</p>
    pub fn set_split_tunnel(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_split_tunnel(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// Appends an item to `SecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The IDs of one or more security groups to apply to the target network.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_group_ids(input.into());
        self
    }
    /// <p>The IDs of one or more security groups to apply to the target network.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_security_group_ids(input);
        self
    }
    /// <p>The ID of the VPC to associate with the Client VPN endpoint.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_id(input.into());
        self
    }
    /// <p>The ID of the VPC to associate with the Client VPN endpoint.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_id(input);
        self
    }
    /// <p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>
    pub fn self_service_portal(mut self, input: crate::types::SelfServicePortal) -> Self {
        self.inner = self.inner.self_service_portal(input);
        self
    }
    /// <p>Specify whether to enable the self-service portal for the Client VPN endpoint.</p>
    pub fn set_self_service_portal(
        mut self,
        input: std::option::Option<crate::types::SelfServicePortal>,
    ) -> Self {
        self.inner = self.inner.set_self_service_portal(input);
        self
    }
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub fn client_connect_options(mut self, input: crate::types::ClientConnectOptions) -> Self {
        self.inner = self.inner.client_connect_options(input);
        self
    }
    /// <p>The options for managing connection authorization for new client connections.</p>
    pub fn set_client_connect_options(
        mut self,
        input: std::option::Option<crate::types::ClientConnectOptions>,
    ) -> Self {
        self.inner = self.inner.set_client_connect_options(input);
        self
    }
    /// <p>The maximum VPN session duration time in hours.</p>
    /// <p>Valid values: <code>8 | 10 | 12 | 24</code> </p>
    /// <p>Default value: <code>24</code> </p>
    pub fn session_timeout_hours(mut self, input: i32) -> Self {
        self.inner = self.inner.session_timeout_hours(input);
        self
    }
    /// <p>The maximum VPN session duration time in hours.</p>
    /// <p>Valid values: <code>8 | 10 | 12 | 24</code> </p>
    /// <p>Default value: <code>24</code> </p>
    pub fn set_session_timeout_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_session_timeout_hours(input);
        self
    }
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub fn client_login_banner_options(
        mut self,
        input: crate::types::ClientLoginBannerOptions,
    ) -> Self {
        self.inner = self.inner.client_login_banner_options(input);
        self
    }
    /// <p>Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.</p>
    pub fn set_client_login_banner_options(
        mut self,
        input: std::option::Option<crate::types::ClientLoginBannerOptions>,
    ) -> Self {
        self.inner = self.inner.set_client_login_banner_options(input);
        self
    }
}
