// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::cancel_spot_fleet_requests::_cancel_spot_fleet_requests_output::CancelSpotFleetRequestsOutputBuilder;

pub use crate::operation::cancel_spot_fleet_requests::_cancel_spot_fleet_requests_input::CancelSpotFleetRequestsInputBuilder;

/// Fluent builder constructing a request to `CancelSpotFleetRequests`.
///
/// <p>Cancels the specified Spot Fleet requests.</p>
/// <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelSpotFleetRequestsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::cancel_spot_fleet_requests::builders::CancelSpotFleetRequestsInputBuilder,
}
impl CancelSpotFleetRequestsFluentBuilder {
    /// Creates a new `CancelSpotFleetRequests`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::cancel_spot_fleet_requests::CancelSpotFleetRequests,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_spot_fleet_requests::CancelSpotFleetRequestsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::cancel_spot_fleet_requests::CancelSpotFleetRequestsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_spot_fleet_requests::CancelSpotFleetRequestsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// Appends an item to `SpotFleetRequestIds`.
    ///
    /// To override the contents of this collection use [`set_spot_fleet_request_ids`](Self::set_spot_fleet_request_ids).
    ///
    /// <p>The IDs of the Spot Fleet requests.</p>
    pub fn spot_fleet_request_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.spot_fleet_request_ids(input.into());
        self
    }
    /// <p>The IDs of the Spot Fleet requests.</p>
    pub fn set_spot_fleet_request_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_spot_fleet_request_ids(input);
        self
    }
    /// <p>Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.</p>
    pub fn terminate_instances(mut self, input: bool) -> Self {
        self.inner = self.inner.terminate_instances(input);
        self
    }
    /// <p>Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.</p>
    pub fn set_terminate_instances(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_terminate_instances(input);
        self
    }
}
