// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIpamPrefixListResolverTargetInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The ID of the IPAM prefix list resolver that will manage the synchronization of CIDRs to the target prefix list.</p>
    pub ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the managed prefix list that will be synchronized with CIDRs selected by the IPAM prefix list resolver. This prefix list becomes an IPAM managed prefix list.</p>
    /// <p>An IPAM-managed prefix list is a customer-managed prefix list that has been associated with an IPAM prefix list resolver target. When a prefix list becomes IPAM managed, its CIDRs are automatically synchronized based on the IPAM prefix list resolver's CIDR selection rules, and direct CIDR modifications are restricted.</p>
    pub prefix_list_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the prefix list is located. This is required when referencing a prefix list in a different Region.</p>
    pub prefix_list_region: ::std::option::Option<::std::string::String>,
    /// <p>The specific version of the prefix list to target. If not specified, the resolver will target the latest version.</p>
    pub desired_version: ::std::option::Option<i64>,
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version of the prefix list.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub track_latest_version: ::std::option::Option<bool>,
    /// <p>The tags to apply to the IPAM prefix list resolver target during creation. Tags help you organize and manage your Amazon Web Services resources.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateIpamPrefixListResolverTargetInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver that will manage the synchronization of CIDRs to the target prefix list.</p>
    pub fn ipam_prefix_list_resolver_id(&self) -> ::std::option::Option<&str> {
        self.ipam_prefix_list_resolver_id.as_deref()
    }
    /// <p>The ID of the managed prefix list that will be synchronized with CIDRs selected by the IPAM prefix list resolver. This prefix list becomes an IPAM managed prefix list.</p>
    /// <p>An IPAM-managed prefix list is a customer-managed prefix list that has been associated with an IPAM prefix list resolver target. When a prefix list becomes IPAM managed, its CIDRs are automatically synchronized based on the IPAM prefix list resolver's CIDR selection rules, and direct CIDR modifications are restricted.</p>
    pub fn prefix_list_id(&self) -> ::std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The Amazon Web Services Region where the prefix list is located. This is required when referencing a prefix list in a different Region.</p>
    pub fn prefix_list_region(&self) -> ::std::option::Option<&str> {
        self.prefix_list_region.as_deref()
    }
    /// <p>The specific version of the prefix list to target. If not specified, the resolver will target the latest version.</p>
    pub fn desired_version(&self) -> ::std::option::Option<i64> {
        self.desired_version
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version of the prefix list.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub fn track_latest_version(&self) -> ::std::option::Option<bool> {
        self.track_latest_version
    }
    /// <p>The tags to apply to the IPAM prefix list resolver target during creation. Tags help you organize and manage your Amazon Web Services resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateIpamPrefixListResolverTargetInput {
    /// Creates a new builder-style object to manufacture [`CreateIpamPrefixListResolverTargetInput`](crate::operation::create_ipam_prefix_list_resolver_target::CreateIpamPrefixListResolverTargetInput).
    pub fn builder() -> crate::operation::create_ipam_prefix_list_resolver_target::builders::CreateIpamPrefixListResolverTargetInputBuilder {
        crate::operation::create_ipam_prefix_list_resolver_target::builders::CreateIpamPrefixListResolverTargetInputBuilder::default()
    }
}

/// A builder for [`CreateIpamPrefixListResolverTargetInput`](crate::operation::create_ipam_prefix_list_resolver_target::CreateIpamPrefixListResolverTargetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIpamPrefixListResolverTargetInputBuilder {
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) ipam_prefix_list_resolver_id: ::std::option::Option<::std::string::String>,
    pub(crate) prefix_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) prefix_list_region: ::std::option::Option<::std::string::String>,
    pub(crate) desired_version: ::std::option::Option<i64>,
    pub(crate) track_latest_version: ::std::option::Option<bool>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateIpamPrefixListResolverTargetInputBuilder {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>The ID of the IPAM prefix list resolver that will manage the synchronization of CIDRs to the target prefix list.</p>
    /// This field is required.
    pub fn ipam_prefix_list_resolver_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver that will manage the synchronization of CIDRs to the target prefix list.</p>
    pub fn set_ipam_prefix_list_resolver_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ipam_prefix_list_resolver_id = input;
        self
    }
    /// <p>The ID of the IPAM prefix list resolver that will manage the synchronization of CIDRs to the target prefix list.</p>
    pub fn get_ipam_prefix_list_resolver_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ipam_prefix_list_resolver_id
    }
    /// <p>The ID of the managed prefix list that will be synchronized with CIDRs selected by the IPAM prefix list resolver. This prefix list becomes an IPAM managed prefix list.</p>
    /// <p>An IPAM-managed prefix list is a customer-managed prefix list that has been associated with an IPAM prefix list resolver target. When a prefix list becomes IPAM managed, its CIDRs are automatically synchronized based on the IPAM prefix list resolver's CIDR selection rules, and direct CIDR modifications are restricted.</p>
    /// This field is required.
    pub fn prefix_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed prefix list that will be synchronized with CIDRs selected by the IPAM prefix list resolver. This prefix list becomes an IPAM managed prefix list.</p>
    /// <p>An IPAM-managed prefix list is a customer-managed prefix list that has been associated with an IPAM prefix list resolver target. When a prefix list becomes IPAM managed, its CIDRs are automatically synchronized based on the IPAM prefix list resolver's CIDR selection rules, and direct CIDR modifications are restricted.</p>
    pub fn set_prefix_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The ID of the managed prefix list that will be synchronized with CIDRs selected by the IPAM prefix list resolver. This prefix list becomes an IPAM managed prefix list.</p>
    /// <p>An IPAM-managed prefix list is a customer-managed prefix list that has been associated with an IPAM prefix list resolver target. When a prefix list becomes IPAM managed, its CIDRs are automatically synchronized based on the IPAM prefix list resolver's CIDR selection rules, and direct CIDR modifications are restricted.</p>
    pub fn get_prefix_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_id
    }
    /// <p>The Amazon Web Services Region where the prefix list is located. This is required when referencing a prefix list in a different Region.</p>
    /// This field is required.
    pub fn prefix_list_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix_list_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the prefix list is located. This is required when referencing a prefix list in a different Region.</p>
    pub fn set_prefix_list_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix_list_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the prefix list is located. This is required when referencing a prefix list in a different Region.</p>
    pub fn get_prefix_list_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix_list_region
    }
    /// <p>The specific version of the prefix list to target. If not specified, the resolver will target the latest version.</p>
    pub fn desired_version(mut self, input: i64) -> Self {
        self.desired_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specific version of the prefix list to target. If not specified, the resolver will target the latest version.</p>
    pub fn set_desired_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.desired_version = input;
        self
    }
    /// <p>The specific version of the prefix list to target. If not specified, the resolver will target the latest version.</p>
    pub fn get_desired_version(&self) -> &::std::option::Option<i64> {
        &self.desired_version
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version of the prefix list.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    /// This field is required.
    pub fn track_latest_version(mut self, input: bool) -> Self {
        self.track_latest_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version of the prefix list.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub fn set_track_latest_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.track_latest_version = input;
        self
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version of the prefix list.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub fn get_track_latest_version(&self) -> &::std::option::Option<bool> {
        &self.track_latest_version
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to apply to the IPAM prefix list resolver target during creation. Tags help you organize and manage your Amazon Web Services resources.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to apply to the IPAM prefix list resolver target during creation. Tags help you organize and manage your Amazon Web Services resources.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to apply to the IPAM prefix list resolver target during creation. Tags help you organize and manage your Amazon Web Services resources.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateIpamPrefixListResolverTargetInput`](crate::operation::create_ipam_prefix_list_resolver_target::CreateIpamPrefixListResolverTargetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_ipam_prefix_list_resolver_target::CreateIpamPrefixListResolverTargetInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_ipam_prefix_list_resolver_target::CreateIpamPrefixListResolverTargetInput {
                dry_run: self.dry_run,
                ipam_prefix_list_resolver_id: self.ipam_prefix_list_resolver_id,
                prefix_list_id: self.prefix_list_id,
                prefix_list_region: self.prefix_list_region,
                desired_version: self.desired_version,
                track_latest_version: self.track_latest_version,
                tag_specifications: self.tag_specifications,
                client_token: self.client_token,
            },
        )
    }
}
