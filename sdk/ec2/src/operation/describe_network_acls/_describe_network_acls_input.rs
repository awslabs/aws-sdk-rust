// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeNetworkAclsInput {
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li>
    /// <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li>
    /// <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li>
    /// <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li>
    /// <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li>
    /// <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li>
    /// <li> <p> <code>entry.egress</code> - A Boolean that indicates the type of rule. Specify <code>true</code> for egress rules, or <code>false</code> for ingress rules.</p> </li>
    /// <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li>
    /// <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li>
    /// <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p> </li>
    /// <li> <p> <code>tag</code>:<key>
    /// - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key
    /// <code>Owner</code> and the value
    /// <code>TeamA</code>, specify
    /// <code>tag:Owner</code> for the filter name and
    /// <code>TeamA</code> for the filter value.
    /// </key></p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>The IDs of the network ACLs.</p>
    /// <p>Default: Describes all your network ACLs.</p>
    pub network_acl_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl DescribeNetworkAclsInput {
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li>
    /// <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li>
    /// <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li>
    /// <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li>
    /// <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li>
    /// <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li>
    /// <li> <p> <code>entry.egress</code> - A Boolean that indicates the type of rule. Specify <code>true</code> for egress rules, or <code>false</code> for ingress rules.</p> </li>
    /// <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li>
    /// <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li>
    /// <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p> </li>
    /// <li> <p> <code>tag</code>:<key>
    /// - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key
    /// <code>Owner</code> and the value
    /// <code>TeamA</code>, specify
    /// <code>tag:Owner</code> for the filter name and
    /// <code>TeamA</code> for the filter value.
    /// </key></p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The IDs of the network ACLs.</p>
    /// <p>Default: Describes all your network ACLs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_acl_ids.is_none()`.
    pub fn network_acl_ids(&self) -> &[::std::string::String] {
        self.network_acl_ids.as_deref().unwrap_or_default()
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeNetworkAclsInput {
    /// Creates a new builder-style object to manufacture [`DescribeNetworkAclsInput`](crate::operation::describe_network_acls::DescribeNetworkAclsInput).
    pub fn builder() -> crate::operation::describe_network_acls::builders::DescribeNetworkAclsInputBuilder {
        crate::operation::describe_network_acls::builders::DescribeNetworkAclsInputBuilder::default()
    }
}

/// A builder for [`DescribeNetworkAclsInput`](crate::operation::describe_network_acls::DescribeNetworkAclsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeNetworkAclsInputBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) network_acl_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl DescribeNetworkAclsInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li>
    /// <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li>
    /// <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li>
    /// <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li>
    /// <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li>
    /// <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li>
    /// <li> <p> <code>entry.egress</code> - A Boolean that indicates the type of rule. Specify <code>true</code> for egress rules, or <code>false</code> for ingress rules.</p> </li>
    /// <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li>
    /// <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li>
    /// <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p> </li>
    /// <li> <p> <code>tag</code>:<key>
    /// - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key
    /// <code>Owner</code> and the value
    /// <code>TeamA</code>, specify
    /// <code>tag:Owner</code> for the filter name and
    /// <code>TeamA</code> for the filter value.
    /// </key></p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li>
    /// <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li>
    /// <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li>
    /// <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li>
    /// <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li>
    /// <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li>
    /// <li> <p> <code>entry.egress</code> - A Boolean that indicates the type of rule. Specify <code>true</code> for egress rules, or <code>false</code> for ingress rules.</p> </li>
    /// <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li>
    /// <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li>
    /// <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p> </li>
    /// <li> <p> <code>tag</code>:<key>
    /// - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key
    /// <code>Owner</code> and the value
    /// <code>TeamA</code>, specify
    /// <code>tag:Owner</code> for the filter name and
    /// <code>TeamA</code> for the filter value.
    /// </key></p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li>
    /// <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li>
    /// <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li>
    /// <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li>
    /// <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li>
    /// <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li>
    /// <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li>
    /// <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li>
    /// <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li>
    /// <li> <p> <code>entry.egress</code> - A Boolean that indicates the type of rule. Specify <code>true</code> for egress rules, or <code>false</code> for ingress rules.</p> </li>
    /// <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li>
    /// <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li>
    /// <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the network ACL.</p> </li>
    /// <li> <p> <code>tag</code>:<key>
    /// - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key
    /// <code>Owner</code> and the value
    /// <code>TeamA</code>, specify
    /// <code>tag:Owner</code> for the filter name and
    /// <code>TeamA</code> for the filter value.
    /// </key></p> </li>
    /// <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li>
    /// <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Appends an item to `network_acl_ids`.
    ///
    /// To override the contents of this collection use [`set_network_acl_ids`](Self::set_network_acl_ids).
    ///
    /// <p>The IDs of the network ACLs.</p>
    /// <p>Default: Describes all your network ACLs.</p>
    pub fn network_acl_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.network_acl_ids.unwrap_or_default();
        v.push(input.into());
        self.network_acl_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IDs of the network ACLs.</p>
    /// <p>Default: Describes all your network ACLs.</p>
    pub fn set_network_acl_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.network_acl_ids = input;
        self
    }
    /// <p>The IDs of the network ACLs.</p>
    /// <p>Default: Describes all your network ACLs.</p>
    pub fn get_network_acl_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.network_acl_ids
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`DescribeNetworkAclsInput`](crate::operation::describe_network_acls::DescribeNetworkAclsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_network_acls::DescribeNetworkAclsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_network_acls::DescribeNetworkAclsInput {
            filters: self.filters,
            dry_run: self.dry_run,
            network_acl_ids: self.network_acl_ids,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
