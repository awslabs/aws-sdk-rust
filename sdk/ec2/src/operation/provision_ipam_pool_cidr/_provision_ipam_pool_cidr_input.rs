// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProvisionIpamPoolCidrInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    #[doc(hidden)]
    pub dry_run: std::option::Option<bool>,
    /// <p>The ID of the IPAM pool to which you want to assign a CIDR.</p>
    #[doc(hidden)]
    pub ipam_pool_id: std::option::Option<std::string::String>,
    /// <p>The CIDR you want to assign to the IPAM pool.</p>
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
    /// <p>A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.</p>
    #[doc(hidden)]
    pub cidr_authorization_context: std::option::Option<crate::types::IpamCidrAuthorizationContext>,
}
impl ProvisionIpamPoolCidrInput {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> std::option::Option<bool> {
        self.dry_run
    }
    /// <p>The ID of the IPAM pool to which you want to assign a CIDR.</p>
    pub fn ipam_pool_id(&self) -> std::option::Option<&str> {
        self.ipam_pool_id.as_deref()
    }
    /// <p>The CIDR you want to assign to the IPAM pool.</p>
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
    /// <p>A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.</p>
    pub fn cidr_authorization_context(
        &self,
    ) -> std::option::Option<&crate::types::IpamCidrAuthorizationContext> {
        self.cidr_authorization_context.as_ref()
    }
}
impl ProvisionIpamPoolCidrInput {
    /// Creates a new builder-style object to manufacture [`ProvisionIpamPoolCidrInput`](crate::operation::provision_ipam_pool_cidr::ProvisionIpamPoolCidrInput).
    pub fn builder(
    ) -> crate::operation::provision_ipam_pool_cidr::builders::ProvisionIpamPoolCidrInputBuilder
    {
        crate::operation::provision_ipam_pool_cidr::builders::ProvisionIpamPoolCidrInputBuilder::default()
    }
}

/// A builder for [`ProvisionIpamPoolCidrInput`](crate::operation::provision_ipam_pool_cidr::ProvisionIpamPoolCidrInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProvisionIpamPoolCidrInputBuilder {
    pub(crate) dry_run: std::option::Option<bool>,
    pub(crate) ipam_pool_id: std::option::Option<std::string::String>,
    pub(crate) cidr: std::option::Option<std::string::String>,
    pub(crate) cidr_authorization_context:
        std::option::Option<crate::types::IpamCidrAuthorizationContext>,
}
impl ProvisionIpamPoolCidrInputBuilder {
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>The ID of the IPAM pool to which you want to assign a CIDR.</p>
    pub fn ipam_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ipam_pool_id = Some(input.into());
        self
    }
    /// <p>The ID of the IPAM pool to which you want to assign a CIDR.</p>
    pub fn set_ipam_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ipam_pool_id = input;
        self
    }
    /// <p>The CIDR you want to assign to the IPAM pool.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// <p>The CIDR you want to assign to the IPAM pool.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// <p>A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.</p>
    pub fn cidr_authorization_context(
        mut self,
        input: crate::types::IpamCidrAuthorizationContext,
    ) -> Self {
        self.cidr_authorization_context = Some(input);
        self
    }
    /// <p>A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.</p>
    pub fn set_cidr_authorization_context(
        mut self,
        input: std::option::Option<crate::types::IpamCidrAuthorizationContext>,
    ) -> Self {
        self.cidr_authorization_context = input;
        self
    }
    /// Consumes the builder and constructs a [`ProvisionIpamPoolCidrInput`](crate::operation::provision_ipam_pool_cidr::ProvisionIpamPoolCidrInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::provision_ipam_pool_cidr::ProvisionIpamPoolCidrInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::provision_ipam_pool_cidr::ProvisionIpamPoolCidrInput {
                dry_run: self.dry_run,
                ipam_pool_id: self.ipam_pool_id,
                cidr: self.cidr,
                cidr_authorization_context: self.cidr_authorization_context,
            },
        )
    }
}
