// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AllocateAddressOutput {
    /// <p>The ID that represents the allocation of the Elastic IP address.</p>
    pub allocation_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of an address pool that you own.</p>
    pub public_ipv4_pool: ::std::option::Option<::std::string::String>,
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    pub network_border_group: ::std::option::Option<::std::string::String>,
    /// <p>The network (<code>vpc</code>).</p>
    pub domain: ::std::option::Option<crate::types::DomainType>,
    /// <p>The customer-owned IP address.</p>
    pub customer_owned_ip: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the customer-owned address pool.</p>
    pub customer_owned_ipv4_pool: ::std::option::Option<::std::string::String>,
    /// <p>The carrier IP address. Available only for network interfaces that reside in a subnet in a Wavelength Zone.</p>
    pub carrier_ip: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon-owned IP address. Not available when using an address pool that you own.</p>
    pub public_ip: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl AllocateAddressOutput {
    /// <p>The ID that represents the allocation of the Elastic IP address.</p>
    pub fn allocation_id(&self) -> ::std::option::Option<&str> {
        self.allocation_id.as_deref()
    }
    /// <p>The ID of an address pool that you own.</p>
    pub fn public_ipv4_pool(&self) -> ::std::option::Option<&str> {
        self.public_ipv4_pool.as_deref()
    }
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    pub fn network_border_group(&self) -> ::std::option::Option<&str> {
        self.network_border_group.as_deref()
    }
    /// <p>The network (<code>vpc</code>).</p>
    pub fn domain(&self) -> ::std::option::Option<&crate::types::DomainType> {
        self.domain.as_ref()
    }
    /// <p>The customer-owned IP address.</p>
    pub fn customer_owned_ip(&self) -> ::std::option::Option<&str> {
        self.customer_owned_ip.as_deref()
    }
    /// <p>The ID of the customer-owned address pool.</p>
    pub fn customer_owned_ipv4_pool(&self) -> ::std::option::Option<&str> {
        self.customer_owned_ipv4_pool.as_deref()
    }
    /// <p>The carrier IP address. Available only for network interfaces that reside in a subnet in a Wavelength Zone.</p>
    pub fn carrier_ip(&self) -> ::std::option::Option<&str> {
        self.carrier_ip.as_deref()
    }
    /// <p>The Amazon-owned IP address. Not available when using an address pool that you own.</p>
    pub fn public_ip(&self) -> ::std::option::Option<&str> {
        self.public_ip.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for AllocateAddressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AllocateAddressOutput {
    /// Creates a new builder-style object to manufacture [`AllocateAddressOutput`](crate::operation::allocate_address::AllocateAddressOutput).
    pub fn builder() -> crate::operation::allocate_address::builders::AllocateAddressOutputBuilder {
        crate::operation::allocate_address::builders::AllocateAddressOutputBuilder::default()
    }
}

/// A builder for [`AllocateAddressOutput`](crate::operation::allocate_address::AllocateAddressOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AllocateAddressOutputBuilder {
    pub(crate) allocation_id: ::std::option::Option<::std::string::String>,
    pub(crate) public_ipv4_pool: ::std::option::Option<::std::string::String>,
    pub(crate) network_border_group: ::std::option::Option<::std::string::String>,
    pub(crate) domain: ::std::option::Option<crate::types::DomainType>,
    pub(crate) customer_owned_ip: ::std::option::Option<::std::string::String>,
    pub(crate) customer_owned_ipv4_pool: ::std::option::Option<::std::string::String>,
    pub(crate) carrier_ip: ::std::option::Option<::std::string::String>,
    pub(crate) public_ip: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl AllocateAddressOutputBuilder {
    /// <p>The ID that represents the allocation of the Elastic IP address.</p>
    pub fn allocation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.allocation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID that represents the allocation of the Elastic IP address.</p>
    pub fn set_allocation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.allocation_id = input;
        self
    }
    /// <p>The ID that represents the allocation of the Elastic IP address.</p>
    pub fn get_allocation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.allocation_id
    }
    /// <p>The ID of an address pool that you own.</p>
    pub fn public_ipv4_pool(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_ipv4_pool = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of an address pool that you own.</p>
    pub fn set_public_ipv4_pool(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_ipv4_pool = input;
        self
    }
    /// <p>The ID of an address pool that you own.</p>
    pub fn get_public_ipv4_pool(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_ipv4_pool
    }
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    pub fn network_border_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_border_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    pub fn set_network_border_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_border_group = input;
        self
    }
    /// <p>The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.</p>
    pub fn get_network_border_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_border_group
    }
    /// <p>The network (<code>vpc</code>).</p>
    pub fn domain(mut self, input: crate::types::DomainType) -> Self {
        self.domain = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network (<code>vpc</code>).</p>
    pub fn set_domain(mut self, input: ::std::option::Option<crate::types::DomainType>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The network (<code>vpc</code>).</p>
    pub fn get_domain(&self) -> &::std::option::Option<crate::types::DomainType> {
        &self.domain
    }
    /// <p>The customer-owned IP address.</p>
    pub fn customer_owned_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_owned_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer-owned IP address.</p>
    pub fn set_customer_owned_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_owned_ip = input;
        self
    }
    /// <p>The customer-owned IP address.</p>
    pub fn get_customer_owned_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_owned_ip
    }
    /// <p>The ID of the customer-owned address pool.</p>
    pub fn customer_owned_ipv4_pool(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_owned_ipv4_pool = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the customer-owned address pool.</p>
    pub fn set_customer_owned_ipv4_pool(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_owned_ipv4_pool = input;
        self
    }
    /// <p>The ID of the customer-owned address pool.</p>
    pub fn get_customer_owned_ipv4_pool(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_owned_ipv4_pool
    }
    /// <p>The carrier IP address. Available only for network interfaces that reside in a subnet in a Wavelength Zone.</p>
    pub fn carrier_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.carrier_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The carrier IP address. Available only for network interfaces that reside in a subnet in a Wavelength Zone.</p>
    pub fn set_carrier_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.carrier_ip = input;
        self
    }
    /// <p>The carrier IP address. Available only for network interfaces that reside in a subnet in a Wavelength Zone.</p>
    pub fn get_carrier_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.carrier_ip
    }
    /// <p>The Amazon-owned IP address. Not available when using an address pool that you own.</p>
    pub fn public_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon-owned IP address. Not available when using an address pool that you own.</p>
    pub fn set_public_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_ip = input;
        self
    }
    /// <p>The Amazon-owned IP address. Not available when using an address pool that you own.</p>
    pub fn get_public_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_ip
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AllocateAddressOutput`](crate::operation::allocate_address::AllocateAddressOutput).
    pub fn build(self) -> crate::operation::allocate_address::AllocateAddressOutput {
        crate::operation::allocate_address::AllocateAddressOutput {
            allocation_id: self.allocation_id,
            public_ipv4_pool: self.public_ipv4_pool,
            network_border_group: self.network_border_group,
            domain: self.domain,
            customer_owned_ip: self.customer_owned_ip,
            customer_owned_ipv4_pool: self.customer_owned_ipv4_pool,
            carrier_ip: self.carrier_ip,
            public_ip: self.public_ip,
            _request_id: self._request_id,
        }
    }
}
