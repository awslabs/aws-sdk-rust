// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_bundle_tasks::_describe_bundle_tasks_output::DescribeBundleTasksOutputBuilder;

pub use crate::operation::describe_bundle_tasks::_describe_bundle_tasks_input::DescribeBundleTasksInputBuilder;

/// Fluent builder constructing a request to `DescribeBundleTasks`.
///
/// <p>Describes the specified bundle tasks or all of your bundle tasks.</p> <note>
/// <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBundleTasksFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_bundle_tasks::builders::DescribeBundleTasksInputBuilder,
}
impl DescribeBundleTasksFluentBuilder {
    /// Creates a new `DescribeBundleTasks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_bundle_tasks::DescribeBundleTasks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_bundle_tasks::DescribeBundleTasksError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_bundle_tasks::DescribeBundleTasksOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_bundle_tasks::DescribeBundleTasksError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `BundleIds`.
    ///
    /// To override the contents of this collection use [`set_bundle_ids`](Self::set_bundle_ids).
    ///
    /// <p>The bundle task IDs.</p>
    /// <p>Default: Describes all your bundle tasks.</p>
    pub fn bundle_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bundle_ids(input.into());
        self
    }
    /// <p>The bundle task IDs.</p>
    /// <p>Default: Describes all your bundle tasks.</p>
    pub fn set_bundle_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_bundle_ids(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li>
    /// <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li>
    /// <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li>
    /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li>
    /// <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li>
    /// <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li>
    /// <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li>
    /// <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li>
    /// <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li>
    /// <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    /// <ul>
    /// <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li>
    /// <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li>
    /// <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li>
    /// <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li>
    /// <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li>
    /// <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li>
    /// <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li>
    /// <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li>
    /// <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li>
    /// <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
}
