// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_instance_metadata_defaults::_modify_instance_metadata_defaults_output::ModifyInstanceMetadataDefaultsOutputBuilder;

pub use crate::operation::modify_instance_metadata_defaults::_modify_instance_metadata_defaults_input::ModifyInstanceMetadataDefaultsInputBuilder;

impl crate::operation::modify_instance_metadata_defaults::builders::ModifyInstanceMetadataDefaultsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_instance_metadata_defaults();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyInstanceMetadataDefaults`.
///
/// <p>Modifies the default instance metadata service (IMDS) settings at the account level in the specified Amazon Web Services  Region.</p><note>
/// <p>To remove a parameter's account-level default setting, specify <code>no-preference</code>. If an account-level setting is cleared with <code>no-preference</code>, then the instance launch considers the other instance metadata settings. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order of precedence for instance metadata options</a> in the <i>Amazon EC2 User Guide</i>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyInstanceMetadataDefaultsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_instance_metadata_defaults::builders::ModifyInstanceMetadataDefaultsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsOutput,
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsError,
    > for ModifyInstanceMetadataDefaultsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsOutput,
            crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyInstanceMetadataDefaultsFluentBuilder {
    /// Creates a new `ModifyInstanceMetadataDefaults`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyInstanceMetadataDefaults as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_instance_metadata_defaults::builders::ModifyInstanceMetadataDefaultsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaults::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaults::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsOutput,
        crate::operation::modify_instance_metadata_defaults::ModifyInstanceMetadataDefaultsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn http_tokens(mut self, input: crate::types::MetadataDefaultHttpTokensState) -> Self {
        self.inner = self.inner.http_tokens(input);
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn set_http_tokens(mut self, input: ::std::option::Option<crate::types::MetadataDefaultHttpTokensState>) -> Self {
        self.inner = self.inner.set_http_tokens(input);
        self
    }
    /// <p>Indicates whether IMDSv2 is required.</p>
    /// <ul>
    /// <li>
    /// <p><code>optional</code> – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.</p></li>
    /// <li>
    /// <p><code>required</code> – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.</p></li>
    /// </ul>
    pub fn get_http_tokens(&self) -> &::std::option::Option<crate::types::MetadataDefaultHttpTokensState> {
        self.inner.get_http_tokens()
    }
    /// <p>The maximum number of hops that the metadata token can travel. To indicate no preference, specify <code>-1</code>.</p>
    /// <p>Possible values: Integers from <code>1</code> to <code>64</code>, and <code>-1</code> to indicate no preference</p>
    pub fn http_put_response_hop_limit(mut self, input: i32) -> Self {
        self.inner = self.inner.http_put_response_hop_limit(input);
        self
    }
    /// <p>The maximum number of hops that the metadata token can travel. To indicate no preference, specify <code>-1</code>.</p>
    /// <p>Possible values: Integers from <code>1</code> to <code>64</code>, and <code>-1</code> to indicate no preference</p>
    pub fn set_http_put_response_hop_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_http_put_response_hop_limit(input);
        self
    }
    /// <p>The maximum number of hops that the metadata token can travel. To indicate no preference, specify <code>-1</code>.</p>
    /// <p>Possible values: Integers from <code>1</code> to <code>64</code>, and <code>-1</code> to indicate no preference</p>
    pub fn get_http_put_response_hop_limit(&self) -> &::std::option::Option<i32> {
        self.inner.get_http_put_response_hop_limit()
    }
    /// <p>Enables or disables the IMDS endpoint on an instance. When disabled, the instance metadata can't be accessed.</p>
    pub fn http_endpoint(mut self, input: crate::types::DefaultInstanceMetadataEndpointState) -> Self {
        self.inner = self.inner.http_endpoint(input);
        self
    }
    /// <p>Enables or disables the IMDS endpoint on an instance. When disabled, the instance metadata can't be accessed.</p>
    pub fn set_http_endpoint(mut self, input: ::std::option::Option<crate::types::DefaultInstanceMetadataEndpointState>) -> Self {
        self.inner = self.inner.set_http_endpoint(input);
        self
    }
    /// <p>Enables or disables the IMDS endpoint on an instance. When disabled, the instance metadata can't be accessed.</p>
    pub fn get_http_endpoint(&self) -> &::std::option::Option<crate::types::DefaultInstanceMetadataEndpointState> {
        self.inner.get_http_endpoint()
    }
    /// <p>Enables or disables access to an instance's tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_metadata_tags(mut self, input: crate::types::DefaultInstanceMetadataTagsState) -> Self {
        self.inner = self.inner.instance_metadata_tags(input);
        self
    }
    /// <p>Enables or disables access to an instance's tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_instance_metadata_tags(mut self, input: ::std::option::Option<crate::types::DefaultInstanceMetadataTagsState>) -> Self {
        self.inner = self.inner.set_instance_metadata_tags(input);
        self
    }
    /// <p>Enables or disables access to an instance's tags from the instance metadata. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS">Work with instance tags using the instance metadata</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_instance_metadata_tags(&self) -> &::std::option::Option<crate::types::DefaultInstanceMetadataTagsState> {
        self.inner.get_instance_metadata_tags()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
}
