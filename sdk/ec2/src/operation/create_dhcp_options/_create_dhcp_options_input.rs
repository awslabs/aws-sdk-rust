// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDhcpOptionsInput {
    /// <p>A DHCP configuration option.</p>
    pub dhcp_configurations: ::std::option::Option<::std::vec::Vec<crate::types::NewDhcpConfiguration>>,
    /// <p>The tags to assign to the DHCP option.</p>
    pub tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl CreateDhcpOptionsInput {
    /// <p>A DHCP configuration option.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dhcp_configurations.is_none()`.
    pub fn dhcp_configurations(&self) -> &[crate::types::NewDhcpConfiguration] {
        self.dhcp_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The tags to assign to the DHCP option.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_specifications.is_none()`.
    pub fn tag_specifications(&self) -> &[crate::types::TagSpecification] {
        self.tag_specifications.as_deref().unwrap_or_default()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl CreateDhcpOptionsInput {
    /// Creates a new builder-style object to manufacture [`CreateDhcpOptionsInput`](crate::operation::create_dhcp_options::CreateDhcpOptionsInput).
    pub fn builder() -> crate::operation::create_dhcp_options::builders::CreateDhcpOptionsInputBuilder {
        crate::operation::create_dhcp_options::builders::CreateDhcpOptionsInputBuilder::default()
    }
}

/// A builder for [`CreateDhcpOptionsInput`](crate::operation::create_dhcp_options::CreateDhcpOptionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDhcpOptionsInputBuilder {
    pub(crate) dhcp_configurations: ::std::option::Option<::std::vec::Vec<crate::types::NewDhcpConfiguration>>,
    pub(crate) tag_specifications: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl CreateDhcpOptionsInputBuilder {
    /// Appends an item to `dhcp_configurations`.
    ///
    /// To override the contents of this collection use [`set_dhcp_configurations`](Self::set_dhcp_configurations).
    ///
    /// <p>A DHCP configuration option.</p>
    pub fn dhcp_configurations(mut self, input: crate::types::NewDhcpConfiguration) -> Self {
        let mut v = self.dhcp_configurations.unwrap_or_default();
        v.push(input);
        self.dhcp_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A DHCP configuration option.</p>
    pub fn set_dhcp_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NewDhcpConfiguration>>) -> Self {
        self.dhcp_configurations = input;
        self
    }
    /// <p>A DHCP configuration option.</p>
    pub fn get_dhcp_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NewDhcpConfiguration>> {
        &self.dhcp_configurations
    }
    /// Appends an item to `tag_specifications`.
    ///
    /// To override the contents of this collection use [`set_tag_specifications`](Self::set_tag_specifications).
    ///
    /// <p>The tags to assign to the DHCP option.</p>
    pub fn tag_specifications(mut self, input: crate::types::TagSpecification) -> Self {
        let mut v = self.tag_specifications.unwrap_or_default();
        v.push(input);
        self.tag_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to assign to the DHCP option.</p>
    pub fn set_tag_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>>) -> Self {
        self.tag_specifications = input;
        self
    }
    /// <p>The tags to assign to the DHCP option.</p>
    pub fn get_tag_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagSpecification>> {
        &self.tag_specifications
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`CreateDhcpOptionsInput`](crate::operation::create_dhcp_options::CreateDhcpOptionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_dhcp_options::CreateDhcpOptionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_dhcp_options::CreateDhcpOptionsInput {
            dhcp_configurations: self.dhcp_configurations,
            tag_specifications: self.tag_specifications,
            dry_run: self.dry_run,
        })
    }
}
