// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_ipam_prefix_list_resolver_target::_modify_ipam_prefix_list_resolver_target_output::ModifyIpamPrefixListResolverTargetOutputBuilder;

pub use crate::operation::modify_ipam_prefix_list_resolver_target::_modify_ipam_prefix_list_resolver_target_input::ModifyIpamPrefixListResolverTargetInputBuilder;

impl crate::operation::modify_ipam_prefix_list_resolver_target::builders::ModifyIpamPrefixListResolverTargetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_ipam_prefix_list_resolver_target();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyIpamPrefixListResolverTarget`.
///
/// <p>Modifies an IPAM prefix list resolver target. You can update version tracking settings and the desired version of the target prefix list.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyIpamPrefixListResolverTargetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_ipam_prefix_list_resolver_target::builders::ModifyIpamPrefixListResolverTargetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetOutput,
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetError,
    > for ModifyIpamPrefixListResolverTargetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetOutput,
            crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyIpamPrefixListResolverTargetFluentBuilder {
    /// Creates a new `ModifyIpamPrefixListResolverTargetFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyIpamPrefixListResolverTarget as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_ipam_prefix_list_resolver_target::builders::ModifyIpamPrefixListResolverTargetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTarget::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTarget::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetOutput,
        crate::operation::modify_ipam_prefix_list_resolver_target::ModifyIpamPrefixListResolverTargetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>A check for whether you have the required permissions for the action without actually making the request and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The ID of the IPAM prefix list resolver target to modify.</p>
    pub fn ipam_prefix_list_resolver_target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ipam_prefix_list_resolver_target_id(input.into());
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target to modify.</p>
    pub fn set_ipam_prefix_list_resolver_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ipam_prefix_list_resolver_target_id(input);
        self
    }
    /// <p>The ID of the IPAM prefix list resolver target to modify.</p>
    pub fn get_ipam_prefix_list_resolver_target_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ipam_prefix_list_resolver_target_id()
    }
    /// <p>The desired version of the prefix list to target. This allows you to pin the target to a specific version.</p>
    pub fn desired_version(mut self, input: i64) -> Self {
        self.inner = self.inner.desired_version(input);
        self
    }
    /// <p>The desired version of the prefix list to target. This allows you to pin the target to a specific version.</p>
    pub fn set_desired_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_desired_version(input);
        self
    }
    /// <p>The desired version of the prefix list to target. This allows you to pin the target to a specific version.</p>
    pub fn get_desired_version(&self) -> &::std::option::Option<i64> {
        self.inner.get_desired_version()
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub fn track_latest_version(mut self, input: bool) -> Self {
        self.inner = self.inner.track_latest_version(input);
        self
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub fn set_track_latest_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_track_latest_version(input);
        self
    }
    /// <p>Indicates whether the resolver target should automatically track the latest version of the prefix list. When enabled, the target will always synchronize with the most current version.</p>
    /// <p>Choose this for automatic updates when you want your prefix lists to stay current with infrastructure changes without manual intervention.</p>
    pub fn get_track_latest_version(&self) -> &::std::option::Option<bool> {
        self.inner.get_track_latest_version()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
