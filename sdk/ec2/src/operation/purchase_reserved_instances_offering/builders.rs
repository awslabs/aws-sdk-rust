// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::purchase_reserved_instances_offering::_purchase_reserved_instances_offering_output::PurchaseReservedInstancesOfferingOutputBuilder;

pub use crate::operation::purchase_reserved_instances_offering::_purchase_reserved_instances_offering_input::PurchaseReservedInstancesOfferingInputBuilder;

impl PurchaseReservedInstancesOfferingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.purchase_reserved_instances_offering();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PurchaseReservedInstancesOffering`.
///
/// <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p>
/// <p>Use <code>DescribeReservedInstancesOfferings</code> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <code>DescribeReservedInstances</code>.</p>
/// <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PurchaseReservedInstancesOfferingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::purchase_reserved_instances_offering::builders::PurchaseReservedInstancesOfferingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingOutput,
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingError,
    > for PurchaseReservedInstancesOfferingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingOutput,
            crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PurchaseReservedInstancesOfferingFluentBuilder {
    /// Creates a new `PurchaseReservedInstancesOffering`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PurchaseReservedInstancesOffering as a reference.
    pub fn as_input(&self) -> &crate::operation::purchase_reserved_instances_offering::builders::PurchaseReservedInstancesOfferingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOffering::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOffering::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingOutput,
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The number of Reserved Instances to purchase.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.inner = self.inner.instance_count(input);
        self
    }
    /// <p>The number of Reserved Instances to purchase.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_instance_count(input);
        self
    }
    /// <p>The number of Reserved Instances to purchase.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_instance_count()
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn reserved_instances_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.reserved_instances_offering_id(input.into());
        self
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn set_reserved_instances_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_reserved_instances_offering_id(input);
        self
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn get_reserved_instances_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_reserved_instances_offering_id()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn limit_price(mut self, input: crate::types::ReservedInstanceLimitPrice) -> Self {
        self.inner = self.inner.limit_price(input);
        self
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn set_limit_price(mut self, input: ::std::option::Option<crate::types::ReservedInstanceLimitPrice>) -> Self {
        self.inner = self.inner.set_limit_price(input);
        self
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn get_limit_price(&self) -> &::std::option::Option<crate::types::ReservedInstanceLimitPrice> {
        self.inner.get_limit_price()
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn purchase_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.purchase_time(input);
        self
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn set_purchase_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_purchase_time(input);
        self
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn get_purchase_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_purchase_time()
    }
}
