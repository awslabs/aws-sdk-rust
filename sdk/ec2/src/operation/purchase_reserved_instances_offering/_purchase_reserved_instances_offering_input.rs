// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the parameters for PurchaseReservedInstancesOffering.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PurchaseReservedInstancesOfferingInput {
    /// <p>The number of Reserved Instances to purchase.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub reserved_instances_offering_id: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: ::std::option::Option<bool>,
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub limit_price: ::std::option::Option<crate::types::ReservedInstanceLimitPrice>,
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub purchase_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PurchaseReservedInstancesOfferingInput {
    /// <p>The number of Reserved Instances to purchase.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn reserved_instances_offering_id(&self) -> ::std::option::Option<&str> {
        self.reserved_instances_offering_id.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn limit_price(&self) -> ::std::option::Option<&crate::types::ReservedInstanceLimitPrice> {
        self.limit_price.as_ref()
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn purchase_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.purchase_time.as_ref()
    }
}
impl PurchaseReservedInstancesOfferingInput {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedInstancesOfferingInput`](crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingInput).
    pub fn builder() -> crate::operation::purchase_reserved_instances_offering::builders::PurchaseReservedInstancesOfferingInputBuilder {
        crate::operation::purchase_reserved_instances_offering::builders::PurchaseReservedInstancesOfferingInputBuilder::default()
    }
}

/// A builder for [`PurchaseReservedInstancesOfferingInput`](crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PurchaseReservedInstancesOfferingInputBuilder {
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) reserved_instances_offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
    pub(crate) limit_price: ::std::option::Option<crate::types::ReservedInstanceLimitPrice>,
    pub(crate) purchase_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PurchaseReservedInstancesOfferingInputBuilder {
    /// <p>The number of Reserved Instances to purchase.</p>
    /// This field is required.
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of Reserved Instances to purchase.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The number of Reserved Instances to purchase.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    /// This field is required.
    pub fn reserved_instances_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_instances_offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn set_reserved_instances_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_instances_offering_id = input;
        self
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn get_reserved_instances_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_instances_offering_id
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn limit_price(mut self, input: crate::types::ReservedInstanceLimitPrice) -> Self {
        self.limit_price = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn set_limit_price(mut self, input: ::std::option::Option<crate::types::ReservedInstanceLimitPrice>) -> Self {
        self.limit_price = input;
        self
    }
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub fn get_limit_price(&self) -> &::std::option::Option<crate::types::ReservedInstanceLimitPrice> {
        &self.limit_price
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn purchase_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.purchase_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn set_purchase_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.purchase_time = input;
        self
    }
    /// <p>The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub fn get_purchase_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.purchase_time
    }
    /// Consumes the builder and constructs a [`PurchaseReservedInstancesOfferingInput`](crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::purchase_reserved_instances_offering::PurchaseReservedInstancesOfferingInput {
                instance_count: self.instance_count,
                reserved_instances_offering_id: self.reserved_instances_offering_id,
                dry_run: self.dry_run,
                limit_price: self.limit_price,
                purchase_time: self.purchase_time,
            },
        )
    }
}
